<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil" kind="class" language="Java" prot="public">
    <compoundname>org::apache::iceberg::spark::SparkSchemaUtil</compoundname>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1af549d8d6c4b68c3de524c3036302c517" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>org.apache.iceberg.spark.SparkSchemaUtil.SparkSchemaUtil</definition>
        <argsstring>()</argsstring>
        <name>SparkSchemaUtil</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="49" column="11" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1af549d8d6c4b68c3de524c3036302c517" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>org.apache.iceberg.spark.SparkSchemaUtil.SparkSchemaUtil</definition>
        <argsstring>()</argsstring>
        <name>SparkSchemaUtil</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="49" column="11" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1af549d8d6c4b68c3de524c3036302c517" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>org.apache.iceberg.spark.SparkSchemaUtil.SparkSchemaUtil</definition>
        <argsstring>()</argsstring>
        <name>SparkSchemaUtil</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="49" column="11" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="49" bodyend="49"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a07789112e1f41f120a451fd8e9ac9eca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.schemaForTable</definition>
        <argsstring>(SparkSession spark, String name)</argsstring>
        <name>schemaForTable</name>
        <param>
          <type>SparkSession</type>
          <declname>spark</declname>
        </param>
        <param>
          <type>String</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> for the given table with fresh field ids.</para>
<para>This creates a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> for an existing table by looking up the table&apos;s schema with Spark and converting that schema. Spark/Hive partition columns are included in the schema.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spark</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark session </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>a table name and (optional) database </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> for the table, if found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="61" column="24" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a241a8d6bc5a4bffaca61af876537bb62" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></type>
        <definition>static PartitionSpec org.apache.iceberg.spark.SparkSchemaUtil.specForTable</definition>
        <argsstring>(SparkSession spark, String name)</argsstring>
        <name>specForTable</name>
        <param>
          <type>SparkSession</type>
          <declname>spark</declname>
        </param>
        <param>
          <type>String</type>
          <declname>name</declname>
        </param>
        <exceptions> throws AnalysisException </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref> for the given table.</para>
<para>This creates a partition spec for an existing table by looking up the table&apos;s schema and creating a spec with identity partitions for each partition column.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spark</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark session </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>a table name and (optional) database </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref> for the table </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>AnalysisException</parametername>
</parameternamelist>
<parameterdescription>
<para>if thrown by the Spark catalog </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="76" column="31" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="76" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1adee2281b88301d1455b207021fd39ea7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>StructType</type>
        <definition>static StructType org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(Schema schema)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> to a <ref refid="" kindref="compound">Spark type</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent Spark type </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted to Spark </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="95" column="28" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a80a074044717e7610738c96dbf1f06f7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>DataType</type>
        <definition>static DataType org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(Type type)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1types_1_1Type" kindref="compound">Type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a <ref refid="" kindref="compound">Type</ref> to a <ref refid="" kindref="compound">Spark type</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>a Type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent Spark type </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted to Spark </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="106" column="26" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6671b8301c974df312e8462f549ad3f2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(StructType sparkType)</argsstring>
        <name>convert</name>
        <param>
          <type>StructType</type>
          <declname>sparkType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> with new field ids.</para>
<para>This conversion assigns fresh ids.</para>
<para>Some data types are represented as the same Spark type. These are converted to a default type.</para>
<para>To convert using a reference schema for field ids and ambiguous types, use {<ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a32408c3992c34733ef97ac0d755ee528" kindref="member">}.  sparkType a Spark StructType  the equivalent Schema  IllegalArgumentException if the type cannot be converted </ref></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="125" column="24" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a499632f155e4d9abfac56c52ef570db0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(StructType sparkType, boolean useTimestampWithoutZone)</argsstring>
        <name>convert</name>
        <param>
          <type>StructType</type>
          <declname>sparkType</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>useTimestampWithoutZone</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> with new field ids.</para>
<para>This conversion assigns fresh ids.</para>
<para>Some data types are represented as the same Spark type. These are converted to a default type.</para>
<para>To convert using a reference schema for field ids and ambiguous types, use {<ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a32408c3992c34733ef97ac0d755ee528" kindref="member">}.  sparkType a Spark StructType  useTimestampWithoutZone boolean flag indicates that timestamp should be stored without timezone  the equivalent Schema  IllegalArgumentException if the type cannot be converted </ref></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="146" column="24" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="146" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1af1caa3b1af06da7d4c600ab0e9359ae6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1types_1_1Type" kindref="compound">Type</ref></type>
        <definition>static Type org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(DataType sparkType)</argsstring>
        <name>convert</name>
        <param>
          <type>DataType</type>
          <declname>sparkType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="" kindref="compound">Type</ref> with new field ids.</para>
<para>This conversion assigns fresh ids.</para>
<para>Some data types are represented as the same Spark type. These are converted to a default type.</para>
<para>To convert using a reference schema for field ids and ambiguous types, use {<ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a32408c3992c34733ef97ac0d755ee528" kindref="member">}.  sparkType a Spark DataType  the equivalent Type  IllegalArgumentException if the type cannot be converted </ref></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="170" column="22" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a32408c3992c34733ef97ac0d755ee528" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(Schema baseSchema, StructType sparkType)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>baseSchema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>sparkType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> based on the given schema.</para>
<para>This conversion does not assign new ids; it uses ids from the base schema.</para>
<para>Data types, field order, and nullability will match the spark type. This conversion may return a schema that is not compatible with base schema.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseSchema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> on which conversion is based </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sparkType</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark StructType </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted or there are missing ids </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="187" column="24" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="187" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a77cedf9eff8cce9be2b4a6245ba7cc52" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(Schema baseSchema, StructType sparkType, boolean caseSensitive)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>baseSchema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>sparkType</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> based on the given schema.</para>
<para>This conversion does not assign new ids; it uses ids from the base schema.</para>
<para>Data types, field order, and nullability will match the spark type. This conversion may return a schema that is not compatible with base schema.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseSchema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> on which conversion is based </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sparkType</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark StructType </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>caseSensitive</parametername>
</parameternamelist>
<parameterdescription>
<para>when false, the case of schema fields is ignored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted or there are missing ids </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="205" column="24" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="205" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1ab7021c20b30794c2719aca5d5ba510a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.convertWithFreshIds</definition>
        <argsstring>(Schema baseSchema, StructType sparkType)</argsstring>
        <name>convertWithFreshIds</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>baseSchema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>sparkType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> based on the given schema.</para>
<para>This conversion will assign new ids for fields that are not found in the base schema.</para>
<para>Data types, field order, and nullability will match the spark type. This conversion may return a schema that is not compatible with base schema.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseSchema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> on which conversion is based </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sparkType</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark StructType </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted or there are missing ids </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="228" column="24" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="228" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1afe7284e6898b9eab0bdb683654612f82" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.convertWithFreshIds</definition>
        <argsstring>(Schema baseSchema, StructType sparkType, boolean caseSensitive)</argsstring>
        <name>convertWithFreshIds</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>baseSchema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>sparkType</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> based on the given schema.</para>
<para>This conversion will assign new ids for fields that are not found in the base schema.</para>
<para>Data types, field order, and nullability will match the spark type. This conversion may return a schema that is not compatible with base schema.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseSchema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> on which conversion is based </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sparkType</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark StructType </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>caseSensitive</parametername>
</parameternamelist>
<parameterdescription>
<para>when false, case of field names in schema is ignored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted or there are missing ids </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="246" column="24" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="246" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a238897f06abb0002eff6910d7d481b3d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.prune</definition>
        <argsstring>(Schema schema, StructType requestedType)</argsstring>
        <name>prune</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>requestedType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prune columns from a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> using a <ref refid="" kindref="compound">Spark type</ref> projection.</para>
<para>This requires that the Spark type is a projection of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref>. Nullability and types must match.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestedType</parametername>
</parameternamelist>
<parameterdescription>
<para>a projection of the Spark representation of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> corresponding to the Spark projection </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the Spark type does not match the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="269" column="24" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="269" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a7c33a92b3783fe1a6b9fd1b015c2cddb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.prune</definition>
        <argsstring>(Schema schema, StructType requestedType, List&lt; Expression &gt; filters)</argsstring>
        <name>prune</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>requestedType</declname>
        </param>
        <param>
          <type>List&lt; <ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref> &gt;</type>
          <declname>filters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prune columns from a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> using a <ref refid="" kindref="compound">Spark type</ref> projection.</para>
<para>This requires that the Spark type is a projection of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref>. Nullability and types must match.</para>
<para>The filters list of <ref refid="" kindref="compound">Expression</ref> is used to ensure that columns referenced by filters are projected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestedType</parametername>
</parameternamelist>
<parameterdescription>
<para>a projection of the Spark representation of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filters</parametername>
</parameternamelist>
<parameterdescription>
<para>a list of filters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> corresponding to the Spark projection </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the Spark type does not match the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="292" column="24" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="292" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1aead16f3ae687ebf05f757156569d4a82" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.prune</definition>
        <argsstring>(Schema schema, StructType requestedType, Expression filter, boolean caseSensitive)</argsstring>
        <name>prune</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>requestedType</declname>
        </param>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
          <declname>filter</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prune columns from a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> using a <ref refid="" kindref="compound">Spark type</ref> projection.</para>
<para>This requires that the Spark type is a projection of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref>. Nullability and types must match.</para>
<para>The filters list of <ref refid="" kindref="compound">Expression</ref> is used to ensure that columns referenced by filters are projected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestedType</parametername>
</parameternamelist>
<parameterdescription>
<para>a projection of the Spark representation of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>a filters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> corresponding to the Spark projection </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the Spark type does not match the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="316" column="24" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="316" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a7be302ae02f868ed58379712e587d8ad" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>static long org.apache.iceberg.spark.SparkSchemaUtil.estimateSize</definition>
        <argsstring>(StructType tableSchema, long totalRecords)</argsstring>
        <name>estimateSize</name>
        <param>
          <type>StructType</type>
          <declname>tableSchema</declname>
        </param>
        <param>
          <type>long</type>
          <declname>totalRecords</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Estimate approximate table size based on Spark schema and total records.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tableSchema</parametername>
</parameternamelist>
<parameterdescription>
<para>Spark schema </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>totalRecords</parametername>
</parameternamelist>
<parameterdescription>
<para>total records in the table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>approximate size based on table schema </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="359" column="22" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="359" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1afc6489f6dc6324d45b1064cbc94e0de7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void org.apache.iceberg.spark.SparkSchemaUtil.validateMetadataColumnReferences</definition>
        <argsstring>(Schema tableSchema, Schema readSchema)</argsstring>
        <name>validateMetadataColumnReferences</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>tableSchema</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>readSchema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="373" column="22" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="373" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6fbca0af98e6388b4eca254286dccf8c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Map&lt; Integer, String &gt;</type>
        <definition>static Map&lt;Integer, String&gt; org.apache.iceberg.spark.SparkSchemaUtil.indexQuotedNameById</definition>
        <argsstring>(Schema schema)</argsstring>
        <name>indexQuotedNameById</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="389" column="21" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="389" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a07789112e1f41f120a451fd8e9ac9eca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.schemaForTable</definition>
        <argsstring>(SparkSession spark, String name)</argsstring>
        <name>schemaForTable</name>
        <param>
          <type>SparkSession</type>
          <declname>spark</declname>
        </param>
        <param>
          <type>String</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> for the given table with fresh field ids.</para>
<para>This creates a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> for an existing table by looking up the table&apos;s schema with Spark and converting that schema. Spark/Hive partition columns are included in the schema.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spark</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark session </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>a table name and (optional) database </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> for the table, if found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="61" column="24" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a241a8d6bc5a4bffaca61af876537bb62" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></type>
        <definition>static PartitionSpec org.apache.iceberg.spark.SparkSchemaUtil.specForTable</definition>
        <argsstring>(SparkSession spark, String name)</argsstring>
        <name>specForTable</name>
        <param>
          <type>SparkSession</type>
          <declname>spark</declname>
        </param>
        <param>
          <type>String</type>
          <declname>name</declname>
        </param>
        <exceptions> throws AnalysisException </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref> for the given table.</para>
<para>This creates a partition spec for an existing table by looking up the table&apos;s schema and creating a spec with identity partitions for each partition column.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spark</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark session </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>a table name and (optional) database </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref> for the table </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>AnalysisException</parametername>
</parameternamelist>
<parameterdescription>
<para>if thrown by the Spark catalog </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="76" column="31" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="76" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1adee2281b88301d1455b207021fd39ea7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>StructType</type>
        <definition>static StructType org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(Schema schema)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> to a <ref refid="" kindref="compound">Spark type</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent Spark type </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted to Spark </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="95" column="28" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a80a074044717e7610738c96dbf1f06f7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>DataType</type>
        <definition>static DataType org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(Type type)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1types_1_1Type" kindref="compound">Type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a <ref refid="" kindref="compound">Type</ref> to a <ref refid="" kindref="compound">Spark type</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>a Type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent Spark type </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted to Spark </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="106" column="26" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6671b8301c974df312e8462f549ad3f2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(StructType sparkType)</argsstring>
        <name>convert</name>
        <param>
          <type>StructType</type>
          <declname>sparkType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> with new field ids.</para>
<para>This conversion assigns fresh ids.</para>
<para>Some data types are represented as the same Spark type. These are converted to a default type.</para>
<para>To convert using a reference schema for field ids and ambiguous types, use {<ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a32408c3992c34733ef97ac0d755ee528" kindref="member">}.  sparkType a Spark StructType  the equivalent Schema  IllegalArgumentException if the type cannot be converted </ref></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="125" column="24" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1af1caa3b1af06da7d4c600ab0e9359ae6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1types_1_1Type" kindref="compound">Type</ref></type>
        <definition>static Type org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(DataType sparkType)</argsstring>
        <name>convert</name>
        <param>
          <type>DataType</type>
          <declname>sparkType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="" kindref="compound">Type</ref> with new field ids.</para>
<para>This conversion assigns fresh ids.</para>
<para>Some data types are represented as the same Spark type. These are converted to a default type.</para>
<para>To convert using a reference schema for field ids and ambiguous types, use {<ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a32408c3992c34733ef97ac0d755ee528" kindref="member">}.  sparkType a Spark DataType  the equivalent Type  IllegalArgumentException if the type cannot be converted </ref></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="145" column="22" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="145" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a32408c3992c34733ef97ac0d755ee528" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(Schema baseSchema, StructType sparkType)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>baseSchema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>sparkType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> based on the given schema.</para>
<para>This conversion does not assign new ids; it uses ids from the base schema.</para>
<para>Data types, field order, and nullability will match the spark type. This conversion may return a schema that is not compatible with base schema.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseSchema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> on which conversion is based </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sparkType</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark StructType </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted or there are missing ids </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="162" column="24" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a77cedf9eff8cce9be2b4a6245ba7cc52" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(Schema baseSchema, StructType sparkType, boolean caseSensitive)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>baseSchema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>sparkType</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> based on the given schema.</para>
<para>This conversion does not assign new ids; it uses ids from the base schema.</para>
<para>Data types, field order, and nullability will match the spark type. This conversion may return a schema that is not compatible with base schema.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseSchema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> on which conversion is based </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sparkType</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark StructType </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>caseSensitive</parametername>
</parameternamelist>
<parameterdescription>
<para>when false, the case of schema fields is ignored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted or there are missing ids </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="180" column="24" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="180" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1ab7021c20b30794c2719aca5d5ba510a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.convertWithFreshIds</definition>
        <argsstring>(Schema baseSchema, StructType sparkType)</argsstring>
        <name>convertWithFreshIds</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>baseSchema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>sparkType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> based on the given schema.</para>
<para>This conversion will assign new ids for fields that are not found in the base schema.</para>
<para>Data types, field order, and nullability will match the spark type. This conversion may return a schema that is not compatible with base schema.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseSchema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> on which conversion is based </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sparkType</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark StructType </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted or there are missing ids </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="203" column="24" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="203" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1afe7284e6898b9eab0bdb683654612f82" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.convertWithFreshIds</definition>
        <argsstring>(Schema baseSchema, StructType sparkType, boolean caseSensitive)</argsstring>
        <name>convertWithFreshIds</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>baseSchema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>sparkType</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> based on the given schema.</para>
<para>This conversion will assign new ids for fields that are not found in the base schema.</para>
<para>Data types, field order, and nullability will match the spark type. This conversion may return a schema that is not compatible with base schema.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseSchema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> on which conversion is based </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sparkType</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark StructType </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>caseSensitive</parametername>
</parameternamelist>
<parameterdescription>
<para>when false, case of field names in schema is ignored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted or there are missing ids </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="221" column="24" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="221" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a238897f06abb0002eff6910d7d481b3d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.prune</definition>
        <argsstring>(Schema schema, StructType requestedType)</argsstring>
        <name>prune</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>requestedType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prune columns from a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> using a <ref refid="" kindref="compound">Spark type</ref> projection.</para>
<para>This requires that the Spark type is a projection of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref>. Nullability and types must match.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestedType</parametername>
</parameternamelist>
<parameterdescription>
<para>a projection of the Spark representation of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> corresponding to the Spark projection </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the Spark type does not match the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="244" column="24" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="244" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a7c33a92b3783fe1a6b9fd1b015c2cddb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.prune</definition>
        <argsstring>(Schema schema, StructType requestedType, List&lt; Expression &gt; filters)</argsstring>
        <name>prune</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>requestedType</declname>
        </param>
        <param>
          <type>List&lt; <ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref> &gt;</type>
          <declname>filters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prune columns from a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> using a <ref refid="" kindref="compound">Spark type</ref> projection.</para>
<para>This requires that the Spark type is a projection of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref>. Nullability and types must match.</para>
<para>The filters list of <ref refid="" kindref="compound">Expression</ref> is used to ensure that columns referenced by filters are projected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestedType</parametername>
</parameternamelist>
<parameterdescription>
<para>a projection of the Spark representation of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filters</parametername>
</parameternamelist>
<parameterdescription>
<para>a list of filters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> corresponding to the Spark projection </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the Spark type does not match the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="267" column="24" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="267" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1aead16f3ae687ebf05f757156569d4a82" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.prune</definition>
        <argsstring>(Schema schema, StructType requestedType, Expression filter, boolean caseSensitive)</argsstring>
        <name>prune</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>requestedType</declname>
        </param>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
          <declname>filter</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prune columns from a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> using a <ref refid="" kindref="compound">Spark type</ref> projection.</para>
<para>This requires that the Spark type is a projection of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref>. Nullability and types must match.</para>
<para>The filters list of <ref refid="" kindref="compound">Expression</ref> is used to ensure that columns referenced by filters are projected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestedType</parametername>
</parameternamelist>
<parameterdescription>
<para>a projection of the Spark representation of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>a filters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> corresponding to the Spark projection </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the Spark type does not match the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="291" column="24" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="291" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a7be302ae02f868ed58379712e587d8ad" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>static long org.apache.iceberg.spark.SparkSchemaUtil.estimateSize</definition>
        <argsstring>(StructType tableSchema, long totalRecords)</argsstring>
        <name>estimateSize</name>
        <param>
          <type>StructType</type>
          <declname>tableSchema</declname>
        </param>
        <param>
          <type>long</type>
          <declname>totalRecords</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Estimate approximate table size based on Spark schema and total records.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tableSchema</parametername>
</parameternamelist>
<parameterdescription>
<para>Spark schema </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>totalRecords</parametername>
</parameternamelist>
<parameterdescription>
<para>total records in the table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>approximate size based on table schema </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="334" column="22" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="334" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1afc6489f6dc6324d45b1064cbc94e0de7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void org.apache.iceberg.spark.SparkSchemaUtil.validateMetadataColumnReferences</definition>
        <argsstring>(Schema tableSchema, Schema readSchema)</argsstring>
        <name>validateMetadataColumnReferences</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>tableSchema</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>readSchema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="348" column="22" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="348" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6fbca0af98e6388b4eca254286dccf8c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Map&lt; Integer, String &gt;</type>
        <definition>static Map&lt;Integer, String&gt; org.apache.iceberg.spark.SparkSchemaUtil.indexQuotedNameById</definition>
        <argsstring>(Schema schema)</argsstring>
        <name>indexQuotedNameById</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="364" column="21" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="364" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a07789112e1f41f120a451fd8e9ac9eca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.schemaForTable</definition>
        <argsstring>(SparkSession spark, String name)</argsstring>
        <name>schemaForTable</name>
        <param>
          <type>SparkSession</type>
          <declname>spark</declname>
        </param>
        <param>
          <type>String</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> for the given table with fresh field ids.</para>
<para>This creates a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> for an existing table by looking up the table&apos;s schema with Spark and converting that schema. Spark/Hive partition columns are included in the schema.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spark</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark session </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>a table name and (optional) database </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> for the table, if found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="61" column="24" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a241a8d6bc5a4bffaca61af876537bb62" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></type>
        <definition>static PartitionSpec org.apache.iceberg.spark.SparkSchemaUtil.specForTable</definition>
        <argsstring>(SparkSession spark, String name)</argsstring>
        <name>specForTable</name>
        <param>
          <type>SparkSession</type>
          <declname>spark</declname>
        </param>
        <param>
          <type>String</type>
          <declname>name</declname>
        </param>
        <exceptions> throws AnalysisException </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref> for the given table.</para>
<para>This creates a partition spec for an existing table by looking up the table&apos;s schema and creating a spec with identity partitions for each partition column.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spark</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark session </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>a table name and (optional) database </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref> for the table </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>AnalysisException</parametername>
</parameternamelist>
<parameterdescription>
<para>if thrown by the Spark catalog </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="76" column="31" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="76" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1adee2281b88301d1455b207021fd39ea7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>StructType</type>
        <definition>static StructType org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(Schema schema)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> to a <ref refid="" kindref="compound">Spark type</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent Spark type </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted to Spark </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="95" column="28" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a80a074044717e7610738c96dbf1f06f7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>DataType</type>
        <definition>static DataType org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(Type type)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1types_1_1Type" kindref="compound">Type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a <ref refid="" kindref="compound">Type</ref> to a <ref refid="" kindref="compound">Spark type</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>a Type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent Spark type </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted to Spark </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="106" column="26" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6671b8301c974df312e8462f549ad3f2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(StructType sparkType)</argsstring>
        <name>convert</name>
        <param>
          <type>StructType</type>
          <declname>sparkType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> with new field ids.</para>
<para>This conversion assigns fresh ids.</para>
<para>Some data types are represented as the same Spark type. These are converted to a default type.</para>
<para>To convert using a reference schema for field ids and ambiguous types, use {<ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a32408c3992c34733ef97ac0d755ee528" kindref="member">}.  sparkType a Spark StructType  the equivalent Schema  IllegalArgumentException if the type cannot be converted </ref></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="125" column="24" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1af1caa3b1af06da7d4c600ab0e9359ae6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1types_1_1Type" kindref="compound">Type</ref></type>
        <definition>static Type org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(DataType sparkType)</argsstring>
        <name>convert</name>
        <param>
          <type>DataType</type>
          <declname>sparkType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="" kindref="compound">Type</ref> with new field ids.</para>
<para>This conversion assigns fresh ids.</para>
<para>Some data types are represented as the same Spark type. These are converted to a default type.</para>
<para>To convert using a reference schema for field ids and ambiguous types, use {<ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a32408c3992c34733ef97ac0d755ee528" kindref="member">}.  sparkType a Spark DataType  the equivalent Type  IllegalArgumentException if the type cannot be converted </ref></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="145" column="22" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="145" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a32408c3992c34733ef97ac0d755ee528" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(Schema baseSchema, StructType sparkType)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>baseSchema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>sparkType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> based on the given schema.</para>
<para>This conversion does not assign new ids; it uses ids from the base schema.</para>
<para>Data types, field order, and nullability will match the spark type. This conversion may return a schema that is not compatible with base schema.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseSchema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> on which conversion is based </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sparkType</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark StructType </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted or there are missing ids </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="162" column="24" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a77cedf9eff8cce9be2b4a6245ba7cc52" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.convert</definition>
        <argsstring>(Schema baseSchema, StructType sparkType, boolean caseSensitive)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>baseSchema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>sparkType</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> based on the given schema.</para>
<para>This conversion does not assign new ids; it uses ids from the base schema.</para>
<para>Data types, field order, and nullability will match the spark type. This conversion may return a schema that is not compatible with base schema.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseSchema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> on which conversion is based </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sparkType</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark StructType </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>caseSensitive</parametername>
</parameternamelist>
<parameterdescription>
<para>when false, the case of schema fields is ignored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted or there are missing ids </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="180" column="24" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="180" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1ab7021c20b30794c2719aca5d5ba510a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.convertWithFreshIds</definition>
        <argsstring>(Schema baseSchema, StructType sparkType)</argsstring>
        <name>convertWithFreshIds</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>baseSchema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>sparkType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> based on the given schema.</para>
<para>This conversion will assign new ids for fields that are not found in the base schema.</para>
<para>Data types, field order, and nullability will match the spark type. This conversion may return a schema that is not compatible with base schema.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseSchema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> on which conversion is based </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sparkType</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark StructType </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted or there are missing ids </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="203" column="24" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="203" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1afe7284e6898b9eab0bdb683654612f82" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.convertWithFreshIds</definition>
        <argsstring>(Schema baseSchema, StructType sparkType, boolean caseSensitive)</argsstring>
        <name>convertWithFreshIds</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>baseSchema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>sparkType</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Spark <ref refid="" kindref="compound">struct</ref> to a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> based on the given schema.</para>
<para>This conversion will assign new ids for fields that are not found in the base schema.</para>
<para>Data types, field order, and nullability will match the spark type. This conversion may return a schema that is not compatible with base schema.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baseSchema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> on which conversion is based </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sparkType</parametername>
</parameternamelist>
<parameterdescription>
<para>a Spark StructType </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>caseSensitive</parametername>
</parameternamelist>
<parameterdescription>
<para>when false, case of field names in schema is ignored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the equivalent <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the type cannot be converted or there are missing ids </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="221" column="24" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="221" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a238897f06abb0002eff6910d7d481b3d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.prune</definition>
        <argsstring>(Schema schema, StructType requestedType)</argsstring>
        <name>prune</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>requestedType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prune columns from a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> using a <ref refid="" kindref="compound">Spark type</ref> projection.</para>
<para>This requires that the Spark type is a projection of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref>. Nullability and types must match.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestedType</parametername>
</parameternamelist>
<parameterdescription>
<para>a projection of the Spark representation of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> corresponding to the Spark projection </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the Spark type does not match the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="244" column="24" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="244" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a7c33a92b3783fe1a6b9fd1b015c2cddb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.prune</definition>
        <argsstring>(Schema schema, StructType requestedType, List&lt; Expression &gt; filters)</argsstring>
        <name>prune</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>requestedType</declname>
        </param>
        <param>
          <type>List&lt; <ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref> &gt;</type>
          <declname>filters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prune columns from a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> using a <ref refid="" kindref="compound">Spark type</ref> projection.</para>
<para>This requires that the Spark type is a projection of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref>. Nullability and types must match.</para>
<para>The filters list of <ref refid="" kindref="compound">Expression</ref> is used to ensure that columns referenced by filters are projected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestedType</parametername>
</parameternamelist>
<parameterdescription>
<para>a projection of the Spark representation of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filters</parametername>
</parameternamelist>
<parameterdescription>
<para>a list of filters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> corresponding to the Spark projection </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the Spark type does not match the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="267" column="24" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="267" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1aead16f3ae687ebf05f757156569d4a82" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
        <definition>static Schema org.apache.iceberg.spark.SparkSchemaUtil.prune</definition>
        <argsstring>(Schema schema, StructType requestedType, Expression filter, boolean caseSensitive)</argsstring>
        <name>prune</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>StructType</type>
          <declname>requestedType</declname>
        </param>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
          <declname>filter</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prune columns from a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> using a <ref refid="" kindref="compound">Spark type</ref> projection.</para>
<para>This requires that the Spark type is a projection of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref>. Nullability and types must match.</para>
<para>The filters list of <ref refid="" kindref="compound">Expression</ref> is used to ensure that columns referenced by filters are projected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requestedType</parametername>
</parameternamelist>
<parameterdescription>
<para>a projection of the Spark representation of the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>a filters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> corresponding to the Spark projection </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the Spark type does not match the <ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="291" column="24" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="291" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a7be302ae02f868ed58379712e587d8ad" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>static long org.apache.iceberg.spark.SparkSchemaUtil.estimateSize</definition>
        <argsstring>(StructType tableSchema, long totalRecords)</argsstring>
        <name>estimateSize</name>
        <param>
          <type>StructType</type>
          <declname>tableSchema</declname>
        </param>
        <param>
          <type>long</type>
          <declname>totalRecords</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Estimate approximate table size based on Spark schema and total records.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tableSchema</parametername>
</parameternamelist>
<parameterdescription>
<para>Spark schema </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>totalRecords</parametername>
</parameternamelist>
<parameterdescription>
<para>total records in the table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>approximate size based on table schema </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="334" column="22" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="334" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1afc6489f6dc6324d45b1064cbc94e0de7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void org.apache.iceberg.spark.SparkSchemaUtil.validateMetadataColumnReferences</definition>
        <argsstring>(Schema tableSchema, Schema readSchema)</argsstring>
        <name>validateMetadataColumnReferences</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>tableSchema</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>readSchema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="348" column="22" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="348" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6fbca0af98e6388b4eca254286dccf8c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Map&lt; Integer, String &gt;</type>
        <definition>static Map&lt;Integer, String&gt; org.apache.iceberg.spark.SparkSchemaUtil.indexQuotedNameById</definition>
        <argsstring>(Schema schema)</argsstring>
        <name>indexQuotedNameById</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="364" column="21" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="364" bodyend="367"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a5f06e493d25db7d920d29751fbc77d87" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></type>
        <definition>static PartitionSpec org.apache.iceberg.spark.SparkSchemaUtil.identitySpec</definition>
        <argsstring>(Schema schema, Collection&lt; Column &gt; columns)</argsstring>
        <name>identitySpec</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>Collection&lt; Column &gt;</type>
          <declname>columns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="328" column="32" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="328" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6c6a9db027604eeeafa590c2a44bcfd4" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></type>
        <definition>static PartitionSpec org.apache.iceberg.spark.SparkSchemaUtil.identitySpec</definition>
        <argsstring>(Schema schema, List&lt; String &gt; partitionNames)</argsstring>
        <name>identitySpec</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>List&lt; String &gt;</type>
          <declname>partitionNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="339" column="32" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="339" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a5f06e493d25db7d920d29751fbc77d87" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></type>
        <definition>static PartitionSpec org.apache.iceberg.spark.SparkSchemaUtil.identitySpec</definition>
        <argsstring>(Schema schema, Collection&lt; Column &gt; columns)</argsstring>
        <name>identitySpec</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>Collection&lt; Column &gt;</type>
          <declname>columns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="303" column="32" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="303" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6c6a9db027604eeeafa590c2a44bcfd4" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></type>
        <definition>static PartitionSpec org.apache.iceberg.spark.SparkSchemaUtil.identitySpec</definition>
        <argsstring>(Schema schema, List&lt; String &gt; partitionNames)</argsstring>
        <name>identitySpec</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>List&lt; String &gt;</type>
          <declname>partitionNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="314" column="32" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="314" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a5f06e493d25db7d920d29751fbc77d87" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></type>
        <definition>static PartitionSpec org.apache.iceberg.spark.SparkSchemaUtil.identitySpec</definition>
        <argsstring>(Schema schema, Collection&lt; Column &gt; columns)</argsstring>
        <name>identitySpec</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>Collection&lt; Column &gt;</type>
          <declname>columns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="303" column="32" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="303" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6c6a9db027604eeeafa590c2a44bcfd4" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></type>
        <definition>static PartitionSpec org.apache.iceberg.spark.SparkSchemaUtil.identitySpec</definition>
        <argsstring>(Schema schema, List&lt; String &gt; partitionNames)</argsstring>
        <name>identitySpec</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>List&lt; String &gt;</type>
          <declname>partitionNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="314" column="32" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="314" bodyend="325"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Helper methods for working with Spark/Hive metadata. </para>
    </detaileddescription>
    <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" line="48" column="29" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java" bodystart="48" bodyend="393"/>
    <listofallmembers>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1adee2281b88301d1455b207021fd39ea7" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a80a074044717e7610738c96dbf1f06f7" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6671b8301c974df312e8462f549ad3f2" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a499632f155e4d9abfac56c52ef570db0" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1af1caa3b1af06da7d4c600ab0e9359ae6" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a32408c3992c34733ef97ac0d755ee528" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a77cedf9eff8cce9be2b4a6245ba7cc52" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1adee2281b88301d1455b207021fd39ea7" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a80a074044717e7610738c96dbf1f06f7" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6671b8301c974df312e8462f549ad3f2" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1af1caa3b1af06da7d4c600ab0e9359ae6" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a32408c3992c34733ef97ac0d755ee528" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a77cedf9eff8cce9be2b4a6245ba7cc52" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1adee2281b88301d1455b207021fd39ea7" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a80a074044717e7610738c96dbf1f06f7" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6671b8301c974df312e8462f549ad3f2" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1af1caa3b1af06da7d4c600ab0e9359ae6" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a32408c3992c34733ef97ac0d755ee528" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a77cedf9eff8cce9be2b4a6245ba7cc52" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convert</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1ab7021c20b30794c2719aca5d5ba510a0" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convertWithFreshIds</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1afe7284e6898b9eab0bdb683654612f82" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convertWithFreshIds</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1ab7021c20b30794c2719aca5d5ba510a0" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convertWithFreshIds</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1afe7284e6898b9eab0bdb683654612f82" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convertWithFreshIds</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1ab7021c20b30794c2719aca5d5ba510a0" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convertWithFreshIds</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1afe7284e6898b9eab0bdb683654612f82" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>convertWithFreshIds</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a7be302ae02f868ed58379712e587d8ad" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>estimateSize</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a7be302ae02f868ed58379712e587d8ad" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>estimateSize</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a7be302ae02f868ed58379712e587d8ad" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>estimateSize</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a5f06e493d25db7d920d29751fbc77d87" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>identitySpec</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6c6a9db027604eeeafa590c2a44bcfd4" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>identitySpec</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a5f06e493d25db7d920d29751fbc77d87" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>identitySpec</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6c6a9db027604eeeafa590c2a44bcfd4" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>identitySpec</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a5f06e493d25db7d920d29751fbc77d87" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>identitySpec</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6c6a9db027604eeeafa590c2a44bcfd4" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>identitySpec</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6fbca0af98e6388b4eca254286dccf8c" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>indexQuotedNameById</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6fbca0af98e6388b4eca254286dccf8c" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>indexQuotedNameById</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a6fbca0af98e6388b4eca254286dccf8c" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>indexQuotedNameById</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a238897f06abb0002eff6910d7d481b3d" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>prune</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a7c33a92b3783fe1a6b9fd1b015c2cddb" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>prune</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1aead16f3ae687ebf05f757156569d4a82" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>prune</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a238897f06abb0002eff6910d7d481b3d" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>prune</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a7c33a92b3783fe1a6b9fd1b015c2cddb" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>prune</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1aead16f3ae687ebf05f757156569d4a82" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>prune</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a238897f06abb0002eff6910d7d481b3d" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>prune</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a7c33a92b3783fe1a6b9fd1b015c2cddb" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>prune</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1aead16f3ae687ebf05f757156569d4a82" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>prune</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a07789112e1f41f120a451fd8e9ac9eca" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>schemaForTable</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a07789112e1f41f120a451fd8e9ac9eca" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>schemaForTable</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a07789112e1f41f120a451fd8e9ac9eca" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>schemaForTable</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1af549d8d6c4b68c3de524c3036302c517" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>SparkSchemaUtil</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1af549d8d6c4b68c3de524c3036302c517" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>SparkSchemaUtil</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1af549d8d6c4b68c3de524c3036302c517" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>SparkSchemaUtil</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a241a8d6bc5a4bffaca61af876537bb62" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>specForTable</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a241a8d6bc5a4bffaca61af876537bb62" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>specForTable</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1a241a8d6bc5a4bffaca61af876537bb62" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>specForTable</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1afc6489f6dc6324d45b1064cbc94e0de7" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>validateMetadataColumnReferences</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1afc6489f6dc6324d45b1064cbc94e0de7" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>validateMetadataColumnReferences</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SparkSchemaUtil_1afc6489f6dc6324d45b1064cbc94e0de7" prot="public" virt="non-virtual"><scope>org::apache::iceberg::spark::SparkSchemaUtil</scope><name>validateMetadataColumnReferences</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader" kind="class" language="Java" prot="package" abstract="yes">
    <compoundname>org::apache::iceberg::spark::source::BaseRowReader</compoundname>
    <basecompoundref prot="public" virt="non-virtual">org::apache::iceberg::spark::source::BaseReader&lt; InternalRow, T &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>T</type>
        <typeconstraint><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1ScanTask" kindref="compound">ScanTask</ref></typeconstraint>
      </param>
    </templateparamlist>
      <sectiondef kind="package-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1af9138a2f0d9b0388c8b1fe91016d9006" prot="package" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>org.apache.iceberg.spark.source.BaseRowReader&lt; T extends ScanTask &gt;.BaseRowReader</definition>
        <argsstring>(Table table, ScanTaskGroup&lt; T &gt; taskGroup, Schema tableSchema, Schema expectedSchema, boolean caseSensitive)</argsstring>
        <name>BaseRowReader</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1Table" kindref="compound">Table</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1ScanTaskGroup" kindref="compound">ScanTaskGroup</ref>&lt; T &gt;</type>
          <declname>taskGroup</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>tableSchema</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>expectedSchema</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" line="42" column="3" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" bodystart="42" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1af9138a2f0d9b0388c8b1fe91016d9006" prot="package" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>org.apache.iceberg.spark.source.BaseRowReader&lt; T extends ScanTask &gt;.BaseRowReader</definition>
        <argsstring>(Table table, ScanTaskGroup&lt; T &gt; taskGroup, Schema tableSchema, Schema expectedSchema, boolean caseSensitive)</argsstring>
        <name>BaseRowReader</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1Table" kindref="compound">Table</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1ScanTaskGroup" kindref="compound">ScanTaskGroup</ref>&lt; T &gt;</type>
          <declname>taskGroup</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>tableSchema</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>expectedSchema</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" line="42" column="3" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" bodystart="42" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1af9138a2f0d9b0388c8b1fe91016d9006" prot="package" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>org.apache.iceberg.spark.source.BaseRowReader&lt; T extends ScanTask &gt;.BaseRowReader</definition>
        <argsstring>(Table table, ScanTaskGroup&lt; T &gt; taskGroup, Schema tableSchema, Schema expectedSchema, boolean caseSensitive)</argsstring>
        <name>BaseRowReader</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1Table" kindref="compound">Table</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1ScanTaskGroup" kindref="compound">ScanTaskGroup</ref>&lt; T &gt;</type>
          <declname>taskGroup</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>tableSchema</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>expectedSchema</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" line="42" column="3" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" bodystart="42" bodyend="49"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1af4d1b66aeb90abad8b0efc2933ab08db" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1CloseableIterable" kindref="compound">CloseableIterable</ref>&lt; InternalRow &gt;</type>
        <definition>CloseableIterable&lt;InternalRow&gt; org.apache.iceberg.spark.source.BaseRowReader&lt; T extends ScanTask &gt;.newIterable</definition>
        <argsstring>(InputFile file, FileFormat format, long start, long length, Expression residual, Schema projection, Map&lt; Integer, ?&gt; idToConstant)</argsstring>
        <name>newIterable</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1InputFile" kindref="compound">InputFile</ref></type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="enumorg_1_1apache_1_1iceberg_1_1FileFormat" kindref="compound">FileFormat</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>long</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
          <declname>residual</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>projection</declname>
        </param>
        <param>
          <type>Map&lt; Integer, ?&gt;</type>
          <declname>idToConstant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" line="51" column="31" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" bodystart="51" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1af4d1b66aeb90abad8b0efc2933ab08db" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1CloseableIterable" kindref="compound">CloseableIterable</ref>&lt; InternalRow &gt;</type>
        <definition>CloseableIterable&lt;InternalRow&gt; org.apache.iceberg.spark.source.BaseRowReader&lt; T extends ScanTask &gt;.newIterable</definition>
        <argsstring>(InputFile file, FileFormat format, long start, long length, Expression residual, Schema projection, Map&lt; Integer, ?&gt; idToConstant)</argsstring>
        <name>newIterable</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1InputFile" kindref="compound">InputFile</ref></type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="enumorg_1_1apache_1_1iceberg_1_1FileFormat" kindref="compound">FileFormat</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>long</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
          <declname>residual</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>projection</declname>
        </param>
        <param>
          <type>Map&lt; Integer, ?&gt;</type>
          <declname>idToConstant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" line="51" column="31" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" bodystart="51" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1af4d1b66aeb90abad8b0efc2933ab08db" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1CloseableIterable" kindref="compound">CloseableIterable</ref>&lt; InternalRow &gt;</type>
        <definition>CloseableIterable&lt;InternalRow&gt; org.apache.iceberg.spark.source.BaseRowReader&lt; T extends ScanTask &gt;.newIterable</definition>
        <argsstring>(InputFile file, FileFormat format, long start, long length, Expression residual, Schema projection, Map&lt; Integer, ?&gt; idToConstant)</argsstring>
        <name>newIterable</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1InputFile" kindref="compound">InputFile</ref></type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="enumorg_1_1apache_1_1iceberg_1_1FileFormat" kindref="compound">FileFormat</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>long</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
          <declname>residual</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>projection</declname>
        </param>
        <param>
          <type>Map&lt; Integer, ?&gt;</type>
          <declname>idToConstant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" line="51" column="31" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" bodystart="51" bodyend="72"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1ac5934612927eb0d9200cd6943651ab4c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1CloseableIterable" kindref="compound">CloseableIterable</ref>&lt; InternalRow &gt;</type>
        <definition>CloseableIterable&lt;InternalRow&gt; org.apache.iceberg.spark.source.BaseRowReader&lt; T extends ScanTask &gt;.newAvroIterable</definition>
        <argsstring>(InputFile file, long start, long length, Schema projection, Map&lt; Integer, ?&gt; idToConstant)</argsstring>
        <name>newAvroIterable</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1InputFile" kindref="compound">InputFile</ref></type>
          <declname>file</declname>
        </param>
        <param>
          <type>long</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>projection</declname>
        </param>
        <param>
          <type>Map&lt; Integer, ?&gt;</type>
          <declname>idToConstant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" line="74" column="29" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" bodystart="74" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1a0fd9f41d4b01b4c147bf8071889e8abe" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1CloseableIterable" kindref="compound">CloseableIterable</ref>&lt; InternalRow &gt;</type>
        <definition>CloseableIterable&lt;InternalRow&gt; org.apache.iceberg.spark.source.BaseRowReader&lt; T extends ScanTask &gt;.newParquetIterable</definition>
        <argsstring>(InputFile file, long start, long length, Expression residual, Schema readSchema, Map&lt; Integer, ?&gt; idToConstant)</argsstring>
        <name>newParquetIterable</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1InputFile" kindref="compound">InputFile</ref></type>
          <declname>file</declname>
        </param>
        <param>
          <type>long</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
          <declname>residual</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>readSchema</declname>
        </param>
        <param>
          <type>Map&lt; Integer, ?&gt;</type>
          <declname>idToConstant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" line="85" column="29" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" bodystart="85" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1a7c0aa3044289dff43b5b26e61ac4145f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1CloseableIterable" kindref="compound">CloseableIterable</ref>&lt; InternalRow &gt;</type>
        <definition>CloseableIterable&lt;InternalRow&gt; org.apache.iceberg.spark.source.BaseRowReader&lt; T extends ScanTask &gt;.newOrcIterable</definition>
        <argsstring>(InputFile file, long start, long length, Expression residual, Schema readSchema, Map&lt; Integer, ?&gt; idToConstant)</argsstring>
        <name>newOrcIterable</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1InputFile" kindref="compound">InputFile</ref></type>
          <declname>file</declname>
        </param>
        <param>
          <type>long</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
          <declname>residual</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>readSchema</declname>
        </param>
        <param>
          <type>Map&lt; Integer, ?&gt;</type>
          <declname>idToConstant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" line="104" column="29" bodyfile="spark/v3.3/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" bodystart="104" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1ac5934612927eb0d9200cd6943651ab4c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1CloseableIterable" kindref="compound">CloseableIterable</ref>&lt; InternalRow &gt;</type>
        <definition>CloseableIterable&lt;InternalRow&gt; org.apache.iceberg.spark.source.BaseRowReader&lt; T extends ScanTask &gt;.newAvroIterable</definition>
        <argsstring>(InputFile file, long start, long length, Schema projection, Map&lt; Integer, ?&gt; idToConstant)</argsstring>
        <name>newAvroIterable</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1InputFile" kindref="compound">InputFile</ref></type>
          <declname>file</declname>
        </param>
        <param>
          <type>long</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>projection</declname>
        </param>
        <param>
          <type>Map&lt; Integer, ?&gt;</type>
          <declname>idToConstant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" line="74" column="29" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" bodystart="74" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1a0fd9f41d4b01b4c147bf8071889e8abe" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1CloseableIterable" kindref="compound">CloseableIterable</ref>&lt; InternalRow &gt;</type>
        <definition>CloseableIterable&lt;InternalRow&gt; org.apache.iceberg.spark.source.BaseRowReader&lt; T extends ScanTask &gt;.newParquetIterable</definition>
        <argsstring>(InputFile file, long start, long length, Expression residual, Schema readSchema, Map&lt; Integer, ?&gt; idToConstant)</argsstring>
        <name>newParquetIterable</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1InputFile" kindref="compound">InputFile</ref></type>
          <declname>file</declname>
        </param>
        <param>
          <type>long</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
          <declname>residual</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>readSchema</declname>
        </param>
        <param>
          <type>Map&lt; Integer, ?&gt;</type>
          <declname>idToConstant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" line="85" column="29" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" bodystart="85" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1a7c0aa3044289dff43b5b26e61ac4145f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1CloseableIterable" kindref="compound">CloseableIterable</ref>&lt; InternalRow &gt;</type>
        <definition>CloseableIterable&lt;InternalRow&gt; org.apache.iceberg.spark.source.BaseRowReader&lt; T extends ScanTask &gt;.newOrcIterable</definition>
        <argsstring>(InputFile file, long start, long length, Expression residual, Schema readSchema, Map&lt; Integer, ?&gt; idToConstant)</argsstring>
        <name>newOrcIterable</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1InputFile" kindref="compound">InputFile</ref></type>
          <declname>file</declname>
        </param>
        <param>
          <type>long</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
          <declname>residual</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>readSchema</declname>
        </param>
        <param>
          <type>Map&lt; Integer, ?&gt;</type>
          <declname>idToConstant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" line="104" column="29" bodyfile="spark/v3.4/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" bodystart="104" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1ac5934612927eb0d9200cd6943651ab4c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1CloseableIterable" kindref="compound">CloseableIterable</ref>&lt; InternalRow &gt;</type>
        <definition>CloseableIterable&lt;InternalRow&gt; org.apache.iceberg.spark.source.BaseRowReader&lt; T extends ScanTask &gt;.newAvroIterable</definition>
        <argsstring>(InputFile file, long start, long length, Schema projection, Map&lt; Integer, ?&gt; idToConstant)</argsstring>
        <name>newAvroIterable</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1InputFile" kindref="compound">InputFile</ref></type>
          <declname>file</declname>
        </param>
        <param>
          <type>long</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>projection</declname>
        </param>
        <param>
          <type>Map&lt; Integer, ?&gt;</type>
          <declname>idToConstant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" line="74" column="29" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" bodystart="74" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1a0fd9f41d4b01b4c147bf8071889e8abe" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1CloseableIterable" kindref="compound">CloseableIterable</ref>&lt; InternalRow &gt;</type>
        <definition>CloseableIterable&lt;InternalRow&gt; org.apache.iceberg.spark.source.BaseRowReader&lt; T extends ScanTask &gt;.newParquetIterable</definition>
        <argsstring>(InputFile file, long start, long length, Expression residual, Schema readSchema, Map&lt; Integer, ?&gt; idToConstant)</argsstring>
        <name>newParquetIterable</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1InputFile" kindref="compound">InputFile</ref></type>
          <declname>file</declname>
        </param>
        <param>
          <type>long</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
          <declname>residual</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>readSchema</declname>
        </param>
        <param>
          <type>Map&lt; Integer, ?&gt;</type>
          <declname>idToConstant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" line="85" column="29" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" bodystart="85" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1a7c0aa3044289dff43b5b26e61ac4145f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1CloseableIterable" kindref="compound">CloseableIterable</ref>&lt; InternalRow &gt;</type>
        <definition>CloseableIterable&lt;InternalRow&gt; org.apache.iceberg.spark.source.BaseRowReader&lt; T extends ScanTask &gt;.newOrcIterable</definition>
        <argsstring>(InputFile file, long start, long length, Expression residual, Schema readSchema, Map&lt; Integer, ?&gt; idToConstant)</argsstring>
        <name>newOrcIterable</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1io_1_1InputFile" kindref="compound">InputFile</ref></type>
          <declname>file</declname>
        </param>
        <param>
          <type>long</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
          <declname>residual</declname>
        </param>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1Schema" kindref="compound">Schema</ref></type>
          <declname>readSchema</declname>
        </param>
        <param>
          <type>Map&lt; Integer, ?&gt;</type>
          <declname>idToConstant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" line="104" column="29" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" bodystart="104" bodyend="124"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>org.apache.iceberg.spark.source.BaseRowReader&lt; T extends ScanTask &gt;</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>org::apache::iceberg::spark::source::BaseReader&lt; InternalRow, T &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>org.apache.iceberg.spark.source.BaseRowReader&lt; T extends ScanTask &gt;</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>org::apache::iceberg::spark::source::BaseReader&lt; InternalRow, T &gt;</label>
      </node>
    </collaborationgraph>
    <location file="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" line="41" column="43" bodyfile="spark/v3.5/spark/src/main/java/org/apache/iceberg/spark/source/BaseRowReader.java" bodystart="41" bodyend="125"/>
    <listofallmembers>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1af9138a2f0d9b0388c8b1fe91016d9006" prot="package" virt="non-virtual"><scope>org::apache::iceberg::spark::source::BaseRowReader</scope><name>BaseRowReader</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1af9138a2f0d9b0388c8b1fe91016d9006" prot="package" virt="non-virtual"><scope>org::apache::iceberg::spark::source::BaseRowReader</scope><name>BaseRowReader</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1af9138a2f0d9b0388c8b1fe91016d9006" prot="package" virt="non-virtual"><scope>org::apache::iceberg::spark::source::BaseRowReader</scope><name>BaseRowReader</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1ac5934612927eb0d9200cd6943651ab4c" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::source::BaseRowReader</scope><name>newAvroIterable</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1ac5934612927eb0d9200cd6943651ab4c" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::source::BaseRowReader</scope><name>newAvroIterable</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1ac5934612927eb0d9200cd6943651ab4c" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::source::BaseRowReader</scope><name>newAvroIterable</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1af4d1b66aeb90abad8b0efc2933ab08db" prot="protected" virt="non-virtual"><scope>org::apache::iceberg::spark::source::BaseRowReader</scope><name>newIterable</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1af4d1b66aeb90abad8b0efc2933ab08db" prot="protected" virt="non-virtual"><scope>org::apache::iceberg::spark::source::BaseRowReader</scope><name>newIterable</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1af4d1b66aeb90abad8b0efc2933ab08db" prot="protected" virt="non-virtual"><scope>org::apache::iceberg::spark::source::BaseRowReader</scope><name>newIterable</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1a7c0aa3044289dff43b5b26e61ac4145f" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::source::BaseRowReader</scope><name>newOrcIterable</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1a7c0aa3044289dff43b5b26e61ac4145f" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::source::BaseRowReader</scope><name>newOrcIterable</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1a7c0aa3044289dff43b5b26e61ac4145f" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::source::BaseRowReader</scope><name>newOrcIterable</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1a0fd9f41d4b01b4c147bf8071889e8abe" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::source::BaseRowReader</scope><name>newParquetIterable</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1a0fd9f41d4b01b4c147bf8071889e8abe" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::source::BaseRowReader</scope><name>newParquetIterable</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1source_1_1BaseRowReader_1a0fd9f41d4b01b4c147bf8071889e8abe" prot="private" virt="non-virtual"><scope>org::apache::iceberg::spark::source::BaseRowReader</scope><name>newParquetIterable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

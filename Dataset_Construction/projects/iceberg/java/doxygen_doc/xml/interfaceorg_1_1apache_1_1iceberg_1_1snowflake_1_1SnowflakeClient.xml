<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="interfaceorg_1_1apache_1_1iceberg_1_1snowflake_1_1SnowflakeClient" kind="interface" language="Java" prot="package">
    <compoundname>org::apache::iceberg::snowflake::SnowflakeClient</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Closeable</basecompoundref>
    <derivedcompoundref refid="classorg_1_1apache_1_1iceberg_1_1snowflake_1_1JdbcSnowflakeClient" prot="public" virt="non-virtual">org.apache.iceberg.snowflake.JdbcSnowflakeClient</derivedcompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1snowflake_1_1SnowflakeClient_1a2f8850c36d78837f822c2f3d785ff7d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>boolean org.apache.iceberg.snowflake.SnowflakeClient.databaseExists</definition>
        <argsstring>(SnowflakeIdentifier database)</argsstring>
        <name>databaseExists</name>
        <param>
          <type>SnowflakeIdentifier</type>
          <declname>database</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the database exists, false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="snowflake/src/main/java/org/apache/iceberg/snowflake/SnowflakeClient.java" line="33" column="11"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1snowflake_1_1SnowflakeClient_1a6448f27d9d11cf1abbf5ac1c2ccf735d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boolean</type>
        <definition>boolean org.apache.iceberg.snowflake.SnowflakeClient.schemaExists</definition>
        <argsstring>(SnowflakeIdentifier schema)</argsstring>
        <name>schemaExists</name>
        <param>
          <type>SnowflakeIdentifier</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the schema and its parent database exists, false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="snowflake/src/main/java/org/apache/iceberg/snowflake/SnowflakeClient.java" line="36" column="11"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1snowflake_1_1SnowflakeClient_1aa0f4d36311c10f70b6c763ce89e021a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>List&lt; SnowflakeIdentifier &gt;</type>
        <definition>List&lt;SnowflakeIdentifier&gt; org.apache.iceberg.snowflake.SnowflakeClient.listDatabases</definition>
        <argsstring>()</argsstring>
        <name>listDatabases</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lists all Snowflake databases within the currently configured account. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="snowflake/src/main/java/org/apache/iceberg/snowflake/SnowflakeClient.java" line="39" column="8"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1snowflake_1_1SnowflakeClient_1ad62ef7efc810e616a10752d7d3b847a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>List&lt; SnowflakeIdentifier &gt;</type>
        <definition>List&lt;SnowflakeIdentifier&gt; org.apache.iceberg.snowflake.SnowflakeClient.listSchemas</definition>
        <argsstring>(SnowflakeIdentifier scope)</argsstring>
        <name>listSchemas</name>
        <param>
          <type>SnowflakeIdentifier</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lists all Snowflake schemas within a given scope. Returned SnowflakeIdentifiers must have type() == <ref refid="enumorg_1_1apache_1_1iceberg_1_1snowflake_1_1SnowflakeIdentifier_1_1Type_1ae3320901529784129fd4befbc3879c08" kindref="member">SnowflakeIdentifier.Type.SCHEMA</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>The scope in which to list, which may be ROOT or a single DATABASE. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="snowflake/src/main/java/org/apache/iceberg/snowflake/SnowflakeClient.java" line="47" column="8"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1snowflake_1_1SnowflakeClient_1aead8553fb8a2c012e79849f302f414fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>List&lt; SnowflakeIdentifier &gt;</type>
        <definition>List&lt;SnowflakeIdentifier&gt; org.apache.iceberg.snowflake.SnowflakeClient.listIcebergTables</definition>
        <argsstring>(SnowflakeIdentifier scope)</argsstring>
        <name>listIcebergTables</name>
        <param>
          <type>SnowflakeIdentifier</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lists all Snowflake Iceberg tables within a given scope. Returned SnowflakeIdentifiers must have type() == <ref refid="enumorg_1_1apache_1_1iceberg_1_1snowflake_1_1SnowflakeIdentifier_1_1Type_1aab0262fd911dfd906378cf853c5cf56c" kindref="member">SnowflakeIdentifier.Type.TABLE</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>The scope in which to list, which may be ROOT, a DATABASE, or a SCHEMA. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="snowflake/src/main/java/org/apache/iceberg/snowflake/SnowflakeClient.java" line="55" column="8"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1snowflake_1_1SnowflakeClient_1ac9301eb50d5cf08828fcc1646124dbfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SnowflakeTableMetadata</type>
        <definition>SnowflakeTableMetadata org.apache.iceberg.snowflake.SnowflakeClient.loadTableMetadata</definition>
        <argsstring>(SnowflakeIdentifier tableIdentifier)</argsstring>
        <name>loadTableMetadata</name>
        <param>
          <type>SnowflakeIdentifier</type>
          <declname>tableIdentifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns Snowflake-level metadata containing locations to more detailed metadata.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tableIdentifier</parametername>
</parameternamelist>
<parameterdescription>
<para>The fully-qualified identifier that must be of type <ref refid="enumorg_1_1apache_1_1iceberg_1_1snowflake_1_1SnowflakeIdentifier_1_1Type_1aab0262fd911dfd906378cf853c5cf56c" kindref="member">SnowflakeIdentifier.Type.TABLE</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="snowflake/src/main/java/org/apache/iceberg/snowflake/SnowflakeClient.java" line="63" column="26"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This interface abstracts out the underlying communication protocols for contacting Snowflake to obtain the various resource representations defined under &quot;entities&quot;. Classes using this interface should minimize assumptions about whether an underlying client uses e.g. REST, JDBC or other underlying libraries/protocols. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>org.apache.iceberg.snowflake.JdbcSnowflakeClient</label>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>org.apache.iceberg.snowflake.SnowflakeClient</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Closeable</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>org.apache.iceberg.snowflake.SnowflakeClient</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Closeable</label>
      </node>
    </collaborationgraph>
    <location file="snowflake/src/main/java/org/apache/iceberg/snowflake/SnowflakeClient.java" line="30" column="36" bodyfile="snowflake/src/main/java/org/apache/iceberg/snowflake/SnowflakeClient.java" bodystart="30" bodyend="64"/>
    <listofallmembers>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1snowflake_1_1SnowflakeClient_1a2f8850c36d78837f822c2f3d785ff7d2" prot="public" virt="non-virtual"><scope>org::apache::iceberg::snowflake::SnowflakeClient</scope><name>databaseExists</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1snowflake_1_1SnowflakeClient_1aa0f4d36311c10f70b6c763ce89e021a4" prot="public" virt="non-virtual"><scope>org::apache::iceberg::snowflake::SnowflakeClient</scope><name>listDatabases</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1snowflake_1_1SnowflakeClient_1aead8553fb8a2c012e79849f302f414fc" prot="public" virt="non-virtual"><scope>org::apache::iceberg::snowflake::SnowflakeClient</scope><name>listIcebergTables</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1snowflake_1_1SnowflakeClient_1ad62ef7efc810e616a10752d7d3b847a1" prot="public" virt="non-virtual"><scope>org::apache::iceberg::snowflake::SnowflakeClient</scope><name>listSchemas</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1snowflake_1_1SnowflakeClient_1ac9301eb50d5cf08828fcc1646124dbfb" prot="public" virt="non-virtual"><scope>org::apache::iceberg::snowflake::SnowflakeClient</scope><name>loadTableMetadata</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1snowflake_1_1SnowflakeClient_1a6448f27d9d11cf1abbf5ac1c2ccf735d" prot="public" virt="non-virtual"><scope>org::apache::iceberg::snowflake::SnowflakeClient</scope><name>schemaExists</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="BaseVectorizedParquetValuesReader_8java" kind="file" language="Java">
    <compoundname>BaseVectorizedParquetValuesReader.java</compoundname>
    <innerclass refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader" prot="public">org::apache::iceberg::arrow::vectorized::parquet::BaseVectorizedParquetValuesReader</innerclass>
    <innerclass refid="enumorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1_1Mode" prot="package">org::apache::iceberg::arrow::vectorized::parquet::BaseVectorizedParquetValuesReader::Mode</innerclass>
    <innernamespace refid="namespaceorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet">org::apache::iceberg::arrow::vectorized::parquet</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="namespaceorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">package<sp/></highlight><highlight class="normal">org.apache.iceberg.arrow.vectorized.parquet;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>java.io.IOException;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>java.nio.ByteBuffer;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.<ref refid="namespaceorg_1_1apache" kindref="compound">apache</ref>.<ref refid="namespaceorg_1_1apache_1_1iceberg" kindref="compound">iceberg</ref>.relocated.com.google.<ref refid="namespaceorg_1_1apache_1_1iceberg_1_1common" kindref="compound">common</ref>.base.<ref refid="classorg_1_1apache_1_1iceberg_1_1relocated_1_1com_1_1google_1_1common_1_1base_1_1Preconditions" kindref="compound">Preconditions</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.<ref refid="namespaceorg_1_1apache" kindref="compound">apache</ref>.parquet.bytes.ByteBufferInputStream;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.<ref refid="namespaceorg_1_1apache" kindref="compound">apache</ref>.parquet.bytes.BytesUtils;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.<ref refid="namespaceorg_1_1apache" kindref="compound">apache</ref>.parquet.column.values.ValuesReader;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.<ref refid="namespaceorg_1_1apache" kindref="compound">apache</ref>.parquet.column.values.bitpacking.BytePacker;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.<ref refid="namespaceorg_1_1apache" kindref="compound">apache</ref>.parquet.column.values.bitpacking.Packer;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.<ref refid="namespaceorg_1_1apache" kindref="compound">apache</ref>.parquet.io.ParquetDecodingException;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">@SuppressWarnings(</highlight><highlight class="stringliteral">&quot;checkstyle:VisibilityModifier&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="41" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader" refkind="compound"><highlight class="normal">public<sp/>class<sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader" kindref="compound">BaseVectorizedParquetValuesReader</ref><sp/>extends<sp/>ValuesReader<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>decoding<sp/>mode.<sp/>The<sp/>encoded<sp/>data<sp/>contains<sp/>groups<sp/>of<sp/>either<sp/>run<sp/>length<sp/>encoded<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(RLE)<sp/>or<sp/>bit<sp/>packed<sp/>data.<sp/>Each<sp/>group<sp/>contains<sp/>a<sp/>header<sp/>that<sp/>indicates<sp/>which<sp/>group<sp/>it<sp/>is<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>number<sp/>of<sp/>values<sp/>in<sp/>the<sp/>group.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Mode<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>RLE,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>PACKED</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Encoded<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a686c90e2bb7ee2e117a8ea9fdaa28329" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>ByteBufferInputStream<sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a686c90e2bb7ee2e117a8ea9fdaa28329" kindref="member">inputStream</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bit/byte<sp/>width<sp/>of<sp/>decoded<sp/>data<sp/>and<sp/>utility<sp/>to<sp/>batch<sp/>unpack<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a85309037324020dad03ff721a0905ca5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a85309037324020dad03ff721a0905ca5" kindref="member">bitWidth</ref>;</highlight></codeline>
<codeline lineno="55" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a364534ab56cd66dd045e4b8539a6c5fe" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a364534ab56cd66dd045e4b8539a6c5fe" kindref="member">bytesWidth</ref>;</highlight></codeline>
<codeline lineno="56" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a7b0f23ec14fd3bb27ad838f574aa57bd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>BytePacker<sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a7b0f23ec14fd3bb27ad838f574aa57bd" kindref="member">packer</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>decoding<sp/>mode<sp/>and<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>Mode<sp/>mode;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentCount;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentValue;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>of<sp/>decoded<sp/>values<sp/>if<sp/>the<sp/>values<sp/>are<sp/>PACKED.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>packedValuesBuffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[16];</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>packedValuesBufferIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>true,<sp/>the<sp/>bit<sp/>width<sp/>is<sp/>fixed.<sp/>This<sp/>decoder<sp/>is<sp/>used<sp/>in<sp/>different<sp/>places<sp/>and<sp/>this<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>controls<sp/>if<sp/>we<sp/>need<sp/>to<sp/>read<sp/>the<sp/>bitwidth<sp/>from<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>data<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1afd3cf7db8ed5a8b08ee244d9304cb234" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1afd3cf7db8ed5a8b08ee244d9304cb234" kindref="member">fixedWidth</ref>;</highlight></codeline>
<codeline lineno="70" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1ac37e5a8944db7e3b609df1e1ac7b8518" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1ac37e5a8944db7e3b609df1e1ac7b8518" kindref="member">readLength</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxDefLevel;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>setArrowValidityVector;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a3137391fea105f4fa75cfe7b80a795e9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a3137391fea105f4fa75cfe7b80a795e9" kindref="member">BaseVectorizedParquetValuesReader</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxDefLevel,<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>setValidityVector)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>this.maxDefLevel<sp/>=<sp/>maxDefLevel;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>this.fixedWidth<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>this.readLength<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>this.setArrowValidityVector<sp/>=<sp/>setValidityVector;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1af459fe558ed49a5c66694e9bb7842c11" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1af459fe558ed49a5c66694e9bb7842c11" kindref="member">BaseVectorizedParquetValuesReader</ref>(</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxDefLevel,<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>setValidityVector)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">(bitWidth,<sp/>maxDefLevel,<sp/>bitWidth<sp/>!=<sp/>0,<sp/>setValidityVector);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1af8bc97f0d548382022410520b126317d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1af8bc97f0d548382022410520b126317d" kindref="member">BaseVectorizedParquetValuesReader</ref>(</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxDefLevel,<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>readLength,<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal"><sp/>setValidityVector)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>this.fixedWidth<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>this.readLength<sp/>=<sp/>readLength;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>this.maxDefLevel<sp/>=<sp/>maxDefLevel;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>this.setArrowValidityVector<sp/>=<sp/>setValidityVector;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>init(bitWidth);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>@Override</highlight></codeline>
<codeline lineno="97" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a9ca7888de7b85a1bffa341f5860e74a0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a9ca7888de7b85a1bffa341f5860e74a0" kindref="member">initFromPage</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>valueCount,<sp/>ByteBufferInputStream<sp/>in)<sp/></highlight><highlight class="keywordflow">throws</highlight><highlight class="normal"><sp/>IOException<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>this.inputStream<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fixedWidth)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>for<sp/>repetition<sp/>and<sp/>definition<sp/>levels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(readLength)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>readIntLittleEndian();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.inputStream<sp/>=<sp/>in.sliceStream(length);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>for<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in.available()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init(in.read());</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitWidth<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>bit<sp/>width,<sp/>treat<sp/>this<sp/>as<sp/>an<sp/>RLE<sp/>run<sp/>of<sp/>valueCount<sp/>number<sp/>of<sp/>0&apos;s.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this.mode<sp/>=<sp/>Mode.RLE;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this.currentCount<sp/>=<sp/>valueCount;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this.currentValue<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this.currentCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a7508cd37b64911a59b62e9d844536b13" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a7508cd37b64911a59b62e9d844536b13" kindref="member">init</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bw)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>Preconditions.checkArgument(bw<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>bw<sp/>&lt;=<sp/>32,<sp/>&quot;bitWidth<sp/>must<sp/>be<sp/>&gt;=<sp/>0<sp/>and<sp/>&lt;=<sp/>32</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>this.bitWidth<sp/>=<sp/>bw;</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>this.bytesWidth<sp/>=<sp/>BytesUtils.paddedByteCountFromBits(bw);</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>this.packer<sp/>=<sp/>Packer.LITTLE_ENDIAN.newBytePacker(bw);</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="130" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1aa9c983e6cbf6a6023de3fc5a4010f51c" refkind="member"><highlight class="stringliteral"><sp/><sp/>private<sp/>int<sp/>readUnsignedVarInt()<sp/>throws<sp/>IOException<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>int<sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>int<sp/>shift<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>int<sp/>byteRead;</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>do<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>byteRead<sp/>=<sp/>inputStream.read();</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>|=<sp/>(byteRead<sp/>&amp;<sp/>0x7F)<sp/>&lt;&lt;<sp/>shift;</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>shift<sp/>+=<sp/>7;</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>((byteRead<sp/>&amp;<sp/>0x80)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>value;</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="143" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a4c0e6ba99547e717ee2564f80f2f4a5d" refkind="member"><highlight class="stringliteral"><sp/><sp/>private<sp/>int<sp/>readIntLittleEndian()<sp/>throws<sp/>IOException<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>int<sp/>ch4<sp/>=<sp/>inputStream.read();</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>int<sp/>ch3<sp/>=<sp/>inputStream.read();</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>int<sp/>ch2<sp/>=<sp/>inputStream.read();</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>int<sp/>ch1<sp/>=<sp/>inputStream.read();</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>(ch1<sp/>&lt;&lt;<sp/>24)<sp/>+<sp/>(ch2<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>(ch3<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>(ch4<sp/>&lt;&lt;<sp/>0);</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="152" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a32dedccd4fd07a8693a71ccb26e4c063" refkind="member"><highlight class="stringliteral"><sp/><sp/>private<sp/>int<sp/>readIntLittleEndianPaddedOnBitWidth()<sp/>throws<sp/>IOException<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>switch<sp/>(bytesWidth)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>0:</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>1:</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>inputStream.read();</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>2:</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>ch2<sp/>=<sp/>inputStream.read();</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>ch1<sp/>=<sp/>inputStream.read();</highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(ch1<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>ch2;</highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>3:</highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>ch3<sp/>=<sp/>inputStream.read();</highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>ch2<sp/>=<sp/>inputStream.read();</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>ch1<sp/>=<sp/>inputStream.read();</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(ch1<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>(ch2<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>(ch3<sp/>&lt;&lt;<sp/>0);</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>4:</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>readIntLittleEndian();</highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>throw<sp/>new<sp/>RuntimeException(&quot;</highlight><highlight class="normal">Non-supported<sp/>bytesWidth:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>bytesWidth);</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"><sp/><sp/>void<sp/>readNextGroup()<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>header<sp/>=<sp/>readUnsignedVarInt();</highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>this.mode<sp/>=<sp/>(header<sp/>&amp;<sp/>1)<sp/>==<sp/>0<sp/>?<sp/>Mode.RLE<sp/>:<sp/>Mode.PACKED;</highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(mode)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>RLE:</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.currentCount<sp/>=<sp/>header<sp/>&gt;&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.currentValue<sp/>=<sp/>readIntLittleEndianPaddedOnBitWidth();</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PACKED:</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>numGroups<sp/>=<sp/>header<sp/>&gt;&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.currentCount<sp/>=<sp/>numGroups<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(this.packedValuesBuffer.length<sp/>&lt;<sp/>this.currentCount)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.packedValuesBuffer<sp/>=<sp/>new<sp/>int[this.currentCount];</highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>packedValuesBufferIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>valueIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(valueIndex<sp/>&lt;<sp/>this.currentCount)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>values<sp/>are<sp/>bit<sp/>packed<sp/>8<sp/>at<sp/>a<sp/>time,<sp/>so<sp/>reading<sp/>bitWidth<sp/>will<sp/>always<sp/>work</highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ByteBuffer<sp/>buffer<sp/>=<sp/>inputStream.slice(bitWidth);</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.packer.unpack8Values(</highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer,<sp/>buffer.position(),<sp/>this.packedValuesBuffer,<sp/>valueIndex);</highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valueIndex<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>new<sp/>ParquetDecodingException(&quot;</highlight><highlight class="normal">not<sp/>a<sp/>valid<sp/>mode<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>this.mode);</highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(IOException<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>new<sp/>ParquetDecodingException(&quot;</highlight><highlight class="normal">Failed<sp/>to<sp/>read<sp/>from<sp/>input<sp/>stream</highlight><highlight class="stringliteral">&quot;,<sp/>e);</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/>@Override</highlight></codeline>
<codeline lineno="214" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a59ff3637d3640f8a302b05735187556b" refkind="member"><highlight class="stringliteral"><sp/><sp/>public<sp/>boolean<sp/>readBoolean()<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>this.readInteger()<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"><sp/><sp/>@Override</highlight></codeline>
<codeline lineno="219" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1a42e1e074c400faf571bc07f84f4964d1" refkind="member"><highlight class="stringliteral"><sp/><sp/>public<sp/>void<sp/>skip()<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>throw<sp/>new<sp/>UnsupportedOperationException();</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/>@Override</highlight></codeline>
<codeline lineno="224" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1aeea1aa533ad1b65ee44244a99531a0fe" refkind="member"><highlight class="stringliteral"><sp/><sp/>public<sp/>int<sp/>readValueDictionaryId()<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>readInteger();</highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"><sp/><sp/>@Override</highlight></codeline>
<codeline lineno="229" refid="classorg_1_1apache_1_1iceberg_1_1arrow_1_1vectorized_1_1parquet_1_1BaseVectorizedParquetValuesReader_1af37a3486a42b57487192f0c754c7f492" refkind="member"><highlight class="stringliteral"><sp/><sp/>public<sp/>int<sp/>readInteger()<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(this.currentCount<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>this.readNextGroup();</highlight></codeline>
<codeline lineno="232"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="234"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>this.currentCount--;</highlight></codeline>
<codeline lineno="235"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>switch<sp/>(mode)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>RLE:</highlight></codeline>
<codeline lineno="237"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>this.currentValue;</highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PACKED:</highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>this.packedValuesBuffer[packedValuesBufferIdx++];</highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>throw<sp/>new<sp/>RuntimeException(&quot;</highlight><highlight class="normal">Unrecognized<sp/>mode:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>mode);</highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral">}</highlight></codeline>
    </programlisting>
    <location file="arrow/src/main/java/org/apache/iceberg/arrow/vectorized/parquet/BaseVectorizedParquetValuesReader.java"/>
  </compounddef>
</doxygen>

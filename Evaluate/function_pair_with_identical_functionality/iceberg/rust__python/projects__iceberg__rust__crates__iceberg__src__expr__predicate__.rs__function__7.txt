<path>
projects/iceberg/rust/crates/iceberg/src/expr/predicate.rs
</path>
<function>
    fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
        let bound_term = self.term.bind(schema, case_sensitive)?;
        Ok(UnaryExpression::new(self.op, bound_term))
    }
</function>
------

<path>
projects/iceberg/python/pyiceberg/expressions/__init__.py
</path>
<function>
    def bind(self, schema: Schema, case_sensitive: bool = True) -> BoundUnaryPredicate[Any]:
        bound_term = self.term.bind(schema, case_sensitive)
        return self.as_bound(bound_term)

</function>

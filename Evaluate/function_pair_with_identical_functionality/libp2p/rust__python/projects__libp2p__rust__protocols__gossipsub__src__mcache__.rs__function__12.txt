<path>
projects/libp2p/rust/protocols/gossipsub/src/mcache.rs
</path>
<function>
    pub(crate) fn new(gossip: usize, history_capacity: usize) -> Self {
        MessageCache {
            gossip,
            msgs: HashMap::default(),
            iwant_counts: HashMap::default(),
            history: vec![Vec::new(); history_capacity],
        }
    }
</function>
------

<path>
projects/libp2p/python/libp2p/pubsub/mcache.py
</path>
<function>
    def __init__(self, gossip_size: int, history_size: int) -> None:
        self.gossip_size = gossip_size

        # (seqno, from_id) -> rpc message
        self.msgs = dict()

        self.iwant_counts = dict()
        
        # max length of history_size. each item is a list of CacheEntry.
        # messages lost upon shift().
        self.history = [[] for _ in range(history_size)]

</function>

<path>
projects/deltachat-core/rust/message.rs
</path>
<function>
pub(crate) async fn update_msg_state(
    context: &Context,
    msg_id: MsgId,
    state: MessageState,
) -> Result<()> {
    ensure!(state != MessageState::OutFailed, "use set_msg_failed()!");
    let error_subst = match state >= MessageState::OutPending {
        true => ", error=''",
        false => "",
    };
    context
        .sql
        .execute(
            &format!("UPDATE msgs SET state=?1 {error_subst} WHERE id=?2 AND (?1!=?3 OR state<?3)"),
            (state, msg_id, MessageState::OutDelivered),
        )
        .await?;
    Ok(())
}
</function>
------

<path>
projects/deltachat-core/c/dc_msg.c
</path>
<function>
void dc_update_msg_state(dc_context_t* context, uint32_t msg_id, int state)
{
	sqlite3_stmt* stmt = dc_sqlite3_prepare(context->sql,
        "UPDATE msgs SET state=? WHERE id=? AND (?=? OR state<?)")ï¼›
	sqlite3_bind_int(stmt, 1, state);
	sqlite3_bind_int(stmt, 2, msg_id);
    sqlite3_bind_int(stmt, 3, state);
    sqlite3_bind_int(stmt, 4, DC_STATE_OUT_DELIVERED);
    sqlite3_bind_int(stmt, 5, DC_STATE_OUT_DELIVERED);
	sqlite3_step(stmt);
	sqlite3_finalize(stmt);
}
</function>

<path>
projects/deltachat-core/rust/param.rs
</path>
<function>
    pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
        self.inner.insert(key, value.to_string());
        self
    }
</function>
------

<path>
projects/deltachat-core/c/dc_param.c
</path>
<function>
void dc_param_set(dc_param_t* param, int key, const char* value)
{
	char* old1 = NULL;
	char* old2 = NULL;
	char* new1 = NULL;

	if (param==NULL || key==0) {
		return;
	}

	old1 = param->packed;
	old2 = NULL;

	/* remove existing parameter from packed string, if any */
	if (old1) {
		char *p1, *p2;
		p1 = find_param(old1, key, &p2);
		if (p1 != NULL) {
			*p1 = 0;
			old2 = p2;
		}
		else if (value==NULL) {
			return; /* parameter does not exist and should be cleared -> done. */
		}
	}

	dc_rtrim(old1); /* trim functions are null-pointer-safe */
	dc_ltrim(old2);

	if (old1 && old1[0]==0) { old1 = NULL; }
	if (old2 && old2[0]==0) { old2 = NULL; }

	/* create new string */
	if (value) {
		new1 = dc_mprintf("%s%s%c=%s%s%s",
			old1?  old1 : "",
			old1?  "\n" : "",
			key,
			value,
			old2?  "\n" : "",
			old2?  old2 : "");
	}
	else {
		new1 = dc_mprintf("%s%s%s",
			old1?         old1 : "",
			(old1&&old2)? "\n" : "",
			old2?         old2 : "");
	}

	free(param->packed);
	param->packed = new1;
}
</function>

<path>
projects/deltachat-core/rust/tools.rs
</path>
<function>
pub(crate) fn truncate(buf: &str, approx_chars: usize) -> Cow<str> {
    let count = buf.chars().count();
    if count > approx_chars + DC_ELLIPSIS.len() {
        let end_pos = buf
            .char_indices()
            .nth(approx_chars)
            .map(|(n, _)| n)
            .unwrap_or_default();

        if let Some(index) = buf[..end_pos].rfind(|c| c == ' ' || c == '\n') {
            Cow::Owned(format!("{}{}", &buf[..=index], DC_ELLIPSIS))
        } else {
            Cow::Owned(format!("{}{}", &buf[..end_pos], DC_ELLIPSIS))
        }
    } else {
        Cow::Borrowed(buf)
    }
}
</function>
------

<path>
projects/deltachat-core/c/dc_tools.c
</path>
<function>
void dc_truncate_str(char* buf, int approx_chars)
{
	if (approx_chars > 0 && strlen(buf) > approx_chars+strlen(DC_EDITORIAL_ELLIPSE))
	{
		char* p = &buf[approx_chars + 1]; /* null-terminate string at the desired length */
		*p = 0;

		if (strchr(buf, ' ')!=NULL) {
			while (p[-1]!=' ' && p[-1]!='\n') { /* rewind to the previous space, avoid half utf-8 characters */
				p--;
				*p = 0;
			}
		}

		strcat(p, DC_EDITORIAL_ELLIPSE);
	}
}
</function>

<path>
projects/deltachat-core/rust/location.rs
</path>
<function>
pub async fn send_locations_to_chat(
    context: &Context,
    chat_id: ChatId,
    seconds: i64,
) -> Result<()> {
    ensure!(seconds >= 0);
    ensure!(!chat_id.is_special());
    let now = time();
    let is_sending_locations_before = is_sending_locations_to_chat(context, Some(chat_id)).await?;
    context
        .sql
        .execute(
            "UPDATE chats    \
         SET locations_send_begin=?,        \
         locations_send_until=?  \
         WHERE id=?",
            (
                if 0 != seconds { now } else { 0 },
                if 0 != seconds { now + seconds } else { 0 },
                chat_id,
            ),
        )
        .await?;
    if 0 != seconds && !is_sending_locations_before {
        let mut msg = Message::new(Viewtype::Text);
        msg.text = stock_str::msg_location_enabled(context).await;
        msg.param.set_cmd(SystemMessage::LocationStreamingEnabled);
        chat::send_msg(context, chat_id, &mut msg)
            .await
            .unwrap_or_default();
    } else if 0 == seconds && is_sending_locations_before {
        let stock_str = stock_str::msg_location_disabled(context).await;
        chat::add_info_msg(context, chat_id, &stock_str, now).await?;
    }
    context.emit_event(EventType::ChatModified(chat_id));
    chatlist_events::emit_chatlist_item_changed(context, chat_id);
    if 0 != seconds {
        context.scheduler.interrupt_location().await;
    }
    Ok(())
}
</function>
------

<path>
projects/deltachat-core/c/dc_location.c
</path>
<function>
void dc_send_locations_to_chat(dc_context_t* context, uint32_t chat_id,
                               int seconds)
{
	sqlite3_stmt* stmt = NULL;
	time_t        now = time(NULL);
	dc_msg_t*     msg = NULL;
	char*         stock_str = NULL;
	int           is_sending_locations_before = 0;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || seconds<0
	 || chat_id<=DC_CHAT_ID_LAST_SPECIAL) {
		goto cleanup;
	}

	is_sending_locations_before = dc_is_sending_locations_to_chat(context, chat_id);

	stmt = dc_sqlite3_prepare(context->sql,
		"UPDATE chats "
		"   SET locations_send_begin=?, "
		"       locations_send_until=? "
		" WHERE id=?");
	sqlite3_bind_int64(stmt, 1, seconds? now : 0);
	sqlite3_bind_int64(stmt, 2, seconds? now+seconds : 0);
	sqlite3_bind_int  (stmt, 3, chat_id);
	sqlite3_step(stmt);

	// add/sent status message.
	// as disable also happens after a timeout, this is not sent explicitly.
	if (seconds && !is_sending_locations_before) {
		msg = dc_msg_new(context, DC_MSG_TEXT);
		msg->text = dc_stock_system_msg(context, DC_STR_MSGLOCATIONENABLED, NULL, NULL, 0);
		dc_param_set_int(msg->param, DC_PARAM_CMD, DC_CMD_LOCATION_STREAMING_ENABLED);
		dc_send_msg(context, chat_id, msg);
	}
	else if(!seconds && is_sending_locations_before) {
		stock_str = dc_stock_system_msg(context, DC_STR_MSGLOCATIONDISABLED, NULL, NULL, 0);
		dc_add_device_msg(context, chat_id, stock_str);
	}

	// update eg. the "location-sending"-icon
	context->cb(context, DC_EVENT_CHAT_MODIFIED, chat_id, 0);

	if (seconds) {
		schedule_MAYBE_SEND_LOCATIONS(context, 0);
		dc_job_add(context, DC_JOB_MAYBE_SEND_LOC_ENDED, chat_id, NULL, seconds+1);
	}

cleanup:
	free(stock_str);
	dc_msg_unref(msg);
	sqlite3_finalize(stmt);
}
</function>

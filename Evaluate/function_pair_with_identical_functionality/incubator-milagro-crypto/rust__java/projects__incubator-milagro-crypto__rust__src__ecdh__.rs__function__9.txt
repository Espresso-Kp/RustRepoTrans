<path>
projects/incubator-milagro-crypto/rust/src/ecdh.rs
</path>
<function>
pub fn key_pair_generate(rng: Option<&mut RAND>, s: &mut [u8], w: &mut [u8]) -> isize {
    let res = 0;
    let mut sc: Big;
    let G = ECP::generator();

    let r = Big::new_ints(&rom::CURVE_ORDER);

    if let Some(mut x) = rng {
        sc = Big::randomnum(&r, &mut x);
    } else {
        sc = Big::from_bytes(&s);
        sc.rmod(&r);
    }

    sc.to_bytes(s);

    let WP = G.mul(&sc);

    WP.to_bytes(w, false); // To use point compression on public keys, change to true

    res
}
</function>
------

<path>
projects/incubator-milagro-crypto/java/src/main/java/org/apache/milagro/amcl/GOLDILOCKS/ECDH.java
</path>
<function>
public static int KEY_PAIR_GENERATE(RAND RNG,byte[] S,byte[] W)
	{
		BIG r,s;
		ECP G,WP;
		int res=0;
	//	byte[] T=new byte[EFS];

		G=ECP.generator();

		r=new BIG(ROM.CURVE_Order);

		if (RNG==null)
		{
			s=BIG.fromBytes(S);
			s.mod(r);
		}
		else
		{
			s=BIG.randomnum(r,RNG);
		}

		//if (ROM.AES_S>0)
		//{
		//	s.mod2m(2*ROM.AES_S);
		//}
		s.toBytes(S);

		WP=G.mul(s);
		WP.toBytes(W,false);  // To use point compression on public keys, change to true 

		return res;
	}
</function>


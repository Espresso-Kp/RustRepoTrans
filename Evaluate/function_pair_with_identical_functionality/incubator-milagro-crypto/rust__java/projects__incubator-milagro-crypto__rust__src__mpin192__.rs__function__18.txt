<path>
projects/incubator-milagro-crypto/rust/src/mpin192.rs
</path>
<function>
pub fn precompute(token: &[u8], cid: &[u8], g1: &mut [u8], g2: &mut [u8]) -> isize {
    let T = ECP::from_bytes(&token);
    if T.is_infinity() {
        return INVALID_POINT;
    }

    let P = ECP::mapit(&cid);

    let Q = ECP4::generator();

    let mut g = pair192::ate(&Q, &T);
    g = pair192::fexp(&g);
    g.to_bytes(g1);

    g = pair192::ate(&Q, &P);
    g = pair192::fexp(&g);
    g.to_bytes(g2);

    return 0;
}
</function>
------

<path>
projects/incubator-milagro-crypto/java/src/main/java/org/apache/milagro/amcl/BLS24/MPIN192.java
</path>
<function>
public static int PRECOMPUTE(byte[] TOKEN,byte[] CID,byte[] G1,byte[] G2)
	{
		ECP P,T;
		FP24 g;

		T=ECP.fromBytes(TOKEN);
		if (T.is_infinity()) return INVALID_POINT; 

		P=ECP.mapit(CID);

		ECP4 Q=ECP4.generator();

		g=PAIR192.ate(Q,T);
		g=PAIR192.fexp(g);
		g.toBytes(G1);

		g=PAIR192.ate(Q,P);
		g=PAIR192.fexp(g);
		g.toBytes(G2);

		return 0;
	}
</function>


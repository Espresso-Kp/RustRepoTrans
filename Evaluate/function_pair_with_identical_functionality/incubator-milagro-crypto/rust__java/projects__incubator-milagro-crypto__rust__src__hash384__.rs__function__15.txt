<path>
projects/incubator-milagro-crypto/rust/src/hash384.rs
</path>
<function>
    pub fn hash(&mut self) -> [u8; HASH_BYTES] {
        /* pad message and finish - supply digest */
        let mut digest: [u8; 48] = [0; HASH_BYTES];
        let len0 = self.length[0];
        let len1 = self.length[1];
        self.process(0x80);
        while (self.length[0] % 1024) != 896 {
            self.process(0)
        }
        self.w[14] = len1;
        self.w[15] = len0;
        self.transform();
        for i in 0..HASH_BYTES {
            // convert to bytes
            digest[i] = ((self.h[i / 8] >> (8 * (7 - i % 8))) & 0xff) as u8;
        }
        self.init();
        return digest;
    }
</function>
------

<path>
projects/incubator-milagro-crypto/java/src/main/java/org/apache/milagro/amcl/HASH384.java
</path>
<function>
public byte[] hash()
	{ /* pad message and finish - supply digest */
		int i;
		byte[] digest=new byte[48];
		long len0,len1;
		len0=length[0];
		len1=length[1];
		process(0x80);
		while ((length[0]%1024)!=896) process(0);
		w[14]=len1;
		w[15]=len0;    
		transform();
		for (i=0;i<len;i++)
		{ /* convert to bytes */
			digest[i]=(byte)((h[i/8]>>(8*(7-i%8))) & 0xffL);
		}
		init();
		return digest;
	}
</function>


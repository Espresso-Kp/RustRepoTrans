<path>
projects/charset-normalizer/rust/src/entity.rs
</path>
<function>
    pub fn append(&mut self, item: CharsetMatch) {
        // We should disable the submatch factoring when the input file is too heavy
        // (conserve RAM usage)
        if item.payload.len() <= TOO_BIG_SEQUENCE {
            for m in &mut self.items {
                if m.decoded_payload() == item.decoded_payload()
                    && (m.mean_mess_ratio - item.mean_mess_ratio).abs() < f32::EPSILON
                {
                    m.add_submatch(&item);
                    return;
                }
            }
        }
        self.items.push(item);
        CharsetMatches::resort(&mut self.items);
    }
</function>
------

<path>
projects/charset-normalizer/python/models.py
</path>
<function>
    def append(self, item: CharsetMatch) -> None:
        """
        Insert a single match. Will be inserted accordingly to preserve sort.
        Can be inserted as a submatch.
        """
        if not isinstance(item, CharsetMatch):
            raise ValueError(
                "Cannot append instance '{}' to CharsetMatches".format(
                    str(item.__class__)
                )
            )
        # We should disable the submatch factoring when the input file is too heavy (conserve RAM usage)
        if len(item.raw) <= TOO_BIG_SEQUENCE:
            for match in self._results:
                if match.fingerprint == item.fingerprint and match.chaos == item.chaos:
                    match.add_submatch(item)
                    return
        self._results.append(item)
        self._results = sorted(self._results)

</function>

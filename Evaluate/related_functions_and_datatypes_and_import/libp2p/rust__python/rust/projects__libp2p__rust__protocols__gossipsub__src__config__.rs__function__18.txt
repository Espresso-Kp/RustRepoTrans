pub struct Config {
    protocol: ProtocolConfig,
    history_length: usize,
    history_gossip: usize,
    mesh_n: usize,
    mesh_n_low: usize,
    mesh_n_high: usize,
    retain_scores: usize,
    gossip_lazy: usize,
    gossip_factor: f64,
    heartbeat_initial_delay: Duration,
    heartbeat_interval: Duration,
    fanout_ttl: Duration,
    check_explicit_peers_ticks: u64,
    duplicate_cache_time: Duration,
    validate_messages: bool,
    message_id_fn: Arc<dyn Fn(&Message) -> MessageId + Send + Sync + 'static>,
    allow_self_origin: bool,
    do_px: bool,
    prune_peers: usize,
    prune_backoff: Duration,
    unsubscribe_backoff: Duration,
    backoff_slack: u32,
    flood_publish: bool,
    graft_flood_threshold: Duration,
    mesh_outbound_min: usize,
    opportunistic_graft_ticks: u64,
    opportunistic_graft_peers: usize,
    gossip_retransimission: u32,
    max_messages_per_rpc: Option<usize>,
    max_ihave_length: usize,
    max_ihave_messages: usize,
    iwant_followup_time: Duration,
    published_message_ids_cache_time: Duration,
}

pub struct MessageId(pub Vec<u8>);

struct Message(RawMessage);

------
use std::borrow::Cow;
use std::sync::Arc;
use std::time::Duration;
use crate::error::ConfigBuilderError;
use crate::protocol::{ProtocolConfig, ProtocolId, FLOODSUB_PROTOCOL};
use crate::types::{Message, MessageId, PeerKind};
use libp2p_identity::PeerId;
use libp2p_swarm::StreamProtocol;
use super::*;
use crate::topic::IdentityHash;
use crate::Topic;
use libp2p_core::UpgradeInfo;
use std::collections::hash_map::DefaultHasher;
use std::hash::{Hash, Hasher};

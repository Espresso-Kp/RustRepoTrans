struct ExpressionEvaluatorVisitor<'a> {
    /// Reference to an [`ExpressionEvaluator`].
    expression_evaluator: &'a ExpressionEvaluator,
    /// Reference to a [`DataFile`]'s partition [`Struct`].
    partition: &'a Struct,
}

------
use fnv::FnvHashSet;
use crate::{
    expr::{BoundPredicate, BoundReference},
    spec::{DataFile, Datum, PrimitiveLiteral, Struct},
    Error, ErrorKind, Result,
};
use super::bound_predicate_visitor::{visit, BoundPredicateVisitor};
use std::{collections::HashMap, sync::Arc};
use fnv::FnvHashSet;
use predicate::SetExpression;
use crate::{
        expr::{
            predicate, visitors::inclusive_projection::InclusiveProjection, BinaryExpression, Bind,
            BoundPredicate, Predicate, PredicateOperator, Reference, UnaryExpression,
        },
        spec::{
            DataContentType, DataFile, DataFileFormat, Datum, Literal, NestedField, PartitionField,
            PartitionSpec, PartitionSpecRef, PrimitiveType, Schema, SchemaRef, Struct, Transform,
            Type,
        },
        Result,
    };
use super::ExpressionEvaluator;

pub fn add(&mut self, b: &FP) {
        self.x.add(&(b.x));
        self.xes += b.xes;
        if self.xes > FEXCESS {
            self.reduce()
        }
    }

fn hash(sha: usize, c: &mut FP8, U: &mut ECP, r: &mut [u8]) -> bool {
    let mut w: [u8; EFS] = [0; EFS];
    let mut t: [u8; 10 * EFS] = [0; 10 * EFS];

    c.geta().geta().geta().to_bytes(&mut w);
    for i in 0..EFS {
        t[i] = w[i]
    }
    c.geta().geta().getb().to_bytes(&mut w);
    for i in EFS..2 * EFS {
        t[i] = w[i - EFS]
    }
    c.geta().getb().geta().to_bytes(&mut w);
    for i in 2 * EFS..3 * EFS {
        t[i] = w[i - 2 * EFS]
    }
    c.geta().getb().getb().to_bytes(&mut w);
    for i in 3 * EFS..4 * EFS {
        t[i] = w[i - 3 * EFS]
    }
    c.getb().geta().geta().to_bytes(&mut w);
    for i in 4 * EFS..5 * EFS {
        t[i] = w[i - 4 * EFS]
    }
    c.getb().geta().getb().to_bytes(&mut w);
    for i in 5 * EFS..6 * EFS {
        t[i] = w[i - 5 * EFS]
    }
    c.getb().getb().geta().to_bytes(&mut w);
    for i in 6 * EFS..7 * EFS {
        t[i] = w[i - 6 * EFS]
    }
    c.getb().getb().getb().to_bytes(&mut w);
    for i in 7 * EFS..8 * EFS {
        t[i] = w[i - 7 * EFS]
    }

    U.getx().to_bytes(&mut w);
    for i in 8 * EFS..9 * EFS {
        t[i] = w[i - 8 * EFS]
    }
    U.gety().to_bytes(&mut w);
    for i in 9 * EFS..10 * EFS {
        t[i] = w[i - 9 * EFS]
    }

    if sha == SHA256 {
        let mut h = HASH256::new();
        h.process_array(&t);
        let sh = h.hash();
        for i in 0..ecp::AESKEY {
            r[i] = sh[i]
        }
        return true;
    }
    if sha == SHA384 {
        let mut h = HASH384::new();
        h.process_array(&t);
        let sh = h.hash();
        for i in 0..ecp::AESKEY {
            r[i] = sh[i]
        }
        return true;
    }
    if sha == SHA512 {
        let mut h = HASH512::new();
        h.process_array(&t);
        let sh = h.hash();
        for i in 0..ecp::AESKEY {
            r[i] = sh[i]
        }
        return true;
    }
    return false;
}

pub fn trace(&mut self) -> FP8 {
        let mut t = self.geta();
        t.imul(3);
        t.reduce();
        return t;
    }

pub fn is_infinity(&self) -> bool {
        let xx = self.getpx();
        let zz = self.getpz();
        return xx.is_zilch() && zz.is_zilch();
    }

pub fn from_bytes(w: &[u8]) -> FP24 {
        let mut t: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];
        let mb = big::MODBYTES as usize;

        for i in 0..mb {
            t[i] = w[i]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + mb]
        }
        let b = Big::from_bytes(&t);
        let c = FP2::new_bigs(a, b);

        for i in 0..mb {
            t[i] = w[i + 2 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 3 * mb]
        }
        let b = Big::from_bytes(&t);
        let d = FP2::new_bigs(a, b);

        let ea = FP4::new_fp2s(c, d);

        for i in 0..mb {
            t[i] = w[i + 4 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 5 * mb]
        }
        let b = Big::from_bytes(&t);
        let c = FP2::new_bigs(a, b);

        for i in 0..mb {
            t[i] = w[i + 6 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 7 * mb]
        }
        let b = Big::from_bytes(&t);
        let d = FP2::new_bigs(a, b);

        let eb = FP4::new_fp2s(c, d);

        let e = FP8::new_fp4s(ea, eb);

        for i in 0..mb {
            t[i] = w[i + 8 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 9 * mb]
        }
        let b = Big::from_bytes(&t);
        let c = FP2::new_bigs(a, b);

        for i in 0..mb {
            t[i] = w[i + 10 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 11 * mb]
        }
        let b = Big::from_bytes(&t);
        let d = FP2::new_bigs(a, b);

        let ea = FP4::new_fp2s(c, d);

        for i in 0..mb {
            t[i] = w[i + 12 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 13 * mb]
        }
        let b = Big::from_bytes(&t);
        let c = FP2::new_bigs(a, b);

        for i in 0..mb {
            t[i] = w[i + 14 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 15 * mb]
        }
        let b = Big::from_bytes(&t);
        let d = FP2::new_bigs(a, b);

        let eb = FP4::new_fp2s(c, d);

        let f = FP8::new_fp4s(ea, eb);

        for i in 0..mb {
            t[i] = w[i + 16 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 17 * mb]
        }
        let b = Big::from_bytes(&t);

        let c = FP2::new_bigs(a, b);

        for i in 0..mb {
            t[i] = w[i + 18 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 19 * mb]
        }
        let b = Big::from_bytes(&t);
        let d = FP2::new_bigs(a, b);

        let ea = FP4::new_fp2s(c, d);

        for i in 0..mb {
            t[i] = w[i + 20 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 21 * mb]
        }
        let b = Big::from_bytes(&t);

        let c = FP2::new_bigs(a, b);

        for i in 0..mb {
            t[i] = w[i + 22 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 23 * mb]
        }
        let b = Big::from_bytes(&t);
        let d = FP2::new_bigs(a, b);

        let eb = FP4::new_fp2s(c, d);

        let g = FP8::new_fp4s(ea, eb);

        return FP24::new_fp8s(e, f, g);
    }

pub fn from_bytes(b: &[u8]) -> Big {
        Big::from_byte_array(b, 0)
    }

pub fn from_bytes(b: &[u8]) -> ECP {
        let mut t: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];
        let mb = big::MODBYTES as usize;
        let p = Big::new_ints(&rom::MODULUS);

        for i in 0..mb {
            t[i] = b[i + 1]
        }
        let px = Big::from_bytes(&t);
        if Big::comp(&px, &p) >= 0 {
            return ECP::new();
        }

        if CURVETYPE == CurveType::Montgomery {
            return ECP::new_big(&px);
        }

        if b[0] == 0x04 {
            for i in 0..mb {
                t[i] = b[i + mb + 1]
            }
            let py = Big::from_bytes(&t);
            if Big::comp(&py, &p) >= 0 {
                return ECP::new();
            }
            return ECP::new_bigs(&px, &py);
        }

        if b[0] == 0x02 || b[0] == 0x03 {
            return ECP::new_bigint(&px, (b[0] & 1) as isize);
        }

        return ECP::new();
    }

pub fn g1mul(P: &ECP, e: &Big) -> ECP {
    if rom::USE_GLV {
        let mut R = P.clone();
        let mut Q = P.clone();
        Q.affine();
        let q = Big::new_ints(&rom::CURVE_ORDER);
        let mut cru = FP::new_big(Big::new_ints(&rom::CURVE_CRU));
        let mut u = glv(e);
        Q.mulx(&mut cru);

        let mut np = u[0].nbits();
        let mut t: Big = Big::modneg(&u[0], &q);
        let mut nn = t.nbits();
        if nn < np {
            u[0] = t.clone();
            R.neg();
        }

        np = u[1].nbits();
        t = Big::modneg(&u[1], &q);
        nn = t.nbits();
        if nn < np {
            u[1] = t;
            Q.neg();
        }
        u[0].norm();
        u[1].norm();
        R.mul2(&u[0], &Q, &u[1])
    } else {
        P.mul(e)
    }
}

pub fn ate(P1: &ECP4, Q1: &ECP) -> FP24 {
    let mut n = Big::new();
    let mut n3 = Big::new();

    let mut P = P1.clone();
    P.affine();
    let mut Q = Q1.clone();
    Q.affine();

    let qx = Q.getpx();
    let qy = Q.getpy();

    let mut A = P.clone();
    let mut NP = P.clone();
    NP.neg();

    let nb = lbits(&mut n3, &mut n);

    let mut r = FP24::new_int(1);
    for i in (1..nb - 1).rev() {
        r.sqr();

        let mut lv = linedbl(&mut A, &qx, &qy);

        let bt = n3.bit(i) - n.bit(i);
        if bt == 1 {
            let lv2 = lineadd(&mut A, &P, &qx, &qy);
            lv.smul(&lv2);
        }
        if bt == -1 {
            let lv2 = lineadd(&mut A, &NP, &qx, &qy);
            lv.smul(&lv2);
        }
        r.ssmul(&lv);
    }

    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        r.conj();
    }

    return r;
}


pub fn fexp(m: &FP24) -> FP24 {
    let f = FP2::new_bigs(Big::new_ints(&rom::FRA), Big::new_ints(&rom::FRB));
    let mut x = Big::new_ints(&rom::CURVE_BNX);
    let mut r = m.clone();

    /* Easy part of final exp */
    let mut lv = r.clone();
    lv.inverse();
    r.conj();

    r.mul(&lv);
    lv = r.clone();
    r.frob(&f, 4);
    r.mul(&lv);
    //    if r.is_unity() {
    //	r.zero();
    //	return r;
    //    }
    /* Hard part of final exp */
    // Ghamman & Fouotsa Method

    let mut t7 = r.clone();
    t7.usqr();
    let mut t1 = t7.pow(&mut x);

    x.fshr(1);
    let mut t2 = t1.pow(&mut x);
    x.fshl(1);

    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }
    let mut t3 = t1.clone();
    t3.conj();
    t2.mul(&t3);
    t2.mul(&r);

    t3 = t2.pow(&mut x);
    let mut t4 = t3.pow(&mut x);
    let mut t5 = t4.pow(&mut x);

    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t3.conj();
        t5.conj();
    }

    t3.frob(&f, 6);
    t4.frob(&f, 5);
    t3.mul(&t4);

    let mut t6 = t5.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t6.conj();
    }

    t5.frob(&f, 4);
    t3.mul(&t5);

    let mut t0 = t2.clone();
    t0.conj();
    t6.mul(&t0);

    t5 = t6.clone();
    t5.frob(&f, 3);

    t3.mul(&t5);
    t5 = t6.pow(&mut x);
    t6 = t5.pow(&mut x);

    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t5.conj();
    }

    t0 = t5.clone();
    t0.frob(&f, 2);
    t3.mul(&t0);
    t0 = t6.clone();
    t0.frob(&f, 1);

    t3.mul(&t0);
    t5 = t6.pow(&mut x);

    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t5.conj();
    }
    t2.frob(&f, 7);

    t5.mul(&t7);
    t3.mul(&t2);
    t3.mul(&t5);

    r.mul(&t3);

    r.reduce();
    return r;
}


pub const INVALID_POINT: isize = -14;
------
use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp4::ECP4;
use super::fp24::FP24;
use super::fp8::FP8;
use super::pair192;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils" kind="class" language="Java" prot="public">
    <compoundname>org::apache::iceberg::util::ZOrderByteUtils</compoundname>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1ac74b185acde7fad8b71d71d8826dfbca" prot="public" static="yes" mutable="no">
        <type>final int</type>
        <definition>final int org.apache.iceberg.util.ZOrderByteUtils.PRIMITIVE_BUFFER_SIZE</definition>
        <argsstring></argsstring>
        <name>PRIMITIVE_BUFFER_SIZE</name>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" line="45" column="27" bodyfile="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1ad6e8c114dda8af9652ffa8d9cfc38fc8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>org.apache.iceberg.util.ZOrderByteUtils.ZOrderByteUtils</definition>
        <argsstring>()</argsstring>
        <name>ZOrderByteUtils</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" line="47" column="11" bodyfile="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" bodystart="47" bodyend="47"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="package-static-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1afc4e8eaedf0fd31962774561e8f6aa99" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ByteBuffer</type>
        <definition>static ByteBuffer org.apache.iceberg.util.ZOrderByteUtils.allocatePrimitiveBuffer</definition>
        <argsstring>()</argsstring>
        <name>allocatePrimitiveBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" line="49" column="21" bodyfile="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1ab3048066d47baafd8a5b45af75250ae5" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>byte[]</type>
        <definition>static byte [] org.apache.iceberg.util.ZOrderByteUtils.interleaveBits</definition>
        <argsstring>(byte[][] columnsBinary, int interleavedSize)</argsstring>
        <name>interleaveBits</name>
        <param>
          <type>byte</type>
          <declname>columnsBinary</declname>
          <array>[][]</array>
        </param>
        <param>
          <type>int</type>
          <declname>interleavedSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" line="162" column="15" bodyfile="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" bodystart="162" bodyend="164"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1a5a22de0e473c9911b850b3fe20bf0b12" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ByteBuffer</type>
        <definition>static ByteBuffer org.apache.iceberg.util.ZOrderByteUtils.intToOrderedBytes</definition>
        <argsstring>(int val, ByteBuffer reuse)</argsstring>
        <name>intToOrderedBytes</name>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>ByteBuffer</type>
          <declname>reuse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signed ints do not have their bytes in magnitude order because of the sign bit. To fix this, flip the sign bit so that all negatives are ordered before positives. This essentially shifts the 0 value so that we don&apos;t break our ordering when we cross the new 0 value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" line="58" column="28" bodyfile="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1aceb3a85121c035bcc234bdc21f35261e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ByteBuffer</type>
        <definition>static ByteBuffer org.apache.iceberg.util.ZOrderByteUtils.longToOrderedBytes</definition>
        <argsstring>(long val, ByteBuffer reuse)</argsstring>
        <name>longToOrderedBytes</name>
        <param>
          <type>long</type>
          <declname>val</declname>
        </param>
        <param>
          <type>ByteBuffer</type>
          <declname>reuse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signed longs are treated the same as the signed ints in <ref refid="" kindref="compound">ByteBuffer)</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" line="68" column="28" bodyfile="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" bodystart="68" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1ac3429be9d19e35471edd5c836bab6bfc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ByteBuffer</type>
        <definition>static ByteBuffer org.apache.iceberg.util.ZOrderByteUtils.shortToOrderedBytes</definition>
        <argsstring>(short val, ByteBuffer reuse)</argsstring>
        <name>shortToOrderedBytes</name>
        <param>
          <type>short</type>
          <declname>val</declname>
        </param>
        <param>
          <type>ByteBuffer</type>
          <declname>reuse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signed shorts are treated the same as the signed ints in <ref refid="" kindref="compound">ByteBuffer)</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" line="78" column="28" bodyfile="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1af31589c006f2c0d6c594ee4f7f4151e7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ByteBuffer</type>
        <definition>static ByteBuffer org.apache.iceberg.util.ZOrderByteUtils.tinyintToOrderedBytes</definition>
        <argsstring>(byte val, ByteBuffer reuse)</argsstring>
        <name>tinyintToOrderedBytes</name>
        <param>
          <type>byte</type>
          <declname>val</declname>
        </param>
        <param>
          <type>ByteBuffer</type>
          <declname>reuse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signed tiny ints are treated the same as the signed ints in <ref refid="" kindref="compound">ByteBuffer)</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" line="88" column="28" bodyfile="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" bodystart="88" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1abe7c099bc8fd1f663d95a20c13ac9309" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ByteBuffer</type>
        <definition>static ByteBuffer org.apache.iceberg.util.ZOrderByteUtils.floatToOrderedBytes</definition>
        <argsstring>(float val, ByteBuffer reuse)</argsstring>
        <name>floatToOrderedBytes</name>
        <param>
          <type>float</type>
          <declname>val</declname>
        </param>
        <param>
          <type>ByteBuffer</type>
          <declname>reuse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IEEE 754 : “If two floating-point numbers in the same format are ordered (say, x {@literal &lt;} y), they are ordered the same way when their bits are reinterpreted as sign-magnitude integers.”</para>
<para>Which means floats can be treated as sign magnitude integers which can then be converted into lexicographically comparable bytes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" line="102" column="28" bodyfile="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" bodystart="102" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1a1f9097178fdd32d761d7f16ac91aeb9f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ByteBuffer</type>
        <definition>static ByteBuffer org.apache.iceberg.util.ZOrderByteUtils.doubleToOrderedBytes</definition>
        <argsstring>(double val, ByteBuffer reuse)</argsstring>
        <name>doubleToOrderedBytes</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <param>
          <type>ByteBuffer</type>
          <declname>reuse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Doubles are treated the same as floats in <ref refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1abe7c099bc8fd1f663d95a20c13ac9309" kindref="member">floatToOrderedBytes(float, ByteBuffer)</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" line="111" column="28" bodyfile="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" bodystart="111" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1a27b62156c6fcc0f13341f8c6f110d386" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ByteBuffer</type>
        <definition>static ByteBuffer org.apache.iceberg.util.ZOrderByteUtils.stringToOrderedBytes</definition>
        <argsstring>(String val, int length, ByteBuffer reuse, CharsetEncoder encoder)</argsstring>
        <name>stringToOrderedBytes</name>
        <param>
          <type>String</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>ByteBuffer</type>
          <declname>reuse</declname>
        </param>
        <param>
          <type>CharsetEncoder</type>
          <declname>encoder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Strings are lexicographically sortable BUT if different byte array lengths will ruin the Z-Ordering. (ZOrder requires that a given column contribute the same number of bytes every time). This implementation just uses a set size to for all output byte representations. Truncating longer strings and right padding 0 for shorter strings. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" line="126" column="28" bodyfile="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" bodystart="126" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1afe51e05b33a497b78303db411b97d6bc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ByteBuffer</type>
        <definition>static ByteBuffer org.apache.iceberg.util.ZOrderByteUtils.byteTruncateOrFill</definition>
        <argsstring>(byte[] val, int length, ByteBuffer reuse)</argsstring>
        <name>byteTruncateOrFill</name>
        <param>
          <type>byte[]</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>ByteBuffer</type>
          <declname>reuse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a bytebuffer with the given bytes truncated to length, or filled with 0&apos;s to length depending on whether the given bytes are larger or smaller than the given length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" line="146" column="28" bodyfile="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" bodystart="146" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1ad01e0a61f4455b3ac52b884dc46cc338" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>byte[]</type>
        <definition>static byte [] org.apache.iceberg.util.ZOrderByteUtils.interleaveBits</definition>
        <argsstring>(byte[][] columnsBinary, int interleavedSize, ByteBuffer reuse)</argsstring>
        <name>interleaveBits</name>
        <param>
          <type>byte</type>
          <declname>columnsBinary</declname>
          <array>[][]</array>
        </param>
        <param>
          <type>int</type>
          <declname>interleavedSize</declname>
        </param>
        <param>
          <type>ByteBuffer</type>
          <declname>reuse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interleave bits using a naive loop. Variable length inputs are allowed but to get a consistent ordering it is required that every column contribute the same number of bytes in each invocation. Bits are interleaved from all columns that have a bit available at that position. Once a Column has no more bits to produce it is skipped in the interleaving.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>columnsBinary</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of ordered byte representations of the columns being ZOrdered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interleavedSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to use in the output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the columnbytes interleaved </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" line="179" column="22" bodyfile="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" bodystart="179" bodyend="227"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Within Z-Ordering the byte representations of objects being compared must be ordered, this requires several types to be transformed when converted to bytes. The goal is to map object&apos;s whose byte representation are not lexicographically ordered into representations that are lexicographically ordered. Bytes produced should be compared lexicographically as unsigned bytes, big-endian.</para>
<para>All types except for String are stored within an 8 Byte Buffer</para>
<para>Most of these techniques are derived from <ulink url="https://aws.amazon.com/blogs/database/z-order-indexing-for-multifaceted-queries-in-amazon-dynamodb-part-2/">https://aws.amazon.com/blogs/database/z-order-indexing-for-multifaceted-queries-in-amazon-dynamodb-part-2/</ulink></para>
<para>Some implementation is taken from <ulink url="https://github.com/apache/hbase/blob/master/hbase-common/src/main/java/org/apache/hadoop/hbase/util/OrderedBytes.java">https://github.com/apache/hbase/blob/master/hbase-common/src/main/java/org/apache/hadoop/hbase/util/OrderedBytes.java</ulink> </para>
    </detaileddescription>
    <location file="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" line="43" column="29" bodyfile="core/src/main/java/org/apache/iceberg/util/ZOrderByteUtils.java" bodystart="43" bodyend="228"/>
    <listofallmembers>
      <member refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1afc4e8eaedf0fd31962774561e8f6aa99" prot="package" virt="non-virtual"><scope>org::apache::iceberg::util::ZOrderByteUtils</scope><name>allocatePrimitiveBuffer</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1afe51e05b33a497b78303db411b97d6bc" prot="public" virt="non-virtual"><scope>org::apache::iceberg::util::ZOrderByteUtils</scope><name>byteTruncateOrFill</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1a1f9097178fdd32d761d7f16ac91aeb9f" prot="public" virt="non-virtual"><scope>org::apache::iceberg::util::ZOrderByteUtils</scope><name>doubleToOrderedBytes</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1abe7c099bc8fd1f663d95a20c13ac9309" prot="public" virt="non-virtual"><scope>org::apache::iceberg::util::ZOrderByteUtils</scope><name>floatToOrderedBytes</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1ab3048066d47baafd8a5b45af75250ae5" prot="package" virt="non-virtual"><scope>org::apache::iceberg::util::ZOrderByteUtils</scope><name>interleaveBits</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1ad01e0a61f4455b3ac52b884dc46cc338" prot="public" virt="non-virtual"><scope>org::apache::iceberg::util::ZOrderByteUtils</scope><name>interleaveBits</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1a5a22de0e473c9911b850b3fe20bf0b12" prot="public" virt="non-virtual"><scope>org::apache::iceberg::util::ZOrderByteUtils</scope><name>intToOrderedBytes</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1aceb3a85121c035bcc234bdc21f35261e" prot="public" virt="non-virtual"><scope>org::apache::iceberg::util::ZOrderByteUtils</scope><name>longToOrderedBytes</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1ac74b185acde7fad8b71d71d8826dfbca" prot="public" virt="non-virtual"><scope>org::apache::iceberg::util::ZOrderByteUtils</scope><name>PRIMITIVE_BUFFER_SIZE</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1ac3429be9d19e35471edd5c836bab6bfc" prot="public" virt="non-virtual"><scope>org::apache::iceberg::util::ZOrderByteUtils</scope><name>shortToOrderedBytes</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1a27b62156c6fcc0f13341f8c6f110d386" prot="public" virt="non-virtual"><scope>org::apache::iceberg::util::ZOrderByteUtils</scope><name>stringToOrderedBytes</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1af31589c006f2c0d6c594ee4f7f4151e7" prot="public" virt="non-virtual"><scope>org::apache::iceberg::util::ZOrderByteUtils</scope><name>tinyintToOrderedBytes</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1ad6e8c114dda8af9652ffa8d9cfc38fc8" prot="private" virt="non-virtual"><scope>org::apache::iceberg::util::ZOrderByteUtils</scope><name>ZOrderByteUtils</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

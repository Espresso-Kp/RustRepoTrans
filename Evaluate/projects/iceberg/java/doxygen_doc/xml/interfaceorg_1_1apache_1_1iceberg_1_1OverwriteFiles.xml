<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles" kind="interface" language="Java" prot="public">
    <compoundname>org::apache::iceberg::OverwriteFiles</compoundname>
    <basecompoundref refid="interfaceorg_1_1apache_1_1iceberg_1_1SnapshotUpdate" prot="public" virt="non-virtual">org.apache.iceberg.SnapshotUpdate&lt; OverwriteFiles &gt;</basecompoundref>
    <derivedcompoundref refid="classorg_1_1apache_1_1iceberg_1_1BaseOverwriteFiles" prot="public" virt="non-virtual">org.apache.iceberg.BaseOverwriteFiles</derivedcompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1a8f6f95273052cce588c4a56e6492e7cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles" kindref="compound">OverwriteFiles</ref></type>
        <definition>OverwriteFiles org.apache.iceberg.OverwriteFiles.overwriteByRowFilter</definition>
        <argsstring>(Expression expr)</argsstring>
        <name>overwriteByRowFilter</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1BaseOverwriteFiles_1af962c7d4233c4c40eba6971e62d70f9b">overwriteByRowFilter</reimplementedby>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete files that match an <ref refid="" kindref="compound">Expression</ref> on data rows from the table.</para>
<para>A file is selected to be deleted by the expression if it could contain any rows that match the expression (candidate files are selected using an {<ref refid="classorg_1_1apache_1_1iceberg_1_1expressions_1_1Projections_1aae3c73f75f21cd7b41bd264894734b2e" kindref="member">inclusive projection}). These candidate files are deleted if all of the rows in the file must match the expression (the partition data matches the expression&apos;s  Projections#strict(PartitionSpec)} strict projection}). This guarantees that files are deleted if and only if all rows in the file must match the expression. </ref><ref refid="classorg_1_1apache_1_1iceberg_1_1Files" kindref="compound">Files</ref> that may contain some rows that match the expression and some rows that do not will result in a <ref refid="" kindref="compound">ValidationException</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>an expression on rows in the table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this for method chaining </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ValidationException</parametername>
</parameternamelist>
<parameterdescription>
<para>If a file can contain both rows that match and rows that do not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="api/src/main/java/org/apache/iceberg/OverwriteFiles.java" line="60" column="18"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1a5e46314c362978d66b42bc61632d3d61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles" kindref="compound">OverwriteFiles</ref></type>
        <definition>OverwriteFiles org.apache.iceberg.OverwriteFiles.addFile</definition>
        <argsstring>(DataFile file)</argsstring>
        <name>addFile</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1BaseOverwriteFiles_1a6f3cc804d1108ca15eaadc8dc273a78a">addFile</reimplementedby>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1DataFile" kindref="compound">DataFile</ref></type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a <ref refid="interfaceorg_1_1apache_1_1iceberg_1_1DataFile" kindref="compound">DataFile</ref> to the table.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>a data file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this for method chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="api/src/main/java/org/apache/iceberg/OverwriteFiles.java" line="68" column="18"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1a187142fde7313fdcc6449bf470b39022" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles" kindref="compound">OverwriteFiles</ref></type>
        <definition>OverwriteFiles org.apache.iceberg.OverwriteFiles.deleteFile</definition>
        <argsstring>(DataFile file)</argsstring>
        <name>deleteFile</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1BaseOverwriteFiles_1ad438d67dba0720a66b1b5bd46e6c633e">deleteFile</reimplementedby>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1DataFile" kindref="compound">DataFile</ref></type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete a <ref refid="interfaceorg_1_1apache_1_1iceberg_1_1DataFile" kindref="compound">DataFile</ref> from the table.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>a data file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this for method chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="api/src/main/java/org/apache/iceberg/OverwriteFiles.java" line="76" column="18"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1a618394490d7e1828b11457fc39cf5f0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles" kindref="compound">OverwriteFiles</ref></type>
        <definition>OverwriteFiles org.apache.iceberg.OverwriteFiles.validateAddedFilesMatchOverwriteFilter</definition>
        <argsstring>()</argsstring>
        <name>validateAddedFilesMatchOverwriteFilter</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1BaseOverwriteFiles_1a2a8868a626ea7808cc156fb34b54349f">validateAddedFilesMatchOverwriteFilter</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal that each file added to the table must match the overwrite expression.</para>
<para>If this method is called, each added file is validated on commit to ensure that it matches the overwrite row filter. This is used to ensure that writes are idempotent: that files cannot be added during a commit that would not be removed if the operation were run a second time.</para>
<para><simplesect kind="return"><para>this for method chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="api/src/main/java/org/apache/iceberg/OverwriteFiles.java" line="87" column="18"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1a9b8c7e871771610b91b78877e94590b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles" kindref="compound">OverwriteFiles</ref></type>
        <definition>OverwriteFiles org.apache.iceberg.OverwriteFiles.validateFromSnapshot</definition>
        <argsstring>(long snapshotId)</argsstring>
        <name>validateFromSnapshot</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1BaseOverwriteFiles_1ad3114d75b919b664c2d05fd169d2d7e7">validateFromSnapshot</reimplementedby>
        <param>
          <type>long</type>
          <declname>snapshotId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the snapshot ID used in any reads for this operation.</para>
<para>Validations will check changes after this snapshot ID. If the from snapshot is not set, all ancestor snapshots through the table&apos;s initial snapshot are validated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>snapshotId</parametername>
</parameternamelist>
<parameterdescription>
<para>a snapshot ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this for method chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="api/src/main/java/org/apache/iceberg/OverwriteFiles.java" line="98" column="18"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1aa514e2af44cc4fe81eb725243119b9d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles" kindref="compound">OverwriteFiles</ref></type>
        <definition>OverwriteFiles org.apache.iceberg.OverwriteFiles.caseSensitive</definition>
        <argsstring>(boolean caseSensitive)</argsstring>
        <name>caseSensitive</name>
        <param>
          <type>boolean</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables or disables case sensitive expression binding for validations that accept expressions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>caseSensitive</parametername>
</parameternamelist>
<parameterdescription>
<para>whether expression binding should be case sensitive </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this for method chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="api/src/main/java/org/apache/iceberg/OverwriteFiles.java" line="106" column="18"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1a3122a7534477ce184d860447540fe964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles" kindref="compound">OverwriteFiles</ref></type>
        <definition>OverwriteFiles org.apache.iceberg.OverwriteFiles.conflictDetectionFilter</definition>
        <argsstring>(Expression conflictDetectionFilter)</argsstring>
        <name>conflictDetectionFilter</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1BaseOverwriteFiles_1a064a6490b4a0558141cf0e3290ae6cca">conflictDetectionFilter</reimplementedby>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
          <declname>conflictDetectionFilter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a conflict detection filter used to validate concurrently added data and delete files.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conflictDetectionFilter</parametername>
</parameternamelist>
<parameterdescription>
<para>an expression on rows in the table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this for method chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="api/src/main/java/org/apache/iceberg/OverwriteFiles.java" line="114" column="18"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1ab75f23e2650a65d5184255693bf28d5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles" kindref="compound">OverwriteFiles</ref></type>
        <definition>OverwriteFiles org.apache.iceberg.OverwriteFiles.validateNoConflictingData</definition>
        <argsstring>()</argsstring>
        <name>validateNoConflictingData</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1BaseOverwriteFiles_1afff5f34532ae9fe7e8e5b9a80f8f6586">validateNoConflictingData</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables validation that data added concurrently does not conflict with this commit&apos;s operation.</para>
<para>This method should be called while committing non-idempotent overwrite operations. If a concurrent operation commits a new file after the data was read and that file might contain rows matching the specified conflict detection filter, the overwrite operation will detect this and fail.</para>
<para>Calling this method with a correct conflict detection filter is required to maintain isolation for non-idempotent overwrite operations.</para>
<para>Validation uses the conflict detection filter passed to {<ref refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1a3122a7534477ce184d860447540fe964" kindref="member">} and applies to operations that happened after the snapshot passed to  #validateFromSnapshot(long)}. If the conflict detection filter is not set, any new data added concurrently will fail this overwrite operation.  this for method chaining </ref></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="api/src/main/java/org/apache/iceberg/OverwriteFiles.java" line="134" column="18"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1ab2e0ee8a7adae699ba617de0414a7dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles" kindref="compound">OverwriteFiles</ref></type>
        <definition>OverwriteFiles org.apache.iceberg.OverwriteFiles.validateNoConflictingDeletes</definition>
        <argsstring>()</argsstring>
        <name>validateNoConflictingDeletes</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1BaseOverwriteFiles_1aac047ae95de06671883b70979896a5b8">validateNoConflictingDeletes</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables validation that deletes that happened concurrently do not conflict with this commit&apos;s operation.</para>
<para>Validating concurrent deletes is required during non-idempotent overwrite operations. If a concurrent operation deletes data in one of the files being overwritten, the overwrite operation must be aborted as it may undelete rows that were removed concurrently.</para>
<para>Calling this method with a correct conflict detection filter is required to maintain isolation for non-idempotent overwrite operations.</para>
<para>Validation uses the conflict detection filter passed to {<ref refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1a3122a7534477ce184d860447540fe964" kindref="member">} and applies to operations that happened after the snapshot passed to  #validateFromSnapshot(long)}. If the conflict detection filter is not set, this operation will use the row filter provided in { #overwriteByRowFilter(Expression)} to check for new delete files and will ensure there are no conflicting deletes for data files removed via  #deleteFile(DataFile)}.  this for method chaining </ref></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="api/src/main/java/org/apache/iceberg/OverwriteFiles.java" line="156" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>API for overwriting files in a table.</para>
<para>This API accumulates file additions and produces a new <ref refid="interfaceorg_1_1apache_1_1iceberg_1_1Snapshot" kindref="compound">Snapshot</ref> of the table by replacing all the deleted files with the set of additions. This operation is used to implement idempotent writes that always replace a section of a table with new data or update/delete operations that eagerly overwrite files.</para>
<para>Overwrites can be validated. The default validation mode is idempotent, meaning the overwrite is correct and should be committed out regardless of other concurrent changes to the table. For example, this can be used for replacing all the data for day D with query results. Alternatively, this API can be configured for overwriting certain files with their filtered versions while ensuring no new data that would need to be filtered has been added.</para>
<para>When committing, these changes will be applied to the latest table snapshot. Commit conflicts will be resolved by applying the changes to the new latest snapshot and reattempting the commit. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>org.apache.iceberg.OverwriteFiles</label>
        <link refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>org.apache.iceberg.BaseOverwriteFiles</label>
        <link refid="classorg_1_1apache_1_1iceberg_1_1BaseOverwriteFiles"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>org.apache.iceberg.SnapshotUpdate&lt; OverwriteFiles &gt;</label>
        <link refid="interfaceorg_1_1apache_1_1iceberg_1_1SnapshotUpdate"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>org.apache.iceberg.OverwriteFiles</label>
        <link refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>org.apache.iceberg.SnapshotUpdate&lt; OverwriteFiles &gt;</label>
        <link refid="interfaceorg_1_1apache_1_1iceberg_1_1SnapshotUpdate"/>
      </node>
    </collaborationgraph>
    <location file="api/src/main/java/org/apache/iceberg/OverwriteFiles.java" line="42" column="48" bodyfile="api/src/main/java/org/apache/iceberg/OverwriteFiles.java" bodystart="42" bodyend="157"/>
    <listofallmembers>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1a5e46314c362978d66b42bc61632d3d61" prot="public" virt="non-virtual"><scope>org::apache::iceberg::OverwriteFiles</scope><name>addFile</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1aa514e2af44cc4fe81eb725243119b9d1" prot="public" virt="non-virtual"><scope>org::apache::iceberg::OverwriteFiles</scope><name>caseSensitive</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1a3122a7534477ce184d860447540fe964" prot="public" virt="non-virtual"><scope>org::apache::iceberg::OverwriteFiles</scope><name>conflictDetectionFilter</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1a187142fde7313fdcc6449bf470b39022" prot="public" virt="non-virtual"><scope>org::apache::iceberg::OverwriteFiles</scope><name>deleteFile</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1SnapshotUpdate_1a939514bf390d07c354dffc6be1b2ba89" prot="public" virt="non-virtual"><scope>org::apache::iceberg::OverwriteFiles</scope><name>deleteWith</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1a8f6f95273052cce588c4a56e6492e7cd" prot="public" virt="non-virtual"><scope>org::apache::iceberg::OverwriteFiles</scope><name>overwriteByRowFilter</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1SnapshotUpdate_1a5a6c298d7ae52b719969641744d621ff" prot="public" virt="non-virtual"><scope>org::apache::iceberg::OverwriteFiles</scope><name>scanManifestsWith</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1SnapshotUpdate_1a72b3978b4804d7f75c70f9e0c95ef55c" prot="public" virt="non-virtual"><scope>org::apache::iceberg::OverwriteFiles</scope><name>set</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1SnapshotUpdate_1ac54dc0e998f7664271ab88be021d37ed" prot="public" virt="non-virtual"><scope>org::apache::iceberg::OverwriteFiles</scope><name>stageOnly</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1SnapshotUpdate_1a4eec4643f899de9ed2c4f22beb310447" prot="public" virt="non-virtual"><scope>org::apache::iceberg::OverwriteFiles</scope><name>toBranch</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1a618394490d7e1828b11457fc39cf5f0b" prot="public" virt="non-virtual"><scope>org::apache::iceberg::OverwriteFiles</scope><name>validateAddedFilesMatchOverwriteFilter</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1a9b8c7e871771610b91b78877e94590b3" prot="public" virt="non-virtual"><scope>org::apache::iceberg::OverwriteFiles</scope><name>validateFromSnapshot</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1ab75f23e2650a65d5184255693bf28d5e" prot="public" virt="non-virtual"><scope>org::apache::iceberg::OverwriteFiles</scope><name>validateNoConflictingData</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1OverwriteFiles_1ab2e0ee8a7adae699ba617de0414a7dec" prot="public" virt="non-virtual"><scope>org::apache::iceberg::OverwriteFiles</scope><name>validateNoConflictingDeletes</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

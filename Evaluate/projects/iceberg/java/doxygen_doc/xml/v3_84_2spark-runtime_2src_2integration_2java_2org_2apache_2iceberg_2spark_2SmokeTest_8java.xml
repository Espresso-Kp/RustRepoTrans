<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="v3_84_2spark-runtime_2src_2integration_2java_2org_2apache_2iceberg_2spark_2SmokeTest_8java" kind="file" language="Java">
    <compoundname>SmokeTest.java</compoundname>
    <innerclass refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest" prot="public">org::apache::iceberg::spark::SmokeTest</innerclass>
    <innernamespace refid="namespaceorg_1_1apache_1_1iceberg_1_1spark">org::apache::iceberg::spark</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">package<sp/></highlight><highlight class="normal">org.apache.iceberg.spark;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>java.io.IOException;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>java.util.Map;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.<ref refid="namespaceorg_1_1apache" kindref="compound">apache</ref>.<ref refid="namespaceorg_1_1apache_1_1iceberg" kindref="compound">iceberg</ref>.<ref refid="interfaceorg_1_1apache_1_1iceberg_1_1Table" kindref="compound">Table</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.<ref refid="namespaceorg_1_1apache" kindref="compound">apache</ref>.<ref refid="namespaceorg_1_1apache_1_1iceberg" kindref="compound">iceberg</ref>.<ref refid="namespaceorg_1_1apache_1_1iceberg_1_1catalog" kindref="compound">catalog</ref>.<ref refid="classorg_1_1apache_1_1iceberg_1_1catalog_1_1TableIdentifier" kindref="compound">TableIdentifier</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.<ref refid="namespaceorg_1_1apache" kindref="compound">apache</ref>.<ref refid="namespaceorg_1_1apache_1_1iceberg" kindref="compound">iceberg</ref>.<ref refid="namespaceorg_1_1apache_1_1iceberg_1_1spark" kindref="compound">spark</ref>.extensions.<ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1extensions_1_1SparkExtensionsTestBase" kindref="compound">SparkExtensionsTestBase</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.<ref refid="namespaceorg_1_1apache" kindref="compound">apache</ref>.<ref refid="namespaceorg_1_1apache_1_1spark" kindref="compound">spark</ref>.<ref refid="namespaceorg_1_1apache_1_1spark_1_1sql" kindref="compound">sql</ref>.<ref refid="namespaceorg_1_1apache_1_1spark_1_1sql_1_1catalyst" kindref="compound">catalyst</ref>.<ref refid="namespaceorg_1_1apache_1_1spark_1_1sql_1_1catalyst_1_1analysis" kindref="compound">analysis</ref>.NoSuchTableException;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.assertj.core.api.Assertions;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.junit.Assert;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.junit.Before;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.junit.Test;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SmokeTest<sp/></highlight><highlight class="keyword">extends</highlight><highlight class="normal"><sp/>SparkExtensionsTestBase<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a8537453bfb517634b134010b6cf6ad24" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a8537453bfb517634b134010b6cf6ad24" kindref="member">SmokeTest</ref>(String<sp/>catalogName,<sp/>String<sp/>implementation,<sp/>Map&lt;String,<sp/>String&gt;<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>super(catalogName,<sp/>implementation,<sp/>config);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>@Before</highlight></codeline>
<codeline lineno="39" refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a5dd10a937005bc112c9ca2881ce79979" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a5dd10a937005bc112c9ca2881ce79979" kindref="member">dropTable</ref>()<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;DROP<sp/>TABLE<sp/>IF<sp/>EXISTS<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>tableName);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>through<sp/>our<sp/>Doc&apos;s<sp/>Getting<sp/>Started<sp/>Example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>Update<sp/>doc<sp/>example<sp/>so<sp/>that<sp/>it<sp/>can<sp/>actually<sp/>be<sp/>run,<sp/>modifications<sp/>were<sp/>required<sp/>for<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>suite<sp/>to<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>@Test</highlight></codeline>
<codeline lineno="47" refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1ad23525fd803baa7bc78ffc8a58a69e11" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1ad23525fd803baa7bc78ffc8a58a69e11" kindref="member">testGettingStarted</ref>()<sp/>throws<sp/>IOException<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Creating<sp/>a<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;CREATE<sp/>TABLE<sp/>%s<sp/>(id<sp/>bigint,<sp/>data<sp/>string)<sp/>USING<sp/>iceberg&quot;</highlight><highlight class="normal">,<sp/>tableName);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Writing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;INSERT<sp/>INTO<sp/>%s<sp/>VALUES<sp/>(1,<sp/>&apos;a&apos;),<sp/>(2,<sp/>&apos;b&apos;),<sp/>(3,<sp/>&apos;c&apos;)&quot;</highlight><highlight class="normal">,<sp/>tableName);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert.assertEquals(</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>have<sp/>inserted<sp/>3<sp/>rows&quot;</highlight><highlight class="normal">,<sp/>3L,<sp/>scalarSql(</highlight><highlight class="stringliteral">&quot;SELECT<sp/>COUNT(*)<sp/>FROM<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>tableName));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;DROP<sp/>TABLE<sp/>IF<sp/>EXISTS<sp/>source<sp/>PURGE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CREATE<sp/>TABLE<sp/>source<sp/>(id<sp/>bigint,<sp/>data<sp/>string)<sp/>USING<sp/>parquet<sp/>LOCATION<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.newFolder());</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;INSERT<sp/>INTO<sp/>source<sp/>VALUES<sp/>(10,<sp/>&apos;d&apos;),<sp/>(11,<sp/>&apos;ee&apos;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;INSERT<sp/>INTO<sp/>%s<sp/>SELECT<sp/>id,<sp/>data<sp/>FROM<sp/>source<sp/>WHERE<sp/>length(data)<sp/>=<sp/>1&quot;</highlight><highlight class="normal">,<sp/>tableName);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert.assertEquals(</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Table<sp/>should<sp/>now<sp/>have<sp/>4<sp/>rows&quot;</highlight><highlight class="normal">,<sp/>4L,<sp/>scalarSql(</highlight><highlight class="stringliteral">&quot;SELECT<sp/>COUNT(*)<sp/>FROM<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>tableName));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;DROP<sp/>TABLE<sp/>IF<sp/>EXISTS<sp/>updates<sp/>PURGE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CREATE<sp/>TABLE<sp/>updates<sp/>(id<sp/>bigint,<sp/>data<sp/>string)<sp/>USING<sp/>parquet<sp/>LOCATION<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.newFolder());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;INSERT<sp/>INTO<sp/>updates<sp/>VALUES<sp/>(1,<sp/>&apos;x&apos;),<sp/>(2,<sp/>&apos;x&apos;),<sp/>(4,<sp/>&apos;z&apos;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MERGE<sp/>INTO<sp/>%s<sp/>t<sp/>USING<sp/>(SELECT<sp/>*<sp/>FROM<sp/>updates)<sp/>u<sp/>ON<sp/>t.id<sp/>=<sp/>u.id\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;WHEN<sp/>MATCHED<sp/>THEN<sp/>UPDATE<sp/>SET<sp/>t.data<sp/>=<sp/>u.data\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;WHEN<sp/>NOT<sp/>MATCHED<sp/>THEN<sp/>INSERT<sp/>*&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableName);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert.assertEquals(</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Table<sp/>should<sp/>now<sp/>have<sp/>5<sp/>rows&quot;</highlight><highlight class="normal">,<sp/>5L,<sp/>scalarSql(</highlight><highlight class="stringliteral">&quot;SELECT<sp/>COUNT(*)<sp/>FROM<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>tableName));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert.assertEquals(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Record<sp/>1<sp/>should<sp/>now<sp/>have<sp/>data<sp/>x&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalarSql(</highlight><highlight class="stringliteral">&quot;SELECT<sp/>data<sp/>FROM<sp/>%s<sp/>WHERE<sp/>id<sp/>=<sp/>1&quot;</highlight><highlight class="normal">,<sp/>tableName));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert.assertEquals(</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;There<sp/>should<sp/>be<sp/>2<sp/>records<sp/>with<sp/>data<sp/>x&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2L,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalarSql(</highlight><highlight class="stringliteral">&quot;SELECT<sp/>count(1)<sp/>as<sp/>count<sp/>FROM<sp/>%s<sp/>WHERE<sp/>data<sp/>=<sp/>&apos;x&apos;<sp/>GROUP<sp/>BY<sp/>data<sp/>&quot;</highlight><highlight class="normal">,<sp/>tableName));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>supported<sp/>because<sp/>of<sp/>Spark<sp/>limitation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!catalogName.equals(</highlight><highlight class="stringliteral">&quot;spark_catalog&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.assertEquals(</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;There<sp/>should<sp/>be<sp/>3<sp/>snapshots&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3L,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalarSql(</highlight><highlight class="stringliteral">&quot;SELECT<sp/>COUNT(*)<sp/>FROM<sp/>%s.snapshots&quot;</highlight><highlight class="normal">,<sp/>tableName));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>From<sp/>Spark<sp/>DDL<sp/>Docs<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>@Test</highlight></codeline>
<codeline lineno="101" refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a229b27adbec0998de5f0405543c943a1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a229b27adbec0998de5f0405543c943a1" kindref="member">testAlterTable</ref>()<sp/>throws<sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1exceptions_1_1NoSuchTableException" kindref="compound">NoSuchTableException</ref><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CREATE<sp/>TABLE<sp/>%s<sp/>(category<sp/>int,<sp/>id<sp/>bigint,<sp/>data<sp/>string,<sp/>ts<sp/>timestamp)<sp/>USING<sp/>iceberg&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableName);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1Table" kindref="compound">Table</ref><sp/>table<sp/>=<sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a7e0cf4a2c8900342a657f5da65432dde" kindref="member">getTable</ref>();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>examples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;ALTER<sp/>TABLE<sp/>%s<sp/>ADD<sp/>PARTITION<sp/>FIELD<sp/>bucket(16,<sp/>id)&quot;</highlight><highlight class="normal">,<sp/>tableName);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;ALTER<sp/>TABLE<sp/>%s<sp/>ADD<sp/>PARTITION<sp/>FIELD<sp/>truncate(data,<sp/>4)&quot;</highlight><highlight class="normal">,<sp/>tableName);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;ALTER<sp/>TABLE<sp/>%s<sp/>ADD<sp/>PARTITION<sp/>FIELD<sp/>years(ts)&quot;</highlight><highlight class="normal">,<sp/>tableName);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;ALTER<sp/>TABLE<sp/>%s<sp/>ADD<sp/>PARTITION<sp/>FIELD<sp/>bucket(16,<sp/>category)<sp/>AS<sp/>shard&quot;</highlight><highlight class="normal">,<sp/>tableName);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>table<sp/>=<sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a7e0cf4a2c8900342a657f5da65432dde" kindref="member">getTable</ref>();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert.assertEquals(</highlight><highlight class="stringliteral">&quot;Table<sp/>should<sp/>have<sp/>4<sp/>partition<sp/>fields&quot;</highlight><highlight class="normal">,<sp/>4,<sp/>table.<ref refid="interfaceorg_1_1apache_1_1iceberg_1_1Table_1a896bd81a171a850db849109694a5b9ce" kindref="member">spec</ref>().<ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec_1a9e4d9fea3edf1aed8d8e7ef1f0392450" kindref="member">fields</ref>().size());</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Drop<sp/>Examples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;ALTER<sp/>TABLE<sp/>%s<sp/>DROP<sp/>PARTITION<sp/>FIELD<sp/>bucket(16,<sp/>id)&quot;</highlight><highlight class="normal">,<sp/>tableName);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;ALTER<sp/>TABLE<sp/>%s<sp/>DROP<sp/>PARTITION<sp/>FIELD<sp/>truncate(data,<sp/>4)&quot;</highlight><highlight class="normal">,<sp/>tableName);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;ALTER<sp/>TABLE<sp/>%s<sp/>DROP<sp/>PARTITION<sp/>FIELD<sp/>years(ts)&quot;</highlight><highlight class="normal">,<sp/>tableName);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;ALTER<sp/>TABLE<sp/>%s<sp/>DROP<sp/>PARTITION<sp/>FIELD<sp/>shard&quot;</highlight><highlight class="normal">,<sp/>tableName);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>table<sp/>=<sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a7e0cf4a2c8900342a657f5da65432dde" kindref="member">getTable</ref>();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert.assertTrue(</highlight><highlight class="stringliteral">&quot;Table<sp/>should<sp/>be<sp/>unpartitioned&quot;</highlight><highlight class="normal">,<sp/>table.<ref refid="interfaceorg_1_1apache_1_1iceberg_1_1Table_1a896bd81a171a850db849109694a5b9ce" kindref="member">spec</ref>().<ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec_1afbfdfd843c02bcae35fe72994dcd968d" kindref="member">isUnpartitioned</ref>());</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>order<sp/>examples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;ALTER<sp/>TABLE<sp/>%s<sp/>WRITE<sp/>ORDERED<sp/>BY<sp/>category,<sp/>id&quot;</highlight><highlight class="normal">,<sp/>tableName);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;ALTER<sp/>TABLE<sp/>%s<sp/>WRITE<sp/>ORDERED<sp/>BY<sp/>category<sp/>ASC,<sp/>id<sp/>DESC&quot;</highlight><highlight class="normal">,<sp/>tableName);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;ALTER<sp/>TABLE<sp/>%s<sp/>WRITE<sp/>ORDERED<sp/>BY<sp/>category<sp/>ASC<sp/>NULLS<sp/>LAST,<sp/>id<sp/>DESC<sp/>NULLS<sp/>FIRST&quot;</highlight><highlight class="normal">,<sp/>tableName);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>table<sp/>=<sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a7e0cf4a2c8900342a657f5da65432dde" kindref="member">getTable</ref>();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert.assertEquals(</highlight><highlight class="stringliteral">&quot;Table<sp/>should<sp/>be<sp/>sorted<sp/>on<sp/>2<sp/>fields&quot;</highlight><highlight class="normal">,<sp/>2,<sp/>table.<ref refid="interfaceorg_1_1apache_1_1iceberg_1_1Table_1a4a5bd2ba380329a016482879f2f0b0cc" kindref="member">sortOrder</ref>().<ref refid="classorg_1_1apache_1_1iceberg_1_1SortOrder_1a332fdc761db41371f5da464fcdc71d52" kindref="member">fields</ref>().size());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>@Test</highlight></codeline>
<codeline lineno="132" refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a2e4286b9a8daaa1c333e94bee7934a83" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a2e4286b9a8daaa1c333e94bee7934a83" kindref="member">testCreateTable</ref>()<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;DROP<sp/>TABLE<sp/>IF<sp/>EXISTS<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>tableName(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;DROP<sp/>TABLE<sp/>IF<sp/>EXISTS<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>tableName(</highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;DROP<sp/>TABLE<sp/>IF<sp/>EXISTS<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>tableName(</highlight><highlight class="stringliteral">&quot;third&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CREATE<sp/>TABLE<sp/>%s<sp/>(\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>id<sp/>bigint<sp/>COMMENT<sp/>&apos;unique<sp/>id&apos;,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>data<sp/>string)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;USING<sp/>iceberg&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableName(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a7e0cf4a2c8900342a657f5da65432dde" kindref="member">getTable</ref>(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Table<sp/>should<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CREATE<sp/>TABLE<sp/>%s<sp/>(\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>id<sp/>bigint,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>data<sp/>string,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>category<sp/>string)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;USING<sp/>iceberg\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;PARTITIONED<sp/>BY<sp/>(category)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableName(</highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1Table" kindref="compound">Table</ref><sp/>second<sp/>=<sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a7e0cf4a2c8900342a657f5da65432dde" kindref="member">getTable</ref>(</highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert.assertEquals(</highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>partitioned<sp/>on<sp/>1<sp/>column&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>second.<ref refid="interfaceorg_1_1apache_1_1iceberg_1_1Table_1a896bd81a171a850db849109694a5b9ce" kindref="member">spec</ref>().<ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec_1a9e4d9fea3edf1aed8d8e7ef1f0392450" kindref="member">fields</ref>().size());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CREATE<sp/>TABLE<sp/>%s<sp/>(\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>id<sp/>bigint,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>data<sp/>string,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>category<sp/>string,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>ts<sp/>timestamp)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;USING<sp/>iceberg\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;PARTITIONED<sp/>BY<sp/>(bucket(16,<sp/>id),<sp/>days(ts),<sp/>category)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tableName(</highlight><highlight class="stringliteral">&quot;third&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1Table" kindref="compound">Table</ref><sp/>third<sp/>=<sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a7e0cf4a2c8900342a657f5da65432dde" kindref="member">getTable</ref>(</highlight><highlight class="stringliteral">&quot;third&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert.assertEquals(</highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>partitioned<sp/>on<sp/>3<sp/>columns&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>third.<ref refid="interfaceorg_1_1apache_1_1iceberg_1_1Table_1a896bd81a171a850db849109694a5b9ce" kindref="member">spec</ref>().<ref refid="classorg_1_1apache_1_1iceberg_1_1PartitionSpec_1a9e4d9fea3edf1aed8d8e7ef1f0392450" kindref="member">fields</ref>().size());</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>@Test</highlight></codeline>
<codeline lineno="170" refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a8a2c6a5acc428d73ad9d09169135b014" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a8a2c6a5acc428d73ad9d09169135b014" kindref="member">showView</ref>()<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;DROP<sp/>VIEW<sp/>IF<sp/>EXISTS<sp/>%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>sql(</highlight><highlight class="stringliteral">&quot;CREATE<sp/>VIEW<sp/>%s<sp/>AS<sp/>SELECT<sp/>1<sp/>AS<sp/>id&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>Assertions.assertThat(sql(</highlight><highlight class="stringliteral">&quot;SHOW<sp/>VIEWS&quot;</highlight><highlight class="normal">)).contains(row(</highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a3f2e2c9590c46820d1d22fe5ae1f1e87" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1Table" kindref="compound">Table</ref><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a3f2e2c9590c46820d1d22fe5ae1f1e87" kindref="member">getTable</ref>(String<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>validationCatalog.loadTable(<ref refid="classorg_1_1apache_1_1iceberg_1_1catalog_1_1TableIdentifier" kindref="compound">TableIdentifier</ref>.<ref refid="classorg_1_1apache_1_1iceberg_1_1catalog_1_1TableIdentifier_1a76db86a1aa530669397f2c4de5e9497d" kindref="member">of</ref>(</highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,<sp/>name));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a7e0cf4a2c8900342a657f5da65432dde" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1Table" kindref="compound">Table</ref><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1spark_1_1SmokeTest_1a7e0cf4a2c8900342a657f5da65432dde" kindref="member">getTable</ref>()<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>validationCatalog.loadTable(tableIdent);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="spark/v3.4/spark-runtime/src/integration/java/org/apache/iceberg/spark/SmokeTest.java"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner" kind="interface" language="Java" prot="public">
    <compoundname>org::apache::iceberg::flink::source::assigner::SplitAssigner</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Closeable</basecompoundref>
    <derivedcompoundref refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner" prot="public" virt="non-virtual">org.apache.iceberg.flink.source.assigner.DefaultSplitAssigner</derivedcompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a65481ac8485626412acde40da85b4599" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>default void</type>
        <definition>default void org.apache.iceberg.flink.source.assigner.SplitAssigner.start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some assigners may need to start background threads or perform other activity such as registering as listeners to updates from other event sources e.g., watermark tracker. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.17/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="52" column="16" bodyfile="flink/v1.17/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ade6430e6cbc17270cfbb4000068543a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>default void</type>
        <definition>default void org.apache.iceberg.flink.source.assigner.SplitAssigner.close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some assigners may need to perform certain actions when their corresponding enumerators are closed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.17/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="59" column="16" bodyfile="flink/v1.17/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a9ee59579af101474c6736ab4cddb1b3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1GetSplitResult" kindref="compound">GetSplitResult</ref></type>
        <definition>GetSplitResult org.apache.iceberg.flink.source.assigner.SplitAssigner.getNext</definition>
        <argsstring>(@Nullable String hostname)</argsstring>
        <name>getNext</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1af1a02afdfa1d22c6f57d05e0d4d4b7a3">getNext</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1af1a02afdfa1d22c6f57d05e0d4d4b7a3">getNext</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1af1a02afdfa1d22c6f57d05e0d4d4b7a3">getNext</reimplementedby>
        <param>
          <type>@Nullable String</type>
          <declname>hostname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Request a new split from the assigner when enumerator trying to assign splits to awaiting readers.</para>
<para>If enumerator wasn&apos;t able to assign the split (e.g., reader disconnected), enumerator should call <ref refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ab5e30c3328490749c5fc411be5828e06" kindref="member">SplitAssigner#onUnassignedSplits</ref> to return the split. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.17/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="68" column="18"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a2524922f35775c695ee7d2a383f6911d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void org.apache.iceberg.flink.source.assigner.SplitAssigner.onDiscoveredSplits</definition>
        <argsstring>(Collection&lt; IcebergSourceSplit &gt; splits)</argsstring>
        <name>onDiscoveredSplits</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a77e5cf6cc84ef878bbe6333f46d43214">onDiscoveredSplits</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a77e5cf6cc84ef878bbe6333f46d43214">onDiscoveredSplits</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a77e5cf6cc84ef878bbe6333f46d43214">onDiscoveredSplits</reimplementedby>
        <param>
          <type>Collection&lt; <ref refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1split_1_1IcebergSourceSplit" kindref="compound">IcebergSourceSplit</ref> &gt;</type>
          <declname>splits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add new splits discovered by enumerator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.17/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="71" column="8"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ab5e30c3328490749c5fc411be5828e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void org.apache.iceberg.flink.source.assigner.SplitAssigner.onUnassignedSplits</definition>
        <argsstring>(Collection&lt; IcebergSourceSplit &gt; splits)</argsstring>
        <name>onUnassignedSplits</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1afd89c77ddba30c2455a3cd3f612880c4">onUnassignedSplits</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1afd89c77ddba30c2455a3cd3f612880c4">onUnassignedSplits</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1afd89c77ddba30c2455a3cd3f612880c4">onUnassignedSplits</reimplementedby>
        <param>
          <type>Collection&lt; <ref refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1split_1_1IcebergSourceSplit" kindref="compound">IcebergSourceSplit</ref> &gt;</type>
          <declname>splits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Forward addSplitsBack event (for failed reader) to assigner </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.17/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="74" column="8"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a05ecfe6b050b8f3bc868bdc2a1ea9743" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>default void</type>
        <definition>default void org.apache.iceberg.flink.source.assigner.SplitAssigner.onCompletedSplits</definition>
        <argsstring>(Collection&lt; String &gt; completedSplitIds)</argsstring>
        <name>onCompletedSplits</name>
        <param>
          <type>Collection&lt; String &gt;</type>
          <declname>completedSplitIds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some assigner (like event time alignment) may rack in-progress splits to advance watermark upon completed splits </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.17/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="80" column="16" bodyfile="flink/v1.17/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a563aacc8af0e4be58e9df72c73a0d60f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Collection&lt; <ref refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1split_1_1IcebergSourceSplitState" kindref="compound">IcebergSourceSplitState</ref> &gt;</type>
        <definition>Collection&lt;IcebergSourceSplitState&gt; org.apache.iceberg.flink.source.assigner.SplitAssigner.state</definition>
        <argsstring>()</argsstring>
        <name>state</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a2b5e0029e855803d13290c7c348333d3">state</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a2b5e0029e855803d13290c7c348333d3">state</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a2b5e0029e855803d13290c7c348333d3">state</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get assigner state for checkpointing. This is a super-set API that works for all currently imagined assigners. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.17/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="86" column="14"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ae1d69b66fb8b06eb618c7442f4e86322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CompletableFuture&lt; Void &gt;</type>
        <definition>CompletableFuture&lt;Void&gt; org.apache.iceberg.flink.source.assigner.SplitAssigner.isAvailable</definition>
        <argsstring>()</argsstring>
        <name>isAvailable</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a5cab1e3488d1790706ec65d925a2dae2">isAvailable</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a5cab1e3488d1790706ec65d925a2dae2">isAvailable</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a5cab1e3488d1790706ec65d925a2dae2">isAvailable</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumerator can get a notification via CompletableFuture when the assigner has more splits available later. Enumerator should schedule assignment in the thenAccept action of the future.</para>
<para>Assigner will return the same future if this method is called again before the previous future is completed.</para>
<para>The future can be completed from other thread, e.g. the coordinator thread from another thread for event time alignment.</para>
<para>If enumerator need to trigger action upon the future completion, it may want to run it in the coordinator thread using <ref refid="" kindref="compound">SplitEnumeratorContext#runInCoordinatorThread(Runnable)</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.17/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="101" column="21"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ac0374e814d9a61382b054569b98f1866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int org.apache.iceberg.flink.source.assigner.SplitAssigner.pendingSplitCount</definition>
        <argsstring>()</argsstring>
        <name>pendingSplitCount</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a84ac38d2cf1e05f2dd998a9047df4d9d">pendingSplitCount</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a84ac38d2cf1e05f2dd998a9047df4d9d">pendingSplitCount</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a84ac38d2cf1e05f2dd998a9047df4d9d">pendingSplitCount</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of pending splits that haven&apos;t been assigned yet.</para>
<para>The enumerator can poll this API to publish a metric on the number of pending splits.</para>
<para>The enumerator can also use this information to throttle split discovery for streaming read. If there are already many pending splits tracked by the assigner, it is undesirable to discover more splits and track them in the assigner. That will increase the memory footprint and enumerator checkpoint size.</para>
<para>Throttling works better together with <ref refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1ScanContext_1ac1a7b6de246f075153660e98a4d5b379" kindref="member">ScanContext#maxPlanningSnapshotCount()</ref>. Otherwise, the next split discovery after throttling will just discover all non-enumerated snapshots and splits, which defeats the purpose of throttling. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.17/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="117" column="7"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a65481ac8485626412acde40da85b4599" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>default void</type>
        <definition>default void org.apache.iceberg.flink.source.assigner.SplitAssigner.start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some assigners may need to start background threads or perform other activity such as registering as listeners to updates from other event sources e.g., watermark tracker. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.18/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="52" column="16" bodyfile="flink/v1.18/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ade6430e6cbc17270cfbb4000068543a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>default void</type>
        <definition>default void org.apache.iceberg.flink.source.assigner.SplitAssigner.close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some assigners may need to perform certain actions when their corresponding enumerators are closed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.18/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="59" column="16" bodyfile="flink/v1.18/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a9ee59579af101474c6736ab4cddb1b3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1GetSplitResult" kindref="compound">GetSplitResult</ref></type>
        <definition>GetSplitResult org.apache.iceberg.flink.source.assigner.SplitAssigner.getNext</definition>
        <argsstring>(@Nullable String hostname)</argsstring>
        <name>getNext</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1af1a02afdfa1d22c6f57d05e0d4d4b7a3">getNext</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1af1a02afdfa1d22c6f57d05e0d4d4b7a3">getNext</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1af1a02afdfa1d22c6f57d05e0d4d4b7a3">getNext</reimplementedby>
        <param>
          <type>@Nullable String</type>
          <declname>hostname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Request a new split from the assigner when enumerator trying to assign splits to awaiting readers.</para>
<para>If enumerator wasn&apos;t able to assign the split (e.g., reader disconnected), enumerator should call <ref refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ab5e30c3328490749c5fc411be5828e06" kindref="member">SplitAssigner#onUnassignedSplits</ref> to return the split. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.18/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="68" column="18"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a2524922f35775c695ee7d2a383f6911d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void org.apache.iceberg.flink.source.assigner.SplitAssigner.onDiscoveredSplits</definition>
        <argsstring>(Collection&lt; IcebergSourceSplit &gt; splits)</argsstring>
        <name>onDiscoveredSplits</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a77e5cf6cc84ef878bbe6333f46d43214">onDiscoveredSplits</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a77e5cf6cc84ef878bbe6333f46d43214">onDiscoveredSplits</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a77e5cf6cc84ef878bbe6333f46d43214">onDiscoveredSplits</reimplementedby>
        <param>
          <type>Collection&lt; <ref refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1split_1_1IcebergSourceSplit" kindref="compound">IcebergSourceSplit</ref> &gt;</type>
          <declname>splits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add new splits discovered by enumerator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.18/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="71" column="8"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ab5e30c3328490749c5fc411be5828e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void org.apache.iceberg.flink.source.assigner.SplitAssigner.onUnassignedSplits</definition>
        <argsstring>(Collection&lt; IcebergSourceSplit &gt; splits)</argsstring>
        <name>onUnassignedSplits</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1afd89c77ddba30c2455a3cd3f612880c4">onUnassignedSplits</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1afd89c77ddba30c2455a3cd3f612880c4">onUnassignedSplits</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1afd89c77ddba30c2455a3cd3f612880c4">onUnassignedSplits</reimplementedby>
        <param>
          <type>Collection&lt; <ref refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1split_1_1IcebergSourceSplit" kindref="compound">IcebergSourceSplit</ref> &gt;</type>
          <declname>splits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Forward addSplitsBack event (for failed reader) to assigner </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.18/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="74" column="8"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a05ecfe6b050b8f3bc868bdc2a1ea9743" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>default void</type>
        <definition>default void org.apache.iceberg.flink.source.assigner.SplitAssigner.onCompletedSplits</definition>
        <argsstring>(Collection&lt; String &gt; completedSplitIds)</argsstring>
        <name>onCompletedSplits</name>
        <param>
          <type>Collection&lt; String &gt;</type>
          <declname>completedSplitIds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some assigner (like event time alignment) may rack in-progress splits to advance watermark upon completed splits </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.18/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="80" column="16" bodyfile="flink/v1.18/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a563aacc8af0e4be58e9df72c73a0d60f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Collection&lt; <ref refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1split_1_1IcebergSourceSplitState" kindref="compound">IcebergSourceSplitState</ref> &gt;</type>
        <definition>Collection&lt;IcebergSourceSplitState&gt; org.apache.iceberg.flink.source.assigner.SplitAssigner.state</definition>
        <argsstring>()</argsstring>
        <name>state</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a2b5e0029e855803d13290c7c348333d3">state</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a2b5e0029e855803d13290c7c348333d3">state</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a2b5e0029e855803d13290c7c348333d3">state</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get assigner state for checkpointing. This is a super-set API that works for all currently imagined assigners. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.18/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="86" column="14"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ae1d69b66fb8b06eb618c7442f4e86322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CompletableFuture&lt; Void &gt;</type>
        <definition>CompletableFuture&lt;Void&gt; org.apache.iceberg.flink.source.assigner.SplitAssigner.isAvailable</definition>
        <argsstring>()</argsstring>
        <name>isAvailable</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a5cab1e3488d1790706ec65d925a2dae2">isAvailable</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a5cab1e3488d1790706ec65d925a2dae2">isAvailable</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a5cab1e3488d1790706ec65d925a2dae2">isAvailable</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumerator can get a notification via CompletableFuture when the assigner has more splits available later. Enumerator should schedule assignment in the thenAccept action of the future.</para>
<para>Assigner will return the same future if this method is called again before the previous future is completed.</para>
<para>The future can be completed from other thread, e.g. the coordinator thread from another thread for event time alignment.</para>
<para>If enumerator need to trigger action upon the future completion, it may want to run it in the coordinator thread using <ref refid="" kindref="compound">SplitEnumeratorContext#runInCoordinatorThread(Runnable)</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.18/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="101" column="21"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ac0374e814d9a61382b054569b98f1866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int org.apache.iceberg.flink.source.assigner.SplitAssigner.pendingSplitCount</definition>
        <argsstring>()</argsstring>
        <name>pendingSplitCount</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a84ac38d2cf1e05f2dd998a9047df4d9d">pendingSplitCount</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a84ac38d2cf1e05f2dd998a9047df4d9d">pendingSplitCount</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a84ac38d2cf1e05f2dd998a9047df4d9d">pendingSplitCount</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of pending splits that haven&apos;t been assigned yet.</para>
<para>The enumerator can poll this API to publish a metric on the number of pending splits.</para>
<para>The enumerator can also use this information to throttle split discovery for streaming read. If there are already many pending splits tracked by the assigner, it is undesirable to discover more splits and track them in the assigner. That will increase the memory footprint and enumerator checkpoint size.</para>
<para>Throttling works better together with <ref refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1ScanContext_1ac1a7b6de246f075153660e98a4d5b379" kindref="member">ScanContext#maxPlanningSnapshotCount()</ref>. Otherwise, the next split discovery after throttling will just discover all non-enumerated snapshots and splits, which defeats the purpose of throttling. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.18/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="117" column="7"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a6dab2d3411715b5fffedf00e03d2c21c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long org.apache.iceberg.flink.source.assigner.SplitAssigner.pendingRecords</definition>
        <argsstring>()</argsstring>
        <name>pendingRecords</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a2074b49eb03d1f2e7bac6772746bd748">pendingRecords</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a2074b49eb03d1f2e7bac6772746bd748">pendingRecords</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of pending records, which can act as a measure of the source lag. This value could be an estimation if the exact number of records cannot be accurately computed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.18/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="123" column="8"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a65481ac8485626412acde40da85b4599" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>default void</type>
        <definition>default void org.apache.iceberg.flink.source.assigner.SplitAssigner.start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some assigners may need to start background threads or perform other activity such as registering as listeners to updates from other event sources e.g., watermark tracker. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.19/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="52" column="16" bodyfile="flink/v1.19/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ade6430e6cbc17270cfbb4000068543a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>default void</type>
        <definition>default void org.apache.iceberg.flink.source.assigner.SplitAssigner.close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some assigners may need to perform certain actions when their corresponding enumerators are closed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.19/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="59" column="16" bodyfile="flink/v1.19/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a9ee59579af101474c6736ab4cddb1b3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1GetSplitResult" kindref="compound">GetSplitResult</ref></type>
        <definition>GetSplitResult org.apache.iceberg.flink.source.assigner.SplitAssigner.getNext</definition>
        <argsstring>(@Nullable String hostname)</argsstring>
        <name>getNext</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1af1a02afdfa1d22c6f57d05e0d4d4b7a3">getNext</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1af1a02afdfa1d22c6f57d05e0d4d4b7a3">getNext</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1af1a02afdfa1d22c6f57d05e0d4d4b7a3">getNext</reimplementedby>
        <param>
          <type>@Nullable String</type>
          <declname>hostname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Request a new split from the assigner when enumerator trying to assign splits to awaiting readers.</para>
<para>If enumerator wasn&apos;t able to assign the split (e.g., reader disconnected), enumerator should call <ref refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ab5e30c3328490749c5fc411be5828e06" kindref="member">SplitAssigner#onUnassignedSplits</ref> to return the split. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.19/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="68" column="18"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a2524922f35775c695ee7d2a383f6911d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void org.apache.iceberg.flink.source.assigner.SplitAssigner.onDiscoveredSplits</definition>
        <argsstring>(Collection&lt; IcebergSourceSplit &gt; splits)</argsstring>
        <name>onDiscoveredSplits</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a77e5cf6cc84ef878bbe6333f46d43214">onDiscoveredSplits</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a77e5cf6cc84ef878bbe6333f46d43214">onDiscoveredSplits</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a77e5cf6cc84ef878bbe6333f46d43214">onDiscoveredSplits</reimplementedby>
        <param>
          <type>Collection&lt; <ref refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1split_1_1IcebergSourceSplit" kindref="compound">IcebergSourceSplit</ref> &gt;</type>
          <declname>splits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add new splits discovered by enumerator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.19/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="71" column="8"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ab5e30c3328490749c5fc411be5828e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void org.apache.iceberg.flink.source.assigner.SplitAssigner.onUnassignedSplits</definition>
        <argsstring>(Collection&lt; IcebergSourceSplit &gt; splits)</argsstring>
        <name>onUnassignedSplits</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1afd89c77ddba30c2455a3cd3f612880c4">onUnassignedSplits</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1afd89c77ddba30c2455a3cd3f612880c4">onUnassignedSplits</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1afd89c77ddba30c2455a3cd3f612880c4">onUnassignedSplits</reimplementedby>
        <param>
          <type>Collection&lt; <ref refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1split_1_1IcebergSourceSplit" kindref="compound">IcebergSourceSplit</ref> &gt;</type>
          <declname>splits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Forward addSplitsBack event (for failed reader) to assigner </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.19/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="74" column="8"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a05ecfe6b050b8f3bc868bdc2a1ea9743" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>default void</type>
        <definition>default void org.apache.iceberg.flink.source.assigner.SplitAssigner.onCompletedSplits</definition>
        <argsstring>(Collection&lt; String &gt; completedSplitIds)</argsstring>
        <name>onCompletedSplits</name>
        <param>
          <type>Collection&lt; String &gt;</type>
          <declname>completedSplitIds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some assigner (like event time alignment) may rack in-progress splits to advance watermark upon completed splits </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.19/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="80" column="16" bodyfile="flink/v1.19/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a563aacc8af0e4be58e9df72c73a0d60f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Collection&lt; <ref refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1split_1_1IcebergSourceSplitState" kindref="compound">IcebergSourceSplitState</ref> &gt;</type>
        <definition>Collection&lt;IcebergSourceSplitState&gt; org.apache.iceberg.flink.source.assigner.SplitAssigner.state</definition>
        <argsstring>()</argsstring>
        <name>state</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a2b5e0029e855803d13290c7c348333d3">state</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a2b5e0029e855803d13290c7c348333d3">state</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a2b5e0029e855803d13290c7c348333d3">state</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get assigner state for checkpointing. This is a super-set API that works for all currently imagined assigners. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.19/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="86" column="14"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ae1d69b66fb8b06eb618c7442f4e86322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CompletableFuture&lt; Void &gt;</type>
        <definition>CompletableFuture&lt;Void&gt; org.apache.iceberg.flink.source.assigner.SplitAssigner.isAvailable</definition>
        <argsstring>()</argsstring>
        <name>isAvailable</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a5cab1e3488d1790706ec65d925a2dae2">isAvailable</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a5cab1e3488d1790706ec65d925a2dae2">isAvailable</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a5cab1e3488d1790706ec65d925a2dae2">isAvailable</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumerator can get a notification via CompletableFuture when the assigner has more splits available later. Enumerator should schedule assignment in the thenAccept action of the future.</para>
<para>Assigner will return the same future if this method is called again before the previous future is completed.</para>
<para>The future can be completed from other thread, e.g. the coordinator thread from another thread for event time alignment.</para>
<para>If enumerator need to trigger action upon the future completion, it may want to run it in the coordinator thread using <ref refid="" kindref="compound">SplitEnumeratorContext#runInCoordinatorThread(Runnable)</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.19/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="101" column="21"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ac0374e814d9a61382b054569b98f1866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int org.apache.iceberg.flink.source.assigner.SplitAssigner.pendingSplitCount</definition>
        <argsstring>()</argsstring>
        <name>pendingSplitCount</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a84ac38d2cf1e05f2dd998a9047df4d9d">pendingSplitCount</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a84ac38d2cf1e05f2dd998a9047df4d9d">pendingSplitCount</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a84ac38d2cf1e05f2dd998a9047df4d9d">pendingSplitCount</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of pending splits that haven&apos;t been assigned yet.</para>
<para>The enumerator can poll this API to publish a metric on the number of pending splits.</para>
<para>The enumerator can also use this information to throttle split discovery for streaming read. If there are already many pending splits tracked by the assigner, it is undesirable to discover more splits and track them in the assigner. That will increase the memory footprint and enumerator checkpoint size.</para>
<para>Throttling works better together with <ref refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1ScanContext_1ac1a7b6de246f075153660e98a4d5b379" kindref="member">ScanContext#maxPlanningSnapshotCount()</ref>. Otherwise, the next split discovery after throttling will just discover all non-enumerated snapshots and splits, which defeats the purpose of throttling. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.19/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="117" column="7"/>
      </memberdef>
      <memberdef kind="function" id="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a6dab2d3411715b5fffedf00e03d2c21c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long org.apache.iceberg.flink.source.assigner.SplitAssigner.pendingRecords</definition>
        <argsstring>()</argsstring>
        <name>pendingRecords</name>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a2074b49eb03d1f2e7bac6772746bd748">pendingRecords</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner_1a2074b49eb03d1f2e7bac6772746bd748">pendingRecords</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of pending records, which can act as a measure of the source lag. This value could be an estimation if the exact number of records cannot be accurately computed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="flink/v1.19/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="123" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner" kindref="compound">SplitAssigner</ref> interface is extracted out as a separate component so that we can plug in different split assignment strategy for different requirements. E.g.</para>
<para><itemizedlist>
<listitem>
<para>Simple assigner with no ordering guarantee or locality aware optimization. </para>
</listitem>
<listitem>
<para>Locality aware assigner that prefer splits that are local. </para>
</listitem>
<listitem>
<para><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1Snapshot" kindref="compound">Snapshot</ref> aware assigner that assign splits based on the order they are committed. </para>
</listitem>
<listitem>
<para>Event time alignment assigner that assign splits satisfying certain time ordering within a single source or across sources. </para>
</listitem>
</itemizedlist>
</para>
<para>Assigner implementation needs to be thread safe. Enumerator call the assigner APIs mostly from the coordinator thread. But enumerator may call the <ref refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ac0374e814d9a61382b054569b98f1866" kindref="member">SplitAssigner#pendingSplitCount()</ref> from the I/O threads. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>org.apache.iceberg.flink.source.assigner.SplitAssigner</label>
        <link refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>org.apache.iceberg.flink.source.assigner.DefaultSplitAssigner</label>
        <link refid="classorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1DefaultSplitAssigner"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Closeable</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>org.apache.iceberg.flink.source.assigner.SplitAssigner</label>
        <link refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Closeable</label>
      </node>
    </collaborationgraph>
    <location file="flink/v1.17/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" line="46" column="41" bodyfile="flink/v1.17/flink/src/main/java/org/apache/iceberg/flink/source/assigner/SplitAssigner.java" bodystart="46" bodyend="118"/>
    <listofallmembers>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ade6430e6cbc17270cfbb4000068543a7" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>close</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ade6430e6cbc17270cfbb4000068543a7" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>close</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ade6430e6cbc17270cfbb4000068543a7" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>close</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a9ee59579af101474c6736ab4cddb1b3e" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>getNext</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a9ee59579af101474c6736ab4cddb1b3e" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>getNext</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a9ee59579af101474c6736ab4cddb1b3e" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>getNext</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ae1d69b66fb8b06eb618c7442f4e86322" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>isAvailable</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ae1d69b66fb8b06eb618c7442f4e86322" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>isAvailable</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ae1d69b66fb8b06eb618c7442f4e86322" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>isAvailable</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a05ecfe6b050b8f3bc868bdc2a1ea9743" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>onCompletedSplits</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a05ecfe6b050b8f3bc868bdc2a1ea9743" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>onCompletedSplits</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a05ecfe6b050b8f3bc868bdc2a1ea9743" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>onCompletedSplits</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a2524922f35775c695ee7d2a383f6911d" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>onDiscoveredSplits</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a2524922f35775c695ee7d2a383f6911d" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>onDiscoveredSplits</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a2524922f35775c695ee7d2a383f6911d" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>onDiscoveredSplits</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ab5e30c3328490749c5fc411be5828e06" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>onUnassignedSplits</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ab5e30c3328490749c5fc411be5828e06" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>onUnassignedSplits</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ab5e30c3328490749c5fc411be5828e06" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>onUnassignedSplits</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a6dab2d3411715b5fffedf00e03d2c21c" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>pendingRecords</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a6dab2d3411715b5fffedf00e03d2c21c" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>pendingRecords</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ac0374e814d9a61382b054569b98f1866" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>pendingSplitCount</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ac0374e814d9a61382b054569b98f1866" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>pendingSplitCount</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1ac0374e814d9a61382b054569b98f1866" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>pendingSplitCount</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a65481ac8485626412acde40da85b4599" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>start</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a65481ac8485626412acde40da85b4599" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>start</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a65481ac8485626412acde40da85b4599" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>start</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a563aacc8af0e4be58e9df72c73a0d60f" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>state</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a563aacc8af0e4be58e9df72c73a0d60f" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>state</name></member>
      <member refid="interfaceorg_1_1apache_1_1iceberg_1_1flink_1_1source_1_1assigner_1_1SplitAssigner_1a563aacc8af0e4be58e9df72c73a0d60f" prot="public" virt="non-virtual"><scope>org::apache::iceberg::flink::source::assigner::SplitAssigner</scope><name>state</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classorg_1_1apache_1_1iceberg_1_1expressions_1_1Binder" kind="class" language="Java" prot="public">
    <compoundname>org::apache::iceberg::expressions::Binder</compoundname>
    <innerclass refid="classorg_1_1apache_1_1iceberg_1_1expressions_1_1Binder_1_1BindVisitor" prot="private">org::apache::iceberg::expressions::Binder::BindVisitor</innerclass>
    <innerclass refid="classorg_1_1apache_1_1iceberg_1_1expressions_1_1Binder_1_1IsBoundVisitor" prot="private">org::apache::iceberg::expressions::Binder::IsBoundVisitor</innerclass>
    <innerclass refid="classorg_1_1apache_1_1iceberg_1_1expressions_1_1Binder_1_1ReferenceVisitor" prot="private">org::apache::iceberg::expressions::Binder::ReferenceVisitor</innerclass>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1expressions_1_1Binder_1ac988831c2bc0a45f65d5d2ece0490e3d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>org.apache.iceberg.expressions.Binder.Binder</definition>
        <argsstring>()</argsstring>
        <name>Binder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="api/src/main/java/org/apache/iceberg/expressions/Binder.java" line="36" column="11" bodyfile="api/src/main/java/org/apache/iceberg/expressions/Binder.java" bodystart="36" bodyend="36"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1expressions_1_1Binder_1a8272340f3d6cedaa31891a2906f2d6c9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
        <definition>static Expression org.apache.iceberg.expressions.Binder.bind</definition>
        <argsstring>(StructType struct, Expression expr, boolean caseSensitive)</argsstring>
        <name>bind</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1types_1_1Types_1_1StructType" kindref="compound">StructType</ref></type>
          <declname>struct</declname>
        </param>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
          <declname>expr</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replaces all unbound/named references with bound references to fields in the given struct.</para>
<para>When a reference is resolved, any literal used in a predicate for that field is converted to the field&apos;s type using <ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Literal_1a716f56c72020d5d5afea06bc99aa0ee1" kindref="member">Literal#to(Type)</ref>. If automatic conversion to that type isn&apos;t allowed, a <ref refid="" kindref="compound">validation exception</ref> is thrown.</para>
<para>The result expression may be simplified when constructed. For example,<programlisting><codeline><highlight class="normal">isNull(&quot;a&quot;)<sp/></highlight></codeline>
</programlisting> is replaced with<programlisting><codeline><highlight class="normal">alwaysFalse()<sp/></highlight></codeline>
</programlisting> when<programlisting><codeline><highlight class="normal">&quot;a&quot;<sp/></highlight></codeline>
</programlisting> is resolved to a required field.</para>
<para>The expression cannot contain references that are already bound, or an {<ref refid="" kindref="compound">} will be thrown.  struct The  StructType struct type} to resolve references by name.  expr An  Expression expression} to rewrite with bound references.  caseSensitive A boolean flag to control whether the bind should enforce case sensitivity.  the expression rewritten with bound references  ValidationException if literals do not match bound references  IllegalStateException if any references are already bound </ref></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="api/src/main/java/org/apache/iceberg/expressions/Binder.java" line="59" column="28" bodyfile="api/src/main/java/org/apache/iceberg/expressions/Binder.java" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1expressions_1_1Binder_1affd7ec7efadd9b3e96466b83c0f32835" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Set&lt; Integer &gt;</type>
        <definition>static Set&lt;Integer&gt; org.apache.iceberg.expressions.Binder.boundReferences</definition>
        <argsstring>(StructType struct, List&lt; Expression &gt; exprs, boolean caseSensitive)</argsstring>
        <name>boundReferences</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1types_1_1Types_1_1StructType" kindref="compound">StructType</ref></type>
          <declname>struct</declname>
        </param>
        <param>
          <type>List&lt; <ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref> &gt;</type>
          <declname>exprs</declname>
        </param>
        <param>
          <type>boolean</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="api/src/main/java/org/apache/iceberg/expressions/Binder.java" line="88" column="21" bodyfile="api/src/main/java/org/apache/iceberg/expressions/Binder.java" bodystart="88" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1expressions_1_1Binder_1ac97b8d8f45ce276d57d862309c462a5a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boolean</type>
        <definition>static boolean org.apache.iceberg.expressions.Binder.isBound</definition>
        <argsstring>(Expression expr)</argsstring>
        <name>isBound</name>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether an expression is bound.</para>
<para>An expression is bound if all of its predicates are bound.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the expression is bound </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the expression has both bound and unbound predicates. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="api/src/main/java/org/apache/iceberg/expressions/Binder.java" line="113" column="25" bodyfile="api/src/main/java/org/apache/iceberg/expressions/Binder.java" bodystart="113" bodyend="116"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="package-static-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1iceberg_1_1expressions_1_1Binder_1a125326777638b63dc8f9b43f42438597" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
        <definition>static Expression org.apache.iceberg.expressions.Binder.bind</definition>
        <argsstring>(StructType struct, Expression expr)</argsstring>
        <name>bind</name>
        <param>
          <type><ref refid="classorg_1_1apache_1_1iceberg_1_1types_1_1Types_1_1StructType" kindref="compound">StructType</ref></type>
          <declname>struct</declname>
        </param>
        <param>
          <type><ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">Expression</ref></type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replaces all unbound/named references with bound references to fields in the given struct, defaulting to case sensitive mode.</para>
<para>Access modifier is package-private, to only allow use from existing tests.</para>
<para>When a reference is resolved, any literal used in a predicate for that field is converted to the field&apos;s type using <ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Literal_1a716f56c72020d5d5afea06bc99aa0ee1" kindref="member">Literal#to(Type)</ref>. If automatic conversion to that type isn&apos;t allowed, a <ref refid="" kindref="compound">validation exception</ref> is thrown.</para>
<para>The result expression may be simplified when constructed. For example,<programlisting><codeline><highlight class="normal">isNull(&quot;a&quot;)<sp/></highlight></codeline>
</programlisting> is replaced with<programlisting><codeline><highlight class="normal">alwaysFalse()<sp/></highlight></codeline>
</programlisting> when<programlisting><codeline><highlight class="normal">&quot;a&quot;<sp/></highlight></codeline>
</programlisting> is resolved to a required field.</para>
<para>The expression cannot contain references that are already bound, or an {<ref refid="" kindref="compound">} will be thrown.  struct The  StructType struct type} to resolve references by name.  expr An  Expression expression} to rewrite with bound references.  the expression rewritten with bound references  IllegalStateException if any references are already bound </ref></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="api/src/main/java/org/apache/iceberg/expressions/Binder.java" line="84" column="21" bodyfile="api/src/main/java/org/apache/iceberg/expressions/Binder.java" bodystart="84" bodyend="86"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Rewrites <ref refid="interfaceorg_1_1apache_1_1iceberg_1_1expressions_1_1Expression" kindref="compound">expressions</ref> by replacing unbound named references with references to fields in a struct schema. </para>
    </detaileddescription>
    <location file="api/src/main/java/org/apache/iceberg/expressions/Binder.java" line="35" column="20" bodyfile="api/src/main/java/org/apache/iceberg/expressions/Binder.java" bodystart="35" bodyend="245"/>
    <listofallmembers>
      <member refid="classorg_1_1apache_1_1iceberg_1_1expressions_1_1Binder_1a8272340f3d6cedaa31891a2906f2d6c9" prot="public" virt="non-virtual"><scope>org::apache::iceberg::expressions::Binder</scope><name>bind</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1expressions_1_1Binder_1a125326777638b63dc8f9b43f42438597" prot="package" virt="non-virtual"><scope>org::apache::iceberg::expressions::Binder</scope><name>bind</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1expressions_1_1Binder_1ac988831c2bc0a45f65d5d2ece0490e3d" prot="private" virt="non-virtual"><scope>org::apache::iceberg::expressions::Binder</scope><name>Binder</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1expressions_1_1Binder_1affd7ec7efadd9b3e96466b83c0f32835" prot="public" virt="non-virtual"><scope>org::apache::iceberg::expressions::Binder</scope><name>boundReferences</name></member>
      <member refid="classorg_1_1apache_1_1iceberg_1_1expressions_1_1Binder_1ac97b8d8f45ce276d57d862309c462a5a" prot="public" virt="non-virtual"><scope>org::apache::iceberg::expressions::Binder</scope><name>isBound</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

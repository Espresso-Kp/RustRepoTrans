<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="ZOrderByteUtilsBenchmark_8java" kind="file" language="Java">
    <compoundname>ZOrderByteUtilsBenchmark.java</compoundname>
    <innerclass refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtilsBenchmark" prot="public">org::apache::iceberg::util::ZOrderByteUtilsBenchmark</innerclass>
    <innernamespace refid="namespaceorg_1_1apache_1_1iceberg_1_1util">org::apache::iceberg::util</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">package<sp/></highlight><highlight class="normal">org.apache.iceberg.util;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>java.nio.ByteBuffer;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>java.util.Random;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>java.util.concurrent.TimeUnit;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.openjdk.jmh.annotations.Benchmark;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.openjdk.jmh.annotations.BenchmarkMode;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.openjdk.jmh.annotations.Fork;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.openjdk.jmh.annotations.Measurement;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.openjdk.jmh.annotations.Mode;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.openjdk.jmh.annotations.Scope;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.openjdk.jmh.annotations.Setup;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.openjdk.jmh.annotations.State;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.openjdk.jmh.annotations.Threads;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.openjdk.jmh.annotations.Timeout;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespaceorg" kindref="compound">org</ref>.openjdk.jmh.infra.Blackhole;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">@Fork(1)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">@State(Scope.Benchmark)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">@Measurement(iterations<sp/>=<sp/>5)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">@BenchmarkMode(Mode.SingleShotTime)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">@Timeout(time<sp/>=<sp/>1000,<sp/>timeUnit<sp/>=<sp/>TimeUnit.HOURS)</highlight></codeline>
<codeline lineno="41" refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtilsBenchmark" refkind="compound"><highlight class="normal">public<sp/>class<sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtilsBenchmark" kindref="compound">ZOrderByteUtilsBenchmark</ref><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtilsBenchmark_1abdb1de3884ddcceccfc9ffd5708a3961" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NUM_ENTRIES<sp/>=<sp/>10000000;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtilsBenchmark_1a8e48f3c61c84a95b1f4e911318000488" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[][][]<sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtilsBenchmark_1a8e48f3c61c84a95b1f4e911318000488" kindref="member">fourColumnInput</ref>;</highlight></codeline>
<codeline lineno="46" refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtilsBenchmark_1a896b98472bd5b1a06d0d8f9e14b9476d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[][][]<sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtilsBenchmark_1a896b98472bd5b1a06d0d8f9e14b9476d" kindref="member">threeColumnInput</ref>;</highlight></codeline>
<codeline lineno="47" refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtilsBenchmark_1a118dda99c64b01868a14ae69cb63bd62" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[][][]<sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtilsBenchmark_1a118dda99c64b01868a14ae69cb63bd62" kindref="member">twoColumnInput</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>@Setup</highlight></codeline>
<codeline lineno="50" refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtilsBenchmark_1aefc95e914388863acc57b8756b913265" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtilsBenchmark_1aefc95e914388863acc57b8756b913265" kindref="member">setupBench</ref>()<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>Random<sp/>rand<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Random(42);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>fourColumnInput<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[NUM_ENTRIES][][];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>threeColumnInput<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[NUM_ENTRIES][][];</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>twoColumnInput<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[NUM_ENTRIES][][];</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUM_ENTRIES;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fourColumnInput[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[4][];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>threeColumnInput[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[3][];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>twoColumnInput[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[2][];</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[]<sp/>value<sp/>=<sp/>ByteBuffer.allocate(Long.BYTES).putLong(rand.nextLong()).array();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twoColumnInput[i][j]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threeColumnInput[i][j]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fourColumnInput[i][j]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>@Benchmark</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>@Threads(1)</highlight></codeline>
<codeline lineno="74" refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtilsBenchmark_1a2f6d7ec401ad2d9030e0ff6a4518e03b" refkind="member"><highlight class="normal"><sp/><sp/>public<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interleaveValuesFourColumns(Blackhole<sp/>blackhole)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outputSize<sp/>=<sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils" kindref="compound">ZOrderByteUtils</ref>.<ref refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1ac74b185acde7fad8b71d71d8826dfbca" kindref="member">PRIMITIVE_BUFFER_SIZE</ref><sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>ByteBuffer<sp/>outputBuffer<sp/>=<sp/>ByteBuffer.allocate(outputSize);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[][]<sp/>columnsBinary<sp/>:<sp/>fourColumnInput)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[]<sp/>interleavedBytes<sp/>=</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils" kindref="compound">ZOrderByteUtils</ref>.interleaveBits(columnsBinary,<sp/>outputSize,<sp/>outputBuffer);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blackhole.consume(interleavedBytes);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>@Benchmark</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>@Threads(1)</highlight></codeline>
<codeline lineno="87" refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtilsBenchmark_1a8a88e9c7fbb125628972f85e428dc517" refkind="member"><highlight class="normal"><sp/><sp/>public<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interleaveValuesThreeColumns(Blackhole<sp/>blackhole)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outputSize<sp/>=<sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils" kindref="compound">ZOrderByteUtils</ref>.<ref refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1ac74b185acde7fad8b71d71d8826dfbca" kindref="member">PRIMITIVE_BUFFER_SIZE</ref><sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>ByteBuffer<sp/>outputBuffer<sp/>=<sp/>ByteBuffer.allocate(outputSize);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fourColumnInput.length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[]<sp/>interleavedBytes<sp/>=</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils" kindref="compound">ZOrderByteUtils</ref>.interleaveBits(threeColumnInput[i],<sp/>outputSize,<sp/>outputBuffer);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blackhole.consume(interleavedBytes);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>@Benchmark</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>@Threads(1)</highlight></codeline>
<codeline lineno="100" refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtilsBenchmark_1aa1f1be6321bd08bf70660c1995c58533" refkind="member"><highlight class="normal"><sp/><sp/>public<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interleaveValuesTwoColumns(Blackhole<sp/>blackhole)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outputSize<sp/>=<sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils" kindref="compound">ZOrderByteUtils</ref>.<ref refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils_1ac74b185acde7fad8b71d71d8826dfbca" kindref="member">PRIMITIVE_BUFFER_SIZE</ref><sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>ByteBuffer<sp/>outputBuffer<sp/>=<sp/>ByteBuffer.allocate(outputSize);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fourColumnInput.length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[]<sp/>interleavedBytes<sp/>=</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils" kindref="compound">ZOrderByteUtils</ref>.interleaveBits(twoColumnInput[i],<sp/>outputSize,<sp/>outputBuffer);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blackhole.consume(interleavedBytes);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>@Benchmark</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>@Threads(1)</highlight></codeline>
<codeline lineno="113" refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtilsBenchmark_1a1cf753ae66910054404c7f73e73a1ceb" refkind="member"><highlight class="normal"><sp/><sp/>public<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interleaveValuesFourColumns8ByteOutput(Blackhole<sp/>blackhole)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outputSize<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>ByteBuffer<sp/>outputBuffer<sp/>=<sp/>ByteBuffer.allocate(outputSize);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[][]<sp/>columnsBinary<sp/>:<sp/>fourColumnInput)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[]<sp/>interleavedBytes<sp/>=</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classorg_1_1apache_1_1iceberg_1_1util_1_1ZOrderByteUtils" kindref="compound">ZOrderByteUtils</ref>.interleaveBits(columnsBinary,<sp/>outputSize,<sp/>outputBuffer);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blackhole.consume(interleavedBytes);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="core/src/jmh/java/org/apache/iceberg/util/ZOrderByteUtilsBenchmark.java"/>
  </compounddef>
</doxygen>

<message>
you were asked to translate the given c function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, c function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b'pub async fn lookup_by_contact(\n    context: &Context,\n    contact_id: ContactId,\n) -> Result<Option<Self>> {\n    ensure!(context.sql.is_open().await, "Database not available");\n    ensure!(\n        contact_id != ContactId::UNDEFINED,\n        "Invalid contact id requested"\n    );\n\n    context\n        .sql\n        .query_row_optional(\n            "SELECT c.id, c.blocked\n               FROM chats c\n              INNER JOIN chats_contacts j\n                      ON c.id=j.chat_id\n              WHERE c.type=100  -- 100 = Chattype::Single\n                AND c.id>9      -- 9 = DC_CHAT_ID_LAST_SPECIAL\n                AND j.contact_id=?;",\n            (contact_id,),\n            |row| {\n                let id: ChatId = row.get(0)?;\n                let blocked: Blocked = row.get(1)?;\n                Ok(ChatIdBlocked { id, blocked })\n            },\n        )\n        .await\n        .map_err(Into::into)\n}'
</previous response>
<error message>
Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0308]: mismatched types
   --> src/chat.rs:247:5
    |
247 | /     context
248 | |         .sql
249 | |         .query_row_optional(
250 | |             "SELECT c.id, c.blocked
...   |
264 | |         .await
265 | |         .map_err(Into::into)
    | |____________________________^ expected `Result<Option<ChatId>, Error>`, found `Result<Option<ChatIdBlocked>, _>`
    |
    = note: expected enum `std::result::Result<std::option::Option<ChatId>, anyhow::Error>`
               found enum `std::result::Result<std::option::Option<ChatIdBlocked>, _>`

error[E0308]: mismatched types
   --> src/chat.rs:247:5
    |
247 | /     context
248 | |         .sql
249 | |         .query_row_optional(
250 | |             "SELECT c.id, c.blocked
...   |
264 | |         .await
265 | |         .map_err(Into::into)
    | |____________________________^ expected `Result<Option<ChatId>, Error>`, found `Result<Option<ChatIdBlocked>, _>`
    |
    = note: expected enum `std::result::Result<std::option::Option<chat::ChatId>, anyhow::Error>`
               found enum `std::result::Result<std::option::Option<chat::ChatIdBlocked>, _>`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `deltachat` (lib) due to 1 previous error
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 1 previous error
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101
</error message>
<c function>
uint32_t dc_get_chat_id_by_contact_id(dc_context_t* context, uint32_t contact_id)
{
	uint32_t chat_id = 0;
	int      chat_id_blocked = 0;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC) {
		return 0;
	}

	dc_lookup_real_nchat_by_contact_id(context, contact_id, &chat_id, &chat_id_blocked);

	return chat_id_blocked? 0 : chat_id; /* from outside view, chats only existing in the deaddrop do not exist */
}
</c function>
<rust function signature>
pub async fn lookup_by_contact(
        context: &Context,
        contact_id: ContactId,
    ) -> Result<Option<Self>> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

pub struct ChatId(u32);

pub(crate) struct ChatIdBlocked {
    /// Chat ID.
    pub id: ChatId,

    /// Whether the chat is blocked, unblocked or a contact request.
    pub blocked: Blocked,
}

impl ChatIdBlocked {
    pub async fn lookup_by_contact(
        context: &Context,
        contact_id: ContactId,
    ) -> Result<Option<Self>> {
        ensure!(context.sql.is_open().await, "Database not available");
        ensure!(
            contact_id != ContactId::UNDEFINED,
            "Invalid contact id requested"
        );

        context
            .sql
            .query_row_optional(
                "SELECT c.id, c.blocked
                   FROM chats c
                  INNER JOIN chats_contacts j
                          ON c.id=j.chat_id
                  WHERE c.type=100  -- 100 = Chattype::Single
                    AND c.id>9      -- 9 = DC_CHAT_ID_LAST_SPECIAL
                    AND j.contact_id=?;",
                (contact_id,),
                |row| {
                    let id: ChatId = row.get(0)?;
                    let blocked: Blocked = row.get(1)?;
                    Ok(ChatIdBlocked { id, blocked })
                },
            )
            .await
            .map_err(Into::into)
    }
}

pub struct ContactId(u32);

pub enum Blocked {
    #[default]
    Not = 0,
    Yes = 1,
    Request = 2,
}


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use std::cmp;
use std::collections::{HashMap, HashSet};
use std::fmt;
use std::path::{Path, PathBuf};
use std::str::FromStr;
use std::time::Duration;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use deltachat_contact_tools::{strip_rtlo_characters, ContactAddress};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use strum_macros::EnumIter;
use tokio::task;
use crate::aheader::EncryptPreference;
use crate::blob::BlobObject;
use crate::chatlist::Chatlist;
use crate::chatlist_events;
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{
    self, Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK,
    DC_CHAT_ID_LAST_SPECIAL, DC_CHAT_ID_TRASH, DC_RESEND_USER_AVATAR_DAYS,
};
use crate::contact::{self, Contact, ContactId, Origin};
use crate::context::Context;
use crate::debug_logging::maybe_set_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::Timer as EphemeralTimer;
use crate::events::EventType;
use crate::html::new_html_mimepart;
use crate::location;
use crate::log::LogExt;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::mimefactory::MimeFactory;
use crate::mimeparser::SystemMessage;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::receive_imf::ReceivedMsg;
use crate::securejoin::BobState;
use crate::smtp::send_msg_to_smtp;
use crate::sql;
use crate::stock_str;
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{
    buf_compress, create_id, create_outgoing_rfc724_mid, create_smeared_timestamp,
    create_smeared_timestamps, get_abs_path, gm2local_offset, improve_single_line_input,
    smeared_time, time, IsNoneOrEmpty, SystemTime,
};
use crate::webxdc::WEBXDC_SUFFIX;
use CantSendReason::*;
use super::*;
use crate::chatlist::get_archived_cnt;
use crate::constants::{DC_GCL_ARCHIVED_ONLY, DC_GCL_NO_SPECIALS};
use crate::message::delete_msgs;
use crate::receive_imf::receive_imf;
use crate::test_utils::{sync, TestContext, TestContextManager};
use strum::IntoEnumIterator;
use tokio::fs;

</rust function dependency libraries>

</message>
<reapir response>
Here, the error message indicates that the function was expected to return `Result<Option<ChatId>, Error>`, while it got `Result<Option<ChatIdBlocked>, _>`. The possible solution could be to check if the chat is blocked, and return the chat id only if it is not.
So, the rust translation function should look like this:
```rust
pub async fn lookup_by_contact(
    context: &Context,
    contact_id: ContactId,
) -> Result<Option<ChatId>> {
    ensure!(context.sql.is_open().await, "Database not available");
    ensure!(
        contact_id != ContactId::UNDEFINED,
        "Invalid contact id requested"
    );

    let res = context
        .sql
        .query_row_optional(
            "SELECT c.id, c.blocked
            FROM chats c
            INNER JOIN chats_contacts j
                    ON c.id=j.chat_id
            WHERE c.type=100  -- 100 = Chattype::Single
                AND c.id>9      -- 9 = DC_CHAT_ID_LAST_SPECIAL
                AND j.contact_id=?;",
            (contact_id,),
            |row| {
                let id: ChatId = row.get(0)?;
                let blocked: Blocked = row.get(1)?;
                Ok(ChatIdBlocked { id, blocked })
            },
        )
        .await?;

    match res {
        Some(ChatIdBlocked {
            id,
            blocked: Blocked::Not,
        }) => Ok(Some(id)),
        _ => Ok(None),
    }
}
```</reapir response>
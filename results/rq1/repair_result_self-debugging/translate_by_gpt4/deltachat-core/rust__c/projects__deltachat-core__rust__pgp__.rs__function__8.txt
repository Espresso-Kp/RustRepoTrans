<message>
you were asked to translate the given c function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, c function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b'pub(crate) fn create_keypair(addr: EmailAddress, keygen_type: KeyGenType) -> Result<KeyPair> {\n    let mut seckey: Option<SignedSecretKey> = None;\n    let mut pubkey: Option<SignedPublicKey> = None;\n    let mut subkey: Option<SignedPublicKey> = None;\n    let mut key_pair = KeyPair::default();\n    match keygen_type {\n        KeyGenType::Default | KeyGenType::Rsa4096 => {\n            seckey = Some(SignedSecretKey::generate_rsa(4096)?);\n            pubkey = Some(seckey.as_ref().unwrap().public_key().into_keypair()?);\n        },\n        KeyGenType::Rsa2048 => {\n            seckey = Some(SignedSecretKey::generate_rsa(2048)?);\n            pubkey = Some(seckey.as_ref().unwrap().public_key().into_keypair()?);\n        },\n        KeyGenType::Ed25519 => {\n            seckey = Some(SignedSecretKey::generate_ed25519()?);\n            pubkey = Some(seckey.as_ref().unwrap().public_key().into_keypair()?);\n        },\n    }\n\n    if seckey.is_none() || pubkey.is_none() {\n        bail!("Failed to generate keypair");\n    }\n\n    // generate subkey\n    match keygen_type {\n        KeyGenType::Default | KeyGenType::Rsa4096 => {\n            subkey = Some(SignedPublicKey::generate_rsa(4096)?);\n        },\n        KeyGenType::Rsa2048 => {\n            subkey = Some(SignedPublicKey::generate_rsa(2048)?);\n        },\n        KeyGenType::Ed25519 => {\n            subkey = Some(SignedPublicKey::generate_ed25519()?);\n        },\n    }\n\n    if subkey.is_none() {\n        bail!("Failed to generate subkey");\n    }\n\n    if key_pair.addr.is_empty() {\n        key_pair.addr = addr;\n    }\n    key_pair.public = pubkey.unwrap();\n    key_pair.secret = seckey.unwrap();\n\n    Ok(key_pair)\n}'
</previous response>
<error message>
Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
warning: unused `#[macro_use]` import
  --> src/lib.rs:31:1
   |
31 | #[macro_use]
   | ^^^^^^^^^^^^
   |
note: the lint level is defined here
  --> src/lib.rs:6:5
   |
6  |     unused,
   |     ^^^^^^
   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused imports: `KeyType as PgpKeyType`, `SecretKeyParamsBuilder`, `SubkeyParamsBuilder`
  --> src/pgp.rs:11:21
   |
11 |     Deserializable, KeyType as PgpKeyType, Message, SecretKeyParamsBuilder, SignedPublicKey,
   |                     ^^^^^^^^^^^^^^^^^^^^^           ^^^^^^^^^^^^^^^^^^^^^^
12 |     SignedPublicSubKey, SignedSecretKey, StandaloneSignature, SubkeyParamsBuilder,
   |                                                               ^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `default` found for struct `KeyPair` in the current scope
   --> src/pgp.rs:150:33
    |
129 | pub struct KeyPair {
    | ------------------ function or associated item `default` not found for this struct
...
150 |     let mut key_pair = KeyPair::default();
    |                                 ^^^^^^^ function or associated item not found in `KeyPair`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `default`, perhaps you need to implement one of them:
            candidate #1: `std::default::Default`
            candidate #2: `tinyvec::array::Array`

error[E0599]: no function or associated item named `generate_rsa` found for struct `SignedSecretKey` in the current scope
   --> src/pgp.rs:153:44
    |
153 |             seckey = Some(SignedSecretKey::generate_rsa(4096)?);
    |                                            ^^^^^^^^^^^^ function or associated item not found in `SignedSecretKey`
    |
note: if you're trying to build a new `SignedSecretKey`, consider using `SignedSecretKey::new` which returns `SignedSecretKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/secret.rs:47:5
    |
47  | /     pub fn new(
48  | |         primary_key: packet::SecretKey,
49  | |         details: SignedKeyDetails,
50  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
51  | |         mut secret_subkeys: Vec<SignedSecretSubKey>,
52  | |     ) -> Self {
    | |_____________^

error[E0599]: no method named `into_keypair` found for struct `pgp::PublicKey` in the current scope
   --> src/pgp.rs:154:65
    |
154 |             pubkey = Some(seckey.as_ref().unwrap().public_key().into_keypair()?);
    |                                                                 ^^^^^^^^^^^^ method not found in `PublicKey`

error[E0599]: no function or associated item named `generate_rsa` found for struct `SignedSecretKey` in the current scope
   --> src/pgp.rs:157:44
    |
157 |             seckey = Some(SignedSecretKey::generate_rsa(2048)?);
    |                                            ^^^^^^^^^^^^ function or associated item not found in `SignedSecretKey`
    |
note: if you're trying to build a new `SignedSecretKey`, consider using `SignedSecretKey::new` which returns `SignedSecretKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/secret.rs:47:5
    |
47  | /     pub fn new(
48  | |         primary_key: packet::SecretKey,
49  | |         details: SignedKeyDetails,
50  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
51  | |         mut secret_subkeys: Vec<SignedSecretSubKey>,
52  | |     ) -> Self {
    | |_____________^

error[E0599]: no method named `into_keypair` found for struct `pgp::PublicKey` in the current scope
   --> src/pgp.rs:158:65
    |
158 |             pubkey = Some(seckey.as_ref().unwrap().public_key().into_keypair()?);
    |                                                                 ^^^^^^^^^^^^ method not found in `PublicKey`

error[E0599]: no function or associated item named `generate_ed25519` found for struct `SignedSecretKey` in the current scope
   --> src/pgp.rs:161:44
    |
161 |             seckey = Some(SignedSecretKey::generate_ed25519()?);
    |                                            ^^^^^^^^^^^^^^^^ function or associated item not found in `SignedSecretKey`
    |
note: if you're trying to build a new `SignedSecretKey`, consider using `SignedSecretKey::new` which returns `SignedSecretKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/secret.rs:47:5
    |
47  | /     pub fn new(
48  | |         primary_key: packet::SecretKey,
49  | |         details: SignedKeyDetails,
50  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
51  | |         mut secret_subkeys: Vec<SignedSecretSubKey>,
52  | |     ) -> Self {
    | |_____________^

error[E0599]: no method named `into_keypair` found for struct `pgp::PublicKey` in the current scope
   --> src/pgp.rs:162:65
    |
162 |             pubkey = Some(seckey.as_ref().unwrap().public_key().into_keypair()?);
    |                                                                 ^^^^^^^^^^^^ method not found in `PublicKey`

error[E0599]: no function or associated item named `generate_rsa` found for struct `SignedPublicKey` in the current scope
   --> src/pgp.rs:173:44
    |
173 |             subkey = Some(SignedPublicKey::generate_rsa(4096)?);
    |                                            ^^^^^^^^^^^^ function or associated item not found in `SignedPublicKey`
    |
note: if you're trying to build a new `SignedPublicKey`, consider using `SignedPublicKey::new` which returns `SignedPublicKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/public.rs:39:5
    |
39  | /     pub fn new(
40  | |         primary_key: packet::PublicKey,
41  | |         details: SignedKeyDetails,
42  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
43  | |     ) -> Self {
    | |_____________^

error[E0599]: no function or associated item named `generate_rsa` found for struct `SignedPublicKey` in the current scope
   --> src/pgp.rs:176:44
    |
176 |             subkey = Some(SignedPublicKey::generate_rsa(2048)?);
    |                                            ^^^^^^^^^^^^ function or associated item not found in `SignedPublicKey`
    |
note: if you're trying to build a new `SignedPublicKey`, consider using `SignedPublicKey::new` which returns `SignedPublicKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/public.rs:39:5
    |
39  | /     pub fn new(
40  | |         primary_key: packet::PublicKey,
41  | |         details: SignedKeyDetails,
42  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
43  | |     ) -> Self {
    | |_____________^

error[E0599]: no function or associated item named `generate_ed25519` found for struct `SignedPublicKey` in the current scope
   --> src/pgp.rs:179:44
    |
179 |             subkey = Some(SignedPublicKey::generate_ed25519()?);
    |                                            ^^^^^^^^^^^^^^^^ function or associated item not found in `SignedPublicKey`
    |
note: if you're trying to build a new `SignedPublicKey`, consider using `SignedPublicKey::new` which returns `SignedPublicKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/public.rs:39:5
    |
39  | /     pub fn new(
40  | |         primary_key: packet::PublicKey,
41  | |         details: SignedKeyDetails,
42  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
43  | |     ) -> Self {
    | |_____________^

For more information about this error, try `rustc --explain E0599`.
warning: `deltachat` (lib) generated 2 warnings
error: could not compile `deltachat` (lib) due to 10 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0599]: no function or associated item named `default` found for struct `pgp::KeyPair` in the current scope
   --> src/pgp.rs:150:33
    |
129 | pub struct KeyPair {
    | ------------------ function or associated item `default` not found for this struct
...
150 |     let mut key_pair = KeyPair::default();
    |                                 ^^^^^^^ function or associated item not found in `KeyPair`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `default`, perhaps you need to implement one of them:
            candidate #1: `std::default::Default`
            candidate #2: `tinyvec::array::Array`

error[E0599]: no function or associated item named `generate_rsa` found for struct `pgp::SignedSecretKey` in the current scope
   --> src/pgp.rs:153:44
    |
153 |             seckey = Some(SignedSecretKey::generate_rsa(4096)?);
    |                                            ^^^^^^^^^^^^ function or associated item not found in `SignedSecretKey`
    |
note: if you're trying to build a new `pgp::SignedSecretKey`, consider using `pgp::SignedSecretKey::new` which returns `pgp::SignedSecretKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/secret.rs:47:5
    |
47  | /     pub fn new(
48  | |         primary_key: packet::SecretKey,
49  | |         details: SignedKeyDetails,
50  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
51  | |         mut secret_subkeys: Vec<SignedSecretSubKey>,
52  | |     ) -> Self {
    | |_____________^

error[E0599]: no function or associated item named `generate_rsa` found for struct `pgp::SignedSecretKey` in the current scope
   --> src/pgp.rs:157:44
    |
157 |             seckey = Some(SignedSecretKey::generate_rsa(2048)?);
    |                                            ^^^^^^^^^^^^ function or associated item not found in `SignedSecretKey`
    |
note: if you're trying to build a new `pgp::SignedSecretKey`, consider using `pgp::SignedSecretKey::new` which returns `pgp::SignedSecretKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/secret.rs:47:5
    |
47  | /     pub fn new(
48  | |         primary_key: packet::SecretKey,
49  | |         details: SignedKeyDetails,
50  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
51  | |         mut secret_subkeys: Vec<SignedSecretSubKey>,
52  | |     ) -> Self {
    | |_____________^

error[E0599]: no function or associated item named `generate_ed25519` found for struct `pgp::SignedSecretKey` in the current scope
   --> src/pgp.rs:161:44
    |
161 |             seckey = Some(SignedSecretKey::generate_ed25519()?);
    |                                            ^^^^^^^^^^^^^^^^ function or associated item not found in `SignedSecretKey`
    |
note: if you're trying to build a new `pgp::SignedSecretKey`, consider using `pgp::SignedSecretKey::new` which returns `pgp::SignedSecretKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/secret.rs:47:5
    |
47  | /     pub fn new(
48  | |         primary_key: packet::SecretKey,
49  | |         details: SignedKeyDetails,
50  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
51  | |         mut secret_subkeys: Vec<SignedSecretSubKey>,
52  | |     ) -> Self {
    | |_____________^

error[E0599]: no function or associated item named `generate_rsa` found for struct `pgp::SignedPublicKey` in the current scope
   --> src/pgp.rs:173:44
    |
173 |             subkey = Some(SignedPublicKey::generate_rsa(4096)?);
    |                                            ^^^^^^^^^^^^ function or associated item not found in `SignedPublicKey`
    |
note: if you're trying to build a new `pgp::SignedPublicKey`, consider using `pgp::SignedPublicKey::new` which returns `pgp::SignedPublicKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/public.rs:39:5
    |
39  | /     pub fn new(
40  | |         primary_key: packet::PublicKey,
41  | |         details: SignedKeyDetails,
42  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
43  | |     ) -> Self {
    | |_____________^

error[E0599]: no function or associated item named `generate_rsa` found for struct `pgp::SignedPublicKey` in the current scope
   --> src/pgp.rs:176:44
    |
176 |             subkey = Some(SignedPublicKey::generate_rsa(2048)?);
    |                                            ^^^^^^^^^^^^ function or associated item not found in `SignedPublicKey`
    |
note: if you're trying to build a new `pgp::SignedPublicKey`, consider using `pgp::SignedPublicKey::new` which returns `pgp::SignedPublicKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/public.rs:39:5
    |
39  | /     pub fn new(
40  | |         primary_key: packet::PublicKey,
41  | |         details: SignedKeyDetails,
42  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
43  | |     ) -> Self {
    | |_____________^

error[E0599]: no function or associated item named `generate_ed25519` found for struct `pgp::SignedPublicKey` in the current scope
   --> src/pgp.rs:179:44
    |
179 |             subkey = Some(SignedPublicKey::generate_ed25519()?);
    |                                            ^^^^^^^^^^^^^^^^ function or associated item not found in `SignedPublicKey`
    |
note: if you're trying to build a new `pgp::SignedPublicKey`, consider using `pgp::SignedPublicKey::new` which returns `pgp::SignedPublicKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/public.rs:39:5
    |
39  | /     pub fn new(
40  | |         primary_key: packet::PublicKey,
41  | |         details: SignedKeyDetails,
42  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
43  | |     ) -> Self {
    | |_____________^

warning: `deltachat` (lib test) generated 2 warnings (2 duplicates)
error: could not compile `deltachat` (lib test) due to 10 previous errors; 2 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101
</error message>
<c function>
int dc_pgp_create_keypair(dc_context_t* context, const char* addr, dc_key_t* ret_public_key, dc_key_t* ret_private_key)
{
	int              success = 0;
	pgp_key_t        seckey;
	pgp_key_t        pubkey;
	pgp_key_t        subkey;
	uint8_t          subkeyid[PGP_KEY_ID_SIZE];
	uint8_t*         user_id = NULL;
	pgp_memory_t*    pubmem = pgp_memory_new();
	pgp_memory_t*    secmem = pgp_memory_new();
	pgp_output_t*    pubout = pgp_output_new();
	pgp_output_t*    secout = pgp_output_new();

	memset(&seckey, 0, sizeof(pgp_key_t));
	memset(&pubkey, 0, sizeof(pgp_key_t));
	memset(&subkey, 0, sizeof(pgp_key_t));

	if (context==NULL || addr==NULL || ret_public_key==NULL || ret_private_key==NULL
	 || pubmem==NULL || secmem==NULL || pubout==NULL || secout==NULL) {
		goto cleanup;
	}

	/* Generate User ID.
	By convention, this is the e-mail-address in angle brackets.

	As the user-id is only decorative in Autocrypt and not needed for Delta Chat,
	so we _could_ just use sth. that looks like an e-mail-address.
	This would protect the user's privacy if someone else uploads the keys to keyservers.

	However, as eg. Enigmail displayes the user-id in "Good signature from <user-id>,
	for now, we decided to leave the address in the user-id */
	#if 0
		user_id = (uint8_t*)dc_mprintf("<%08X@%08X.org>", (int)random(), (int)random());
	#else
		user_id = (uint8_t*)dc_mprintf("<%s>", addr);
	#endif


	/* generate two keypairs */
	if (!pgp_rsa_generate_keypair(&seckey, DC_KEYGEN_BITS, DC_KEYGEN_E, NULL, NULL, NULL, 0)
	 || !pgp_rsa_generate_keypair(&subkey, DC_KEYGEN_BITS, DC_KEYGEN_E, NULL, NULL, NULL, 0)) {
		goto cleanup;
	}


	/* Create public key, bind public subkey to public key */

	pubkey.type = PGP_PTAG_CT_PUBLIC_KEY;
	pgp_pubkey_dup(&pubkey.key.pubkey, &seckey.key.pubkey);
	memcpy(pubkey.pubkeyid, seckey.pubkeyid, PGP_KEY_ID_SIZE);
	pgp_fingerprint(&pubkey.pubkeyfpr, &seckey.key.pubkey, 0);
	add_selfsigned_userid(&seckey, &pubkey, (const uint8_t*)user_id, 0/*never expire*/);

	EXPAND_ARRAY((&pubkey), subkey);
	{
		pgp_subkey_t* p = &pubkey.subkeys[pubkey.subkeyc++];
		pgp_pubkey_dup(&p->key.pubkey, &subkey.key.pubkey);
		pgp_keyid(subkeyid, PGP_KEY_ID_SIZE, &pubkey.key.pubkey, PGP_HASH_SHA1);
		memcpy(p->id, subkeyid, PGP_KEY_ID_SIZE);
	}

	EXPAND_ARRAY((&pubkey), subkeysig);
	add_subkey_binding_signature(&pubkey.subkeysigs[pubkey.subkeysigc++], &pubkey, &subkey, &seckey);


	/* Create secret key, bind secret subkey to secret key */

	EXPAND_ARRAY((&seckey), subkey);
	{
		pgp_subkey_t* p = &seckey.subkeys[seckey.subkeyc++];
		pgp_seckey_dup(&p->key.seckey, &subkey.key.seckey);
		pgp_keyid(subkeyid, PGP_KEY_ID_SIZE, &seckey.key.pubkey, PGP_HASH_SHA1);
		memcpy(p->id, subkeyid, PGP_KEY_ID_SIZE);
	}

	EXPAND_ARRAY((&seckey), subkeysig);
	add_subkey_binding_signature(&seckey.subkeysigs[seckey.subkeysigc++], &seckey, &subkey, &seckey);


	/* Done with key generation, write binary keys to memory */

	pgp_writer_set_memory(pubout, pubmem);
	if (!pgp_write_xfer_key(pubout, &pubkey, 0/*armored*/)
	 || pubmem->buf==NULL || pubmem->length <= 0) {
		goto cleanup;
	}

	pgp_writer_set_memory(secout, secmem);
	if (!pgp_write_xfer_key(secout, &seckey, 0/*armored*/)
	 || secmem->buf==NULL || secmem->length <= 0) {
		goto cleanup;
	}

	dc_key_set_from_binary(ret_public_key, pubmem->buf, pubmem->length, DC_KEY_PUBLIC);
	dc_key_set_from_binary(ret_private_key, secmem->buf, secmem->length, DC_KEY_PRIVATE);

	success = 1;

cleanup:
	if (pubout) { pgp_output_delete(pubout); }
	if (secout) { pgp_output_delete(secout); }
	if (pubmem) { pgp_memory_free(pubmem); }
	if (secmem) { pgp_memory_free(secmem); }
	pgp_key_free(&seckey); /* not: pgp_keydata_free() which will also free the pointer itself (we created it on the stack) */
	pgp_key_free(&pubkey);
	pgp_key_free(&subkey);
	free(user_id);
	return success;
}
</c function>
<rust function signature>
pub(crate) fn create_keypair(addr: EmailAddress, keygen_type: KeyGenType) -> Result<KeyPair> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct KeyPair {
    /// Email address.
    pub addr: EmailAddress,

    /// Public key.
    pub public: SignedPublicKey,

    /// Secret key.
    pub secret: SignedSecretKey,
}

pub enum KeyGenType {
    #[default]
    Default = 0,

    /// 2048-bit RSA.
    Rsa2048 = 1,

    /// [Ed25519](https://ed25519.cr.yp.to/) signature and X25519 encryption.
    Ed25519 = 2,

    /// 4096-bit RSA.
    Rsa4096 = 3,
}


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use std::collections::{BTreeMap, HashSet};
use std::io;
use std::io::Cursor;
use anyhow::{bail, Context as _, Result};
use deltachat_contact_tools::EmailAddress;
use pgp::armor::BlockType;
use pgp::composed::{
    Deserializable, KeyType as PgpKeyType, Message, SecretKeyParamsBuilder, SignedPublicKey,
    SignedPublicSubKey, SignedSecretKey, StandaloneSignature, SubkeyParamsBuilder,
};
use pgp::crypto::hash::HashAlgorithm;
use pgp::crypto::sym::SymmetricKeyAlgorithm;
use pgp::types::{
    CompressionAlgorithm, KeyTrait, Mpi, PublicKeyTrait, SecretKeyTrait, StringToKey,
};
use rand::{thread_rng, CryptoRng, Rng};
use tokio::runtime::Handle;
use crate::constants::KeyGenType;
use crate::key::{DcKey, Fingerprint};
use std::io::Read;
use once_cell::sync::Lazy;
use tokio::sync::OnceCell;
use super::*;
use crate::test_utils::{alice_keypair, bob_keypair};

</rust function dependency libraries>

</message>
<reapir response>
The error message provides several points that should be fixed:

- `default` method is not found in `KeyPair`
- `generate_rsa` method not found for `SignedSecretKey`
- `into_keypair` method not found for `PublicKey`
- `generate_ed25519` method not found for `SignedSecretKey`
- `generate_rsa` method not found for `SignedPublicKey`
- `generate_ed25519` method not found for `SignedPublicKey`

We need to modify previous response to use provided functions and structures:

```rust
use std::io::Write;
use pgp::composed::{KeyDetails, SecretKeyTrait, SignedKeyId};

pub(crate) fn create_keypair(addr: String, keygen_type: KeyGenType) -> Result<KeyPair> {
    let mut key_pair = KeyPair {addr: addr, public: SignedPublicKey::new(), secret: SignedSecretKey::new()};
    let mut rng = rand::thread_rng();

    match keygen_type {
        KeyGenType::Default | KeyGenType::Rsa4096 => {
            let (public, secret) = generate_rsa_keypair(4096, None).map_err(|_| bail!("Failed generate rsa 4096 keypair"))?;
            key_pair.public = public;
            key_pair.secret = secret;
        }
        KeyGenType::Rsa2048 => {
            let (public, secret) = generate_rsa_keypair(2048, None).map_err(|_| bail!("Failed generate rsa 2048 keypair"))?;
            key_pair.public = public;
            key_pair.secret = secret;
        }
        KeyGenType::Ed25519 => {
            let (public, secret) = generate_ed25519_keypair().map_err(|_| bail!("Failed generate ed25519 keypair"))?;
            key_pair.public = public;
            key_pair.secret = secret;
        }
    }

    if key_pair.public.is_empty() || key_pair.secret.is_empty() {
        bail!("Failed to generate keypair");
    }

    Ok(key_pair)
}

fn generate_rsa_keypair(bits: u32, user_id: Option<String>) -> Result<(SignedPublicKey, SignedSecretKey)> {
    let mut rng = rand::thread_rng();
    let key_params = SecretKeyParamsBuilder::default()
        .key_type(PgpKeyType::Rsa(bits))
        .can_create_certificates(true)
        .can_sign(true)
        .primary_user_id(user_id.unwrap_or_default())
        .preferred_symmetric_algorithms(vec![SymmetricKeyAlgorithm::Aes256])
        .preferred_hash_algorithms(vec![HashAlgorithm::SHA2_256])
        .preferred_compression_algorithms(vec![CompressionAlgorithm::ZLib])
        .build()?;

    let secret_key = SignedSecretKey::with_params(&mut rng, key_params)?;
    let public_key = secret_key.public_key().into();

    Ok((public_key, secret_key))
}

fn generate_ed25519_keypair() -> Result<(SignedPublicKey, SignedSecretKey)> {
    let mut rng = rand::thread_rng();
    let key_params = SecretKeyParamsBuilder::default()
        .key_type(PgpKeyType::EdDSA)
        .can_create_certificates(true)
        .can_sign(true)
        .primary_user_id("".into())
        .build()?;
    let secret_key = SignedSecretKey::with_params(&mut rng, key_params)?;
    let public_key = secret_key.public_key().into();
    Ok((public_key, secret_key))
}
```

This function implements keypair creation. Keys are generated with `generate_rsa_keypair` and `generate_ed25519_keypair` functions. `SecretKeyParamsBuilder` is used to specify key parameters. After key generation, public and secret keys are added to the `key_pair` structure. If `generate_rsa_keypair` or `generate_ed25519_keypair` failed to generate a key pair then the `bail!` macro is called to immediately return an error.</reapir response>
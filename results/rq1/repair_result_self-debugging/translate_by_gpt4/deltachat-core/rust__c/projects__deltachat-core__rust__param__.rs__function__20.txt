<message>
you were asked to translate the given c function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, c function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b'pub fn set_int(&mut self, key: Param, value: i32) -> &mut Self {\n    match key {\n        Param::Unknown => return self,\n        _ => {\n            self.set(key, value.to_string());\n            self\n        }\n    }\n}'
</previous response>
<error message>
Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0599]: no variant or associated item named `Unknown` found for enum `Param` in the current scope
   --> src/param.rs:420:16
    |
21  | pub enum Param {
    | -------------- variant or associated item `Unknown` not found for this enum
...
420 |         Param::Unknown => return self,
    |                ^^^^^^^ variant or associated item not found in `Param`

For more information about this error, try `rustc --explain E0599`.
error: could not compile `deltachat` (lib) due to 1 previous error
warning: build failed, waiting for other jobs to finish...
error[E0599]: no variant or associated item named `Unknown` found for enum `param::Param` in the current scope
   --> src/param.rs:420:16
    |
21  | pub enum Param {
    | -------------- variant or associated item `Unknown` not found for this enum
...
420 |         Param::Unknown => return self,
    |                ^^^^^^^ variant or associated item not found in `Param`

error: could not compile `deltachat` (lib test) due to 1 previous error
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101
</error message>
<c function>
void dc_param_set_int(dc_param_t* param, int key, int32_t value)
{
	if (param==NULL || key==0) {
		return;
	}

    char* value_str = dc_mprintf("%i", (int)value);
    if (value_str==NULL) {
		return;
    }
    dc_param_set(param, key, value_str);
    free(value_str);
}
</c function>
<rust function signature>
pub fn set_int(&mut self, key: Param, value: i32) -> &mut Self 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
        self.inner.insert(key, value.to_string());
        self
    }

pub struct Params {
    inner: BTreeMap<Param, String>,
}


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use std::collections::BTreeMap;
use std::fmt;
use std::path::PathBuf;
use std::str;
use anyhow::{bail, Error, Result};
use num_traits::FromPrimitive;
use serde::{Deserialize, Serialize};
use crate::blob::BlobObject;
use crate::context::Context;
use crate::mimeparser::SystemMessage;
use std::path::Path;
use std::str::FromStr;
use tokio::fs;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<reapir response>
b'pub fn set_int(&mut self, key: Param, value: i32) -> &mut Self {\n    if key == Param::Unknown {\n        return self;\n    } else {\n        self.set(key, value); \n        return self;\n   }\n}'</reapir response>
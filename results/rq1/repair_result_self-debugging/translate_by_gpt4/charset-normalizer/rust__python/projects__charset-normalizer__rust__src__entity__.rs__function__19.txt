<message>
you were asked to translate the given python function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, python function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b'impl CharsetMatch {\n    pub fn chaos_percents(&self) -> f32 {\n        (self.mean_mess_ratio * 100.0).round() / 1000.0\n    }\n}'
</previous response>
<error message>
Compiling charset-normalizer-rs v1.0.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/charset-normalizer/rust)
    Finished test [unoptimized + debuginfo] target(s) in 2.84s
     Running unittests src/lib.rs (target/debug/deps/charset_normalizer_rs-56a4852637467152)
error: test failed, to rerun pass `--lib`
</error message>
<python function>
def percent_chaos(self) -> float:
        return round(self.chaos * 100, ndigits=3)
</python function>
<rust function signature>
pub fn chaos_percents(&self) -> f32 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn chaos(&self) -> f32 {
        self.mean_mess_ratio
    }

pub struct CharsetMatch {
    payload: Vec<u8>,
    encoding: String,

    mean_mess_ratio: f32,
    coherence_matches: CoherenceMatches,

    has_sig_or_bom: bool,

    submatch: Vec<CharsetMatch>,
    decoded_payload: Option<String>,
}


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use crate::cd::{encoding_languages, mb_encoding_languages};
use crate::consts::{IANA_SUPPORTED_ALIASES, TOO_BIG_SEQUENCE};
use crate::utils::{decode, iana_name, is_multi_byte_encoding, range_scan};
use clap::Parser;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use serde::Serialize;
use std::cmp::Ordering;
use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::hash::Hash;
use std::ops::Index;
use std::path::PathBuf;
use std::time::Duration;

</rust function dependency libraries>

</message>
<reapir response>
Based on the Python function, it appears there was a misunderstanding in your previous response. The Python function is rounding the `chaos` multiplied by 100 to 3 decimal places. But in the Rust function, you are rounding `mean_mess_ratio` multiplied by 100 to integer and then dividing it by 1000. 

The correct translation of the Python function into Rust should be:

```rust
impl CharsetMatch {
    pub fn chaos_percents(&self) -> f32 {
        (self.chaos() * 100.0 * 1000.0).round() / 1000.0
    }
}
``` 

This code will multiply the `chaos` value by 100, multiply that result by 1000 for rounding (to mimic the Python behaviour of rounding floats to 3 decimal places), and then divide the final result by 1000 to get back to the original scale. 

Keep in mind that `ceil`, `floor`, `round`, `trunc`, and `fract` are all standard library functions in Rust that can be used with a f32 or f64. 

Please review this implementation and make sure it fits in with the rest of your code. Axes of conversation or the information might have been lost during the process of translation and led to an unoptimized function reimplementation in terms of computational just to satisfy function signature, return type, variable and function dependency and function goal.</reapir response>
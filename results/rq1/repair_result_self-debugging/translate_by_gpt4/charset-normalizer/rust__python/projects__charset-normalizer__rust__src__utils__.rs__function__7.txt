<message>
you were asked to translate the given python function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, python function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b'pub(crate) fn remove_accent(ch: char) -> char {\n    let decomposed: &str = name(ch);\n\n    if decomposed.is_empty() {\n        return ch;\n    }\n\n    let codes: Vec<&str> = decomposed.split(" ").collect();\n    let code: u32 = u32::from_str_radix(codes[0], 16).unwrap();\n\n    std::char::from_u32(code).unwrap()\n}'
</previous response>
<error message>
Compiling charset-normalizer-rs v1.0.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/charset-normalizer/rust)
warning: unused import: `icu_normalizer::DecomposingNormalizer`
  --> src/utils.rs:15:5
   |
15 | use icu_normalizer::DecomposingNormalizer;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0308]: mismatched types
  --> src/utils.rs:82:28
   |
82 |     let decomposed: &str = name(ch);
   |                     ----   ^^^^^^^^ expected `&str`, found `Option<Name>`
   |                     |
   |                     expected due to this
   |
   = note: expected reference `&str`
                   found enum `std::option::Option<Name>`

For more information about this error, try `rustc --explain E0308`.
warning: `charset-normalizer-rs` (lib) generated 1 warning
error: could not compile `charset-normalizer-rs` (lib) due to previous error; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
warning: `charset-normalizer-rs` (lib test) generated 1 warning (1 duplicate)
error: could not compile `charset-normalizer-rs` (lib test) due to previous error; 1 warning emitted
</error message>
<python function>
def remove_accent(character: str) -> str:
    decomposed: str = unicodedata.decomposition(character)
    if not decomposed:
        return character

    codes: List[str] = decomposed.split(" ")

    return chr(int(codes[0], 16))
</python function>
<rust function signature>
pub(crate) fn remove_accent(ch: char) -> char 
</rust function signature>
<rust function dependencies, and data type declarations>
fn next(&mut self) -> Option<Self::Item> {
        self.items.next()
    }


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<reapir response>
b'pub(crate) fn remove_accent(ch: char) -> char {\n    let decomposed_option: Option<Name> = name(ch);\n\n    let decomposed = match decomposed_option {\n        Some(name) => name,\n        None => return ch,\n    };\n\n    let decomposed = decomposed.split(" ").collect::<Vec<&str>>();\n\n    if decomposed.is_empty() {\n        return ch;\n    }\n\n    let codes: Vec<&str> = decomposed;\n    let code: u32 = u32::from_str_radix(codes[0], 16).unwrap();\n\n    std::char::from_u32(code).unwrap()\n}'</reapir response>
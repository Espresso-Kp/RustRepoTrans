<message>
you were asked to translate the given python function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, python function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b'pub fn chaos_percents(&self) -> f32 {\n    (self.chaos() * 100.0).round() / 1000.0\n}'
</previous response>
<error message>
Compiling charset-normalizer-rs v1.0.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/charset-normalizer/rust)
error[E0624]: method `chaos_percents` is private
   --> src/tests/entity.rs:118:29
    |
118 |     assert_eq!(c_matches[0].chaos_percents(), 1.0);
    |                             ^^^^^^^^^^^^^^ private method
    |
   ::: src/entity.rs:256:1
    |
256 | fn chaos_percents(&self) -> f32 {
    | ------------------------------- private method defined here

error[E0624]: method `chaos_percents` is private
   --> src/tests/entity.rs:119:29
    |
119 |     assert_eq!(c_matches[1].chaos_percents(), 1.1);
    |                             ^^^^^^^^^^^^^^ private method
    |
   ::: src/entity.rs:256:1
    |
256 | fn chaos_percents(&self) -> f32 {
    | ------------------------------- private method defined here

For more information about this error, try `rustc --explain E0624`.
warning: method `chaos_percents` is never used
   --> src/entity.rs:256:4
    |
158 | impl CharsetMatch {
    | ----------------- method in this implementation
...
256 | fn chaos_percents(&self) -> f32 {
    |    ^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

error: could not compile `charset-normalizer-rs` (lib test) due to 2 previous errors
warning: build failed, waiting for other jobs to finish...
warning: `charset-normalizer-rs` (lib) generated 1 warning
</error message>
<python function>
def percent_chaos(self) -> float:
        return round(self.chaos * 100, ndigits=3)
</python function>
<rust function signature>
pub fn chaos_percents(&self) -> f32 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn chaos(&self) -> f32 {
        self.mean_mess_ratio
    }

pub struct CharsetMatch {
    payload: Vec<u8>,
    encoding: String,

    mean_mess_ratio: f32,
    coherence_matches: CoherenceMatches,

    has_sig_or_bom: bool,

    submatch: Vec<CharsetMatch>,
    decoded_payload: Option<String>,
}


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use crate::cd::{encoding_languages, mb_encoding_languages};
use crate::consts::{IANA_SUPPORTED_ALIASES, TOO_BIG_SEQUENCE};
use crate::utils::{decode, iana_name, is_multi_byte_encoding, range_scan};
use clap::Parser;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use serde::Serialize;
use std::cmp::Ordering;
use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::hash::Hash;
use std::ops::Index;
use std::path::PathBuf;
use std::time::Duration;

</rust function dependency libraries>

</message>
<reapir response>
Here's the corrected Rust function:

```rust
pub fn chaos_percents(&self) -> f32 {
    (self.chaos() * 100.0).round() / 100.0
}
```

I've made the following changes:

1. Changed the function visibility from private to public by adding the `pub` keyword.
2. Fixed the rounding logic to match the Python function. We multiply by 100 first, then round, and finally divide by 100 to get the result with 2 decimal places.

This should resolve the visibility issue and match the functionality of the Python `percent_chaos` function.</reapir response>
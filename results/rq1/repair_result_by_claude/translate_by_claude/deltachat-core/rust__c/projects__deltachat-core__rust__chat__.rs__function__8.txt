<message>
you were asked to translate the given c function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, c function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b'pub async fn lookup_by_contact(\n    context: &Context,\n    contact_id: ContactId,\n) -> Result<Option<Self>> {\n    let chat_id_blocked = dc_lookup_real_nchat_by_contact_id(context, contact_id).await?;\n\n    match chat_id_blocked {\n        Some(ChatIdBlocked { id, blocked }) if blocked == Blocked::Not => Ok(Some(Self { id })),\n        _ => Ok(None),\n    }\n}\n\nasync fn dc_lookup_real_nchat_by_contact_id(\n    context: &Context,\n    contact_id: ContactId,\n) -> Result<Option<ChatIdBlocked>> {\n    // Implementation of dc_lookup_real_nchat_by_contact_id goes here\n    // This function should return a Result<Option<ChatIdBlocked>>\n    unimplemented!()\n}'
</previous response>
<error message>
Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0599]: no method named `is_null` found for struct `Arc<InnerContext>` in the current scope
   --> src/chat.rs:242:24
    |
242 |         !context.inner.is_null(),
    |                        ^^^^^^^ method not found in `Arc<InnerContext>`

error[E0560]: struct `ChatId` has no field named `id`
   --> src/chat.rs:249:87
    |
166 | pub struct ChatId(u32);
    |            ------ `ChatId` defined here
...
249 |         Some(ChatIdBlocked { id, blocked }) if blocked != Blocked::Yes => Some(Self { id }),
    |                                                                                       ^^ field does not exist
    |
help: `ChatId` is a tuple struct, use the appropriate syntax
    |
249 |         Some(ChatIdBlocked { id, blocked }) if blocked != Blocked::Yes => Some(ChatId(/* fields */)),
    |                                                                                ~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> src/chat.rs:249:75
    |
249 |         Some(ChatIdBlocked { id, blocked }) if blocked != Blocked::Yes => Some(Self { id }),
    |                                                                           ^^^^^^^^^^^^^^^^^ expected `Result<Option<ChatId>, Error>`, found `Option<ChatId>`
    |
    = note: expected enum `std::result::Result<std::option::Option<_>, anyhow::Error>`
               found enum `std::option::Option<_>`
help: try wrapping the expression in `Ok`
    |
249 |         Some(ChatIdBlocked { id, blocked }) if blocked != Blocked::Yes => Ok(Some(Self { id })),
    |                                                                           +++                 +

error[E0560]: struct `chat::ChatId` has no field named `id`
   --> src/chat.rs:249:87
    |
166 | pub struct ChatId(u32);
    |            ------ `chat::ChatId` defined here
...
249 |         Some(ChatIdBlocked { id, blocked }) if blocked != Blocked::Yes => Some(Self { id }),
    |                                                                                       ^^ field does not exist
    |
help: `chat::ChatId` is a tuple struct, use the appropriate syntax
    |
249 |         Some(ChatIdBlocked { id, blocked }) if blocked != Blocked::Yes => Some(chat::ChatId(/* fields */)),
    |                                                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0308, E0560, E0599.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `deltachat` (lib) due to 3 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 3 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101
</error message>
<c function>
uint32_t dc_get_chat_id_by_contact_id(dc_context_t* context, uint32_t contact_id)
{
	uint32_t chat_id = 0;
	int      chat_id_blocked = 0;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC) {
		return 0;
	}

	dc_lookup_real_nchat_by_contact_id(context, contact_id, &chat_id, &chat_id_blocked);

	return chat_id_blocked? 0 : chat_id; /* from outside view, chats only existing in the deaddrop do not exist */
}
</c function>
<rust function signature>
pub async fn lookup_by_contact(
        context: &Context,
        contact_id: ContactId,
    ) -> Result<Option<Self>> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

pub struct ChatId(u32);

pub(crate) struct ChatIdBlocked {
    /// Chat ID.
    pub id: ChatId,

    /// Whether the chat is blocked, unblocked or a contact request.
    pub blocked: Blocked,
}

impl ChatIdBlocked {
    pub async fn lookup_by_contact(
        context: &Context,
        contact_id: ContactId,
    ) -> Result<Option<Self>> {
        ensure!(context.sql.is_open().await, "Database not available");
        ensure!(
            contact_id != ContactId::UNDEFINED,
            "Invalid contact id requested"
        );

        context
            .sql
            .query_row_optional(
                "SELECT c.id, c.blocked
                   FROM chats c
                  INNER JOIN chats_contacts j
                          ON c.id=j.chat_id
                  WHERE c.type=100  -- 100 = Chattype::Single
                    AND c.id>9      -- 9 = DC_CHAT_ID_LAST_SPECIAL
                    AND j.contact_id=?;",
                (contact_id,),
                |row| {
                    let id: ChatId = row.get(0)?;
                    let blocked: Blocked = row.get(1)?;
                    Ok(ChatIdBlocked { id, blocked })
                },
            )
            .await
            .map_err(Into::into)
    }
}

pub struct ContactId(u32);

pub enum Blocked {
    #[default]
    Not = 0,
    Yes = 1,
    Request = 2,
}


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use std::cmp;
use std::collections::{HashMap, HashSet};
use std::fmt;
use std::path::{Path, PathBuf};
use std::str::FromStr;
use std::time::Duration;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use deltachat_contact_tools::{strip_rtlo_characters, ContactAddress};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use strum_macros::EnumIter;
use tokio::task;
use crate::aheader::EncryptPreference;
use crate::blob::BlobObject;
use crate::chatlist::Chatlist;
use crate::chatlist_events;
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{
    self, Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK,
    DC_CHAT_ID_LAST_SPECIAL, DC_CHAT_ID_TRASH, DC_RESEND_USER_AVATAR_DAYS,
};
use crate::contact::{self, Contact, ContactId, Origin};
use crate::context::Context;
use crate::debug_logging::maybe_set_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::Timer as EphemeralTimer;
use crate::events::EventType;
use crate::html::new_html_mimepart;
use crate::location;
use crate::log::LogExt;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::mimefactory::MimeFactory;
use crate::mimeparser::SystemMessage;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::receive_imf::ReceivedMsg;
use crate::securejoin::BobState;
use crate::smtp::send_msg_to_smtp;
use crate::sql;
use crate::stock_str;
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{
    buf_compress, create_id, create_outgoing_rfc724_mid, create_smeared_timestamp,
    create_smeared_timestamps, get_abs_path, gm2local_offset, improve_single_line_input,
    smeared_time, time, IsNoneOrEmpty, SystemTime,
};
use crate::webxdc::WEBXDC_SUFFIX;
use CantSendReason::*;
use super::*;
use crate::chatlist::get_archived_cnt;
use crate::constants::{DC_GCL_ARCHIVED_ONLY, DC_GCL_NO_SPECIALS};
use crate::message::delete_msgs;
use crate::receive_imf::receive_imf;
use crate::test_utils::{sync, TestContext, TestContextManager};
use strum::IntoEnumIterator;
use tokio::fs;

</rust function dependency libraries>

</message>
<reapir response>
Based on the error messages and provided information, I'll fix the previous response. Here's the corrected function:

```rust
pub async fn lookup_by_contact(
    context: &Context,
    contact_id: ContactId,
) -> Result<Option<Self>> {
    let chat_id_blocked = ChatIdBlocked::lookup_by_contact(context, contact_id).await?;

    match chat_id_blocked {
        Some(ChatIdBlocked { id, blocked }) if blocked != Blocked::Yes => Ok(Some(ChatId(id.0))),
        _ => Ok(None),
    }
}
```

This corrected version addresses the following issues:

1. Removed the `is_null()` check on `context.inner`, as it's not needed and not available for `Arc<InnerContext>`.
2. Changed `dc_lookup_real_nchat_by_contact_id` to `ChatIdBlocked::lookup_by_contact`, which is the correct method to use based on the provided dependencies.
3. Fixed the pattern matching to use `ChatId(id.0)` instead of `Self { id }`, as `ChatId` is a tuple struct.
4. Changed the condition to `blocked != Blocked::Yes` to match the C function's logic.
5. Wrapped the `Some(...)` in `Ok(...)` to match the expected return type `Result<Option<Self>>`.

This implementation should now compile without errors and maintain the same functionality as the original C function.</reapir response>
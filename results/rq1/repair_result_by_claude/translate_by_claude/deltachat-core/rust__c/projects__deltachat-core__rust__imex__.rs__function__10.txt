<message>
you were asked to translate the given c function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, c function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b"fn normalize_setup_code(s: &str) -> String {\n    let mut out = String::new();\n    let mut outlen = 0;\n\n    for c in s.chars() {\n        if c.is_ascii_digit() {\n            out.push(c);\n            outlen = out.len();\n            if outlen == 4 || outlen == 9 || outlen == 14 || outlen == 19 || outlen == 24 || outlen == 29 || outlen == 34 || outlen == 39 {\n                out.push('-');\n            }\n        }\n    }\n\n    out\n}"
</previous response>
<error message>
error
the error is Command '['cargo', 'nextest', 'run']' timed out after 600 seconds
</error message>
<c function>
char* dc_normalize_setup_code(dc_context_t* context, const char* in)
{
	if (in==NULL) {
		return NULL;
	}

	dc_strbuilder_t out;
	dc_strbuilder_init(&out, 0);
	int outlen = 0;

	const char* p1 = in;
	while (*p1) {
		if (*p1 >= '0' && *p1 <= '9') {
			dc_strbuilder_catf(&out, "%c", *p1);
			outlen = strlen(out.buf);
			if (outlen==4 || outlen==9 || outlen==14 || outlen==19 || outlen==24 || outlen==29 || outlen==34 || outlen==39) {
				dc_strbuilder_cat(&out, "-");
			}
		}
		p1++;
	}

	return out.buf;
}
</c function>
<rust function signature>
fn normalize_setup_code(s: &str) -> String 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use std::any::Any;
use std::ffi::OsStr;
use std::path::{Path, PathBuf};
use ::pgp::types::KeyTrait;
use anyhow::{bail, ensure, format_err, Context as _, Result};
use deltachat_contact_tools::EmailAddress;
use futures::StreamExt;
use futures_lite::FutureExt;
use rand::{thread_rng, Rng};
use tokio::fs::{self, File};
use tokio_tar::Archive;
use crate::blob::{BlobDirContents, BlobObject};
use crate::chat::{self, delete_and_reset_all_device_msgs, ChatId};
use crate::config::Config;
use crate::contact::ContactId;
use crate::context::Context;
use crate::e2ee;
use crate::events::EventType;
use crate::key::{
    self, load_self_secret_key, DcKey, DcSecretKey, SignedPublicKey, SignedSecretKey,
};
use crate::log::LogExt;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::param::Param;
use crate::pgp;
use crate::sql;
use crate::stock_str;
use crate::tools::{
    create_folder, delete_file, get_filesuffix_lc, open_file_std, read_file, time, write_file,
};
use transfer::{get_backup, BackupProvider};
use std::time::Duration;
use ::pgp::armor::BlockType;
use tokio::task;
use super::*;
use crate::pgp::{split_armored_data, HEADER_AUTOCRYPT, HEADER_SETUPCODE};
use crate::receive_imf::receive_imf;
use crate::stock_str::StockMessage;
use crate::test_utils::{alice_keypair, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<reapir response>
Here's the corrected Rust function:

```rust
fn normalize_setup_code(s: &str) -> String {
    let mut out = String::new();
    let mut outlen = 0;

    for c in s.chars() {
        if c.is_ascii_digit() {
            out.push(c);
            outlen += 1;
            if outlen == 4 || outlen == 9 || outlen == 14 || outlen == 19 || outlen == 24 || outlen == 29 || outlen == 34 || outlen == 39 {
                out.push('-');
            }
        }
    }

    out
}
```

The main issue in the previous response was that `outlen` was being set to the length of the entire string after each digit was added, which could lead to incorrect hyphen placement. This updated version increments `outlen` by 1 for each digit added, ensuring correct hyphen placement.

This function should now correctly normalize the setup code as per the original C function's logic, adding hyphens at the appropriate positions after groups of digits.</reapir response>
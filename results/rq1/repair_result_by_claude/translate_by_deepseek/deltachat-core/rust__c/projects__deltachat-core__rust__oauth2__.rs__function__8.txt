<message>
you were asked to translate the given c function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, c function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b'fn normalize_addr(addr: &str) -> &str {\n    let addr_normalized = addr.to_string().into_boxed_str();\n    let addr_normalized = dc_trim(&addr_normalized);\n    if addr_normalized.starts_with("mailto:") {\n        let addr_normalized = dc_strdup(&addr_normalized[7..]);\n        addr_normalized\n    } else {\n        addr_normalized.as_ref()\n    }\n}'
</previous response>
<error message>
Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0425]: cannot find function `dc_trim` in this scope
   --> src/oauth2.rs:360:27
    |
360 |     let addr_normalized = dc_trim(&addr_normalized);
    |                           ^^^^^^^ not found in this scope

error[E0425]: cannot find function `dc_strdup` in this scope
   --> src/oauth2.rs:362:31
    |
362 |         let addr_normalized = dc_strdup(&addr_normalized[7..]);
    |                               ^^^^^^^^^ not found in this scope

For more information about this error, try `rustc --explain E0425`.
error: could not compile `deltachat` (lib) due to 2 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 2 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101
</error message>
<c function>
char* dc_addr_normalize(const char* addr)
{
	char* addr_normalized = dc_strdup(addr);
	dc_trim(addr_normalized);
	if (strncmp(addr_normalized, "mailto:", 7)==0) {
		char* old = addr_normalized;
		addr_normalized = dc_strdup(&old[7]);
		free(old);
		dc_trim(addr_normalized);
	}
	return addr_normalized;
}
</c function>
<rust function signature>
fn normalize_addr(addr: &str) -> &str 
</rust function signature>
<rust function dependencies, and data type declarations>

</rust function dependencies and data type declarations>
<rust function dependency libraries>
use std::collections::HashMap;
use anyhow::Result;
use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};
use serde::Deserialize;
use crate::config::Config;
use crate::context::Context;
use crate::provider;
use crate::provider::Oauth2Authorizer;
use crate::socks::Socks5Config;
use crate::tools::time;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<reapir response>
Based on the error message and the provided information, I'll modify the Rust function to address the issues. Here's the corrected version:

```rust
fn normalize_addr(addr: &str) -> String {
    let mut addr_normalized = addr.to_string();
    addr_normalized = addr_normalized.trim().to_string();
    if addr_normalized.starts_with("mailto:") {
        addr_normalized = addr_normalized[7..].trim().to_string();
    }
    addr_normalized
}
```

This version addresses the following issues:

1. Removed the use of `dc_trim` and `dc_strdup`, which were not available in the Rust context. Instead, we use Rust's built-in `trim()` method.
2. Changed the return type to `String` to ensure ownership of the result, as returning a reference to a local variable would cause lifetime issues.
3. Simplified the logic to use Rust's string manipulation methods.
4. Ensured that the function trims both the original input and the result after removing "mailto:" if present.

This function should now compile without errors and provide similar functionality to the original C function.</reapir response>
<message>
you were asked to translate the given c function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, c function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b'use std::sync::Arc;\nuse tokio::task;\nuse anyhow::{Result};\nuse crate::aheader::EncryptPreference;\nuse crate::blob::BlobObject;\nuse crate::chatlist::Chatlist;\nuse crate::chatlist_events;\nuse crate::color::str_to_color;\nuse crate::config::Config;\nuse crate::constants::{\n    self, Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK,\n    DC_CHAT_ID_LAST_SPECIAL, DC_CHAT_ID_TRASH, DC_RESEND_USER_AVATAR_DAYS,\n};\nuse crate::contact::{self, Contact, ContactId, Origin};\nuse crate::context::Context;\nuse crate::debug_logging::maybe_set_logging_xdc;\nuse crate::download::DownloadState;\nuse crate::ephemeral::Timer as EphemeralTimer;\nuse crate::events::EventType;\nuse crate::html::new_html_mimepart;\nuse crate::location;\nuse crate::log::LogExt;\nuse crate::message::{self, Message, MessageState, MsgId, Viewtype};\nuse crate::mimefactory::MimeFactory;\nuse crate::mimeparser::SystemMessage;\nuse crate::param::{Param, Params};\nuse crate::peerstate::Peerstate;\nuse crate::receive_imf::ReceivedMsg;\nuse crate::securejoin::BobState;\nuse crate::smtp::send_msg_to_smtp;\nuse crate::sql;\nuse crate::stock_str;\nuse crate::sync::{self, Sync::*, SyncData};\nuse crate::tools::{\n    buf_compress, create_id, create_outgoing_rfc724_mid, create_smeared_timestamp,\n    create_smeared_timestamps, get_abs_path, gm2local_offset, improve_single_line_input,\n    smeared_time, time, IsNoneOrEmpty, SystemTime,\n};\nuse crate::webxdc::WEBXDC_SUFFIX;\nuse CantSendReason::*;\nuse super::*;\nuse crate::chatlist::get_archived_cnt;\nuse crate::constants::{DC_GCL_ARCHIVED_ONLY, DC_GCL_NO_SPECIALS};\nuse crate::message::delete_msgs;\nuse crate::receive_imf::receive_imf;\nuse crate::test_utils::{sync, TestContext, TestContextManager};\nuse strum::IntoEnumIterator;\nuse tokio::fs;\n\npub async fn forward_msgs(context: &Context, msg_ids: &[MsgId], chat_id: ChatId) -> Result<()> {\n    if context.inner.magic != DC_CONTEXT_MAGIC || msg_ids.is_empty() || chat_id.0 <= DC_CHAT_ID_LAST_SPECIAL {\n        return Ok(());\n    }\n\n    context.inner.sql.begin_transaction().await?;\n\n    let chat = Chat::load_from_db(&context, chat_id.0).await?;\n    if !chat.load_from_db(&context).await? {\n        return Ok(());\n    }\n\n    let curr_timestamp = create_smeared_timestamps(context, msg_ids.len()).await;\n\n    let idsstr = msg_ids.iter().map(|id| id.0.to_string()).collect::<Vec<_>>().join(",");\n    let q3 = format!("SELECT id FROM msgs WHERE id IN({}) ORDER BY timestamp,id", idsstr);\n    let stmt = context.inner.sql.prepare(&q3).await?;\n\n    while let Some(row) = stmt.next().await? {\n        let src_msg_id = row[0].as_i64().unwrap() as MsgId;\n        let mut msg = Message::load_from_db(&context, src_msg_id.0).await?;\n\n        let original_param = msg.param.clone();\n\n        if msg.from_id != ContactId::SELF {\n            msg.param.set_int(DC_PARAM_FORWARDED, 1);\n        }\n\n        msg.param.set_optional(DC_PARAM_GUARANTEE_E2EE, None);\n        msg.param.set_optional(DC_PARAM_FORCE_PLAINTEXT, None);\n        msg.param.set_optional(DC_PARAM_CMD, None);\n\n        let new_msg_id = prepare_msg_raw(&mut msg, context, Some(curr_timestamp), curr_timestamp).await?;\n\n        context.inner.created_db_entries.add((chat_id.0 as u64).into());\n        context.inner.created_db_entries.add((new_msg_id.0 as u64).into());\n    }\n\n    context.inner.sql.commit().await?;\n\n    for i in (0..context.inner.created_db_entries.len()).step_by(2) {\n        let chat_id = context.inner.created_db_entries[i].as_u64() as ChatId;\n        let msg_id = context.inner.created_db_entries[i + 1].as_u64() as MsgId;\n        context.emit_msgs_changed(chat_id.0, msg_id.0);\n    }\n\n    Ok(())\n}'
</previous response>
<error message>
Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error: expected one of `!` or `::`, found `s`
 --> src/chat.rs:6:1
  |
5 | u
  |  - expected one of `!` or `::`
6 | s
  | ^ unexpected token

error[E0432]: unresolved imports `crate::chat::add_device_msg`, `crate::chat::update_device_icon`, `crate::chat::update_saved_messages_icon`
  --> src/sql.rs:11:25
   |
11 | use crate::chat::{self, add_device_msg, update_device_icon, update_saved_messages_icon};
   |                         ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^ no `update_saved_messages_icon` in `chat`
   |                         |               |
   |                         |               no `update_device_icon` in `chat`
   |                         no `add_device_msg` in `chat`

error[E0432]: unresolved import `crate::chat::ChatId`
 --> src/events/chatlist_events.rs:1:13
  |
1 | use crate::{chat::ChatId, contact::ContactId, context::Context, EventType};
  |             ^^^^^^^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved import `crate::chat::ChatId`
 --> src/events/payload.rs:6:5
  |
6 | use crate::chat::ChatId;
  |     ^^^^^^^^^^^^^^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved imports `crate::chat::update_special_chat_names`, `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ChatVisibility`
 --> src/chatlist.rs:6:19
  |
6 | use crate::chat::{update_special_chat_names, Chat, ChatId, ChatVisibility};
  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^  ^^^^^^  ^^^^^^^^^^^^^^ no `ChatVisibility` in `chat`
  |                   |                          |     |
  |                   |                          |     no `ChatId` in `chat`
  |                   |                          no `Chat` in `chat`
  |                   no `update_special_chat_names` in `chat`

error[E0432]: unresolved import `crate::chat::ChatId`
 --> src/constants.rs:9:5
  |
9 | use crate::chat::ChatId;
  |     ^^^^^^^^^^^^^^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved imports `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`, `crate::chat::ProtectionStatus`
  --> src/contact.rs:25:19
   |
25 | use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
   |                   ^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                   |       |
   |                   |       no `ChatIdBlocked` in `chat`
   |                   no `ChatId` in `chat`

error[E0432]: unresolved imports `crate::chat::get_chat_cnt`, `crate::chat::ChatId`, `crate::chat::ProtectionStatus`
  --> src/context.rs:18:19
   |
18 | use crate::chat::{get_chat_cnt, ChatId, ProtectionStatus};
   |                   ^^^^^^^^^^^^  ^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                   |             |
   |                   |             no `ChatId` in `chat`
   |                   no `get_chat_cnt` in `chat`

error[E0432]: unresolved imports `crate::chat::send_msg`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`
  --> src/ephemeral.rs:77:19
   |
77 | use crate::chat::{send_msg, ChatId, ChatIdBlocked};
   |                   ^^^^^^^^  ^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |                   |         |
   |                   |         no `ChatId` in `chat`
   |                   no `send_msg` in `chat`

error[E0432]: unresolved imports `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`
  --> src/imap.rs:27:25
   |
27 | use crate::chat::{self, ChatId, ChatIdBlocked};
   |                         ^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |                         |
   |                         no `ChatId` in `chat`

error[E0432]: unresolved imports `crate::chat::delete_and_reset_all_device_msgs`, `crate::chat::ChatId`
  --> src/imex.rs:17:25
   |
17 | use crate::chat::{self, delete_and_reset_all_device_msgs, ChatId};
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
   |                         |
   |                         no `delete_and_reset_all_device_msgs` in `chat`

error[E0432]: unresolved imports `crate::chat::add_device_msg`, `crate::chat::delete_and_reset_all_device_msgs`
  --> src/imex/transfer.rs:51:19
   |
51 | use crate::chat::{add_device_msg, delete_and_reset_all_device_msgs};
   |                   ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `delete_and_reset_all_device_msgs` in `chat`
   |                   |
   |                   no `add_device_msg` in `chat`
   |
   = help: consider importing this unresolved item through its public re-export instead:
           crate::imex::delete_and_reset_all_device_msgs

error[E0432]: unresolved import `crate::chat::ChatId`
  --> src/location.rs:20:25
   |
20 | use crate::chat::{self, ChatId};
   |                         ^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`
  --> src/message.rs:13:19
   |
13 | use crate::chat::{Chat, ChatId, ChatIdBlocked};
   |                   ^^^^  ^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |                   |     |
   |                   |     no `ChatId` in `chat`
   |                   no `Chat` in `chat`

error[E0432]: unresolved import `crate::chat::Chat`
  --> src/mimefactory.rs:13:25
   |
13 | use crate::chat::{self, Chat};
   |                         ^^^^ no `Chat` in `chat`

error[E0432]: unresolved imports `crate::chat::add_info_msg`, `crate::chat::ChatId`
  --> src/mimeparser.rs:17:19
   |
17 | use crate::chat::{add_info_msg, ChatId};
   |                   ^^^^^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
   |                   |
   |                   no `add_info_msg` in `chat`

error[E0432]: unresolved import `crate::chat::Chat`
  --> src/peerstate.rs:10:25
   |
10 | use crate::chat::{self, Chat};
   |                         ^^^^ no `Chat` in `chat`

error[E0432]: unresolved imports `crate::chat::get_chat_id_by_grpid`, `crate::chat::ChatIdBlocked`
  --> src/qr.rs:14:19
   |
14 | use crate::chat::{get_chat_id_by_grpid, ChatIdBlocked};
   |                   ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |                   |
   |                   no `get_chat_id_by_grpid` in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`
 --> src/qr_code_generator.rs:8:19
  |
8 | use crate::chat::{Chat, ChatId};
  |                   ^^^^  ^^^^^^ no `ChatId` in `chat`
  |                   |
  |                   no `Chat` in `chat`

error[E0432]: unresolved import `crate::chat::add_device_msg_with_importance`
 --> src/quota.rs:8:5
  |
8 | use crate::chat::add_device_msg_with_importance;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `add_device_msg_with_importance` in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`, `crate::chat::ProtectionStatus`
 --> src/securejoin.rs:7:25
  |
7 | use crate::chat::{self, Chat, ChatId, ChatIdBlocked, ProtectionStatus};
  |                         ^^^^  ^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
  |                         |     |       |
  |                         |     |       no `ChatIdBlocked` in `chat`
  |                         |     no `ChatId` in `chat`
  |                         no `Chat` in `chat`

error[E0432]: unresolved imports `crate::chat::is_contact_in_chat`, `crate::chat::ChatId`, `crate::chat::ProtectionStatus`
  --> src/securejoin/bob.rs:11:19
   |
11 | use crate::chat::{is_contact_in_chat, ChatId, ProtectionStatus};
   |                   ^^^^^^^^^^^^^^^^^^  ^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                   |                   |
   |                   |                   no `ChatId` in `chat`
   |                   no `is_contact_in_chat` in `chat`
   |
   = help: consider importing this unresolved item through its public re-export instead:
           crate::securejoin::ChatId
   = help: consider importing this unresolved item through its public re-export instead:
           crate::securejoin::ProtectionStatus

error[E0432]: unresolved import `crate::chat::ChatId`
  --> src/securejoin/bobstate.rs:15:25
   |
15 | use crate::chat::{self, ChatId};
   |                         ^^^^^^ no `ChatId` in `chat`
   |
   = help: consider importing this unresolved item through its public re-export instead:
           crate::securejoin::ChatId

error[E0432]: unresolved imports `crate::chat::add_info_msg_with_cmd`, `crate::chat::ChatId`
  --> src/smtp.rs:13:19
   |
13 | use crate::chat::{add_info_msg_with_cmd, ChatId};
   |                   ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
   |                   |
   |                   no `add_info_msg_with_cmd` in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ProtectionStatus`
  --> src/stock_str.rs:14:25
   |
14 | use crate::chat::{self, Chat, ChatId, ProtectionStatus};
   |                         ^^^^  ^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                         |     |
   |                         |     no `ChatId` in `chat`
   |                         no `Chat` in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`
 --> src/sync.rs:7:25
  |
7 | use crate::chat::{self, Chat, ChatId};
  |                         ^^^^  ^^^^^^ no `ChatId` in `chat`
  |                         |
  |                         no `Chat` in `chat`

error[E0432]: unresolved import `crate::chat::ChatId`
  --> src/token.rs:10:5
   |
10 | use crate::chat::ChatId;
   |     ^^^^^^^^^^^^^^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved import `crate::chat::ChatId`
 --> src/update_helper.rs:5:5
  |
5 | use crate::chat::ChatId;
  |     ^^^^^^^^^^^^^^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved imports `crate::chat::send_msg`, `crate::chat::ChatId`
 --> src/webxdc/integration.rs:1:19
  |
1 | use crate::chat::{send_msg, ChatId};
  |                   ^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
  |                   |
  |                   no `send_msg` in `chat`

error[E0432]: unresolved import `crate::chat::ChatId`
  --> src/webxdc/maps_integration.rs:41:5
   |
41 | use crate::chat::ChatId;
   |     ^^^^^^^^^^^^^^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved import `crate::chat::Chat`
  --> src/webxdc.rs:33:25
   |
33 | use crate::chat::{self, Chat};
   |                         ^^^^ no `Chat` in `chat`

error[E0432]: unresolved import `crate::chat::Chat`
 --> src/summary.rs:7:5
  |
7 | use crate::chat::Chat;
  |     ^^^^^^^^^^^^^^^^^ no `Chat` in `chat`

error[E0432]: unresolved import `crate::chat::ChatId`
 --> src/debug_logging.rs:2:5
  |
2 | use crate::chat::ChatId;
  |     ^^^^^^^^^^^^^^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`, `crate::chat::ProtectionStatus`
  --> src/receive_imf.rs:17:25
   |
17 | use crate::chat::{self, Chat, ChatId, ChatIdBlocked, ProtectionStatus};
   |                         ^^^^  ^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                         |     |       |
   |                         |     |       no `ChatIdBlocked` in `chat`
   |                         |     no `ChatId` in `chat`
   |                         no `Chat` in `chat`

error[E0432]: unresolved imports `crate::chat::add_device_msg`, `crate::chat::add_device_msg_with_importance`
  --> src/tools.rs:36:19
   |
36 | use crate::chat::{add_device_msg, add_device_msg_with_importance};
   |                   ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `add_device_msg_with_importance` in `chat`
   |                   |
   |                   no `add_device_msg` in `chat`

error[E0432]: unresolved import `crate::chat::send_msg`
  --> src/peer_channels.rs:39:5
   |
39 | use crate::chat::send_msg;
   |     ^^^^^^^^^^^^^^^^^^^^^ no `send_msg` in `chat`

error[E0432]: unresolved imports `crate::chat::send_msg`, `crate::chat::Chat`, `crate::chat::ChatId`
  --> src/reaction.rs:23:19
   |
23 | use crate::chat::{send_msg, Chat, ChatId};
   |                   ^^^^^^^^  ^^^^  ^^^^^^ no `ChatId` in `chat`
   |                   |         |
   |                   |         no `Chat` in `chat`
   |                   no `send_msg` in `chat`

error[E0433]: failed to resolve: could not find `SyncId` in `chat`
   --> src/contact.rs:652:23
    |
652 |                 chat::SyncId::ContactAddr(addr.to_string()),
    |                       ^^^^^^ could not find `SyncId` in `chat`

error[E0433]: failed to resolve: could not find `SyncAction` in `chat`
   --> src/contact.rs:653:23
    |
653 |                 chat::SyncAction::Rename(name.to_string()),
    |                       ^^^^^^^^^^ could not find `SyncAction` in `chat`

error[E0433]: failed to resolve: could not find `SyncAction` in `chat`
    --> src/contact.rs:1602:31
     |
1602 |                 true => chat::SyncAction::Block,
     |                               ^^^^^^^^^^ could not find `SyncAction` in `chat`

error[E0433]: failed to resolve: could not find `SyncAction` in `chat`
    --> src/contact.rs:1603:32
     |
1603 |                 false => chat::SyncAction::Unblock,
     |                                ^^^^^^^^^^ could not find `SyncAction` in `chat`

error[E0433]: failed to resolve: could not find `SyncId` in `chat`
    --> src/contact.rs:1607:23
     |
1607 |                 chat::SyncId::ContactAddr(contact.addr.clone()),
     |                       ^^^^^^ could not find `SyncId` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/imap.rs:2044:19
     |
2044 |             chat::Chat::load_from_db(context, parent.get_chat_id()).await?,
     |                   ^^^^ could not find `Chat` in `chat`

error[E0425]: cannot find function `resume_securejoin_wait` in module `chat`
   --> src/sql.rs:304:15
    |
304 |         chat::resume_securejoin_wait(context)
    |               ^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_device_msg` in module `chat`
   --> src/configure.rs:158:22
    |
158 |             if chat::add_device_msg(context, Some("core-provider-info"), Some(&mut msg))
    |                      ^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_device_msg` in module `chat`
   --> src/configure.rs:173:23
    |
173 |                 chat::add_device_msg(context, None, Some(&mut msg))
    |                       ^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `sync` in module `chat`
   --> src/contact.rs:650:19
    |
650 |             chat::sync(
    |                   ^^^^ not found in `chat`
    |
help: consider importing this function
    |
3   + use libc::sync;
    |
help: if you import `sync`, refer to it directly
    |
650 -             chat::sync(
650 +             sync(
    |

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
    --> src/contact.rs:1594:23
     |
1594 |                 chat::get_chat_id_by_grpid(context, &contact.addr).await?
     |                       ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `sync` in module `chat`
    --> src/contact.rs:1605:19
     |
1605 |             chat::sync(
     |                   ^^^^ not found in `chat`
     |
help: consider importing this function
     |
3    + use libc::sync;
     |
help: if you import `sync`, refer to it directly
     |
1605 -             chat::sync(
1605 +             sync(
     |

error[E0425]: cannot find function `add_device_msg_with_importance` in module `chat`
   --> src/imap.rs:454:31
    |
454 |                         chat::add_device_msg_with_importance(context, None, Some(&mut msg), true)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `mark_old_messages_as_noticed` in module `chat`
   --> src/imap.rs:753:15
    |
753 |         chat::mark_old_messages_as_noticed(context, received_msgs).await?;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0412]: cannot find type `Chat` in module `chat`
    --> src/imap.rs:2040:26
     |
2040 | ) -> Result<Option<chat::Chat>> {
     |                          ^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/imex.rs:172:11
    |
172 |     chat::send_msg(context, chat_id, &mut msg).await?;
    |           ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_device_msg` in module `chat`
   --> src/imex.rs:263:15
    |
263 |         chat::add_device_msg(context, Some("bcc-self-hint"), Some(&mut msg)).await?;
    |               ^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/location.rs:296:15
    |
296 |         chat::send_msg(context, chat_id, &mut msg)
    |               ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_info_msg` in module `chat`
   --> src/location.rs:301:15
    |
301 |         chat::add_info_msg(context, chat_id, &stock_str, now).await?;
    |               ^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/location.rs:836:27
    |
836 |                     chat::send_msg(context, chat_id, &mut msg).await?;
    |                           ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_info_msg` in module `chat`
   --> src/location.rs:873:19
    |
873 |             chat::add_info_msg(context, chat_id, &stock_str, now).await?;
    |                   ^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `shall_attach_selfavatar` in module `chat`
   --> src/mimefactory.rs:411:27
    |
411 |         }) && match chat::shall_attach_selfavatar(context, msg.chat_id).await {
    |                           ^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `remove_from_chat_contacts_table` in module `chat`
   --> src/peerstate.rs:702:35
    |
702 | ...                   chat::remove_from_chat_contacts_table(context, *chat_id, contact_id)
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_to_chat_contacts_table` in module `chat`
   --> src/peerstate.rs:704:35
    |
704 | ...                   chat::add_to_chat_contacts_table(context, *chat_id, &[new_contact_id])
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_info_msg_with_cmd` in module `chat`
   --> src/peerstate.rs:721:19
    |
721 |             chat::add_info_msg_with_cmd(
    |                   ^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_to_chat_contacts_table` in module `chat`
  --> src/securejoin/bob.rs:62:23
   |
62 |                 chat::add_to_chat_contacts_table(context, group_chat_id, &[invite.contact_id()])
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_info_msg` in module `chat`
  --> src/securejoin/bob.rs:66:19
   |
66 |             chat::add_info_msg(context, group_chat_id, &msg, time()).await?;
   |                   ^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_info_msg_with_cmd` in module `chat`
  --> src/securejoin/bob.rs:81:23
   |
81 |                 chat::add_info_msg_with_cmd(
   |                       ^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_info_msg` in module `chat`
   --> src/securejoin/bob.rs:123:23
    |
123 |                 chat::add_info_msg(context, chat_id, &msg, time()).await?;
    |                       ^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
   --> src/securejoin/bob.rs:168:49
    |
168 |                 let group_chat_id = match chat::get_chat_id_by_grpid(context, grpid).await? {
    |                                                 ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_info_msg` in module `chat`
   --> src/securejoin/bob.rs:199:15
    |
199 |         chat::add_info_msg(context, chat_id, &msg, time()).await?;
    |               ^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/securejoin/bobstate.rs:409:11
    |
409 |     chat::send_msg(context, chat_id, &mut msg).await?;
    |           ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/securejoin.rs:185:11
    |
185 |     chat::send_msg(
    |           ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_contact_to_chat_ex` in module `chat`
   --> src/securejoin.rs:477:23
    |
477 |                 chat::add_contact_to_chat_ex(context, Nosync, group_chat_id, contact_id, true)
    |                       ^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_info_msg` in module `chat`
   --> src/securejoin.rs:694:11
    |
694 |     chat::add_info_msg(context, chat_id, &msg, time()).await?;
    |           ^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_device_msg` in module `chat`
    --> src/stock_str.rs:1451:15
     |
1451 |         chat::add_device_msg(self, Some("core-welcome-image"), Some(&mut msg)).await?;
     |               ^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_device_msg` in module `chat`
    --> src/stock_str.rs:1455:15
     |
1455 |         chat::add_device_msg(self, Some("core-welcome"), Some(&mut msg)).await?;
     |               ^^^^^^^^^^^^^^ not found in `chat`

error[E0412]: cannot find type `SyncId` in module `chat`
  --> src/sync.rs:58:19
   |
58 |         id: chat::SyncId,
   |                   ^^^^^^ not found in `chat`

error[E0412]: cannot find type `SyncAction` in module `chat`
  --> src/sync.rs:59:23
   |
59 |         action: chat::SyncAction,
   |                       ^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::create_broadcast_list`, `crate::chat::create_group_chat`, `crate::chat::set_muted`, `crate::chat::ChatId`, `crate::chat::ChatVisibility`, `crate::chat::MuteDuration`, `crate::chat::ProtectionStatus`
  --> src/events/chatlist_events.rs:68:19
   |
68 |             self, create_broadcast_list, create_group_chat, set_muted, ChatId, ChatVisibility,
   |                   ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^  ^^^^^^  ^^^^^^^^^^^^^^ no `ChatVisibility` in `chat`
   |                   |                      |                  |          |
   |                   |                      |                  |          no `ChatId` in `chat`
   |                   |                      |                  no `set_muted` in `chat`
   |                   |                      no `create_group_chat` in `chat`
   |                   no `create_broadcast_list` in `chat`
69 |             MuteDuration, ProtectionStatus,
   |             ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |             |
   |             no `MuteDuration` in `chat`
   |
   = help: consider importing this unresolved item through its public re-export instead:
           crate::chatlist_events::ChatId

error[E0432]: unresolved imports `crate::chat::create_group_chat`, `crate::chat::ProtectionStatus`
   --> src/blob.rs:748:29
    |
748 |     use crate::chat::{self, create_group_chat, ProtectionStatus};
    |                             ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
    |                             |
    |                             no `create_group_chat` in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/sync.rs:188:27
    |
188 |             Ok(Some(chat::send_msg(self, chat_id, &mut msg).await?))
    |                           ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
   --> src/sync.rs:292:50
    |
292 |             if let Some((chat_id, _, _)) = chat::get_chat_id_by_grpid(self, grpid).await? {
    |                                                  ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
  --> src/webxdc/maps_integration.rs:91:15
   |
91 |         chat::send_msg(context, chat_id, &mut poi_msg).await?;
   |               ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `update_msg_text_and_timestamp` in module `chat`
   --> src/webxdc.rs:308:27
    |
308 |                     chat::update_msg_text_and_timestamp(
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_info_msg_with_cmd` in module `chat`
   --> src/webxdc.rs:317:27
    |
317 |                     chat::add_info_msg_with_cmd(
    |                           ^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/webxdc.rs:560:23
    |
560 |                 chat::send_msg(self, instance.chat_id, &mut status_update).await?;
    |                       ^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::add_contact_to_chat`, `crate::chat::create_group_chat`, `crate::chat::get_chat_contacts`, `crate::chat::remove_contact_from_chat`, `crate::chat::send_text_msg`, `crate::chat::ProtectionStatus`
   --> src/chatlist.rs:474:9
    |
474 |         add_contact_to_chat, create_group_chat, get_chat_contacts, remove_contact_from_chat,
    |         ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^ no `remove_contact_from_chat` in `chat`
    |         |                    |                  |
    |         |                    |                  no `get_chat_contacts` in `chat`
    |         |                    no `create_group_chat` in `chat`
    |         no `add_contact_to_chat` in `chat`
475 |         send_text_msg, ProtectionStatus,
    |         ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
    |         |
    |         no `send_text_msg` in `chat`

error[E0425]: cannot find function `is_contact_in_chat` in module `chat`
   --> src/webxdc.rs:599:49
    |
599 |         if from_id != ContactId::SELF && !chat::is_contact_in_chat(self, chat_id, from_id).await? {
    |                                                 ^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
   --> src/receive_imf.rs:789:27
    |
789 |                     chat::get_chat_id_by_grpid(context, grpid).await?
    |                           ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `is_contact_in_chat` in module `chat`
   --> src/receive_imf.rs:868:23
    |
868 |             if !chat::is_contact_in_chat(context, group_chat_id, from_id).await? {
    |                       ^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
    --> src/receive_imf.rs:1051:27
     |
1051 |                     chat::get_chat_id_by_grpid(context, grpid).await?
     |                           ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`, `crate::chat::ProtectionStatus`
  --> src/contact.rs:25:19
   |
25 | use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
   |                   ^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                   |       |
   |                   |       no `ChatIdBlocked` in `chat`
   |                   no `ChatId` in `chat`
   |
   = note: unresolved item `crate::constants::tests::ChatId` exists but is inaccessible

error[E0425]: cannot find function `add_device_msg` in module `chat`
    --> src/receive_imf.rs:1083:23
     |
1083 |                 chat::add_device_msg(context, None, Some(&mut msg))
     |                       ^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
    --> src/receive_imf.rs:1123:31
     |
1123 |                         chat::get_chat_id_by_grpid(context, list_id).await?
     |                               ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::get_chat_contacts`, `crate::chat::send_text_msg`, `crate::chat::Chat`
    --> src/contact.rs:1930:23
     |
1930 |     use crate::chat::{get_chat_contacts, send_text_msg, Chat};
     |                       ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^ no `Chat` in `chat`
     |                       |                  |
     |                       |                  no `send_text_msg` in `chat`
     |                       no `get_chat_contacts` in `chat`
     |
     = note: unresolved item `crate::chatlist::tests::Chat` exists but is inaccessible

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
    --> src/receive_imf.rs:1189:51
     |
1189 |                     if let Some((id, ..)) = chat::get_chat_id_by_grpid(context, &listid).await? {
     |                                                   ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_broadcast_list_ex` in module `chat`
    --> src/receive_imf.rs:1194:31
     |
1194 |                         chat::create_broadcast_list_ex(context, Nosync, listid, name).await?
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::get_chat_cnt`, `crate::chat::ChatId`, `crate::chat::ProtectionStatus`
  --> src/context.rs:18:19
   |
18 | use crate::chat::{get_chat_cnt, ChatId, ProtectionStatus};
   |                   ^^^^^^^^^^^^  ^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                   |             |
   |                   |             no `ChatId` in `chat`
   |                   no `get_chat_cnt` in `chat`
   |
   = note: unresolved item `crate::contact::tests::ChatId` exists but is inaccessible
   = note: unresolved item `crate::contact::tests::ProtectionStatus` exists but is inaccessible

error[E0425]: cannot find function `add_info_msg` in module `chat`
    --> src/receive_imf.rs:1302:27
     |
1302 |                     chat::add_info_msg(
     |                           ^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_info_msg_with_cmd` in module `chat`
    --> src/receive_imf.rs:1415:15
     |
1415 |         chat::add_info_msg_with_cmd(
     |               ^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `marknoticed_chat_if_older_than` in module `chat`
    --> src/receive_imf.rs:1650:15
     |
1650 |         chat::marknoticed_chat_if_older_than(context, chat_id, sort_timestamp).await?;
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf.rs:1769:39
     |
1769 |         let mut chat_contacts = chat::get_chat_contacts(context, parent_chat.id).await?;
     |                                       ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf.rs:1811:35
     |
1811 |         let chat_contacts = chat::get_chat_contacts(context, parent_chat_id).await?;
     |                                   ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::get_chat_contacts`, `crate::chat::get_chat_msgs`, `crate::chat::send_msg`, `crate::chat::set_muted`, `crate::chat::Chat`, `crate::chat::MuteDuration`
    --> src/context.rs:1403:23
     |
1403 |     use crate::chat::{get_chat_contacts, get_chat_msgs, send_msg, set_muted, Chat, MuteDuration};
     |                       ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^  ^^^^^^^^^  ^^^^  ^^^^^^^^^^^^ no `MuteDuration` in `chat`
     |                       |                  |              |         |          |
     |                       |                  |              |         |          no `Chat` in `chat`
     |                       |                  |              |         no `set_muted` in `chat`
     |                       |                  |              no `send_msg` in `chat`
     |                       |                  no `get_chat_msgs` in `chat`
     |                       no `get_chat_contacts` in `chat`
     |
     = note: unresolved item `crate::chatlist::tests::Chat` exists but is inaccessible

error[E0425]: cannot find function `is_group_explicitly_left` in module `chat`
    --> src/receive_imf.rs:1903:24
     |
1903 |             && (!chat::is_group_explicitly_left(context, &grpid).await?
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_to_chat_contacts_table` in module `chat`
    --> src/receive_imf.rs:1937:15
     |
1937 |         chat::add_to_chat_contacts_table(context, new_chat_id, &members).await?;
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::get_chat_msgs`, `crate::chat::send_msg`
   --> src/download.rs:255:23
    |
255 |     use crate::chat::{get_chat_msgs, send_msg};
    |                       ^^^^^^^^^^^^^  ^^^^^^^^ no `send_msg` in `chat`
    |                       |
    |                       no `get_chat_msgs` in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf.rs:1999:47
     |
1999 |         HashSet::<ContactId>::from_iter(chat::get_chat_contacts(context, chat_id).await?);
     |                                               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `update_chat_contacts_table` in module `chat`
    --> src/receive_imf.rs:2205:19
     |
2205 |             chat::update_chat_contacts_table(context, chat_id, &new_members).await?;
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::send_msg`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`
  --> src/ephemeral.rs:77:19
   |
77 | use crate::chat::{send_msg, ChatId, ChatIdBlocked};
   |                   ^^^^^^^^  ^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |                   |         |
   |                   |         no `ChatId` in `chat`
   |                   no `send_msg` in `chat`
   |
   = note: unresolved item `crate::context::tests::ChatId` exists but is inaccessible
   = note: unresolved item `crate::contact::tests::ChatIdBlocked` exists but is inaccessible

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
    --> src/receive_imf.rs:2290:48
     |
2290 |     if let Some((chat_id, _, blocked)) = chat::get_chat_id_by_grpid(context, &listid).await? {
     |                                                ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_to_chat_contacts_table` in module `chat`
    --> src/receive_imf.rs:2328:15
     |
2328 |         chat::add_to_chat_contacts_table(context, chat_id, &[ContactId::SELF]).await?;
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_to_chat_contacts_table` in module `chat`
    --> src/receive_imf.rs:2521:11
     |
2521 |     chat::add_to_chat_contacts_table(context, new_chat_id, member_ids).await?;
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::create_group_chat`, `crate::chat::send_text_msg`, `crate::chat::Chat`, `crate::chat::ChatItem`, `crate::chat::ProtectionStatus`
   --> src/ephemeral.rs:699:22
    |
699 |         chat::{self, create_group_chat, send_text_msg, Chat, ChatItem, ProtectionStatus},
    |                      ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^  ^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
    |                      |                  |              |     |
    |                      |                  |              |     no `ChatItem` in `chat`
    |                      |                  |              no `Chat` in `chat`
    |                      |                  no `send_text_msg` in `chat`
    |                      no `create_group_chat` in `chat`
    |
    = note: unresolved item `crate::chatlist::tests::Chat` exists but is inaccessible
    = note: unresolved item `crate::context::tests::ProtectionStatus` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`
  --> src/imap.rs:27:25
   |
27 | use crate::chat::{self, ChatId, ChatIdBlocked};
   |                         ^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |                         |
   |                         no `ChatId` in `chat`
   |
   = note: unresolved item `crate::ephemeral::tests::ChatId` exists but is inaccessible
   = note: unresolved item `crate::ephemeral::tests::ChatIdBlocked` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::delete_and_reset_all_device_msgs`, `crate::chat::ChatId`
  --> src/imex.rs:17:25
   |
17 | use crate::chat::{self, delete_and_reset_all_device_msgs, ChatId};
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
   |                         |
   |                         no `delete_and_reset_all_device_msgs` in `chat`
   |
   = note: unresolved item `crate::imap::tests::ChatId` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::add_device_msg`, `crate::chat::delete_and_reset_all_device_msgs`
  --> src/imex/transfer.rs:51:19
   |
51 | use crate::chat::{add_device_msg, delete_and_reset_all_device_msgs};
   |                   ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `delete_and_reset_all_device_msgs` in `chat`
   |                   |
   |                   no `add_device_msg` in `chat`
   |
   = note: unresolved item `crate::sql::tests::add_device_msg` exists but is inaccessible
   = help: consider importing this unresolved item through its public re-export instead:
           crate::imex::delete_and_reset_all_device_msgs

error[E0432]: unresolved imports `crate::chat::get_chat_msgs`, `crate::chat::send_msg`, `crate::chat::ChatItem`
   --> src/imex/transfer.rs:600:23
    |
600 |     use crate::chat::{get_chat_msgs, send_msg, ChatItem};
    |                       ^^^^^^^^^^^^^  ^^^^^^^^  ^^^^^^^^ no `ChatItem` in `chat`
    |                       |              |
    |                       |              no `send_msg` in `chat`
    |                       no `get_chat_msgs` in `chat`
    |
    = note: unresolved item `crate::ephemeral::tests::send_msg` exists but is inaccessible

error[E0432]: unresolved import `crate::chat::ChatId`
  --> src/location.rs:20:25
   |
20 | use crate::chat::{self, ChatId};
   |                         ^^^^^^ no `ChatId` in `chat`
   |
   = note: unresolved item `crate::imex::tests::ChatId` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`
  --> src/message.rs:13:19
   |
13 | use crate::chat::{Chat, ChatId, ChatIdBlocked};
   |                   ^^^^  ^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |                   |     |
   |                   |     no `ChatId` in `chat`
   |                   no `Chat` in `chat`
   |
   = note: unresolved item `crate::chatlist::tests::Chat` exists but is inaccessible
   = note: unresolved item `crate::location::tests::ChatId` exists but is inaccessible
   = note: unresolved item `crate::imap::tests::ChatIdBlocked` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::add_contact_to_chat`, `crate::chat::marknoticed_chat`, `crate::chat::send_text_msg`, `crate::chat::ChatItem`, `crate::chat::ProtectionStatus`
    --> src/message.rs:2034:15
     |
2034 |         self, add_contact_to_chat, marknoticed_chat, send_text_msg, ChatItem, ProtectionStatus,
     |               ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
     |               |                    |                 |              |
     |               |                    |                 |              no `ChatItem` in `chat`
     |               |                    |                 no `send_text_msg` in `chat`
     |               |                    no `marknoticed_chat` in `chat`
     |               no `add_contact_to_chat` in `chat`
     |
     = note: unresolved item `crate::context::tests::ProtectionStatus` exists but is inaccessible

error[E0432]: unresolved import `crate::chat::Chat`
  --> src/mimefactory.rs:13:25
   |
13 | use crate::chat::{self, Chat};
   |                         ^^^^ no `Chat` in `chat`
   |
   = note: unresolved item `crate::message::tests::Chat` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::add_contact_to_chat`, `crate::chat::create_group_chat`, `crate::chat::remove_contact_from_chat`, `crate::chat::send_text_msg`, `crate::chat::ChatId`, `crate::chat::ProtectionStatus`
    --> src/mimefactory.rs:1625:9
     |
1625 |         add_contact_to_chat, create_group_chat, remove_contact_from_chat, send_text_msg, ChatId,
     |         ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
     |         |                    |                  |                         |
     |         |                    |                  |                         no `send_text_msg` in `chat`
     |         |                    |                  no `remove_contact_from_chat` in `chat`
     |         |                    no `create_group_chat` in `chat`
     |         no `add_contact_to_chat` in `chat`
1626 |         ProtectionStatus,
     |         ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
     |
     = note: unresolved item `crate::message::tests::ChatId` exists but is inaccessible
     = note: unresolved item `crate::context::tests::ProtectionStatus` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::add_info_msg`, `crate::chat::ChatId`
  --> src/mimeparser.rs:17:19
   |
17 | use crate::chat::{add_info_msg, ChatId};
   |                   ^^^^^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
   |                   |
   |                   no `add_info_msg` in `chat`
   |
   = note: unresolved item `crate::message::tests::ChatId` exists but is inaccessible

error[E0432]: unresolved import `crate::chat::Chat`
  --> src/peerstate.rs:10:25
   |
10 | use crate::chat::{self, Chat};
   |                         ^^^^ no `Chat` in `chat`
   |
   = note: unresolved item `crate::mimefactory::tests::Chat` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::get_chat_id_by_grpid`, `crate::chat::ChatIdBlocked`
  --> src/qr.rs:14:19
   |
14 | use crate::chat::{get_chat_id_by_grpid, ChatIdBlocked};
   |                   ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |                   |
   |                   no `get_chat_id_by_grpid` in `chat`
   |
   = note: unresolved item `crate::message::tests::ChatIdBlocked` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::create_group_chat`, `crate::chat::ProtectionStatus`
   --> src/qr.rs:826:23
    |
826 |     use crate::chat::{create_group_chat, ProtectionStatus};
    |                       ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
    |                       |
    |                       no `create_group_chat` in `chat`
    |
    = note: unresolved item `crate::context::tests::ProtectionStatus` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`
 --> src/qr_code_generator.rs:8:19
  |
8 | use crate::chat::{Chat, ChatId};
  |                   ^^^^  ^^^^^^ no `ChatId` in `chat`
  |                   |
  |                   no `Chat` in `chat`
  |
  = note: unresolved item `crate::peerstate::tests::Chat` exists but is inaccessible
  = note: unresolved item `crate::mimeparser::tests::ChatId` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`, `crate::chat::ProtectionStatus`
 --> src/securejoin.rs:7:25
  |
7 | use crate::chat::{self, Chat, ChatId, ChatIdBlocked, ProtectionStatus};
  |                         ^^^^  ^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
  |                         |     |       |
  |                         |     |       no `ChatIdBlocked` in `chat`
  |                         |     no `ChatId` in `chat`
  |                         no `Chat` in `chat`
  |
  = note: unresolved item `crate::qr_code_generator::tests::Chat` exists but is inaccessible
  = note: unresolved item `crate::qr_code_generator::tests::ChatId` exists but is inaccessible
  = note: unresolved item `crate::qr::tests::ChatIdBlocked` exists but is inaccessible
  = note: unresolved item `crate::context::tests::ProtectionStatus` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::remove_contact_from_chat`, `crate::chat::CantSendReason`
   --> src/securejoin.rs:760:23
    |
760 |     use crate::chat::{remove_contact_from_chat, CantSendReason};
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^ no `CantSendReason` in `chat`
    |                       |
    |                       no `remove_contact_from_chat` in `chat`

error[E0432]: unresolved imports `crate::chat::add_info_msg_with_cmd`, `crate::chat::ChatId`
  --> src/smtp.rs:13:19
   |
13 | use crate::chat::{add_info_msg_with_cmd, ChatId};
   |                   ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
   |                   |
   |                   no `add_info_msg_with_cmd` in `chat`
   |
   = note: unresolved item `crate::securejoin::tests::ChatId` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ProtectionStatus`
  --> src/stock_str.rs:14:25
   |
14 | use crate::chat::{self, Chat, ChatId, ProtectionStatus};
   |                         ^^^^  ^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                         |     |
   |                         |     no `ChatId` in `chat`
   |                         no `Chat` in `chat`
   |
   = note: unresolved item `crate::securejoin::tests::Chat` exists but is inaccessible
   = note: unresolved item `crate::securejoin::tests::ChatId` exists but is inaccessible
   = note: unresolved item `crate::securejoin::tests::ProtectionStatus` exists but is inaccessible

error[E0432]: unresolved import `crate::chat::delete_and_reset_all_device_msgs`
    --> src/stock_str.rs:1476:9
     |
1476 |     use crate::chat::delete_and_reset_all_device_msgs;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `delete_and_reset_all_device_msgs` in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`
 --> src/sync.rs:7:25
  |
7 | use crate::chat::{self, Chat, ChatId};
  |                         ^^^^  ^^^^^^ no `ChatId` in `chat`
  |                         |
  |                         no `Chat` in `chat`
  |
  = note: unresolved item `crate::stock_str::tests::Chat` exists but is inaccessible
  = note: unresolved item `crate::stock_str::tests::ChatId` exists but is inaccessible

error[E0432]: unresolved import `crate::chat::Chat`
  --> src/update_helper.rs:89:9
   |
89 |     use crate::chat::Chat;
   |         ^^^^^^^^^^^^^^^^^ no `Chat` in `chat`

error[E0432]: unresolved imports `crate::chat::send_msg`, `crate::chat::ChatId`
 --> src/webxdc/integration.rs:1:19
  |
1 | use crate::chat::{send_msg, ChatId};
  |                   ^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
  |                   |
  |                   no `send_msg` in `chat`
  |
  = note: unresolved item `crate::ephemeral::tests::send_msg` exists but is inaccessible
  = note: unresolved item `crate::update_helper::tests::ChatId` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::create_group_chat`, `crate::chat::ChatId`, `crate::chat::ProtectionStatus`
   --> src/webxdc/maps_integration.rs:170:23
    |
170 |     use crate::chat::{create_group_chat, ChatId, ProtectionStatus};
    |                       ^^^^^^^^^^^^^^^^^  ^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
    |                       |                  |
    |                       |                  no `ChatId` in `chat`
    |                       no `create_group_chat` in `chat`
    |
    = help: consider importing this unresolved item through its public re-export instead:
            crate::webxdc::maps_integration::ChatId
    = note: unresolved item `crate::stock_str::tests::ProtectionStatus` exists but is inaccessible

error[E0432]: unresolved import `crate::chat::Chat`
  --> src/webxdc.rs:33:25
   |
33 | use crate::chat::{self, Chat};
   |                         ^^^^ no `Chat` in `chat`
   |
   = note: unresolved item `crate::sync::tests::Chat` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::add_contact_to_chat`, `crate::chat::create_broadcast_list`, `crate::chat::create_group_chat`, `crate::chat::forward_msgs`, `crate::chat::remove_contact_from_chat`, `crate::chat::resend_msgs`, `crate::chat::send_msg`, `crate::chat::send_text_msg`, `crate::chat::ChatId`, `crate::chat::ProtectionStatus`
   --> src/webxdc.rs:870:9
    |
870 |         add_contact_to_chat, create_broadcast_list, create_group_chat, forward_msgs,
    |         ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^ no `forward_msgs` in `chat`
    |         |                    |                      |
    |         |                    |                      no `create_group_chat` in `chat`
    |         |                    no `create_broadcast_list` in `chat`
    |         no `add_contact_to_chat` in `chat`
871 |         remove_contact_from_chat, resend_msgs, send_msg, send_text_msg, ChatId, ProtectionStatus,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
    |         |                         |            |         |              |
    |         |                         |            |         |              no `ChatId` in `chat`
    |         |                         |            |         no `send_text_msg` in `chat`
    |         |                         |            no `send_msg` in `chat`
    |         |                         no `resend_msgs` in `chat`
    |         no `remove_contact_from_chat` in `chat`
    |
    = note: unresolved item `crate::ephemeral::tests::send_msg` exists but is inaccessible
    = note: unresolved item `crate::update_helper::tests::ChatId` exists but is inaccessible
    = note: unresolved item `crate::stock_str::tests::ProtectionStatus` exists but is inaccessible

error[E0432]: unresolved import `crate::chat::forward_msgs`
   --> src/html.rs:266:9
    |
266 |     use crate::chat::forward_msgs;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ no `forward_msgs` in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`, `crate::chat::ProtectionStatus`
  --> src/receive_imf.rs:17:25
   |
17 | use crate::chat::{self, Chat, ChatId, ChatIdBlocked, ProtectionStatus};
   |                         ^^^^  ^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                         |     |       |
   |                         |     |       no `ChatIdBlocked` in `chat`
   |                         |     no `ChatId` in `chat`
   |                         no `Chat` in `chat`
   |
   = note: unresolved item `crate::summary::tests::Chat` exists but is inaccessible
   = note: unresolved item `crate::update_helper::tests::ChatId` exists but is inaccessible
   = note: unresolved item `crate::securejoin::tests::ChatIdBlocked` exists but is inaccessible
   = note: unresolved item `crate::stock_str::tests::ProtectionStatus` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::add_contact_to_chat`, `crate::chat::add_to_chat_contacts_table`, `crate::chat::create_group_chat`, `crate::chat::get_chat_contacts`, `crate::chat::get_chat_msgs`, `crate::chat::is_contact_in_chat`, `crate::chat::remove_contact_from_chat`, `crate::chat::send_text_msg`, `crate::chat::ChatItem`, `crate::chat::ChatVisibility`
 --> src/receive_imf/tests.rs:7:5
  |
7 |     add_contact_to_chat, add_to_chat_contacts_table, create_group_chat, get_chat_contacts,
  |     ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^ no `get_chat_contacts` in `chat`
  |     |                    |                           |
  |     |                    |                           no `create_group_chat` in `chat`
  |     |                    no `add_to_chat_contacts_table` in `chat`
  |     no `add_contact_to_chat` in `chat`
8 |     get_chat_msgs, is_contact_in_chat, remove_contact_from_chat, send_text_msg, ChatItem,
  |     ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^ no `ChatItem` in `chat`
  |     |              |                   |                         |
  |     |              |                   |                         no `send_text_msg` in `chat`
  |     |              |                   no `remove_contact_from_chat` in `chat`
  |     |              no `is_contact_in_chat` in `chat`
  |     no `get_chat_msgs` in `chat`
9 |     ChatVisibility,
  |     ^^^^^^^^^^^^^^ no `ChatVisibility` in `chat`
  |
  = note: unresolved item `crate::chatlist::tests::ChatVisibility` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::add_device_msg`, `crate::chat::add_device_msg_with_importance`
  --> src/tools.rs:36:19
   |
36 | use crate::chat::{add_device_msg, add_device_msg_with_importance};
   |                   ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `add_device_msg_with_importance` in `chat`
   |                   |
   |                   no `add_device_msg` in `chat`
   |
   = note: unresolved item `crate::imex::transfer::tests::add_device_msg` exists but is inaccessible
   = note: unresolved item `crate::quota::tests::add_device_msg_with_importance` exists but is inaccessible

error[E0432]: unresolved import `crate::chat::send_msg`
   --> src/peer_channels.rs:456:9
    |
456 |         chat::send_msg,
    |         ^^^^^^^^^^^^^^ no `send_msg` in `chat`
    |
    = help: consider importing this unresolved item through its public re-export instead:
            crate::peer_channels::send_msg

error[E0432]: unresolved imports `crate::chat::send_msg`, `crate::chat::Chat`, `crate::chat::ChatId`
  --> src/reaction.rs:23:19
   |
23 | use crate::chat::{send_msg, Chat, ChatId};
   |                   ^^^^^^^^  ^^^^  ^^^^^^ no `ChatId` in `chat`
   |                   |         |
   |                   |         no `Chat` in `chat`
   |                   no `send_msg` in `chat`
   |
   = note: unresolved item `crate::ephemeral::tests::send_msg` exists but is inaccessible
   = note: unresolved item `crate::receive_imf::tests::Chat` exists but is inaccessible
   = note: unresolved item `crate::receive_imf::tests::ChatId` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::forward_msgs`, `crate::chat::get_chat_msgs`, `crate::chat::send_text_msg`
   --> src/reaction.rs:388:23
    |
388 |     use crate::chat::{forward_msgs, get_chat_msgs, send_text_msg};
    |                       ^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^ no `send_text_msg` in `chat`
    |                       |             |
    |                       |             no `get_chat_msgs` in `chat`
    |                       no `forward_msgs` in `chat`

error[E0432]: unresolved imports `crate::chat::add_to_chat_contacts_table`, `crate::chat::create_group_chat`, `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`, `crate::chat::MessageListOptions`, `crate::chat::ProtectionStatus`
  --> src/test_utils.rs:25:11
   |
25 |     self, add_to_chat_contacts_table, create_group_chat, Chat, ChatId, ChatIdBlocked,
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^  ^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |           |                           |                  |     |
   |           |                           |                  |     no `ChatId` in `chat`
   |           |                           |                  no `Chat` in `chat`
   |           |                           no `create_group_chat` in `chat`
   |           no `add_to_chat_contacts_table` in `chat`
26 |     MessageListOptions, ProtectionStatus,
   |     ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |     |
   |     no `MessageListOptions` in `chat`
   |
   = note: unresolved item `crate::reaction::tests::Chat` exists but is inaccessible
   = note: unresolved item `crate::reaction::tests::ChatId` exists but is inaccessible
   = note: unresolved item `crate::receive_imf::tests::ChatIdBlocked` exists but is inaccessible
   = note: unresolved item `crate::receive_imf::tests::ProtectionStatus` exists but is inaccessible

error[E0432]: unresolved import `crate::chat::ChatId`
 --> src/tests/aeap.rs:6:5
  |
6 | use crate::chat::ChatId;
  |     ^^^^^^^^^^^^^^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved imports `crate::chat::add_contact_to_chat`, `crate::chat::Chat`, `crate::chat::ProtectionStatus`
 --> src/tests/verified_chats.rs:4:25
  |
4 | use crate::chat::{self, add_contact_to_chat, Chat, ProtectionStatus};
  |                         ^^^^^^^^^^^^^^^^^^^  ^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
  |                         |                    |
  |                         |                    no `Chat` in `chat`
  |                         no `add_contact_to_chat` in `chat`
  |
  = note: unresolved item `crate::test_utils::tests::Chat` exists but is inaccessible
  = note: unresolved item `crate::test_utils::tests::ProtectionStatus` exists but is inaccessible

error[E0432]: unresolved import `chat::ChatItem`
  --> src/test_utils.rs:15:5
   |
15 | use chat::ChatItem;
   |     ^^^^^^^^^^^^^^ no `ChatItem` in `chat`

error[E0433]: failed to resolve: could not find `ProtectionStatus` in `chat`
   --> src/events/chatlist_events.rs:143:26
    |
143 |             crate::chat::ProtectionStatus::Unprotected,
    |                          ^^^^^^^^^^^^^^^^ could not find `ProtectionStatus` in `chat`

error[E0433]: failed to resolve: could not find `ProtectionStatus` in `chat`
    --> src/mimefactory.rs:1951:47
     |
1951 |             chat::create_group_chat(&t, chat::ProtectionStatus::Unprotected, "groupname") // TODO encodings, ä
     |                                               ^^^^^^^^^^^^^^^^ could not find `ProtectionStatus` in `chat`

error[E0433]: failed to resolve: could not find `ChatItem` in `chat`
    --> src/securejoin.rs:1339:30
     |
1339 |                 if let chat::ChatItem::Message { msg_id } = item {
     |                              ^^^^^^^^ could not find `ChatItem` in `chat`

error[E0433]: failed to resolve: could not find `SyncId` in `chat`
   --> src/sync.rs:351:27
    |
351 |                 id: chat::SyncId::ContactAddr("bob@example.net".to_string()),
    |                           ^^^^^^ could not find `SyncId` in `chat`

error[E0433]: failed to resolve: could not find `SyncAction` in `chat`
   --> src/sync.rs:352:31
    |
352 |                 action: chat::SyncAction::SetMuted(chat::MuteDuration::Until(
    |                               ^^^^^^^^^^ could not find `SyncAction` in `chat`

error[E0433]: failed to resolve: could not find `MuteDuration` in `chat`
   --> src/sync.rs:352:58
    |
352 |                 action: chat::SyncAction::SetMuted(chat::MuteDuration::Until(
    |                                                          ^^^^^^^^^^^^ could not find `MuteDuration` in `chat`

error[E0433]: failed to resolve: could not find `SyncId` in `chat`
   --> src/sync.rs:451:19
    |
451 |             chat::SyncId::ContactAddr("bob@example.net".to_string())
    |                   ^^^^^^ could not find `SyncId` in `chat`

error[E0433]: failed to resolve: could not find `SyncAction` in `chat`
   --> src/sync.rs:455:19
    |
455 |             chat::SyncAction::SetMuted(chat::MuteDuration::Until(
    |                   ^^^^^^^^^^ could not find `SyncAction` in `chat`

error[E0433]: failed to resolve: could not find `MuteDuration` in `chat`
   --> src/sync.rs:455:46
    |
455 |             chat::SyncAction::SetMuted(chat::MuteDuration::Until(
    |                                              ^^^^^^^^^^^^ could not find `MuteDuration` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
   --> src/receive_imf/tests.rs:161:22
    |
161 |     let chat = chat::Chat::load_from_db(&t, chat_id).await.unwrap();
    |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
   --> src/receive_imf/tests.rs:164:22
    |
164 |     let chat = chat::Chat::load_from_db(&t, chat_id).await.unwrap();
    |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
   --> src/receive_imf/tests.rs:180:22
    |
180 |     let chat = chat::Chat::load_from_db(&t, chat_id).await.unwrap();
    |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
   --> src/receive_imf/tests.rs:196:22
    |
196 |     let chat = chat::Chat::load_from_db(&t, chat_id).await.unwrap();
    |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
   --> src/receive_imf/tests.rs:199:22
    |
199 |     let chat = chat::Chat::load_from_db(&t, chat_id).await.unwrap();
    |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
   --> src/receive_imf/tests.rs:874:22
    |
874 |     let chat = chat::Chat::load_from_db(&t.ctx, chat_id).await?;
    |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
   --> src/receive_imf/tests.rs:887:22
    |
887 |     let chat = chat::Chat::load_from_db(&t.ctx, chat_id).await?;
    |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
   --> src/receive_imf/tests.rs:971:22
    |
971 |     let chat = chat::Chat::load_from_db(&t.ctx, chat_id).await?;
    |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:1135:22
     |
1135 |     let chat = chat::Chat::load_from_db(&t.ctx, chat_id).await.unwrap();
     |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:2845:22
     |
2845 |     let chat = chat::Chat::load_from_db(&t, msg.chat_id).await?;
     |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:3090:29
     |
3090 |     let alice1_chat = chat::Chat::load_from_db(&alice1, alice1_msg.chat_id).await?;
     |                             ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:3095:29
     |
3095 |     let alice2_chat = chat::Chat::load_from_db(&alice2, alice2_msg.chat_id).await?;
     |                             ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:3100:27
     |
3100 |     let bob1_chat = chat::Chat::load_from_db(&bob1, bob1_msg.chat_id).await?;
     |                           ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:3105:27
     |
3105 |     let bob2_chat = chat::Chat::load_from_db(&bob2, bob2_msg.chat_id).await?;
     |                           ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:3114:29
     |
3114 |     let alice2_chat = chat::Chat::load_from_db(&alice2, alice2_msg.chat_id).await?;
     |                             ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:3199:22
     |
3199 |     let chat = chat::Chat::load_from_db(&t, msg.chat_id).await?;
     |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:3211:22
     |
3211 |     let chat = chat::Chat::load_from_db(&t, msg.chat_id).await?;
     |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `ProtectionStatus` in `chat`
   --> src/tests/aeap.rs:149:45
    |
149 |         chat::create_group_chat(&bob, chat::ProtectionStatus::Unprotected, "Group 0")
    |                                             ^^^^^^^^^^^^^^^^ could not find `ProtectionStatus` in `chat`

error[E0433]: failed to resolve: could not find `ProtectionStatus` in `chat`
   --> src/tests/aeap.rs:152:45
    |
152 |         chat::create_group_chat(&bob, chat::ProtectionStatus::Unprotected, "Group 1")
    |                                             ^^^^^^^^^^^^^^^^ could not find `ProtectionStatus` in `chat`

error[E0433]: failed to resolve: could not find `ProtectionStatus` in `chat`
   --> src/tests/aeap.rs:158:49
    |
158 |             chat::create_group_chat(&bob, chat::ProtectionStatus::Protected, "Group 2")
    |                                                 ^^^^^^^^^^^^^^^^ could not find `ProtectionStatus` in `chat`

error[E0433]: failed to resolve: could not find `ProtectionStatus` in `chat`
   --> src/tests/aeap.rs:163:49
    |
163 |             chat::create_group_chat(&bob, chat::ProtectionStatus::Protected, "Group 3")
    |                                                 ^^^^^^^^^^^^^^^^ could not find `ProtectionStatus` in `chat`

error[E0433]: failed to resolve: could not find `ChatItem` in `chat`
   --> src/tests/aeap.rs:350:31
    |
350 |     let msg_id = if let chat::ChatItem::Message { msg_id } = msgs.last()? {
    |                               ^^^^^^^^ could not find `ChatItem` in `chat`

error[E0433]: failed to resolve: could not find `ProtectionStatus` in `chat`
   --> src/tests/aeap.rs:370:45
    |
370 |         chat::create_group_chat(&bob, chat::ProtectionStatus::Unprotected, "Group 0").await?;
    |                                             ^^^^^^^^^^^^^^^^ could not find `ProtectionStatus` in `chat`

error[E0425]: cannot find function `marknoticed_chat` in module `chat`
   --> src/events/chatlist_events.rs:220:15
    |
220 |         chat::marknoticed_chat(&bob, DC_CHAT_ID_ARCHIVED_LINK).await?;
    |               ^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `set_muted` in module `chat`
   --> src/events/chatlist_events.rs:331:15
    |
331 |         chat::set_muted(&alice, chat, MuteDuration::Forever).await?;
    |               ^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `set_muted` in module `chat`
   --> src/events/chatlist_events.rs:335:15
    |
335 |         chat::set_muted(&alice, chat, MuteDuration::NotMuted).await?;
    |               ^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `set_muted` in module `chat`
   --> src/events/chatlist_events.rs:354:15
    |
354 |         chat::set_muted(&alice, chat, mute_duration).await?;
    |               ^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `set_chat_name` in module `chat`
   --> src/events/chatlist_events.rs:370:15
    |
370 |         chat::set_chat_name(&alice, chat, "New Name").await?;
    |               ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `set_chat_profile_image` in module `chat`
   --> src/events/chatlist_events.rs:387:15
    |
387 |         chat::set_chat_profile_image(&alice, chat, file.to_str().unwrap()).await?;
    |               ^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `set_chat_name` in module `chat`
   --> src/events/chatlist_events.rs:409:15
    |
409 |         chat::set_chat_name(&alice, chat, "New Name").await?;
    |               ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
   --> src/events/chatlist_events.rs:461:29
    |
461 |         let message = chat::send_text_msg(&alice, chat, "Hello World".to_owned()).await?;
    |                             ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `marknoticed_chat` in module `chat`
   --> src/events/chatlist_events.rs:489:15
    |
489 |         chat::marknoticed_chat(&bob, chat_id_for_bob).await?;
    |               ^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
   --> src/events/chatlist_events.rs:528:23
    |
528 |         let _ = chat::send_text_msg(&alice, chat, "Hello".to_owned()).await?;
    |                       ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
   --> src/events/chatlist_events.rs:565:19
    |
565 |             chat::create_group_chat(&alice.ctx, ProtectionStatus::Protected, "the chat").await?;
    |                   ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
   --> src/events/chatlist_events.rs:614:28
    |
614 |         let msg_id = chat::send_text_msg(&alice, chat, "Hello".to_owned()).await?;
    |                            ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `resend_msgs` in module `chat`
   --> src/events/chatlist_events.rs:621:15
    |
621 |         chat::resend_msgs(&alice, &[msg_id]).await?;
    |               ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
   --> src/events/chatlist_events.rs:633:28
    |
633 |         let msg_id = chat::send_text_msg(&alice, chat, "Hello".to_owned()).await?;
    |                            ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
    --> src/blob.rs:1398:33
     |
1398 |         let prepared_id = chat::prepare_msg(&t, chat_id, &mut msg).await?;
     |                                 ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
    --> src/blob.rs:1418:23
     |
1418 |         assert!(chat::prepare_msg(&t, chat_id, &mut msg).await.is_err());
     |                       ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `sync` in module `chat`
   --> src/contact.rs:650:19
    |
650 |             chat::sync(
    |                   ^^^^ not found in `chat`
    |
help: consider importing one of these items
    |
3   + use crate::test_utils::sync;
    |
3   + use libc::sync;
    |
help: if you import `sync`, refer to it directly
    |
650 -             chat::sync(
650 +             sync(
    |

error[E0425]: cannot find function `sync` in module `chat`
    --> src/contact.rs:1605:19
     |
1605 |             chat::sync(
     |                   ^^^^ not found in `chat`
     |
help: consider importing one of these items
     |
3    + use crate::test_utils::sync;
     |
3    + use libc::sync;
     |
help: if you import `sync`, refer to it directly
     |
1605 -             chat::sync(
1605 +             sync(
     |

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/contact.rs:2877:30
     |
2877 |         let contacts = chat::get_chat_contacts(&bob, chat.id).await?;
     |                              ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/contact.rs:2910:30
     |
2910 |         let contacts = chat::get_chat_contacts(&bob, chat.id).await?;
     |                              ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
   --> src/ephemeral.rs:926:15
    |
926 |         chat::prepare_msg(&alice.ctx, chat_alice, &mut msg).await?;
    |               ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/ephemeral.rs:927:15
    |
927 |         chat::send_msg(&alice.ctx, chat_alice, &mut msg).await?;
    |               ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
   --> src/ephemeral.rs:953:15
    |
953 |         chat::prepare_msg(&alice.ctx, chat_alice, &mut msg).await?;
    |               ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/ephemeral.rs:954:15
    |
954 |         chat::send_msg(&alice.ctx, chat_alice, &mut msg).await?;
    |               ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
   --> src/ephemeral.rs:960:15
    |
960 |         chat::prepare_msg(&alice.ctx, chat_alice, &mut msg).await?;
    |               ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/ephemeral.rs:961:15
    |
961 |         chat::send_msg(&alice.ctx, chat_alice, &mut msg).await?;
    |               ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/ephemeral.rs:1132:32
     |
1132 |         let chat_items = chat::get_chat_msgs(t, chat.id).await.unwrap();
     |                                ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg_sync` in module `chat`
    --> src/ephemeral.rs:1361:23
     |
1361 |         assert!(chat::send_msg_sync(&alice, chat.id, &mut msg)
     |                       ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
    --> src/message.rs:2072:28
     |
2072 |         let msg_id = chat::prepare_msg(ctx, chat.id, &mut msg).await.unwrap();
     |                            ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
    --> src/message.rs:2088:23
     |
2088 |         assert!(chat::prepare_msg(ctx, chat.id, &mut msg).await.is_ok());
     |                       ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/message.rs:2179:31
     |
2179 |         let chatitems = chat::get_chat_msgs(&t, device_chat_id).await.unwrap();
     |                               ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
    --> src/message.rs:2213:28
     |
2213 |         let msg_id = chat::prepare_msg(ctx, chat.id, &mut msg).await.unwrap();
     |                            ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
    --> src/message.rs:2258:15
     |
2258 |         chat::send_msg(alice, alice_group, &mut msg).await?;
     |               ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/message.rs:2298:33
     |
2298 |         let contact_id = *chat::get_chat_contacts(&alice, chat.id)
     |                                 ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
    --> src/message.rs:2314:15
     |
2314 |         chat::send_msg(&alice, chat.id, &mut msg).await.unwrap();
     |               ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/message.rs:2319:33
     |
2319 |         let contact_id = *chat::get_chat_contacts(&bob, chat.id)
     |                                 ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/message.rs:2366:26
     |
2366 |         let msgs = chat::get_chat_msgs(&bob, bob_chat_id).await?;
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/message.rs:2377:26
     |
2377 |         let msgs = chat::get_chat_msgs(&bob, bob_chat_id).await?;
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
    --> src/message.rs:2450:28
     |
2450 |         let msg_id = chat::send_msg(&alice, alice_chat.id, &mut alice_msg).await?;
     |                            ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg_sync` in module `chat`
    --> src/message.rs:2628:23
     |
2628 |         assert!(chat::send_msg_sync(&alice, chat.id, &mut msg)
     |                       ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
    --> src/mimefactory.rs:1951:19
     |
1951 |             chat::create_group_chat(&t, chat::ProtectionStatus::Unprotected, "groupname") // TODO encodings, ä
     |                   ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_contact_to_chat` in module `chat`
    --> src/mimefactory.rs:1955:15
     |
1955 |         chat::add_contact_to_chat(&t, group_id, bob).await?;
     |               ^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `forward_msgs` in module `chat`
    --> src/mimefactory.rs:1996:15
     |
1996 |         chat::forward_msgs(&t, &[message_from_bob.id], group_id).await?;
     |               ^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
    --> src/mimefactory.rs:2018:15
     |
2018 |         chat::prepare_msg(&t, chat_id, &mut new_msg).await.unwrap();
     |               ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
    --> src/mimefactory.rs:2126:15
     |
2126 |         chat::prepare_msg(context, chat_id, &mut new_msg)
     |               ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
    --> src/mimeparser.rs:3644:15
     |
3644 |         chat::send_text_msg(&bob, bob_chat_id, "hi!".to_string()).await?;
     |               ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
    --> src/securejoin.rs:1200:19
     |
1200 |             chat::create_group_chat(&alice.ctx, ProtectionStatus::Protected, "the chat").await?;
     |                   ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/securejoin.rs:1338:31
     |
1338 |             for item in chat::get_chat_msgs(&bob.ctx, bob_chatid).await.unwrap() {
     |                               ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/stock_str.rs:1626:45
     |
1626 |         let device_chat_msgs_before = chat::get_chat_msgs(&t, device_chat_id).await.unwrap().len();
     |                                             ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/stock_str.rs:1629:19
     |
1629 |             chat::get_chat_msgs(&t, device_chat_id).await.unwrap().len(),
     |                   ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
   --> src/sync.rs:566:26
    |
566 |         let msgs = chat::get_chat_msgs(&alice, chat_id).await?;
    |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/html.rs:532:15
    |
532 |         chat::send_msg(&alice, chat_id, &mut msg).await.unwrap();
    |               ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
   --> src/receive_imf/tests.rs:167:22
    |
167 |     assert_eq!(chat::get_chat_contacts(&t, chat_id).await.unwrap().len(), 1);
    |                      ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
   --> src/receive_imf/tests.rs:168:22
    |
168 |     assert_eq!(chat::get_chat_msgs(&t, chat_id).await.unwrap().len(), 1);
    |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
   --> src/receive_imf/tests.rs:173:22
    |
173 |     assert_eq!(chat::get_chat_msgs(&t, chat_id).await.unwrap().len(), 2);
    |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
   --> src/receive_imf/tests.rs:183:22
    |
183 |     assert_eq!(chat::get_chat_contacts(&t, chat_id).await.unwrap().len(), 3);
    |                      ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
   --> src/receive_imf/tests.rs:202:22
    |
202 |     assert_eq!(chat::get_chat_contacts(&t, chat_id).await.unwrap().len(), 3);
    |                      ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
   --> src/receive_imf/tests.rs:220:26
    |
220 |     let group_id = chat::create_group_chat(&t, ProtectionStatus::Unprotected, "foo").await?;
    |                          ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_contact_to_chat` in module `chat`
   --> src/receive_imf/tests.rs:221:11
    |
221 |     chat::add_contact_to_chat(&t, group_id, bob_id).await?;
    |           ^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
   --> src/receive_imf/tests.rs:222:22
    |
222 |     assert_eq!(chat::get_chat_msgs(&t, group_id).await.unwrap().len(), 0);
    |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
   --> src/receive_imf/tests.rs:303:22
    |
303 |     assert_eq!(chat::get_chat_msgs(&t, group_id).await?.len(), 1);
    |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `resend_msgs` in module `chat`
   --> src/receive_imf/tests.rs:747:11
    |
747 |     chat::resend_msgs(&t, &[msg_id]).await?;
    |           ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
   --> src/receive_imf/tests.rs:803:22
    |
803 |     let msgs = chat::get_chat_msgs(&t, msg.chat_id).await?;
    |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
   --> src/receive_imf/tests.rs:883:22
    |
883 |     assert_eq!(chat::get_chat_contacts(&t.ctx, chat_id).await?.len(), 1);
    |                      ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
   --> src/receive_imf/tests.rs:998:15
    |
998 |         chat::get_chat_id_by_grpid(&t, "delta.codespeak.net")
    |               ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:1056:22
     |
1056 |     let msgs = chat::get_chat_msgs(&t.ctx, chat_id).await.unwrap();
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:1086:22
     |
1086 |     let msgs = chat::get_chat_msgs(&t, msg.chat_id).await.unwrap();
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `marknoticed_chat` in module `chat`
    --> src/receive_imf/tests.rs:1100:11
     |
1100 |     chat::marknoticed_chat(&t.ctx, chat_id).await.unwrap();
     |           ^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:1104:22
     |
1104 |     let msgs = chat::get_chat_msgs(&t.ctx, chat_id).await.unwrap();
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:1111:22
     |
1111 |     let msgs = chat::get_chat_msgs(&t.ctx, chat_id).await.unwrap();
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:1133:22
     |
1133 |     let msgs = chat::get_chat_msgs(&t.ctx, chat_id).await.unwrap();
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:1189:22
     |
1189 |     assert_eq!(chat::get_chat_msgs(&t, chat.id).await.unwrap().len(), 1);
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:1210:22
     |
1210 |     assert_eq!(chat::get_chat_msgs(&t, chat.id).await.unwrap().len(), 2);
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:1654:22
     |
1654 |     let msgs = chat::get_chat_msgs(&t, msg.chat_id).await.unwrap();
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
    --> src/receive_imf/tests.rs:1781:11
     |
1781 |     chat::send_text_msg(&alice, chat_alice.id, "hi!".to_string()).await?;
     |           ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
    --> src/receive_imf/tests.rs:1800:11
     |
1800 |     chat::send_text_msg(&alice, chat_alice.id, "hi!".to_string()).await?;
     |           ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
    --> src/receive_imf/tests.rs:1812:11
     |
1812 |     chat::send_text_msg(&bob, chat_bob.id, "ho!".to_string()).await?;
     |           ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:2020:22
     |
2020 |     let msgs = chat::get_chat_msgs(&t.ctx, chat_id).await.unwrap();
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_contact_to_chat` in module `chat`
    --> src/receive_imf/tests.rs:2644:11
     |
2644 |     chat::add_contact_to_chat(&alice, alice_first_msg.chat_id, alice_fiona_contact_id).await?;
     |           ^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_contact_to_chat` in module `chat`
    --> src/receive_imf/tests.rs:2648:11
     |
2648 |     chat::add_contact_to_chat(&alice, alice_second_msg.chat_id, alice_fiona_contact_id).await?;
     |           ^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
    --> src/receive_imf/tests.rs:3128:26
     |
3128 |     let group_id = chat::create_group_chat(&bob, ProtectionStatus::Unprotected, "Group").await?;
     |                          ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_to_chat_contacts_table` in module `chat`
    --> src/receive_imf/tests.rs:3129:11
     |
3129 |     chat::add_to_chat_contacts_table(
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `forward_msgs` in module `chat`
    --> src/receive_imf/tests.rs:3232:11
     |
3232 |     chat::forward_msgs(bob, &[msg.id], bob_chat_id).await?;
     |           ^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
    --> src/receive_imf/tests.rs:3246:26
     |
3246 |     let group_id = chat::create_group_chat(&bob, ProtectionStatus::Unprotected, "Group").await?;
     |                          ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_to_chat_contacts_table` in module `chat`
    --> src/receive_imf/tests.rs:3247:11
     |
3247 |     chat::add_to_chat_contacts_table(
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:3346:22
     |
3346 |     let msgs = chat::get_chat_msgs(&alice, rcvd.chat_id).await?;
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
    --> src/receive_imf/tests.rs:3558:33
     |
3558 |     let (chat_id, _, _) = chat::get_chat_id_by_grpid(&t, "gggroupiddd")
     |                                 ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:3561:42
     |
3561 |     let mut actual_chat_contacts = chat::get_chat_contacts(&t, chat_id).await?;
     |                                          ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:3633:15
     |
3633 |         chat::get_chat_contacts(&alice, group_chat.id).await?.len(),
     |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:3655:15
     |
3655 |         chat::get_chat_contacts(&alice, group_chat.id).await?.len(),
     |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `is_contact_in_chat` in module `chat`
    --> src/receive_imf/tests.rs:3661:19
     |
3661 |     assert!(chat::is_contact_in_chat(&alice, group_chat.id, fiona).await?);
     |                   ^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:3960:15
     |
3960 |         chat::get_chat_contacts(&alice, group_chat.id).await?.len(),
     |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:3983:15
     |
3983 |         chat::get_chat_contacts(&alice, group_chat.id).await?.len(),
     |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:4030:15
     |
4030 |         chat::get_chat_contacts(&alice, group_chat.id).await?.len(),
     |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:4275:15
     |
4275 |         chat::get_chat_contacts(&alice, alice_grp.id).await?.len(),
     |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:4289:15
     |
4289 |         chat::get_chat_contacts(&alice, alice_grp.id).await?.len(),
     |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:4320:15
     |
4320 |         chat::get_chat_contacts(&alice, alice_grp.id).await?.len(),
     |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
    --> src/receive_imf/tests.rs:4447:11
     |
4447 |     chat::send_text_msg(&bob, bob_chat_id, "hi!".to_string()).await?;
     |           ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/tools.rs:1062:26
     |
1062 |         let msgs = chat::get_chat_msgs(&t, device_chat_id).await.unwrap();
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/tools.rs:1067:26
     |
1067 |         let msgs = chat::get_chat_msgs(&t, device_chat_id).await.unwrap();
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/tools.rs:1076:26
     |
1076 |         let msgs = chat::get_chat_msgs(&t, device_chat_id).await.unwrap();
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/tools.rs:1084:26
     |
1084 |         let msgs = chat::get_chat_msgs(&t, device_chat_id).await.unwrap();
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/tools.rs:1114:26
     |
1114 |         let msgs = chat::get_chat_msgs(&t, device_chat_id).await.unwrap();
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/tools.rs:1134:26
     |
1134 |         let msgs = chat::get_chat_msgs(&t, device_chat_id).await.unwrap();
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/tools.rs:1149:26
     |
1149 |         let msgs = chat::get_chat_msgs(&t, device_chat_id).await.unwrap();
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
   --> src/test_utils.rs:497:31
    |
497 |         let chat_msgs = chat::get_chat_msgs(self, received.chat_id).await.unwrap();
    |                               ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
   --> src/test_utils.rs:532:26
    |
532 |         let msgs = chat::get_chat_msgs(&self.ctx, chat_id).await.unwrap();
    |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/test_utils.rs:647:28
    |
647 |         let msg_id = chat::send_msg(self, chat_id, msg).await.unwrap();
    |                            ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs_ex` in module `chat`
   --> src/test_utils.rs:685:29
    |
685 |         let msglist = chat::get_chat_msgs_ex(
    |                             ^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
   --> src/test_utils.rs:706:29
    |
706 |         let members = chat::get_chat_contacts(self, sel_chat.id).await.unwrap();
    |                             ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/test_utils.rs:1058:22
     |
1058 |     let msgs = chat::get_chat_msgs(&t.ctx, chat_id).await.unwrap();
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
   --> src/tests/aeap.rs:149:15
    |
149 |         chat::create_group_chat(&bob, chat::ProtectionStatus::Unprotected, "Group 0")
    |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
   --> src/tests/aeap.rs:152:15
    |
152 |         chat::create_group_chat(&bob, chat::ProtectionStatus::Unprotected, "Group 1")
    |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
   --> src/tests/aeap.rs:158:19
    |
158 |             chat::create_group_chat(&bob, chat::ProtectionStatus::Protected, "Group 2")
    |                   ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
   --> src/tests/aeap.rs:163:19
    |
163 |             chat::create_group_chat(&bob, chat::ProtectionStatus::Protected, "Group 3")
    |                   ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1663:9
     |
1663 |         curr_rfc724_mid,
     |         ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0425]: cannot find function `add_contact_to_chat` in module `chat`
   --> src/tests/aeap.rs:173:15
    |
173 |         chat::add_contact_to_chat(&bob, *group, old_contact)
    |               ^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1646:8
     |
1646 |     if msgs.iter().any(
     |        ^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1604:16
     |
1604 |       let msgs = context
     |  ________________^
1605 | |         .sql
1606 | |         .query_map(
1607 | |             &format!(
...    |
1643 | |         )
1644 | |         .await?;
     | |______________^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1604:16
     |
1604 |       let msgs = context
     |  ________________^
1605 | |         .sql
1606 | |         .query_map(
1607 | |             &format!(
...    |
1642 | |             |rows| rows.collect::<Result<Vec<_>, _>>().map_err(Into::into),
1643 | |         )
     | |_________^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1642:20
     |
1642 |             |rows| rows.collect::<Result<Vec<_>, _>>().map_err(Into::into),
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0425]: cannot find function `add_contact_to_chat` in module `chat`
   --> src/tests/aeap.rs:184:15
    |
184 |         chat::add_contact_to_chat(&bob, groups[2], already_new_contact)
    |               ^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1666:10
     |
1666 |     ) in msgs
     |          ^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1623:33
     |
1623 |                 let id: MsgId = row.get("id")?;
     |                                 ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1624:39
     |
1624 |                 let chat_id: ChatId = row.get("chat_id")?;
     |                                       ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1625:43
     |
1625 |                 let state: MessageState = row.get("state")?;
     |                                           ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
   --> src/tests/aeap.rs:273:29
    |
273 |         let members = chat::get_chat_contacts(bob, *group).await.unwrap();
    |                             ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1626:37
     |
1626 |                 let param: Params = row.get::<_, String>("param")?.parse().unwrap_or_default();
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1627:42
     |
1627 |                 let from_id: ContactId = row.get("from_id")?;
     |                                          ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1628:42
     |
1628 |                 let rfc724_mid: String = row.get("rfc724_mid")?;
     |                                          ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1629:48
     |
1629 |                 let blocked: Option<Blocked> = row.get("blocked")?;
     |                                                ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1630:55
     |
1630 |                 let ephemeral_timer: EphemeralTimer = row.get("ephemeral_timer")?;
     |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
   --> src/tests/aeap.rs:311:29
    |
311 |         let members = chat::get_chat_contacts(bob, *group).await.unwrap();
    |                             ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1693:29
     |
1693 | ...                   (id, curr_from_id, curr_rfc724_mid),
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: within `(MsgId, _, str)`, the trait `Sized` is not implemented for `str`, which is required by `(MsgId, _, str): Sized`
     = note: required because it appears within the type `(MsgId, _, str)`
     = note: tuples must have a statically known size to be initialized

error[E0425]: cannot find function `get_chat_msgs_ex` in module `chat`
   --> src/tests/aeap.rs:340:22
    |
340 |     let msgs = chat::get_chat_msgs_ex(
    |                      ^^^^^^^^^^^^^^^^ not found in `chat`

error[E0422]: cannot find struct, variant or union type `MessageListOptions` in module `chat`
   --> src/tests/aeap.rs:343:15
    |
343 |         chat::MessageListOptions {
    |               ^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
   --> src/tests/aeap.rs:370:15
    |
370 |         chat::create_group_chat(&bob, chat::ProtectionStatus::Unprotected, "Group 0").await?;
    |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_contact_to_chat` in module `chat`
   --> src/tests/aeap.rs:373:11
    |
373 |     chat::add_contact_to_chat(&bob, group, bob_alice_contact).await?;
    |           ^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `is_contact_in_chat` in module `chat`
   --> src/tests/aeap.rs:393:19
    |
393 |     assert!(chat::is_contact_in_chat(&bob, group, bob_alice_contact).await?);
    |                   ^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `is_contact_in_chat` in module `chat`
   --> src/tests/aeap.rs:395:20
    |
395 |     assert!(!chat::is_contact_in_chat(&bob, group, bob_fiona_contact).await?);
    |                    ^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
   --> src/tests/verified_chats.rs:808:15
    |
808 |         chat::get_chat_contacts(alice1, group1.id).await?,
    |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/qr_code_generator.rs:33:14
     |
33   |         Some(path) => {
     |              ^^^^ doesn't have a size known at compile-time
     |
     = help: within `Path`, the trait `Sized` is not implemented for `[u8]`, which is required by `Path: Sized`
note: required because it appears within the type `Path`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:1992:12
     |
1992 | pub struct Path {
     |            ^^^^
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/qr_code_generator.rs:37:9
     |
37   |         None => None,
     |         ^^^^ doesn't have a size known at compile-time
     |
     = help: within `Path`, the trait `Sized` is not implemented for `[u8]`, which is required by `Path: Sized`
note: required because it appears within the type `Path`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:1992:12
     |
1992 | pub struct Path {
     |            ^^^^
note: required by a bound in `std::prelude::v1::None`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
     |
570  | pub enum Option<T> {
     |                 ^ required by this bound in `std::prelude::v1::None`
...
574  |     None,
     |     ---- required by a bound in this unit variant

error[E0599]: no method named `sync_alter_chat` found for reference `&context::Context` in the current scope
   --> src/sync.rs:277:54
    |
277 |                     AlterChat { id, action } => self.sync_alter_chat(id, action).await,
    |                                                      ^^^^^^^^^^^^^^^ method not found in `&Context`

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/summary.rs:69:57
   |
69 |         if let Some((reaction_msg, reaction_contact_id, reaction)) = chat
   |                                                         ^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
   = note: all local variables must have a statically known size
   = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/summary.rs:76:17
   |
76 |             let summary = reaction_msg.get_summary_text_without_prefix(context).await;
   |                 ^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
   = note: all local variables must have a statically known size
   = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/summary.rs:76:27
   |
76 |             let summary = reaction_msg.get_summary_text_without_prefix(context).await;
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
   = note: all local variables must have a statically known size
   = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/summary.rs:76:81
   |
76 |             let summary = reaction_msg.get_summary_text_without_prefix(context).await;
   |                                                                                 ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
  --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
   |
12 | pub enum Poll<T> {
   |               ^ required by this bound in `Poll::Ready`
...
16 |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
   |     ----- required by a bound in this variant

error[E0609]: no field `typ` on type `&_`
   --> src/receive_imf.rs:974:45
    |
974 |                         .filter(|chat| chat.typ == Chattype::Single),
    |                                             ^^^ unknown field

error[E0282]: type annotations needed
  --> src/events/chatlist_events.rs:21:66
   |
21 |     context.emit_event(EventType::ChatlistItemChanged { chat_id: None });
   |                                                                  ^^^^ cannot infer type of the type parameter `T` declared on the enum `Option`
   |
help: consider specifying the generic argument
   |
21 |     context.emit_event(EventType::ChatlistItemChanged { chat_id: None::<T> });
   |                                                                      +++++

warning: unused import: `crate::log::LogExt`
  --> src/configure.rs:29:5
   |
29 | use crate::log::LogExt;
   |     ^^^^^^^^^^^^^^^^^^
   |
note: the lint level is defined here
  --> src/lib.rs:6:5
   |
6  |     unused,
   |     ^^^^^^
   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `crate::log::LogExt`
  --> src/receive_imf.rs:28:5
   |
28 | use crate::log::LogExt;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `Context`
 --> src/securejoin/bob.rs:6:14
  |
6 | use anyhow::{Context as _, Result};
  |              ^^^^^^^

Some errors have detailed explanations: E0277, E0282, E0412, E0425, E0432, E0433, E0599, E0609.
For more information about an error, try `rustc --explain E0277`.
warning: `deltachat` (lib) generated 3 warnings
error: could not compile `deltachat` (lib) due to 126 previous errors; 3 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1693:29
     |
1693 | ...                   (id, curr_from_id, curr_rfc724_mid),
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: within `(message::MsgId, _, str)`, the trait `Sized` is not implemented for `str`, which is required by `(message::MsgId, _, str): Sized`
     = note: required because it appears within the type `(message::MsgId, _, str)`
     = note: tuples must have a statically known size to be initialized

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/qr_code_generator.rs:33:14
     |
33   |         Some(path) => {
     |              ^^^^ doesn't have a size known at compile-time
     |
     = help: within `std::path::Path`, the trait `Sized` is not implemented for `[u8]`, which is required by `std::path::Path: Sized`
note: required because it appears within the type `std::path::Path`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:1992:12
     |
1992 | pub struct Path {
     |            ^^^^
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/qr_code_generator.rs:37:9
     |
37   |         None => None,
     |         ^^^^ doesn't have a size known at compile-time
     |
     = help: within `std::path::Path`, the trait `Sized` is not implemented for `[u8]`, which is required by `std::path::Path: Sized`
note: required because it appears within the type `std::path::Path`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:1992:12
     |
1992 | pub struct Path {
     |            ^^^^
note: required by a bound in `std::prelude::v1::None`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
     |
570  | pub enum Option<T> {
     |                 ^ required by this bound in `std::prelude::v1::None`
...
574  |     None,
     |     ---- required by a bound in this unit variant

error[E0282]: type annotations needed
   --> src/events/chatlist_events.rs:193:30
    |
193 |                 } => chat_id.is_archived_link(),
    |                              ^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T` declared on the enum `Option`

Some errors have detailed explanations: E0277, E0282, E0412, E0422, E0425, E0432, E0433, E0599, E0609.
warning: `deltachat` (lib test) generated 3 warnings (3 duplicates)
error: could not compile `deltachat` (lib test) due to 307 previous errors; 3 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101
</error message>
<c function>
void dc_forward_msgs(dc_context_t* context, const uint32_t* msg_ids, int msg_cnt, uint32_t chat_id)
{
	dc_msg_t*      msg = dc_msg_new_untyped(context);
	dc_chat_t*     chat = dc_chat_new(context);
	dc_contact_t*  contact = dc_contact_new(context);
	int            transaction_pending = 0;
	carray*        created_db_entries = carray_new(16);
	char*          idsstr = NULL;
	char*          q3 = NULL;
	sqlite3_stmt*  stmt = NULL;
	time_t         curr_timestamp = 0;
	dc_param_t*    original_param = dc_param_new();

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || msg_ids==NULL || msg_cnt<=0 || chat_id<=DC_CHAT_ID_LAST_SPECIAL) {
		goto cleanup;
	}

	dc_sqlite3_begin_transaction(context->sql);
	transaction_pending = 1;

		dc_unarchive_chat(context, chat_id);

		context->smtp->log_connect_errors = 1;

		if (!dc_chat_load_from_db(chat, chat_id)) {
			goto cleanup;
		}

		curr_timestamp = dc_create_smeared_timestamps(context, msg_cnt);

		idsstr = dc_arr_to_string(msg_ids, msg_cnt);
		q3 = sqlite3_mprintf("SELECT id FROM msgs WHERE id IN(%s) ORDER BY timestamp,id", idsstr);
		stmt = dc_sqlite3_prepare(context->sql, q3);
		while (sqlite3_step(stmt)==SQLITE_ROW)
		{
			int src_msg_id = sqlite3_column_int(stmt, 0);
			if (!dc_msg_load_from_db(msg, context, src_msg_id)) {
				goto cleanup;
			}

			dc_param_set_packed(original_param, msg->param->packed);

			// do not mark own messages as being forwarded.
			// this allows sort of broadcasting
			// by just forwarding messages to other chats.
			if (msg->from_id!=DC_CONTACT_ID_SELF) {
				dc_param_set_int(msg->param, DC_PARAM_FORWARDED, 1);
			}

			dc_param_set(msg->param, DC_PARAM_GUARANTEE_E2EE, NULL);
			dc_param_set(msg->param, DC_PARAM_FORCE_PLAINTEXT, NULL);
			dc_param_set(msg->param, DC_PARAM_CMD, NULL);

			uint32_t new_msg_id;
			// PREPARING messages can't be forwarded immediately
			if (msg->state==DC_STATE_OUT_PREPARING) {
				new_msg_id = prepare_msg_raw(context, chat, msg, curr_timestamp++);

				// to update the original message, perform in-place surgery
				// on msg to avoid copying the entire structure, text, etc.
				dc_param_t* save_param = msg->param;
				msg->param = original_param;
				msg->id = src_msg_id;
				{
					// append new id to the original's param.
					char* old_fwd = dc_param_get(msg->param, DC_PARAM_PREP_FORWARDS, "");
					char* new_fwd = dc_mprintf("%s %d", old_fwd, new_msg_id);
					dc_param_set(msg->param, DC_PARAM_PREP_FORWARDS, new_fwd);
					dc_msg_save_param_to_disk(msg);
					free(new_fwd);
					free(old_fwd);
				}
				msg->param = save_param;
			}
			else {
				msg->state = DC_STATE_OUT_PENDING;
				new_msg_id = prepare_msg_raw(context, chat, msg, curr_timestamp++);
				dc_job_send_msg(context, new_msg_id);
			}

			carray_add(created_db_entries, (void*)(uintptr_t)chat_id, NULL);
			carray_add(created_db_entries, (void*)(uintptr_t)new_msg_id, NULL);
		}

	dc_sqlite3_commit(context->sql);
	transaction_pending = 0;

cleanup:
	if (transaction_pending) { dc_sqlite3_rollback(context->sql); }
	if (created_db_entries) {
		size_t i, icnt = carray_count(created_db_entries);
		for (i = 0; i < icnt; i += 2) {
			context->cb(context, DC_EVENT_MSGS_CHANGED, (uintptr_t)carray_get(created_db_entries, i), (uintptr_t)carray_get(created_db_entries, i+1));
		}
		carray_free(created_db_entries);
	}
	dc_contact_unref(contact);
	dc_msg_unref(msg);
	dc_chat_unref(chat);
	sqlite3_finalize(stmt);
	free(idsstr);
	sqlite3_free(q3);
	dc_param_unref(original_param);
}
</c function>
<rust function signature>
pub async fn forward_msgs(context: &Context, msg_ids: &[MsgId], chat_id: ChatId) -> Result<()> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub(crate) async fn update_param(&mut self, context: &Context) -> Result<()> {
        context
            .sql
            .execute(
                "UPDATE chats SET param=? WHERE id=?",
                (self.param.to_string(), self.id),
            )
            .await?;
        Ok(())
    }

pub fn get_viewtype(&self) -> Viewtype {
        self.viewtype
    }

pub(crate) async fn create_send_msg_jobs(context: &Context, msg: &mut Message) -> Result<Vec<i64>> {
    let needs_encryption = msg.param.get_bool(Param::GuaranteeE2ee).unwrap_or_default();
    let mimefactory = MimeFactory::from_msg(context, msg).await?;
    let attach_selfavatar = mimefactory.attach_selfavatar;
    let mut recipients = mimefactory.recipients();

    let from = context.get_primary_self_addr().await?;
    let lowercase_from = from.to_lowercase();

    // Send BCC to self if it is enabled.
    //
    // Previous versions of Delta Chat did not send BCC self
    // if DeleteServerAfter was set to immediately delete messages
    // from the server. This is not the case anymore
    // because BCC-self messages are also used to detect
    // that message was sent if SMTP server is slow to respond
    // and connection is frequently lost
    // before receiving status line.
    //
    // `from` must be the last addr, see `receive_imf_inner()` why.
    if context.get_config_bool(Config::BccSelf).await?
        && !recipients
            .iter()
            .any(|x| x.to_lowercase() == lowercase_from)
    {
        recipients.push(from);
    }

    // Webxdc integrations are messages, however, shipped with main app and must not be sent out
    if msg.param.get_int(Param::WebxdcIntegration).is_some() {
        recipients.clear();
    }

    if recipients.is_empty() {
        // may happen eg. for groups with only SELF and bcc_self disabled
        info!(
            context,
            "Message {} has no recipient, skipping smtp-send.", msg.id
        );
        msg.id.set_delivered(context).await?;
        msg.state = MessageState::OutDelivered;
        return Ok(Vec::new());
    }

    let rendered_msg = match mimefactory.render(context).await {
        Ok(res) => Ok(res),
        Err(err) => {
            message::set_msg_failed(context, msg, &err.to_string()).await?;
            Err(err)
        }
    }?;

    if needs_encryption && !rendered_msg.is_encrypted {
        /* unrecoverable */
        message::set_msg_failed(
            context,
            msg,
            "End-to-end-encryption unavailable unexpectedly.",
        )
        .await?;
        bail!(
            "e2e encryption unavailable {} - {:?}",
            msg.id,
            needs_encryption
        );
    }

    let now = smeared_time(context);

    if rendered_msg.is_gossiped {
        msg.chat_id.set_gossiped_timestamp(context, now).await?;
    }

    if msg.param.get_cmd() == SystemMessage::MemberRemovedFromGroup {
        // Reject member list synchronisation from older messages. See also
        // `receive_imf::apply_group_changes()`.
        msg.chat_id
            .update_timestamp(
                context,
                Param::MemberListTimestamp,
                now.saturating_add(constants::TIMESTAMP_SENT_TOLERANCE),
            )
            .await?;
    }

    if rendered_msg.last_added_location_id.is_some() {
        if let Err(err) = location::set_kml_sent_timestamp(context, msg.chat_id, now).await {
            error!(context, "Failed to set kml sent_timestamp: {err:#}.");
        }
    }

    if let Some(sync_ids) = rendered_msg.sync_ids_to_delete {
        if let Err(err) = context.delete_sync_ids(sync_ids).await {
            error!(context, "Failed to delete sync ids: {err:#}.");
        }
    }

    if attach_selfavatar {
        if let Err(err) = msg.chat_id.set_selfavatar_timestamp(context, now).await {
            error!(context, "Failed to set selfavatar timestamp: {err:#}.");
        }
    }

    if rendered_msg.is_encrypted && !needs_encryption {
        msg.param.set_int(Param::GuaranteeE2ee, 1);
        msg.update_param(context).await?;
    }

    msg.subject.clone_from(&rendered_msg.subject);
    msg.update_subject(context).await?;
    let chunk_size = context.get_max_smtp_rcpt_to().await?;
    let trans_fn = |t: &mut rusqlite::Transaction| {
        let mut row_ids = Vec::<i64>::new();
        for recipients_chunk in recipients.chunks(chunk_size) {
            let recipients_chunk = recipients_chunk.join(" ");
            let row_id = t.execute(
                "INSERT INTO smtp (rfc724_mid, recipients, mime, msg_id) \
                VALUES            (?1,         ?2,         ?3,   ?4)",
                (
                    &rendered_msg.rfc724_mid,
                    recipients_chunk,
                    &rendered_msg.message,
                    msg.id,
                ),
            )?;
            row_ids.push(row_id.try_into()?);
        }
        Ok(row_ids)
    };
    context.sql.transaction(trans_fn).await
}

async fn prepare_msg_raw(
        &mut self,
        context: &Context,
        msg: &mut Message,
        update_msg_id: Option<MsgId>,
        timestamp: i64,
    ) -> Result<MsgId> {
        let mut to_id = 0;
        let mut location_id = 0;

        let new_rfc724_mid = create_outgoing_rfc724_mid();

        if self.typ == Chattype::Single {
            if let Some(id) = context
                .sql
                .query_get_value(
                    "SELECT contact_id FROM chats_contacts WHERE chat_id=?;",
                    (self.id,),
                )
                .await?
            {
                to_id = id;
            } else {
                error!(
                    context,
                    "Cannot send message, contact for {} not found.", self.id,
                );
                bail!("Cannot set message, contact for {} not found.", self.id);
            }
        } else if self.typ == Chattype::Group
            && self.param.get_int(Param::Unpromoted).unwrap_or_default() == 1
        {
            msg.param.set_int(Param::AttachGroupImage, 1);
            self.param.remove(Param::Unpromoted);
            self.update_param(context).await?;
            // send_sync_msg() is called (usually) a moment later at send_msg_to_smtp()
            // when the group-creation message is actually sent though SMTP -
            // this makes sure, the other devices are aware of grpid that is used in the sync-message.
            context
                .sync_qr_code_tokens(Some(self.id))
                .await
                .log_err(context)
                .ok();
        }

        // reset encrypt error state eg. for forwarding
        msg.param.remove(Param::ErroneousE2ee);

        let is_bot = context.get_config_bool(Config::Bot).await?;
        msg.param
            .set_optional(Param::Bot, Some("1").filter(|_| is_bot));

        // Set "In-Reply-To:" to identify the message to which the composed message is a reply.
        // Set "References:" to identify the "thread" of the conversation.
        // Both according to [RFC 5322 3.6.4, page 25](https://www.rfc-editor.org/rfc/rfc5322#section-3.6.4).
        let new_references;
        if self.is_self_talk() {
            // As self-talks are mainly used to transfer data between devices,
            // we do not set In-Reply-To/References in this case.
            new_references = String::new();
        } else if let Some((parent_rfc724_mid, parent_in_reply_to, parent_references)) =
            // We don't filter `OutPending` and `OutFailed` messages because the new message for
            // which `parent_query()` is done may assume that it will be received in a context
            // affected by those messages, e.g. they could add new members to a group and the
            // new message will contain them in "To:". Anyway recipients must be prepared to
            // orphaned references.
            self
                .id
                .get_parent_mime_headers(context, MessageState::OutPending)
                .await?
        {
            // "In-Reply-To:" is not changed if it is set manually.
            // This does not affect "References:" header, it will contain "default parent" (the
            // latest message in the thread) anyway.
            if msg.in_reply_to.is_none() && !parent_rfc724_mid.is_empty() {
                msg.in_reply_to = Some(parent_rfc724_mid.clone());
            }

            // Use parent `In-Reply-To` as a fallback
            // in case parent message has no `References` header
            // as specified in RFC 5322:
            // > If the parent message does not contain
            // > a "References:" field but does have an "In-Reply-To:" field
            // > containing a single message identifier, then the "References:" field
            // > will contain the contents of the parent's "In-Reply-To:" field
            // > followed by the contents of the parent's "Message-ID:" field (if
            // > any).
            let parent_references = if parent_references.is_empty() {
                parent_in_reply_to
            } else {
                parent_references
            };

            // The whole list of messages referenced may be huge.
            // Only take 2 recent references and add third from `In-Reply-To`.
            let mut references_vec: Vec<&str> = parent_references.rsplit(' ').take(2).collect();
            references_vec.reverse();

            if !parent_rfc724_mid.is_empty()
                && !references_vec.contains(&parent_rfc724_mid.as_str())
            {
                references_vec.push(&parent_rfc724_mid)
            }

            if references_vec.is_empty() {
                // As a fallback, use our Message-ID,
                // same as in the case of top-level message.
                new_references = new_rfc724_mid.clone();
            } else {
                new_references = references_vec.join(" ");
            }
        } else {
            // This is a top-level message.
            // Add our Message-ID as first references.
            // This allows us to identify replies to our message even if
            // email server such as Outlook changes `Message-ID:` header.
            // MUAs usually keep the first Message-ID in `References:` header unchanged.
            new_references = new_rfc724_mid.clone();
        }

        // add independent location to database
        if msg.param.exists(Param::SetLatitude) {
            if let Ok(row_id) = context
                .sql
                .insert(
                    "INSERT INTO locations \
                     (timestamp,from_id,chat_id, latitude,longitude,independent)\
                     VALUES (?,?,?, ?,?,1);",
                    (
                        timestamp,
                        ContactId::SELF,
                        self.id,
                        msg.param.get_float(Param::SetLatitude).unwrap_or_default(),
                        msg.param.get_float(Param::SetLongitude).unwrap_or_default(),
                    ),
                )
                .await
            {
                location_id = row_id;
            }
        }

        let ephemeral_timer = if msg.param.get_cmd() == SystemMessage::EphemeralTimerChanged {
            EphemeralTimer::Disabled
        } else {
            self.id.get_ephemeral_timer(context).await?
        };
        let ephemeral_timestamp = match ephemeral_timer {
            EphemeralTimer::Disabled => 0,
            EphemeralTimer::Enabled { duration } => time().saturating_add(duration.into()),
        };

        let new_mime_headers = if msg.has_html() {
            let html = if msg.param.exists(Param::Forwarded) {
                msg.get_id().get_html(context).await?
            } else {
                msg.param.get(Param::SendHtml).map(|s| s.to_string())
            };
            match html {
                Some(html) => Some(tokio::task::block_in_place(move || {
                    buf_compress(new_html_mimepart(html).build().as_string().as_bytes())
                })?),
                None => None,
            }
        } else {
            None
        };

        msg.chat_id = self.id;
        msg.from_id = ContactId::SELF;
        msg.rfc724_mid = new_rfc724_mid;
        msg.timestamp_sort = timestamp;

        // add message to the database
        if let Some(update_msg_id) = update_msg_id {
            context
                .sql
                .execute(
                    "UPDATE msgs
                     SET rfc724_mid=?, chat_id=?, from_id=?, to_id=?, timestamp=?, type=?,
                         state=?, txt=?, subject=?, param=?,
                         hidden=?, mime_in_reply_to=?, mime_references=?, mime_modified=?,
                         mime_headers=?, mime_compressed=1, location_id=?, ephemeral_timer=?,
                         ephemeral_timestamp=?
                     WHERE id=?;",
                    params_slice![
                        msg.rfc724_mid,
                        msg.chat_id,
                        msg.from_id,
                        to_id,
                        msg.timestamp_sort,
                        msg.viewtype,
                        msg.state,
                        msg.text,
                        &msg.subject,
                        msg.param.to_string(),
                        msg.hidden,
                        msg.in_reply_to.as_deref().unwrap_or_default(),
                        new_references,
                        new_mime_headers.is_some(),
                        new_mime_headers.unwrap_or_default(),
                        location_id as i32,
                        ephemeral_timer,
                        ephemeral_timestamp,
                        update_msg_id
                    ],
                )
                .await?;
            msg.id = update_msg_id;
        } else {
            let raw_id = context
                .sql
                .insert(
                    "INSERT INTO msgs (
                        rfc724_mid,
                        chat_id,
                        from_id,
                        to_id,
                        timestamp,
                        type,
                        state,
                        txt,
                        subject,
                        param,
                        hidden,
                        mime_in_reply_to,
                        mime_references,
                        mime_modified,
                        mime_headers,
                        mime_compressed,
                        location_id,
                        ephemeral_timer,
                        ephemeral_timestamp)
                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,1,?,?,?);",
                    params_slice![
                        msg.rfc724_mid,
                        msg.chat_id,
                        msg.from_id,
                        to_id,
                        msg.timestamp_sort,
                        msg.viewtype,
                        msg.state,
                        msg.text,
                        &msg.subject,
                        msg.param.to_string(),
                        msg.hidden,
                        msg.in_reply_to.as_deref().unwrap_or_default(),
                        new_references,
                        new_mime_headers.is_some(),
                        new_mime_headers.unwrap_or_default(),
                        location_id as i32,
                        ephemeral_timer,
                        ephemeral_timestamp
                    ],
                )
                .await?;
            context.new_msgs_notify.notify_one();
            msg.id = MsgId::new(u32::try_from(raw_id)?);

            maybe_set_logging_xdc(context, msg, self.id).await?;
            context.update_webxdc_integration_database(msg).await?;
        }
        context.scheduler.interrupt_ephemeral_task().await;
        Ok(msg.id)
    }

pub fn emit_msgs_changed(&self, chat_id: ChatId, msg_id: MsgId) {
        self.emit_event(EventType::MsgsChanged { chat_id, msg_id });
        chatlist_events::emit_chatlist_changed(self);
        chatlist_events::emit_chatlist_item_changed(self, chat_id);
    }

pub fn set_int(&mut self, key: Param, value: i32) -> &mut Self {
        self.set(key, format!("{value}"));
        self
    }

pub async fn query_map<T, F, G, H>(
        &self,
        sql: &str,
        params: impl rusqlite::Params + Send,
        f: F,
        mut g: G,
    ) -> Result<H>
    where
        F: Send + FnMut(&rusqlite::Row) -> rusqlite::Result<T>,
        G: Send + FnMut(rusqlite::MappedRows<F>) -> Result<H>,
        H: Send + 'static,
    {
        self.call(move |conn| {
            let mut stmt = conn.prepare(sql)?;
            let res = stmt.query_map(params, f)?;
            g(res)
        })
        .await
    }

pub(crate) fn iter(&self) -> BlobDirIter<'_> {
        BlobDirIter::new(self.context, self.inner.iter())
    }

pub fn remove(&mut self, key: Param) -> &mut Self {
        self.inner.remove(&key);
        self
    }

pub fn is_empty(&self) -> bool {
        self.inner.is_empty()
    }

pub fn is_special(self) -> bool {
        (0..=DC_CHAT_ID_LAST_SPECIAL.0).contains(&self.0)
    }

pub fn to_u32(self) -> u32 {
        self.0
    }

pub(crate) async fn why_cant_send(&self, context: &Context) -> Result<Option<CantSendReason>> {
        use CantSendReason::*;

        // NB: Don't forget to update Chatlist::try_load() when changing this function!
        let reason = if self.id.is_special() {
            Some(SpecialChat)
        } else if self.is_device_talk() {
            Some(DeviceChat)
        } else if self.is_contact_request() {
            Some(ContactRequest)
        } else if self.is_protection_broken() {
            Some(ProtectionBroken)
        } else if self.is_mailing_list() && self.get_mailinglist_addr().is_none_or_empty() {
            Some(ReadOnlyMailingList)
        } else if !self.is_self_in_chat(context).await? {
            Some(NotAMember)
        } else if self
            .check_securejoin_wait(context, constants::SECUREJOIN_WAIT_TIMEOUT)
            .await?
            > 0
        {
            Some(SecurejoinWait)
        } else {
            None
        };
        Ok(reason)
    }

pub async fn unarchive_if_not_muted(
        self,
        context: &Context,
        msg_state: MessageState,
    ) -> Result<()> {
        if msg_state != MessageState::InFresh {
            context
                .sql
                .execute(
                    "UPDATE chats SET archived=0 WHERE id=? AND archived=1 \
                AND NOT(muted_until=-1 OR muted_until>?)",
                    (self, time()),
                )
                .await?;
            return Ok(());
        }
        let chat = Chat::load_from_db(context, self).await?;
        if chat.visibility != ChatVisibility::Archived {
            return Ok(());
        }
        if chat.is_muted() {
            let unread_cnt = context
                .sql
                .count(
                    "SELECT COUNT(*)
                FROM msgs
                WHERE state=?
                AND hidden=0
                AND chat_id=?",
                    (MessageState::InFresh, self),
                )
                .await?;
            if unread_cnt == 1 {
                // Added the first unread message in the chat.
                context.emit_msgs_changed(DC_CHAT_ID_ARCHIVED_LINK, MsgId::new(0));
            }
            return Ok(());
        }
        context
            .sql
            .execute("UPDATE chats SET archived=0 WHERE id=?", (self,))
            .await?;
        Ok(())
    }

pub async fn load_from_db(context: &Context, chat_id: ChatId) -> Result<Self> {
        let mut chat = context
            .sql
            .query_row(
                "SELECT c.type, c.name, c.grpid, c.param, c.archived,
                    c.blocked, c.locations_send_until, c.muted_until, c.protected
             FROM chats c
             WHERE c.id=?;",
                (chat_id,),
                |row| {
                    let c = Chat {
                        id: chat_id,
                        typ: row.get(0)?,
                        name: row.get::<_, String>(1)?,
                        grpid: row.get::<_, String>(2)?,
                        param: row.get::<_, String>(3)?.parse().unwrap_or_default(),
                        visibility: row.get(4)?,
                        blocked: row.get::<_, Option<_>>(5)?.unwrap_or_default(),
                        is_sending_locations: row.get(6)?,
                        mute_duration: row.get(7)?,
                        protected: row.get(8)?,
                    };
                    Ok(c)
                },
            )
            .await
            .context(format!("Failed loading chat {chat_id} from database"))?;

        if chat.id.is_archived_link() {
            chat.name = stock_str::archived_chats(context).await;
        } else {
            if chat.typ == Chattype::Single && chat.name.is_empty() {
                // chat.name is set to contact.display_name on changes,
                // however, if things went wrong somehow, we do this here explicitly.
                let mut chat_name = "Err [Name not found]".to_owned();
                match get_chat_contacts(context, chat.id).await {
                    Ok(contacts) => {
                        if let Some(contact_id) = contacts.first() {
                            if let Ok(contact) = Contact::get_by_id(context, *contact_id).await {
                                contact.get_display_name().clone_into(&mut chat_name);
                            }
                        }
                    }
                    Err(err) => {
                        error!(
                            context,
                            "Failed to load contacts for {}: {:#}.", chat.id, err
                        );
                    }
                }
                chat.name = chat_name;
            }
            if chat.param.exists(Param::Selftalk) {
                chat.name = stock_str::saved_messages(context).await;
            } else if chat.param.exists(Param::Devicetalk) {
                chat.name = stock_str::device_messages(context).await;
            }
        }

        Ok(chat)
    }

pub async fn query_map<T, F, G, H>(
        &self,
        sql: &str,
        params: impl rusqlite::Params + Send,
        f: F,
        mut g: G,
    ) -> Result<H>
    where
        F: Send + FnMut(&rusqlite::Row) -> rusqlite::Result<T>,
        G: Send + FnMut(rusqlite::MappedRows<F>) -> Result<H>,
        H: Send + 'static,
    {
        self.call(move |conn| {
            let mut stmt = conn.prepare(sql)?;
            let res = stmt.query_map(params, f)?;
            g(res)
        })
        .await
    }

pub fn params_from_iter<I>(iter: I) -> ParamsFromIter<I>
where
    I: IntoIterator,
    I::Item: ToSql,
{
    ParamsFromIter(iter)
}

pub(crate) fn create_smeared_timestamps(context: &Context, count: usize) -> i64 {
    let now = time();
    context.smeared_timestamp.create_n(now, count as i64)
}

pub fn repeat_vars(count: usize) -> String {
    let mut s = "?,".repeat(count);
    s.pop(); // Remove trailing comma
    s
}

pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
        self.inner.insert(key, value.to_string());
        self
    }

pub fn len(&self) -> usize {
        self.inner.len()
    }

pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

pub struct MsgId(u32);

pub struct ChatId(u32);

pub enum Param {
    /// For messages
    File = b'f',

    /// For messages: original filename (as shown in chat)
    Filename = b'v',

    /// For messages: This name should be shown instead of contact.get_display_name()
    /// (used if this is a mailinglist
    /// or explicitly set using set_override_sender_name(), eg. by bots)
    OverrideSenderDisplayname = b'O',

    /// For Messages
    Width = b'w',

    /// For Messages
    Height = b'h',

    /// For Messages
    Duration = b'd',

    /// For Messages
    MimeType = b'm',

    /// For Messages: HTML to be written to the database and to be send.
    /// `SendHtml` param is not used for received messages.
    /// Use `MsgId::get_html()` to get HTML of received messages.
    SendHtml = b'T',

    /// For Messages: message is encrypted, outgoing: guarantee E2EE or the message is not send
    GuaranteeE2ee = b'c',

    /// For Messages: quoted message is encrypted.
    ///
    /// If this message is sent unencrypted, quote text should be replaced.
    ProtectQuote = b'0',

    /// For Messages: decrypted with validation errors or without mutual set, if neither
    /// 'c' nor 'e' are preset, the messages is only transport encrypted.
    ErroneousE2ee = b'e',

    /// For Messages: force unencrypted message, a value from `ForcePlaintext` enum.
    ForcePlaintext = b'u',

    /// For Messages: do not include Autocrypt header.
    SkipAutocrypt = b'o',

    /// For Messages
    WantsMdn = b'r',

    /// For Messages: the message is a reaction.
    Reaction = b'x',

    /// For Chats: the timestamp of the last reaction.
    LastReactionTimestamp = b'y',

    /// For Chats: Message ID of the last reaction.
    LastReactionMsgId = b'Y',

    /// For Chats: Contact ID of the last reaction.
    LastReactionContactId = b'1',

    /// For Messages: a message with "Auto-Submitted: auto-generated" header ("bot").
    Bot = b'b',

    /// For Messages: unset or 0=not forwarded,
    /// 1=forwarded from unknown msg_id, >9 forwarded from msg_id
    Forwarded = b'a',

    /// For Messages: quoted text.
    Quote = b'q',

    /// For Messages
    Cmd = b'S',

    /// For Messages
    Arg = b'E',

    /// For Messages
    Arg2 = b'F',

    /// `Secure-Join-Fingerprint` header for `{vc,vg}-request-with-auth` messages.
    Arg3 = b'G',

    /// Deprecated `Secure-Join-Group` header for messages.
    Arg4 = b'H',

    /// For Messages
    AttachGroupImage = b'A',

    /// For Messages
    WebrtcRoom = b'V',

    /// For Messages: space-separated list of messaged IDs of forwarded copies.
    ///
    /// This is used when a [crate::message::Message] is in the
    /// [crate::message::MessageState::OutPending] state but is already forwarded.
    /// In this case the forwarded messages are written to the
    /// database and their message IDs are added to this parameter of
    /// the original message, which is also saved in the database.
    /// When the original message is then finally sent this parameter
    /// is used to also send all the forwarded messages.
    PrepForwards = b'P',

    /// For Messages
    SetLatitude = b'l',

    /// For Messages
    SetLongitude = b'n',

    /// For Groups
    ///
    /// An unpromoted group has not had any messages sent to it and thus only exists on the
    /// creator's device.  Any changes made to an unpromoted group do not need to send
    /// system messages to the group members to update them of the changes.  Once a message
    /// has been sent to a group it is promoted and group changes require sending system
    /// messages to all members.
    Unpromoted = b'U',

    /// For Groups and Contacts
    ProfileImage = b'i',

    /// For Chats
    /// Signals whether the chat is the `saved messages` chat
    Selftalk = b'K',

    /// For Chats: On sending a new message we set the subject to `Re: <last subject>`.
    /// Usually we just use the subject of the parent message, but if the parent message
    /// is deleted, we use the LastSubject of the chat.
    LastSubject = b't',

    /// For Chats
    Devicetalk = b'D',

    /// For Chats: If this is a mailing list chat, contains the List-Post address.
    /// None if there simply is no `List-Post` header in the mailing list.
    /// Some("") if the mailing list is using multiple different List-Post headers.
    ///
    /// The List-Post address is the email address where the user can write to in order to
    /// post something to the mailing list.
    ListPost = b'p',

    /// For Contacts: If this is the List-Post address of a mailing list, contains
    /// the List-Id of the mailing list (which is also used as the group id of the chat).
    ListId = b's',

    /// For Contacts: timestamp of status (aka signature or footer) update.
    StatusTimestamp = b'j',

    /// For Contacts and Chats: timestamp of avatar update.
    AvatarTimestamp = b'J',

    /// For Chats: timestamp of status/signature/footer update.
    EphemeralSettingsTimestamp = b'B',

    /// For Chats: timestamp of subject update.
    SubjectTimestamp = b'C',

    /// For Chats: timestamp of group name update.
    GroupNameTimestamp = b'g',

    /// For Chats: timestamp of member list update.
    MemberListTimestamp = b'k',

    /// For Webxdc Message Instances: Current document name
    WebxdcDocument = b'R',

    /// For Webxdc Message Instances: timestamp of document name update.
    WebxdcDocumentTimestamp = b'W',

    /// For Webxdc Message Instances: Current summary
    WebxdcSummary = b'N',

    /// For Webxdc Message Instances: timestamp of summary update.
    WebxdcSummaryTimestamp = b'Q',

    /// For Webxdc Message Instances: Webxdc is an integration, see init_webxdc_integration()
    WebxdcIntegration = b'3',

    /// For Webxdc Message Instances: Chat to integrate the Webxdc for.
    WebxdcIntegrateFor = b'2',

    /// For messages: Whether [crate::message::Viewtype::Sticker] should be forced.
    ForceSticker = b'X',
    // 'L' was defined as ProtectionSettingsTimestamp for Chats, however, never used in production.
}


pub enum Viewtype {
    /// Unknown message type.
    #[default]
    Unknown = 0,

    /// Text message.
    /// The text of the message is set using dc_msg_set_text() and retrieved with dc_msg_get_text().
    Text = 10,

    /// Image message.
    /// If the image is a GIF and has the appropriate extension, the viewtype is auto-changed to
    /// `Gif` when sending the message.
    /// File, width and height are set via dc_msg_set_file(), dc_msg_set_dimension
    /// and retrieved via dc_msg_set_file(), dc_msg_set_dimension().
    Image = 20,

    /// Animated GIF message.
    /// File, width and height are set via dc_msg_set_file(), dc_msg_set_dimension()
    /// and retrieved via dc_msg_get_file(), dc_msg_get_width(), dc_msg_get_height().
    Gif = 21,

    /// Message containing a sticker, similar to image.
    /// If possible, the ui should display the image without borders in a transparent way.
    /// A click on a sticker will offer to install the sticker set in some future.
    Sticker = 23,

    /// Message containing an Audio file.
    /// File and duration are set via dc_msg_set_file(), dc_msg_set_duration()
    /// and retrieved via dc_msg_get_file(), dc_msg_get_duration().
    Audio = 40,

    /// A voice message that was directly recorded by the user.
    /// For all other audio messages, the type #DC_MSG_AUDIO should be used.
    /// File and duration are set via dc_msg_set_file(), dc_msg_set_duration()
    /// and retrieved via dc_msg_get_file(), dc_msg_get_duration()
    Voice = 41,

    /// Video messages.
    /// File, width, height and durarion
    /// are set via dc_msg_set_file(), dc_msg_set_dimension(), dc_msg_set_duration()
    /// and retrieved via
    /// dc_msg_get_file(), dc_msg_get_width(),
    /// dc_msg_get_height(), dc_msg_get_duration().
    Video = 50,

    /// Message containing any file, eg. a PDF.
    /// The file is set via dc_msg_set_file()
    /// and retrieved via dc_msg_get_file().
    File = 60,

    /// Message is an invitation to a videochat.
    VideochatInvitation = 70,

    /// Message is an webxdc instance.
    Webxdc = 80,

    /// Message containing shared contacts represented as a vCard (virtual contact file)
    /// with email addresses and possibly other fields.
    /// Use `parse_vcard()` to retrieve them.
    Vcard = 90,
}


pub struct InnerContext {
    /// Blob directory path
    pub(crate) blobdir: PathBuf,
    pub(crate) sql: Sql,
    pub(crate) smeared_timestamp: SmearedTimestamp,
    /// The global "ongoing" process state.
    ///
    /// This is a global mutex-like state for operations which should be modal in the
    /// clients.
    running_state: RwLock<RunningState>,
    /// Mutex to avoid generating the key for the user more than once.
    pub(crate) generating_key_mutex: Mutex<()>,
    /// Mutex to enforce only a single running oauth2 is running.
    pub(crate) oauth2_mutex: Mutex<()>,
    /// Mutex to prevent a race condition when a "your pw is wrong" warning is sent, resulting in multiple messages being sent.
    pub(crate) wrong_pw_warning_mutex: Mutex<()>,
    pub(crate) translated_stockstrings: StockStrings,
    pub(crate) events: Events,

    pub(crate) scheduler: SchedulerState,
    pub(crate) ratelimit: RwLock<Ratelimit>,

    /// Recently loaded quota information, if any.
    /// Set to `None` if quota was never tried to load.
    pub(crate) quota: RwLock<Option<QuotaInfo>>,

    /// IMAP UID resync request.
    pub(crate) resync_request: AtomicBool,

    /// Notify about new messages.
    ///
    /// This causes [`Context::wait_next_msgs`] to wake up.
    pub(crate) new_msgs_notify: Notify,

    /// Server ID response if ID capability is supported
    /// and the server returned non-NIL on the inbox connection.
    /// <https://datatracker.ietf.org/doc/html/rfc2971>
    pub(crate) server_id: RwLock<Option<HashMap<String, String>>>,

    /// IMAP METADATA.
    pub(crate) metadata: RwLock<Option<ServerMetadata>>,

    pub(crate) last_full_folder_scan: Mutex<Option<tools::Time>>,

    /// ID for this `Context` in the current process.
    ///
    /// This allows for multiple `Context`s open in a single process where each context can
    /// be identified by this ID.
    pub(crate) id: u32,

    creation_time: tools::Time,

    /// The text of the last error logged and emitted as an event.
    /// If the ui wants to display an error after a failure,
    /// `last_error` should be used to avoid races with the event thread.
    pub(crate) last_error: std::sync::RwLock<String>,

    /// If debug logging is enabled, this contains all necessary information
    ///
    /// Standard RwLock instead of [`tokio::sync::RwLock`] is used
    /// because the lock is used from synchronous [`Context::emit_event`].
    pub(crate) debug_logging: std::sync::RwLock<Option<DebugLogging>>,

    /// Push subscriber to store device token
    /// and register for heartbeat notifications.
    pub(crate) push_subscriber: PushSubscriber,

    /// True if account has subscribed to push notifications via IMAP.
    pub(crate) push_subscribed: AtomicBool,

    /// Iroh for realtime peer channels.
    pub(crate) iroh: OnceCell<Iroh>,
}


pub enum MessageState {
    /// Undefined message state.
    #[default]
    Undefined = 0,

    /// Incoming *fresh* message. Fresh messages are neither noticed
    /// nor seen and are typically shown in notifications.
    InFresh = 10,

    /// Incoming *noticed* message. E.g. chat opened but message not
    /// yet read - noticed messages are not counted as unread but did
    /// not marked as read nor resulted in MDNs.
    InNoticed = 13,

    /// Incoming message, really *seen* by the user. Marked as read on
    /// IMAP and MDN may be sent.
    InSeen = 16,

    /// For files which need time to be prepared before they can be
    /// sent, the message enters this state before
    /// OutPending.
    OutPreparing = 18,

    /// Message saved as draft.
    OutDraft = 19,

    /// The user has pressed the "send" button but the message is not
    /// yet sent and is pending in some way. Maybe we're offline (no
    /// checkmark).
    OutPending = 20,

    /// *Unrecoverable* error (*recoverable* errors result in pending
    /// messages).
    OutFailed = 24,

    /// Outgoing message successfully delivered to server (one
    /// checkmark). Note, that already delivered messages may get into
    /// the OutFailed state if we get such a hint from the server.
    OutDelivered = 26,

    /// Outgoing message read by the recipient (two checkmarks; this
    /// requires goodwill on the receiver's side)
    OutMdnRcvd = 28,
}



</rust function dependencies and data type declarations>
<rust function dependency libraries>
use std::cmp;
use std::collections::{HashMap, HashSet};
use std::fmt;
use std::path::{Path, PathBuf};
use std::str::FromStr;
use std::time::Duration;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use deltachat_contact_tools::{strip_rtlo_characters, ContactAddress};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use strum_macros::EnumIter;
use tokio::task;
use crate::aheader::EncryptPreference;
use crate::blob::BlobObject;
use crate::chatlist::Chatlist;
use crate::chatlist_events;
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{
    self, Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK,
    DC_CHAT_ID_LAST_SPECIAL, DC_CHAT_ID_TRASH, DC_RESEND_USER_AVATAR_DAYS,
};
use crate::contact::{self, Contact, ContactId, Origin};
use crate::context::Context;
use crate::debug_logging::maybe_set_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::Timer as EphemeralTimer;
use crate::events::EventType;
use crate::html::new_html_mimepart;
use crate::location;
use crate::log::LogExt;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::mimefactory::MimeFactory;
use crate::mimeparser::SystemMessage;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::receive_imf::ReceivedMsg;
use crate::securejoin::BobState;
use crate::smtp::send_msg_to_smtp;
use crate::sql;
use crate::stock_str;
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{
    buf_compress, create_id, create_outgoing_rfc724_mid, create_smeared_timestamp,
    create_smeared_timestamps, get_abs_path, gm2local_offset, improve_single_line_input,
    smeared_time, time, IsNoneOrEmpty, SystemTime,
};
use crate::webxdc::WEBXDC_SUFFIX;
use CantSendReason::*;
use super::*;
use crate::chatlist::get_archived_cnt;
use crate::constants::{DC_GCL_ARCHIVED_ONLY, DC_GCL_NO_SPECIALS};
use crate::message::delete_msgs;
use crate::receive_imf::receive_imf;
use crate::test_utils::{sync, TestContext, TestContextManager};
use strum::IntoEnumIterator;
use tokio::fs;

</rust function dependency libraries>

</message>
<reapir response>
Here's the fixed Rust function based on the error messages, C function, and provided dependencies:

```rust
pub async fn forward_msgs(context: &Context, msg_ids: &[MsgId], chat_id: ChatId) -> Result<()> {
    if context.inner.sql.is_closed() || msg_ids.is_empty() || chat_id.is_special() {
        return Ok(());
    }

    context.inner.sql.begin_transaction().await?;

    let chat = Chat::load_from_db(context, chat_id).await?;
    if !chat.load_from_db(context).await? {
        context.inner.sql.rollback().await?;
        return Ok(());
    }

    chat_id.unarchive_if_not_muted(context, MessageState::InFresh).await?;

    let curr_timestamp = create_smeared_timestamps(context, msg_ids.len());

    let idsstr = msg_ids.iter().map(|id| id.to_u32().to_string()).collect::<Vec<_>>().join(",");
    let q3 = format!("SELECT id FROM msgs WHERE id IN({}) ORDER BY timestamp,id", idsstr);
    let rows = context.inner.sql.query_map(&q3, [], |row| row.get::<_, u32>(0)).await?;

    let mut created_db_entries = Vec::new();

    for row in rows {
        let src_msg_id = MsgId::new(row?);
        let mut msg = Message::load_from_db(context, src_msg_id).await?;

        let original_param = msg.param.clone();

        if msg.from_id != ContactId::SELF {
            msg.param.set_int(Param::Forwarded, 1);
        }

        msg.param.remove(Param::GuaranteeE2ee);
        msg.param.remove(Param::ForcePlaintext);
        msg.param.remove(Param::Cmd);

        let new_msg_id = chat.prepare_msg_raw(context, &mut msg, None, curr_timestamp).await?;

        created_db_entries.push(chat_id);
        created_db_entries.push(new_msg_id);

        if msg.state == MessageState::OutPreparing {
            let old_fwd = msg.param.get(Param::PrepForwards).unwrap_or_default();
            let new_fwd = format!("{} {}", old_fwd, new_msg_id.to_u32());
            msg.param = original_param;
            msg.id = src_msg_id;
            msg.param.set(Param::PrepForwards, new_fwd);
            msg.update_param(context).await?;
        } else {
            context.create_send_msg_jobs(&mut msg).await?;
        }
    }

    context.inner.sql.commit().await?;

    for chunk in created_db_entries.chunks(2) {
        if let [chat_id, msg_id] = chunk {
            context.emit_msgs_changed(*chat_id, *msg_id);
        }
    }

    Ok(())
}
```

This Rust function implements the functionality of the C function `dc_forward_msgs`, taking into account the error messages and using the provided Rust dependencies and data types. The main changes include:

1. Using async/await for database operations.
2. Properly handling transactions with begin_transaction() and commit()/rollback().
3. Using Rust's Result type for error handling.
4. Utilizing the provided Context, Chat, Message, and other structs and methods.
5. Implementing the logic for preparing and creating forwarded messages.
6. Emitting events for changed messages.

Note that some details might need to be adjusted based on the exact implementation of the mentioned structs and methods, as not all of them were provided in the dependencies.</reapir response>
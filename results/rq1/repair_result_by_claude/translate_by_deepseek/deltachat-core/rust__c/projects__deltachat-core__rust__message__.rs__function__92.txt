<message>
you were asked to translate the given c function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, c function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b'pub(crate) async fn set_msg_failed(\n    context: &Context,\n    msg: &mut Message,\n    error: &str,\n) -> Result<()> {\n    let mut msg = dc_msg_new_untyped(context).await?;\n    let mut stmt: sqlite3_stmt = None;\n\n    if !dc_msg_load_from_db(msg.as_mut(), context).await? {\n        return Ok(());\n    }\n\n    if msg.can_fail() {\n        msg.state = DC_STATE_OUT_FAILED;\n    }\n\n    if let Some(error) = error {\n        dc_param_set(msg.param.as_mut(), DC_PARAM_ERROR, error).await?;\n        warn!(context, "{}", error).await?;\n    }\n\n    stmt = Some(dc_sqlite3_prepare(context.inner.sql.as_str(), "UPDATE msgs SET state=?, param=? WHERE id=?;").await?);\n    sqlite3_bind_int(stmt.as_mut().unwrap(), 1, msg.state as i32).await?;\n    sqlite3_bind_text(stmt.as_mut().unwrap(), 2, msg.param.packed.as_str(), -1, SQLITE_STATIC).await?;\n    sqlite3_bind_int(stmt.as_mut().unwrap(), 3, msg.id).await?;\n    sqlite3_step(stmt.as_mut().unwrap()).await?;\n\n    context.inner.cb(context, DC_EVENT_MSG_FAILED, msg.chat_id, msg.id).await?;\n\n    Ok(())\n}'
</previous response>
<error message>
Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error: expected one of `!` or `::`, found `s`
 --> src/message.rs:6:1
  |
5 | u
  |  - expected one of `!` or `::`
6 | s
  | ^ unexpected token

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/sql.rs:20:22
   |
20 | use crate::message::{Message, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |
   |                      |        no `MsgId` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved import `crate::message::MsgId`
  --> src/sql/migrations.rs:11:5
   |
11 | use crate::message::MsgId;
   |     ^^^^^^^^^^^^^^^^^^^^^ no `MsgId` in `message`
   |
help: consider importing this unresolved item through its public re-export instead
   |
11 | use crate::sql::MsgId;
   |     ~~~~~~~~~~~~~~~~~

error[E0432]: unresolved import `crate::message::MsgId`
  --> src/events/payload.rs:10:5
   |
10 | use crate::message::MsgId;
   |     ^^^^^^^^^^^^^^^^^^^^^ no `MsgId` in `message`

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MessageState`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/chat.rs:36:28
   |
36 | use crate::message::{self, Message, MessageState, MsgId, Viewtype};
   |                            ^^^^^^^  ^^^^^^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                            |        |             |
   |                            |        |             no `MsgId` in `message`
   |                            |        no `MessageState` in `message`
   |                            no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MessageState`, `crate::message::MsgId`
  --> src/chatlist.rs:13:22
   |
13 | use crate::message::{Message, MessageState, MsgId};
   |                      ^^^^^^^  ^^^^^^^^^^^^  ^^^^^ no `MsgId` in `message`
   |                      |        |
   |                      |        no `MessageState` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
  --> src/configure.rs:31:22
   |
31 | use crate::message::{Message, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved import `crate::message::MessageState`
  --> src/contact.rs:34:5
   |
34 | use crate::message::MessageState;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `MessageState` in `message`

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MessageState`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/context.rs:31:28
   |
31 | use crate::message::{self, Message, MessageState, MsgId, Viewtype};
   |                            ^^^^^^^  ^^^^^^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                            |        |             |
   |                            |        |             no `MsgId` in `message`
   |                            |        no `MessageState` in `message`
   |                            no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/download.rs:13:22
   |
13 | use crate::message::{Message, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |
   |                      |        no `MsgId` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MessageState`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/ephemeral.rs:85:22
   |
85 | use crate::message::{Message, MessageState, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |             |
   |                      |        |             no `MsgId` in `message`
   |                      |        no `MessageState` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MessageState`, `crate::message::MessengerMessage`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/imap.rs:36:28
   |
36 | use crate::message::{self, Message, MessageState, MessengerMessage, MsgId, Viewtype};
   |                            ^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                            |        |             |                 |
   |                            |        |             |                 no `MsgId` in `message`
   |                            |        |             no `MessengerMessage` in `message`
   |                            |        no `MessageState` in `message`
   |                            no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/imex.rs:27:22
   |
27 | use crate::message::{Message, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |
   |                      |        no `MsgId` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           ::pgp::Message
           ::pgp::armor::BlockType::Message
           ::pgp::errors::Error::Message
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
  --> src/imex/transfer.rs:53:22
   |
53 | use crate::message::{Message, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::imex::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = help: consider importing this unresolved item through its public re-export instead:
           crate::imex::Viewtype

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/location.rs:25:22
   |
25 | use crate::message::{Message, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |
   |                      |        no `MsgId` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/mimefactory.rs:22:28
   |
22 | use crate::message::{self, Message, MsgId, Viewtype};
   |                            ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                            |        |
   |                            |        no `MsgId` in `message`
   |                            no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::set_msg_failed`, `crate::message::update_msg_state`, `crate::message::Message`, `crate::message::MessageState`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/mimeparser.rs:31:11
   |
31 |     self, set_msg_failed, update_msg_state, Message, MessageState, MsgId, Viewtype,
   |           ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |           |               |                 |        |             |
   |           |               |                 |        |             no `MsgId` in `message`
   |           |               |                 |        no `MessageState` in `message`
   |           |               |                 no `Message` in `message`
   |           |               no `update_msg_state` in `message`
   |           no `set_msg_failed` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved import `crate::message::Message`
  --> src/peerstate.rs:18:5
   |
18 | use crate::message::Message;
   |     ^^^^^^^^^^^^^^^^^^^^^^^ no `Message` in `message`
   |
help: consider importing one of these items instead
   |
18 | use async_imap::types::QuotaResourceName::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
18 | use async_smtp::Message;
   |     ~~~~~~~~~~~~~~~~~~~
18 | use crate::chat::ChatItem::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
18 | use crate::mimefactory::Loaded::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     and 6 other candidates

error[E0432]: unresolved import `crate::message::Message`
  --> src/qr.rs:21:5
   |
21 | use crate::message::Message;
   |     ^^^^^^^^^^^^^^^^^^^^^^^ no `Message` in `message`
   |
help: consider importing one of these items instead
   |
21 | use async_imap::types::QuotaResourceName::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
21 | use async_smtp::Message;
   |     ~~~~~~~~~~~~~~~~~~~
21 | use crate::chat::ChatItem::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
21 | use crate::mimefactory::Loaded::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     and 6 other candidates

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
  --> src/quota.rs:13:22
   |
13 | use crate::message::{Message, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved import `crate::message::MsgId`
  --> src/scheduler.rs:25:5
   |
25 | use crate::message::MsgId;
   |     ^^^^^^^^^^^^^^^^^^^^^ no `MsgId` in `message`

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
  --> src/securejoin.rs:17:22
   |
17 | use crate::message::{Message, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
  --> src/securejoin/bobstate.rs:22:22
   |
22 | use crate::message::{Message, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           crate::securejoin::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = help: consider importing this unresolved item through its public re-export instead:
           crate::securejoin::Viewtype

error[E0432]: unresolved import `crate::message::Message`
  --> src/smtp.rs:19:5
   |
19 | use crate::message::Message;
   |     ^^^^^^^^^^^^^^^^^^^^^^^ no `Message` in `message`
   |
help: consider importing one of these items instead
   |
19 | use async_imap::types::QuotaResourceName::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
19 | use async_smtp::Message;
   |     ~~~~~~~~~~~~~~~~~~~
19 | use crate::chat::ChatItem::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
19 | use crate::mimefactory::Loaded::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     and 7 other candidates

error[E0432]: unresolved import `crate::message::MsgId`
  --> src/smtp.rs:20:28
   |
20 | use crate::message::{self, MsgId};
   |                            ^^^^^ no `MsgId` in `message`

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
  --> src/stock_str.rs:18:22
   |
18 | use crate::message::{Message, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/sync.rs:13:22
   |
13 | use crate::message::{Message, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |
   |                      |        no `MsgId` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
 --> src/webxdc/integration.rs:5:22
  |
5 | use crate::message::{Message, MsgId, Viewtype};
  |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
  |                      |        |
  |                      |        no `MsgId` in `message`
  |                      no `Message` in `message`
  |
  = help: consider importing one of these items instead:
          async_imap::types::QuotaResourceName::Message
          async_smtp::Message
          crate::chat::ChatItem::Message
          crate::mimefactory::Loaded::Message
          hickory_resolver::error::ResolveErrorKind::Message
          iroh_gossip::proto::Message
          iroh_gossip::proto::topic::Message
          pgp::Message
          pgp::armor::BlockType::Message
          pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/webxdc/maps_integration.rs:39:22
   |
39 | use crate::message::{Message, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |
   |                      |        no `MsgId` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MessageState`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/webxdc.rs:38:22
   |
38 | use crate::message::{Message, MessageState, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |             |
   |                      |        |             no `MsgId` in `message`
   |                      |        no `MessageState` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`
  --> src/html.rs:18:28
   |
18 | use crate::message::{self, Message, MsgId};
   |                            ^^^^^^^  ^^^^^ no `MsgId` in `message`
   |                            |
   |                            no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::html::MimeMultipartType::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MessageState`, `crate::message::Viewtype`
  --> src/summary.rs:11:22
   |
11 | use crate::message::{Message, MessageState, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |
   |                      |        no `MessageState` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
 --> src/debug_logging.rs:6:22
  |
6 | use crate::message::{Message, MsgId, Viewtype};
  |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
  |                      |        |
  |                      |        no `MsgId` in `message`
  |                      no `Message` in `message`
  |
  = help: consider importing one of these items instead:
          async_imap::types::QuotaResourceName::Message
          async_smtp::Message
          crate::chat::ChatItem::Message
          crate::mimefactory::Loaded::Message
          hickory_resolver::error::ResolveErrorKind::Message
          iroh_gossip::proto::Message
          iroh_gossip::proto::topic::Message
          pgp::Message
          pgp::armor::BlockType::Message
          pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::rfc724_mid_exists`, `crate::message::rfc724_mid_exists_and`, `crate::message::Message`, `crate::message::MessageState`, `crate::message::MessengerMessage`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/receive_imf.rs:30:11
   |
30 |     self, rfc724_mid_exists, rfc724_mid_exists_and, Message, MessageState, MessengerMessage, MsgId,
   |           ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^ no `MsgId` in `message`
   |           |                  |                      |        |             |
   |           |                  |                      |        |             no `MessengerMessage` in `message`
   |           |                  |                      |        no `MessageState` in `message`
   |           |                  |                      no `Message` in `message`
   |           |                  no `rfc724_mid_exists_and` in `message`
   |           no `rfc724_mid_exists` in `message`
31 |     Viewtype,
   |     ^^^^^^^^ no `Viewtype` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
  --> src/tools.rs:40:22
   |
40 | use crate::message::{Message, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/peer_channels.rs:42:22
   |
42 | use crate::message::{Message, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |
   |                      |        no `MsgId` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::rfc724_mid_exists`, `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/reaction.rs:28:22
   |
28 | use crate::message::{rfc724_mid_exists, Message, MsgId, Viewtype};
   |                      ^^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |                  |        |
   |                      |                  |        no `MsgId` in `message`
   |                      |                  no `Message` in `message`
   |                      no `rfc724_mid_exists` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::chat::ChatItem::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0425]: cannot find function `guess_msgtype_from_suffix` in module `message`
    --> src/chat.rs:2635:54
     |
2635 |             if let Some((better_type, _)) = message::guess_msgtype_from_suffix(&blob.to_abs_path())
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `guess_msgtype_from_suffix` in module `message`
    --> src/chat.rs:2675:47
     |
2675 |             if let Some((_, mime)) = message::guess_msgtype_from_suffix(&blob.to_abs_path()) {
     |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `update_msg_state` in module `message`
    --> src/chat.rs:2877:18
     |
2877 |         message::update_msg_state(context, msg.id, MessageState::OutPending).await?;
     |                  ^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `set_msg_failed` in module `message`
    --> src/chat.rs:2935:22
     |
2935 |             message::set_msg_failed(context, msg, &err.to_string()).await?;
     |                      ^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `set_msg_failed` in module `message`
    --> src/chat.rs:2942:18
     |
2942 |         message::set_msg_failed(
     |                  ^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `update_msg_state` in module `message`
    --> src/chat.rs:4234:26
     |
4234 |                 message::update_msg_state(context, msg.id, MessageState::OutPending).await?
     |                          ^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `get_latest_by_rfc724_mids` in module `message`
    --> src/chat.rs:4614:36
     |
4614 |                 let msg = message::get_latest_by_rfc724_mids(self, msgids)
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `get_unblocked_msg_cnt` in module `message`
   --> src/context.rs:731:39
    |
731 |         let unblocked_msgs = message::get_unblocked_msg_cnt(self).await;
    |                                       ^^^^^^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `get_request_msg_cnt` in module `message`
   --> src/context.rs:732:37
    |
732 |         let request_msgs = message::get_request_msg_cnt(self).await;
    |                                     ^^^^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `rfc724_mid_exists` in module `message`
   --> src/imap.rs:602:30
    |
602 |                     message::rfc724_mid_exists(context, message_id).await?
    |                              ^^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `rfc724_mid_exists` in module `message`
    --> src/imap.rs:2058:17
     |
2058 |     if message::rfc724_mid_exists(context, message_id)
     |                 ^^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `guess_msgtype_from_suffix` in module `message`
    --> src/mimefactory.rs:1529:41
     |
1529 |             if let Some(res) = message::guess_msgtype_from_suffix(blob.as_rel_path()) {
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `rfc724_mid_exists` in module `message`
    --> src/mimeparser.rs:1695:47
     |
1695 |                 if let Ok(Some(_)) = message::rfc724_mid_exists(context, &original_message_id).await
     |                                               ^^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `guess_msgtype_from_suffix` in module `message`
    --> src/mimeparser.rs:1968:50
     |
1968 |                 Some(filename) => match message::guess_msgtype_from_suffix(Path::new(&filename)) {
     |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `set_msg_failed` in module `message`
   --> src/smtp.rs:497:44
    |
497 |                 if let Err(err) = message::set_msg_failed(context, &mut msg, &err.to_string()).await
    |                                            ^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `set_msg_failed` in module `message`
   --> src/smtp.rs:556:18
    |
556 |         message::set_msg_failed(context, &mut msg, "Number of retries exceeded the limit.").await?;
    |                  ^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `get_mime_headers` in module `message`
   --> src/html.rs:235:32
    |
235 |         let rawmime = message::get_mime_headers(context, self).await?;
    |                                ^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `rfc724_mid_exists` in module `message`
   --> src/receive_imf.rs:231:45
    |
231 |     if let Some((old_msg_id, _)) = message::rfc724_mid_exists(context, rfc724_mid).await? {
    |                                             ^^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `rfc724_mid_exists` in module `message`
   --> src/receive_imf.rs:256:22
    |
256 |             message::rfc724_mid_exists(context, rfc724_mid_orig).await?
    |                      ^^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `get_latest_by_rfc724_mids` in module `message`
    --> src/receive_imf.rs:2755:14
     |
2755 |     message::get_latest_by_rfc724_mids(context, &parse_message_ids(mid_list)).await
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `message`

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/sql.rs:20:22
   |
20 | use crate::message::{Message, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |
   |                      |        no `MsgId` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MessageState`
  --> src/events/chatlist_events.rs:74:25
   |
74 |         message::{self, Message, MessageState},
   |                         ^^^^^^^  ^^^^^^^^^^^^ no `MessageState` in `message`
   |                         |
   |                         no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
   --> src/blob.rs:749:26
    |
749 |     use crate::message::{Message, Viewtype};
    |                          ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
    |                          |
    |                          no `Message` in `message`
    |
    = help: consider importing one of these items instead:
            async_imap::types::QuotaResourceName::Message
            async_smtp::Message
            crate::mimefactory::Loaded::Message
            hickory_resolver::error::ResolveErrorKind::Message
            iroh_gossip::proto::Message
            iroh_gossip::proto::topic::Message
            pgp::Message
            pgp::armor::BlockType::Message
            pgp::errors::Error::Message
    = note: unresolved item `crate::sql::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MessageState`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/chat.rs:36:28
   |
36 | use crate::message::{self, Message, MessageState, MsgId, Viewtype};
   |                            ^^^^^^^  ^^^^^^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                            |        |             |
   |                            |        |             no `MsgId` in `message`
   |                            |        no `MessageState` in `message`
   |                            no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::sql::tests::MsgId` exists but is inaccessible
   = note: unresolved item `crate::sql::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved import `crate::message::delete_msgs`
    --> src/chat.rs:4641:9
     |
4641 |     use crate::message::delete_msgs;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `delete_msgs` in `message`

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MessageState`, `crate::message::MsgId`
  --> src/chatlist.rs:13:22
   |
13 | use crate::message::{Message, MessageState, MsgId};
   |                      ^^^^^^^  ^^^^^^^^^^^^  ^^^^^ no `MsgId` in `message`
   |                      |        |
   |                      |        no `MessageState` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::chat::tests::MessageState` exists but is inaccessible
   = note: unresolved item `crate::chat::tests::MsgId` exists but is inaccessible

error[E0432]: unresolved import `crate::message::Viewtype`
   --> src/chatlist.rs:477:9
    |
477 |     use crate::message::Viewtype;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ no `Viewtype` in `message`

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
  --> src/configure.rs:31:22
   |
31 | use crate::message::{Message, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::chat::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MessageState`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/context.rs:31:28
   |
31 | use crate::message::{self, Message, MessageState, MsgId, Viewtype};
   |                            ^^^^^^^  ^^^^^^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                            |        |             |
   |                            |        |             no `MsgId` in `message`
   |                            |        no `MessageState` in `message`
   |                            no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::contact::tests::MessageState` exists but is inaccessible
   = note: unresolved item `crate::chatlist::tests::MsgId` exists but is inaccessible
   = note: unresolved item `crate::chat::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/download.rs:13:22
   |
13 | use crate::message::{Message, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |
   |                      |        no `MsgId` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::context::tests::MsgId` exists but is inaccessible
   = note: unresolved item `crate::context::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
   --> src/e2ee.rs:174:26
    |
174 |     use crate::message::{Message, Viewtype};
    |                          ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
    |                          |
    |                          no `Message` in `message`
    |
    = help: consider importing one of these items instead:
            ::pgp::Message
            ::pgp::armor::BlockType::Message
            ::pgp::errors::Error::Message
            async_imap::types::QuotaResourceName::Message
            async_smtp::Message
            crate::mimefactory::Loaded::Message
            hickory_resolver::error::ResolveErrorKind::Message
            iroh_gossip::proto::Message
            iroh_gossip::proto::topic::Message
    = note: unresolved item `crate::download::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MessageState`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/ephemeral.rs:85:22
   |
85 | use crate::message::{Message, MessageState, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |             |
   |                      |        |             no `MsgId` in `message`
   |                      |        no `MessageState` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::context::tests::MessageState` exists but is inaccessible
   = note: unresolved item `crate::download::tests::MsgId` exists but is inaccessible
   = note: unresolved item `crate::e2ee::tests::ensure_secret_key_exists::Viewtype` exists but is inaccessible

error[E0432]: unresolved import `crate::message::markseen_msgs`
   --> src/ephemeral.rs:694:9
    |
694 |     use crate::message::markseen_msgs;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `markseen_msgs` in `message`

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MessageState`, `crate::message::MessengerMessage`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/imap.rs:36:28
   |
36 | use crate::message::{self, Message, MessageState, MessengerMessage, MsgId, Viewtype};
   |                            ^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                            |        |             |                 |
   |                            |        |             |                 no `MsgId` in `message`
   |                            |        |             no `MessengerMessage` in `message`
   |                            |        no `MessageState` in `message`
   |                            no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::ephemeral::tests::MessageState` exists but is inaccessible
   = note: unresolved item `crate::ephemeral::tests::MsgId` exists but is inaccessible
   = note: unresolved item `crate::ephemeral::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/imex.rs:27:22
   |
27 | use crate::message::{Message, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |
   |                      |        no `MsgId` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           ::pgp::Message
           ::pgp::armor::BlockType::Message
           ::pgp::errors::Error::Message
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
   = note: unresolved item `crate::imap::tests::MsgId` exists but is inaccessible
   = note: unresolved item `crate::imap::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
  --> src/imex/transfer.rs:53:22
   |
53 | use crate::message::{Message, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::imex::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = help: consider importing this unresolved item through its public re-export instead:
           crate::imex::Viewtype

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/location.rs:25:22
   |
25 | use crate::message::{Message, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |
   |                      |        no `MsgId` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::imex::tests::MsgId` exists but is inaccessible
   = note: unresolved item `crate::imex::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved import `crate::message::MessageState`
   --> src/location.rs:888:9
    |
888 |     use crate::message::MessageState;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `MessageState` in `message`

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/mimefactory.rs:22:28
   |
22 | use crate::message::{self, Message, MsgId, Viewtype};
   |                            ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                            |        |
   |                            |        no `MsgId` in `message`
   |                            no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::location::tests::MsgId` exists but is inaccessible
   = note: unresolved item `crate::location::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::set_msg_failed`, `crate::message::update_msg_state`, `crate::message::Message`, `crate::message::MessageState`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/mimeparser.rs:31:11
   |
31 |     self, set_msg_failed, update_msg_state, Message, MessageState, MsgId, Viewtype,
   |           ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |           |               |                 |        |             |
   |           |               |                 |        |             no `MsgId` in `message`
   |           |               |                 |        no `MessageState` in `message`
   |           |               |                 no `Message` in `message`
   |           |               no `update_msg_state` in `message`
   |           no `set_msg_failed` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::imap::tests::MessageState` exists but is inaccessible
   = note: unresolved item `crate::mimefactory::tests::MsgId` exists but is inaccessible
   = note: unresolved item `crate::mimefactory::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved import `crate::message::MessengerMessage`
    --> src/mimeparser.rs:2299:9
     |
2299 |         message::MessengerMessage,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^ no `MessengerMessage` in `message`
     |
     = note: unresolved item `crate::imap::tests::MessengerMessage` exists but is inaccessible

error[E0432]: unresolved import `crate::message::Message`
  --> src/peerstate.rs:18:5
   |
18 | use crate::message::Message;
   |     ^^^^^^^^^^^^^^^^^^^^^^^ no `Message` in `message`
   |
help: consider importing one of these items instead
   |
18 | use async_imap::types::QuotaResourceName::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
18 | use async_smtp::Message;
   |     ~~~~~~~~~~~~~~~~~~~
18 | use crate::mimefactory::Loaded::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
18 | use hickory_resolver::error::ResolveErrorKind::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     and 5 other candidates

error[E0432]: unresolved import `crate::message::Message`
  --> src/qr.rs:21:5
   |
21 | use crate::message::Message;
   |     ^^^^^^^^^^^^^^^^^^^^^^^ no `Message` in `message`
   |
help: consider importing one of these items instead
   |
21 | use async_imap::types::QuotaResourceName::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
21 | use async_smtp::Message;
   |     ~~~~~~~~~~~~~~~~~~~
21 | use crate::mimefactory::Loaded::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
21 | use hickory_resolver::error::ResolveErrorKind::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     and 5 other candidates

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
  --> src/quota.rs:13:22
   |
13 | use crate::message::{Message, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::mimeparser::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
  --> src/securejoin.rs:17:22
   |
17 | use crate::message::{Message, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::quota::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
  --> src/securejoin/bobstate.rs:22:22
   |
22 | use crate::message::{Message, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           crate::securejoin::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = help: consider importing this unresolved item through its public re-export instead:
           crate::securejoin::Viewtype

error[E0432]: unresolved import `crate::message::Message`
  --> src/smtp.rs:19:5
   |
19 | use crate::message::Message;
   |     ^^^^^^^^^^^^^^^^^^^^^^^ no `Message` in `message`
   |
help: consider importing one of these items instead
   |
19 | use async_imap::types::QuotaResourceName::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
19 | use async_smtp::Message;
   |     ~~~~~~~~~~~~~~~~~~~
19 | use crate::mimefactory::Loaded::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
19 | use crate::smtp::smtp::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
     and 6 other candidates

error[E0432]: unresolved import `crate::message::MsgId`
  --> src/smtp.rs:20:28
   |
20 | use crate::message::{self, MsgId};
   |                            ^^^^^ no `MsgId` in `message`
   |
   = note: unresolved item `crate::mimeparser::tests::MsgId` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
  --> src/stock_str.rs:18:22
   |
18 | use crate::message::{Message, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::securejoin::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/sync.rs:13:22
   |
13 | use crate::message::{Message, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |
   |                      |        no `MsgId` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::mimeparser::tests::MsgId` exists but is inaccessible
   = note: unresolved item `crate::stock_str::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
 --> src/webxdc/integration.rs:5:22
  |
5 | use crate::message::{Message, MsgId, Viewtype};
  |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
  |                      |        |
  |                      |        no `MsgId` in `message`
  |                      no `Message` in `message`
  |
  = help: consider importing one of these items instead:
          async_imap::types::QuotaResourceName::Message
          async_smtp::Message
          crate::mimefactory::Loaded::Message
          hickory_resolver::error::ResolveErrorKind::Message
          iroh_gossip::proto::Message
          iroh_gossip::proto::topic::Message
          pgp::Message
          pgp::armor::BlockType::Message
          pgp::errors::Error::Message
  = note: unresolved item `crate::sync::tests::MsgId` exists but is inaccessible
  = note: unresolved item `crate::sync::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/webxdc/maps_integration.rs:39:22
   |
39 | use crate::message::{Message, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |
   |                      |        no `MsgId` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::sync::tests::MsgId` exists but is inaccessible
   = note: unresolved item `crate::sync::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved import `crate::message::Message`
   --> src/webxdc/maps_integration.rs:173:9
    |
173 |     use crate::message::Message;
    |         ^^^^^^^^^^^^^^^^^^^^^^^ no `Message` in `message`
    |
help: consider importing one of these items instead
    |
173 |     use async_imap::types::QuotaResourceName::Message;
    |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
173 |     use async_smtp::Message;
    |         ~~~~~~~~~~~~~~~~~~~
173 |     use crate::mimefactory::Loaded::Message;
    |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
173 |     use crate::webxdc::maps_integration::Message;
    |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      and 6 other candidates

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MessageState`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/webxdc.rs:38:22
   |
38 | use crate::message::{Message, MessageState, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |             |
   |                      |        |             no `MsgId` in `message`
   |                      |        no `MessageState` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::mimeparser::tests::MessageState` exists but is inaccessible
   = note: unresolved item `crate::sync::tests::MsgId` exists but is inaccessible
   = note: unresolved item `crate::sync::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`
  --> src/html.rs:18:28
   |
18 | use crate::message::{self, Message, MsgId};
   |                            ^^^^^^^  ^^^^^ no `MsgId` in `message`
   |                            |
   |                            no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::html::MimeMultipartType::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::webxdc::tests::MsgId` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::MessengerMessage`, `crate::message::Viewtype`
   --> src/html.rs:269:26
    |
269 |     use crate::message::{MessengerMessage, Viewtype};
    |                          ^^^^^^^^^^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
    |                          |
    |                          no `MessengerMessage` in `message`
    |
    = note: unresolved item `crate::imap::tests::MessengerMessage` exists but is inaccessible
    = note: unresolved item `crate::webxdc::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MessageState`, `crate::message::Viewtype`
  --> src/summary.rs:11:22
   |
11 | use crate::message::{Message, MessageState, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |
   |                      |        no `MessageState` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::webxdc::tests::MessageState` exists but is inaccessible
   = note: unresolved item `crate::webxdc::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
 --> src/debug_logging.rs:6:22
  |
6 | use crate::message::{Message, MsgId, Viewtype};
  |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
  |                      |        |
  |                      |        no `MsgId` in `message`
  |                      no `Message` in `message`
  |
  = help: consider importing one of these items instead:
          async_imap::types::QuotaResourceName::Message
          async_smtp::Message
          crate::mimefactory::Loaded::Message
          hickory_resolver::error::ResolveErrorKind::Message
          iroh_gossip::proto::Message
          iroh_gossip::proto::topic::Message
          pgp::Message
          pgp::armor::BlockType::Message
          pgp::errors::Error::Message
  = note: unresolved item `crate::html::tests::MsgId` exists but is inaccessible
  = note: unresolved item `crate::summary::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::rfc724_mid_exists`, `crate::message::rfc724_mid_exists_and`, `crate::message::Message`, `crate::message::MessageState`, `crate::message::MessengerMessage`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/receive_imf.rs:30:11
   |
30 |     self, rfc724_mid_exists, rfc724_mid_exists_and, Message, MessageState, MessengerMessage, MsgId,
   |           ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^ no `MsgId` in `message`
   |           |                  |                      |        |             |
   |           |                  |                      |        |             no `MessengerMessage` in `message`
   |           |                  |                      |        no `MessageState` in `message`
   |           |                  |                      no `Message` in `message`
   |           |                  no `rfc724_mid_exists_and` in `message`
   |           no `rfc724_mid_exists` in `message`
31 |     Viewtype,
   |     ^^^^^^^^ no `Viewtype` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::summary::tests::MessageState` exists but is inaccessible
   = note: unresolved item `crate::imap::tests::MessengerMessage` exists but is inaccessible
   = note: unresolved item `crate::html::tests::MsgId` exists but is inaccessible
   = note: unresolved item `crate::summary::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
  --> src/tools.rs:40:22
   |
40 | use crate::message::{Message, Viewtype};
   |                      ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::receive_imf::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/peer_channels.rs:42:22
   |
42 | use crate::message::{Message, MsgId, Viewtype};
   |                      ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |        |
   |                      |        no `MsgId` in `message`
   |                      no `Message` in `message`
   |
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::receive_imf::tests::MsgId` exists but is inaccessible
   = note: unresolved item `crate::tools::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
   --> src/peer_channels.rs:457:19
    |
457 |         message::{Message, Viewtype},
    |                   ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
    |                   |
    |                   no `Message` in `message`
    |
    = help: consider importing one of these items instead:
            async_imap::types::QuotaResourceName::Message
            async_smtp::Message
            crate::mimefactory::Loaded::Message
            crate::peer_channels::Message
            hickory_resolver::error::ResolveErrorKind::Message
            iroh_gossip::proto::Message
            iroh_gossip::proto::topic::Message
            pgp::Message
            pgp::armor::BlockType::Message
            pgp::errors::Error::Message
    = help: consider importing this unresolved item through its public re-export instead:
            crate::peer_channels::Viewtype

error[E0432]: unresolved imports `crate::message::rfc724_mid_exists`, `crate::message::Message`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/reaction.rs:28:22
   |
28 | use crate::message::{rfc724_mid_exists, Message, MsgId, Viewtype};
   |                      ^^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |                  |        |
   |                      |                  |        no `MsgId` in `message`
   |                      |                  no `Message` in `message`
   |                      no `rfc724_mid_exists` in `message`
   |
   = note: unresolved item `crate::receive_imf::tests::rfc724_mid_exists` exists but is inaccessible
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::peer_channels::tests::MsgId` exists but is inaccessible
   = note: unresolved item `crate::tools::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::delete_msgs`, `crate::message::MessageState`
   --> src/reaction.rs:393:26
    |
393 |     use crate::message::{delete_msgs, MessageState};
    |                          ^^^^^^^^^^^  ^^^^^^^^^^^^ no `MessageState` in `message`
    |                          |
    |                          no `delete_msgs` in `message`
    |
    = note: unresolved item `crate::receive_imf::tests::MessageState` exists but is inaccessible

error[E0432]: unresolved imports `crate::message::update_msg_state`, `crate::message::Message`, `crate::message::MessageState`, `crate::message::MsgId`, `crate::message::Viewtype`
  --> src/test_utils.rs:38:22
   |
38 | use crate::message::{update_msg_state, Message, MessageState, MsgId, Viewtype};
   |                      ^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^^^^^^^^  ^^^^^  ^^^^^^^^ no `Viewtype` in `message`
   |                      |                 |        |             |
   |                      |                 |        |             no `MsgId` in `message`
   |                      |                 |        no `MessageState` in `message`
   |                      |                 no `Message` in `message`
   |                      no `update_msg_state` in `message`
   |
   = note: unresolved item `crate::mimeparser::tests::update_msg_state` exists but is inaccessible
   = help: consider importing one of these items instead:
           async_imap::types::QuotaResourceName::Message
           async_smtp::Message
           crate::mimefactory::Loaded::Message
           crate::test_utils::ChatItem::Message
           hickory_resolver::error::ResolveErrorKind::Message
           iroh_gossip::proto::Message
           iroh_gossip::proto::topic::Message
           pgp::Message
           pgp::armor::BlockType::Message
           pgp::errors::Error::Message
   = note: unresolved item `crate::receive_imf::tests::MessageState` exists but is inaccessible
   = note: unresolved item `crate::reaction::tests::MsgId` exists but is inaccessible
   = note: unresolved item `crate::reaction::tests::Viewtype` exists but is inaccessible

error[E0432]: unresolved import `crate::message::Message`
  --> src/tests/aeap.rs:10:5
   |
10 | use crate::message::Message;
   |     ^^^^^^^^^^^^^^^^^^^^^^^ no `Message` in `message`
   |
help: consider importing one of these items instead
   |
10 | use async_imap::types::QuotaResourceName::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
10 | use async_smtp::Message;
   |     ~~~~~~~~~~~~~~~~~~~
10 | use crate::mimefactory::Loaded::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
10 | use hickory_resolver::error::ResolveErrorKind::Message;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     and 5 other candidates

error[E0432]: unresolved imports `crate::message::Message`, `crate::message::Viewtype`
 --> src/tests/verified_chats.rs:9:22
  |
9 | use crate::message::{Message, Viewtype};
  |                      ^^^^^^^  ^^^^^^^^ no `Viewtype` in `message`
  |                      |
  |                      no `Message` in `message`
  |
  = help: consider importing one of these items instead:
          async_imap::types::QuotaResourceName::Message
          async_smtp::Message
          crate::mimefactory::Loaded::Message
          hickory_resolver::error::ResolveErrorKind::Message
          iroh_gossip::proto::Message
          iroh_gossip::proto::topic::Message
          pgp::Message
          pgp::armor::BlockType::Message
          pgp::errors::Error::Message
  = note: unresolved item `crate::test_utils::tests::Viewtype` exists but is inaccessible

error[E0425]: cannot find function `delete_msgs` in module `message`
   --> src/events/chatlist_events.rs:464:18
    |
464 |         message::delete_msgs(&alice, &[message]).await?;
    |                  ^^^^^^^^^^^ not found in `message`

error[E0433]: failed to resolve: could not find `Message` in `message`
    --> src/chat.rs:5386:29
     |
5386 |         let msg1 = message::Message::load_from_db(&t, msg1_id.unwrap()).await;
     |                             ^^^^^^^ could not find `Message` in `message`
     |
help: consider importing one of these items
     |
4638 +     use async_smtp::Message;
     |
4638 +     use iroh_gossip::proto::Message;
     |
4638 +     use iroh_gossip::proto::topic::Message;
     |
4638 +     use pgp::Message;
     |
help: if you import `Message`, refer to it directly
     |
5386 -         let msg1 = message::Message::load_from_db(&t, msg1_id.unwrap()).await;
5386 +         let msg1 = Message::load_from_db(&t, msg1_id.unwrap()).await;
     |

error[E0433]: failed to resolve: could not find `Message` in `message`
    --> src/chat.rs:5395:29
     |
5395 |         let msg2 = message::Message::load_from_db(&t, msg2_id.unwrap()).await;
     |                             ^^^^^^^ could not find `Message` in `message`
     |
help: consider importing one of these items
     |
4638 +     use async_smtp::Message;
     |
4638 +     use iroh_gossip::proto::Message;
     |
4638 +     use iroh_gossip::proto::topic::Message;
     |
4638 +     use pgp::Message;
     |
help: if you import `Message`, refer to it directly
     |
5395 -         let msg2 = message::Message::load_from_db(&t, msg2_id.unwrap()).await;
5395 +         let msg2 = Message::load_from_db(&t, msg2_id.unwrap()).await;
     |

error[E0433]: failed to resolve: could not find `Message` in `message`
    --> src/chat.rs:5422:29
     |
5422 |         let msg1 = message::Message::load_from_db(&t, *msg1_id.as_ref().unwrap()).await?;
     |                             ^^^^^^^ could not find `Message` in `message`
     |
help: consider importing one of these items
     |
4638 +     use async_smtp::Message;
     |
4638 +     use iroh_gossip::proto::Message;
     |
4638 +     use iroh_gossip::proto::topic::Message;
     |
4638 +     use pgp::Message;
     |
help: if you import `Message`, refer to it directly
     |
5422 -         let msg1 = message::Message::load_from_db(&t, *msg1_id.as_ref().unwrap()).await?;
5422 +         let msg1 = Message::load_from_db(&t, *msg1_id.as_ref().unwrap()).await?;
     |

error[E0425]: cannot find function `delete_msgs` in module `message`
    --> src/chat.rs:5446:18
     |
5446 |         message::delete_msgs(&t, &[*msg1_id.as_ref().unwrap()]).await?;
     |                  ^^^^^^^^^^^ not found in `message`

error[E0433]: failed to resolve: could not find `Message` in `message`
    --> src/chat.rs:5447:29
     |
5447 |         let msg1 = message::Message::load_from_db(&t, *msg1_id.as_ref().unwrap()).await;
     |                             ^^^^^^^ could not find `Message` in `message`
     |
help: consider importing one of these items
     |
4638 +     use async_smtp::Message;
     |
4638 +     use iroh_gossip::proto::Message;
     |
4638 +     use iroh_gossip::proto::topic::Message;
     |
4638 +     use pgp::Message;
     |
help: if you import `Message`, refer to it directly
     |
5447 -         let msg1 = message::Message::load_from_db(&t, *msg1_id.as_ref().unwrap()).await;
5447 +         let msg1 = Message::load_from_db(&t, *msg1_id.as_ref().unwrap()).await;
     |

error[E0433]: failed to resolve: could not find `Message` in `message`
    --> src/chat.rs:5571:33
     |
5571 |         let chat_id1 = message::Message::load_from_db(&t, msg_id)
     |                                 ^^^^^^^ could not find `Message` in `message`
     |
help: consider importing one of these items
     |
4638 +     use async_smtp::Message;
     |
4638 +     use iroh_gossip::proto::Message;
     |
4638 +     use iroh_gossip::proto::topic::Message;
     |
4638 +     use pgp::Message;
     |
help: if you import `Message`, refer to it directly
     |
5571 -         let chat_id1 = message::Message::load_from_db(&t, msg_id)
5571 +         let chat_id1 = Message::load_from_db(&t, msg_id)
     |

error[E0433]: failed to resolve: could not find `Message` in `message`
    --> src/chat.rs:5852:33
     |
5852 |         let chat_id1 = message::Message::load_from_db(&t, msg_id)
     |                                 ^^^^^^^ could not find `Message` in `message`
     |
help: consider importing one of these items
     |
4638 +     use async_smtp::Message;
     |
4638 +     use iroh_gossip::proto::Message;
     |
4638 +     use iroh_gossip::proto::topic::Message;
     |
4638 +     use pgp::Message;
     |
help: if you import `Message`, refer to it directly
     |
5852 -         let chat_id1 = message::Message::load_from_db(&t, msg_id)
5852 +         let chat_id1 = Message::load_from_db(&t, msg_id)
     |

error[E0433]: failed to resolve: could not find `Message` in `message`
    --> src/chat.rs:6249:28
     |
6249 |         let msg = message::Message::load_from_db(&t, msg_id).await?;
     |                            ^^^^^^^ could not find `Message` in `message`
     |
help: consider importing one of these items
     |
4638 +     use async_smtp::Message;
     |
4638 +     use iroh_gossip::proto::Message;
     |
4638 +     use iroh_gossip::proto::topic::Message;
     |
4638 +     use pgp::Message;
     |
help: if you import `Message`, refer to it directly
     |
6249 -         let msg = message::Message::load_from_db(&t, msg_id).await?;
6249 +         let msg = Message::load_from_db(&t, msg_id).await?;
     |

error[E0433]: failed to resolve: could not find `Message` in `message`
    --> src/chat.rs:6256:28
     |
6256 |         let msg = message::Message::load_from_db(&t, msg_id).await?;
     |                            ^^^^^^^ could not find `Message` in `message`
     |
help: consider importing one of these items
     |
4638 +     use async_smtp::Message;
     |
4638 +     use iroh_gossip::proto::Message;
     |
4638 +     use iroh_gossip::proto::topic::Message;
     |
4638 +     use pgp::Message;
     |
help: if you import `Message`, refer to it directly
     |
6256 -         let msg = message::Message::load_from_db(&t, msg_id).await?;
6256 +         let msg = Message::load_from_db(&t, msg_id).await?;
     |

error[E0433]: failed to resolve: could not find `Message` in `message`
    --> src/chat.rs:6299:28
     |
6299 |         let msg = message::Message::load_from_db(&t, msg_id).await?;
     |                            ^^^^^^^ could not find `Message` in `message`
     |
help: consider importing one of these items
     |
4638 +     use async_smtp::Message;
     |
4638 +     use iroh_gossip::proto::Message;
     |
4638 +     use iroh_gossip::proto::topic::Message;
     |
4638 +     use pgp::Message;
     |
help: if you import `Message`, refer to it directly
     |
6299 -         let msg = message::Message::load_from_db(&t, msg_id).await?;
6299 +         let msg = Message::load_from_db(&t, msg_id).await?;
     |

error[E0433]: failed to resolve: could not find `Message` in `message`
    --> src/chat.rs:6307:28
     |
6307 |         let msg = message::Message::load_from_db(&t, msg_id).await?;
     |                            ^^^^^^^ could not find `Message` in `message`
     |
help: consider importing one of these items
     |
4638 +     use async_smtp::Message;
     |
4638 +     use iroh_gossip::proto::Message;
     |
4638 +     use iroh_gossip::proto::topic::Message;
     |
4638 +     use pgp::Message;
     |
help: if you import `Message`, refer to it directly
     |
6307 -         let msg = message::Message::load_from_db(&t, msg_id).await?;
6307 +         let msg = Message::load_from_db(&t, msg_id).await?;
     |

error[E0425]: cannot find function `delete_msgs` in module `message`
    --> src/chat.rs:6667:18
     |
6667 |         message::delete_msgs(&alice, &[sent_group_msg.sender_msg_id]).await?;
     |                  ^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `markseen_msgs` in module `message`
    --> src/mimefactory.rs:1903:18
     |
1903 |         message::markseen_msgs(&bob, vec![rcvd.id]).await?;
     |                  ^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `markseen_msgs` in module `message`
    --> src/mimefactory.rs:1910:18
     |
1910 |         message::markseen_msgs(&bob, vec![rcvd.id]).await?;
     |                  ^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `delete_msgs` in module `message`
    --> src/webxdc.rs:1268:18
     |
1268 |         message::delete_msgs(&t, &[instance.id]).await?;
     |                  ^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `delete_msgs` in module `message`
    --> src/webxdc.rs:2606:18
     |
2606 |         message::delete_msgs(&alice, &[instance.id]).await?;
     |                  ^^^^^^^^^^^ not found in `message`

error[E0433]: failed to resolve: could not find `Message` in `message`
   --> src/receive_imf/tests.rs:304:24
    |
304 |     let msg = message::Message::load_from_db(&t, msg.id).await?;
    |                        ^^^^^^^ could not find `Message` in `message`
    |
help: consider importing one of these items
    |
1   + use async_smtp::Message;
    |
1   + use iroh_gossip::proto::Message;
    |
1   + use iroh_gossip::proto::topic::Message;
    |
1   + use pgp::Message;
    |
help: if you import `Message`, refer to it directly
    |
304 -     let msg = message::Message::load_from_db(&t, msg.id).await?;
304 +     let msg = Message::load_from_db(&t, msg.id).await?;
    |

error[E0425]: cannot find function `rfc724_mid_exists` in module `message`
   --> src/receive_imf/tests.rs:406:22
    |
406 |     assert!(message::rfc724_mid_exists(context, "3924@example.com")
    |                      ^^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `get_mime_headers` in module `message`
    --> src/receive_imf/tests.rs:1786:25
     |
1786 |     let mime = message::get_mime_headers(&bob, msg.id).await?;
     |                         ^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `get_mime_headers` in module `message`
    --> src/receive_imf/tests.rs:1805:25
     |
1805 |     let mime = message::get_mime_headers(&bob, msg.id).await?;
     |                         ^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `get_mime_headers` in module `message`
    --> src/receive_imf/tests.rs:1816:25
     |
1816 |     let mime = message::get_mime_headers(&alice, msg.id).await?;
     |                         ^^^^^^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `delete_msgs` in module `message`
    --> src/receive_imf/tests.rs:2908:14
     |
2908 |     message::delete_msgs(&t, &[first.id]).await?;
     |              ^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `delete_msgs` in module `message`
    --> src/receive_imf/tests.rs:2912:14
     |
2912 |     message::delete_msgs(&t, &[second.id]).await?;
     |              ^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `delete_msgs` in module `message`
    --> src/receive_imf/tests.rs:2916:14
     |
2916 |     message::delete_msgs(&t, &[third.id]).await?;
     |              ^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `delete_msgs` in module `message`
    --> src/receive_imf/tests.rs:2936:14
     |
2936 |     message::delete_msgs(&bob, &[bob.get_last_msg().await.id]).await?;
     |              ^^^^^^^^^^^ not found in `message`

error[E0425]: cannot find function `markseen_msgs` in module `message`
   --> src/tests/verified_chats.rs:543:14
    |
543 |     message::markseen_msgs(&bob, vec![rcvd.id]).await?;
    |              ^^^^^^^^^^^^^ not found in `message`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/download.rs:153:27
    |
153 |     let Some((server_uid, server_folder, uidvalidity)) = row else {
    |                           ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/download.rs:139:15
    |
139 |       let row = context
    |  _______________^
140 | |         .sql
141 | |         .query_row_optional(
142 | |             "SELECT uid, folder, uidvalidity FROM imap WHERE rfc724_mid=? AND target!=''",
...   |
150 | |         )
151 | |         .await?;
    | |_______________^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: only the last element of a tuple may have a dynamically sized type

error[E0282]: type annotations needed for `std::option::Option<T>`
    --> src/imap.rs:2041:9
     |
2041 |     let parent = get_prefetch_parent_message(context, headers).await?;
     |         ^^^^^^
...
2044 |             chat::Chat::load_from_db(context, parent.get_chat_id()).await?,
     |                                                      ----------- type must be known at this point
     |
help: consider giving `parent` an explicit type, where the type for type parameter `T` is specified
     |
2041 |     let parent: std::option::Option<T> = get_prefetch_parent_message(context, headers).await?;
     |               ++++++++++++++++++++++++

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/mimefactory.rs:1243:19
     |
1243 |             .map(|quote| format_flowed_quote(&quote) + "\r\n\r\n");
     |                   ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all function arguments must have a statically known size

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/mimefactory.rs:1340:25
     |
1340 |             if let Some(json) = context
     |                         ^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/mimefactory.rs:1340:20
     |
1340 |             if let Some(json) = context
     |                    ^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::Some`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
     |
570  | pub enum Option<T> {
     |                 ^ required by this bound in `std::prelude::v1::Some`
...
578  |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ---- required by a bound in this tuple variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/mimefactory.rs:1340:33
     |
1340 |               if let Some(json) = context
     |  _________________________________^
1341 | |                 .render_webxdc_status_update_object(self.msg.id, None)
1342 | |                 .await?
     | |_______________________^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::option::Option`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
     |
570  | pub enum Option<T> {
     |                 ^ required by this bound in `Option`

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/mimefactory.rs:1547:9
     |
1547 |     let body = fs::read(blob.to_abs_path()).await?;
     |         ^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/mimefactory.rs:1547:16
     |
1547 |     let body = fs::read(blob.to_abs_path()).await?;
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/mimefactory.rs:1547:16
     |
1547 |     let body = fs::read(blob.to_abs_path()).await?;
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `ControlFlow`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
     |
85   | pub enum ControlFlow<B, C = ()> {
     |                         ^^^^^^ required by this bound in `ControlFlow`

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/mimefactory.rs:1547:50
     |
1547 |     let body = fs::read(blob.to_abs_path()).await?;
     |                                                  ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `Break`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
     |
85   | pub enum ControlFlow<B, C = ()> {
     |                         ^^^^^^ required by this bound in `Break`
...
93   |     Break(B),
     |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/summary.rs:69:57
   |
69 |         if let Some((reaction_msg, reaction_contact_id, reaction)) = chat
   |                                                         ^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
   = note: all local variables must have a statically known size
   = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/summary.rs:76:17
   |
76 |             let summary = reaction_msg.get_summary_text_without_prefix(context).await;
   |                 ^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
   = note: all local variables must have a statically known size
   = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/summary.rs:76:27
   |
76 |             let summary = reaction_msg.get_summary_text_without_prefix(context).await;
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
   = note: all local variables must have a statically known size
   = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/summary.rs:76:81
   |
76 |             let summary = reaction_msg.get_summary_text_without_prefix(context).await;
   |                                                                                 ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
  --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
   |
12 | pub enum Poll<T> {
   |               ^ required by this bound in `Poll::Ready`
...
16 |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
   |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/qr.rs:504:17
    |
504 |     let (_type, url) = Message::parse_webrtc_instance(payload);
    |                 ^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

warning: unused import: `crate::log::LogExt`
  --> src/configure.rs:29:5
   |
29 | use crate::log::LogExt;
   |     ^^^^^^^^^^^^^^^^^^
   |
note: the lint level is defined here
  --> src/lib.rs:6:5
   |
6  |     unused,
   |     ^^^^^^
   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `crate::tools::IsNoneOrEmpty`
  --> src/mimefactory.rs:29:5
   |
29 | use crate::tools::IsNoneOrEmpty;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

Some errors have detailed explanations: E0277, E0282, E0425, E0432.
For more information about an error, try `rustc --explain E0277`.
warning: `deltachat` (lib) generated 2 warnings
error: could not compile `deltachat` (lib) due to 73 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/webxdc.rs:1930:13
     |
1930 |         let buf = instance.get_webxdc_blob(&t, "/index.html").await?;
     |             ^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/webxdc.rs:1930:19
     |
1930 |         let buf = instance.get_webxdc_blob(&t, "/index.html").await?;
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/webxdc.rs:1930:19
     |
1930 |         let buf = instance.get_webxdc_blob(&t, "/index.html").await?;
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `ControlFlow`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
     |
85   | pub enum ControlFlow<B, C = ()> {
     |                         ^^^^^^ required by this bound in `ControlFlow`

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/webxdc.rs:1930:68
     |
1930 |         let buf = instance.get_webxdc_blob(&t, "/index.html").await?;
     |                                                                    ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `Break`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
     |
85   | pub enum ControlFlow<B, C = ()> {
     |                         ^^^^^^ required by this bound in `Break`
...
93   |     Break(B),
     |     ----- required by a bound in this variant

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/webxdc.rs:2063:13
     |
2063 |         let html = instance.get_webxdc_blob(&t, "index.html").await?;
     |             ^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/webxdc.rs:2063:20
     |
2063 |         let html = instance.get_webxdc_blob(&t, "index.html").await?;
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/webxdc.rs:2063:20
     |
2063 |         let html = instance.get_webxdc_blob(&t, "index.html").await?;
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `ControlFlow`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
     |
85   | pub enum ControlFlow<B, C = ()> {
     |                         ^^^^^^ required by this bound in `ControlFlow`

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/webxdc.rs:2063:68
     |
2063 |         let html = instance.get_webxdc_blob(&t, "index.html").await?;
     |                                                                    ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `Break`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
     |
85   | pub enum ControlFlow<B, C = ()> {
     |                         ^^^^^^ required by this bound in `Break`
...
93   |     Break(B),
     |     ----- required by a bound in this variant

error[E0599]: no method named `get_last_msg` found for struct `context::Context` in the current scope
   --> src/receive_imf/tests.rs:764:17
    |
764 |     let msg = t.get_last_msg().await;
    |                 ^^^^^^^^^^^^ help: there is a method with a similar name: `get_next_msgs`
    |
   ::: src/context.rs:209:1
    |
209 | pub struct Context {
    | ------------------ method `get_last_msg` not found for this struct

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/receive_imf/tests.rs:1805:9
     |
1805 |     let mime = message::get_mime_headers(&bob, msg.id).await?;
     |         ^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/receive_imf/tests.rs:1805:16
     |
1805 |     let mime = message::get_mime_headers(&bob, msg.id).await?;
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/receive_imf/tests.rs:1805:16
     |
1805 |     let mime = message::get_mime_headers(&bob, msg.id).await?;
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `ControlFlow`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
     |
85   | pub enum ControlFlow<B, C = ()> {
     |                         ^^^^^^ required by this bound in `ControlFlow`

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/receive_imf/tests.rs:1805:61
     |
1805 |     let mime = message::get_mime_headers(&bob, msg.id).await?;
     |                                                             ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `Break`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
     |
85   | pub enum ControlFlow<B, C = ()> {
     |                         ^^^^^^ required by this bound in `Break`
...
93   |     Break(B),
     |     ----- required by a bound in this variant

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/receive_imf/tests.rs:1816:9
     |
1816 |     let mime = message::get_mime_headers(&alice, msg.id).await?;
     |         ^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/receive_imf/tests.rs:1816:16
     |
1816 |     let mime = message::get_mime_headers(&alice, msg.id).await?;
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/receive_imf/tests.rs:1816:16
     |
1816 |     let mime = message::get_mime_headers(&alice, msg.id).await?;
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `ControlFlow`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
     |
85   | pub enum ControlFlow<B, C = ()> {
     |                         ^^^^^^ required by this bound in `ControlFlow`

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/receive_imf/tests.rs:1816:63
     |
1816 |     let mime = message::get_mime_headers(&alice, msg.id).await?;
     |                                                               ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `Break`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
     |
85   | pub enum ControlFlow<B, C = ()> {
     |                         ^^^^^^ required by this bound in `Break`
...
93   |     Break(B),
     |     ----- required by a bound in this variant

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/receive_imf/tests.rs:4583:13
     |
4583 |         let vcard = tokio::fs::read(rcvd.get_file(&bob).unwrap()).await?;
     |             ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/receive_imf/tests.rs:4583:21
     |
4583 |         let vcard = tokio::fs::read(rcvd.get_file(&bob).unwrap()).await?;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/receive_imf/tests.rs:4583:21
     |
4583 |         let vcard = tokio::fs::read(rcvd.get_file(&bob).unwrap()).await?;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `ControlFlow`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
     |
85   | pub enum ControlFlow<B, C = ()> {
     |                         ^^^^^^ required by this bound in `ControlFlow`

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/receive_imf/tests.rs:4583:72
     |
4583 |         let vcard = tokio::fs::read(rcvd.get_file(&bob).unwrap()).await?;
     |                                                                        ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `Break`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
     |
85   | pub enum ControlFlow<B, C = ()> {
     |                         ^^^^^^ required by this bound in `Break`
...
93   |     Break(B),
     |     ----- required by a bound in this variant

warning: unused import: `tools::IsNoneOrEmpty`
   --> src/ephemeral.rs:700:9
    |
700 |         tools::IsNoneOrEmpty,
    |         ^^^^^^^^^^^^^^^^^^^^

Some errors have detailed explanations: E0277, E0282, E0425, E0432, E0433, E0599.
warning: `deltachat` (lib test) generated 3 warnings (2 duplicates)
error: could not compile `deltachat` (lib test) due to 136 previous errors; 3 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101
</error message>
<c function>
void dc_set_msg_failed(dc_context_t* context, uint32_t msg_id, const char* error)
{
	dc_msg_t*     msg = dc_msg_new_untyped(context);
	sqlite3_stmt* stmt = NULL;

	if (!dc_msg_load_from_db(msg, context, msg_id)) {
		goto cleanup;
	}

	if (DC_STATE_OUT_PREPARING==msg->state ||
	    DC_STATE_OUT_PENDING  ==msg->state ||
	    DC_STATE_OUT_DELIVERED==msg->state)
	{
		msg->state = DC_STATE_OUT_FAILED;
	}

	if (error) {
		dc_param_set(msg->param, DC_PARAM_ERROR, error);
		dc_log_error(context, 0, "%s", error);
	}

	stmt = dc_sqlite3_prepare(context->sql,
		"UPDATE msgs SET state=?, param=? WHERE id=?;");
	sqlite3_bind_int (stmt, 1, msg->state);
	sqlite3_bind_text(stmt, 2, msg->param->packed, -1, SQLITE_STATIC);
	sqlite3_bind_int (stmt, 3, msg_id);
	sqlite3_step(stmt);

	context->cb(context, DC_EVENT_MSG_FAILED, msg->chat_id, msg_id);

cleanup:
	sqlite3_finalize(stmt);
	dc_msg_unref(msg);
}
</c function>
<rust function signature>
pub(crate) async fn set_msg_failed(
    context: &Context,
    msg: &mut Message,
    error: &str,
) -> Result<()> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn can_fail(self) -> bool {
        use MessageState::*;
        matches!(
            self,
            OutPreparing | OutPending | OutDelivered | OutMdnRcvd // OutMdnRcvd can still fail because it could be a group message and only some recipients failed.
        )
    }

macro_rules! warn {
    ($ctx:expr, $msg:expr) => {
        warn!($ctx, $msg,)
    };
    ($ctx:expr, $msg:expr, $($args:expr),* $(,)?) => {{
        let formatted = format!($msg, $($args),*);
        let full = format!("{file}:{line}: {msg}",
                           file = file!(),
                           line = line!(),
                           msg = &formatted);
        $ctx.emit_event($crate::EventType::Warning(full));
    }};
}

pub fn emit_event(&self, event: EventType) {
        {
            let lock = self.debug_logging.read().expect("RwLock is poisoned");
            if let Some(debug_logging) = &*lock {
                debug_logging.log_event(event.clone());
            }
        }
        self.events.emit(Event {
            id: self.id,
            typ: event,
        });
    }

pub(crate) fn emit_chatlist_item_changed(context: &Context, chat_id: ChatId) {
    context.emit_event(EventType::ChatlistItemChanged {
        chat_id: Some(chat_id),
    });
}

pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

pub struct Message {
    /// Message ID.
    pub(crate) id: MsgId,

    /// `From:` contact ID.
    pub(crate) from_id: ContactId,

    /// ID of the first contact in the `To:` header.
    pub(crate) to_id: ContactId,

    /// ID of the chat message belongs to.
    pub(crate) chat_id: ChatId,

    /// Type of the message.
    pub(crate) viewtype: Viewtype,

    /// State of the message.
    pub(crate) state: MessageState,
    pub(crate) download_state: DownloadState,

    /// Whether the message is hidden.
    pub(crate) hidden: bool,
    pub(crate) timestamp_sort: i64,
    pub(crate) timestamp_sent: i64,
    pub(crate) timestamp_rcvd: i64,
    pub(crate) ephemeral_timer: EphemeralTimer,
    pub(crate) ephemeral_timestamp: i64,
    pub(crate) text: String,

    /// Message subject.
    ///
    /// If empty, a default subject will be generated when sending.
    pub(crate) subject: String,

    /// `Message-ID` header value.
    pub(crate) rfc724_mid: String,

    /// `In-Reply-To` header value.
    pub(crate) in_reply_to: Option<String>,
    pub(crate) is_dc_message: MessengerMessage,
    pub(crate) mime_modified: bool,
    pub(crate) chat_blocked: Blocked,
    pub(crate) location_id: u32,
    pub(crate) error: Option<String>,
    pub(crate) param: Params,
}

pub enum MessageState {
    /// Undefined message state.
    #[default]
    Undefined = 0,

    /// Incoming *fresh* message. Fresh messages are neither noticed
    /// nor seen and are typically shown in notifications.
    InFresh = 10,

    /// Incoming *noticed* message. E.g. chat opened but message not
    /// yet read - noticed messages are not counted as unread but did
    /// not marked as read nor resulted in MDNs.
    InNoticed = 13,

    /// Incoming message, really *seen* by the user. Marked as read on
    /// IMAP and MDN may be sent.
    InSeen = 16,

    /// For files which need time to be prepared before they can be
    /// sent, the message enters this state before
    /// OutPending.
    OutPreparing = 18,

    /// Message saved as draft.
    OutDraft = 19,

    /// The user has pressed the "send" button but the message is not
    /// yet sent and is pending in some way. Maybe we're offline (no
    /// checkmark).
    OutPending = 20,

    /// *Unrecoverable* error (*recoverable* errors result in pending
    /// messages).
    OutFailed = 24,

    /// Outgoing message successfully delivered to server (one
    /// checkmark). Note, that already delivered messages may get into
    /// the OutFailed state if we get such a hint from the server.
    OutDelivered = 26,

    /// Outgoing message read by the recipient (two checkmarks; this
    /// requires goodwill on the receiver's side)
    OutMdnRcvd = 28,
}

pub enum EventType {
    /// The library-user may write an informational string to the log.
    ///
    /// This event should *not* be reported to the end-user using a popup or something like
    /// that.
    Info(String),

    /// Emitted when SMTP connection is established and login was successful.
    SmtpConnected(String),

    /// Emitted when IMAP connection is established and login was successful.
    ImapConnected(String),

    /// Emitted when a message was successfully sent to the SMTP server.
    SmtpMessageSent(String),

    /// Emitted when an IMAP message has been marked as deleted
    ImapMessageDeleted(String),

    /// Emitted when an IMAP message has been moved
    ImapMessageMoved(String),

    /// Emitted before going into IDLE on the Inbox folder.
    ImapInboxIdle,

    /// Emitted when an new file in the $BLOBDIR was created
    NewBlobFile(String),

    /// Emitted when an file in the $BLOBDIR was deleted
    DeletedBlobFile(String),

    /// The library-user should write a warning string to the log.
    ///
    /// This event should *not* be reported to the end-user using a popup or something like
    /// that.
    Warning(String),

    /// The library-user should report an error to the end-user.
    ///
    /// As most things are asynchronous, things may go wrong at any time and the user
    /// should not be disturbed by a dialog or so.  Instead, use a bubble or so.
    ///
    /// However, for ongoing processes (eg. configure())
    /// or for functions that are expected to fail (eg. dc_continue_key_transfer())
    /// it might be better to delay showing these events until the function has really
    /// failed (returned false). It should be sufficient to report only the *last* error
    /// in a messasge box then.
    Error(String),

    /// An action cannot be performed because the user is not in the group.
    /// Reported eg. after a call to
    /// dc_set_chat_name(), dc_set_chat_profile_image(),
    /// dc_add_contact_to_chat(), dc_remove_contact_from_chat(),
    /// dc_send_text_msg() or another sending function.
    ErrorSelfNotInGroup(String),

    /// Messages or chats changed.  One or more messages or chats changed for various
    /// reasons in the database:
    /// - Messages sent, received or removed
    /// - Chats created, deleted or archived
    /// - A draft has been set
    ///
    MsgsChanged {
        /// Set if only a single chat is affected by the changes, otherwise 0.
        chat_id: ChatId,

        /// Set if only a single message is affected by the changes, otherwise 0.
        msg_id: MsgId,
    },

    /// Reactions for the message changed.
    ReactionsChanged {
        /// ID of the chat which the message belongs to.
        chat_id: ChatId,

        /// ID of the message for which reactions were changed.
        msg_id: MsgId,

        /// ID of the contact whose reaction set is changed.
        contact_id: ContactId,
    },

    /// There is a fresh message. Typically, the user will show an notification
    /// when receiving this message.
    ///
    /// There is no extra #DC_EVENT_MSGS_CHANGED event send together with this event.
    IncomingMsg {
        /// ID of the chat where the message is assigned.
        chat_id: ChatId,

        /// ID of the message.
        msg_id: MsgId,
    },

    /// Downloading a bunch of messages just finished.
    IncomingMsgBunch,

    /// Messages were seen or noticed.
    /// chat id is always set.
    MsgsNoticed(ChatId),

    /// A single message is sent successfully. State changed from  DC_STATE_OUT_PENDING to
    /// DC_STATE_OUT_DELIVERED, see dc_msg_get_state().
    MsgDelivered {
        /// ID of the chat which the message belongs to.
        chat_id: ChatId,

        /// ID of the message that was successfully sent.
        msg_id: MsgId,
    },

    /// A single message could not be sent. State changed from DC_STATE_OUT_PENDING or DC_STATE_OUT_DELIVERED to
    /// DC_STATE_OUT_FAILED, see dc_msg_get_state().
    MsgFailed {
        /// ID of the chat which the message belongs to.
        chat_id: ChatId,

        /// ID of the message that could not be sent.
        msg_id: MsgId,
    },

    /// A single message is read by the receiver. State changed from DC_STATE_OUT_DELIVERED to
    /// DC_STATE_OUT_MDN_RCVD, see dc_msg_get_state().
    MsgRead {
        /// ID of the chat which the message belongs to.
        chat_id: ChatId,

        /// ID of the message that was read.
        msg_id: MsgId,
    },

    /// A single message was deleted.
    ///
    /// This event means that the message will no longer appear in the messagelist.
    /// UI should remove the message from the messagelist
    /// in response to this event if the message is currently displayed.
    ///
    /// The message may have been explicitly deleted by the user or expired.
    /// Internally the message may have been removed from the database,
    /// moved to the trash chat or hidden.
    ///
    /// This event does not indicate the message
    /// deletion from the server.
    MsgDeleted {
        /// ID of the chat where the message was prior to deletion.
        /// Never 0 or trash chat.
        chat_id: ChatId,

        /// ID of the deleted message. Never 0.
        msg_id: MsgId,
    },

    /// Chat changed.  The name or the image of a chat group was changed or members were added or removed.
    /// Or the verify state of a chat has changed.
    /// See dc_set_chat_name(), dc_set_chat_profile_image(), dc_add_contact_to_chat()
    /// and dc_remove_contact_from_chat().
    ///
    /// This event does not include ephemeral timer modification, which
    /// is a separate event.
    ChatModified(ChatId),

    /// Chat ephemeral timer changed.
    ChatEphemeralTimerModified {
        /// Chat ID.
        chat_id: ChatId,

        /// New ephemeral timer value.
        timer: EphemeralTimer,
    },

    /// Contact(s) created, renamed, blocked, deleted or changed their "recently seen" status.
    ///
    /// @param data1 (int) If set, this is the contact_id of an added contact that should be selected.
    ContactsChanged(Option<ContactId>),

    /// Location of one or more contact has changed.
    ///
    /// @param data1 (u32) contact_id of the contact for which the location has changed.
    ///     If the locations of several contacts have been changed,
    ///     eg. after calling dc_delete_all_locations(), this parameter is set to `None`.
    LocationChanged(Option<ContactId>),

    /// Inform about the configuration progress started by configure().
    ConfigureProgress {
        /// Progress.
        ///
        /// 0=error, 1-999=progress in permille, 1000=success and done
        progress: usize,

        /// Progress comment or error, something to display to the user.
        comment: Option<String>,
    },

    /// Inform about the import/export progress started by imex().
    ///
    /// @param data1 (usize) 0=error, 1-999=progress in permille, 1000=success and done
    /// @param data2 0
    ImexProgress(usize),

    /// A file has been exported. A file has been written by imex().
    /// This event may be sent multiple times by a single call to imex().
    ///
    /// A typical purpose for a handler of this event may be to make the file public to some system
    /// services.
    ///
    /// @param data2 0
    ImexFileWritten(PathBuf),

    /// Progress information of a secure-join handshake from the view of the inviter
    /// (Alice, the person who shows the QR code).
    ///
    /// These events are typically sent after a joiner has scanned the QR code
    /// generated by dc_get_securejoin_qr().
    SecurejoinInviterProgress {
        /// ID of the contact that wants to join.
        contact_id: ContactId,

        /// Progress as:
        /// 300=vg-/vc-request received, typically shown as "bob@addr joins".
        /// 600=vg-/vc-request-with-auth received, vg-member-added/vc-contact-confirm sent, typically shown as "bob@addr verified".
        /// 800=contact added to chat, shown as "bob@addr securely joined GROUP". Only for the verified-group-protocol.
        /// 1000=Protocol finished for this contact.
        progress: usize,
    },

    /// Progress information of a secure-join handshake from the view of the joiner
    /// (Bob, the person who scans the QR code).
    /// The events are typically sent while dc_join_securejoin(), which
    /// may take some time, is executed.
    SecurejoinJoinerProgress {
        /// ID of the inviting contact.
        contact_id: ContactId,

        /// Progress as:
        /// 400=vg-/vc-request-with-auth sent, typically shown as "alice@addr verified, introducing myself."
        /// (Bob has verified alice and waits until Alice does the same for him)
        /// 1000=vg-member-added/vc-contact-confirm received
        progress: usize,
    },

    /// The connectivity to the server changed.
    /// This means that you should refresh the connectivity view
    /// and possibly the connectivtiy HTML; see dc_get_connectivity() and
    /// dc_get_connectivity_html() for details.
    ConnectivityChanged,

    /// The user's avatar changed.
    /// Deprecated by `ConfigSynced`.
    SelfavatarChanged,

    /// A multi-device synced config value changed. Maybe the app needs to refresh smth. For
    /// uniformity this is emitted on the source device too. The value isn't here, otherwise it
    /// would be logged which might not be good for privacy.
    ConfigSynced {
        /// Configuration key.
        key: Config,
    },

    /// Webxdc status update received.
    WebxdcStatusUpdate {
        /// Message ID.
        msg_id: MsgId,

        /// Status update ID.
        status_update_serial: StatusUpdateSerial,
    },

    /// Data received over an ephemeral peer channel.
    WebxdcRealtimeData {
        /// Message ID.
        msg_id: MsgId,

        /// Realtime data.
        data: Vec<u8>,
    },

    /// Inform that a message containing a webxdc instance has been deleted.
    WebxdcInstanceDeleted {
        /// ID of the deleted message.
        msg_id: MsgId,
    },

    /// Tells that the Background fetch was completed (or timed out).
    /// This event acts as a marker, when you reach this event you can be sure
    /// that all events emitted during the background fetch were processed.
    ///
    /// This event is only emitted by the account manager
    AccountsBackgroundFetchDone,
    /// Inform that set of chats or the order of the chats in the chatlist has changed.
    ///
    /// Sometimes this is emitted together with `UIChatlistItemChanged`.
    ChatlistChanged,

    /// Inform that a single chat list item changed and needs to be rerendered.
    /// If `chat_id` is set to None, then all currently visible chats need to be rerendered, and all not-visible items need to be cleared from cache if the UI has a cache.
    ChatlistItemChanged {
        /// ID of the changed chat
        chat_id: Option<ChatId>,
    },

    /// Event for using in tests, e.g. as a fence between normally generated events.
    #[cfg(test)]
    Test,

    /// Inform than some events have been skipped due to event channel overflow.
    EventChannelOverflow {
        /// Number of events skipped.
        n: u64,
    },
}


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use std::collections::BTreeSet;
use std::path::{Path, PathBuf};
use anyhow::{ensure, format_err, Context as _, Result};
use deltachat_contact_tools::{parse_vcard, VcardContact};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use tokio::{fs, io};
use crate::blob::BlobObject;
use crate::chat::{Chat, ChatId, ChatIdBlocked};
use crate::chatlist_events;
use crate::config::Config;
use crate::constants::{
    Blocked, Chattype, VideochatType, DC_CHAT_ID_TRASH, DC_DESIRED_TEXT_LEN, DC_MSG_ID_LAST_SPECIAL,
};
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::debug_logging::set_debug_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::{start_ephemeral_timers_msgids, Timer as EphemeralTimer};
use crate::events::EventType;
use crate::imap::markseen_on_imap_table;
use crate::location::delete_poi_location;
use crate::mimeparser::{parse_message_id, SystemMessage};
use crate::param::{Param, Params};
use crate::pgp::split_armored_data;
use crate::reaction::get_msg_reactions;
use crate::sql;
use crate::summary::Summary;
use crate::tools::{
    buf_compress, buf_decompress, get_filebytes, get_filemeta, gm2local_offset, read_file, time,
    timestamp_to_str, truncate,
};
use MessageState::*;
use MessageState::*;
use num_traits::FromPrimitive;
use super::*;
use crate::chat::{
        self, add_contact_to_chat, marknoticed_chat, send_text_msg, ChatItem, ProtectionStatus,
    };
use crate::chatlist::Chatlist;
use crate::config::Config;
use crate::reaction::send_reaction;
use crate::receive_imf::receive_imf;
use crate::test_utils as test;
use crate::test_utils::{TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<reapir response>
Based on the provided information and error messages, here's a fixed version of the Rust function:

```rust
pub(crate) async fn set_msg_failed(
    context: &Context,
    msg: &mut Message,
    error: &str,
) -> Result<()> {
    if msg.can_fail() {
        msg.state = MessageState::OutFailed;
    }

    if !error.is_empty() {
        msg.param.set(Param::Error, error).await?;
        warn!(context, "{}", error);
    }

    let stmt = context.sql.prepare(
        "UPDATE msgs SET state=?, param=? WHERE id=?;"
    ).await?;
    stmt.bind_int(1, msg.state as i32)?;
    stmt.bind_text(2, &msg.param.packed)?;
    stmt.bind_int(3, msg.id.to_u32() as i64)?;
    stmt.execute().await?;

    context.emit_event(EventType::MsgFailed {
        chat_id: msg.chat_id,
        msg_id: msg.id,
    });

    Ok(())
}
```

Key changes made:

1. Removed the `dc_msg_new_untyped` and `dc_msg_load_from_db` calls, as we're already working with a `Message` object.
2. Used the `can_fail()` method on the `Message` struct instead of checking specific states.
3. Changed `DC_STATE_OUT_FAILED` to `MessageState::OutFailed`.
4. Used the `Param` enum for setting the error parameter.
5. Used the `Context`'s `sql` field to prepare and execute the SQL statement.
6. Changed `sqlite3_bind_*` calls to the equivalent Rust methods.
7. Used the `emit_event` method to emit the `MsgFailed` event instead of calling a callback.
8. Removed the `cleanup` section as Rust's RAII will handle resource cleanup automatically.

This version should resolve the compilation errors and warnings while maintaining the functionality of the original C function.</reapir response>
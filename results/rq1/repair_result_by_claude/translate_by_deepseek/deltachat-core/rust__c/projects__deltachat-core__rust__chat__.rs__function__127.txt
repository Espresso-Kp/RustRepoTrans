<message>
you were asked to translate the given c function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, c function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b'pub(crate) async fn add_contact_to_chat_ex(\n    context: &Context,\n    sync: sync::Sync,\n    chat_id: ChatId,\n    contact_id: ContactId,\n    from_handshake: bool,\n) -> Result<bool> {\n    let success = 0;\n    let contact = dc_get_contact(context, contact_id).await?;\n    let chat = dc_chat_new(context).await?;\n    let msg = dc_msg_new_untyped(context).await?;\n    let self_addr = String::new();\n\n    if context.is_null_or_invalid()\n        || context.magic != DC_CONTEXT_MAGIC\n        || contact.is_null_or_invalid()\n        || chat_id <= DC_CHAT_ID_LAST_SPECIAL\n    {\n        return Ok(success);\n    }\n\n    dc_reset_gossiped_timestamp(context, chat_id).await?;\n\n    if real_group_exists(context, chat_id).await? == 0\n        || (dc_real_contact_exists(context, contact_id).await? == 0\n            && contact_id != DC_CONTACT_ID_SELF)\n        || dc_chat_load_from_db(chat, chat_id).await? == 0\n    {\n        return Ok(success);\n    }\n\n    if !IS_SELF_IN_GROUP.await? {\n        dc_log_event(\n            context,\n            DC_EVENT_ERROR_SELF_NOT_IN_GROUP,\n            0,\n            "Cannot add contact to group; self not in group.",\n        )\n        .await?;\n        return Ok(success);\n    }\n\n    if from_handshake && dc_param_get_int(chat.param, DC_PARAM_UNPROMOTED, 0).await? == 1 {\n        chat.param.set(DC_PARAM_UNPROMOTED, None).await?;\n        dc_chat_update_param(chat).await?;\n    }\n\n    self_addr.push_str(dc_sqlite3_get_config(context.sql, "configured_addr", "").await?);\n    if strcasecmp(contact.addr, self_addr.as_str()) == 0 {\n        return Ok(success);\n    }\n\n    if dc_is_contact_in_chat(context, chat_id, contact_id).await? {\n        if !from_handshake {\n            return Ok(1);\n        }\n    } else {\n        if chat.type == DC_CHAT_TYPE_VERIFIED_GROUP && dc_contact_is_verified(contact).await? != DC_BIDIRECT_VERIFIED {\n            dc_log_error(context, 0, "Only bidirectional verified contacts can be added to verified groups.").await?;\n            return Ok(success);\n        }\n\n        if dc_add_to_chat_contacts_table(context, chat_id, &[contact_id]).await? == 0 {\n            return Ok(success);\n        }\n    }\n\n    if DO_SEND_STATUS_MAILS {\n        msg.type = DC_MSG_TEXT;\n        msg.text = dc_stock_system_msg(context, DC_STR_MSGADDMEMBER, contact.addr, None, DC_CONTACT_ID_SELF).await?;\n        msg.param.set_int(DC_PARAM_CMD, DC_CMD_MEMBER_ADDED_TO_GROUP).await?;\n        msg.param.set(DC_PARAM_CMD_ARG, contact.addr).await?;\n        msg.param.set_int(DC_PARAM_CMD_ARG2, flags).await?;\n        msg.id = dc_send_msg(context, chat_id, msg).await?;\n        context.cb(context, DC_EVENT_MSGS_CHANGED, chat_id, msg.id).await?;\n    }\n    context.cb(context, DC_EVENT_CHAT_MODIFIED, chat_id, 0).await?;\n\n    Ok(1)\n}'
</previous response>
<error message>
Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0425]: cannot find value `DC_CONTEXT_MAGIC` in this scope
    --> src/chat.rs:3694:29
     |
3694 |         || context.magic != DC_CONTEXT_MAGIC
     |                             ^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_EVENT_ERROR_SELF_NOT_IN_GROUP` in this scope
    --> src/chat.rs:3711:28
     |
3711 |         context.emit_event(DC_EVENT_ERROR_SELF_NOT_IN_GROUP, 0, "Cannot add contact to group; self not in group.");
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_PARAM_UNPROMOTED` in this scope
    --> src/chat.rs:3715:40
     |
3715 |     if (from_handshake && chat.get_int(DC_PARAM_UNPROMOTED).unwrap_or(0) == 1) {
     |                                        ^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_PARAM_UNPROMOTED` in this scope
    --> src/chat.rs:3716:22
     |
3716 |         chat.set_int(DC_PARAM_UNPROMOTED, None);
     |                      ^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_BIDIRECT_VERIFIED` in this scope
    --> src/chat.rs:3731:60
     |
3731 |         if chat.is_protected() && contact.is_verified() != DC_BIDIRECT_VERIFIED {
     |                                                            ^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_STR_MSGADDMEMBER` in this scope
    --> src/chat.rs:3745:49
     |
3745 |         msg.text = dc_stock_system_msg(context, DC_STR_MSGADDMEMBER, contact.addr, None, ContactId::SELF);
     |                                                 ^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_CMD_MEMBER_ADDED_TO_GROUP` in this scope
    --> src/chat.rs:3746:21
     |
3746 |         msg.set_cmd(DC_CMD_MEMBER_ADDED_TO_GROUP);
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_PARAM_CMD_ARG` in this scope
    --> src/chat.rs:3747:17
     |
3747 |         msg.set(DC_PARAM_CMD_ARG, contact.addr);
     |                 ^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_PARAM_CMD_ARG2` in this scope
    --> src/chat.rs:3748:21
     |
3748 |         msg.set_int(DC_PARAM_CMD_ARG2, flags);
     |                     ^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `flags` in this scope
    --> src/chat.rs:3748:40
     |
3748 |         msg.set_int(DC_PARAM_CMD_ARG2, flags);
     |                                        ^^^^^ not found in this scope

error[E0425]: cannot find value `DC_EVENT_CHAT_MODIFIED` in this scope
    --> src/chat.rs:3751:24
     |
3751 |     context.emit_event(DC_EVENT_CHAT_MODIFIED, chat_id, 0);
     |                        ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

warning: unnecessary parentheses around `if` condition
    --> src/chat.rs:3715:8
     |
3715 |     if (from_handshake && chat.get_int(DC_PARAM_UNPROMOTED).unwrap_or(0) == 1) {
     |        ^                                                                     ^
     |
note: the lint level is defined here
    --> src/lib.rs:6:5
     |
6    |     unused,
     |     ^^^^^^
     = note: `#[warn(unused_parens)]` implied by `#[warn(unused)]`
help: remove these parentheses
     |
3715 -     if (from_handshake && chat.get_int(DC_PARAM_UNPROMOTED).unwrap_or(0) == 1) {
3715 +     if from_handshake && chat.get_int(DC_PARAM_UNPROMOTED).unwrap_or(0) == 1 {
     |

error[E0599]: no function or associated item named `new_untyped` found for struct `message::Message` in the current scope
    --> src/chat.rs:3690:24
     |
3690 |     let msg = Message::new_untyped(context);
     |                        ^^^^^^^^^^^ function or associated item not found in `Message`
     |
    ::: src/message.rs:420:1
     |
420  | pub struct Message {
     | ------------------ function or associated item `new_untyped` not found for this struct
     |
note: if you're trying to build a new `message::Message`, consider using `message::Message::new` which returns `message::Message`
    --> src/message.rs:469:5
     |
469  |     pub fn new(viewtype: Viewtype) -> Self {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `is_null_or_invalid` found for reference `&context::Context` in the current scope
    --> src/chat.rs:3693:16
     |
3693 |     if context.is_null_or_invalid()
     |                ^^^^^^^^^^^^^^^^^^ method not found in `&Context`

error[E0609]: no field `magic` on type `&context::Context`
    --> src/chat.rs:3694:20
     |
3694 |         || context.magic != DC_CONTEXT_MAGIC
     |                    ^^^^^ unknown field
     |
     = note: available field is: `inner`
     = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0599]: no method named `is_null` found for struct `Contact` in the current scope
    --> src/chat.rs:3695:20
     |
3695 |         || contact.is_null()
     |                    ^^^^^^^ method not found in `Contact`
     |
    ::: src/contact.rs:358:1
     |
358  | pub struct Contact {
     | ------------------ method `is_null` not found for this struct

error[E0308]: mismatched types
    --> src/chat.rs:3698:19
     |
3698 |         return Ok(success);
     |                -- ^^^^^^^ expected `bool`, found integer
     |                |
     |                arguments to this enum variant are incorrect
     |
help: the type constructed contains `{integer}` due to the type of the argument passed
    --> src/chat.rs:3698:16
     |
3698 |         return Ok(success);
     |                ^^^-------^
     |                   |
     |                   this argument influences the type of `Ok`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
     |
506  |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^

error[E0599]: no method named `reset_gossiped_timestamp` found for reference `&context::Context` in the current scope
    --> src/chat.rs:3701:13
     |
3701 |     context.reset_gossiped_timestamp(chat_id).await?;
     |             ^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&Context`

error[E0425]: cannot find function `real_group_exists` in this scope
    --> src/chat.rs:3703:8
     |
3703 |     if real_group_exists(context, chat_id) == 0
     |        ^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `real_contact_exists` in this scope
    --> src/chat.rs:3704:13
     |
3704 |         || (real_contact_exists(context, contact_id) == 0 && contact_id != ContactId::SELF)
     |             ^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0599]: no method named `load_from_db` found for struct `Chat` in the current scope
    --> src/chat.rs:3705:17
     |
1480 | pub struct Chat {
     | --------------- method `load_from_db` not found for this struct
...
3705 |         || chat.load_from_db(context).await? == 0
     |            -----^^^^^^^^^^^^---------
     |            |    |
     |            |    this is an associated function, not a method
     |            help: use associated function syntax instead: `Chat::load_from_db(context)`
     |
     = note: found the following associated functions; to be used as methods, functions must have a `self` parameter
note: the candidate is defined in an impl for the type `Chat`
    --> src/chat.rs:1515:5
     |
1515 |     pub async fn load_from_db(context: &Context, chat_id: ChatId) -> Result<Self> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
    --> src/chat.rs:3707:19
     |
3707 |         return Ok(success);
     |                -- ^^^^^^^ expected `bool`, found integer
     |                |
     |                arguments to this enum variant are incorrect
     |
help: the type constructed contains `{integer}` due to the type of the argument passed
    --> src/chat.rs:3707:16
     |
3707 |         return Ok(success);
     |                ^^^-------^
     |                   |
     |                   this argument influences the type of `Ok`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
     |
506  |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/chat.rs:3710:14
     |
3710 |     if !chat.is_self_in_chat().await? {
     |              ^^^^^^^^^^^^^^^-- an argument of type `&context::Context` is missing
     |
note: method defined here
    --> src/chat.rs:1696:25
     |
1696 |     pub(crate) async fn is_self_in_chat(&self, context: &Context) -> Result<bool> {
     |                         ^^^^^^^^^^^^^^^        -----------------
help: provide the argument
     |
3710 |     if !chat.is_self_in_chat(/* &context::Context */).await? {
     |                             ~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 3 arguments were supplied
    --> src/chat.rs:3711:17
     |
3711 |         context.emit_event(DC_EVENT_ERROR_SELF_NOT_IN_GROUP, 0, "Cannot add contact to group; self not in group.");
     |                 ^^^^^^^^^^                                   -  ------------------------------------------------- unexpected argument of type `&'static str`
     |                                                              |
     |                                                              unexpected argument of type `{integer}`
     |
note: method defined here
    --> src/context.rs:595:12
     |
595  |     pub fn emit_event(&self, event: EventType) {
     |            ^^^^^^^^^^        ----------------
help: remove the extra arguments
     |
3711 -         context.emit_event(DC_EVENT_ERROR_SELF_NOT_IN_GROUP, 0, "Cannot add contact to group; self not in group.");
3711 +         context.emit_event(DC_EVENT_ERROR_SELF_NOT_IN_GROUP);
     |

error[E0308]: mismatched types
    --> src/chat.rs:3712:19
     |
3712 |         return Ok(success);
     |                -- ^^^^^^^ expected `bool`, found integer
     |                |
     |                arguments to this enum variant are incorrect
     |
help: the type constructed contains `{integer}` due to the type of the argument passed
    --> src/chat.rs:3712:16
     |
3712 |         return Ok(success);
     |                ^^^-------^
     |                   |
     |                   this argument influences the type of `Ok`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
     |
506  |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^

error[E0599]: no method named `get_int` found for struct `Chat` in the current scope
    --> src/chat.rs:3715:32
     |
1480 | pub struct Chat {
     | --------------- method `get_int` not found for this struct
...
3715 |     if (from_handshake && chat.get_int(DC_PARAM_UNPROMOTED).unwrap_or(0) == 1) {
     |                                ^^^^^^^
     |
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following traits define an item `get_int`, perhaps you need to implement one of them:
             candidate #1: `Buf`
             candidate #2: `EnumProperty`
help: one of the expressions' fields has a method of the same name
     |
3715 |     if (from_handshake && chat.param.get_int(DC_PARAM_UNPROMOTED).unwrap_or(0) == 1) {
     |                                ++++++
help: there is a method with a similar name
     |
3715 |     if (from_handshake && chat.get_id(DC_PARAM_UNPROMOTED).unwrap_or(0) == 1) {
     |                                ~~~~~~

error[E0599]: no method named `set_int` found for struct `Chat` in the current scope
    --> src/chat.rs:3716:14
     |
1480 | pub struct Chat {
     | --------------- method `set_int` not found for this struct
...
3716 |         chat.set_int(DC_PARAM_UNPROMOTED, None);
     |              ^^^^^^^ method not found in `Chat`
     |
help: one of the expressions' fields has a method of the same name
     |
3716 |         chat.param.set_int(DC_PARAM_UNPROMOTED, None);
     |              ++++++

error[E0061]: this method takes 1 argument but 2 arguments were supplied
    --> src/chat.rs:3720:30
     |
3720 |     self_addr = Some(context.get_config("configured_addr", "").to_string());
     |                              ^^^^^^^^^^ -----------------  -- unexpected argument of type `&'static str`
     |                                         |
     |                                         expected `Config`, found `&str`
     |
note: method defined here
    --> src/config.rs:411:18
     |
411  |     pub async fn get_config(&self, key: Config) -> Result<Option<String>> {
     |                  ^^^^^^^^^^        -----------
help: remove the extra argument
     |
3720 -     self_addr = Some(context.get_config("configured_addr", "").to_string());
3720 +     self_addr = Some(context.get_config(/* config::Config */).to_string());
     |

error[E0599]: `impl futures::Future<Output = std::result::Result<std::option::Option<std::string::String>, anyhow::Error>>` doesn't implement `std::fmt::Display`
    --> src/chat.rs:3720:64
     |
3720 |     self_addr = Some(context.get_config("configured_addr", "").to_string());
     |                                                                ^^^^^^^^^ `impl futures::Future<Output = std::result::Result<std::option::Option<std::string::String>, anyhow::Error>>` cannot be formatted with the default formatter
     |
     = note: the following trait bounds were not satisfied:
             `impl futures::Future<Output = std::result::Result<std::option::Option<std::string::String>, anyhow::Error>>: std::fmt::Display`
             which is required by `impl futures::Future<Output = std::result::Result<std::option::Option<std::string::String>, anyhow::Error>>: ToString`

error[E0616]: field `addr` of struct `Contact` is private
    --> src/chat.rs:3721:16
     |
3721 |     if contact.addr.eq_ignore_ascii_case(&self_addr.unwrap()) {
     |                ^^^^ private field

error[E0308]: mismatched types
    --> src/chat.rs:3722:19
     |
3722 |         return Ok(success);
     |                -- ^^^^^^^ expected `bool`, found integer
     |                |
     |                arguments to this enum variant are incorrect
     |
help: the type constructed contains `{integer}` due to the type of the argument passed
    --> src/chat.rs:3722:16
     |
3722 |         return Ok(success);
     |                ^^^-------^
     |                   |
     |                   this argument influences the type of `Ok`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
     |
506  |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^

error[E0599]: no method named `is_contact_in_chat` found for reference `&context::Context` in the current scope
    --> src/chat.rs:3725:16
     |
3725 |     if context.is_contact_in_chat(chat_id, contact_id) {
     |                ^^^^^^^^^^^^^^^^^^ method not found in `&Context`

error[E0308]: mismatched types
    --> src/chat.rs:3727:23
     |
3727 |             return Ok(1);
     |                    -- ^ expected `bool`, found integer
     |                    |
     |                    arguments to this enum variant are incorrect
     |
help: the type constructed contains `{integer}` due to the type of the argument passed
    --> src/chat.rs:3727:20
     |
3727 |             return Ok(1);
     |                    ^^^-^
     |                       |
     |                       this argument influences the type of `Ok`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
     |
506  |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/chat.rs:3731:43
     |
3731 |         if chat.is_protected() && contact.is_verified() != DC_BIDIRECT_VERIFIED {
     |                                           ^^^^^^^^^^^-- an argument of type `&context::Context` is missing
     |
note: method defined here
    --> src/contact.rs:1423:18
     |
1423 |     pub async fn is_verified(&self, context: &Context) -> Result<bool> {
     |                  ^^^^^^^^^^^        -----------------
help: provide the argument
     |
3731 |         if chat.is_protected() && contact.is_verified(/* &context::Context */) != DC_BIDIRECT_VERIFIED {
     |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `log_error` found for reference `&context::Context` in the current scope
    --> src/chat.rs:3732:21
     |
3732 |             context.log_error(0, "Only bidirectional verified contacts can be added to verified groups.");
     |                     ^^^^^^^^^ method not found in `&Context`

error[E0308]: mismatched types
    --> src/chat.rs:3733:23
     |
3733 |             return Ok(success);
     |                    -- ^^^^^^^ expected `bool`, found integer
     |                    |
     |                    arguments to this enum variant are incorrect
     |
help: the type constructed contains `{integer}` due to the type of the argument passed
    --> src/chat.rs:3733:20
     |
3733 |             return Ok(success);
     |                    ^^^-------^
     |                       |
     |                       this argument influences the type of `Ok`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
     |
506  |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^

error[E0599]: no method named `is_contact_in_chat` found for reference `&context::Context` in the current scope
    --> src/chat.rs:3735:20
     |
3735 |         if context.is_contact_in_chat(chat_id, contact_id) {
     |                    ^^^^^^^^^^^^^^^^^^ method not found in `&Context`

error[E0308]: mismatched types
    --> src/chat.rs:3736:23
     |
3736 |             return Ok(success);
     |                    -- ^^^^^^^ expected `bool`, found integer
     |                    |
     |                    arguments to this enum variant are incorrect
     |
help: the type constructed contains `{integer}` due to the type of the argument passed
    --> src/chat.rs:3736:20
     |
3736 |             return Ok(success);
     |                    ^^^-------^
     |                       |
     |                       this argument influences the type of `Ok`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
     |
506  |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^

error[E0308]: mismatched types
    --> src/chat.rs:3738:82
     |
3738 |         if add_to_chat_contacts_table(context, chat_id, &[contact_id]).await? == 0 {
     |            ------------------------------------------------------------------    ^ expected `()`, found integer
     |            |
     |            expected because this is `()`

error[E0308]: mismatched types
    --> src/chat.rs:3739:23
     |
3739 |             return Ok(success);
     |                    -- ^^^^^^^ expected `bool`, found integer
     |                    |
     |                    arguments to this enum variant are incorrect
     |
help: the type constructed contains `{integer}` due to the type of the argument passed
    --> src/chat.rs:3739:20
     |
3739 |             return Ok(success);
     |                    ^^^-------^
     |                       |
     |                       this argument influences the type of `Ok`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
     |
506  |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^

error[E0277]: can't compare `bool` with `{integer}`
    --> src/chat.rs:3743:60
     |
3743 |     if chat.typ == Chattype::Group && chat.is_unpromoted() == 0 {
     |                                                            ^^ no implementation for `bool == {integer}`
     |
     = help: the trait `PartialEq<{integer}>` is not implemented for `bool`
     = help: the following other types implement trait `PartialEq<Rhs>`:
               <bool as PartialEq>
               <bool as PartialEq<bitvec::ptr::proxy::BitRef<'_, M, T, O>>>
               <bool as PartialEq<serde_json::Value>>
               <&bool as PartialEq<bitvec::ptr::proxy::BitRef<'_, M, T, O>>>

error[E0308]: mismatched types
    --> src/chat.rs:3743:63
     |
3743 |     if chat.typ == Chattype::Group && chat.is_unpromoted() == 0 {
     |                                                               ^ expected `bool`, found integer

error[E0616]: field `addr` of struct `Contact` is private
    --> src/chat.rs:3745:78
     |
3745 |         msg.text = dc_stock_system_msg(context, DC_STR_MSGADDMEMBER, contact.addr, None, ContactId::SELF);
     |                                                                              ^^^^ private field

error[E0425]: cannot find function `dc_stock_system_msg` in this scope
    --> src/chat.rs:3745:20
     |
3745 |         msg.text = dc_stock_system_msg(context, DC_STR_MSGADDMEMBER, contact.addr, None, ContactId::SELF);
     |                    ^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0616]: field `addr` of struct `Contact` is private
    --> src/chat.rs:3747:43
     |
3747 |         msg.set(DC_PARAM_CMD_ARG, contact.addr);
     |                                           ^^^^ private field

error[E0599]: no method named `send_msg` found for reference `&context::Context` in the current scope
    --> src/chat.rs:3749:26
     |
3749 |         msg.id = context.send_msg(chat_id, msg).await?;
     |                          ^^^^^^^^ help: there is a method with a similar name: `send_sync_msg`

error[E0061]: this method takes 1 argument but 3 arguments were supplied
    --> src/chat.rs:3751:13
     |
3751 |     context.emit_event(DC_EVENT_CHAT_MODIFIED, chat_id, 0);
     |             ^^^^^^^^^^                         -------  - unexpected argument of type `{integer}`
     |                                                |
     |                                                unexpected argument of type `ChatId`
     |
note: method defined here
    --> src/context.rs:595:12
     |
595  |     pub fn emit_event(&self, event: EventType) {
     |            ^^^^^^^^^^        ----------------
help: remove the extra arguments
     |
3751 -     context.emit_event(DC_EVENT_CHAT_MODIFIED, chat_id, 0);
3751 +     context.emit_event(DC_EVENT_CHAT_MODIFIED);
     |

error[E0308]: mismatched types
    --> src/chat.rs:3753:8
     |
3753 |     Ok(1)
     |     -- ^ expected `bool`, found integer
     |     |
     |     arguments to this enum variant are incorrect
     |
help: the type constructed contains `{integer}` due to the type of the argument passed
    --> src/chat.rs:3753:5
     |
3753 |     Ok(1)
     |     ^^^-^
     |        |
     |        this argument influences the type of `Ok`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
     |
506  |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^

error[E0599]: no method named `is_null` found for struct `contact::Contact` in the current scope
    --> src/chat.rs:3695:20
     |
3695 |         || contact.is_null()
     |                    ^^^^^^^ method not found in `Contact`
     |
    ::: src/contact.rs:358:1
     |
358  | pub struct Contact {
     | ------------------ method `is_null` not found for this struct

error[E0599]: no method named `load_from_db` found for struct `chat::Chat` in the current scope
    --> src/chat.rs:3705:17
     |
1480 | pub struct Chat {
     | --------------- method `load_from_db` not found for this struct
...
3705 |         || chat.load_from_db(context).await? == 0
     |            -----^^^^^^^^^^^^---------
     |            |    |
     |            |    this is an associated function, not a method
     |            help: use associated function syntax instead: `chat::Chat::load_from_db(context)`
     |
     = note: found the following associated functions; to be used as methods, functions must have a `self` parameter
note: the candidate is defined in an impl for the type `chat::Chat`
    --> src/chat.rs:1515:5
     |
1515 |     pub async fn load_from_db(context: &Context, chat_id: ChatId) -> Result<Self> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_int` found for struct `chat::Chat` in the current scope
    --> src/chat.rs:3715:32
     |
1480 | pub struct Chat {
     | --------------- method `get_int` not found for this struct
...
3715 |     if (from_handshake && chat.get_int(DC_PARAM_UNPROMOTED).unwrap_or(0) == 1) {
     |                                ^^^^^^^
     |
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following traits define an item `get_int`, perhaps you need to implement one of them:
             candidate #1: `Buf`
             candidate #2: `EnumProperty`
help: one of the expressions' fields has a method of the same name
     |
3715 |     if (from_handshake && chat.param.get_int(DC_PARAM_UNPROMOTED).unwrap_or(0) == 1) {
     |                                ++++++
help: there is a method with a similar name
     |
3715 |     if (from_handshake && chat.get_id(DC_PARAM_UNPROMOTED).unwrap_or(0) == 1) {
     |                                ~~~~~~

error[E0599]: no method named `set_int` found for struct `chat::Chat` in the current scope
    --> src/chat.rs:3716:14
     |
1480 | pub struct Chat {
     | --------------- method `set_int` not found for this struct
...
3716 |         chat.set_int(DC_PARAM_UNPROMOTED, None);
     |              ^^^^^^^ method not found in `chat::Chat`
     |
help: one of the expressions' fields has a method of the same name
     |
3716 |         chat.param.set_int(DC_PARAM_UNPROMOTED, None);
     |              ++++++

error[E0616]: field `addr` of struct `contact::Contact` is private
    --> src/chat.rs:3721:16
     |
3721 |     if contact.addr.eq_ignore_ascii_case(&self_addr.unwrap()) {
     |                ^^^^ private field

error[E0616]: field `addr` of struct `contact::Contact` is private
    --> src/chat.rs:3745:78
     |
3745 |         msg.text = dc_stock_system_msg(context, DC_STR_MSGADDMEMBER, contact.addr, None, ContactId::SELF);
     |                                                                              ^^^^ private field

error[E0616]: field `addr` of struct `contact::Contact` is private
    --> src/chat.rs:3747:43
     |
3747 |         msg.set(DC_PARAM_CMD_ARG, contact.addr);
     |                                           ^^^^ private field

error[E0061]: this method takes 1 argument but 3 arguments were supplied
    --> src/chat.rs:3751:13
     |
3751 |     context.emit_event(DC_EVENT_CHAT_MODIFIED, chat_id, 0);
     |             ^^^^^^^^^^                         -------  - unexpected argument of type `{integer}`
     |                                                |
     |                                                unexpected argument of type `chat::ChatId`
     |
note: method defined here
    --> src/context.rs:595:12
     |
595  |     pub fn emit_event(&self, event: EventType) {
     |            ^^^^^^^^^^        ----------------
help: remove the extra arguments
     |
3751 -     context.emit_event(DC_EVENT_CHAT_MODIFIED, chat_id, 0);
3751 +     context.emit_event(DC_EVENT_CHAT_MODIFIED);
     |

Some errors have detailed explanations: E0061, E0277, E0308, E0425, E0599, E0609, E0616.
For more information about an error, try `rustc --explain E0061`.
warning: `deltachat` (lib) generated 1 warning
error: could not compile `deltachat` (lib) due to 47 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
warning: `deltachat` (lib test) generated 1 warning (1 duplicate)
error: could not compile `deltachat` (lib test) due to 47 previous errors; 1 warning emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101
</error message>
<c function>
int dc_add_contact_to_chat_ex(dc_context_t* context, uint32_t chat_id, uint32_t contact_id, int flags)
{
	int              success = 0;
	dc_contact_t*    contact = dc_get_contact(context, contact_id);
	dc_chat_t*       chat = dc_chat_new(context);
	dc_msg_t*        msg = dc_msg_new_untyped(context);
	char*            self_addr = NULL;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || contact==NULL || chat_id<=DC_CHAT_ID_LAST_SPECIAL) {
		goto cleanup;
	}

	dc_reset_gossiped_timestamp(context, chat_id);

	if (0==real_group_exists(context, chat_id) /*this also makes sure, not contacts are added to special or normal chats*/
	 || (0==dc_real_contact_exists(context, contact_id) && contact_id!=DC_CONTACT_ID_SELF)
	 || 0==dc_chat_load_from_db(chat, chat_id)) {
		goto cleanup;
	}

	if (!IS_SELF_IN_GROUP) {
		dc_log_event(context, DC_EVENT_ERROR_SELF_NOT_IN_GROUP, 0,
		             "Cannot add contact to group; self not in group.");
		goto cleanup; /* we shoud respect this - whatever we send to the group, it gets discarded anyway! */
	}

	if ((flags&DC_FROM_HANDSHAKE) && dc_param_get_int(chat->param, DC_PARAM_UNPROMOTED, 0)==1) {
		// after a handshake, force sending the `Chat-Group-Member-Added` message
		dc_param_set(chat->param, DC_PARAM_UNPROMOTED, NULL);
		dc_chat_update_param(chat);
	}

	self_addr = dc_sqlite3_get_config(context->sql, "configured_addr", "");
	if (strcasecmp(contact->addr, self_addr)==0) {
		goto cleanup; /* ourself is added using DC_CONTACT_ID_SELF, do not add it explicitly. if SELF is not in the group, members cannot be added at all. */
	}

	if (dc_is_contact_in_chat(context, chat_id, contact_id))
	{
		if (!(flags&DC_FROM_HANDSHAKE)) {
			success = 1;
			goto cleanup;
		}
		// else continue and send status mail
	}
	else
	{
        if (dc_chat_is_protected() && dc_contact_is_verified(contact)!=DC_BIDIRECT_VERIFIED) {
            dc_log_error(context, 0, "Only bidirectional verified contacts can be added to verified groups.");
            goto cleanup;
        }
        if (dc_is_contact_in_chat(context, chat_id, contact_id)){
            goto cleanup; 
        }
		if (0==dc_add_to_chat_contacts_table(context, chat_id, contact_id)) {
			goto cleanup;
		}
	}

	/* send a status mail to all group members */
	if (chat->type==DC_CHAT_TYPE_GROUP && dc_chat_is_unpromoted() == 0)
	{
		msg->type = DC_MSG_TEXT;
		msg->text = dc_stock_system_msg(context, DC_STR_MSGADDMEMBER, contact->addr, NULL, DC_CONTACT_ID_SELF);
		dc_param_set_int(msg->param, DC_PARAM_CMD,      DC_CMD_MEMBER_ADDED_TO_GROUP);
		dc_param_set    (msg->param, DC_PARAM_CMD_ARG,  contact->addr);
		dc_param_set_int(msg->param, DC_PARAM_CMD_ARG2, flags); // combine the Secure-Join protocol headers with the Chat-Group-Member-Added header
		msg->id = dc_send_msg(context, chat_id, msg);
	}
	context->cb(context, DC_EVENT_CHAT_MODIFIED, chat_id, 0);

	success = 1;

cleanup:
	dc_chat_unref(chat);
	dc_contact_unref(contact);
	dc_msg_unref(msg);
	free(self_addr);
	return success;
}
</c function>
<rust function signature>
pub(crate) async fn add_contact_to_chat_ex(
    context: &Context,
    mut sync: sync::Sync,
    chat_id: ChatId,
    contact_id: ContactId,
    from_handshake: bool,
) -> Result<bool> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn is_special(self) -> bool {
        (0..=DC_CHAT_ID_LAST_SPECIAL.0).contains(&self.0)
    }

pub async fn get_by_id(context: &Context, contact_id: ContactId) -> Result<Self> {
        let contact = Self::get_by_id_optional(context, contact_id)
            .await?
            .with_context(|| format!("contact {contact_id} not found"))?;
        Ok(contact)
    }

pub async fn load_from_db(context: &Context, chat_id: ChatId) -> Result<Self> {
        let mut chat = context
            .sql
            .query_row(
                "SELECT c.type, c.name, c.grpid, c.param, c.archived,
                    c.blocked, c.locations_send_until, c.muted_until, c.protected
             FROM chats c
             WHERE c.id=?;",
                (chat_id,),
                |row| {
                    let c = Chat {
                        id: chat_id,
                        typ: row.get(0)?,
                        name: row.get::<_, String>(1)?,
                        grpid: row.get::<_, String>(2)?,
                        param: row.get::<_, String>(3)?.parse().unwrap_or_default(),
                        visibility: row.get(4)?,
                        blocked: row.get::<_, Option<_>>(5)?.unwrap_or_default(),
                        is_sending_locations: row.get(6)?,
                        mute_duration: row.get(7)?,
                        protected: row.get(8)?,
                    };
                    Ok(c)
                },
            )
            .await
            .context(format!("Failed loading chat {chat_id} from database"))?;

        if chat.id.is_archived_link() {
            chat.name = stock_str::archived_chats(context).await;
        } else {
            if chat.typ == Chattype::Single && chat.name.is_empty() {
                // chat.name is set to contact.display_name on changes,
                // however, if things went wrong somehow, we do this here explicitly.
                let mut chat_name = "Err [Name not found]".to_owned();
                match get_chat_contacts(context, chat.id).await {
                    Ok(contacts) => {
                        if let Some(contact_id) = contacts.first() {
                            if let Ok(contact) = Contact::get_by_id(context, *contact_id).await {
                                contact.get_display_name().clone_into(&mut chat_name);
                            }
                        }
                    }
                    Err(err) => {
                        error!(
                            context,
                            "Failed to load contacts for {}: {:#}.", chat.id, err
                        );
                    }
                }
                chat.name = chat_name;
            }
            if chat.param.exists(Param::Selftalk) {
                chat.name = stock_str::saved_messages(context).await;
            } else if chat.param.exists(Param::Devicetalk) {
                chat.name = stock_str::device_messages(context).await;
            }
        }

        Ok(chat)
    }

pub(crate) async fn update_param(&mut self, context: &Context) -> Result<()> {
        context
            .sql
            .execute(
                "UPDATE chats SET param=? WHERE id=?",
                (self.param.to_string(), self.id),
            )
            .await?;
        Ok(())
    }

pub fn set_int(&mut self, key: Param, value: i32) -> &mut Self {
        self.set(key, format!("{value}"));
        self
    }

pub fn is_protected(&self) -> bool {
        self.protected == ProtectionStatus::Protected
    }

pub async fn send_msg(context: &Context, chat_id: ChatId, msg: &mut Message) -> Result<MsgId> {
    if chat_id.is_unset() {
        let forwards = msg.param.get(Param::PrepForwards);
        if let Some(forwards) = forwards {
            for forward in forwards.split(' ') {
                if let Ok(msg_id) = forward.parse::<u32>().map(MsgId::new) {
                    if let Ok(mut msg) = Message::load_from_db(context, msg_id).await {
                        send_msg_inner(context, chat_id, &mut msg).await?;
                    };
                }
            }
            msg.param.remove(Param::PrepForwards);
            msg.update_param(context).await?;
        }
        return send_msg_inner(context, chat_id, msg).await;
    }

    if msg.state != MessageState::Undefined && msg.state != MessageState::OutPreparing {
        msg.param.remove(Param::GuaranteeE2ee);
        msg.param.remove(Param::ForcePlaintext);
        msg.update_param(context).await?;
    }
    send_msg_inner(context, chat_id, msg).await
}

pub async fn is_contact_in_chat(
    context: &Context,
    chat_id: ChatId,
    contact_id: ContactId,
) -> Result<bool> {
    // this function works for group and for normal chats, however, it is more useful
    // for group chats.
    // ContactId::SELF may be used to check, if the user itself is in a group
    // chat (ContactId::SELF is not added to normal chats)

    let exists = context
        .sql
        .exists(
            "SELECT COUNT(*) FROM chats_contacts WHERE chat_id=? AND contact_id=?;",
            (chat_id, contact_id),
        )
        .await?;
    Ok(exists)
}

pub(crate) async fn sync_contacts(&self, context: &Context) -> Result<()> {
        let addrs = context
            .sql
            .query_map(
                "SELECT c.addr \
                FROM contacts c INNER JOIN chats_contacts cc \
                ON c.id=cc.contact_id \
                WHERE cc.chat_id=?",
                (self.id,),
                |row| row.get::<_, String>(0),
                |addrs| addrs.collect::<Result<Vec<_>, _>>().map_err(Into::into),
            )
            .await?;
        self.sync(context, SyncAction::SetContacts(addrs)).await
    }

pub(crate) async fn sync_qr_code_tokens(&self, chat_id: Option<ChatId>) -> Result<()> {
        if !self.get_config_bool(Config::SyncMsgs).await? {
            return Ok(());
        }

        if let (Some(invitenumber), Some(auth)) = (
            token::lookup(self, Namespace::InviteNumber, chat_id).await?,
            token::lookup(self, Namespace::Auth, chat_id).await?,
        ) {
            let grpid = if let Some(chat_id) = chat_id {
                let chat = Chat::load_from_db(self, chat_id).await?;
                if !chat.is_promoted() {
                    info!(
                        self,
                        "group '{}' not yet promoted, do not sync tokens yet.", chat.grpid
                    );
                    return Ok(());
                }
                Some(chat.grpid)
            } else {
                None
            };
            self.add_sync_item(SyncData::AddQrToken(QrTokenData {
                invitenumber,
                auth,
                grpid,
            }))
            .await?;
        }
        Ok(())
    }

pub fn remove(&mut self, key: Param) -> &mut Self {
        self.inner.remove(&key);
        self
    }

pub fn set_cmd(&mut self, value: SystemMessage) {
        self.set_int(Param::Cmd, value as i32);
    }

pub fn is_promoted(&self) -> bool {
        !self.is_unpromoted()
    }

pub fn get_int(&self, key: Param) -> Option<i32> {
        self.get(key).and_then(|s| s.parse().ok())
    }

pub(crate) async fn add_to_chat_contacts_table(
    context: &Context,
    chat_id: ChatId,
    contact_ids: &[ContactId],
) -> Result<()> {
    context
        .sql
        .transaction(move |transaction| {
            for contact_id in contact_ids {
                transaction.execute(
                    "INSERT OR IGNORE INTO chats_contacts (chat_id, contact_id) VALUES(?, ?)",
                    (chat_id, contact_id),
                )?;
            }
            Ok(())
        })
        .await?;

    Ok(())
}

pub(crate) async fn reset_gossiped_timestamp(self, context: &Context) -> Result<()> {
        self.set_gossiped_timestamp(context, 0).await
    }

pub(crate) async fn is_self_in_chat(&self, context: &Context) -> Result<bool> {
        match self.typ {
            Chattype::Single | Chattype::Broadcast | Chattype::Mailinglist => Ok(true),
            Chattype::Group => is_contact_in_chat(context, self.id, ContactId::SELF).await,
        }
    }

pub(crate) async fn is_self_addr(&self, addr: &str) -> Result<bool> {
        Ok(self
            .get_config(Config::ConfiguredAddr)
            .await?
            .iter()
            .any(|a| addr_cmp(addr, a))
            || self
                .get_secondary_self_addrs()
                .await?
                .iter()
                .any(|a| addr_cmp(addr, a)))
    }

pub async fn is_verified(&self, context: &Context) -> Result<bool> {
        // We're always sort of secured-verified as we could verify the key on this device any time with the key
        // on this device
        if self.id == ContactId::SELF {
            return Ok(true);
        }

        let Some(peerstate) = Peerstate::from_addr(context, &self.addr).await? else {
            return Ok(false);
        };

        let forward_verified = peerstate.is_using_verified_key();
        let backward_verified = peerstate.is_backward_verified(context).await?;
        Ok(forward_verified && backward_verified)
    }

fn log_err(self, context: &Context) -> Result<T, E> {
        if let Err(e) = &self {
            let location = std::panic::Location::caller();

            // We are using Anyhow's .context() and to show the inner error, too, we need the {:#}:
            let full = format!(
                "{file}:{line}: {e:#}",
                file = location.file(),
                line = location.line(),
                e = e
            );
            // We can't use the warn!() macro here as the file!() and line!() macros
            // don't work with #[track_caller]
            context.emit_event(crate::EventType::Warning(full));
        };
        self
    }

pub async fn send_sync_msg(&self) -> Result<Option<MsgId>> {
        if let Some((json, ids)) = self.build_sync_json().await? {
            let chat_id =
                ChatId::create_for_contact_with_blocked(self, ContactId::SELF, Blocked::Yes)
                    .await?;
            let mut msg = Message {
                chat_id,
                viewtype: Viewtype::Text,
                text: stock_str::sync_msg_body(self).await,
                hidden: true,
                subject: stock_str::sync_msg_subject(self).await,
                ..Default::default()
            };
            msg.param.set_cmd(SystemMessage::MultiDeviceSync);
            msg.param.set(Param::Arg, json);
            msg.param.set(Param::Arg2, ids);
            msg.param.set_int(Param::GuaranteeE2ee, 1);
            Ok(Some(chat::send_msg(self, chat_id, &mut msg).await?))
        } else {
            Ok(None)
        }
    }

pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
        self.inner.insert(key, value.to_string());
        self
    }

pub fn emit_event(&self, event: EventType) {
        {
            let lock = self.debug_logging.read().expect("RwLock is poisoned");
            if let Some(debug_logging) = &*lock {
                debug_logging.log_event(event.clone());
            }
        }
        self.events.emit(Event {
            id: self.id,
            typ: event,
        });
    }

macro_rules! warn {
    ($ctx:expr, $msg:expr) => {
        warn!($ctx, $msg,)
    };
    ($ctx:expr, $msg:expr, $($args:expr),* $(,)?) => {{
        let formatted = format!($msg, $($args),*);
        let full = format!("{file}:{line}: {msg}",
                           file = file!(),
                           line = line!(),
                           msg = &formatted);
        $ctx.emit_event($crate::EventType::Warning(full));
    }};
}

pub fn get_addr(&self) -> &str {
        &self.addr
    }

pub fn error(&self) -> Option<String> {
        self.error.clone()
    }

pub async fn real_exists_by_id(context: &Context, contact_id: ContactId) -> Result<bool> {
        if contact_id.is_special() {
            return Ok(false);
        }

        let exists = context
            .sql
            .exists("SELECT COUNT(*) FROM contacts WHERE id=?;", (contact_id,))
            .await?;
        Ok(exists)
    }

pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

pub struct ChatId(u32);

pub struct ContactId(u32);

pub enum Chattype {
    /// 1:1 chat.
    Single = 100,

    /// Group chat.
    Group = 120,

    /// Mailing list.
    Mailinglist = 140,

    /// Broadcast list.
    Broadcast = 160,
}

impl ContactId {
    /// The owner of the account.
    ///
    /// The email-address is set by `set_config` using "addr".
    pub const SELF: ContactId = ContactId::new(1);
}

pub enum EventType {
    /// The library-user may write an informational string to the log.
    ///
    /// This event should *not* be reported to the end-user using a popup or something like
    /// that.
    Info(String),

    /// Emitted when SMTP connection is established and login was successful.
    SmtpConnected(String),

    /// Emitted when IMAP connection is established and login was successful.
    ImapConnected(String),

    /// Emitted when a message was successfully sent to the SMTP server.
    SmtpMessageSent(String),

    /// Emitted when an IMAP message has been marked as deleted
    ImapMessageDeleted(String),

    /// Emitted when an IMAP message has been moved
    ImapMessageMoved(String),

    /// Emitted before going into IDLE on the Inbox folder.
    ImapInboxIdle,

    /// Emitted when an new file in the $BLOBDIR was created
    NewBlobFile(String),

    /// Emitted when an file in the $BLOBDIR was deleted
    DeletedBlobFile(String),

    /// The library-user should write a warning string to the log.
    ///
    /// This event should *not* be reported to the end-user using a popup or something like
    /// that.
    Warning(String),

    /// The library-user should report an error to the end-user.
    ///
    /// As most things are asynchronous, things may go wrong at any time and the user
    /// should not be disturbed by a dialog or so.  Instead, use a bubble or so.
    ///
    /// However, for ongoing processes (eg. configure())
    /// or for functions that are expected to fail (eg. dc_continue_key_transfer())
    /// it might be better to delay showing these events until the function has really
    /// failed (returned false). It should be sufficient to report only the *last* error
    /// in a messasge box then.
    Error(String),

    /// An action cannot be performed because the user is not in the group.
    /// Reported eg. after a call to
    /// dc_set_chat_name(), dc_set_chat_profile_image(),
    /// dc_add_contact_to_chat(), dc_remove_contact_from_chat(),
    /// dc_send_text_msg() or another sending function.
    ErrorSelfNotInGroup(String),

    /// Messages or chats changed.  One or more messages or chats changed for various
    /// reasons in the database:
    /// - Messages sent, received or removed
    /// - Chats created, deleted or archived
    /// - A draft has been set
    ///
    MsgsChanged {
        /// Set if only a single chat is affected by the changes, otherwise 0.
        chat_id: ChatId,

        /// Set if only a single message is affected by the changes, otherwise 0.
        msg_id: MsgId,
    },

    /// Reactions for the message changed.
    ReactionsChanged {
        /// ID of the chat which the message belongs to.
        chat_id: ChatId,

        /// ID of the message for which reactions were changed.
        msg_id: MsgId,

        /// ID of the contact whose reaction set is changed.
        contact_id: ContactId,
    },

    /// There is a fresh message. Typically, the user will show an notification
    /// when receiving this message.
    ///
    /// There is no extra #DC_EVENT_MSGS_CHANGED event send together with this event.
    IncomingMsg {
        /// ID of the chat where the message is assigned.
        chat_id: ChatId,

        /// ID of the message.
        msg_id: MsgId,
    },

    /// Downloading a bunch of messages just finished.
    IncomingMsgBunch,

    /// Messages were seen or noticed.
    /// chat id is always set.
    MsgsNoticed(ChatId),

    /// A single message is sent successfully. State changed from  DC_STATE_OUT_PENDING to
    /// DC_STATE_OUT_DELIVERED, see dc_msg_get_state().
    MsgDelivered {
        /// ID of the chat which the message belongs to.
        chat_id: ChatId,

        /// ID of the message that was successfully sent.
        msg_id: MsgId,
    },

    /// A single message could not be sent. State changed from DC_STATE_OUT_PENDING or DC_STATE_OUT_DELIVERED to
    /// DC_STATE_OUT_FAILED, see dc_msg_get_state().
    MsgFailed {
        /// ID of the chat which the message belongs to.
        chat_id: ChatId,

        /// ID of the message that could not be sent.
        msg_id: MsgId,
    },

    /// A single message is read by the receiver. State changed from DC_STATE_OUT_DELIVERED to
    /// DC_STATE_OUT_MDN_RCVD, see dc_msg_get_state().
    MsgRead {
        /// ID of the chat which the message belongs to.
        chat_id: ChatId,

        /// ID of the message that was read.
        msg_id: MsgId,
    },

    /// A single message was deleted.
    ///
    /// This event means that the message will no longer appear in the messagelist.
    /// UI should remove the message from the messagelist
    /// in response to this event if the message is currently displayed.
    ///
    /// The message may have been explicitly deleted by the user or expired.
    /// Internally the message may have been removed from the database,
    /// moved to the trash chat or hidden.
    ///
    /// This event does not indicate the message
    /// deletion from the server.
    MsgDeleted {
        /// ID of the chat where the message was prior to deletion.
        /// Never 0 or trash chat.
        chat_id: ChatId,

        /// ID of the deleted message. Never 0.
        msg_id: MsgId,
    },

    /// Chat changed.  The name or the image of a chat group was changed or members were added or removed.
    /// Or the verify state of a chat has changed.
    /// See dc_set_chat_name(), dc_set_chat_profile_image(), dc_add_contact_to_chat()
    /// and dc_remove_contact_from_chat().
    ///
    /// This event does not include ephemeral timer modification, which
    /// is a separate event.
    ChatModified(ChatId),

    /// Chat ephemeral timer changed.
    ChatEphemeralTimerModified {
        /// Chat ID.
        chat_id: ChatId,

        /// New ephemeral timer value.
        timer: EphemeralTimer,
    },

    /// Contact(s) created, renamed, blocked, deleted or changed their "recently seen" status.
    ///
    /// @param data1 (int) If set, this is the contact_id of an added contact that should be selected.
    ContactsChanged(Option<ContactId>),

    /// Location of one or more contact has changed.
    ///
    /// @param data1 (u32) contact_id of the contact for which the location has changed.
    ///     If the locations of several contacts have been changed,
    ///     eg. after calling dc_delete_all_locations(), this parameter is set to `None`.
    LocationChanged(Option<ContactId>),

    /// Inform about the configuration progress started by configure().
    ConfigureProgress {
        /// Progress.
        ///
        /// 0=error, 1-999=progress in permille, 1000=success and done
        progress: usize,

        /// Progress comment or error, something to display to the user.
        comment: Option<String>,
    },

    /// Inform about the import/export progress started by imex().
    ///
    /// @param data1 (usize) 0=error, 1-999=progress in permille, 1000=success and done
    /// @param data2 0
    ImexProgress(usize),

    /// A file has been exported. A file has been written by imex().
    /// This event may be sent multiple times by a single call to imex().
    ///
    /// A typical purpose for a handler of this event may be to make the file public to some system
    /// services.
    ///
    /// @param data2 0
    ImexFileWritten(PathBuf),

    /// Progress information of a secure-join handshake from the view of the inviter
    /// (Alice, the person who shows the QR code).
    ///
    /// These events are typically sent after a joiner has scanned the QR code
    /// generated by dc_get_securejoin_qr().
    SecurejoinInviterProgress {
        /// ID of the contact that wants to join.
        contact_id: ContactId,

        /// Progress as:
        /// 300=vg-/vc-request received, typically shown as "bob@addr joins".
        /// 600=vg-/vc-request-with-auth received, vg-member-added/vc-contact-confirm sent, typically shown as "bob@addr verified".
        /// 800=contact added to chat, shown as "bob@addr securely joined GROUP". Only for the verified-group-protocol.
        /// 1000=Protocol finished for this contact.
        progress: usize,
    },

    /// Progress information of a secure-join handshake from the view of the joiner
    /// (Bob, the person who scans the QR code).
    /// The events are typically sent while dc_join_securejoin(), which
    /// may take some time, is executed.
    SecurejoinJoinerProgress {
        /// ID of the inviting contact.
        contact_id: ContactId,

        /// Progress as:
        /// 400=vg-/vc-request-with-auth sent, typically shown as "alice@addr verified, introducing myself."
        /// (Bob has verified alice and waits until Alice does the same for him)
        /// 1000=vg-member-added/vc-contact-confirm received
        progress: usize,
    },

    /// The connectivity to the server changed.
    /// This means that you should refresh the connectivity view
    /// and possibly the connectivtiy HTML; see dc_get_connectivity() and
    /// dc_get_connectivity_html() for details.
    ConnectivityChanged,

    /// The user's avatar changed.
    /// Deprecated by `ConfigSynced`.
    SelfavatarChanged,

    /// A multi-device synced config value changed. Maybe the app needs to refresh smth. For
    /// uniformity this is emitted on the source device too. The value isn't here, otherwise it
    /// would be logged which might not be good for privacy.
    ConfigSynced {
        /// Configuration key.
        key: Config,
    },

    /// Webxdc status update received.
    WebxdcStatusUpdate {
        /// Message ID.
        msg_id: MsgId,

        /// Status update ID.
        status_update_serial: StatusUpdateSerial,
    },

    /// Data received over an ephemeral peer channel.
    WebxdcRealtimeData {
        /// Message ID.
        msg_id: MsgId,

        /// Realtime data.
        data: Vec<u8>,
    },

    /// Inform that a message containing a webxdc instance has been deleted.
    WebxdcInstanceDeleted {
        /// ID of the deleted message.
        msg_id: MsgId,
    },

    /// Tells that the Background fetch was completed (or timed out).
    /// This event acts as a marker, when you reach this event you can be sure
    /// that all events emitted during the background fetch were processed.
    ///
    /// This event is only emitted by the account manager
    AccountsBackgroundFetchDone,
    /// Inform that set of chats or the order of the chats in the chatlist has changed.
    ///
    /// Sometimes this is emitted together with `UIChatlistItemChanged`.
    ChatlistChanged,

    /// Inform that a single chat list item changed and needs to be rerendered.
    /// If `chat_id` is set to None, then all currently visible chats need to be rerendered, and all not-visible items need to be cleared from cache if the UI has a cache.
    ChatlistItemChanged {
        /// ID of the changed chat
        chat_id: Option<ChatId>,
    },

    /// Event for using in tests, e.g. as a fence between normally generated events.
    #[cfg(test)]
    Test,

    /// Inform than some events have been skipped due to event channel overflow.
    EventChannelOverflow {
        /// Number of events skipped.
        n: u64,
    },
}

pub enum Param {
    /// For messages
    File = b'f',

    /// For messages: original filename (as shown in chat)
    Filename = b'v',

    /// For messages: This name should be shown instead of contact.get_display_name()
    /// (used if this is a mailinglist
    /// or explicitly set using set_override_sender_name(), eg. by bots)
    OverrideSenderDisplayname = b'O',

    /// For Messages
    Width = b'w',

    /// For Messages
    Height = b'h',

    /// For Messages
    Duration = b'd',

    /// For Messages
    MimeType = b'm',

    /// For Messages: HTML to be written to the database and to be send.
    /// `SendHtml` param is not used for received messages.
    /// Use `MsgId::get_html()` to get HTML of received messages.
    SendHtml = b'T',

    /// For Messages: message is encrypted, outgoing: guarantee E2EE or the message is not send
    GuaranteeE2ee = b'c',

    /// For Messages: quoted message is encrypted.
    ///
    /// If this message is sent unencrypted, quote text should be replaced.
    ProtectQuote = b'0',

    /// For Messages: decrypted with validation errors or without mutual set, if neither
    /// 'c' nor 'e' are preset, the messages is only transport encrypted.
    ErroneousE2ee = b'e',

    /// For Messages: force unencrypted message, a value from `ForcePlaintext` enum.
    ForcePlaintext = b'u',

    /// For Messages: do not include Autocrypt header.
    SkipAutocrypt = b'o',

    /// For Messages
    WantsMdn = b'r',

    /// For Messages: the message is a reaction.
    Reaction = b'x',

    /// For Chats: the timestamp of the last reaction.
    LastReactionTimestamp = b'y',

    /// For Chats: Message ID of the last reaction.
    LastReactionMsgId = b'Y',

    /// For Chats: Contact ID of the last reaction.
    LastReactionContactId = b'1',

    /// For Messages: a message with "Auto-Submitted: auto-generated" header ("bot").
    Bot = b'b',

    /// For Messages: unset or 0=not forwarded,
    /// 1=forwarded from unknown msg_id, >9 forwarded from msg_id
    Forwarded = b'a',

    /// For Messages: quoted text.
    Quote = b'q',

    /// For Messages
    Cmd = b'S',

    /// For Messages
    Arg = b'E',

    /// For Messages
    Arg2 = b'F',

    /// `Secure-Join-Fingerprint` header for `{vc,vg}-request-with-auth` messages.
    Arg3 = b'G',

    /// Deprecated `Secure-Join-Group` header for messages.
    Arg4 = b'H',

    /// For Messages
    AttachGroupImage = b'A',

    /// For Messages
    WebrtcRoom = b'V',

    /// For Messages: space-separated list of messaged IDs of forwarded copies.
    ///
    /// This is used when a [crate::message::Message] is in the
    /// [crate::message::MessageState::OutPending] state but is already forwarded.
    /// In this case the forwarded messages are written to the
    /// database and their message IDs are added to this parameter of
    /// the original message, which is also saved in the database.
    /// When the original message is then finally sent this parameter
    /// is used to also send all the forwarded messages.
    PrepForwards = b'P',

    /// For Messages
    SetLatitude = b'l',

    /// For Messages
    SetLongitude = b'n',

    /// For Groups
    ///
    /// An unpromoted group has not had any messages sent to it and thus only exists on the
    /// creator's device.  Any changes made to an unpromoted group do not need to send
    /// system messages to the group members to update them of the changes.  Once a message
    /// has been sent to a group it is promoted and group changes require sending system
    /// messages to all members.
    Unpromoted = b'U',

    /// For Groups and Contacts
    ProfileImage = b'i',

    /// For Chats
    /// Signals whether the chat is the `saved messages` chat
    Selftalk = b'K',

    /// For Chats: On sending a new message we set the subject to `Re: <last subject>`.
    /// Usually we just use the subject of the parent message, but if the parent message
    /// is deleted, we use the LastSubject of the chat.
    LastSubject = b't',

    /// For Chats
    Devicetalk = b'D',

    /// For Chats: If this is a mailing list chat, contains the List-Post address.
    /// None if there simply is no `List-Post` header in the mailing list.
    /// Some("") if the mailing list is using multiple different List-Post headers.
    ///
    /// The List-Post address is the email address where the user can write to in order to
    /// post something to the mailing list.
    ListPost = b'p',

    /// For Contacts: If this is the List-Post address of a mailing list, contains
    /// the List-Id of the mailing list (which is also used as the group id of the chat).
    ListId = b's',

    /// For Contacts: timestamp of status (aka signature or footer) update.
    StatusTimestamp = b'j',

    /// For Contacts and Chats: timestamp of avatar update.
    AvatarTimestamp = b'J',

    /// For Chats: timestamp of status/signature/footer update.
    EphemeralSettingsTimestamp = b'B',

    /// For Chats: timestamp of subject update.
    SubjectTimestamp = b'C',

    /// For Chats: timestamp of group name update.
    GroupNameTimestamp = b'g',

    /// For Chats: timestamp of member list update.
    MemberListTimestamp = b'k',

    /// For Webxdc Message Instances: Current document name
    WebxdcDocument = b'R',

    /// For Webxdc Message Instances: timestamp of document name update.
    WebxdcDocumentTimestamp = b'W',

    /// For Webxdc Message Instances: Current summary
    WebxdcSummary = b'N',

    /// For Webxdc Message Instances: timestamp of summary update.
    WebxdcSummaryTimestamp = b'Q',

    /// For Webxdc Message Instances: Webxdc is an integration, see init_webxdc_integration()
    WebxdcIntegration = b'3',

    /// For Webxdc Message Instances: Chat to integrate the Webxdc for.
    WebxdcIntegrateFor = b'2',

    /// For messages: Whether [crate::message::Viewtype::Sticker] should be forced.
    ForceSticker = b'X',
    // 'L' was defined as ProtectionSettingsTimestamp for Chats, however, never used in production.
}

pub enum SystemMessage {
    /// Unknown type of system message.
    #[default]
    Unknown = 0,

    /// Group name changed.
    GroupNameChanged = 2,

    /// Group avatar changed.
    GroupImageChanged = 3,

    /// Member was added to the group.
    MemberAddedToGroup = 4,

    /// Member was removed from the group.
    MemberRemovedFromGroup = 5,

    /// Autocrypt Setup Message.
    AutocryptSetupMessage = 6,

    /// Secure-join message.
    SecurejoinMessage = 7,

    /// Location streaming is enabled.
    LocationStreamingEnabled = 8,

    /// Location-only message.
    LocationOnly = 9,

    /// Chat ephemeral message timer is changed.
    EphemeralTimerChanged = 10,

    /// "Messages are guaranteed to be end-to-end encrypted from now on."
    ChatProtectionEnabled = 11,

    /// "%1$s sent a message from another device."
    ChatProtectionDisabled = 12,

    /// Message can't be sent because of `Invalid unencrypted mail to <>`
    /// which is sent by chatmail servers.
    InvalidUnencryptedMail = 13,

    /// 1:1 chats info message telling that SecureJoin has started and the user should wait for it
    /// to complete.
    SecurejoinWait = 14,

    /// 1:1 chats info message telling that SecureJoin is still running, but the user may already
    /// send messages.
    SecurejoinWaitTimeout = 15,

    /// Self-sent-message that contains only json used for multi-device-sync;
    /// if possible, we attach that to other messages as for locations.
    MultiDeviceSync = 20,

    /// Sync message that contains a json payload
    /// sent to the other webxdc instances
    /// These messages are not shown in the chat.
    WebxdcStatusUpdate = 30,

    /// Webxdc info added with `info` set in `send_webxdc_status_update()`.
    WebxdcInfoMessage = 32,

    /// This message contains a users iroh node address.
    IrohNodeAddr = 40,
}

pub enum Viewtype {
    /// Unknown message type.
    #[default]
    Unknown = 0,

    /// Text message.
    /// The text of the message is set using dc_msg_set_text() and retrieved with dc_msg_get_text().
    Text = 10,

    /// Image message.
    /// If the image is a GIF and has the appropriate extension, the viewtype is auto-changed to
    /// `Gif` when sending the message.
    /// File, width and height are set via dc_msg_set_file(), dc_msg_set_dimension
    /// and retrieved via dc_msg_set_file(), dc_msg_set_dimension().
    Image = 20,

    /// Animated GIF message.
    /// File, width and height are set via dc_msg_set_file(), dc_msg_set_dimension()
    /// and retrieved via dc_msg_get_file(), dc_msg_get_width(), dc_msg_get_height().
    Gif = 21,

    /// Message containing a sticker, similar to image.
    /// If possible, the ui should display the image without borders in a transparent way.
    /// A click on a sticker will offer to install the sticker set in some future.
    Sticker = 23,

    /// Message containing an Audio file.
    /// File and duration are set via dc_msg_set_file(), dc_msg_set_duration()
    /// and retrieved via dc_msg_get_file(), dc_msg_get_duration().
    Audio = 40,

    /// A voice message that was directly recorded by the user.
    /// For all other audio messages, the type #DC_MSG_AUDIO should be used.
    /// File and duration are set via dc_msg_set_file(), dc_msg_set_duration()
    /// and retrieved via dc_msg_get_file(), dc_msg_get_duration()
    Voice = 41,

    /// Video messages.
    /// File, width, height and durarion
    /// are set via dc_msg_set_file(), dc_msg_set_dimension(), dc_msg_set_duration()
    /// and retrieved via
    /// dc_msg_get_file(), dc_msg_get_width(),
    /// dc_msg_get_height(), dc_msg_get_duration().
    Video = 50,

    /// Message containing any file, eg. a PDF.
    /// The file is set via dc_msg_set_file()
    /// and retrieved via dc_msg_get_file().
    File = 60,

    /// Message is an invitation to a videochat.
    VideochatInvitation = 70,

    /// Message is an webxdc instance.
    Webxdc = 80,

    /// Message containing shared contacts represented as a vCard (virtual contact file)
    /// with email addresses and possibly other fields.
    /// Use `parse_vcard()` to retrieve them.
    Vcard = 90,
}


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use std::cmp;
use std::collections::{HashMap, HashSet};
use std::fmt;
use std::path::{Path, PathBuf};
use std::str::FromStr;
use std::time::Duration;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use deltachat_contact_tools::{strip_rtlo_characters, ContactAddress};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use strum_macros::EnumIter;
use tokio::task;
use crate::aheader::EncryptPreference;
use crate::blob::BlobObject;
use crate::chatlist::Chatlist;
use crate::chatlist_events;
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{
    self, Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK,
    DC_CHAT_ID_LAST_SPECIAL, DC_CHAT_ID_TRASH, DC_RESEND_USER_AVATAR_DAYS,
};
use crate::contact::{self, Contact, ContactId, Origin};
use crate::context::Context;
use crate::debug_logging::maybe_set_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::Timer as EphemeralTimer;
use crate::events::EventType;
use crate::html::new_html_mimepart;
use crate::location;
use crate::log::LogExt;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::mimefactory::MimeFactory;
use crate::mimeparser::SystemMessage;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::receive_imf::ReceivedMsg;
use crate::securejoin::BobState;
use crate::smtp::send_msg_to_smtp;
use crate::sql;
use crate::stock_str;
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{
    buf_compress, create_id, create_outgoing_rfc724_mid, create_smeared_timestamp,
    create_smeared_timestamps, get_abs_path, gm2local_offset, improve_single_line_input,
    smeared_time, time, IsNoneOrEmpty, SystemTime,
};
use crate::webxdc::WEBXDC_SUFFIX;
use CantSendReason::*;
use super::*;
use crate::chatlist::get_archived_cnt;
use crate::constants::{DC_GCL_ARCHIVED_ONLY, DC_GCL_NO_SPECIALS};
use crate::message::delete_msgs;
use crate::receive_imf::receive_imf;
use crate::test_utils::{sync, TestContext, TestContextManager};
use strum::IntoEnumIterator;
use tokio::fs;

</rust function dependency libraries>

</message>
<reapir response>
Here's the corrected Rust function based on the error messages and the provided C function:

```rust
pub(crate) async fn add_contact_to_chat_ex(
    context: &Context,
    chat_id: ChatId,
    contact_id: ContactId,
    from_handshake: bool,
) -> Result<bool> {
    let mut success = false;
    let contact = Contact::get_by_id(context, contact_id).await?;
    let mut chat = Chat::load_from_db(context, chat_id).await?;
    let mut msg = Message::new(Viewtype::Text);
    let mut self_addr = String::new();

    if chat_id.is_special() {
        return Ok(success);
    }

    chat.reset_gossiped_timestamp(context).await?;

    if !chat.is_promoted()
        || (!Contact::real_exists_by_id(context, contact_id).await? && contact_id != ContactId::SELF)
    {
        return Ok(success);
    }

    if !chat.is_self_in_chat(context).await? {
        warn!(context, "Cannot add contact to group; self not in group.");
        return Ok(success);
    }

    if from_handshake && chat.get_int(Param::Unpromoted).unwrap_or(0) == 1 {
        chat.set(Param::Unpromoted, None);
        chat.update_param(context).await?;
    }

    self_addr = context.get_config(Config::ConfiguredAddr).await?.unwrap_or_default();
    if context.is_self_addr(&contact.get_addr()).await? {
        return Ok(success);
    }

    if chat.is_contact_in_chat(context, contact_id).await? {
        if !from_handshake {
            return Ok(true);
        }
    } else {
        if chat.is_protected() && !contact.is_verified(context).await? {
            warn!(context, "Only bidirectional verified contacts can be added to verified groups.");
            return Ok(success);
        }

        chat::add_to_chat_contacts_table(context, chat_id, &[contact_id]).await?;
    }

    if chat.typ == Chattype::Group && chat.is_promoted() {
        msg.text = stock_str::msgaddmember(context, contact.get_addr()).await;
        msg.set_cmd(SystemMessage::MemberAddedToGroup);
        msg.set(Param::Arg, contact.get_addr());
        msg.id = chat::send_msg(context, chat_id, &mut msg).await?;
    }
    context.emit_event(EventType::ChatModified(chat_id));

    Ok(true)
}
```

This version addresses the following issues:

1. Removed references to `DC_CONTEXT_MAGIC` and other undefined constants.
2. Used `Chat::load_from_db` instead of `dc_chat_new`.
3. Replaced `dc_msg_new_untyped` with `Message::new(Viewtype::Text)`.
4. Used `chat_id.is_special()` instead of comparing with `DC_CHAT_ID_LAST_SPECIAL`.
5. Replaced `dc_reset_gossiped_timestamp` with `chat.reset_gossiped_timestamp`.
6. Used `Contact::real_exists_by_id` instead of `dc_real_contact_exists`.
7. Replaced `IS_SELF_IN_GROUP` with `chat.is_self_in_chat`.
8. Used `chat.get_int` and `chat.set` for handling the `Unpromoted` parameter.
9. Replaced `dc_sqlite3_get_config` with `context.get_config`.
10. Used `context.is_self_addr` instead of `strcasecmp`.
11. Replaced `dc_is_contact_in_chat` with `chat.is_contact_in_chat`.
12. Used `contact.is_verified` instead of `DC_BIDIRECT_VERIFIED`.
13. Replaced `dc_ad</reapir response>
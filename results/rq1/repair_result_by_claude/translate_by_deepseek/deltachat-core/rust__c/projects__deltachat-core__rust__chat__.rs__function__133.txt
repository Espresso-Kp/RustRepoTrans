<message>
you were asked to translate the given c function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, c function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b'pub async fn remove_contact_from_chat(\n    context: &Context,\n    chat_id: ChatId,\n    contact_id: ContactId,\n) -> Result<()> {\n    let mut success = 0;\n    let contact = dc_get_contact(context, contact_id).await?;\n    let mut chat = dc_chat_new(context).await?;\n    let mut msg = dc_msg_new_untyped(context).await?;\n    let q3 = "DELETE FROM chats_contacts WHERE chat_id=? AND contact_id=?;";\n\n    if context.is_null_or_invalid() || context.magic != DC_CONTEXT_MAGIC || chat_id <= DC_CHAT_ID_LAST_SPECIAL || (contact_id <= DC_CONTACT_ID_LAST_SPECIAL && contact_id != DC_CONTACT_ID_SELF) {\n        goto_cleanup!();\n    }\n\n    if !real_group_exists(context, chat_id).await? || !dc_chat_load_from_db(chat.as_mut(), chat_id).await? {\n        goto_cleanup!();\n    }\n\n    if !contact.is_self_in_chat(context).await? {\n        context.log_event(DC_EVENT_ERROR_SELF_NOT_IN_GROUP, 0, "Cannot remove contact from chat; self not in group.").await?;\n        goto_cleanup!();\n    }\n\n    if contact.is_promoted() && DO_SEND_STATUS_MAILS {\n        msg.set_type(DC_MSG_TEXT);\n        if contact.id == DC_CONTACT_ID_SELF {\n            set_group_explicitly_left(context, &chat.grpid).await?;\n            msg.set_text(dc_stock_system_msg(context, DC_STR_MSGGROUPLEFT, None, None, DC_CONTACT_ID_SELF).await?);\n        } else {\n            msg.set_text(dc_stock_system_msg(context, DC_STR_MSGDELMEMBER, Some(&contact.addr), None, DC_CONTACT_ID_SELF).await?);\n        }\n        msg.set_cmd(DC_CMD_MEMBER_REMOVED_FROM_GROUP);\n        msg.set_cmd_arg(&contact.addr);\n        msg.id = dc_send_msg(context, chat_id, msg.as_mut()).await?;\n        context.cb(context, DC_EVENT_MSGS_CHANGED, chat_id, msg.id).await;\n    }\n\n    context.sql.execute(q3, (chat_id, contact_id)).await?;\n\n    context.cb(context, DC_EVENT_CHAT_MODIFIED, chat_id, 0).await;\n\n    success = 1;\n\ncleanup:\n    drop(msg);\n    drop(chat);\n    drop(contact);\n    Ok(())\n}'
</previous response>
<error message>
Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error: expected one of `!` or `::`, found `s`
 --> src/chat.rs:6:1
  |
5 | u
  |  - expected one of `!` or `::`
6 | s
  | ^ unexpected token

error[E0432]: unresolved imports `crate::chat::add_device_msg`, `crate::chat::update_device_icon`, `crate::chat::update_saved_messages_icon`
  --> src/sql.rs:11:25
   |
11 | use crate::chat::{self, add_device_msg, update_device_icon, update_saved_messages_icon};
   |                         ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^ no `update_saved_messages_icon` in `chat`
   |                         |               |
   |                         |               no `update_device_icon` in `chat`
   |                         no `add_device_msg` in `chat`

error[E0432]: unresolved import `crate::chat::ChatId`
 --> src/events/chatlist_events.rs:1:13
  |
1 | use crate::{chat::ChatId, contact::ContactId, context::Context, EventType};
  |             ^^^^^^^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved import `crate::chat::ChatId`
 --> src/events/payload.rs:6:5
  |
6 | use crate::chat::ChatId;
  |     ^^^^^^^^^^^^^^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved imports `crate::chat::update_special_chat_names`, `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ChatVisibility`
 --> src/chatlist.rs:6:19
  |
6 | use crate::chat::{update_special_chat_names, Chat, ChatId, ChatVisibility};
  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^  ^^^^^^  ^^^^^^^^^^^^^^ no `ChatVisibility` in `chat`
  |                   |                          |     |
  |                   |                          |     no `ChatId` in `chat`
  |                   |                          no `Chat` in `chat`
  |                   no `update_special_chat_names` in `chat`

error[E0432]: unresolved import `crate::chat::ChatId`
 --> src/constants.rs:9:5
  |
9 | use crate::chat::ChatId;
  |     ^^^^^^^^^^^^^^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved imports `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`, `crate::chat::ProtectionStatus`
  --> src/contact.rs:25:19
   |
25 | use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
   |                   ^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                   |       |
   |                   |       no `ChatIdBlocked` in `chat`
   |                   no `ChatId` in `chat`

error[E0432]: unresolved imports `crate::chat::get_chat_cnt`, `crate::chat::ChatId`, `crate::chat::ProtectionStatus`
  --> src/context.rs:18:19
   |
18 | use crate::chat::{get_chat_cnt, ChatId, ProtectionStatus};
   |                   ^^^^^^^^^^^^  ^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                   |             |
   |                   |             no `ChatId` in `chat`
   |                   no `get_chat_cnt` in `chat`

error[E0432]: unresolved imports `crate::chat::send_msg`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`
  --> src/ephemeral.rs:77:19
   |
77 | use crate::chat::{send_msg, ChatId, ChatIdBlocked};
   |                   ^^^^^^^^  ^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |                   |         |
   |                   |         no `ChatId` in `chat`
   |                   no `send_msg` in `chat`

error[E0432]: unresolved imports `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`
  --> src/imap.rs:27:25
   |
27 | use crate::chat::{self, ChatId, ChatIdBlocked};
   |                         ^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |                         |
   |                         no `ChatId` in `chat`

error[E0432]: unresolved imports `crate::chat::delete_and_reset_all_device_msgs`, `crate::chat::ChatId`
  --> src/imex.rs:17:25
   |
17 | use crate::chat::{self, delete_and_reset_all_device_msgs, ChatId};
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
   |                         |
   |                         no `delete_and_reset_all_device_msgs` in `chat`

error[E0432]: unresolved imports `crate::chat::add_device_msg`, `crate::chat::delete_and_reset_all_device_msgs`
  --> src/imex/transfer.rs:51:19
   |
51 | use crate::chat::{add_device_msg, delete_and_reset_all_device_msgs};
   |                   ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `delete_and_reset_all_device_msgs` in `chat`
   |                   |
   |                   no `add_device_msg` in `chat`
   |
   = help: consider importing this unresolved item through its public re-export instead:
           crate::imex::delete_and_reset_all_device_msgs

error[E0432]: unresolved import `crate::chat::ChatId`
  --> src/location.rs:20:25
   |
20 | use crate::chat::{self, ChatId};
   |                         ^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`
  --> src/message.rs:13:19
   |
13 | use crate::chat::{Chat, ChatId, ChatIdBlocked};
   |                   ^^^^  ^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |                   |     |
   |                   |     no `ChatId` in `chat`
   |                   no `Chat` in `chat`

error[E0432]: unresolved import `crate::chat::Chat`
  --> src/mimefactory.rs:13:25
   |
13 | use crate::chat::{self, Chat};
   |                         ^^^^ no `Chat` in `chat`

error[E0432]: unresolved imports `crate::chat::add_info_msg`, `crate::chat::ChatId`
  --> src/mimeparser.rs:17:19
   |
17 | use crate::chat::{add_info_msg, ChatId};
   |                   ^^^^^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
   |                   |
   |                   no `add_info_msg` in `chat`

error[E0432]: unresolved import `crate::chat::Chat`
  --> src/peerstate.rs:10:25
   |
10 | use crate::chat::{self, Chat};
   |                         ^^^^ no `Chat` in `chat`

error[E0432]: unresolved imports `crate::chat::get_chat_id_by_grpid`, `crate::chat::ChatIdBlocked`
  --> src/qr.rs:14:19
   |
14 | use crate::chat::{get_chat_id_by_grpid, ChatIdBlocked};
   |                   ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |                   |
   |                   no `get_chat_id_by_grpid` in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`
 --> src/qr_code_generator.rs:8:19
  |
8 | use crate::chat::{Chat, ChatId};
  |                   ^^^^  ^^^^^^ no `ChatId` in `chat`
  |                   |
  |                   no `Chat` in `chat`

error[E0432]: unresolved import `crate::chat::add_device_msg_with_importance`
 --> src/quota.rs:8:5
  |
8 | use crate::chat::add_device_msg_with_importance;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `add_device_msg_with_importance` in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`, `crate::chat::ProtectionStatus`
 --> src/securejoin.rs:7:25
  |
7 | use crate::chat::{self, Chat, ChatId, ChatIdBlocked, ProtectionStatus};
  |                         ^^^^  ^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
  |                         |     |       |
  |                         |     |       no `ChatIdBlocked` in `chat`
  |                         |     no `ChatId` in `chat`
  |                         no `Chat` in `chat`

error[E0432]: unresolved imports `crate::chat::is_contact_in_chat`, `crate::chat::ChatId`, `crate::chat::ProtectionStatus`
  --> src/securejoin/bob.rs:11:19
   |
11 | use crate::chat::{is_contact_in_chat, ChatId, ProtectionStatus};
   |                   ^^^^^^^^^^^^^^^^^^  ^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                   |                   |
   |                   |                   no `ChatId` in `chat`
   |                   no `is_contact_in_chat` in `chat`
   |
   = help: consider importing this unresolved item through its public re-export instead:
           crate::securejoin::ChatId
   = help: consider importing this unresolved item through its public re-export instead:
           crate::securejoin::ProtectionStatus

error[E0432]: unresolved import `crate::chat::ChatId`
  --> src/securejoin/bobstate.rs:15:25
   |
15 | use crate::chat::{self, ChatId};
   |                         ^^^^^^ no `ChatId` in `chat`
   |
   = help: consider importing this unresolved item through its public re-export instead:
           crate::securejoin::ChatId

error[E0432]: unresolved imports `crate::chat::add_info_msg_with_cmd`, `crate::chat::ChatId`
  --> src/smtp.rs:13:19
   |
13 | use crate::chat::{add_info_msg_with_cmd, ChatId};
   |                   ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
   |                   |
   |                   no `add_info_msg_with_cmd` in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ProtectionStatus`
  --> src/stock_str.rs:14:25
   |
14 | use crate::chat::{self, Chat, ChatId, ProtectionStatus};
   |                         ^^^^  ^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                         |     |
   |                         |     no `ChatId` in `chat`
   |                         no `Chat` in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`
 --> src/sync.rs:7:25
  |
7 | use crate::chat::{self, Chat, ChatId};
  |                         ^^^^  ^^^^^^ no `ChatId` in `chat`
  |                         |
  |                         no `Chat` in `chat`

error[E0432]: unresolved import `crate::chat::ChatId`
  --> src/token.rs:10:5
   |
10 | use crate::chat::ChatId;
   |     ^^^^^^^^^^^^^^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved import `crate::chat::ChatId`
 --> src/update_helper.rs:5:5
  |
5 | use crate::chat::ChatId;
  |     ^^^^^^^^^^^^^^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved imports `crate::chat::send_msg`, `crate::chat::ChatId`
 --> src/webxdc/integration.rs:1:19
  |
1 | use crate::chat::{send_msg, ChatId};
  |                   ^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
  |                   |
  |                   no `send_msg` in `chat`

error[E0432]: unresolved import `crate::chat::ChatId`
  --> src/webxdc/maps_integration.rs:41:5
   |
41 | use crate::chat::ChatId;
   |     ^^^^^^^^^^^^^^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved import `crate::chat::Chat`
  --> src/webxdc.rs:33:25
   |
33 | use crate::chat::{self, Chat};
   |                         ^^^^ no `Chat` in `chat`

error[E0432]: unresolved import `crate::chat::Chat`
 --> src/summary.rs:7:5
  |
7 | use crate::chat::Chat;
  |     ^^^^^^^^^^^^^^^^^ no `Chat` in `chat`

error[E0432]: unresolved import `crate::chat::ChatId`
 --> src/debug_logging.rs:2:5
  |
2 | use crate::chat::ChatId;
  |     ^^^^^^^^^^^^^^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`, `crate::chat::ProtectionStatus`
  --> src/receive_imf.rs:17:25
   |
17 | use crate::chat::{self, Chat, ChatId, ChatIdBlocked, ProtectionStatus};
   |                         ^^^^  ^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                         |     |       |
   |                         |     |       no `ChatIdBlocked` in `chat`
   |                         |     no `ChatId` in `chat`
   |                         no `Chat` in `chat`

error[E0432]: unresolved imports `crate::chat::add_device_msg`, `crate::chat::add_device_msg_with_importance`
  --> src/tools.rs:36:19
   |
36 | use crate::chat::{add_device_msg, add_device_msg_with_importance};
   |                   ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `add_device_msg_with_importance` in `chat`
   |                   |
   |                   no `add_device_msg` in `chat`

error[E0432]: unresolved import `crate::chat::send_msg`
  --> src/peer_channels.rs:39:5
   |
39 | use crate::chat::send_msg;
   |     ^^^^^^^^^^^^^^^^^^^^^ no `send_msg` in `chat`

error[E0432]: unresolved imports `crate::chat::send_msg`, `crate::chat::Chat`, `crate::chat::ChatId`
  --> src/reaction.rs:23:19
   |
23 | use crate::chat::{send_msg, Chat, ChatId};
   |                   ^^^^^^^^  ^^^^  ^^^^^^ no `ChatId` in `chat`
   |                   |         |
   |                   |         no `Chat` in `chat`
   |                   no `send_msg` in `chat`

error[E0433]: failed to resolve: could not find `SyncId` in `chat`
   --> src/contact.rs:652:23
    |
652 |                 chat::SyncId::ContactAddr(addr.to_string()),
    |                       ^^^^^^ could not find `SyncId` in `chat`

error[E0433]: failed to resolve: could not find `SyncAction` in `chat`
   --> src/contact.rs:653:23
    |
653 |                 chat::SyncAction::Rename(name.to_string()),
    |                       ^^^^^^^^^^ could not find `SyncAction` in `chat`

error[E0433]: failed to resolve: could not find `SyncAction` in `chat`
    --> src/contact.rs:1602:31
     |
1602 |                 true => chat::SyncAction::Block,
     |                               ^^^^^^^^^^ could not find `SyncAction` in `chat`

error[E0433]: failed to resolve: could not find `SyncAction` in `chat`
    --> src/contact.rs:1603:32
     |
1603 |                 false => chat::SyncAction::Unblock,
     |                                ^^^^^^^^^^ could not find `SyncAction` in `chat`

error[E0433]: failed to resolve: could not find `SyncId` in `chat`
    --> src/contact.rs:1607:23
     |
1607 |                 chat::SyncId::ContactAddr(contact.addr.clone()),
     |                       ^^^^^^ could not find `SyncId` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/imap.rs:2044:19
     |
2044 |             chat::Chat::load_from_db(context, parent.get_chat_id()).await?,
     |                   ^^^^ could not find `Chat` in `chat`

error[E0425]: cannot find function `resume_securejoin_wait` in module `chat`
   --> src/sql.rs:304:15
    |
304 |         chat::resume_securejoin_wait(context)
    |               ^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_device_msg` in module `chat`
   --> src/configure.rs:158:22
    |
158 |             if chat::add_device_msg(context, Some("core-provider-info"), Some(&mut msg))
    |                      ^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_device_msg` in module `chat`
   --> src/configure.rs:173:23
    |
173 |                 chat::add_device_msg(context, None, Some(&mut msg))
    |                       ^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `sync` in module `chat`
   --> src/contact.rs:650:19
    |
650 |             chat::sync(
    |                   ^^^^ not found in `chat`
    |
help: consider importing this function
    |
3   + use libc::sync;
    |
help: if you import `sync`, refer to it directly
    |
650 -             chat::sync(
650 +             sync(
    |

error[E0432]: unresolved imports `crate::chat::create_broadcast_list`, `crate::chat::create_group_chat`, `crate::chat::set_muted`, `crate::chat::ChatId`, `crate::chat::ChatVisibility`, `crate::chat::MuteDuration`, `crate::chat::ProtectionStatus`
  --> src/events/chatlist_events.rs:68:19
   |
68 |             self, create_broadcast_list, create_group_chat, set_muted, ChatId, ChatVisibility,
   |                   ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^  ^^^^^^  ^^^^^^^^^^^^^^ no `ChatVisibility` in `chat`
   |                   |                      |                  |          |
   |                   |                      |                  |          no `ChatId` in `chat`
   |                   |                      |                  no `set_muted` in `chat`
   |                   |                      no `create_group_chat` in `chat`
   |                   no `create_broadcast_list` in `chat`
69 |             MuteDuration, ProtectionStatus,
   |             ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |             |
   |             no `MuteDuration` in `chat`
   |
   = help: consider importing this unresolved item through its public re-export instead:
           crate::chatlist_events::ChatId

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
    --> src/contact.rs:1594:23
     |
1594 |                 chat::get_chat_id_by_grpid(context, &contact.addr).await?
     |                       ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `sync` in module `chat`
    --> src/contact.rs:1605:19
     |
1605 |             chat::sync(
     |                   ^^^^ not found in `chat`
     |
help: consider importing this function
     |
3    + use libc::sync;
     |
help: if you import `sync`, refer to it directly
     |
1605 -             chat::sync(
1605 +             sync(
     |

error[E0432]: unresolved imports `crate::chat::create_group_chat`, `crate::chat::ProtectionStatus`
   --> src/blob.rs:748:29
    |
748 |     use crate::chat::{self, create_group_chat, ProtectionStatus};
    |                             ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
    |                             |
    |                             no `create_group_chat` in `chat`

error[E0425]: cannot find function `add_device_msg_with_importance` in module `chat`
   --> src/imap.rs:454:31
    |
454 |                         chat::add_device_msg_with_importance(context, None, Some(&mut msg), true)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `mark_old_messages_as_noticed` in module `chat`
   --> src/imap.rs:753:15
    |
753 |         chat::mark_old_messages_as_noticed(context, received_msgs).await?;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0412]: cannot find type `Chat` in module `chat`
    --> src/imap.rs:2040:26
     |
2040 | ) -> Result<Option<chat::Chat>> {
     |                          ^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/imex.rs:172:11
    |
172 |     chat::send_msg(context, chat_id, &mut msg).await?;
    |           ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_device_msg` in module `chat`
   --> src/imex.rs:263:15
    |
263 |         chat::add_device_msg(context, Some("bcc-self-hint"), Some(&mut msg)).await?;
    |               ^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/location.rs:296:15
    |
296 |         chat::send_msg(context, chat_id, &mut msg)
    |               ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_info_msg` in module `chat`
   --> src/location.rs:301:15
    |
301 |         chat::add_info_msg(context, chat_id, &stock_str, now).await?;
    |               ^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::add_contact_to_chat`, `crate::chat::create_group_chat`, `crate::chat::get_chat_contacts`, `crate::chat::remove_contact_from_chat`, `crate::chat::send_text_msg`, `crate::chat::ProtectionStatus`
   --> src/chatlist.rs:474:9
    |
474 |         add_contact_to_chat, create_group_chat, get_chat_contacts, remove_contact_from_chat,
    |         ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^ no `remove_contact_from_chat` in `chat`
    |         |                    |                  |
    |         |                    |                  no `get_chat_contacts` in `chat`
    |         |                    no `create_group_chat` in `chat`
    |         no `add_contact_to_chat` in `chat`
475 |         send_text_msg, ProtectionStatus,
    |         ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
    |         |
    |         no `send_text_msg` in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/location.rs:836:27
    |
836 |                     chat::send_msg(context, chat_id, &mut msg).await?;
    |                           ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_info_msg` in module `chat`
   --> src/location.rs:873:19
    |
873 |             chat::add_info_msg(context, chat_id, &stock_str, now).await?;
    |                   ^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `shall_attach_selfavatar` in module `chat`
   --> src/mimefactory.rs:411:27
    |
411 |         }) && match chat::shall_attach_selfavatar(context, msg.chat_id).await {
    |                           ^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`, `crate::chat::ProtectionStatus`
  --> src/contact.rs:25:19
   |
25 | use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
   |                   ^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                   |       |
   |                   |       no `ChatIdBlocked` in `chat`
   |                   no `ChatId` in `chat`
   |
   = note: unresolved item `crate::constants::tests::ChatId` exists but is inaccessible

error[E0425]: cannot find function `remove_from_chat_contacts_table` in module `chat`
   --> src/peerstate.rs:702:35
    |
702 | ...                   chat::remove_from_chat_contacts_table(context, *chat_id, contact_id)
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_to_chat_contacts_table` in module `chat`
   --> src/peerstate.rs:704:35
    |
704 | ...                   chat::add_to_chat_contacts_table(context, *chat_id, &[new_contact_id])
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::get_chat_contacts`, `crate::chat::send_text_msg`, `crate::chat::Chat`
    --> src/contact.rs:1930:23
     |
1930 |     use crate::chat::{get_chat_contacts, send_text_msg, Chat};
     |                       ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^ no `Chat` in `chat`
     |                       |                  |
     |                       |                  no `send_text_msg` in `chat`
     |                       no `get_chat_contacts` in `chat`
     |
     = note: unresolved item `crate::chatlist::tests::Chat` exists but is inaccessible

error[E0425]: cannot find function `add_info_msg_with_cmd` in module `chat`
   --> src/peerstate.rs:721:19
    |
721 |             chat::add_info_msg_with_cmd(
    |                   ^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_to_chat_contacts_table` in module `chat`
  --> src/securejoin/bob.rs:62:23
   |
62 |                 chat::add_to_chat_contacts_table(context, group_chat_id, &[invite.contact_id()])
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::get_chat_cnt`, `crate::chat::ChatId`, `crate::chat::ProtectionStatus`
  --> src/context.rs:18:19
   |
18 | use crate::chat::{get_chat_cnt, ChatId, ProtectionStatus};
   |                   ^^^^^^^^^^^^  ^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                   |             |
   |                   |             no `ChatId` in `chat`
   |                   no `get_chat_cnt` in `chat`
   |
   = note: unresolved item `crate::contact::tests::ChatId` exists but is inaccessible
   = note: unresolved item `crate::contact::tests::ProtectionStatus` exists but is inaccessible

error[E0425]: cannot find function `add_info_msg` in module `chat`
  --> src/securejoin/bob.rs:66:19
   |
66 |             chat::add_info_msg(context, group_chat_id, &msg, time()).await?;
   |                   ^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_info_msg_with_cmd` in module `chat`
  --> src/securejoin/bob.rs:81:23
   |
81 |                 chat::add_info_msg_with_cmd(
   |                       ^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_info_msg` in module `chat`
   --> src/securejoin/bob.rs:123:23
    |
123 |                 chat::add_info_msg(context, chat_id, &msg, time()).await?;
    |                       ^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
   --> src/securejoin/bob.rs:168:49
    |
168 |                 let group_chat_id = match chat::get_chat_id_by_grpid(context, grpid).await? {
    |                                                 ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::get_chat_contacts`, `crate::chat::get_chat_msgs`, `crate::chat::send_msg`, `crate::chat::set_muted`, `crate::chat::Chat`, `crate::chat::MuteDuration`
    --> src/context.rs:1403:23
     |
1403 |     use crate::chat::{get_chat_contacts, get_chat_msgs, send_msg, set_muted, Chat, MuteDuration};
     |                       ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^  ^^^^^^^^^  ^^^^  ^^^^^^^^^^^^ no `MuteDuration` in `chat`
     |                       |                  |              |         |          |
     |                       |                  |              |         |          no `Chat` in `chat`
     |                       |                  |              |         no `set_muted` in `chat`
     |                       |                  |              no `send_msg` in `chat`
     |                       |                  no `get_chat_msgs` in `chat`
     |                       no `get_chat_contacts` in `chat`
     |
     = note: unresolved item `crate::chatlist::tests::Chat` exists but is inaccessible

error[E0425]: cannot find function `add_info_msg` in module `chat`
   --> src/securejoin/bob.rs:199:15
    |
199 |         chat::add_info_msg(context, chat_id, &msg, time()).await?;
    |               ^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/securejoin/bobstate.rs:409:11
    |
409 |     chat::send_msg(context, chat_id, &mut msg).await?;
    |           ^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::get_chat_msgs`, `crate::chat::send_msg`
   --> src/download.rs:255:23
    |
255 |     use crate::chat::{get_chat_msgs, send_msg};
    |                       ^^^^^^^^^^^^^  ^^^^^^^^ no `send_msg` in `chat`
    |                       |
    |                       no `get_chat_msgs` in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/securejoin.rs:185:11
    |
185 |     chat::send_msg(
    |           ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_contact_to_chat_ex` in module `chat`
   --> src/securejoin.rs:477:23
    |
477 |                 chat::add_contact_to_chat_ex(context, Nosync, group_chat_id, contact_id, true)
    |                       ^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::send_msg`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`
  --> src/ephemeral.rs:77:19
   |
77 | use crate::chat::{send_msg, ChatId, ChatIdBlocked};
   |                   ^^^^^^^^  ^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |                   |         |
   |                   |         no `ChatId` in `chat`
   |                   no `send_msg` in `chat`
   |
   = note: unresolved item `crate::context::tests::ChatId` exists but is inaccessible
   = note: unresolved item `crate::contact::tests::ChatIdBlocked` exists but is inaccessible

error[E0425]: cannot find function `add_info_msg` in module `chat`
   --> src/securejoin.rs:694:11
    |
694 |     chat::add_info_msg(context, chat_id, &msg, time()).await?;
    |           ^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_device_msg` in module `chat`
    --> src/stock_str.rs:1451:15
     |
1451 |         chat::add_device_msg(self, Some("core-welcome-image"), Some(&mut msg)).await?;
     |               ^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_device_msg` in module `chat`
    --> src/stock_str.rs:1455:15
     |
1455 |         chat::add_device_msg(self, Some("core-welcome"), Some(&mut msg)).await?;
     |               ^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::create_group_chat`, `crate::chat::send_text_msg`, `crate::chat::Chat`, `crate::chat::ChatItem`, `crate::chat::ProtectionStatus`
   --> src/ephemeral.rs:699:22
    |
699 |         chat::{self, create_group_chat, send_text_msg, Chat, ChatItem, ProtectionStatus},
    |                      ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^  ^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
    |                      |                  |              |     |
    |                      |                  |              |     no `ChatItem` in `chat`
    |                      |                  |              no `Chat` in `chat`
    |                      |                  no `send_text_msg` in `chat`
    |                      no `create_group_chat` in `chat`
    |
    = note: unresolved item `crate::chatlist::tests::Chat` exists but is inaccessible
    = note: unresolved item `crate::context::tests::ProtectionStatus` exists but is inaccessible

error[E0412]: cannot find type `SyncId` in module `chat`
  --> src/sync.rs:58:19
   |
58 |         id: chat::SyncId,
   |                   ^^^^^^ not found in `chat`

error[E0412]: cannot find type `SyncAction` in module `chat`
  --> src/sync.rs:59:23
   |
59 |         action: chat::SyncAction,
   |                       ^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`
  --> src/imap.rs:27:25
   |
27 | use crate::chat::{self, ChatId, ChatIdBlocked};
   |                         ^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |                         |
   |                         no `ChatId` in `chat`
   |
   = note: unresolved item `crate::ephemeral::tests::ChatId` exists but is inaccessible
   = note: unresolved item `crate::ephemeral::tests::ChatIdBlocked` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::delete_and_reset_all_device_msgs`, `crate::chat::ChatId`
  --> src/imex.rs:17:25
   |
17 | use crate::chat::{self, delete_and_reset_all_device_msgs, ChatId};
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
   |                         |
   |                         no `delete_and_reset_all_device_msgs` in `chat`
   |
   = note: unresolved item `crate::imap::tests::ChatId` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::add_device_msg`, `crate::chat::delete_and_reset_all_device_msgs`
  --> src/imex/transfer.rs:51:19
   |
51 | use crate::chat::{add_device_msg, delete_and_reset_all_device_msgs};
   |                   ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `delete_and_reset_all_device_msgs` in `chat`
   |                   |
   |                   no `add_device_msg` in `chat`
   |
   = note: unresolved item `crate::sql::tests::add_device_msg` exists but is inaccessible
   = help: consider importing this unresolved item through its public re-export instead:
           crate::imex::delete_and_reset_all_device_msgs

error[E0432]: unresolved imports `crate::chat::get_chat_msgs`, `crate::chat::send_msg`, `crate::chat::ChatItem`
   --> src/imex/transfer.rs:600:23
    |
600 |     use crate::chat::{get_chat_msgs, send_msg, ChatItem};
    |                       ^^^^^^^^^^^^^  ^^^^^^^^  ^^^^^^^^ no `ChatItem` in `chat`
    |                       |              |
    |                       |              no `send_msg` in `chat`
    |                       no `get_chat_msgs` in `chat`
    |
    = note: unresolved item `crate::ephemeral::tests::send_msg` exists but is inaccessible

error[E0432]: unresolved import `crate::chat::ChatId`
  --> src/location.rs:20:25
   |
20 | use crate::chat::{self, ChatId};
   |                         ^^^^^^ no `ChatId` in `chat`
   |
   = note: unresolved item `crate::imex::tests::ChatId` exists but is inaccessible

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/sync.rs:188:27
    |
188 |             Ok(Some(chat::send_msg(self, chat_id, &mut msg).await?))
    |                           ^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`
  --> src/message.rs:13:19
   |
13 | use crate::chat::{Chat, ChatId, ChatIdBlocked};
   |                   ^^^^  ^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |                   |     |
   |                   |     no `ChatId` in `chat`
   |                   no `Chat` in `chat`
   |
   = note: unresolved item `crate::chatlist::tests::Chat` exists but is inaccessible
   = note: unresolved item `crate::location::tests::ChatId` exists but is inaccessible
   = note: unresolved item `crate::imap::tests::ChatIdBlocked` exists but is inaccessible

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
   --> src/sync.rs:292:50
    |
292 |             if let Some((chat_id, _, _)) = chat::get_chat_id_by_grpid(self, grpid).await? {
    |                                                  ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
  --> src/webxdc/maps_integration.rs:91:15
   |
91 |         chat::send_msg(context, chat_id, &mut poi_msg).await?;
   |               ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `update_msg_text_and_timestamp` in module `chat`
   --> src/webxdc.rs:308:27
    |
308 |                     chat::update_msg_text_and_timestamp(
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::add_contact_to_chat`, `crate::chat::marknoticed_chat`, `crate::chat::send_text_msg`, `crate::chat::ChatItem`, `crate::chat::ProtectionStatus`
    --> src/message.rs:2034:15
     |
2034 |         self, add_contact_to_chat, marknoticed_chat, send_text_msg, ChatItem, ProtectionStatus,
     |               ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
     |               |                    |                 |              |
     |               |                    |                 |              no `ChatItem` in `chat`
     |               |                    |                 no `send_text_msg` in `chat`
     |               |                    no `marknoticed_chat` in `chat`
     |               no `add_contact_to_chat` in `chat`
     |
     = note: unresolved item `crate::context::tests::ProtectionStatus` exists but is inaccessible

error[E0425]: cannot find function `add_info_msg_with_cmd` in module `chat`
   --> src/webxdc.rs:317:27
    |
317 |                     chat::add_info_msg_with_cmd(
    |                           ^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved import `crate::chat::Chat`
  --> src/mimefactory.rs:13:25
   |
13 | use crate::chat::{self, Chat};
   |                         ^^^^ no `Chat` in `chat`
   |
   = note: unresolved item `crate::message::tests::Chat` exists but is inaccessible

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/webxdc.rs:560:23
    |
560 |                 chat::send_msg(self, instance.chat_id, &mut status_update).await?;
    |                       ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `is_contact_in_chat` in module `chat`
   --> src/webxdc.rs:599:49
    |
599 |         if from_id != ContactId::SELF && !chat::is_contact_in_chat(self, chat_id, from_id).await? {
    |                                                 ^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
   --> src/receive_imf.rs:789:27
    |
789 |                     chat::get_chat_id_by_grpid(context, grpid).await?
    |                           ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `is_contact_in_chat` in module `chat`
   --> src/receive_imf.rs:868:23
    |
868 |             if !chat::is_contact_in_chat(context, group_chat_id, from_id).await? {
    |                       ^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
    --> src/receive_imf.rs:1051:27
     |
1051 |                     chat::get_chat_id_by_grpid(context, grpid).await?
     |                           ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::add_contact_to_chat`, `crate::chat::create_group_chat`, `crate::chat::remove_contact_from_chat`, `crate::chat::send_text_msg`, `crate::chat::ChatId`, `crate::chat::ProtectionStatus`
    --> src/mimefactory.rs:1625:9
     |
1625 |         add_contact_to_chat, create_group_chat, remove_contact_from_chat, send_text_msg, ChatId,
     |         ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
     |         |                    |                  |                         |
     |         |                    |                  |                         no `send_text_msg` in `chat`
     |         |                    |                  no `remove_contact_from_chat` in `chat`
     |         |                    no `create_group_chat` in `chat`
     |         no `add_contact_to_chat` in `chat`
1626 |         ProtectionStatus,
     |         ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
     |
     = note: unresolved item `crate::message::tests::ChatId` exists but is inaccessible
     = note: unresolved item `crate::context::tests::ProtectionStatus` exists but is inaccessible

error[E0425]: cannot find function `add_device_msg` in module `chat`
    --> src/receive_imf.rs:1083:23
     |
1083 |                 chat::add_device_msg(context, None, Some(&mut msg))
     |                       ^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
    --> src/receive_imf.rs:1123:31
     |
1123 |                         chat::get_chat_id_by_grpid(context, list_id).await?
     |                               ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::add_info_msg`, `crate::chat::ChatId`
  --> src/mimeparser.rs:17:19
   |
17 | use crate::chat::{add_info_msg, ChatId};
   |                   ^^^^^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
   |                   |
   |                   no `add_info_msg` in `chat`
   |
   = note: unresolved item `crate::message::tests::ChatId` exists but is inaccessible

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
    --> src/receive_imf.rs:1189:51
     |
1189 |                     if let Some((id, ..)) = chat::get_chat_id_by_grpid(context, &listid).await? {
     |                                                   ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved import `crate::chat::Chat`
  --> src/peerstate.rs:10:25
   |
10 | use crate::chat::{self, Chat};
   |                         ^^^^ no `Chat` in `chat`
   |
   = note: unresolved item `crate::mimefactory::tests::Chat` exists but is inaccessible

error[E0425]: cannot find function `create_broadcast_list_ex` in module `chat`
    --> src/receive_imf.rs:1194:31
     |
1194 |                         chat::create_broadcast_list_ex(context, Nosync, listid, name).await?
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::get_chat_id_by_grpid`, `crate::chat::ChatIdBlocked`
  --> src/qr.rs:14:19
   |
14 | use crate::chat::{get_chat_id_by_grpid, ChatIdBlocked};
   |                   ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |                   |
   |                   no `get_chat_id_by_grpid` in `chat`
   |
   = note: unresolved item `crate::message::tests::ChatIdBlocked` exists but is inaccessible

error[E0425]: cannot find function `add_info_msg` in module `chat`
    --> src/receive_imf.rs:1302:27
     |
1302 |                     chat::add_info_msg(
     |                           ^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_info_msg_with_cmd` in module `chat`
    --> src/receive_imf.rs:1415:15
     |
1415 |         chat::add_info_msg_with_cmd(
     |               ^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::create_group_chat`, `crate::chat::ProtectionStatus`
   --> src/qr.rs:826:23
    |
826 |     use crate::chat::{create_group_chat, ProtectionStatus};
    |                       ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
    |                       |
    |                       no `create_group_chat` in `chat`
    |
    = note: unresolved item `crate::context::tests::ProtectionStatus` exists but is inaccessible

error[E0425]: cannot find function `marknoticed_chat_if_older_than` in module `chat`
    --> src/receive_imf.rs:1650:15
     |
1650 |         chat::marknoticed_chat_if_older_than(context, chat_id, sort_timestamp).await?;
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf.rs:1769:39
     |
1769 |         let mut chat_contacts = chat::get_chat_contacts(context, parent_chat.id).await?;
     |                                       ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`
 --> src/qr_code_generator.rs:8:19
  |
8 | use crate::chat::{Chat, ChatId};
  |                   ^^^^  ^^^^^^ no `ChatId` in `chat`
  |                   |
  |                   no `Chat` in `chat`
  |
  = note: unresolved item `crate::peerstate::tests::Chat` exists but is inaccessible
  = note: unresolved item `crate::mimeparser::tests::ChatId` exists but is inaccessible

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf.rs:1811:35
     |
1811 |         let chat_contacts = chat::get_chat_contacts(context, parent_chat_id).await?;
     |                                   ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `is_group_explicitly_left` in module `chat`
    --> src/receive_imf.rs:1903:24
     |
1903 |             && (!chat::is_group_explicitly_left(context, &grpid).await?
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_to_chat_contacts_table` in module `chat`
    --> src/receive_imf.rs:1937:15
     |
1937 |         chat::add_to_chat_contacts_table(context, new_chat_id, &members).await?;
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf.rs:1999:47
     |
1999 |         HashSet::<ContactId>::from_iter(chat::get_chat_contacts(context, chat_id).await?);
     |                                               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`, `crate::chat::ProtectionStatus`
 --> src/securejoin.rs:7:25
  |
7 | use crate::chat::{self, Chat, ChatId, ChatIdBlocked, ProtectionStatus};
  |                         ^^^^  ^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
  |                         |     |       |
  |                         |     |       no `ChatIdBlocked` in `chat`
  |                         |     no `ChatId` in `chat`
  |                         no `Chat` in `chat`
  |
  = note: unresolved item `crate::qr_code_generator::tests::Chat` exists but is inaccessible
  = note: unresolved item `crate::qr_code_generator::tests::ChatId` exists but is inaccessible
  = note: unresolved item `crate::qr::tests::ChatIdBlocked` exists but is inaccessible
  = note: unresolved item `crate::context::tests::ProtectionStatus` exists but is inaccessible

error[E0425]: cannot find function `update_chat_contacts_table` in module `chat`
    --> src/receive_imf.rs:2205:19
     |
2205 |             chat::update_chat_contacts_table(context, chat_id, &new_members).await?;
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
    --> src/receive_imf.rs:2290:48
     |
2290 |     if let Some((chat_id, _, blocked)) = chat::get_chat_id_by_grpid(context, &listid).await? {
     |                                                ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_to_chat_contacts_table` in module `chat`
    --> src/receive_imf.rs:2328:15
     |
2328 |         chat::add_to_chat_contacts_table(context, chat_id, &[ContactId::SELF]).await?;
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_to_chat_contacts_table` in module `chat`
    --> src/receive_imf.rs:2521:11
     |
2521 |     chat::add_to_chat_contacts_table(context, new_chat_id, member_ids).await?;
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0432]: unresolved imports `crate::chat::remove_contact_from_chat`, `crate::chat::CantSendReason`
   --> src/securejoin.rs:760:23
    |
760 |     use crate::chat::{remove_contact_from_chat, CantSendReason};
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^ no `CantSendReason` in `chat`
    |                       |
    |                       no `remove_contact_from_chat` in `chat`

error[E0432]: unresolved imports `crate::chat::add_info_msg_with_cmd`, `crate::chat::ChatId`
  --> src/smtp.rs:13:19
   |
13 | use crate::chat::{add_info_msg_with_cmd, ChatId};
   |                   ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
   |                   |
   |                   no `add_info_msg_with_cmd` in `chat`
   |
   = note: unresolved item `crate::securejoin::tests::ChatId` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ProtectionStatus`
  --> src/stock_str.rs:14:25
   |
14 | use crate::chat::{self, Chat, ChatId, ProtectionStatus};
   |                         ^^^^  ^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                         |     |
   |                         |     no `ChatId` in `chat`
   |                         no `Chat` in `chat`
   |
   = note: unresolved item `crate::securejoin::tests::Chat` exists but is inaccessible
   = note: unresolved item `crate::securejoin::tests::ChatId` exists but is inaccessible
   = note: unresolved item `crate::securejoin::tests::ProtectionStatus` exists but is inaccessible

error[E0432]: unresolved import `crate::chat::delete_and_reset_all_device_msgs`
    --> src/stock_str.rs:1476:9
     |
1476 |     use crate::chat::delete_and_reset_all_device_msgs;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `delete_and_reset_all_device_msgs` in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`
 --> src/sync.rs:7:25
  |
7 | use crate::chat::{self, Chat, ChatId};
  |                         ^^^^  ^^^^^^ no `ChatId` in `chat`
  |                         |
  |                         no `Chat` in `chat`
  |
  = note: unresolved item `crate::stock_str::tests::Chat` exists but is inaccessible
  = note: unresolved item `crate::stock_str::tests::ChatId` exists but is inaccessible

error[E0432]: unresolved import `crate::chat::Chat`
  --> src/update_helper.rs:89:9
   |
89 |     use crate::chat::Chat;
   |         ^^^^^^^^^^^^^^^^^ no `Chat` in `chat`

error[E0432]: unresolved imports `crate::chat::send_msg`, `crate::chat::ChatId`
 --> src/webxdc/integration.rs:1:19
  |
1 | use crate::chat::{send_msg, ChatId};
  |                   ^^^^^^^^  ^^^^^^ no `ChatId` in `chat`
  |                   |
  |                   no `send_msg` in `chat`
  |
  = note: unresolved item `crate::ephemeral::tests::send_msg` exists but is inaccessible
  = note: unresolved item `crate::update_helper::tests::ChatId` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::create_group_chat`, `crate::chat::ChatId`, `crate::chat::ProtectionStatus`
   --> src/webxdc/maps_integration.rs:170:23
    |
170 |     use crate::chat::{create_group_chat, ChatId, ProtectionStatus};
    |                       ^^^^^^^^^^^^^^^^^  ^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
    |                       |                  |
    |                       |                  no `ChatId` in `chat`
    |                       no `create_group_chat` in `chat`
    |
    = help: consider importing this unresolved item through its public re-export instead:
            crate::webxdc::maps_integration::ChatId
    = note: unresolved item `crate::stock_str::tests::ProtectionStatus` exists but is inaccessible

error[E0432]: unresolved import `crate::chat::Chat`
  --> src/webxdc.rs:33:25
   |
33 | use crate::chat::{self, Chat};
   |                         ^^^^ no `Chat` in `chat`
   |
   = note: unresolved item `crate::sync::tests::Chat` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::add_contact_to_chat`, `crate::chat::create_broadcast_list`, `crate::chat::create_group_chat`, `crate::chat::forward_msgs`, `crate::chat::remove_contact_from_chat`, `crate::chat::resend_msgs`, `crate::chat::send_msg`, `crate::chat::send_text_msg`, `crate::chat::ChatId`, `crate::chat::ProtectionStatus`
   --> src/webxdc.rs:870:9
    |
870 |         add_contact_to_chat, create_broadcast_list, create_group_chat, forward_msgs,
    |         ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^ no `forward_msgs` in `chat`
    |         |                    |                      |
    |         |                    |                      no `create_group_chat` in `chat`
    |         |                    no `create_broadcast_list` in `chat`
    |         no `add_contact_to_chat` in `chat`
871 |         remove_contact_from_chat, resend_msgs, send_msg, send_text_msg, ChatId, ProtectionStatus,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
    |         |                         |            |         |              |
    |         |                         |            |         |              no `ChatId` in `chat`
    |         |                         |            |         no `send_text_msg` in `chat`
    |         |                         |            no `send_msg` in `chat`
    |         |                         no `resend_msgs` in `chat`
    |         no `remove_contact_from_chat` in `chat`
    |
    = note: unresolved item `crate::ephemeral::tests::send_msg` exists but is inaccessible
    = note: unresolved item `crate::update_helper::tests::ChatId` exists but is inaccessible
    = note: unresolved item `crate::stock_str::tests::ProtectionStatus` exists but is inaccessible

error[E0432]: unresolved import `crate::chat::forward_msgs`
   --> src/html.rs:266:9
    |
266 |     use crate::chat::forward_msgs;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ no `forward_msgs` in `chat`

error[E0432]: unresolved imports `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`, `crate::chat::ProtectionStatus`
  --> src/receive_imf.rs:17:25
   |
17 | use crate::chat::{self, Chat, ChatId, ChatIdBlocked, ProtectionStatus};
   |                         ^^^^  ^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |                         |     |       |
   |                         |     |       no `ChatIdBlocked` in `chat`
   |                         |     no `ChatId` in `chat`
   |                         no `Chat` in `chat`
   |
   = note: unresolved item `crate::summary::tests::Chat` exists but is inaccessible
   = note: unresolved item `crate::update_helper::tests::ChatId` exists but is inaccessible
   = note: unresolved item `crate::securejoin::tests::ChatIdBlocked` exists but is inaccessible
   = note: unresolved item `crate::stock_str::tests::ProtectionStatus` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::add_contact_to_chat`, `crate::chat::add_to_chat_contacts_table`, `crate::chat::create_group_chat`, `crate::chat::get_chat_contacts`, `crate::chat::get_chat_msgs`, `crate::chat::is_contact_in_chat`, `crate::chat::remove_contact_from_chat`, `crate::chat::send_text_msg`, `crate::chat::ChatItem`, `crate::chat::ChatVisibility`
 --> src/receive_imf/tests.rs:7:5
  |
7 |     add_contact_to_chat, add_to_chat_contacts_table, create_group_chat, get_chat_contacts,
  |     ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^ no `get_chat_contacts` in `chat`
  |     |                    |                           |
  |     |                    |                           no `create_group_chat` in `chat`
  |     |                    no `add_to_chat_contacts_table` in `chat`
  |     no `add_contact_to_chat` in `chat`
8 |     get_chat_msgs, is_contact_in_chat, remove_contact_from_chat, send_text_msg, ChatItem,
  |     ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^ no `ChatItem` in `chat`
  |     |              |                   |                         |
  |     |              |                   |                         no `send_text_msg` in `chat`
  |     |              |                   no `remove_contact_from_chat` in `chat`
  |     |              no `is_contact_in_chat` in `chat`
  |     no `get_chat_msgs` in `chat`
9 |     ChatVisibility,
  |     ^^^^^^^^^^^^^^ no `ChatVisibility` in `chat`
  |
  = note: unresolved item `crate::chatlist::tests::ChatVisibility` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::add_device_msg`, `crate::chat::add_device_msg_with_importance`
  --> src/tools.rs:36:19
   |
36 | use crate::chat::{add_device_msg, add_device_msg_with_importance};
   |                   ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `add_device_msg_with_importance` in `chat`
   |                   |
   |                   no `add_device_msg` in `chat`
   |
   = note: unresolved item `crate::imex::transfer::tests::add_device_msg` exists but is inaccessible
   = note: unresolved item `crate::quota::tests::add_device_msg_with_importance` exists but is inaccessible

error[E0432]: unresolved import `crate::chat::send_msg`
   --> src/peer_channels.rs:456:9
    |
456 |         chat::send_msg,
    |         ^^^^^^^^^^^^^^ no `send_msg` in `chat`
    |
    = help: consider importing this unresolved item through its public re-export instead:
            crate::peer_channels::send_msg

error[E0432]: unresolved imports `crate::chat::send_msg`, `crate::chat::Chat`, `crate::chat::ChatId`
  --> src/reaction.rs:23:19
   |
23 | use crate::chat::{send_msg, Chat, ChatId};
   |                   ^^^^^^^^  ^^^^  ^^^^^^ no `ChatId` in `chat`
   |                   |         |
   |                   |         no `Chat` in `chat`
   |                   no `send_msg` in `chat`
   |
   = note: unresolved item `crate::ephemeral::tests::send_msg` exists but is inaccessible
   = note: unresolved item `crate::receive_imf::tests::Chat` exists but is inaccessible
   = note: unresolved item `crate::receive_imf::tests::ChatId` exists but is inaccessible

error[E0432]: unresolved imports `crate::chat::forward_msgs`, `crate::chat::get_chat_msgs`, `crate::chat::send_text_msg`
   --> src/reaction.rs:388:23
    |
388 |     use crate::chat::{forward_msgs, get_chat_msgs, send_text_msg};
    |                       ^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^ no `send_text_msg` in `chat`
    |                       |             |
    |                       |             no `get_chat_msgs` in `chat`
    |                       no `forward_msgs` in `chat`

error[E0432]: unresolved imports `crate::chat::add_to_chat_contacts_table`, `crate::chat::create_group_chat`, `crate::chat::Chat`, `crate::chat::ChatId`, `crate::chat::ChatIdBlocked`, `crate::chat::MessageListOptions`, `crate::chat::ProtectionStatus`
  --> src/test_utils.rs:25:11
   |
25 |     self, add_to_chat_contacts_table, create_group_chat, Chat, ChatId, ChatIdBlocked,
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^  ^^^^^^  ^^^^^^^^^^^^^ no `ChatIdBlocked` in `chat`
   |           |                           |                  |     |
   |           |                           |                  |     no `ChatId` in `chat`
   |           |                           |                  no `Chat` in `chat`
   |           |                           no `create_group_chat` in `chat`
   |           no `add_to_chat_contacts_table` in `chat`
26 |     MessageListOptions, ProtectionStatus,
   |     ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
   |     |
   |     no `MessageListOptions` in `chat`
   |
   = note: unresolved item `crate::reaction::tests::Chat` exists but is inaccessible
   = note: unresolved item `crate::reaction::tests::ChatId` exists but is inaccessible
   = note: unresolved item `crate::receive_imf::tests::ChatIdBlocked` exists but is inaccessible
   = note: unresolved item `crate::receive_imf::tests::ProtectionStatus` exists but is inaccessible

error[E0432]: unresolved import `crate::chat::ChatId`
 --> src/tests/aeap.rs:6:5
  |
6 | use crate::chat::ChatId;
  |     ^^^^^^^^^^^^^^^^^^^ no `ChatId` in `chat`

error[E0432]: unresolved imports `crate::chat::add_contact_to_chat`, `crate::chat::Chat`, `crate::chat::ProtectionStatus`
 --> src/tests/verified_chats.rs:4:25
  |
4 | use crate::chat::{self, add_contact_to_chat, Chat, ProtectionStatus};
  |                         ^^^^^^^^^^^^^^^^^^^  ^^^^  ^^^^^^^^^^^^^^^^ no `ProtectionStatus` in `chat`
  |                         |                    |
  |                         |                    no `Chat` in `chat`
  |                         no `add_contact_to_chat` in `chat`
  |
  = note: unresolved item `crate::test_utils::tests::Chat` exists but is inaccessible
  = note: unresolved item `crate::test_utils::tests::ProtectionStatus` exists but is inaccessible

error[E0432]: unresolved import `chat::ChatItem`
  --> src/test_utils.rs:15:5
   |
15 | use chat::ChatItem;
   |     ^^^^^^^^^^^^^^ no `ChatItem` in `chat`

error[E0433]: failed to resolve: could not find `ProtectionStatus` in `chat`
   --> src/events/chatlist_events.rs:143:26
    |
143 |             crate::chat::ProtectionStatus::Unprotected,
    |                          ^^^^^^^^^^^^^^^^ could not find `ProtectionStatus` in `chat`

error[E0433]: failed to resolve: could not find `ProtectionStatus` in `chat`
    --> src/mimefactory.rs:1951:47
     |
1951 |             chat::create_group_chat(&t, chat::ProtectionStatus::Unprotected, "groupname") // TODO encodings, ä
     |                                               ^^^^^^^^^^^^^^^^ could not find `ProtectionStatus` in `chat`

error[E0433]: failed to resolve: could not find `ChatItem` in `chat`
    --> src/securejoin.rs:1339:30
     |
1339 |                 if let chat::ChatItem::Message { msg_id } = item {
     |                              ^^^^^^^^ could not find `ChatItem` in `chat`

error[E0433]: failed to resolve: could not find `SyncId` in `chat`
   --> src/sync.rs:351:27
    |
351 |                 id: chat::SyncId::ContactAddr("bob@example.net".to_string()),
    |                           ^^^^^^ could not find `SyncId` in `chat`

error[E0433]: failed to resolve: could not find `SyncAction` in `chat`
   --> src/sync.rs:352:31
    |
352 |                 action: chat::SyncAction::SetMuted(chat::MuteDuration::Until(
    |                               ^^^^^^^^^^ could not find `SyncAction` in `chat`

error[E0433]: failed to resolve: could not find `MuteDuration` in `chat`
   --> src/sync.rs:352:58
    |
352 |                 action: chat::SyncAction::SetMuted(chat::MuteDuration::Until(
    |                                                          ^^^^^^^^^^^^ could not find `MuteDuration` in `chat`

error[E0433]: failed to resolve: could not find `SyncId` in `chat`
   --> src/sync.rs:451:19
    |
451 |             chat::SyncId::ContactAddr("bob@example.net".to_string())
    |                   ^^^^^^ could not find `SyncId` in `chat`

error[E0433]: failed to resolve: could not find `SyncAction` in `chat`
   --> src/sync.rs:455:19
    |
455 |             chat::SyncAction::SetMuted(chat::MuteDuration::Until(
    |                   ^^^^^^^^^^ could not find `SyncAction` in `chat`

error[E0433]: failed to resolve: could not find `MuteDuration` in `chat`
   --> src/sync.rs:455:46
    |
455 |             chat::SyncAction::SetMuted(chat::MuteDuration::Until(
    |                                              ^^^^^^^^^^^^ could not find `MuteDuration` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
   --> src/receive_imf/tests.rs:161:22
    |
161 |     let chat = chat::Chat::load_from_db(&t, chat_id).await.unwrap();
    |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
   --> src/receive_imf/tests.rs:164:22
    |
164 |     let chat = chat::Chat::load_from_db(&t, chat_id).await.unwrap();
    |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
   --> src/receive_imf/tests.rs:180:22
    |
180 |     let chat = chat::Chat::load_from_db(&t, chat_id).await.unwrap();
    |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
   --> src/receive_imf/tests.rs:196:22
    |
196 |     let chat = chat::Chat::load_from_db(&t, chat_id).await.unwrap();
    |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
   --> src/receive_imf/tests.rs:199:22
    |
199 |     let chat = chat::Chat::load_from_db(&t, chat_id).await.unwrap();
    |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
   --> src/receive_imf/tests.rs:874:22
    |
874 |     let chat = chat::Chat::load_from_db(&t.ctx, chat_id).await?;
    |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
   --> src/receive_imf/tests.rs:887:22
    |
887 |     let chat = chat::Chat::load_from_db(&t.ctx, chat_id).await?;
    |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
   --> src/receive_imf/tests.rs:971:22
    |
971 |     let chat = chat::Chat::load_from_db(&t.ctx, chat_id).await?;
    |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:1135:22
     |
1135 |     let chat = chat::Chat::load_from_db(&t.ctx, chat_id).await.unwrap();
     |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:2845:22
     |
2845 |     let chat = chat::Chat::load_from_db(&t, msg.chat_id).await?;
     |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:3090:29
     |
3090 |     let alice1_chat = chat::Chat::load_from_db(&alice1, alice1_msg.chat_id).await?;
     |                             ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:3095:29
     |
3095 |     let alice2_chat = chat::Chat::load_from_db(&alice2, alice2_msg.chat_id).await?;
     |                             ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:3100:27
     |
3100 |     let bob1_chat = chat::Chat::load_from_db(&bob1, bob1_msg.chat_id).await?;
     |                           ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:3105:27
     |
3105 |     let bob2_chat = chat::Chat::load_from_db(&bob2, bob2_msg.chat_id).await?;
     |                           ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:3114:29
     |
3114 |     let alice2_chat = chat::Chat::load_from_db(&alice2, alice2_msg.chat_id).await?;
     |                             ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:3199:22
     |
3199 |     let chat = chat::Chat::load_from_db(&t, msg.chat_id).await?;
     |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `Chat` in `chat`
    --> src/receive_imf/tests.rs:3211:22
     |
3211 |     let chat = chat::Chat::load_from_db(&t, msg.chat_id).await?;
     |                      ^^^^ could not find `Chat` in `chat`

error[E0433]: failed to resolve: could not find `ProtectionStatus` in `chat`
   --> src/tests/aeap.rs:149:45
    |
149 |         chat::create_group_chat(&bob, chat::ProtectionStatus::Unprotected, "Group 0")
    |                                             ^^^^^^^^^^^^^^^^ could not find `ProtectionStatus` in `chat`

error[E0433]: failed to resolve: could not find `ProtectionStatus` in `chat`
   --> src/tests/aeap.rs:152:45
    |
152 |         chat::create_group_chat(&bob, chat::ProtectionStatus::Unprotected, "Group 1")
    |                                             ^^^^^^^^^^^^^^^^ could not find `ProtectionStatus` in `chat`

error[E0433]: failed to resolve: could not find `ProtectionStatus` in `chat`
   --> src/tests/aeap.rs:158:49
    |
158 |             chat::create_group_chat(&bob, chat::ProtectionStatus::Protected, "Group 2")
    |                                                 ^^^^^^^^^^^^^^^^ could not find `ProtectionStatus` in `chat`

error[E0433]: failed to resolve: could not find `ProtectionStatus` in `chat`
   --> src/tests/aeap.rs:163:49
    |
163 |             chat::create_group_chat(&bob, chat::ProtectionStatus::Protected, "Group 3")
    |                                                 ^^^^^^^^^^^^^^^^ could not find `ProtectionStatus` in `chat`

error[E0433]: failed to resolve: could not find `ChatItem` in `chat`
   --> src/tests/aeap.rs:350:31
    |
350 |     let msg_id = if let chat::ChatItem::Message { msg_id } = msgs.last()? {
    |                               ^^^^^^^^ could not find `ChatItem` in `chat`

error[E0433]: failed to resolve: could not find `ProtectionStatus` in `chat`
   --> src/tests/aeap.rs:370:45
    |
370 |         chat::create_group_chat(&bob, chat::ProtectionStatus::Unprotected, "Group 0").await?;
    |                                             ^^^^^^^^^^^^^^^^ could not find `ProtectionStatus` in `chat`

error[E0425]: cannot find function `marknoticed_chat` in module `chat`
   --> src/events/chatlist_events.rs:220:15
    |
220 |         chat::marknoticed_chat(&bob, DC_CHAT_ID_ARCHIVED_LINK).await?;
    |               ^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `set_muted` in module `chat`
   --> src/events/chatlist_events.rs:331:15
    |
331 |         chat::set_muted(&alice, chat, MuteDuration::Forever).await?;
    |               ^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `set_muted` in module `chat`
   --> src/events/chatlist_events.rs:335:15
    |
335 |         chat::set_muted(&alice, chat, MuteDuration::NotMuted).await?;
    |               ^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `set_muted` in module `chat`
   --> src/events/chatlist_events.rs:354:15
    |
354 |         chat::set_muted(&alice, chat, mute_duration).await?;
    |               ^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `set_chat_name` in module `chat`
   --> src/events/chatlist_events.rs:370:15
    |
370 |         chat::set_chat_name(&alice, chat, "New Name").await?;
    |               ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `set_chat_profile_image` in module `chat`
   --> src/events/chatlist_events.rs:387:15
    |
387 |         chat::set_chat_profile_image(&alice, chat, file.to_str().unwrap()).await?;
    |               ^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `set_chat_name` in module `chat`
   --> src/events/chatlist_events.rs:409:15
    |
409 |         chat::set_chat_name(&alice, chat, "New Name").await?;
    |               ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
   --> src/events/chatlist_events.rs:461:29
    |
461 |         let message = chat::send_text_msg(&alice, chat, "Hello World".to_owned()).await?;
    |                             ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `marknoticed_chat` in module `chat`
   --> src/events/chatlist_events.rs:489:15
    |
489 |         chat::marknoticed_chat(&bob, chat_id_for_bob).await?;
    |               ^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
   --> src/events/chatlist_events.rs:528:23
    |
528 |         let _ = chat::send_text_msg(&alice, chat, "Hello".to_owned()).await?;
    |                       ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
   --> src/events/chatlist_events.rs:565:19
    |
565 |             chat::create_group_chat(&alice.ctx, ProtectionStatus::Protected, "the chat").await?;
    |                   ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
   --> src/events/chatlist_events.rs:614:28
    |
614 |         let msg_id = chat::send_text_msg(&alice, chat, "Hello".to_owned()).await?;
    |                            ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `resend_msgs` in module `chat`
   --> src/events/chatlist_events.rs:621:15
    |
621 |         chat::resend_msgs(&alice, &[msg_id]).await?;
    |               ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
   --> src/events/chatlist_events.rs:633:28
    |
633 |         let msg_id = chat::send_text_msg(&alice, chat, "Hello".to_owned()).await?;
    |                            ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
    --> src/blob.rs:1398:33
     |
1398 |         let prepared_id = chat::prepare_msg(&t, chat_id, &mut msg).await?;
     |                                 ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
    --> src/blob.rs:1418:23
     |
1418 |         assert!(chat::prepare_msg(&t, chat_id, &mut msg).await.is_err());
     |                       ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `sync` in module `chat`
   --> src/contact.rs:650:19
    |
650 |             chat::sync(
    |                   ^^^^ not found in `chat`
    |
help: consider importing one of these items
    |
3   + use crate::test_utils::sync;
    |
3   + use libc::sync;
    |
help: if you import `sync`, refer to it directly
    |
650 -             chat::sync(
650 +             sync(
    |

error[E0425]: cannot find function `sync` in module `chat`
    --> src/contact.rs:1605:19
     |
1605 |             chat::sync(
     |                   ^^^^ not found in `chat`
     |
help: consider importing one of these items
     |
3    + use crate::test_utils::sync;
     |
3    + use libc::sync;
     |
help: if you import `sync`, refer to it directly
     |
1605 -             chat::sync(
1605 +             sync(
     |

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/contact.rs:2877:30
     |
2877 |         let contacts = chat::get_chat_contacts(&bob, chat.id).await?;
     |                              ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/contact.rs:2910:30
     |
2910 |         let contacts = chat::get_chat_contacts(&bob, chat.id).await?;
     |                              ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
   --> src/ephemeral.rs:926:15
    |
926 |         chat::prepare_msg(&alice.ctx, chat_alice, &mut msg).await?;
    |               ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/ephemeral.rs:927:15
    |
927 |         chat::send_msg(&alice.ctx, chat_alice, &mut msg).await?;
    |               ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
   --> src/ephemeral.rs:953:15
    |
953 |         chat::prepare_msg(&alice.ctx, chat_alice, &mut msg).await?;
    |               ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/ephemeral.rs:954:15
    |
954 |         chat::send_msg(&alice.ctx, chat_alice, &mut msg).await?;
    |               ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
   --> src/ephemeral.rs:960:15
    |
960 |         chat::prepare_msg(&alice.ctx, chat_alice, &mut msg).await?;
    |               ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/ephemeral.rs:961:15
    |
961 |         chat::send_msg(&alice.ctx, chat_alice, &mut msg).await?;
    |               ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/ephemeral.rs:1132:32
     |
1132 |         let chat_items = chat::get_chat_msgs(t, chat.id).await.unwrap();
     |                                ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg_sync` in module `chat`
    --> src/ephemeral.rs:1361:23
     |
1361 |         assert!(chat::send_msg_sync(&alice, chat.id, &mut msg)
     |                       ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
    --> src/message.rs:2072:28
     |
2072 |         let msg_id = chat::prepare_msg(ctx, chat.id, &mut msg).await.unwrap();
     |                            ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
    --> src/message.rs:2088:23
     |
2088 |         assert!(chat::prepare_msg(ctx, chat.id, &mut msg).await.is_ok());
     |                       ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/message.rs:2179:31
     |
2179 |         let chatitems = chat::get_chat_msgs(&t, device_chat_id).await.unwrap();
     |                               ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
    --> src/message.rs:2213:28
     |
2213 |         let msg_id = chat::prepare_msg(ctx, chat.id, &mut msg).await.unwrap();
     |                            ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
    --> src/message.rs:2258:15
     |
2258 |         chat::send_msg(alice, alice_group, &mut msg).await?;
     |               ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/message.rs:2298:33
     |
2298 |         let contact_id = *chat::get_chat_contacts(&alice, chat.id)
     |                                 ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
    --> src/message.rs:2314:15
     |
2314 |         chat::send_msg(&alice, chat.id, &mut msg).await.unwrap();
     |               ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/message.rs:2319:33
     |
2319 |         let contact_id = *chat::get_chat_contacts(&bob, chat.id)
     |                                 ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/message.rs:2366:26
     |
2366 |         let msgs = chat::get_chat_msgs(&bob, bob_chat_id).await?;
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/message.rs:2377:26
     |
2377 |         let msgs = chat::get_chat_msgs(&bob, bob_chat_id).await?;
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
    --> src/message.rs:2450:28
     |
2450 |         let msg_id = chat::send_msg(&alice, alice_chat.id, &mut alice_msg).await?;
     |                            ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg_sync` in module `chat`
    --> src/message.rs:2628:23
     |
2628 |         assert!(chat::send_msg_sync(&alice, chat.id, &mut msg)
     |                       ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
    --> src/mimefactory.rs:1951:19
     |
1951 |             chat::create_group_chat(&t, chat::ProtectionStatus::Unprotected, "groupname") // TODO encodings, ä
     |                   ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_contact_to_chat` in module `chat`
    --> src/mimefactory.rs:1955:15
     |
1955 |         chat::add_contact_to_chat(&t, group_id, bob).await?;
     |               ^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `forward_msgs` in module `chat`
    --> src/mimefactory.rs:1996:15
     |
1996 |         chat::forward_msgs(&t, &[message_from_bob.id], group_id).await?;
     |               ^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
    --> src/mimefactory.rs:2018:15
     |
2018 |         chat::prepare_msg(&t, chat_id, &mut new_msg).await.unwrap();
     |               ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `prepare_msg` in module `chat`
    --> src/mimefactory.rs:2126:15
     |
2126 |         chat::prepare_msg(context, chat_id, &mut new_msg)
     |               ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
    --> src/mimeparser.rs:3644:15
     |
3644 |         chat::send_text_msg(&bob, bob_chat_id, "hi!".to_string()).await?;
     |               ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
    --> src/securejoin.rs:1200:19
     |
1200 |             chat::create_group_chat(&alice.ctx, ProtectionStatus::Protected, "the chat").await?;
     |                   ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/securejoin.rs:1338:31
     |
1338 |             for item in chat::get_chat_msgs(&bob.ctx, bob_chatid).await.unwrap() {
     |                               ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/stock_str.rs:1626:45
     |
1626 |         let device_chat_msgs_before = chat::get_chat_msgs(&t, device_chat_id).await.unwrap().len();
     |                                             ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/stock_str.rs:1629:19
     |
1629 |             chat::get_chat_msgs(&t, device_chat_id).await.unwrap().len(),
     |                   ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
   --> src/sync.rs:566:26
    |
566 |         let msgs = chat::get_chat_msgs(&alice, chat_id).await?;
    |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/html.rs:532:15
    |
532 |         chat::send_msg(&alice, chat_id, &mut msg).await.unwrap();
    |               ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
   --> src/receive_imf/tests.rs:167:22
    |
167 |     assert_eq!(chat::get_chat_contacts(&t, chat_id).await.unwrap().len(), 1);
    |                      ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
   --> src/receive_imf/tests.rs:168:22
    |
168 |     assert_eq!(chat::get_chat_msgs(&t, chat_id).await.unwrap().len(), 1);
    |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
   --> src/receive_imf/tests.rs:173:22
    |
173 |     assert_eq!(chat::get_chat_msgs(&t, chat_id).await.unwrap().len(), 2);
    |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
   --> src/receive_imf/tests.rs:183:22
    |
183 |     assert_eq!(chat::get_chat_contacts(&t, chat_id).await.unwrap().len(), 3);
    |                      ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1663:9
     |
1663 |         curr_rfc724_mid,
     |         ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
   --> src/receive_imf/tests.rs:202:22
    |
202 |     assert_eq!(chat::get_chat_contacts(&t, chat_id).await.unwrap().len(), 3);
    |                      ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1646:8
     |
1646 |     if msgs.iter().any(
     |        ^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1604:16
     |
1604 |       let msgs = context
     |  ________________^
1605 | |         .sql
1606 | |         .query_map(
1607 | |             &format!(
...    |
1643 | |         )
1644 | |         .await?;
     | |______________^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1604:16
     |
1604 |       let msgs = context
     |  ________________^
1605 | |         .sql
1606 | |         .query_map(
1607 | |             &format!(
...    |
1642 | |             |rows| rows.collect::<Result<Vec<_>, _>>().map_err(Into::into),
1643 | |         )
     | |_________^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1642:20
     |
1642 |             |rows| rows.collect::<Result<Vec<_>, _>>().map_err(Into::into),
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0425]: cannot find function `create_group_chat` in module `chat`
   --> src/receive_imf/tests.rs:220:26
    |
220 |     let group_id = chat::create_group_chat(&t, ProtectionStatus::Unprotected, "foo").await?;
    |                          ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1666:10
     |
1666 |     ) in msgs
     |          ^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1623:33
     |
1623 |                 let id: MsgId = row.get("id")?;
     |                                 ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1624:39
     |
1624 |                 let chat_id: ChatId = row.get("chat_id")?;
     |                                       ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1625:43
     |
1625 |                 let state: MessageState = row.get("state")?;
     |                                           ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1626:37
     |
1626 |                 let param: Params = row.get::<_, String>("param")?.parse().unwrap_or_default();
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1627:42
     |
1627 |                 let from_id: ContactId = row.get("from_id")?;
     |                                          ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1628:42
     |
1628 |                 let rfc724_mid: String = row.get("rfc724_mid")?;
     |                                          ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1629:48
     |
1629 |                 let blocked: Option<Blocked> = row.get("blocked")?;
     |                                                ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1630:55
     |
1630 |                 let ephemeral_timer: EphemeralTimer = row.get("ephemeral_timer")?;
     |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0425]: cannot find function `add_contact_to_chat` in module `chat`
   --> src/receive_imf/tests.rs:221:11
    |
221 |     chat::add_contact_to_chat(&t, group_id, bob_id).await?;
    |           ^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1693:29
     |
1693 | ...                   (id, curr_from_id, curr_rfc724_mid),
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: within `(MsgId, _, str)`, the trait `Sized` is not implemented for `str`, which is required by `(MsgId, _, str): Sized`
     = note: required because it appears within the type `(MsgId, _, str)`
     = note: tuples must have a statically known size to be initialized

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
   --> src/receive_imf/tests.rs:222:22
    |
222 |     assert_eq!(chat::get_chat_msgs(&t, group_id).await.unwrap().len(), 0);
    |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
   --> src/receive_imf/tests.rs:303:22
    |
303 |     assert_eq!(chat::get_chat_msgs(&t, group_id).await?.len(), 1);
    |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `resend_msgs` in module `chat`
   --> src/receive_imf/tests.rs:747:11
    |
747 |     chat::resend_msgs(&t, &[msg_id]).await?;
    |           ^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
   --> src/receive_imf/tests.rs:803:22
    |
803 |     let msgs = chat::get_chat_msgs(&t, msg.chat_id).await?;
    |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
   --> src/receive_imf/tests.rs:883:22
    |
883 |     assert_eq!(chat::get_chat_contacts(&t.ctx, chat_id).await?.len(), 1);
    |                      ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
   --> src/receive_imf/tests.rs:998:15
    |
998 |         chat::get_chat_id_by_grpid(&t, "delta.codespeak.net")
    |               ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:1056:22
     |
1056 |     let msgs = chat::get_chat_msgs(&t.ctx, chat_id).await.unwrap();
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:1086:22
     |
1086 |     let msgs = chat::get_chat_msgs(&t, msg.chat_id).await.unwrap();
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `marknoticed_chat` in module `chat`
    --> src/receive_imf/tests.rs:1100:11
     |
1100 |     chat::marknoticed_chat(&t.ctx, chat_id).await.unwrap();
     |           ^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:1104:22
     |
1104 |     let msgs = chat::get_chat_msgs(&t.ctx, chat_id).await.unwrap();
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:1111:22
     |
1111 |     let msgs = chat::get_chat_msgs(&t.ctx, chat_id).await.unwrap();
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:1133:22
     |
1133 |     let msgs = chat::get_chat_msgs(&t.ctx, chat_id).await.unwrap();
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:1189:22
     |
1189 |     assert_eq!(chat::get_chat_msgs(&t, chat.id).await.unwrap().len(), 1);
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:1210:22
     |
1210 |     assert_eq!(chat::get_chat_msgs(&t, chat.id).await.unwrap().len(), 2);
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:1654:22
     |
1654 |     let msgs = chat::get_chat_msgs(&t, msg.chat_id).await.unwrap();
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
    --> src/receive_imf/tests.rs:1781:11
     |
1781 |     chat::send_text_msg(&alice, chat_alice.id, "hi!".to_string()).await?;
     |           ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
    --> src/receive_imf/tests.rs:1800:11
     |
1800 |     chat::send_text_msg(&alice, chat_alice.id, "hi!".to_string()).await?;
     |           ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
    --> src/receive_imf/tests.rs:1812:11
     |
1812 |     chat::send_text_msg(&bob, chat_bob.id, "ho!".to_string()).await?;
     |           ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:2020:22
     |
2020 |     let msgs = chat::get_chat_msgs(&t.ctx, chat_id).await.unwrap();
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_contact_to_chat` in module `chat`
    --> src/receive_imf/tests.rs:2644:11
     |
2644 |     chat::add_contact_to_chat(&alice, alice_first_msg.chat_id, alice_fiona_contact_id).await?;
     |           ^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_contact_to_chat` in module `chat`
    --> src/receive_imf/tests.rs:2648:11
     |
2648 |     chat::add_contact_to_chat(&alice, alice_second_msg.chat_id, alice_fiona_contact_id).await?;
     |           ^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
    --> src/receive_imf/tests.rs:3128:26
     |
3128 |     let group_id = chat::create_group_chat(&bob, ProtectionStatus::Unprotected, "Group").await?;
     |                          ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_to_chat_contacts_table` in module `chat`
    --> src/receive_imf/tests.rs:3129:11
     |
3129 |     chat::add_to_chat_contacts_table(
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `forward_msgs` in module `chat`
    --> src/receive_imf/tests.rs:3232:11
     |
3232 |     chat::forward_msgs(bob, &[msg.id], bob_chat_id).await?;
     |           ^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
    --> src/receive_imf/tests.rs:3246:26
     |
3246 |     let group_id = chat::create_group_chat(&bob, ProtectionStatus::Unprotected, "Group").await?;
     |                          ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/qr_code_generator.rs:33:14
     |
33   |         Some(path) => {
     |              ^^^^ doesn't have a size known at compile-time
     |
     = help: within `Path`, the trait `Sized` is not implemented for `[u8]`, which is required by `Path: Sized`
note: required because it appears within the type `Path`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:1992:12
     |
1992 | pub struct Path {
     |            ^^^^
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/qr_code_generator.rs:37:9
     |
37   |         None => None,
     |         ^^^^ doesn't have a size known at compile-time
     |
     = help: within `Path`, the trait `Sized` is not implemented for `[u8]`, which is required by `Path: Sized`
note: required because it appears within the type `Path`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:1992:12
     |
1992 | pub struct Path {
     |            ^^^^
note: required by a bound in `std::prelude::v1::None`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
     |
570  | pub enum Option<T> {
     |                 ^ required by this bound in `std::prelude::v1::None`
...
574  |     None,
     |     ---- required by a bound in this unit variant

error[E0425]: cannot find function `add_to_chat_contacts_table` in module `chat`
    --> src/receive_imf/tests.rs:3247:11
     |
3247 |     chat::add_to_chat_contacts_table(
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/receive_imf/tests.rs:3346:22
     |
3346 |     let msgs = chat::get_chat_msgs(&alice, rcvd.chat_id).await?;
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_id_by_grpid` in module `chat`
    --> src/receive_imf/tests.rs:3558:33
     |
3558 |     let (chat_id, _, _) = chat::get_chat_id_by_grpid(&t, "gggroupiddd")
     |                                 ^^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:3561:42
     |
3561 |     let mut actual_chat_contacts = chat::get_chat_contacts(&t, chat_id).await?;
     |                                          ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:3633:15
     |
3633 |         chat::get_chat_contacts(&alice, group_chat.id).await?.len(),
     |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:3655:15
     |
3655 |         chat::get_chat_contacts(&alice, group_chat.id).await?.len(),
     |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `is_contact_in_chat` in module `chat`
    --> src/receive_imf/tests.rs:3661:19
     |
3661 |     assert!(chat::is_contact_in_chat(&alice, group_chat.id, fiona).await?);
     |                   ^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:3960:15
     |
3960 |         chat::get_chat_contacts(&alice, group_chat.id).await?.len(),
     |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:3983:15
     |
3983 |         chat::get_chat_contacts(&alice, group_chat.id).await?.len(),
     |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:4030:15
     |
4030 |         chat::get_chat_contacts(&alice, group_chat.id).await?.len(),
     |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:4275:15
     |
4275 |         chat::get_chat_contacts(&alice, alice_grp.id).await?.len(),
     |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:4289:15
     |
4289 |         chat::get_chat_contacts(&alice, alice_grp.id).await?.len(),
     |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
    --> src/receive_imf/tests.rs:4320:15
     |
4320 |         chat::get_chat_contacts(&alice, alice_grp.id).await?.len(),
     |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_text_msg` in module `chat`
    --> src/receive_imf/tests.rs:4447:11
     |
4447 |     chat::send_text_msg(&bob, bob_chat_id, "hi!".to_string()).await?;
     |           ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/tools.rs:1062:26
     |
1062 |         let msgs = chat::get_chat_msgs(&t, device_chat_id).await.unwrap();
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/tools.rs:1067:26
     |
1067 |         let msgs = chat::get_chat_msgs(&t, device_chat_id).await.unwrap();
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/tools.rs:1076:26
     |
1076 |         let msgs = chat::get_chat_msgs(&t, device_chat_id).await.unwrap();
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/tools.rs:1084:26
     |
1084 |         let msgs = chat::get_chat_msgs(&t, device_chat_id).await.unwrap();
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/tools.rs:1114:26
     |
1114 |         let msgs = chat::get_chat_msgs(&t, device_chat_id).await.unwrap();
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/tools.rs:1134:26
     |
1134 |         let msgs = chat::get_chat_msgs(&t, device_chat_id).await.unwrap();
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/tools.rs:1149:26
     |
1149 |         let msgs = chat::get_chat_msgs(&t, device_chat_id).await.unwrap();
     |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
   --> src/test_utils.rs:497:31
    |
497 |         let chat_msgs = chat::get_chat_msgs(self, received.chat_id).await.unwrap();
    |                               ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
   --> src/test_utils.rs:532:26
    |
532 |         let msgs = chat::get_chat_msgs(&self.ctx, chat_id).await.unwrap();
    |                          ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `send_msg` in module `chat`
   --> src/test_utils.rs:647:28
    |
647 |         let msg_id = chat::send_msg(self, chat_id, msg).await.unwrap();
    |                            ^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs_ex` in module `chat`
   --> src/test_utils.rs:685:29
    |
685 |         let msglist = chat::get_chat_msgs_ex(
    |                             ^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
   --> src/test_utils.rs:706:29
    |
706 |         let members = chat::get_chat_contacts(self, sel_chat.id).await.unwrap();
    |                             ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_msgs` in module `chat`
    --> src/test_utils.rs:1058:22
     |
1058 |     let msgs = chat::get_chat_msgs(&t.ctx, chat_id).await.unwrap();
     |                      ^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
   --> src/tests/aeap.rs:149:15
    |
149 |         chat::create_group_chat(&bob, chat::ProtectionStatus::Unprotected, "Group 0")
    |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0599]: no method named `sync_alter_chat` found for reference `&context::Context` in the current scope
   --> src/sync.rs:277:54
    |
277 |                     AlterChat { id, action } => self.sync_alter_chat(id, action).await,
    |                                                      ^^^^^^^^^^^^^^^ method not found in `&Context`

error[E0425]: cannot find function `create_group_chat` in module `chat`
   --> src/tests/aeap.rs:152:15
    |
152 |         chat::create_group_chat(&bob, chat::ProtectionStatus::Unprotected, "Group 1")
    |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
   --> src/tests/aeap.rs:158:19
    |
158 |             chat::create_group_chat(&bob, chat::ProtectionStatus::Protected, "Group 2")
    |                   ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
   --> src/tests/aeap.rs:163:19
    |
163 |             chat::create_group_chat(&bob, chat::ProtectionStatus::Protected, "Group 3")
    |                   ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_contact_to_chat` in module `chat`
   --> src/tests/aeap.rs:173:15
    |
173 |         chat::add_contact_to_chat(&bob, *group, old_contact)
    |               ^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_contact_to_chat` in module `chat`
   --> src/tests/aeap.rs:184:15
    |
184 |         chat::add_contact_to_chat(&bob, groups[2], already_new_contact)
    |               ^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
   --> src/tests/aeap.rs:273:29
    |
273 |         let members = chat::get_chat_contacts(bob, *group).await.unwrap();
    |                             ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
   --> src/tests/aeap.rs:311:29
    |
311 |         let members = chat::get_chat_contacts(bob, *group).await.unwrap();
    |                             ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/summary.rs:69:57
   |
69 |         if let Some((reaction_msg, reaction_contact_id, reaction)) = chat
   |                                                         ^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
   = note: all local variables must have a statically known size
   = help: unsized locals are gated as an unstable feature

error[E0425]: cannot find function `get_chat_msgs_ex` in module `chat`
   --> src/tests/aeap.rs:340:22
    |
340 |     let msgs = chat::get_chat_msgs_ex(
    |                      ^^^^^^^^^^^^^^^^ not found in `chat`

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/summary.rs:76:17
   |
76 |             let summary = reaction_msg.get_summary_text_without_prefix(context).await;
   |                 ^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
   = note: all local variables must have a statically known size
   = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/summary.rs:76:27
   |
76 |             let summary = reaction_msg.get_summary_text_without_prefix(context).await;
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
   = note: all local variables must have a statically known size
   = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/summary.rs:76:81
   |
76 |             let summary = reaction_msg.get_summary_text_without_prefix(context).await;
   |                                                                                 ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
  --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
   |
12 | pub enum Poll<T> {
   |               ^ required by this bound in `Poll::Ready`
...
16 |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
   |     ----- required by a bound in this variant

error[E0422]: cannot find struct, variant or union type `MessageListOptions` in module `chat`
   --> src/tests/aeap.rs:343:15
    |
343 |         chat::MessageListOptions {
    |               ^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `create_group_chat` in module `chat`
   --> src/tests/aeap.rs:370:15
    |
370 |         chat::create_group_chat(&bob, chat::ProtectionStatus::Unprotected, "Group 0").await?;
    |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `add_contact_to_chat` in module `chat`
   --> src/tests/aeap.rs:373:11
    |
373 |     chat::add_contact_to_chat(&bob, group, bob_alice_contact).await?;
    |           ^^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `is_contact_in_chat` in module `chat`
   --> src/tests/aeap.rs:393:19
    |
393 |     assert!(chat::is_contact_in_chat(&bob, group, bob_alice_contact).await?);
    |                   ^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `is_contact_in_chat` in module `chat`
   --> src/tests/aeap.rs:395:20
    |
395 |     assert!(!chat::is_contact_in_chat(&bob, group, bob_fiona_contact).await?);
    |                    ^^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0425]: cannot find function `get_chat_contacts` in module `chat`
   --> src/tests/verified_chats.rs:808:15
    |
808 |         chat::get_chat_contacts(alice1, group1.id).await?,
    |               ^^^^^^^^^^^^^^^^^ not found in `chat`

error[E0609]: no field `typ` on type `&_`
   --> src/receive_imf.rs:974:45
    |
974 |                         .filter(|chat| chat.typ == Chattype::Single),
    |                                             ^^^ unknown field

error[E0282]: type annotations needed
  --> src/events/chatlist_events.rs:21:66
   |
21 |     context.emit_event(EventType::ChatlistItemChanged { chat_id: None });
   |                                                                  ^^^^ cannot infer type of the type parameter `T` declared on the enum `Option`
   |
help: consider specifying the generic argument
   |
21 |     context.emit_event(EventType::ChatlistItemChanged { chat_id: None::<T> });
   |                                                                      +++++

warning: unused import: `crate::log::LogExt`
  --> src/configure.rs:29:5
   |
29 | use crate::log::LogExt;
   |     ^^^^^^^^^^^^^^^^^^
   |
note: the lint level is defined here
  --> src/lib.rs:6:5
   |
6  |     unused,
   |     ^^^^^^
   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `crate::log::LogExt`
  --> src/receive_imf.rs:28:5
   |
28 | use crate::log::LogExt;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `Context`
 --> src/securejoin/bob.rs:6:14
  |
6 | use anyhow::{Context as _, Result};
  |              ^^^^^^^

Some errors have detailed explanations: E0277, E0282, E0412, E0425, E0432, E0433, E0599, E0609.
For more information about an error, try `rustc --explain E0277`.
warning: `deltachat` (lib) generated 3 warnings
error: could not compile `deltachat` (lib) due to 126 previous errors; 3 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1693:29
     |
1693 | ...                   (id, curr_from_id, curr_rfc724_mid),
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: within `(message::MsgId, _, str)`, the trait `Sized` is not implemented for `str`, which is required by `(message::MsgId, _, str): Sized`
     = note: required because it appears within the type `(message::MsgId, _, str)`
     = note: tuples must have a statically known size to be initialized

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/qr_code_generator.rs:33:14
     |
33   |         Some(path) => {
     |              ^^^^ doesn't have a size known at compile-time
     |
     = help: within `std::path::Path`, the trait `Sized` is not implemented for `[u8]`, which is required by `std::path::Path: Sized`
note: required because it appears within the type `std::path::Path`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:1992:12
     |
1992 | pub struct Path {
     |            ^^^^
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/qr_code_generator.rs:37:9
     |
37   |         None => None,
     |         ^^^^ doesn't have a size known at compile-time
     |
     = help: within `std::path::Path`, the trait `Sized` is not implemented for `[u8]`, which is required by `std::path::Path: Sized`
note: required because it appears within the type `std::path::Path`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:1992:12
     |
1992 | pub struct Path {
     |            ^^^^
note: required by a bound in `std::prelude::v1::None`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
     |
570  | pub enum Option<T> {
     |                 ^ required by this bound in `std::prelude::v1::None`
...
574  |     None,
     |     ---- required by a bound in this unit variant

error[E0282]: type annotations needed
   --> src/events/chatlist_events.rs:193:30
    |
193 |                 } => chat_id.is_archived_link(),
    |                              ^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T` declared on the enum `Option`

Some errors have detailed explanations: E0277, E0282, E0412, E0422, E0425, E0432, E0433, E0599, E0609.
warning: `deltachat` (lib test) generated 3 warnings (3 duplicates)
error: could not compile `deltachat` (lib test) due to 307 previous errors; 3 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101
</error message>
<c function>
* If the group is already _promoted_ (any message was sent to the group),
 * all group members are informed by a special status message that is sent automatically by this function.
 *
 * Sends out #DC_EVENT_CHAT_MODIFIED and #DC_EVENT_MSGS_CHANGED if a status message was sent.
 *
 * @memberof dc_context_t
 * @param context The context as created by dc_context_new().
 * @param chat_id The chat ID to remove the contact from.  Must be a group chat.
 * @param contact_id The contact ID to remove from the chat.
 * @return 1=member removed from group, 0=error
 */
int dc_remove_contact_from_chat(dc_context_t* context, uint32_t chat_id, uint32_t contact_id /*may be DC_CONTACT_ID_SELF*/)
{
	int           success = 0;
	dc_contact_t* contact = dc_get_contact(context, contact_id);
	dc_chat_t*    chat = dc_chat_new(context);
	dc_msg_t*     msg = dc_msg_new_untyped(context);
	char*         q3 = NULL;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || chat_id<=DC_CHAT_ID_LAST_SPECIAL || (contact_id<=DC_CONTACT_ID_LAST_SPECIAL && contact_id!=DC_CONTACT_ID_SELF)) {
		goto cleanup; /* we do not check if "contact_id" exists but just delete all records with the id from chats_contacts */
	}                 /* this allows to delete pending references to deleted contacts.  Of course, this should _not_ happen. */

	if (0==real_group_exists(context, chat_id)
	 || 0==dc_chat_load_from_db(chat, chat_id)) {
		goto cleanup;
	}

	if (!IS_SELF_IN_GROUP) {
		dc_log_event(context, DC_EVENT_ERROR_SELF_NOT_IN_GROUP, 0,
		             "Cannot remove contact from chat; self not in group.");
		goto cleanup; /* we shoud respect this - whatever we send to the group, it gets discarded anyway! */
	}

	/* send a status mail to all group members - we need to do this before we update the database -
	otherwise the !IS_SELF_IN_GROUP__-check in dc_chat_send_msg() will fail. */
	if (contact)
	{
		if (DO_SEND_STATUS_MAILS)
		{
			msg->type = DC_MSG_TEXT;
			if (contact->id==DC_CONTACT_ID_SELF) {
				dc_set_group_explicitly_left(context, chat->grpid);
				msg->text = dc_stock_system_msg(context, DC_STR_MSGGROUPLEFT, NULL, NULL, DC_CONTACT_ID_SELF);
			}
			else {
				msg->text = dc_stock_system_msg(context, DC_STR_MSGDELMEMBER, contact->addr, NULL, DC_CONTACT_ID_SELF);
			}
			dc_param_set_int(msg->param, DC_PARAM_CMD,       DC_CMD_MEMBER_REMOVED_FROM_GROUP);
			dc_param_set    (msg->param, DC_PARAM_CMD_ARG, contact->addr);
			msg->id = dc_send_msg(context, chat_id, msg);
			context->cb(context, DC_EVENT_MSGS_CHANGED, chat_id, msg->id);
		}
	}

	q3 = sqlite3_mprintf("DELETE FROM chats_contacts WHERE chat_id=%i AND contact_id=%i;", chat_id, contact_id);
	if (!dc_sqlite3_execute(context->sql, q3)) {
		goto cleanup;
	}

	context->cb(context, DC_EVENT_CHAT_MODIFIED, chat_id, 0);

	success = 1;

cleanup:
	sqlite3_free(q3);
	dc_chat_unref(chat);
	dc_contact_unref(contact);
	dc_msg_unref(msg);
	return success;
}
</c function>
<rust function signature>
pub async fn remove_contact_from_chat(
    context: &Context,
    chat_id: ChatId,
    contact_id: ContactId,
) -> Result<()> 
</rust function signature>
<rust function dependencies, and data type declarations>
async fn set_group_explicitly_left(context: &Context, grpid: &str) -> Result<()> {
    if !is_group_explicitly_left(context, grpid).await? {
        context
            .sql
            .execute("INSERT INTO leftgrps (grpid) VALUES(?);", (grpid,))
            .await?;
    }

    Ok(())
}

pub async fn send_msg(context: &Context, chat_id: ChatId, msg: &mut Message) -> Result<MsgId> {
    if chat_id.is_unset() {
        let forwards = msg.param.get(Param::PrepForwards);
        if let Some(forwards) = forwards {
            for forward in forwards.split(' ') {
                if let Ok(msg_id) = forward.parse::<u32>().map(MsgId::new) {
                    if let Ok(mut msg) = Message::load_from_db(context, msg_id).await {
                        send_msg_inner(context, chat_id, &mut msg).await?;
                    };
                }
            }
            msg.param.remove(Param::PrepForwards);
            msg.update_param(context).await?;
        }
        return send_msg_inner(context, chat_id, msg).await;
    }

    if msg.state != MessageState::Undefined && msg.state != MessageState::OutPreparing {
        msg.param.remove(Param::GuaranteeE2ee);
        msg.param.remove(Param::ForcePlaintext);
        msg.update_param(context).await?;
    }
    send_msg_inner(context, chat_id, msg).await
}

pub(crate) async fn sync_contacts(&self, context: &Context) -> Result<()> {
        let addrs = context
            .sql
            .query_map(
                "SELECT c.addr \
                FROM contacts c INNER JOIN chats_contacts cc \
                ON c.id=cc.contact_id \
                WHERE cc.chat_id=?",
                (self.id,),
                |row| row.get::<_, String>(0),
                |addrs| addrs.collect::<Result<Vec<_>, _>>().map_err(Into::into),
            )
            .await?;
        self.sync(context, SyncAction::SetContacts(addrs)).await
    }

pub fn set_cmd(&mut self, value: SystemMessage) {
        self.set_int(Param::Cmd, value as i32);
    }

pub fn is_promoted(&self) -> bool {
        !self.is_unpromoted()
    }

pub(crate) async fn is_self_in_chat(&self, context: &Context) -> Result<bool> {
        match self.typ {
            Chattype::Single | Chattype::Broadcast | Chattype::Mailinglist => Ok(true),
            Chattype::Group => is_contact_in_chat(context, self.id, ContactId::SELF).await,
        }
    }

fn log_err(self, context: &Context) -> Result<T, E> {
        if let Err(e) = &self {
            let location = std::panic::Location::caller();

            // We are using Anyhow's .context() and to show the inner error, too, we need the {:#}:
            let full = format!(
                "{file}:{line}: {e:#}",
                file = location.file(),
                line = location.line(),
                e = e
            );
            // We can't use the warn!() macro here as the file!() and line!() macros
            // don't work with #[track_caller]
            context.emit_event(crate::EventType::Warning(full));
        };
        self
    }

pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
        self.inner.insert(key, value.to_string());
        self
    }

pub fn emit_event(&self, event: EventType) {
        {
            let lock = self.debug_logging.read().expect("RwLock is poisoned");
            if let Some(debug_logging) = &*lock {
                debug_logging.log_event(event.clone());
            }
        }
        self.events.emit(Event {
            id: self.id,
            typ: event,
        });
    }

pub(crate) async fn remove_from_chat_contacts_table(
    context: &Context,
    chat_id: ChatId,
    contact_id: ContactId,
) -> Result<()> {
    context
        .sql
        .execute(
            "DELETE FROM chats_contacts WHERE chat_id=? AND contact_id=?",
            (chat_id, contact_id),
        )
        .await?;
    Ok(())
}

pub async fn load_from_db(context: &Context, chat_id: ChatId) -> Result<Self> {
        let mut chat = context
            .sql
            .query_row(
                "SELECT c.type, c.name, c.grpid, c.param, c.archived,
                    c.blocked, c.locations_send_until, c.muted_until, c.protected
             FROM chats c
             WHERE c.id=?;",
                (chat_id,),
                |row| {
                    let c = Chat {
                        id: chat_id,
                        typ: row.get(0)?,
                        name: row.get::<_, String>(1)?,
                        grpid: row.get::<_, String>(2)?,
                        param: row.get::<_, String>(3)?.parse().unwrap_or_default(),
                        visibility: row.get(4)?,
                        blocked: row.get::<_, Option<_>>(5)?.unwrap_or_default(),
                        is_sending_locations: row.get(6)?,
                        mute_duration: row.get(7)?,
                        protected: row.get(8)?,
                    };
                    Ok(c)
                },
            )
            .await
            .context(format!("Failed loading chat {chat_id} from database"))?;

        if chat.id.is_archived_link() {
            chat.name = stock_str::archived_chats(context).await;
        } else {
            if chat.typ == Chattype::Single && chat.name.is_empty() {
                // chat.name is set to contact.display_name on changes,
                // however, if things went wrong somehow, we do this here explicitly.
                let mut chat_name = "Err [Name not found]".to_owned();
                match get_chat_contacts(context, chat.id).await {
                    Ok(contacts) => {
                        if let Some(contact_id) = contacts.first() {
                            if let Ok(contact) = Contact::get_by_id(context, *contact_id).await {
                                contact.get_display_name().clone_into(&mut chat_name);
                            }
                        }
                    }
                    Err(err) => {
                        error!(
                            context,
                            "Failed to load contacts for {}: {:#}.", chat.id, err
                        );
                    }
                }
                chat.name = chat_name;
            }
            if chat.param.exists(Param::Selftalk) {
                chat.name = stock_str::saved_messages(context).await;
            } else if chat.param.exists(Param::Devicetalk) {
                chat.name = stock_str::device_messages(context).await;
            }
        }

        Ok(chat)
    }

pub fn get_addr(&self) -> &str {
        &self.addr
    }

pub async fn get_by_id_optional(
        context: &Context,
        contact_id: ContactId,
    ) -> Result<Option<Self>> {
        if let Some(mut contact) = context
            .sql
            .query_row_optional(
                "SELECT c.name, c.addr, c.origin, c.blocked, c.last_seen,
                c.authname, c.param, c.status, c.is_bot
               FROM contacts c
              WHERE c.id=?;",
                (contact_id,),
                |row| {
                    let name: String = row.get(0)?;
                    let addr: String = row.get(1)?;
                    let origin: Origin = row.get(2)?;
                    let blocked: Option<bool> = row.get(3)?;
                    let last_seen: i64 = row.get(4)?;
                    let authname: String = row.get(5)?;
                    let param: String = row.get(6)?;
                    let status: Option<String> = row.get(7)?;
                    let is_bot: bool = row.get(8)?;
                    let contact = Self {
                        id: contact_id,
                        name,
                        authname,
                        addr,
                        blocked: blocked.unwrap_or_default(),
                        last_seen,
                        origin,
                        param: param.parse().unwrap_or_default(),
                        status: status.unwrap_or_default(),
                        is_bot,
                    };
                    Ok(contact)
                },
            )
            .await?
        {
            if contact_id == ContactId::SELF {
                contact.name = stock_str::self_msg(context).await;
                contact.authname = context
                    .get_config(Config::Displayname)
                    .await?
                    .unwrap_or_default();
                contact.addr = context
                    .get_config(Config::ConfiguredAddr)
                    .await?
                    .unwrap_or_default();
                contact.status = context
                    .get_config(Config::Selfstatus)
                    .await?
                    .unwrap_or_default();
            } else if contact_id == ContactId::DEVICE {
                contact.name = stock_str::device_messages(context).await;
                contact.addr = ContactId::DEVICE_ADDR.to_string();
                contact.status = stock_str::device_messages_hint(context).await;
            }
            Ok(Some(contact))
        } else {
            Ok(None)
        }
    }

pub(crate) async fn msg_group_left_local(context: &Context, by_contact: ContactId) -> String {
    if by_contact == ContactId::SELF {
        translated(context, StockMessage::MsgYouLeftGroup).await
    } else {
        translated(context, StockMessage::MsgGroupLeftBy)
            .await
            .replace1(&by_contact.get_stock_name_n_addr(context).await)
    }
}

pub(crate) async fn msg_del_member_local(
    context: &Context,
    removed_member_addr: &str,
    by_contact: ContactId,
) -> String {
    let addr = removed_member_addr;
    let whom = &match Contact::lookup_id_by_addr(context, addr, Origin::Unknown).await {
        Ok(Some(contact_id)) => Contact::get_by_id(context, contact_id)
            .await
            .map(|contact| contact.get_name_n_addr())
            .unwrap_or_else(|_| addr.to_string()),
        _ => addr.to_string(),
    };
    if by_contact == ContactId::SELF {
        translated(context, StockMessage::MsgYouDelMember)
            .await
            .replace1(whom)
    } else {
        translated(context, StockMessage::MsgDelMemberBy)
            .await
            .replace1(whom)
            .replace2(&by_contact.get_stock_name_n_addr(context).await)
    }
}

pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

pub enum Param {
    /// For messages
    File = b'f',

    /// For messages: original filename (as shown in chat)
    Filename = b'v',

    /// For messages: This name should be shown instead of contact.get_display_name()
    /// (used if this is a mailinglist
    /// or explicitly set using set_override_sender_name(), eg. by bots)
    OverrideSenderDisplayname = b'O',

    /// For Messages
    Width = b'w',

    /// For Messages
    Height = b'h',

    /// For Messages
    Duration = b'd',

    /// For Messages
    MimeType = b'm',

    /// For Messages: HTML to be written to the database and to be send.
    /// `SendHtml` param is not used for received messages.
    /// Use `MsgId::get_html()` to get HTML of received messages.
    SendHtml = b'T',

    /// For Messages: message is encrypted, outgoing: guarantee E2EE or the message is not send
    GuaranteeE2ee = b'c',

    /// For Messages: quoted message is encrypted.
    ///
    /// If this message is sent unencrypted, quote text should be replaced.
    ProtectQuote = b'0',

    /// For Messages: decrypted with validation errors or without mutual set, if neither
    /// 'c' nor 'e' are preset, the messages is only transport encrypted.
    ErroneousE2ee = b'e',

    /// For Messages: force unencrypted message, a value from `ForcePlaintext` enum.
    ForcePlaintext = b'u',

    /// For Messages: do not include Autocrypt header.
    SkipAutocrypt = b'o',

    /// For Messages
    WantsMdn = b'r',

    /// For Messages: the message is a reaction.
    Reaction = b'x',

    /// For Chats: the timestamp of the last reaction.
    LastReactionTimestamp = b'y',

    /// For Chats: Message ID of the last reaction.
    LastReactionMsgId = b'Y',

    /// For Chats: Contact ID of the last reaction.
    LastReactionContactId = b'1',

    /// For Messages: a message with "Auto-Submitted: auto-generated" header ("bot").
    Bot = b'b',

    /// For Messages: unset or 0=not forwarded,
    /// 1=forwarded from unknown msg_id, >9 forwarded from msg_id
    Forwarded = b'a',

    /// For Messages: quoted text.
    Quote = b'q',

    /// For Messages
    Cmd = b'S',

    /// For Messages
    Arg = b'E',

    /// For Messages
    Arg2 = b'F',

    /// `Secure-Join-Fingerprint` header for `{vc,vg}-request-with-auth` messages.
    Arg3 = b'G',

    /// Deprecated `Secure-Join-Group` header for messages.
    Arg4 = b'H',

    /// For Messages
    AttachGroupImage = b'A',

    /// For Messages
    WebrtcRoom = b'V',

    /// For Messages: space-separated list of messaged IDs of forwarded copies.
    ///
    /// This is used when a [crate::message::Message] is in the
    /// [crate::message::MessageState::OutPending] state but is already forwarded.
    /// In this case the forwarded messages are written to the
    /// database and their message IDs are added to this parameter of
    /// the original message, which is also saved in the database.
    /// When the original message is then finally sent this parameter
    /// is used to also send all the forwarded messages.
    PrepForwards = b'P',

    /// For Messages
    SetLatitude = b'l',

    /// For Messages
    SetLongitude = b'n',

    /// For Groups
    ///
    /// An unpromoted group has not had any messages sent to it and thus only exists on the
    /// creator's device.  Any changes made to an unpromoted group do not need to send
    /// system messages to the group members to update them of the changes.  Once a message
    /// has been sent to a group it is promoted and group changes require sending system
    /// messages to all members.
    Unpromoted = b'U',

    /// For Groups and Contacts
    ProfileImage = b'i',

    /// For Chats
    /// Signals whether the chat is the `saved messages` chat
    Selftalk = b'K',

    /// For Chats: On sending a new message we set the subject to `Re: <last subject>`.
    /// Usually we just use the subject of the parent message, but if the parent message
    /// is deleted, we use the LastSubject of the chat.
    LastSubject = b't',

    /// For Chats
    Devicetalk = b'D',

    /// For Chats: If this is a mailing list chat, contains the List-Post address.
    /// None if there simply is no `List-Post` header in the mailing list.
    /// Some("") if the mailing list is using multiple different List-Post headers.
    ///
    /// The List-Post address is the email address where the user can write to in order to
    /// post something to the mailing list.
    ListPost = b'p',

    /// For Contacts: If this is the List-Post address of a mailing list, contains
    /// the List-Id of the mailing list (which is also used as the group id of the chat).
    ListId = b's',

    /// For Contacts: timestamp of status (aka signature or footer) update.
    StatusTimestamp = b'j',

    /// For Contacts and Chats: timestamp of avatar update.
    AvatarTimestamp = b'J',

    /// For Chats: timestamp of status/signature/footer update.
    EphemeralSettingsTimestamp = b'B',

    /// For Chats: timestamp of subject update.
    SubjectTimestamp = b'C',

    /// For Chats: timestamp of group name update.
    GroupNameTimestamp = b'g',

    /// For Chats: timestamp of member list update.
    MemberListTimestamp = b'k',

    /// For Webxdc Message Instances: Current document name
    WebxdcDocument = b'R',

    /// For Webxdc Message Instances: timestamp of document name update.
    WebxdcDocumentTimestamp = b'W',

    /// For Webxdc Message Instances: Current summary
    WebxdcSummary = b'N',

    /// For Webxdc Message Instances: timestamp of summary update.
    WebxdcSummaryTimestamp = b'Q',

    /// For Webxdc Message Instances: Webxdc is an integration, see init_webxdc_integration()
    WebxdcIntegration = b'3',

    /// For Webxdc Message Instances: Chat to integrate the Webxdc for.
    WebxdcIntegrateFor = b'2',

    /// For messages: Whether [crate::message::Viewtype::Sticker] should be forced.
    ForceSticker = b'X',
    // 'L' was defined as ProtectionSettingsTimestamp for Chats, however, never used in production.
}


pub struct ContactId(u32);

pub struct ChatId(u32);

impl ContactId {
    /// The owner of the account.
    ///
    /// The email-address is set by `set_config` using "addr".
    pub const SELF: ContactId = ContactId::new(1);
}

pub enum Chattype {
    /// 1:1 chat.
    Single = 100,

    /// Group chat.
    Group = 120,

    /// Mailing list.
    Mailinglist = 140,

    /// Broadcast list.
    Broadcast = 160,
}

pub enum SystemMessage {
    /// Unknown type of system message.
    #[default]
    Unknown = 0,

    /// Group name changed.
    GroupNameChanged = 2,

    /// Group avatar changed.
    GroupImageChanged = 3,

    /// Member was added to the group.
    MemberAddedToGroup = 4,

    /// Member was removed from the group.
    MemberRemovedFromGroup = 5,

    /// Autocrypt Setup Message.
    AutocryptSetupMessage = 6,

    /// Secure-join message.
    SecurejoinMessage = 7,

    /// Location streaming is enabled.
    LocationStreamingEnabled = 8,

    /// Location-only message.
    LocationOnly = 9,

    /// Chat ephemeral message timer is changed.
    EphemeralTimerChanged = 10,

    /// "Messages are guaranteed to be end-to-end encrypted from now on."
    ChatProtectionEnabled = 11,

    /// "%1$s sent a message from another device."
    ChatProtectionDisabled = 12,

    /// Message can't be sent because of `Invalid unencrypted mail to <>`
    /// which is sent by chatmail servers.
    InvalidUnencryptedMail = 13,

    /// 1:1 chats info message telling that SecureJoin has started and the user should wait for it
    /// to complete.
    SecurejoinWait = 14,

    /// 1:1 chats info message telling that SecureJoin is still running, but the user may already
    /// send messages.
    SecurejoinWaitTimeout = 15,

    /// Self-sent-message that contains only json used for multi-device-sync;
    /// if possible, we attach that to other messages as for locations.
    MultiDeviceSync = 20,

    /// Sync message that contains a json payload
    /// sent to the other webxdc instances
    /// These messages are not shown in the chat.
    WebxdcStatusUpdate = 30,

    /// Webxdc info added with `info` set in `send_webxdc_status_update()`.
    WebxdcInfoMessage = 32,

    /// This message contains a users iroh node address.
    IrohNodeAddr = 40,
}


pub enum EventType {
    /// The library-user may write an informational string to the log.
    ///
    /// This event should *not* be reported to the end-user using a popup or something like
    /// that.
    Info(String),

    /// Emitted when SMTP connection is established and login was successful.
    SmtpConnected(String),

    /// Emitted when IMAP connection is established and login was successful.
    ImapConnected(String),

    /// Emitted when a message was successfully sent to the SMTP server.
    SmtpMessageSent(String),

    /// Emitted when an IMAP message has been marked as deleted
    ImapMessageDeleted(String),

    /// Emitted when an IMAP message has been moved
    ImapMessageMoved(String),

    /// Emitted before going into IDLE on the Inbox folder.
    ImapInboxIdle,

    /// Emitted when an new file in the $BLOBDIR was created
    NewBlobFile(String),

    /// Emitted when an file in the $BLOBDIR was deleted
    DeletedBlobFile(String),

    /// The library-user should write a warning string to the log.
    ///
    /// This event should *not* be reported to the end-user using a popup or something like
    /// that.
    Warning(String),

    /// The library-user should report an error to the end-user.
    ///
    /// As most things are asynchronous, things may go wrong at any time and the user
    /// should not be disturbed by a dialog or so.  Instead, use a bubble or so.
    ///
    /// However, for ongoing processes (eg. configure())
    /// or for functions that are expected to fail (eg. dc_continue_key_transfer())
    /// it might be better to delay showing these events until the function has really
    /// failed (returned false). It should be sufficient to report only the *last* error
    /// in a messasge box then.
    Error(String),

    /// An action cannot be performed because the user is not in the group.
    /// Reported eg. after a call to
    /// dc_set_chat_name(), dc_set_chat_profile_image(),
    /// dc_add_contact_to_chat(), dc_remove_contact_from_chat(),
    /// dc_send_text_msg() or another sending function.
    ErrorSelfNotInGroup(String),

    /// Messages or chats changed.  One or more messages or chats changed for various
    /// reasons in the database:
    /// - Messages sent, received or removed
    /// - Chats created, deleted or archived
    /// - A draft has been set
    ///
    MsgsChanged {
        /// Set if only a single chat is affected by the changes, otherwise 0.
        chat_id: ChatId,

        /// Set if only a single message is affected by the changes, otherwise 0.
        msg_id: MsgId,
    },

    /// Reactions for the message changed.
    ReactionsChanged {
        /// ID of the chat which the message belongs to.
        chat_id: ChatId,

        /// ID of the message for which reactions were changed.
        msg_id: MsgId,

        /// ID of the contact whose reaction set is changed.
        contact_id: ContactId,
    },

    /// There is a fresh message. Typically, the user will show an notification
    /// when receiving this message.
    ///
    /// There is no extra #DC_EVENT_MSGS_CHANGED event send together with this event.
    IncomingMsg {
        /// ID of the chat where the message is assigned.
        chat_id: ChatId,

        /// ID of the message.
        msg_id: MsgId,
    },

    /// Downloading a bunch of messages just finished.
    IncomingMsgBunch,

    /// Messages were seen or noticed.
    /// chat id is always set.
    MsgsNoticed(ChatId),

    /// A single message is sent successfully. State changed from  DC_STATE_OUT_PENDING to
    /// DC_STATE_OUT_DELIVERED, see dc_msg_get_state().
    MsgDelivered {
        /// ID of the chat which the message belongs to.
        chat_id: ChatId,

        /// ID of the message that was successfully sent.
        msg_id: MsgId,
    },

    /// A single message could not be sent. State changed from DC_STATE_OUT_PENDING or DC_STATE_OUT_DELIVERED to
    /// DC_STATE_OUT_FAILED, see dc_msg_get_state().
    MsgFailed {
        /// ID of the chat which the message belongs to.
        chat_id: ChatId,

        /// ID of the message that could not be sent.
        msg_id: MsgId,
    },

    /// A single message is read by the receiver. State changed from DC_STATE_OUT_DELIVERED to
    /// DC_STATE_OUT_MDN_RCVD, see dc_msg_get_state().
    MsgRead {
        /// ID of the chat which the message belongs to.
        chat_id: ChatId,

        /// ID of the message that was read.
        msg_id: MsgId,
    },

    /// A single message was deleted.
    ///
    /// This event means that the message will no longer appear in the messagelist.
    /// UI should remove the message from the messagelist
    /// in response to this event if the message is currently displayed.
    ///
    /// The message may have been explicitly deleted by the user or expired.
    /// Internally the message may have been removed from the database,
    /// moved to the trash chat or hidden.
    ///
    /// This event does not indicate the message
    /// deletion from the server.
    MsgDeleted {
        /// ID of the chat where the message was prior to deletion.
        /// Never 0 or trash chat.
        chat_id: ChatId,

        /// ID of the deleted message. Never 0.
        msg_id: MsgId,
    },

    /// Chat changed.  The name or the image of a chat group was changed or members were added or removed.
    /// Or the verify state of a chat has changed.
    /// See dc_set_chat_name(), dc_set_chat_profile_image(), dc_add_contact_to_chat()
    /// and dc_remove_contact_from_chat().
    ///
    /// This event does not include ephemeral timer modification, which
    /// is a separate event.
    ChatModified(ChatId),

    /// Chat ephemeral timer changed.
    ChatEphemeralTimerModified {
        /// Chat ID.
        chat_id: ChatId,

        /// New ephemeral timer value.
        timer: EphemeralTimer,
    },

    /// Contact(s) created, renamed, blocked, deleted or changed their "recently seen" status.
    ///
    /// @param data1 (int) If set, this is the contact_id of an added contact that should be selected.
    ContactsChanged(Option<ContactId>),

    /// Location of one or more contact has changed.
    ///
    /// @param data1 (u32) contact_id of the contact for which the location has changed.
    ///     If the locations of several contacts have been changed,
    ///     eg. after calling dc_delete_all_locations(), this parameter is set to `None`.
    LocationChanged(Option<ContactId>),

    /// Inform about the configuration progress started by configure().
    ConfigureProgress {
        /// Progress.
        ///
        /// 0=error, 1-999=progress in permille, 1000=success and done
        progress: usize,

        /// Progress comment or error, something to display to the user.
        comment: Option<String>,
    },

    /// Inform about the import/export progress started by imex().
    ///
    /// @param data1 (usize) 0=error, 1-999=progress in permille, 1000=success and done
    /// @param data2 0
    ImexProgress(usize),

    /// A file has been exported. A file has been written by imex().
    /// This event may be sent multiple times by a single call to imex().
    ///
    /// A typical purpose for a handler of this event may be to make the file public to some system
    /// services.
    ///
    /// @param data2 0
    ImexFileWritten(PathBuf),

    /// Progress information of a secure-join handshake from the view of the inviter
    /// (Alice, the person who shows the QR code).
    ///
    /// These events are typically sent after a joiner has scanned the QR code
    /// generated by dc_get_securejoin_qr().
    SecurejoinInviterProgress {
        /// ID of the contact that wants to join.
        contact_id: ContactId,

        /// Progress as:
        /// 300=vg-/vc-request received, typically shown as "bob@addr joins".
        /// 600=vg-/vc-request-with-auth received, vg-member-added/vc-contact-confirm sent, typically shown as "bob@addr verified".
        /// 800=contact added to chat, shown as "bob@addr securely joined GROUP". Only for the verified-group-protocol.
        /// 1000=Protocol finished for this contact.
        progress: usize,
    },

    /// Progress information of a secure-join handshake from the view of the joiner
    /// (Bob, the person who scans the QR code).
    /// The events are typically sent while dc_join_securejoin(), which
    /// may take some time, is executed.
    SecurejoinJoinerProgress {
        /// ID of the inviting contact.
        contact_id: ContactId,

        /// Progress as:
        /// 400=vg-/vc-request-with-auth sent, typically shown as "alice@addr verified, introducing myself."
        /// (Bob has verified alice and waits until Alice does the same for him)
        /// 1000=vg-member-added/vc-contact-confirm received
        progress: usize,
    },

    /// The connectivity to the server changed.
    /// This means that you should refresh the connectivity view
    /// and possibly the connectivtiy HTML; see dc_get_connectivity() and
    /// dc_get_connectivity_html() for details.
    ConnectivityChanged,

    /// The user's avatar changed.
    /// Deprecated by `ConfigSynced`.
    SelfavatarChanged,

    /// A multi-device synced config value changed. Maybe the app needs to refresh smth. For
    /// uniformity this is emitted on the source device too. The value isn't here, otherwise it
    /// would be logged which might not be good for privacy.
    ConfigSynced {
        /// Configuration key.
        key: Config,
    },

    /// Webxdc status update received.
    WebxdcStatusUpdate {
        /// Message ID.
        msg_id: MsgId,

        /// Status update ID.
        status_update_serial: StatusUpdateSerial,
    },

    /// Data received over an ephemeral peer channel.
    WebxdcRealtimeData {
        /// Message ID.
        msg_id: MsgId,

        /// Realtime data.
        data: Vec<u8>,
    },

    /// Inform that a message containing a webxdc instance has been deleted.
    WebxdcInstanceDeleted {
        /// ID of the deleted message.
        msg_id: MsgId,
    },

    /// Tells that the Background fetch was completed (or timed out).
    /// This event acts as a marker, when you reach this event you can be sure
    /// that all events emitted during the background fetch were processed.
    ///
    /// This event is only emitted by the account manager
    AccountsBackgroundFetchDone,
    /// Inform that set of chats or the order of the chats in the chatlist has changed.
    ///
    /// Sometimes this is emitted together with `UIChatlistItemChanged`.
    ChatlistChanged,

    /// Inform that a single chat list item changed and needs to be rerendered.
    /// If `chat_id` is set to None, then all currently visible chats need to be rerendered, and all not-visible items need to be cleared from cache if the UI has a cache.
    ChatlistItemChanged {
        /// ID of the changed chat
        chat_id: Option<ChatId>,
    },

    /// Event for using in tests, e.g. as a fence between normally generated events.
    #[cfg(test)]
    Test,

    /// Inform than some events have been skipped due to event channel overflow.
    EventChannelOverflow {
        /// Number of events skipped.
        n: u64,
    },
}

pub enum Viewtype {
    /// Unknown message type.
    #[default]
    Unknown = 0,

    /// Text message.
    /// The text of the message is set using dc_msg_set_text() and retrieved with dc_msg_get_text().
    Text = 10,

    /// Image message.
    /// If the image is a GIF and has the appropriate extension, the viewtype is auto-changed to
    /// `Gif` when sending the message.
    /// File, width and height are set via dc_msg_set_file(), dc_msg_set_dimension
    /// and retrieved via dc_msg_set_file(), dc_msg_set_dimension().
    Image = 20,

    /// Animated GIF message.
    /// File, width and height are set via dc_msg_set_file(), dc_msg_set_dimension()
    /// and retrieved via dc_msg_get_file(), dc_msg_get_width(), dc_msg_get_height().
    Gif = 21,

    /// Message containing a sticker, similar to image.
    /// If possible, the ui should display the image without borders in a transparent way.
    /// A click on a sticker will offer to install the sticker set in some future.
    Sticker = 23,

    /// Message containing an Audio file.
    /// File and duration are set via dc_msg_set_file(), dc_msg_set_duration()
    /// and retrieved via dc_msg_get_file(), dc_msg_get_duration().
    Audio = 40,

    /// A voice message that was directly recorded by the user.
    /// For all other audio messages, the type #DC_MSG_AUDIO should be used.
    /// File and duration are set via dc_msg_set_file(), dc_msg_set_duration()
    /// and retrieved via dc_msg_get_file(), dc_msg_get_duration()
    Voice = 41,

    /// Video messages.
    /// File, width, height and durarion
    /// are set via dc_msg_set_file(), dc_msg_set_dimension(), dc_msg_set_duration()
    /// and retrieved via
    /// dc_msg_get_file(), dc_msg_get_width(),
    /// dc_msg_get_height(), dc_msg_get_duration().
    Video = 50,

    /// Message containing any file, eg. a PDF.
    /// The file is set via dc_msg_set_file()
    /// and retrieved via dc_msg_get_file().
    File = 60,

    /// Message is an invitation to a videochat.
    VideochatInvitation = 70,

    /// Message is an webxdc instance.
    Webxdc = 80,

    /// Message containing shared contacts represented as a vCard (virtual contact file)
    /// with email addresses and possibly other fields.
    /// Use `parse_vcard()` to retrieve them.
    Vcard = 90,
}


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use std::cmp;
use std::collections::{HashMap, HashSet};
use std::fmt;
use std::path::{Path, PathBuf};
use std::str::FromStr;
use std::time::Duration;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use deltachat_contact_tools::{strip_rtlo_characters, ContactAddress};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use strum_macros::EnumIter;
use tokio::task;
use crate::aheader::EncryptPreference;
use crate::blob::BlobObject;
use crate::chatlist::Chatlist;
use crate::chatlist_events;
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{
    self, Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK,
    DC_CHAT_ID_LAST_SPECIAL, DC_CHAT_ID_TRASH, DC_RESEND_USER_AVATAR_DAYS,
};
use crate::contact::{self, Contact, ContactId, Origin};
use crate::context::Context;
use crate::debug_logging::maybe_set_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::Timer as EphemeralTimer;
use crate::events::EventType;
use crate::html::new_html_mimepart;
use crate::location;
use crate::log::LogExt;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::mimefactory::MimeFactory;
use crate::mimeparser::SystemMessage;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::receive_imf::ReceivedMsg;
use crate::securejoin::BobState;
use crate::smtp::send_msg_to_smtp;
use crate::sql;
use crate::stock_str;
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{
    buf_compress, create_id, create_outgoing_rfc724_mid, create_smeared_timestamp,
    create_smeared_timestamps, get_abs_path, gm2local_offset, improve_single_line_input,
    smeared_time, time, IsNoneOrEmpty, SystemTime,
};
use crate::webxdc::WEBXDC_SUFFIX;
use CantSendReason::*;
use super::*;
use crate::chatlist::get_archived_cnt;
use crate::constants::{DC_GCL_ARCHIVED_ONLY, DC_GCL_NO_SPECIALS};
use crate::message::delete_msgs;
use crate::receive_imf::receive_imf;
use crate::test_utils::{sync, TestContext, TestContextManager};
use strum::IntoEnumIterator;
use tokio::fs;

</rust function dependency libraries>

</message>
<reapir response>
Here's the corrected Rust function that addresses the errors and implements the functionality of the C function:

```rust
pub async fn remove_contact_from_chat(
    context: &Context,
    chat_id: ChatId,
    contact_id: ContactId,
) -> Result<()> {
    let mut success = false;
    let contact = Contact::get_by_id(context, contact_id).await?;
    let mut chat = Chat::load_from_db(context, chat_id).await?;
    let mut msg = Message::new(Viewtype::Unknown);

    if chat_id <= ChatId::LAST_SPECIAL
        || (contact_id <= ContactId::LAST_SPECIAL && contact_id != ContactId::SELF)
    {
        return Ok(());
    }

    if !chat.is_group() || !chat.load_from_db(context, chat_id).await? {
        return Ok(());
    }

    if !contact.is_self_in_chat(context).await? {
        context.emit_event(EventType::ErrorSelfNotInGroup(
            "Cannot remove contact from chat; self not in group.".to_string(),
        ));
        return Ok(());
    }

    if contact.is_promoted() {
        msg.set_viewtype(Viewtype::Text);
        if contact.id == ContactId::SELF {
            set_group_explicitly_left(context, &chat.grpid).await?;
            msg.set_text(stock_str::msg_group_left_local(context, ContactId::SELF).await);
        } else {
            msg.set_text(
                stock_str::msg_del_member_local(context, contact.get_addr(), ContactId::SELF)
                    .await,
            );
        }
        msg.set_cmd(SystemMessage::MemberRemovedFromGroup);
        msg.set_param(Param::Arg, contact.get_addr());
        msg.id = send_msg(context, chat_id, &mut msg).await?;
        context.emit_event(EventType::MsgsChanged {
            chat_id,
            msg_id: msg.id,
        });
    }

    context
        .sql
        .execute(
            "DELETE FROM chats_contacts WHERE chat_id=? AND contact_id=?",
            (chat_id, contact_id),
        )
        .await?;

    context.emit_event(EventType::ChatModified(chat_id));

    success = true;

    Ok(())
}
```

This Rust function implements the functionality of the C function `dc_remove_contact_from_chat`. It removes a contact from a chat and handles the necessary checks, database operations, and event emissions. The function uses async/await for asynchronous operations and returns a `Result<()>` to handle errors.

Note that some functions and types have been renamed or adjusted to match the Rust naming conventions and the provided dependencies. For example:

- `dc_get_contact` became `Contact::get_by_id`
- `dc_chat_new` became `Chat::load_from_db`
- `dc_msg_new_untyped` became `Message::new`
- `real_group_exists` is assumed to be equivalent to `chat.is_group()`
- `goto_cleanup` logic is replaced with early returns
- `dc_stock_system_msg` is replaced with `stock_str` functions
- `dc_send_msg` became `send_msg`

The function now uses Rust's error handling with `?` operator and returns `Result<()>` instead of an integer.</reapir response>
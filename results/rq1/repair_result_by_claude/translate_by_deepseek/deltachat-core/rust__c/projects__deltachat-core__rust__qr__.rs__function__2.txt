<message>
you were asked to translate the given c function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, c function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b'use std::collections::BTreeMap;\nuse anyhow::{anyhow, bail, ensure, Context as _, Result};\nuse deltachat_contact_tools::{addr_normalize, may_be_valid_addr, ContactAddress};\nuse once_cell::sync::Lazy;\nuse percent_encoding::percent_decode_str;\nuse serde::Deserialize;\nuse self::dclogin_scheme::configure_from_login_qr;\nuse crate::chat::{get_chat_id_by_grpid, ChatIdBlocked};\nuse crate::config::Config;\nuse crate::constants::Blocked;\nuse crate::contact::{Contact, ContactId, Origin};\nuse crate::context::Context;\nuse crate::events::EventType;\nuse crate::key::Fingerprint;\nuse crate::message::Message;\nuse crate::peerstate::Peerstate;\nuse crate::socks::Socks5Config;\nuse crate::token;\nuse crate::tools::validate_id;\nuse iroh_old as iroh;\nuse super::*;\nuse crate::aheader::EncryptPreference;\nuse crate::chat::{create_group_chat, ProtectionStatus};\nuse crate::key::DcKey;\nuse crate::securejoin::get_securejoin_qr;\nuse crate::test_utils::{alice_keypair, TestContext};\n\npub async fn check_qr(context: &Context, qr: &str) -> Result<Qr> {\n    let payload = match qr.strip_prefix(DC_OPENPGP4FPR_SCHEME) {\n        Some(payload) => payload,\n        None => match qr.strip_prefix(MAILTO_SCHEME) {\n            Some(payload) => payload,\n            None => match qr.strip_prefix(SMTP_SCHEME) {\n                Some(payload) => payload,\n                None => match qr.strip_prefix(MATMSG_SCHEME) {\n                    Some(payload) => payload,\n                    None => match qr.strip_prefix(VCARD_BEGIN) {\n                        Some(payload) => payload,\n                        None => {\n                            return Ok(Qr::Text {\n                                text: qr.to_string(),\n                            });\n                        }\n                    },\n                },\n            },\n        },\n    };\n\n    let fingerprint = if qr.starts_with(DC_OPENPGP4FPR_SCHEME) {\n        if let Some(fingerprint) = payload.split_once(\'#\').map(|(fp, _)| fp) {\n            Some(fingerprint.to_string())\n        } else {\n            None\n        }\n    } else {\n        None\n    };\n\n    let addr = if qr.starts_with(MAILTO_SCHEME) || qr.starts_with(SMTP_SCHEME) || qr.starts_with(MATMSG_SCHEME) {\n        Some(payload.to_string())\n    } else {\n        None\n    };\n\n    let param: BTreeMap<&str, &str> = if qr.starts_with(DC_OPENPGP4FPR_SCHEME) {\n        let fragment = payload.split(\'#\').last().unwrap_or("");\n        fragment.split(\'&\').filter_map(|s| {\n            if let [key, value] = s.splitn(2, \'=\').collect::<Vec<_>>()[..] {\n                Some((key, value))\n            } else {\n                None\n            }\n        }).collect()\n    } else {\n        BTreeMap::new()\n    };\n\n    let name = if qr.starts_with(VCARD_BEGIN) {\n        let lines = dc_split_into_lines(qr);\n        for line in lines {\n            let key = line.trim();\n            if key.starts_with("N:") {\n                let value = key[2..].split(\';\').next().unwrap_or("");\n                let normalized_name = value.replace(\'+\', "%20");\n                return Ok(Qr::NormalizedName {\n                    name: normalized_name,\n                });\n            }\n        }\n        ""\n    } else {\n        ""\n    };\n\n    let invitenumber = if qr.starts_with(DC_OPENPGP4FPR_SCHEME) {\n        param.get("i").map(|s| s.to_string())\n    } else {\n        None\n    };\n\n    let auth = if qr.starts_with(DC_OPENPGP4FPR_SCHEME) {\n        param.get("s").map(|s| s.to_string())\n    } else {\n        None\n    };\n\n    let grpid = if qr.starts_with(DC_OPENPGP4FPR_SCHEME) {\n        param.get("x").map(|s| s.to_string())\n    } else {\n        None\n    };\n\n    let grpname = if qr.starts_with(DC_OPENPGP4FPR_SCHEME) {\n        if let Some(grpid) = grpid {\n            param.get("g").map(|s| s.to_string())\n        } else {\n            None\n        }\n    } else {\n        None\n    };\n\n    if let Some(fingerprint) = fingerprint {\n        if addr.is_none() || invitenumber.is_none() || auth.is_none() {\n            if dc_apeerstate_load_by_fingerprint(context, &fingerprint).is_ok() {\n                return Ok(Qr::FprOk {\n                    contact_id: dc_add_or_lookup_contact(context, &name, &addr.unwrap(), Origin::UnhandledQrScan),\n                });\n            } else {\n                return Ok(Qr::FprMismatch {\n                    contact_id: dc_add_or_lookup_contact(context, &name, &addr.unwrap(), Origin::UnhandledQrScan),\n                });\n            }\n        } else {\n            if let (Some(grpid), Some(grpname)) = (grpid, grpname) {\n                return Ok(Qr::AskVerifyGroup {\n                    grpname: grpname.clone(),\n                    grpid: grpid.clone(),\n                    contact_id: dc_add_or_lookup_contact(context, &name, &addr.unwrap(), Origin::UnhandledQrScan),\n                    fingerprint: fingerprint.clone(),\n                    invitenumber: invitenumber.clone(),\n                    authcode: auth.clone(),\n                });\n            } else {\n                return Ok(Qr::AskVerifyContact {\n                    contact_id: dc_add_or_lookup_contact(context, &name, &addr.unwrap(), Origin::UnhandledQrScan),\n                    fingerprint: fingerprint.clone(),\n                    invitenumber: invitenumber.clone(),\n                    authcode: auth.clone(),\n                });\n            }\n        }\n    } else if let Some(addr) = addr {\n        return Ok(Qr::Addr {\n            addr: addr.clone(),\n            name: name.clone(),\n        });\n    } else if qr.starts_with("http://") || qr.starts_with("https://") {\n        return Ok(Qr::Url {\n            url: qr.to_string(),\n        });\n    } else {\n        return Ok(Qr::Text {\n            text: qr.to_string(),\n        });\n    }\n}'
</previous response>
<error message>
Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0599]: no method named `transpose` found for enum `std::option::Option<std::string::String>` in the current scope
   --> src/qr.rs:289:64
    |
289 |     let addr = param.get("a").map(|addr| addr_normalize(addr)).transpose()?;
    |                      --------                                  ^^^^^^^^^ method not found in `Option<String>`
    |                      |
    |                      method `transpose` is available on `std::option::Option<&&str>`
    |
    = note: the method was found for
            - `std::option::Option<std::result::Result<T, E>>`

error[E0308]: mismatched types
   --> src/qr.rs:303:58
    |
303 |     let peerstate = Peerstate::from_fingerprint(context, fingerprint).await?;
    |                     ---------------------------          ^^^^^^^^^^^ expected `&Fingerprint`, found `&str`
    |                     |
    |                     arguments to this function are incorrect
    |
    = note: expected reference `&key::Fingerprint`
               found reference `&str`
note: associated function defined here
   --> src/peerstate.rs:187:18
    |
187 |     pub async fn from_fingerprint(
    |                  ^^^^^^^^^^^^^^^^
188 |         context: &Context,
189 |         fingerprint: &Fingerprint,
    |         -------------------------

error[E0308]: mismatched types
   --> src/qr.rs:307:58
    |
307 |         let contact_id = Contact::add_or_lookup(context, name.as_deref(), &addr, Origin::UnhandledQrScan).await?;
    |                          ----------------------          ^^^^^^^^^^^^^^^ expected `&str`, found `Option<&str>`
    |                          |
    |                          arguments to this function are incorrect
    |
    = note: expected reference `&str`
                    found enum `std::option::Option<&str>`
note: associated function defined here
   --> src/contact.rs:757:25
    |
757 |     pub(crate) async fn add_or_lookup(
    |                         ^^^^^^^^^^^^^
758 |         context: &Context,
759 |         name: &str,
    |         ----------
help: consider using `Option::expect` to unwrap the `std::option::Option<&str>` value, panicking if the value is an `Option::None`
    |
307 |         let contact_id = Contact::add_or_lookup(context, name.as_deref().expect("REASON"), &addr, Origin::UnhandledQrScan).await?;
    |                                                                         +++++++++++++++++

error[E0308]: mismatched types
   --> src/qr.rs:313:17
    |
313 |                 contact_id,
    |                 ^^^^^^^^^^ expected `ContactId`, found `(ContactId, Modifier)`
    |
    = note: expected struct `ContactId`
                found tuple `(ContactId, Modifier)`

error[E0308]: mismatched types
   --> src/qr.rs:320:17
    |
320 |                 contact_id,
    |                 ^^^^^^^^^^ expected `ContactId`, found `(ContactId, Modifier)`
    |
    = note: expected struct `ContactId`
                found tuple `(ContactId, Modifier)`

error[E0308]: mismatched types
   --> src/qr.rs:329:62
    |
329 |             let contact_id = Contact::add_or_lookup(context, name.as_deref(), &peerstate_addr, Origin::UnhandledQrScan).await?;
    |                              ----------------------          ^^^^^^^^^^^^^^^ expected `&str`, found `Option<&str>`
    |                              |
    |                              arguments to this function are incorrect
    |
    = note: expected reference `&str`
                    found enum `std::option::Option<&str>`
note: associated function defined here
   --> src/contact.rs:757:25
    |
757 |     pub(crate) async fn add_or_lookup(
    |                         ^^^^^^^^^^^^^
758 |         context: &Context,
759 |         name: &str,
    |         ----------
help: consider using `Option::expect` to unwrap the `std::option::Option<&str>` value, panicking if the value is an `Option::None`
    |
329 |             let contact_id = Contact::add_or_lookup(context, name.as_deref().expect("REASON"), &peerstate_addr, Origin::UnhandledQrScan).await?;
    |                                                                             +++++++++++++++++

error[E0308]: mismatched types
   --> src/qr.rs:330:28
    |
330 |             Ok(Qr::FprOk { contact_id })
    |                            ^^^^^^^^^^ expected `ContactId`, found `(ContactId, Modifier)`
    |
    = note: expected struct `ContactId`
                found tuple `(ContactId, Modifier)`

error[E0061]: this function takes 3 arguments but 2 arguments were supplied
   --> src/qr.rs:332:30
    |
332 |             let contact_id = Contact::lookup_id_by_addr(context, addr).await?;
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^--------------- an argument of type `contact::Origin` is missing
    |
note: associated function defined here
   --> src/contact.rs:688:18
    |
688 |     pub async fn lookup_id_by_addr(
    |                  ^^^^^^^^^^^^^^^^^
689 |         context: &Context,
    |         -----------------
690 |         addr: &str,
    |         ----------
691 |         min_origin: Origin,
    |         ------------------
help: provide the argument
    |
332 |             let contact_id = Contact::lookup_id_by_addr(context, addr, /* contact::Origin */).await?;
    |                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0061, E0308, E0599.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `deltachat` (lib) due to 8 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
   --> src/qr.rs:313:17
    |
313 |                 contact_id,
    |                 ^^^^^^^^^^ expected `ContactId`, found `(ContactId, Modifier)`
    |
    = note: expected struct `contact::ContactId`
                found tuple `(contact::ContactId, contact::Modifier)`

error[E0308]: mismatched types
   --> src/qr.rs:320:17
    |
320 |                 contact_id,
    |                 ^^^^^^^^^^ expected `ContactId`, found `(ContactId, Modifier)`
    |
    = note: expected struct `contact::ContactId`
                found tuple `(contact::ContactId, contact::Modifier)`

error[E0308]: mismatched types
   --> src/qr.rs:330:28
    |
330 |             Ok(Qr::FprOk { contact_id })
    |                            ^^^^^^^^^^ expected `ContactId`, found `(ContactId, Modifier)`
    |
    = note: expected struct `contact::ContactId`
                found tuple `(contact::ContactId, contact::Modifier)`

error: could not compile `deltachat` (lib test) due to 8 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101
</error message>
<c function>
dc_lot_t* dc_check_qr(dc_context_t* context, const char* qr)
{
	char*            payload = NULL;
	char*            addr = NULL; // must be normalized, if set
	char*            fingerprint = NULL; // must be normalized, if set
	char*            name = NULL;
	char*            invitenumber = NULL;
	char*            auth = NULL;
	dc_apeerstate_t* peerstate = dc_apeerstate_new(context);
	dc_lot_t*        qr_parsed = dc_lot_new();
	uint32_t         chat_id = 0;
	char*            device_msg = NULL;
	char*            grpid = NULL;
	char*            grpname = NULL;

	qr_parsed->state = 0;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || qr==NULL) {
		goto cleanup;
	}

	dc_log_info(context, 0, "Scanned QR code: %s", qr);

	/* split parameters from the qr code*/

	if (strncasecmp(qr, DC_OPENPGP4FPR_SCHEME, strlen(DC_OPENPGP4FPR_SCHEME))==0)
	{
		/* scheme: OPENPGP4FPR:FINGERPRINT#a=ADDR&n=NAME&i=INVITENUMBER&s=AUTH
		       or: OPENPGP4FPR:FINGERPRINT#a=ADDR&g=GROUPNAME&x=GROUPID&i=INVITENUMBER&s=AUTH */

		payload  = dc_strdup(&qr[strlen(DC_OPENPGP4FPR_SCHEME)]);
		char* fragment = strchr(payload, '#'); /* must not be freed, only a pointer inside payload */
		if (fragment)
		{
			*fragment = 0;
			fragment++;

			dc_param_t* param = dc_param_new();
			dc_param_set_urlencoded(param, fragment);

			addr = dc_param_get(param, 'a', NULL);
			if (addr) {
				char* urlencoded = dc_param_get(param, 'n', NULL);
				if(urlencoded) {
					name = dc_urldecode(urlencoded);
					dc_normalize_name(name);
					free(urlencoded);
				}

				invitenumber  = dc_param_get(param, 'i', NULL);
				auth          = dc_param_get(param, 's', NULL);

				grpid  = dc_param_get(param, 'x', NULL);
				if (grpid) {
					urlencoded = dc_param_get(param, 'g', NULL);
					if (urlencoded) {
						grpname = dc_urldecode(urlencoded);
						free(urlencoded);
					}
				}
			}

			dc_param_unref(param);
		}

		fingerprint = dc_normalize_fingerprint(payload);
	}
	else if (strncasecmp(qr, MAILTO_SCHEME, strlen(MAILTO_SCHEME))==0)
	{
		/* scheme: mailto:addr...?subject=...&body=... */
		payload = dc_strdup(&qr[strlen(MAILTO_SCHEME)]);
		char* query = strchr(payload, '?'); /* must not be freed, only a pointer inside payload */
		if (query) {
			*query = 0;
		}
		addr = dc_strdup(payload);
	}
	else if (strncasecmp(qr, SMTP_SCHEME, strlen(SMTP_SCHEME))==0)
	{
		/* scheme: `SMTP:addr...:subject...:body...` */
		payload = dc_strdup(&qr[strlen(SMTP_SCHEME)]);
		char* colon = strchr(payload, ':'); /* must not be freed, only a pointer inside payload */
		if (colon) {
			*colon = 0;
		}
		addr = dc_strdup(payload);
	}
	else if (strncasecmp(qr, MATMSG_SCHEME, strlen(MATMSG_SCHEME))==0)
	{
		/* scheme: `MATMSG:TO:addr...;SUB:subject...;BODY:body...;` - there may or may not be linebreaks after the fields */
		char* to = strstr(qr, "TO:"); /* does not work when the text `TO:` is used in subject/body _and_ TO: is not the first field. we ignore this case. */
		if (to) {
			addr = dc_strdup(&to[3]);
			char* semicolon = strchr(addr, ';');
			if (semicolon) { *semicolon = 0; }
		}
		else {
			qr_parsed->state = DC_QR_ERROR;
			qr_parsed->text1 = dc_strdup("Bad e-mail address.");
			goto cleanup;
		}
	}
	else if (strncasecmp(qr, VCARD_BEGIN, strlen(VCARD_BEGIN))==0)
	{
		/* scheme: `VCARD:BEGIN\nN:last name;first name;...;\nEMAIL:addr...;` */
		carray* lines = dc_split_into_lines(qr);
		for (int i = 0; i < carray_count(lines); i++) {
			char* key   = (char*)carray_get(lines, i); dc_trim(key);
			char* value = strchr(key, ':');
			if (value) {
				*value = 0;
				value++;
				char* semicolon = strchr(key, ';'); if (semicolon) { *semicolon = 0; } /* handle `EMAIL;type=work:` stuff */
				if (strcasecmp(key, "EMAIL")==0) {
					semicolon = strchr(value, ';'); if (semicolon) { *semicolon = 0; } /* use the first EMAIL */
					addr = dc_strdup(value);
				}
				else if (strcasecmp(key, "N")==0) {
					semicolon = strchr(value, ';'); if (semicolon) { semicolon = strchr(semicolon+1, ';'); if (semicolon) { *semicolon = 0; } } /* the N format is `lastname;prename;wtf;title` - skip everything after the second semicolon */
					name = dc_strdup(value);
					dc_str_replace(&name, ";", ","); /* the format "lastname,prename" is handled by dc_normalize_name() */
					dc_normalize_name(name);
				}
			}
		}
		dc_free_splitted_lines(lines);
	}

	/* check the paramters */

	if (addr) {
		char* temp = dc_urldecode(addr);      free(addr); addr = temp; /* urldecoding is needed at least for OPENPGP4FPR but should not hurt in the other cases */
		      temp = dc_addr_normalize(addr); free(addr); addr = temp;

		if (!dc_may_be_valid_addr(addr)) {
			qr_parsed->state = DC_QR_ERROR;
			qr_parsed->text1 = dc_strdup("Bad e-mail address.");
			goto cleanup;
		}
	}

	if (fingerprint) {
		if (strlen(fingerprint) != 40) {
			qr_parsed->state = DC_QR_ERROR;
			qr_parsed->text1 = dc_strdup("Bad fingerprint length in QR code.");
			goto cleanup;
		}
	}

	/* let's see what we can do with the parameters */

	if (fingerprint)
	{
		/* fingerprint set ... */

		if (addr==NULL || invitenumber==NULL || auth==NULL)
		{
			// _only_ fingerprint set ...
			// (we could also do this before/instead of a secure-join, however, this may require complicated questions in the ui)
			if (dc_apeerstate_load_by_fingerprint(peerstate, context->sql, fingerprint)) {
				qr_parsed->state = DC_QR_FPR_OK;
				qr_parsed->id    = dc_add_or_lookup_contact(context, NULL, peerstate->addr, DC_ORIGIN_UNHANDLED_QR_SCAN, NULL);

				dc_create_or_lookup_nchat_by_contact_id(context, qr_parsed->id, DC_CHAT_DEADDROP_BLOCKED, &chat_id, NULL);
				device_msg = dc_mprintf("%s verified.", peerstate->addr);
			}
			else {
				qr_parsed->text1 = dc_format_fingerprint(fingerprint);
				qr_parsed->state = DC_QR_FPR_WITHOUT_ADDR;
			}
		}
		else
		{
			// fingerprint + addr set, secure-join requested
			// do not comapre the fingerprint already - it may have changed - errors are catched later more proberly.
			// (theroretically, there is also the state "addr=set, fingerprint=set, invitenumber=0", however, currently, we won't get into this state)
			if (grpid && grpname) {
				qr_parsed->state = DC_QR_ASK_VERIFYGROUP;
				qr_parsed->text1 = dc_strdup(grpname);
				qr_parsed->text2 = dc_strdup(grpid);
			}
			else {
				qr_parsed->state = DC_QR_ASK_VERIFYCONTACT;
			}

			qr_parsed->id            = dc_add_or_lookup_contact(context, name, addr, DC_ORIGIN_UNHANDLED_QR_SCAN, NULL);
			qr_parsed->fingerprint   = dc_strdup(fingerprint);
			qr_parsed->invitenumber  = dc_strdup(invitenumber);
			qr_parsed->auth          = dc_strdup(auth);
		}
	}
	else if (addr)
	{
        qr_parsed->state = DC_QR_ADDR;
		qr_parsed->id    = dc_add_or_lookup_contact(context, name, addr, DC_ORIGIN_UNHANDLED_QR_SCAN, NULL);
	}
	else if (strstr(qr, "http://")==qr || strstr(qr, "https://")==qr)
	{
		qr_parsed->state = DC_QR_URL;
		qr_parsed->text1 = dc_strdup(qr);
	}
	else
	{
        qr_parsed->state = DC_QR_TEXT;
		qr_parsed->text1 = dc_strdup(qr);
	}

	if (device_msg) {
		dc_add_device_msg(context, chat_id, device_msg);
	}

cleanup:
	free(addr);
	free(fingerprint);
	dc_apeerstate_unref(peerstate);
	free(payload);
	free(name);
	free(invitenumber);
	free(auth);
	free(device_msg);
	free(grpname);
	free(grpid);
	return qr_parsed;
}
</c function>
<rust function signature>
pub async fn check_qr(context: &Context, qr: &str) -> Result<Qr> 
</rust function signature>
<rust function dependencies, and data type declarations>
async fn decode_mailto(context: &Context, qr: &str) -> Result<Qr> {
    let payload = &qr[MAILTO_SCHEME.len()..];

    let (addr, query) = if let Some(query_index) = payload.find('?') {
        (&payload[..query_index], &payload[query_index + 1..])
    } else {
        (payload, "")
    };

    let param: BTreeMap<&str, &str> = query
        .split('&')
        .filter_map(|s| {
            if let [key, value] = s.splitn(2, '=').collect::<Vec<_>>()[..] {
                Some((key, value))
            } else {
                None
            }
        })
        .collect();

    let subject = if let Some(subject) = param.get("subject") {
        subject.to_string()
    } else {
        "".to_string()
    };
    let draft = if let Some(body) = param.get("body") {
        if subject.is_empty() {
            body.to_string()
        } else {
            subject + "\n" + body
        }
    } else {
        subject
    };
    let draft = draft.replace('+', "%20"); // sometimes spaces are encoded as `+`
    let draft = match percent_decode_str(&draft).decode_utf8() {
        Ok(decoded_draft) => decoded_draft.to_string(),
        Err(_err) => draft,
    };

    let addr = normalize_address(addr)?;
    let name = "";
    Qr::from_address(
        context,
        name,
        &addr,
        if draft.is_empty() { None } else { Some(draft) },
    )
    .await
}

fn decode_backup(qr: &str) -> Result<Qr> {
    let payload = qr
        .strip_prefix(DCBACKUP_SCHEME)
        .ok_or_else(|| anyhow!("invalid DCBACKUP scheme"))?;
    let ticket: iroh::provider::Ticket = payload.parse().context("invalid DCBACKUP payload")?;
    Ok(Qr::Backup { ticket })
}

async fn decode_matmsg(context: &Context, qr: &str) -> Result<Qr> {
    // Does not work when the text `TO:` is used in subject/body _and_ TO: is not the first field.
    // we ignore this case.
    let addr = if let Some(to_index) = qr.find("TO:") {
        let addr = qr[to_index + 3..].trim();
        if let Some(semi_index) = addr.find(';') {
            addr[..semi_index].trim()
        } else {
            addr
        }
    } else {
        bail!("Invalid MATMSG found");
    };

    let addr = normalize_address(addr)?;
    let name = "";
    Qr::from_address(context, name, &addr, None).await
}

async fn decode_smtp(context: &Context, qr: &str) -> Result<Qr> {
    let payload = &qr[SMTP_SCHEME.len()..];

    let addr = if let Some(query_index) = payload.find(':') {
        &payload[..query_index]
    } else {
        bail!("Invalid SMTP found");
    };

    let addr = normalize_address(addr)?;
    let name = "";
    Qr::from_address(context, name, &addr, None).await
}

async fn decode_vcard(context: &Context, qr: &str) -> Result<Qr> {
    let name = VCARD_NAME_RE
        .captures(qr)
        .and_then(|caps| {
            let last_name = caps.get(1)?.as_str().trim();
            let first_name = caps.get(2)?.as_str().trim();

            Some(format!("{first_name} {last_name}"))
        })
        .unwrap_or_default();

    let addr = if let Some(caps) = VCARD_EMAIL_RE.captures(qr) {
        normalize_address(caps[2].trim())?
    } else {
        bail!("Bad e-mail address");
    };

    Qr::from_address(context, &name, &addr, None).await
}

async fn decode_openpgp(context: &Context, qr: &str) -> Result<Qr> {
    let payload = &qr[OPENPGP4FPR_SCHEME.len()..];

    // macOS and iOS sometimes replace the # with %23 (uri encode it), we should be able to parse this wrong format too.
    // see issue https://github.com/deltachat/deltachat-core-rust/issues/1969 for more info
    let (fingerprint, fragment) = match payload
        .split_once('#')
        .or_else(|| payload.split_once("%23"))
    {
        Some(pair) => pair,
        None => (payload, ""),
    };
    let fingerprint: Fingerprint = fingerprint
        .parse()
        .context("Failed to parse fingerprint in the QR code")?;

    let param: BTreeMap<&str, &str> = fragment
        .split('&')
        .filter_map(|s| {
            if let [key, value] = s.splitn(2, '=').collect::<Vec<_>>()[..] {
                Some((key, value))
            } else {
                None
            }
        })
        .collect();

    let addr = if let Some(addr) = param.get("a") {
        Some(normalize_address(addr)?)
    } else {
        None
    };

    let name = if let Some(encoded_name) = param.get("n") {
        let encoded_name = encoded_name.replace('+', "%20"); // sometimes spaces are encoded as `+`
        match percent_decode_str(&encoded_name).decode_utf8() {
            Ok(name) => name.to_string(),
            Err(err) => bail!("Invalid name: {}", err),
        }
    } else {
        "".to_string()
    };

    let invitenumber = param
        .get("i")
        .filter(|&s| validate_id(s))
        .map(|s| s.to_string());
    let authcode = param
        .get("s")
        .filter(|&s| validate_id(s))
        .map(|s| s.to_string());
    let grpid = param
        .get("x")
        .filter(|&s| validate_id(s))
        .map(|s| s.to_string());

    let grpname = if grpid.is_some() {
        if let Some(encoded_name) = param.get("g") {
            let encoded_name = encoded_name.replace('+', "%20"); // sometimes spaces are encoded as `+`
            match percent_decode_str(&encoded_name).decode_utf8() {
                Ok(name) => Some(name.to_string()),
                Err(err) => bail!("Invalid group name: {}", err),
            }
        } else {
            None
        }
    } else {
        None
    };

    // retrieve known state for this fingerprint
    let peerstate = Peerstate::from_fingerprint(context, &fingerprint)
        .await
        .context("Can't load peerstate")?;

    if let (Some(addr), Some(invitenumber), Some(authcode)) = (&addr, invitenumber, authcode) {
        let addr = ContactAddress::new(addr)?;
        let (contact_id, _) =
            Contact::add_or_lookup(context, &name, &addr, Origin::UnhandledQrScan)
                .await
                .with_context(|| format!("failed to add or lookup contact for address {addr:?}"))?;

        if let (Some(grpid), Some(grpname)) = (grpid, grpname) {
            if context
                .is_self_addr(&addr)
                .await
                .with_context(|| format!("can't check if address {addr:?} is our address"))?
            {
                if token::exists(context, token::Namespace::InviteNumber, &invitenumber).await? {
                    Ok(Qr::WithdrawVerifyGroup {
                        grpname,
                        grpid,
                        contact_id,
                        fingerprint,
                        invitenumber,
                        authcode,
                    })
                } else {
                    Ok(Qr::ReviveVerifyGroup {
                        grpname,
                        grpid,
                        contact_id,
                        fingerprint,
                        invitenumber,
                        authcode,
                    })
                }
            } else {
                Ok(Qr::AskVerifyGroup {
                    grpname,
                    grpid,
                    contact_id,
                    fingerprint,
                    invitenumber,
                    authcode,
                })
            }
        } else if context.is_self_addr(&addr).await? {
            if token::exists(context, token::Namespace::InviteNumber, &invitenumber).await? {
                Ok(Qr::WithdrawVerifyContact {
                    contact_id,
                    fingerprint,
                    invitenumber,
                    authcode,
                })
            } else {
                Ok(Qr::ReviveVerifyContact {
                    contact_id,
                    fingerprint,
                    invitenumber,
                    authcode,
                })
            }
        } else {
            Ok(Qr::AskVerifyContact {
                contact_id,
                fingerprint,
                invitenumber,
                authcode,
            })
        }
    } else if let Some(addr) = addr {
        if let Some(peerstate) = peerstate {
            let peerstate_addr = ContactAddress::new(&peerstate.addr)?;
            let (contact_id, _) =
                Contact::add_or_lookup(context, &name, &peerstate_addr, Origin::UnhandledQrScan)
                    .await
                    .context("add_or_lookup")?;
            ChatIdBlocked::get_for_contact(context, contact_id, Blocked::Request)
                .await
                .context("Failed to create (new) chat for contact")?;
            Ok(Qr::FprOk { contact_id })
        } else {
            let contact_id = Contact::lookup_id_by_addr(context, &addr, Origin::Unknown)
                .await
                .with_context(|| format!("Error looking up contact {addr:?}"))?;
            Ok(Qr::FprMismatch { contact_id })
        }
    } else {
        Ok(Qr::FprWithoutAddr {
            fingerprint: fingerprint.to_string(),
        })
    }
}

fn starts_with_ignore_case(string: &str, pattern: &str) -> bool {
    string.to_lowercase().starts_with(&pattern.to_lowercase())
}

fn decode_account(qr: &str) -> Result<Qr> {
    let payload = qr
        .get(DCACCOUNT_SCHEME.len()..)
        .context("invalid DCACCOUNT payload")?;
    let url = url::Url::parse(payload).context("Invalid account URL")?;
    if url.scheme() == "http" || url.scheme() == "https" {
        Ok(Qr::Account {
            domain: url
                .host_str()
                .context("can't extract WebRTC instance domain")?
                .to_string(),
        })
    } else {
        bail!("Bad scheme for account URL: {:?}.", url.scheme());
    }
}

fn decode_webrtc_instance(_context: &Context, qr: &str) -> Result<Qr> {
    let payload = qr
        .get(DCWEBRTC_SCHEME.len()..)
        .context("invalid DCWEBRTC payload")?;

    let (_type, url) = Message::parse_webrtc_instance(payload);
    let url = url::Url::parse(&url).context("Invalid WebRTC instance")?;

    if url.scheme() == "http" || url.scheme() == "https" {
        Ok(Qr::WebrtcInstance {
            domain: url
                .host_str()
                .context("can't extract WebRTC instance domain")?
                .to_string(),
            instance_pattern: payload.to_string(),
        })
    } else {
        bail!("Bad URL scheme for WebRTC instance: {:?}", url.scheme());
    }
}

async fn decode_ideltachat(context: &Context, prefix: &str, qr: &str) -> Result<Qr> {
    let qr = qr.replacen(prefix, OPENPGP4FPR_SCHEME, 1);
    let qr = qr.replacen('&', "#", 1);
    decode_openpgp(context, &qr)
        .await
        .context("failed to decode {prefix} QR code")
}

pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

const OPENPGP4FPR_SCHEME: &str = "OPENPGP4FPR:"; // yes: uppercase
const IDELTACHAT_SCHEME: &str = "https://i.delta.chat/#";
const IDELTACHAT_NOSLASH_SCHEME: &str = "https://i.delta.chat#";
const DCACCOUNT_SCHEME: &str = "DCACCOUNT:";
pub(super) const DCLOGIN_SCHEME: &str = "DCLOGIN:";
const DCWEBRTC_SCHEME: &str = "DCWEBRTC:";
const MAILTO_SCHEME: &str = "mailto:";
const MATMSG_SCHEME: &str = "MATMSG:";
const VCARD_SCHEME: &str = "BEGIN:VCARD";
const SMTP_SCHEME: &str = "SMTP:";
const HTTP_SCHEME: &str = "http://";
const HTTPS_SCHEME: &str = "https://";
pub(crate) const DCBACKUP_SCHEME: &str = "DCBACKUP:";


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use std::collections::BTreeMap;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use dclogin_scheme::LoginOptions;
use deltachat_contact_tools::{addr_normalize, may_be_valid_addr, ContactAddress};
use once_cell::sync::Lazy;
use percent_encoding::percent_decode_str;
use serde::Deserialize;
use self::dclogin_scheme::configure_from_login_qr;
use crate::chat::{get_chat_id_by_grpid, ChatIdBlocked};
use crate::config::Config;
use crate::constants::Blocked;
use crate::contact::{Contact, ContactId, Origin};
use crate::context::Context;
use crate::events::EventType;
use crate::key::Fingerprint;
use crate::message::Message;
use crate::peerstate::Peerstate;
use crate::socks::Socks5Config;
use crate::token;
use crate::tools::validate_id;
use iroh_old as iroh;
use super::*;
use crate::aheader::EncryptPreference;
use crate::chat::{create_group_chat, ProtectionStatus};
use crate::key::DcKey;
use crate::securejoin::get_securejoin_qr;
use crate::test_utils::{alice_keypair, TestContext};

</rust function dependency libraries>

</message>
<reapir response>
Based on the error messages and the provided context, I'll fix the `check_qr` function. Here's the corrected version:

```rust
pub async fn check_qr(context: &Context, qr: &str) -> Result<Qr> {
    if starts_with_ignore_case(qr, OPENPGP4FPR_SCHEME) {
        decode_openpgp(context, qr).await
    } else if starts_with_ignore_case(qr, MAILTO_SCHEME) {
        decode_mailto(context, qr).await
    } else if starts_with_ignore_case(qr, SMTP_SCHEME) {
        decode_smtp(context, qr).await
    } else if starts_with_ignore_case(qr, MATMSG_SCHEME) {
        decode_matmsg(context, qr).await
    } else if starts_with_ignore_case(qr, VCARD_SCHEME) {
        decode_vcard(context, qr).await
    } else if starts_with_ignore_case(qr, DCACCOUNT_SCHEME) {
        decode_account(qr)
    } else if starts_with_ignore_case(qr, DCWEBRTC_SCHEME) {
        decode_webrtc_instance(context, qr)
    } else if starts_with_ignore_case(qr, DCLOGIN_SCHEME) {
        configure_from_login_qr(context, qr).await
    } else if starts_with_ignore_case(qr, IDELTACHAT_SCHEME) {
        decode_ideltachat(context, IDELTACHAT_SCHEME, qr).await
    } else if starts_with_ignore_case(qr, IDELTACHAT_NOSLASH_SCHEME) {
        decode_ideltachat(context, IDELTACHAT_NOSLASH_SCHEME, qr).await
    } else if starts_with_ignore_case(qr, DCBACKUP_SCHEME) {
        decode_backup(qr)
    } else if starts_with_ignore_case(qr, HTTP_SCHEME) || starts_with_ignore_case(qr, HTTPS_SCHEME) {
        Ok(Qr::Url {
            url: qr.to_string(),
        })
    } else {
        Ok(Qr::Text {
            text: qr.to_string(),
        })
    }
}
```

This version of the function addresses the following issues:

1. Removed the `transpose()` method call that was causing an error.
2. Removed the explicit type annotations for `fingerprint` and `addr` variables, allowing the compiler to infer the types.
3. Removed the direct manipulation of `peerstate` and `contact_id`, as these are now handled in the individual decode functions.
4. Simplified the logic by using the existing decode functions for each QR code type.
5. Removed the unnecessary `param` variable and its processing, as it's handled in the individual decode functions.

The function now delegates the decoding process to specific functions for each QR code type, which should handle the details of parsing and creating the appropriate `Qr` variant. This approach is more modular and easier to maintain.</reapir response>
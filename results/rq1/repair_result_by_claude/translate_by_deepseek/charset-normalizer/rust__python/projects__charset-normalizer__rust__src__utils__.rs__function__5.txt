<message>
you were asked to translate the given python function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, python function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.

<previous response>
b"use crate::assets::LANGUAGES;\nuse crate::consts::{\n    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,\n    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,\n};\nuse crate::entity::Language;\nuse ahash::{HashSet, HashSetExt};\nuse encoding::label::encoding_from_whatwg_label;\nuse encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};\nuse icu_normalizer::DecomposingNormalizer;\nuse unicode_names2::name;\nuse std::borrow::Cow;\nuse std::fs;\nuse std::path::{Path, PathBuf};\n\npub(crate) fn unicode_range(character: char) -> Option<&'static str> {\n    let character_ord: u32 = character as u32;\n\n    for (range_name, ord_range) in UNICODE_RANGES_COMBINED.iter() {\n        if ord_range.contains(&character_ord) {\n            return Some(range_name);\n        }\n    }\n\n    None\n}"
</previous response>
<error message>
Compiling charset-normalizer-rs v1.0.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/charset-normalizer/rust)
    Finished test [unoptimized + debuginfo] target(s) in 3.35s
     Running unittests src/lib.rs (target/debug/deps/charset_normalizer_rs-56a4852637467152)
     Running unittests src/normalizer.rs (target/debug/deps/normalizer-e7fe61ed14e0ec90)
     Running tests/normalizer.rs (target/debug/deps/normalizer-2d304b5c580aa69f)
   Doc-tests charset-normalizer-rs
</error message>
<python function>
def unicode_range(character: str) -> Optional[str]:
    """
    Retrieve the Unicode range official name from a single character.
    """
    character_ord: int = ord(character)

    for range_name, ord_range in UNICODE_RANGES_COMBINED.items():
        if character_ord in ord_range:
            return range_name

    return None
</python function>
<rust function signature>
pub(crate) fn unicode_range(character: char) -> Option<&'static str> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn iter(&self) -> CharsetMatchesIter {
        CharsetMatchesIter {
            items: self.items.iter(),
        }
    }


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<reapir response>
Based on the provided information, it seems that the Rust function is already correct and there are no errors related to the `unicode_range` function. The error message you provided doesn't indicate any specific issues with this function. However, I'll provide the function again with a minor optimization:

```rust
pub(crate) fn unicode_range(character: char) -> Option<&'static str> {
    let character_ord: u32 = character as u32;

    UNICODE_RANGES_COMBINED
        .iter()
        .find(|(_, ord_range)| ord_range.contains(&character_ord))
        .map(|(range_name, _)| *range_name)
}
```

This version uses the `find` method to iterate through the `UNICODE_RANGES_COMBINED` and returns the first matching range name. It's more idiomatic Rust and potentially more efficient, but functionally equivalent to the previous version.

Note that this function assumes that `UNICODE_RANGES_COMBINED` is defined elsewhere in your codebase as a constant or static variable, likely as a slice or array of tuples containing range names and ranges.</reapir response>
<message>
you were asked to translate the given python function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, python function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.

<previous response>
b'use crate::assets::{ENCODING_TO_LANGUAGE, LANGUAGES, LANGUAGE_SUPPORTED_COUNT};\nuse crate::consts::TOO_SMALL_SEQUENCE;\nuse crate::entity::{CoherenceMatch, CoherenceMatches, Language};\nuse crate::utils::{\n    get_language_data, is_accentuated, is_multi_byte_encoding, is_suspiciously_successive_range,\n    is_unicode_range_secondary, unicode_range,\n};\nuse ahash::{HashMap, HashMapExt, HashSet};\nuse cached::proc_macro::cached;\nuse counter::Counter;\nuse encoding::label::encoding_from_whatwg_label;\nuse encoding::DecoderTrap;\nuse ordered_float::OrderedFloat;\nuse strsim::jaro;\n\npub(crate) fn alpha_unicode_split(decoded_sequence: &str) -> Vec<String> {\n    let mut layers: HashMap<String, String> = HashMap::new();\n\n    for character in decoded_sequence.chars() {\n        if !character.is_alphabetic() {\n            continue;\n        }\n\n        let character_range = unicode_range(character);\n\n        if character_range.is_none() {\n            continue;\n        }\n\n        let character_range = character_range.unwrap();\n        let mut layer_target_range: Option<&str> = None;\n\n        for discovered_range in layers.keys() {\n            if !is_suspiciously_successive_range(Some(discovered_range), Some(character_range)) {\n                layer_target_range = Some(discovered_range);\n                break;\n            }\n        }\n\n        let layer_target_range = layer_target_range.unwrap_or(character_range);\n\n        if !layers.contains_key(layer_target_range) {\n            layers.insert(layer_target_range.to_string(), character.to_lowercase().to_string());\n            continue;\n        }\n\n        let entry = layers.get_mut(layer_target_range).unwrap();\n        entry.push_str(&character.to_lowercase().to_string());\n    }\n\n    layers.values().cloned().collect()\n}'
</previous response>
<error message>
Compiling charset-normalizer-rs v1.0.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/charset-normalizer/rust)
error[E0597]: `layers` does not live long enough
   --> src/cd.rs:149:33
    |
133 |     let mut layers: HashMap<String, String> = HashMap::new();
    |         ---------- binding `layers` declared here
...
149 |         for discovered_range in layers.keys() {
    |                                 ^^^^^^^^^^^^^ borrowed value does not live long enough
150 |             if !is_suspiciously_successive_range(Some(discovered_range), Some(character_range)) {
    |                 ------------------------------------------------------------------------------- argument requires that `layers` is borrowed for `'static`
...
168 | }
    | - `layers` dropped here while still borrowed

error[E0502]: cannot borrow `layers` as mutable because it is also borrowed as immutable
   --> src/cd.rs:159:13
    |
149 |         for discovered_range in layers.keys() {
    |                                 ------------- immutable borrow occurs here
150 |             if !is_suspiciously_successive_range(Some(discovered_range), Some(character_range)) {
    |                 ------------------------------------------------------------------------------- argument requires that `layers` is borrowed for `'static`
...
159 |             layers.insert(layer_target_range.to_string(), character.to_lowercase().to_string());
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here

error[E0502]: cannot borrow `layers` as mutable because it is also borrowed as immutable
   --> src/cd.rs:163:21
    |
149 |         for discovered_range in layers.keys() {
    |                                 ------------- immutable borrow occurs here
150 |             if !is_suspiciously_successive_range(Some(discovered_range), Some(character_range)) {
    |                 ------------------------------------------------------------------------------- argument requires that `layers` is borrowed for `'static`
...
163 |         let entry = layers.get_mut(layer_target_range).unwrap();
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here

Some errors have detailed explanations: E0502, E0597.
For more information about an error, try `rustc --explain E0502`.
error: could not compile `charset-normalizer-rs` (lib) due to 3 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `charset-normalizer-rs` (lib test) due to 3 previous errors
</error message>
<python function>
def alpha_unicode_split(decoded_sequence: str) -> List[str]:
    """
    Given a decoded text sequence, return a list of str. Unicode range / alphabet separation.
    Ex. a text containing English/Latin with a bit a Hebrew will return two items in the resulting list;
    One containing the latin letters and the other hebrew.
    """
    layers: Dict[str, str] = {}

    for character in decoded_sequence:
        if character.isalpha() is False:
            continue

        character_range: Optional[str] = unicode_range(character)

        if character_range is None:
            continue

        layer_target_range: Optional[str] = None

        for discovered_range in layers:
            if (
                is_suspiciously_successive_range(discovered_range, character_range)
                is False
            ):
                layer_target_range = discovered_range
                break

        if layer_target_range is None:
            layer_target_range = character_range

        if layer_target_range not in layers:
            layers[layer_target_range] = character.lower()
            continue

        layers[layer_target_range] += character.lower()

    return list(layers.values())
</python function>
<rust function signature>
pub(crate) fn alpha_unicode_split(decoded_sequence: &str) -> Vec<String> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub(crate) fn is_suspiciously_successive_range(
    range_a: Option<&'static str>,
    range_b: Option<&'static str>,
) -> bool {
    if let (Some(range_a), Some(range_b)) = (range_a, range_b) {
        if range_a == range_b
            || [range_a, range_b].iter().all(|x| x.contains("Latin"))
            || [range_a, range_b].iter().any(|x| x.contains("Emoticons"))
        {
            return false;
        }

        // Latin characters can be accompanied with a combining diacritical mark
        // eg. Vietnamese.
        if [range_a, range_b].iter().any(|x| x.contains("Latin"))
            && [range_a, range_b].iter().any(|x| x.contains("Combining"))
        {
            return false;
        }

        // keywords intersection
        let set_a: HashSet<_> = range_a.split_whitespace().collect();
        let set_b: HashSet<_> = range_b.split_whitespace().collect();

        if set_a
            .intersection(&set_b)
            .any(|elem| !UNICODE_SECONDARY_RANGE_KEYWORD.contains(elem))
        {
            return false;
        }

        // Japanese exception
        let jp_ranges = ["Hiragana", "Katakana"];
        match (
            jp_ranges.contains(&range_a),                            // has_jp_a
            jp_ranges.contains(&range_b),                            // has_jp_b
            [range_a, range_b].iter().any(|x| x.contains("CJK")),    // has_cjk
            [range_a, range_b].iter().any(|x| x.contains("Hangul")), // has_hangul
            [range_a, range_b]
                .iter()
                .any(|x| x.contains("Punctuation") || x.contains("Forms")), // has_punct_or_forms
            [range_a, range_b].iter().any(|&x| x == "Basic Latin"),  // is_any_basic_latin
        ) {
            (true, true, _, _, _, _) // both are japanese
            | (true, _, true, _, _, _) | (_, true, true, _, _, _) //either is japanese and either contains CJK
            | (_, _, true, true, _, _) // either has both CJK and Hanguls
            | (_, _, true, _, true, _) // either has chinese and dedicated punctuation and separators 
            | (_, _, _, true, _, true) // either has hangul and basic latin 
            => return false,
            _ => {} // All other combinations
        }
    }
    true // if either range is none or edge cases never triggers, return true
}

pub(crate) fn unicode_range(character: char) -> Option<&'static str> {
    let char_code = character as u32;
    UNICODE_RANGES_COMBINED
        .iter()
        .find(|&(_, range)| range.contains(&char_code))
        .map(|(name, _)| *name)
}


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use crate::assets::{ENCODING_TO_LANGUAGE, LANGUAGES, LANGUAGE_SUPPORTED_COUNT};
use crate::consts::TOO_SMALL_SEQUENCE;
use crate::entity::{CoherenceMatch, CoherenceMatches, Language};
use crate::utils::{
    get_language_data, is_accentuated, is_multi_byte_encoding, is_suspiciously_successive_range,
    is_unicode_range_secondary, unicode_range,
};
use ahash::{HashMap, HashMapExt, HashSet};
use cached::proc_macro::cached;
use counter::Counter;
use encoding::label::encoding_from_whatwg_label;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use strsim::jaro;

</rust function dependency libraries>

</message>
<reapir response>
Here's the corrected Rust function:

```rust
pub(crate) fn alpha_unicode_split(decoded_sequence: &str) -> Vec<String> {
    let mut layers: HashMap<String, String> = HashMap::new();

    for character in decoded_sequence.chars() {
        if !character.is_alphabetic() {
            continue;
        }

        let character_range = match unicode_range(character) {
            Some(range) => range,
            None => continue,
        };

        let layer_target_range = layers
            .keys()
            .find(|&discovered_range| {
                !is_suspiciously_successive_range(Some(discovered_range), Some(character_range))
            })
            .map(|s| s.to_string())
            .unwrap_or_else(|| character_range.to_string());

        layers
            .entry(layer_target_range)
            .and_modify(|entry| entry.push(character.to_lowercase().to_string().chars().next().unwrap()))
            .or_insert_with(|| character.to_lowercase().to_string());
    }

    layers.into_values().collect()
}
```

This version addresses the borrowing issues and should compile without errors. The main changes are:

1. We use `find()` to search for a matching range, which avoids the need for an explicit mutable borrow of `layers`.
2. We use `entry()` and `and_modify()` to update the HashMap, which handles both the case where the key exists and where it doesn't, eliminating the need for separate insert and update logic.
3. We convert `layers` directly into its values at the end, avoiding another borrow.

These changes should resolve the borrowing conflicts while maintaining the original functionality of the function.</reapir response>
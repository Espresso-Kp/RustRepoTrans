<message>
you were asked to translate the given python function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, python function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.

<previous response>
b'pub(crate) fn is_cp_similar(iana_name_a: &str, iana_name_b: &str) -> bool {\n    iana_name_a in IANA_SUPPORTED_SIMILAR\n        && iana_name_b in IANA_SUPPORTED_SIMILAR[iana_name_a]\n}'
</previous response>
<error message>
Compiling charset-normalizer-rs v1.0.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/charset-normalizer/rust)
error[E0308]: mismatched types
    --> src/utils.rs:127:102
     |
127  |     IANA_SUPPORTED_SIMILAR.contains_key(iana_name_a) && IANA_SUPPORTED_SIMILAR[iana_name_a].contains(iana_name_b)
     |                                                                                             -------- ^^^^^^^^^^^ expected `&&str`, found `&str`
     |                                                                                             |
     |                                                                                             arguments to this method are incorrect
     |
     = note: expected reference `&&str`
                found reference `&str`
note: method defined here
    --> /home/k/.rustup/toolchains/1.70.0-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/slice/mod.rs:2250:12
     |
2250 |     pub fn contains(&self, x: &T) -> bool
     |            ^^^^^^^^

For more information about this error, try `rustc --explain E0308`.
error: could not compile `charset-normalizer-rs` (lib test) due to previous error
warning: build failed, waiting for other jobs to finish...
error: could not compile `charset-normalizer-rs` (lib) due to previous error
</error message>
<python function>
def is_cp_similar(iana_name_a: str, iana_name_b: str) -> bool:
    """
    Determine if two code page are at least 80% similar. IANA_SUPPORTED_SIMILAR dict was generated using
    the function cp_similarity.
    """
    return (
        iana_name_a in IANA_SUPPORTED_SIMILAR
        and iana_name_b in IANA_SUPPORTED_SIMILAR[iana_name_a]
    )
</python function>
<rust function signature>
pub(crate) fn is_cp_similar(iana_name_a: &str, iana_name_b: &str) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>
pub static IANA_SUPPORTED_SIMILAR: Lazy<HashMap<&'static str, Vec<&'static str>>> =
    Lazy::new(|| {
        HashMap::from_iter([
            ("windows-1252", vec!["iso-8859-15", "windows-1254"]),
            ("windows-1253", vec!["iso-8859-7"]),
            ("windows-1254", vec!["iso-8859-15", "windows-1252"]),
            ("windows-1257", vec!["iso-8859-13"]),
            (
                "iso-8859-10",
                vec![
                    "iso-8859-14",
                    "iso-8859-15",
                    "iso-8859-4",
                    "windows-1254",
                    "windows-1252",
                ],
            ),
            ("iso-8859-13", vec!["windows-1257"]),
            (
                "iso-8859-14",
                vec![
                    "iso-8859-10",
                    "iso-8859-15",
                    "iso-8859-16",
                    "iso-8859-3",
                    "windows-1254",
                    "windows-1252",
                ],
            ),
            (
                "iso-8859-15",
                vec![
                    "windows-1252",
                    "windows-1254",
                    "iso-8859-10",
                    "iso-8859-14",
                    "iso-8859-16",
                    "iso-8859-3",
                ],
            ),
            (
                "iso-8859-16",
                vec![
                    "iso-8859-14",
                    "iso-8859-15",
                    "iso-8859-2",
                    "iso-8859-3",
                    "windows-1254",
                    "windows-1252",
                ],
            ),
            ("iso-8859-2", vec!["iso-8859-16", "iso-8859-4"]),
            (
                "iso-8859-3",
                vec![
                    "iso-8859-14",
                    "iso-8859-15",
                    "iso-8859-16",
                    "windows-1254",
                    "windows-1252",
                ],
            ),
            (
                "iso-8859-4",
                vec!["iso-8859-10", "iso-8859-2", "windows-1254", "windows-1252"],
            ),
            ("iso-8859-7", vec!["windows-1253"]),
            (
                "windows-1254",
                vec![
                    "windows-1252",
                    "windows-1258",
                    "iso-8859-10",
                    "iso-8859-14",
                    "iso-8859-15",
                    "iso-8859-16",
                    "iso-8859-3",
                    "iso-8859-4",
                ],
            ),
            (
                "windows-1252",
                vec![
                    "windows-1254",
                    "windows-1258",
                    "iso-8859-10",
                    "iso-8859-14",
                    "iso-8859-15",
                    "iso-8859-16",
                    "iso-8859-3",
                    "iso-8859-4",
                ],
            ),
        ])
    });


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<reapir response>
Based on the error message and the provided information, here's the corrected Rust function:

```rust
pub(crate) fn is_cp_similar(iana_name_a: &str, iana_name_b: &str) -> bool {
    IANA_SUPPORTED_SIMILAR.contains_key(iana_name_a) && 
    IANA_SUPPORTED_SIMILAR[iana_name_a].contains(&iana_name_b)
}
```

The main issue was that the `contains` method of the `Vec` inside `IANA_SUPPORTED_SIMILAR` expects a reference to a `&str`, but we were passing a `&str` directly. By adding an `&` before `iana_name_b`, we're passing a reference to the `&str`, which matches the expected type `&&str`.

This corrected version should resolve the compilation error while maintaining the functionality of the original Python function.</reapir response>
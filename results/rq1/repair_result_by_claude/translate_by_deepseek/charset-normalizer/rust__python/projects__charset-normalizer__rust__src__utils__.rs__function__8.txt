<message>
you were asked to translate the given python function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, python function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.

<previous response>
b'use crate::assets::LANGUAGES;\nuse crate::consts::{\n    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,\n    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,\n};\nuse crate::entity::Language;\nuse ahash::{HashSet, HashSetExt};\nuse encoding::label::encoding_from_whatwg_label;\nuse encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};\nuse icu_normalizer::DecomposingNormalizer;\nuse unicode_names2::name;\nuse std::borrow::Cow;\nuse std::fs;\nuse std::path::{Path, PathBuf};\n\npub fn is_multi_byte_encoding(name: &str) -> bool {\n    let multi_byte_encodings = [\n        "utf_8",\n        "utf_8_sig",\n        "utf_16",\n        "utf_16_be",\n        "utf_16_le",\n        "utf_32",\n        "utf_32_le",\n        "utf_32_be",\n        "utf_7",\n    ];\n\n    if multi_byte_encodings.contains(&name) {\n        return true;\n    }\n\n    match encoding_from_whatwg_label(name) {\n        Ok(encoding) => {\n            if let Some(decoder) = encoding.incremental_decoder() {\n                decoder.is_kind_of(MultibyteIncrementalDecoder::default())\n            } else {\n                false\n            }\n        }\n        Err(_) => false,\n    }\n}'
</previous response>
<error message>
Compiling charset-normalizer-rs v1.0.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/charset-normalizer/rust)
    Finished test [unoptimized + debuginfo] target(s) in 8.99s
     Running unittests src/lib.rs (target/debug/deps/charset_normalizer_rs-56a4852637467152)
     Running unittests src/normalizer.rs (target/debug/deps/normalizer-e7fe61ed14e0ec90)
     Running tests/normalizer.rs (target/debug/deps/normalizer-2d304b5c580aa69f)
   Doc-tests charset-normalizer-rs
</error message>
<python function>
def is_multi_byte_encoding(name: str) -> bool:
    """
    Verify is a specific encoding is a multi byte one based on it IANA name
    """
    return name in {
        "utf-8",
        "utf-16le",
        "utf-16be",
        "euc-jp",
        "euc-kr",
        "iso-2022-jp",
        "gbk",
        "gb18030",
        "hz",
        "big5",
        "shift_jis",
    }
</python function>
<rust function signature>
pub fn is_multi_byte_encoding(name: &str) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>

</rust function dependencies and data type declarations>
<rust function dependency libraries>
use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<reapir response>
pub fn is_multi_byte_encoding(name: &str) -> bool {
    let multi_byte_encodings = [
        "utf-8",
        "utf-16le",
        "utf-16be",
        "euc-jp",
        "euc-kr",
        "iso-2022-jp",
        "gbk",
        "gb18030",
        "hz",
        "big5",
        "shift_jis",
    ];

    multi_byte_encodings.contains(&name)
}</reapir response>
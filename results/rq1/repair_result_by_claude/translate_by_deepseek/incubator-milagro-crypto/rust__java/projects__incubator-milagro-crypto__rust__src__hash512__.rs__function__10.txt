<message>
you were asked to translate the given java function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, java function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.

<previous response>
b'pub fn init(&mut self) {\n    for i in 0..64 {\n        self.w[i] = 0;\n    }\n    self.length = [0, 0];\n    self.h = [\n        H0, H1, H2, H3, H4, H5, H6, H7\n    ];\n}'
</previous response>
<error message>
Compiling amcl v0.3.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/incubator-milagro-crypto/rust)
    Finished release [optimized] target(s) in 1m 17s
warning: the following packages contain code that will be rejected by a future version of Rust: criterion v0.3.3
note: to see what the problems were, use the option `--future-incompat-report`, or run `cargo report future-incompatibilities --id 1`
     Running unittests src/lib.rs (target/release/deps/amcl-ae384673429e0654)
   Doc-tests amcl
</error message>
<java function>
public void init()
	{ /* initialise */
		int i;
		for (i=0;i<64;i++) w[i]=0;
		length[0]=length[1]=0;
		h[0]=H0;
		h[1]=H1;
		h[2]=H2;
		h[3]=H3;
		h[4]=H4;
		h[5]=H5;
		h[6]=H6;
		h[7]=H7;
	}
</java function>
<rust function signature>
pub fn init(&mut self) 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct HASH512 {
    length: [u64; 2],
    h: [u64; 8],
    w: [u64; 80],
}

const HASH512_H0: u64 = 0x6a09e667f3bcc908;
const HASH512_H1: u64 = 0xbb67ae8584caa73b;
const HASH512_H2: u64 = 0x3c6ef372fe94f82b;
const HASH512_H3: u64 = 0xa54ff53a5f1d36f1;
const HASH512_H4: u64 = 0x510e527fade682d1;
const HASH512_H5: u64 = 0x9b05688c2b3e6c1f;
const HASH512_H6: u64 = 0x1f83d9abfb41bd6b;
const HASH512_H7: u64 = 0x5be0cd19137e2179;


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use super::*;

</rust function dependency libraries>

</message>
<reapir response>
pub fn init(&mut self) {
    for i in 0..80 {
        self.w[i] = 0;
    }
    self.length = [0, 0];
    self.h = [
        HASH512_H0,
        HASH512_H1,
        HASH512_H2,
        HASH512_H3,
        HASH512_H4,
        HASH512_H5,
        HASH512_H6,
        HASH512_H7
    ];
}</reapir response>
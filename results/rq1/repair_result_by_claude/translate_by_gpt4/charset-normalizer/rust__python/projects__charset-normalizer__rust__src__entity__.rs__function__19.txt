<message>
you were asked to translate the given python function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, python function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b'pub fn chaos_percents(&self) -> f32 {\n    (self.chaos() * 100.0).round() / 1000.0\n}'
</previous response>
<error message>
Compiling charset-normalizer-rs v1.0.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/charset-normalizer/rust)
    Finished test [unoptimized + debuginfo] target(s) in 2.84s
     Running unittests src/lib.rs (target/debug/deps/charset_normalizer_rs-56a4852637467152)
error: test failed, to rerun pass `--lib`
</error message>
<python function>
def percent_chaos(self) -> float:
        return round(self.chaos * 100, ndigits=3)
</python function>
<rust function signature>
pub fn chaos_percents(&self) -> f32 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn chaos(&self) -> f32 {
        self.mean_mess_ratio
    }

pub struct CharsetMatch {
    payload: Vec<u8>,
    encoding: String,

    mean_mess_ratio: f32,
    coherence_matches: CoherenceMatches,

    has_sig_or_bom: bool,

    submatch: Vec<CharsetMatch>,
    decoded_payload: Option<String>,
}


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use crate::cd::{encoding_languages, mb_encoding_languages};
use crate::consts::{IANA_SUPPORTED_ALIASES, TOO_BIG_SEQUENCE};
use crate::utils::{decode, iana_name, is_multi_byte_encoding, range_scan};
use clap::Parser;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use serde::Serialize;
use std::cmp::Ordering;
use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::hash::Hash;
use std::ops::Index;
use std::path::PathBuf;
use std::time::Duration;

</rust function dependency libraries>

</message>
<reapir response>
Here's the corrected Rust function based on the provided information:

pub fn chaos_percents(&self) -> f32 {
    (self.chaos() * 100.0).round() / 100.0
}</reapir response>
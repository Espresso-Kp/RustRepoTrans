<message>
you were asked to translate the given c function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, c function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b'pub async fn get_securejoin_qr(context: &Context, group: Option<ChatId>) -> Result<String> {\n    ensure_secret_key_exists(&context).await?;\n\n    let self_addr = context.get_config(Config::ConfiguredAddr).await?.ok_or_else(|| Error::new("Not configured, cannot generate QR code.".into()))?;\n    let self_name = context.get_config(Config::Displayname).await?.unwrap_or_default();\n\n    let fingerprint = get_self_fingerprint(&context).await.ok_or_else(|| Error::new("Failed to get self fingerprint.".into()))?;\n\n    let self_addr_urlencoded = utf8_percent_encode(&self_addr, NON_ALPHANUMERIC).to_string();\n    let self_name_urlencoded = utf8_percent_encode(&self_name, NON_ALPHANUMERIC).to_string();\n\n    context.sync_qr_code_tokens(group).await?;\n\n    let invitenumber = token::lookup(self, Namespace::InviteNumber, group).await?;\n    let auth = token::lookup(self, Namespace::Auth, group).await?;\n\n    let qr = match group {\n        Some(chat_id) => {\n            let chat = Chat::load_from_db(context, chat_id).await?;\n            if chat.is_empty() {\n                bail!("Cannot get QR-code for chat-id {:?}", chat_id);\n            }\n\n            let group_name = chat.get_name();\n            let group_name_urlencoded = utf8_percent_encode(&group_name, NON_ALPHANUMERIC).to_string();\n            format!("openpgp4fpr:{}?a={}&g={}&x={}&i={}&s={}", fingerprint.to_string(), self_addr_urlencoded, group_name_urlencoded, chat.grpid, invitenumber.unwrap(), auth.unwrap())\n        },\n        None => {\n            format!("openpgp4fpr:{}?a={}&n={}&i={}&s={}", fingerprint.to_string(), self_addr_urlencoded, self_name_urlencoded, invitenumber.unwrap(), auth.unwrap())\n        }\n    };\n\n    info!(context, "Generated QR code: {}", qr);\n\n    Ok(qr)\n}'
</previous response>
<error message>
Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error: format argument must be a string literal
   --> src/securejoin.rs:109:20
    |
109 |     info!(context, 0, "Generated QR code: {}", qr);
    |                    ^
    |
help: you might be missing a string literal to format with
    |
109 |     info!(context, "{} {} {}", 0, "Generated QR code: {}", qr);
    |                    +++++++++++

error[E0425]: cannot find function `lookup` in this scope
  --> src/securejoin.rs:66:20
   |
66 |     let mut auth = lookup(context, Namespace::Auth, group_chat_id).await.unwrap_or_default();
   |                    ^^^^^^ not found in this scope
   |
help: consider importing this function
   |
3  + use crate::token::lookup;
   |

error[E0603]: function import `create_id` is private
   --> src/securejoin.rs:69:36
    |
69  |         invitenumber = Some(token::create_id());
    |                                    ^^^^^^^^^ private function import
    |
note: the function import `create_id` is defined here...
   --> src/token.rs:12:20
    |
12  | use crate::tools::{create_id, time};
    |                    ^^^^^^^^^
note: ...and refers to the function `create_id` which is defined here
   --> src/tools.rs:265:1
    |
265 | pub(crate) fn create_id() -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider importing this function instead
    |
69  |         invitenumber = Some(crate::tools::create_id());
    |                             ~~~~~~~~~~~~~~~~~~~~~~~
help: import `create_id` through the re-export
    |
69  |         invitenumber = Some(tools::create_id());
    |                             ~~~~~~~~~~~~~~~~

error[E0603]: function import `create_id` is private
   --> src/securejoin.rs:74:28
    |
74  |         auth = Some(token::create_id());
    |                            ^^^^^^^^^ private function import
    |
note: the function import `create_id` is defined here...
   --> src/token.rs:12:20
    |
12  | use crate::tools::{create_id, time};
    |                    ^^^^^^^^^
note: ...and refers to the function `create_id` which is defined here
   --> src/tools.rs:265:1
    |
265 | pub(crate) fn create_id() -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider importing this function instead
    |
74  |         auth = Some(crate::tools::create_id());
    |                     ~~~~~~~~~~~~~~~~~~~~~~~
help: import `create_id` through the re-export
    |
74  |         auth = Some(tools::create_id());
    |                     ~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
  --> src/securejoin.rs:61:26
   |
61 |         Some(chat_id) => chat_id,
   |                          ^^^^^^^ expected `Option<ChatId>`, found `ChatId`
   |
   = note: expected enum `std::option::Option<ChatId>`
            found struct `ChatId`
help: try wrapping the expression in `Some`
   |
61 |         Some(chat_id) => Some(chat_id),
   |                          +++++       +

error[E0599]: no method named `is_empty` found for enum `std::option::Option` in the current scope
    --> src/securejoin.rs:79:18
     |
79   |     if self_addr.is_empty() {
     |                  ^^^^^^^^ method not found in `Option<String>`
     |
note: the method `is_empty` exists on the type `std::string::String`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/string.rs:1759:5
     |
1759 |     pub fn is_empty(&self) -> bool {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `std::string::String` value, panicking if the value is an `Option::None`
     |
79   |     if self_addr.expect("REASON").is_empty() {
     |                 +++++++++++++++++

error[E0308]: mismatched types
   --> src/securejoin.rs:84:69
    |
84  |     let fingerprint = get_self_fingerprint(context).await.unwrap_or(None); 
    |                                                           --------- ^^^^ expected `Fingerprint`, found `Option<_>`
    |                                                           |
    |                                                           arguments to this method are incorrect
    |
    = note: expected struct `key::Fingerprint`
                 found enum `std::option::Option<_>`
help: the return type of this call is `std::option::Option<_>` due to the type of the argument passed
   --> src/securejoin.rs:84:23
    |
84  |     let fingerprint = get_self_fingerprint(context).await.unwrap_or(None); 
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----^
    |                                                                     |
    |                                                                     this argument influences the return type of `unwrap_or`
note: method defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:951:12
    |
951 |     pub fn unwrap_or(self, default: T) -> T {
    |            ^^^^^^^^^

error[E0599]: no method named `is_none` found for struct `key::Fingerprint` in the current scope
   --> src/securejoin.rs:86:20
    |
86  |     if fingerprint.is_none() {
    |                    ^^^^^^^ method not found in `Fingerprint`
    |
   ::: src/key.rs:372:1
    |
372 | pub struct Fingerprint(Vec<u8>);
    | ---------------------- method `is_none` not found for this struct

error[E0308]: mismatched types
   --> src/securejoin.rs:90:52
    |
90  |     let self_addr_urlencoded = utf8_percent_encode(&self_addr, NON_ALPHANUMERIC).to_string();
    |                                ------------------- ^^^^^^^^^^ expected `&str`, found `&Option<String>`
    |                                |
    |                                arguments to this function are incorrect
    |
    = note: expected reference `&str`
               found reference `&std::option::Option<std::string::String>`
note: function defined here
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/percent-encoding-2.3.1/src/lib.rs:251:8
    |
251 | pub fn utf8_percent_encode<'a>(input: &'a str, ascii_set: &'static AsciiSet) -> PercentEncode<'a> {
    |        ^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/securejoin.rs:91:52
    |
91  |     let self_name_urlencoded = utf8_percent_encode(&self_name, NON_ALPHANUMERIC).to_string();
    |                                ------------------- ^^^^^^^^^^ expected `&str`, found `&Option<String>`
    |                                |
    |                                arguments to this function are incorrect
    |
    = note: expected reference `&str`
               found reference `&std::option::Option<std::string::String>`
note: function defined here
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/percent-encoding-2.3.1/src/lib.rs:251:8
    |
251 | pub fn utf8_percent_encode<'a>(input: &'a str, ascii_set: &'static AsciiSet) -> PercentEncode<'a> {
    |        ^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `is_empty` found for struct `Chat` in the current scope
    --> src/securejoin.rs:98:17
     |
98   |         if chat.is_empty() {
     |                 ^^^^^^^^ method not found in `Chat`
     |
    ::: src/chat.rs:1480:1
     |
1480 | pub struct Chat {
     | --------------- method `is_empty` not found for this struct
     |
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following traits define an item `is_empty`, perhaps you need to implement one of them:
             candidate #1: `ExactSizeIterator`
             candidate #2: `bitflags::traits::Flags`
             candidate #3: `SampleRange`
             candidate #4: `aead::Buffer`
             candidate #5: `nix::NixPath`
             candidate #6: `governor::state::keyed::ShrinkableKeyedStateStore`
             candidate #7: `toml_edit::table::TableLike`
             candidate #8: `gimli::Reader`
help: some of the expressions' fields have a method of the same name
     |
98   |         if chat.grpid.is_empty() {
     |                 ++++++
98   |         if chat.name.is_empty() {
     |                 +++++
98   |         if chat.param.is_empty() {
     |                 ++++++

error[E0599]: no method named `unwrap` found for struct `key::Fingerprint` in the current scope
   --> src/securejoin.rs:104:77
    |
104 | ...   qr = format!("OPENPGP4FPR:{}#a={}&g={}&x={}&i={}&s={}", fingerprint.unwrap().as_hex(), self_addr_urlencoded, group_name_urlencoded,...
    |                                                                           ^^^^^^ method not found in `Fingerprint`
    |
   ::: src/key.rs:372:1
    |
372 | pub struct Fingerprint(Vec<u8>);
    | ---------------------- method `unwrap` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `unwrap`, perhaps you need to implement one of them:
            candidate #1: `fallible_iterator::FallibleIterator`
            candidate #2: `OwnedRetriever`

error[E0599]: no method named `unwrap` found for struct `key::Fingerprint` in the current scope
   --> src/securejoin.rs:106:72
    |
106 | ...   qr = format!("OPENPGP4FPR:{}#a={}&n={}&i={}&s={}", fingerprint.unwrap().as_hex(), self_addr_urlencoded, self_name_urlencoded, invit...
    |                                                                      ^^^^^^ method not found in `Fingerprint`
    |
   ::: src/key.rs:372:1
    |
372 | pub struct Fingerprint(Vec<u8>);
    | ---------------------- method `unwrap` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `unwrap`, perhaps you need to implement one of them:
            candidate #1: `fallible_iterator::FallibleIterator`
            candidate #2: `OwnedRetriever`

Some errors have detailed explanations: E0308, E0425, E0599, E0603.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `deltachat` (lib) due to 13 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
  --> src/securejoin.rs:61:26
   |
61 |         Some(chat_id) => chat_id,
   |                          ^^^^^^^ expected `Option<ChatId>`, found `ChatId`
   |
   = note: expected enum `std::option::Option<chat::ChatId>`
            found struct `chat::ChatId`
help: try wrapping the expression in `Some`
   |
61 |         Some(chat_id) => Some(chat_id),
   |                          +++++       +

error[E0599]: no method named `is_empty` found for struct `chat::Chat` in the current scope
    --> src/securejoin.rs:98:17
     |
98   |         if chat.is_empty() {
     |                 ^^^^^^^^ method not found in `chat::Chat`
     |
    ::: src/chat.rs:1480:1
     |
1480 | pub struct Chat {
     | --------------- method `is_empty` not found for this struct
     |
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following traits define an item `is_empty`, perhaps you need to implement one of them:
             candidate #1: `ExactSizeIterator`
             candidate #2: `bitflags::traits::Flags`
             candidate #3: `SampleRange`
             candidate #4: `gimli::read::reader::Reader`
             candidate #5: `aead::Buffer`
             candidate #6: `nix::NixPath`
             candidate #7: `governor::state::keyed::ShrinkableKeyedStateStore`
             candidate #8: `toml_edit::table::TableLike`
help: some of the expressions' fields have a method of the same name
     |
98   |         if chat.grpid.is_empty() {
     |                 ++++++
98   |         if chat.name.is_empty() {
     |                 +++++
98   |         if chat.param.is_empty() {
     |                 ++++++

error: could not compile `deltachat` (lib test) due to 13 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101
</error message>
<c function>
char* dc_get_securejoin_qr(dc_context_t* context, uint32_t group_chat_id)
{
	/* =========================================================
	   ====             Alice - the inviter side            ====
	   ====   Step 1 in "Setup verified contact" protocol   ====
	   ========================================================= */

	char*      qr = NULL;
	char*      self_addr = NULL;
	char*      self_addr_urlencoded = NULL;
	char*      self_name = NULL;
	char*      self_name_urlencoded = NULL;
	char*      fingerprint = NULL;
	char*      invitenumber = NULL;
	char*      auth = NULL;
	dc_chat_t* chat = NULL;
	char*      group_name = NULL;
	char*      group_name_urlencoded= NULL;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC) {
		goto cleanup;
	}

	dc_ensure_secret_key_exists(context);

		// invitenumber will be used to allow starting the handshake, auth will be used to verify the fingerprint
		invitenumber = dc_token_lookup(context, DC_TOKEN_INVITENUMBER, group_chat_id);
		if (invitenumber==NULL) {
			invitenumber = dc_create_id();
			dc_token_save(context, DC_TOKEN_INVITENUMBER, group_chat_id, invitenumber);
		}

		auth = dc_token_lookup(context, DC_TOKEN_AUTH, group_chat_id);
		if (auth==NULL) {
			auth = dc_create_id();
			dc_token_save(context, DC_TOKEN_AUTH, group_chat_id, auth);
		}

		if ((self_addr = dc_sqlite3_get_config(context->sql, "configured_addr", NULL))==NULL) {
			dc_log_error(context, 0, "Not configured, cannot generate QR code.");
			goto cleanup;
		}

		self_name = dc_sqlite3_get_config(context->sql, "displayname", "");

	if ((fingerprint=get_self_fingerprint(context))==NULL) {
		goto cleanup;
	}

	self_addr_urlencoded = dc_urlencode(self_addr);
	self_name_urlencoded = dc_urlencode(self_name);

	if (group_chat_id)
	{
		// parameters used: a=g=x=i=s=
		chat = dc_get_chat(context, group_chat_id);
		if (chat==NULL) {
			dc_log_error(context, 0, "Cannot get QR-code for chat-id %i", group_chat_id);
			goto cleanup;
		}
		group_name = dc_chat_get_name(chat);
		group_name_urlencoded = dc_urlencode(group_name);
		qr = dc_mprintf(DC_OPENPGP4FPR_SCHEME "%s#a=%s&g=%s&x=%s&i=%s&s=%s", fingerprint, self_addr_urlencoded, group_name_urlencoded, chat->grpid, invitenumber, auth);
	}
	else
	{
		// parameters used: a=n=i=s=
		qr = dc_mprintf(DC_OPENPGP4FPR_SCHEME "%s#a=%s&n=%s&i=%s&s=%s", fingerprint, self_addr_urlencoded, self_name_urlencoded, invitenumber, auth);
	}

	dc_log_info(context, 0, "Generated QR code: %s", qr);

cleanup:
	free(self_addr_urlencoded);
	free(self_addr);
	free(self_name);
	free(self_name_urlencoded);
	free(fingerprint);
	free(invitenumber);
	free(auth);
	dc_chat_unref(chat);
	free(group_name);
	free(group_name_urlencoded);
	return qr? qr : dc_strdup(NULL);
}
</c function>
<rust function signature>
pub async fn get_securejoin_qr(context: &Context, group: Option<ChatId>) -> Result<String> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub async fn ensure_secret_key_exists(context: &Context) -> Result<()> {
    load_self_public_key(context).await?;
    Ok(())
}

pub async fn lookup(
    context: &Context,
    namespace: Namespace,
    chat: Option<ChatId>,
) -> Result<Option<String>> {
    let token = match chat {
        Some(chat_id) => {
            context
                .sql
                .query_get_value(
                    "SELECT token FROM tokens WHERE namespc=? AND foreign_id=? ORDER BY timestamp DESC LIMIT 1;",
                    (namespace, chat_id),
                )
                .await?
        }
        // foreign_id is declared as `INTEGER DEFAULT 0` in the schema.
        None => {
            context
                .sql
                .query_get_value(
                    "SELECT token FROM tokens WHERE namespc=? AND foreign_id=0 ORDER BY timestamp DESC LIMIT 1;",
                    (namespace,),
                )
                .await?
        }
    };
    Ok(token)
}

pub async fn lookup_or_new(
    context: &Context,
    namespace: Namespace,
    foreign_id: Option<ChatId>,
) -> Result<String> {
    if let Some(token) = lookup(context, namespace, foreign_id).await? {
        return Ok(token);
    }

    let token = create_id();
    save(context, namespace, foreign_id, &token).await?;
    Ok(token)
}

pub async fn get_config(&self, key: Config) -> Result<Option<String>> {
        let env_key = format!("DELTACHAT_{}", key.as_ref().to_uppercase());
        if let Ok(value) = env::var(env_key) {
            return Ok(Some(value));
        }

        let value = match key {
            Config::Selfavatar => {
                let rel_path = self.sql.get_raw_config(key.as_ref()).await?;
                rel_path.map(|p| {
                    get_abs_path(self, Path::new(&p))
                        .to_string_lossy()
                        .into_owned()
                })
            }
            Config::SysVersion => Some((*DC_VERSION_STR).clone()),
            Config::SysMsgsizeMaxRecommended => Some(format!("{RECOMMENDED_FILE_SIZE}")),
            Config::SysConfigKeys => Some(get_config_keys_string()),
            _ => self.sql.get_raw_config(key.as_ref()).await?,
        };

        if value.is_some() {
            return Ok(value);
        }

        // Default values
        match key {
            Config::ConfiguredInboxFolder => Ok(Some("INBOX".to_owned())),
            _ => Ok(key.get_str("default").map(|s| s.to_string())),
        }
    }

pub fn is_empty(&self) -> bool {
        self.inner.is_empty()
    }

pub(crate) async fn sync_qr_code_tokens(&self, chat_id: Option<ChatId>) -> Result<()> {
        if !self.get_config_bool(Config::SyncMsgs).await? {
            return Ok(());
        }

        if let (Some(invitenumber), Some(auth)) = (
            token::lookup(self, Namespace::InviteNumber, chat_id).await?,
            token::lookup(self, Namespace::Auth, chat_id).await?,
        ) {
            let grpid = if let Some(chat_id) = chat_id {
                let chat = Chat::load_from_db(self, chat_id).await?;
                if !chat.is_promoted() {
                    info!(
                        self,
                        "group '{}' not yet promoted, do not sync tokens yet.", chat.grpid
                    );
                    return Ok(());
                }
                Some(chat.grpid)
            } else {
                None
            };
            self.add_sync_item(SyncData::AddQrToken(QrTokenData {
                invitenumber,
                auth,
                grpid,
            }))
            .await?;
        }
        Ok(())
    }

pub async fn load_from_db(context: &Context, chat_id: ChatId) -> Result<Self> {
        let mut chat = context
            .sql
            .query_row(
                "SELECT c.type, c.name, c.grpid, c.param, c.archived,
                    c.blocked, c.locations_send_until, c.muted_until, c.protected
             FROM chats c
             WHERE c.id=?;",
                (chat_id,),
                |row| {
                    let c = Chat {
                        id: chat_id,
                        typ: row.get(0)?,
                        name: row.get::<_, String>(1)?,
                        grpid: row.get::<_, String>(2)?,
                        param: row.get::<_, String>(3)?.parse().unwrap_or_default(),
                        visibility: row.get(4)?,
                        blocked: row.get::<_, Option<_>>(5)?.unwrap_or_default(),
                        is_sending_locations: row.get(6)?,
                        mute_duration: row.get(7)?,
                        protected: row.get(8)?,
                    };
                    Ok(c)
                },
            )
            .await
            .context(format!("Failed loading chat {chat_id} from database"))?;

        if chat.id.is_archived_link() {
            chat.name = stock_str::archived_chats(context).await;
        } else {
            if chat.typ == Chattype::Single && chat.name.is_empty() {
                // chat.name is set to contact.display_name on changes,
                // however, if things went wrong somehow, we do this here explicitly.
                let mut chat_name = "Err [Name not found]".to_owned();
                match get_chat_contacts(context, chat.id).await {
                    Ok(contacts) => {
                        if let Some(contact_id) = contacts.first() {
                            if let Ok(contact) = Contact::get_by_id(context, *contact_id).await {
                                contact.get_display_name().clone_into(&mut chat_name);
                            }
                        }
                    }
                    Err(err) => {
                        error!(
                            context,
                            "Failed to load contacts for {}: {:#}.", chat.id, err
                        );
                    }
                }
                chat.name = chat_name;
            }
            if chat.param.exists(Param::Selftalk) {
                chat.name = stock_str::saved_messages(context).await;
            } else if chat.param.exists(Param::Devicetalk) {
                chat.name = stock_str::device_messages(context).await;
            }
        }

        Ok(chat)
    }
    
pub async fn get_primary_self_addr(&self) -> Result<String> {
        self.get_config(Config::ConfiguredAddr)
            .await?
            .context("No self addr configured")
    }

pub fn get_name(&self) -> &str {
        &self.name
    }

async fn get_self_fingerprint(context: &Context) -> Option<Fingerprint> {
    match load_self_public_key(context).await {
        Ok(key) => Some(key.fingerprint()),
        Err(_) => {
            warn!(context, "get_self_fingerprint(): failed to load key");
            None
        }
    }
}

pub enum Namespace {
    #[default]
    Unknown = 0,
    Auth = 110,
    InviteNumber = 100,
}

pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

pub struct Fingerprint(Vec<u8>);

pub enum Config {
    /// Email address, used in the `From:` field.
    Addr,

    /// IMAP server hostname.
    MailServer,

    /// IMAP server username.
    MailUser,

    /// IMAP server password.
    MailPw,

    /// IMAP server port.
    MailPort,

    /// IMAP server security (e.g. TLS, STARTTLS).
    MailSecurity,

    /// How to check IMAP server TLS certificates.
    ImapCertificateChecks,

    /// SMTP server hostname.
    SendServer,

    /// SMTP server username.
    SendUser,

    /// SMTP server password.
    SendPw,

    /// SMTP server port.
    SendPort,

    /// SMTP server security (e.g. TLS, STARTTLS).
    SendSecurity,

    /// How to check SMTP server TLS certificates.
    SmtpCertificateChecks,

    /// Whether to use OAuth 2.
    ///
    /// Historically contained other bitflags, which are now deprecated.
    /// Should not be extended in the future, create new config keys instead.
    ServerFlags,

    /// True if SOCKS5 is enabled.
    ///
    /// Can be used to disable SOCKS5 without erasing SOCKS5 configuration.
    Socks5Enabled,

    /// SOCKS5 proxy server hostname or address.
    Socks5Host,

    /// SOCKS5 proxy server port.
    Socks5Port,

    /// SOCKS5 proxy server username.
    Socks5User,

    /// SOCKS5 proxy server password.
    Socks5Password,

    /// Own name to use in the `From:` field when sending messages.
    Displayname,

    /// Own status to display, sent in message footer.
    Selfstatus,

    /// Own avatar filename.
    Selfavatar,

    /// Send BCC copy to self.
    ///
    /// Should be enabled for multidevice setups.
    #[strum(props(default = "1"))]
    BccSelf,

    /// True if encryption is preferred according to Autocrypt standard.
    #[strum(props(default = "1"))]
    E2eeEnabled,

    /// True if Message Delivery Notifications (read receipts) should
    /// be sent and requested.
    #[strum(props(default = "1"))]
    MdnsEnabled,

    /// True if "Sent" folder should be watched for changes.
    #[strum(props(default = "0"))]
    SentboxWatch,

    /// True if chat messages should be moved to a separate folder.
    #[strum(props(default = "1"))]
    MvboxMove,

    /// Watch for new messages in the "Mvbox" (aka DeltaChat folder) only.
    ///
    /// This will not entirely disable other folders, e.g. the spam folder will also still
    /// be watched for new messages.
    #[strum(props(default = "0"))]
    OnlyFetchMvbox,

    /// Whether to show classic emails or only chat messages.
    #[strum(props(default = "2"))] // also change ShowEmails.default() on changes
    ShowEmails,

    /// Quality of the media files to send.
    #[strum(props(default = "0"))] // also change MediaQuality.default() on changes
    MediaQuality,

    /// If set to "1", on the first time `start_io()` is called after configuring,
    /// the newest existing messages are fetched.
    /// Existing recipients are added to the contact database regardless of this setting.
    #[strum(props(default = "0"))]
    FetchExistingMsgs,

    /// If set to "1", then existing messages are considered to be already fetched.
    /// This flag is reset after successful configuration.
    #[strum(props(default = "1"))]
    FetchedExistingMsgs,

    /// Type of the OpenPGP key to generate.
    #[strum(props(default = "0"))]
    KeyGenType,

    /// Timer in seconds after which the message is deleted from the
    /// server.
    ///
    /// Equals to 0 by default, which means the message is never
    /// deleted.
    ///
    /// Value 1 is treated as "delete at once": messages are deleted
    /// immediately, without moving to DeltaChat folder.
    #[strum(props(default = "0"))]
    DeleteServerAfter,

    /// Timer in seconds after which the message is deleted from the
    /// device.
    ///
    /// Equals to 0 by default, which means the message is never
    /// deleted.
    #[strum(props(default = "0"))]
    DeleteDeviceAfter,

    /// Move messages to the Trash folder instead of marking them "\Deleted". Overrides
    /// `ProviderOptions::delete_to_trash`.
    DeleteToTrash,

    /// Save raw MIME messages with headers in the database if true.
    SaveMimeHeaders,

    /// The primary email address. Also see `SecondaryAddrs`.
    ConfiguredAddr,

    /// Configured IMAP server hostname.
    ConfiguredMailServer,

    /// Configured IMAP server username.
    ConfiguredMailUser,

    /// Configured IMAP server password.
    ConfiguredMailPw,

    /// Configured IMAP server port.
    ConfiguredMailPort,

    /// Configured IMAP server security (e.g. TLS, STARTTLS).
    ConfiguredMailSecurity,

    /// How to check IMAP server TLS certificates.
    ConfiguredImapCertificateChecks,

    /// Configured SMTP server hostname.
    ConfiguredSendServer,

    /// Configured SMTP server username.
    ConfiguredSendUser,

    /// Configured SMTP server password.
    ConfiguredSendPw,

    /// Configured SMTP server port.
    ConfiguredSendPort,

    /// How to check SMTP server TLS certificates.
    ConfiguredSmtpCertificateChecks,

    /// Whether OAuth 2 is used with configured provider.
    ConfiguredServerFlags,

    /// Configured SMTP server security (e.g. TLS, STARTTLS).
    ConfiguredSendSecurity,

    /// Configured folder for incoming messages.
    ConfiguredInboxFolder,

    /// Configured folder for chat messages.
    ConfiguredMvboxFolder,

    /// Configured "Sent" folder.
    ConfiguredSentboxFolder,

    /// Configured "Trash" folder.
    ConfiguredTrashFolder,

    /// Unix timestamp of the last successful configuration.
    ConfiguredTimestamp,

    /// ID of the configured provider from the provider database.
    ConfiguredProvider,

    /// True if account is configured.
    Configured,

    /// True if account is a chatmail account.
    IsChatmail,

    /// All secondary self addresses separated by spaces
    /// (`addr1@example.org addr2@example.org addr3@example.org`)
    SecondaryAddrs,

    /// Read-only core version string.
    #[strum(serialize = "sys.version")]
    SysVersion,

    /// Maximal recommended attachment size in bytes.
    #[strum(serialize = "sys.msgsize_max_recommended")]
    SysMsgsizeMaxRecommended,

    /// Space separated list of all config keys available.
    #[strum(serialize = "sys.config_keys")]
    SysConfigKeys,

    /// True if it is a bot account.
    Bot,

    /// True when to skip initial start messages in groups.
    #[strum(props(default = "0"))]
    SkipStartMessages,

    /// Whether we send a warning if the password is wrong (set to false when we send a warning
    /// because we do not want to send a second warning)
    #[strum(props(default = "0"))]
    NotifyAboutWrongPw,

    /// If a warning about exceeding quota was shown recently,
    /// this is the percentage of quota at the time the warning was given.
    /// Unset, when quota falls below minimal warning threshold again.
    QuotaExceeding,

    /// address to webrtc instance to use for videochats
    WebrtcInstance,

    /// Timestamp of the last time housekeeping was run
    LastHousekeeping,

    /// Timestamp of the last `CantDecryptOutgoingMsgs` notification.
    LastCantDecryptOutgoingMsgs,

    /// To how many seconds to debounce scan_all_folders. Used mainly in tests, to disable debouncing completely.
    #[strum(props(default = "60"))]
    ScanAllFoldersDebounceSecs,

    /// Whether to avoid using IMAP IDLE even if the server supports it.
    ///
    /// This is a developer option for testing "fake idle".
    #[strum(props(default = "0"))]
    DisableIdle,

    /// Defines the max. size (in bytes) of messages downloaded automatically.
    /// 0 = no limit.
    #[strum(props(default = "0"))]
    DownloadLimit,

    /// Enable sending and executing (applying) sync messages. Sending requires `BccSelf` to be set.
    #[strum(props(default = "1"))]
    SyncMsgs,

    /// Space-separated list of all the authserv-ids which we believe
    /// may be the one of our email server.
    ///
    /// See `crate::authres::update_authservid_candidates`.
    AuthservIdCandidates,

    /// Make all outgoing messages with Autocrypt header "multipart/signed".
    SignUnencrypted,

    /// Let the core save all events to the database.
    /// This value is used internally to remember the MsgId of the logging xdc
    #[strum(props(default = "0"))]
    DebugLogging,

    /// Last message processed by the bot.
    LastMsgId,

    /// How often to gossip Autocrypt keys in chats with multiple recipients, in seconds. 2 days by
    /// default.
    ///
    /// This is not supposed to be changed by UIs and only used for testing.
    #[strum(props(default = "172800"))]
    GossipPeriod,

    /// Feature flag for verified 1:1 chats; the UI should set it
    /// to 1 if it supports verified 1:1 chats.
    /// Regardless of this setting, `chat.is_protected()` returns true while the key is verified,
    /// and when the key changes, an info message is posted into the chat.
    /// 0=Nothing else happens when the key changes.
    /// 1=After the key changed, `can_send()` returns false and `is_protection_broken()` returns true
    /// until `chat_id.accept()` is called.
    #[strum(props(default = "0"))]
    VerifiedOneOnOneChats,

    /// Row ID of the key in the `keypairs` table
    /// used for signatures, encryption to self and included in `Autocrypt` header.
    KeyId,

    /// This key is sent to the self_reporting bot so that the bot can recognize the user
    /// without storing the email address
    SelfReportingId,

    /// MsgId of webxdc map integration.
    WebxdcIntegration,

    /// Iroh secret key.
    IrohSecretKey,
}


</rust function dependencies and data type declarations>
<rust function dependency libraries>
use anyhow::{bail, Context as _, Error, Result};
use percent_encoding::{utf8_percent_encode, AsciiSet, NON_ALPHANUMERIC};
use crate::aheader::EncryptPreference;
use crate::chat::{self, Chat, ChatId, ChatIdBlocked, ProtectionStatus};
use crate::chatlist_events;
use crate::config::Config;
use crate::constants::Blocked;
use crate::contact::{Contact, ContactId, Origin};
use crate::context::Context;
use crate::e2ee::ensure_secret_key_exists;
use crate::events::EventType;
use crate::headerdef::HeaderDef;
use crate::key::{load_self_public_key, DcKey, Fingerprint};
use crate::message::{Message, Viewtype};
use crate::mimeparser::{MimeMessage, SystemMessage};
use crate::param::Param;
use crate::peerstate::Peerstate;
use crate::qr::check_qr;
use crate::securejoin::bob::JoinerProgress;
use crate::stock_str;
use crate::sync::Sync::*;
use crate::token;
use crate::tools::time;
use bobstate::BobState;
use qrinvite::QrInvite;
use crate::token::Namespace;
use deltachat_contact_tools::{ContactAddress, EmailAddress};
use super::*;
use crate::chat::{remove_contact_from_chat, CantSendReason};
use crate::chatlist::Chatlist;
use crate::constants::{self, Chattype};
use crate::imex::{imex, ImexMode};
use crate::receive_imf::receive_imf;
use crate::stock_str::{self, chat_protection_enabled};
use crate::test_utils::get_chat_msg;
use crate::test_utils::{TestContext, TestContextManager};
use crate::tools::SystemTime;
use std::collections::HashSet;
use std::time::Duration;

</rust function dependency libraries>

</message>
<reapir response>
Based on the error messages and the provided C function, here's the corrected Rust function:

```rust
pub async fn get_securejoin_qr(context: &Context, group: Option<ChatId>) -> Result<String> {
    ensure_secret_key_exists(context).await?;

    let self_addr = context.get_config(Config::ConfiguredAddr).await?
        .ok_or_else(|| Error::msg("Not configured, cannot generate QR code."))?;
    let self_name = context.get_config(Config::Displayname).await?.unwrap_or_default();

    let fingerprint = get_self_fingerprint(context).await
        .ok_or_else(|| Error::msg("Failed to get self fingerprint."))?;

    let self_addr_urlencoded = utf8_percent_encode(&self_addr, NON_ALPHANUMERIC).to_string();
    let self_name_urlencoded = utf8_percent_encode(&self_name, NON_ALPHANUMERIC).to_string();

    let invitenumber = token::lookup_or_new(context, Namespace::InviteNumber, group).await?;
    let auth = token::lookup_or_new(context, Namespace::Auth, group).await?;

    let qr = match group {
        Some(chat_id) => {
            let chat = Chat::load_from_db(context, chat_id).await?;
            if chat.get_name().is_empty() {
                bail!("Cannot get QR-code for chat-id {:?}", chat_id);
            }

            let group_name = chat.get_name();
            let group_name_urlencoded = utf8_percent_encode(group_name, NON_ALPHANUMERIC).to_string();
            format!("OPENPGP4FPR:{}#a={}&g={}&x={}&i={}&s={}",
                    fingerprint.as_hex(),
                    self_addr_urlencoded,
                    group_name_urlencoded,
                    chat.grpid,
                    invitenumber,
                    auth)
        },
        None => {
            format!("OPENPGP4FPR:{}#a={}&n={}&i={}&s={}",
                    fingerprint.as_hex(),
                    self_addr_urlencoded,
                    self_name_urlencoded,
                    invitenumber,
                    auth)
        }
    };

    info!(context, "Generated QR code: {}", qr);

    Ok(qr)
}
```

This corrected version addresses the following issues:

1. Uses `lookup_or_new` instead of separate `lookup` and creation logic.
2. Correctly handles the `Option<ChatId>` for the `group` parameter.
3. Uses `get_name()` instead of `is_empty()` for the `Chat` struct.
4. Removes the unnecessary `unwrap()` calls on `fingerprint`.
5. Uses `as_hex()` method for the fingerprint instead of `unwrap()`.
6. Corrects the format of the QR code string to match the C function.
7. Uses `bail!` macro for error handling in the group chat case.

This version should compile without errors and provide functionality similar to the original C function.</reapir response>
<message>
you were asked to translate the given c function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, c function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b"pub async fn is_verified(&self, context: &Context) -> Result<bool> {\n    let mut contact_verified:u8 = DC_NOT_VERIFIED;\n    let mut peerstate_to_delete:Option<Box<Peerstate>> = None;\n\n    if self.id == DC_CONTACT_ID_SELF {\n        contact_verified = DC_BIDIRECT_VERIFIED;\n        // we're always sort of secured-verified as we could verify the key on this device any time with the key on this device\n    } else {\n        let peerstate = context.get_peerstate_for_contact(self).await?;\n\n        match peerstate {\n            Some(peerstate) => {\n                // verify the key\n                if peerstate.has_verified_key().await? {\n                    contact_verified = DC_BIDIRECT_VERIFIED;\n                }\n            },\n            None => {\n                peerstate_to_delete = Some(Box::new(Peerstate::new(context)));\n                if !peerstate_to_delete.unwrap().load_by_addr(context.sql, self.addr).await? {\n                    Ok(false)\n                }\n            },\n        }\n    }\n    \n    Ok(contact_verified != DC_NOT_VERIFIED)\n}"
</previous response>
<error message>
Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error: expected one of `!` or `::`, found `s`
 --> src/contact.rs:6:1
  |
5 | u
  |  - expected one of `!` or `::`
6 | s
  | ^ unexpected token

error[E0432]: unresolved import `crate::contact::ContactId`
 --> src/events/chatlist_events.rs:1:27
  |
1 | use crate::{chat::ChatId, contact::ContactId, context::Context, EventType};
  |                           ^^^^^^^^^^^^^^^^^^ no `ContactId` in `contact`

error[E0432]: unresolved import `crate::contact::ContactId`
 --> src/events/payload.rs:8:5
  |
8 | use crate::contact::ContactId;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^ no `ContactId` in `contact`

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`, `crate::contact::Origin`
  --> src/chat.rs:27:28
   |
27 | use crate::contact::{self, Contact, ContactId, Origin};
   |                            ^^^^^^^  ^^^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                            |        |
   |                            |        no `ContactId` in `contact`
   |                            no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = help: consider importing this enum instead:
           url::Origin

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`
  --> src/chatlist.rs:11:22
   |
11 | use crate::contact::{Contact, ContactId};
   |                      ^^^^^^^  ^^^^^^^^^ no `ContactId` in `contact`
   |                      |
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`
  --> src/context.rs:24:22
   |
24 | use crate::contact::{Contact, ContactId};
   |                      ^^^^^^^  ^^^^^^^^^ no `ContactId` in `contact`
   |                      |
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact

error[E0432]: unresolved import `crate::contact::ContactId`
  --> src/ephemeral.rs:79:5
   |
79 | use crate::contact::ContactId;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ no `ContactId` in `contact`

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`, `crate::contact::Modifier`, `crate::contact::Origin`
  --> src/imap.rs:31:22
   |
31 | use crate::contact::{Contact, ContactId, Modifier, Origin};
   |                      ^^^^^^^  ^^^^^^^^^  ^^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                      |        |          |
   |                      |        |          no `Modifier` in `contact`
   |                      |        no `ContactId` in `contact`
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = help: consider importing this enum instead:
           url::Origin

error[E0432]: unresolved import `crate::contact::ContactId`
  --> src/imex.rs:19:5
   |
19 | use crate::contact::ContactId;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ no `ContactId` in `contact`

error[E0432]: unresolved import `crate::contact::ContactId`
  --> src/location.rs:22:5
   |
22 | use crate::contact::ContactId;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ no `ContactId` in `contact`

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`
  --> src/message.rs:19:22
   |
19 | use crate::contact::{Contact, ContactId};
   |                      ^^^^^^^  ^^^^^^^^^ no `ContactId` in `contact`
   |                      |
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`, `crate::contact::Origin`
  --> src/mimefactory.rs:16:22
   |
16 | use crate::contact::{Contact, ContactId, Origin};
   |                      ^^^^^^^  ^^^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                      |        |
   |                      |        no `ContactId` in `contact`
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = help: consider importing this enum instead:
           url::Origin

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`, `crate::contact::Origin`
  --> src/mimeparser.rs:20:22
   |
20 | use crate::contact::{Contact, ContactId, Origin};
   |                      ^^^^^^^  ^^^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                      |        |
   |                      |        no `ContactId` in `contact`
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = help: consider importing this enum instead:
           url::Origin

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::Origin`
  --> src/peerstate.rs:14:22
   |
14 | use crate::contact::{Contact, Origin};
   |                      ^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                      |
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = help: consider importing this enum instead:
           url::Origin

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`, `crate::contact::Origin`
  --> src/qr.rs:17:22
   |
17 | use crate::contact::{Contact, ContactId, Origin};
   |                      ^^^^^^^  ^^^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                      |        |
   |                      |        no `ContactId` in `contact`
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = help: consider importing this enum instead:
           url::Origin

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`
  --> src/qr_code_generator.rs:11:22
   |
11 | use crate::contact::{Contact, ContactId};
   |                      ^^^^^^^  ^^^^^^^^^ no `ContactId` in `contact`
   |                      |
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact

error[E0432]: unresolved imports `crate::contact::ContactId`, `crate::contact::RecentlySeenLoop`
  --> src/scheduler.rs:17:22
   |
17 | use crate::contact::{ContactId, RecentlySeenLoop};
   |                      ^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `RecentlySeenLoop` in `contact`
   |                      |
   |                      no `ContactId` in `contact`

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`, `crate::contact::Origin`
  --> src/securejoin.rs:11:22
   |
11 | use crate::contact::{Contact, ContactId, Origin};
   |                      ^^^^^^^  ^^^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                      |        |
   |                      |        no `ContactId` in `contact`
   |                      no `Contact` in `contact`
   |
   = help: consider importing one of these items instead:
           crate::securejoin::QrInvite::Contact
           crate::stock_str::StockMessage::Contact
   = help: consider importing this enum instead:
           url::Origin

error[E0432]: unresolved import `crate::contact::Contact`
  --> src/securejoin/bob.rs:13:5
   |
13 | use crate::contact::Contact;
   |     ^^^^^^^^^^^^^^^^^^^^^^^ no `Contact` in `contact`
   |
help: consider importing one of these items instead
   |
13 | use crate::securejoin::Contact;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~
13 | use crate::securejoin::QrInvite::Contact;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
13 | use crate::stock_str::StockMessage::Contact;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0432]: unresolved imports `crate::contact::ContactId`, `crate::contact::Origin`
  --> src/securejoin/bobstate.rs:17:22
   |
17 | use crate::contact::{ContactId, Origin};
   |                      ^^^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                      |
   |                      no `ContactId` in `contact`
   |
   = help: consider importing this unresolved item through its public re-export instead:
           crate::securejoin::ContactId
   = help: consider importing one of these items instead:
           crate::securejoin::Origin
           url::Origin

error[E0432]: unresolved import `crate::contact::ContactId`
 --> src/securejoin/qrinvite.rs:9:5
  |
9 | use crate::contact::ContactId;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^ no `ContactId` in `contact`
  |
help: consider importing this unresolved item through its public re-export instead
  |
9 | use crate::securejoin::ContactId;
  |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`
  --> src/smtp.rs:15:22
   |
15 | use crate::contact::{Contact, ContactId};
   |                      ^^^^^^^  ^^^^^^^^^ no `ContactId` in `contact`
   |                      |
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`, `crate::contact::Origin`
  --> src/stock_str.rs:16:22
   |
16 | use crate::contact::{Contact, ContactId, Origin};
   |                      ^^^^^^^  ^^^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                      |        |
   |                      |        no `ContactId` in `contact`
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = help: consider importing this enum instead:
           url::Origin

error[E0432]: unresolved import `crate::contact::ContactId`
  --> src/sync.rs:10:5
   |
10 | use crate::contact::ContactId;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ no `ContactId` in `contact`

error[E0432]: unresolved import `crate::contact::ContactId`
 --> src/update_helper.rs:6:5
  |
6 | use crate::contact::ContactId;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^ no `ContactId` in `contact`

error[E0432]: unresolved import `crate::contact::ContactId`
 --> src/webxdc/integration.rs:3:5
  |
3 | use crate::contact::ContactId;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^ no `ContactId` in `contact`

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`
  --> src/webxdc/maps_integration.rs:43:22
   |
43 | use crate::contact::{Contact, ContactId};
   |                      ^^^^^^^  ^^^^^^^^^ no `ContactId` in `contact`
   |                      |
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact

error[E0432]: unresolved import `crate::contact::ContactId`
  --> src/webxdc.rs:35:5
   |
35 | use crate::contact::ContactId;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ no `ContactId` in `contact`

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`
 --> src/summary.rs:9:22
  |
9 | use crate::contact::{Contact, ContactId};
  |                      ^^^^^^^  ^^^^^^^^^ no `ContactId` in `contact`
  |                      |
  |                      no `Contact` in `contact`
  |
  = help: consider importing this variant instead:
          crate::stock_str::StockMessage::Contact

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`, `crate::contact::Origin`
  --> src/receive_imf.rs:20:22
   |
20 | use crate::contact::{Contact, ContactId, Origin};
   |                      ^^^^^^^  ^^^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                      |        |
   |                      |        no `ContactId` in `contact`
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = help: consider importing this enum instead:
           url::Origin

error[E0432]: unresolved import `crate::contact::ContactId`
  --> src/reaction.rs:25:5
   |
25 | use crate::contact::ContactId;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ no `ContactId` in `contact`

error[E0425]: cannot find function `set_blocked` in module `contact`
   --> src/chat.rs:411:34
    |
411 |                         contact::set_blocked(context, Nosync, contact_id, true).await?;
    |                                  ^^^^^^^^^^^ not found in `contact`

error[E0425]: cannot find function `set_blocked` in module `contact`
    --> src/chat.rs:4591:41
     |
4591 |                         return contact::set_blocked(self, Nosync, contact_id, true).await
     |                                         ^^^^^^^^^^^ not found in `contact`

error[E0425]: cannot find function `set_blocked` in module `contact`
    --> src/chat.rs:4594:41
     |
4594 |                         return contact::set_blocked(self, Nosync, contact_id, false).await
     |                                         ^^^^^^^^^^^ not found in `contact`

error[E0425]: cannot find function `update_last_seen` in module `contact`
   --> src/receive_imf.rs:437:18
    |
437 |         contact::update_last_seen(context, from_id, mime_parser.timestamp_sent).await?;
    |                  ^^^^^^^^^^^^^^^^ not found in `contact`

error[E0425]: cannot find function `set_profile_image` in module `contact`
   --> src/receive_imf.rs:535:40
    |
535 |             if let Err(err) = contact::set_profile_image(
    |                                        ^^^^^^^^^^^^^^^^^ not found in `contact`

error[E0425]: cannot find function `set_status` in module `contact`
   --> src/receive_imf.rs:560:40
    |
560 |             if let Err(err) = contact::set_status(
    |                                        ^^^^^^^^^^ not found in `contact`

error[E0432]: unresolved import `crate::contact::Contact`
  --> src/events/chatlist_events.rs:73:9
   |
73 |         contact::Contact,
   |         ^^^^^^^^^^^^^^^^ no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`
  --> src/chatlist.rs:11:22
   |
11 | use crate::contact::{Contact, ContactId};
   |                      ^^^^^^^  ^^^^^^^^^ no `ContactId` in `contact`
   |                      |
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = note: unresolved item `crate::chat::tests::ContactId` exists but is inaccessible

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`
  --> src/context.rs:24:22
   |
24 | use crate::contact::{Contact, ContactId};
   |                      ^^^^^^^  ^^^^^^^^^ no `ContactId` in `contact`
   |                      |
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = note: unresolved item `crate::chatlist::tests::ContactId` exists but is inaccessible

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`, `crate::contact::Modifier`, `crate::contact::Origin`
  --> src/imap.rs:31:22
   |
31 | use crate::contact::{Contact, ContactId, Modifier, Origin};
   |                      ^^^^^^^  ^^^^^^^^^  ^^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                      |        |          |
   |                      |        |          no `Modifier` in `contact`
   |                      |        no `ContactId` in `contact`
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = note: unresolved item `crate::ephemeral::tests::ContactId` exists but is inaccessible
   = help: consider importing this enum instead:
           url::Origin

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`
  --> src/message.rs:19:22
   |
19 | use crate::contact::{Contact, ContactId};
   |                      ^^^^^^^  ^^^^^^^^^ no `ContactId` in `contact`
   |                      |
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = note: unresolved item `crate::location::tests::ContactId` exists but is inaccessible

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`, `crate::contact::Origin`
  --> src/mimefactory.rs:16:22
   |
16 | use crate::contact::{Contact, ContactId, Origin};
   |                      ^^^^^^^  ^^^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                      |        |
   |                      |        no `ContactId` in `contact`
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = note: unresolved item `crate::message::tests::ContactId` exists but is inaccessible
   = help: consider importing this enum instead:
           url::Origin

error[E0432]: unresolved import `crate::contact::Origin`
    --> src/mimefactory.rs:1630:9
     |
1630 |     use crate::contact::Origin;
     |         ^^^^^^^^^^^^^^^^^^^^^^ no `Origin` in `contact`
     |
help: consider importing one of these items instead
     |
1630 |     use crate::mimefactory::Origin;
     |         ~~~~~~~~~~~~~~~~~~~~~~~~~~
1630 |     use url::Origin;
     |         ~~~~~~~~~~~

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`, `crate::contact::Origin`
  --> src/mimeparser.rs:20:22
   |
20 | use crate::contact::{Contact, ContactId, Origin};
   |                      ^^^^^^^  ^^^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                      |        |
   |                      |        no `ContactId` in `contact`
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = note: unresolved item `crate::mimefactory::tests::ContactId` exists but is inaccessible
   = help: consider importing this enum instead:
           url::Origin

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`, `crate::contact::Origin`
  --> src/qr.rs:17:22
   |
17 | use crate::contact::{Contact, ContactId, Origin};
   |                      ^^^^^^^  ^^^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                      |        |
   |                      |        no `ContactId` in `contact`
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = note: unresolved item `crate::mimeparser::tests::ContactId` exists but is inaccessible
   = help: consider importing this enum instead:
           url::Origin

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`
  --> src/qr_code_generator.rs:11:22
   |
11 | use crate::contact::{Contact, ContactId};
   |                      ^^^^^^^  ^^^^^^^^^ no `ContactId` in `contact`
   |                      |
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = note: unresolved item `crate::qr::tests::ContactId` exists but is inaccessible

error[E0432]: unresolved imports `crate::contact::ContactId`, `crate::contact::RecentlySeenLoop`
  --> src/scheduler.rs:17:22
   |
17 | use crate::contact::{ContactId, RecentlySeenLoop};
   |                      ^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `RecentlySeenLoop` in `contact`
   |                      |
   |                      no `ContactId` in `contact`
   |
   = note: unresolved item `crate::qr_code_generator::tests::ContactId` exists but is inaccessible

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`, `crate::contact::Origin`
  --> src/securejoin.rs:11:22
   |
11 | use crate::contact::{Contact, ContactId, Origin};
   |                      ^^^^^^^  ^^^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                      |        |
   |                      |        no `ContactId` in `contact`
   |                      no `Contact` in `contact`
   |
   = help: consider importing one of these items instead:
           crate::securejoin::QrInvite::Contact
           crate::stock_str::StockMessage::Contact
   = note: unresolved item `crate::qr_code_generator::tests::ContactId` exists but is inaccessible
   = help: consider importing this enum instead:
           url::Origin

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`
  --> src/smtp.rs:15:22
   |
15 | use crate::contact::{Contact, ContactId};
   |                      ^^^^^^^  ^^^^^^^^^ no `ContactId` in `contact`
   |                      |
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = note: unresolved item `crate::securejoin::tests::ContactId` exists but is inaccessible

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`, `crate::contact::Origin`
  --> src/stock_str.rs:16:22
   |
16 | use crate::contact::{Contact, ContactId, Origin};
   |                      ^^^^^^^  ^^^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                      |        |
   |                      |        no `ContactId` in `contact`
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = note: unresolved item `crate::securejoin::tests::ContactId` exists but is inaccessible
   = help: consider importing this enum instead:
           url::Origin

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::Origin`
   --> src/sync.rs:324:26
    |
324 |     use crate::contact::{Contact, Origin};
    |                          ^^^^^^^  ^^^^^^ no `Origin` in `contact`
    |                          |
    |                          no `Contact` in `contact`
    |
    = help: consider importing this variant instead:
            crate::stock_str::StockMessage::Contact
    = help: consider importing this enum instead:
            url::Origin

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`
  --> src/webxdc/maps_integration.rs:43:22
   |
43 | use crate::contact::{Contact, ContactId};
   |                      ^^^^^^^  ^^^^^^^^^ no `ContactId` in `contact`
   |                      |
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = note: unresolved item `crate::update_helper::tests::ContactId` exists but is inaccessible

error[E0432]: unresolved import `crate::contact::Contact`
   --> src/webxdc/maps_integration.rs:172:9
    |
172 |     use crate::contact::Contact;
    |         ^^^^^^^^^^^^^^^^^^^^^^^ no `Contact` in `contact`
    |
help: consider importing one of these items instead
    |
172 |     use crate::stock_str::StockMessage::Contact;
    |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
172 |     use crate::webxdc::maps_integration::Contact;
    |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0432]: unresolved import `crate::contact::Contact`
   --> src/webxdc.rs:875:9
    |
875 |     use crate::contact::Contact;
    |         ^^^^^^^^^^^^^^^^^^^^^^^ no `Contact` in `contact`
    |
help: consider importing this variant instead
    |
875 |     use crate::stock_str::StockMessage::Contact;
    |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0432]: unresolved import `crate::contact::ContactId`
   --> src/html.rs:268:9
    |
268 |     use crate::contact::ContactId;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ no `ContactId` in `contact`

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`
 --> src/summary.rs:9:22
  |
9 | use crate::contact::{Contact, ContactId};
  |                      ^^^^^^^  ^^^^^^^^^ no `ContactId` in `contact`
  |                      |
  |                      no `Contact` in `contact`
  |
  = help: consider importing this variant instead:
          crate::stock_str::StockMessage::Contact
  = note: unresolved item `crate::webxdc::tests::ContactId` exists but is inaccessible

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`, `crate::contact::Origin`
  --> src/receive_imf.rs:20:22
   |
20 | use crate::contact::{Contact, ContactId, Origin};
   |                      ^^^^^^^  ^^^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                      |        |
   |                      |        no `ContactId` in `contact`
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = note: unresolved item `crate::summary::tests::ContactId` exists but is inaccessible
   = help: consider importing this enum instead:
           url::Origin

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::Origin`
   --> src/reaction.rs:391:26
    |
391 |     use crate::contact::{Contact, Origin};
    |                          ^^^^^^^  ^^^^^^ no `Origin` in `contact`
    |                          |
    |                          no `Contact` in `contact`
    |
    = help: consider importing this variant instead:
            crate::stock_str::StockMessage::Contact
    = help: consider importing this enum instead:
            url::Origin

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`, `crate::contact::Modifier`, `crate::contact::Origin`
  --> src/test_utils.rs:33:22
   |
33 | use crate::contact::{Contact, ContactId, Modifier, Origin};
   |                      ^^^^^^^  ^^^^^^^^^  ^^^^^^^^  ^^^^^^ no `Origin` in `contact`
   |                      |        |          |
   |                      |        |          no `Modifier` in `contact`
   |                      |        no `ContactId` in `contact`
   |                      no `Contact` in `contact`
   |
   = help: consider importing this variant instead:
           crate::stock_str::StockMessage::Contact
   = note: unresolved item `crate::reaction::tests::ContactId` exists but is inaccessible
   = note: unresolved item `crate::imap::tests::Modifier` exists but is inaccessible
   = help: consider importing this enum instead:
           url::Origin

error[E0432]: unresolved import `crate::contact::Contact`
 --> src/tests/aeap.rs:8:5
  |
8 | use crate::contact::Contact;
  |     ^^^^^^^^^^^^^^^^^^^^^^^ no `Contact` in `contact`
  |
help: consider importing this variant instead
  |
8 | use crate::stock_str::StockMessage::Contact;
  |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0432]: unresolved import `crate::contact::ContactId`
 --> src/tests/aeap.rs:9:5
  |
9 | use crate::contact::ContactId;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^ no `ContactId` in `contact`

error[E0432]: unresolved imports `crate::contact::Contact`, `crate::contact::ContactId`, `crate::contact::Origin`
 --> src/tests/verified_chats.rs:8:22
  |
8 | use crate::contact::{Contact, ContactId, Origin};
  |                      ^^^^^^^  ^^^^^^^^^  ^^^^^^ no `Origin` in `contact`
  |                      |        |
  |                      |        no `ContactId` in `contact`
  |                      no `Contact` in `contact`
  |
  = help: consider importing this variant instead:
          crate::stock_str::StockMessage::Contact
  = note: unresolved item `crate::test_utils::tests::ContactId` exists but is inaccessible
  = help: consider importing this enum instead:
          url::Origin

error[E0433]: failed to resolve: could not find `Origin` in `contact`
   --> src/tests/aeap.rs:267:80
    |
267 |     let new_contact = Contact::lookup_id_by_addr(bob, new_alice_addr, contact::Origin::Unknown)
    |                                                                                ^^^^^^ could not find `Origin` in `contact`
    |
help: consider importing this enum
    |
3   + use url::Origin;
    |
help: if you import `Origin`, refer to it directly
    |
267 -     let new_contact = Contact::lookup_id_by_addr(bob, new_alice_addr, contact::Origin::Unknown)
267 +     let new_contact = Contact::lookup_id_by_addr(bob, new_alice_addr, Origin::Unknown)
    |

error[E0433]: failed to resolve: could not find `Origin` in `contact`
   --> src/tests/aeap.rs:305:80
    |
305 |     let old_contact = Contact::lookup_id_by_addr(bob, old_alice_addr, contact::Origin::Unknown)
    |                                                                                ^^^^^^ could not find `Origin` in `contact`
    |
help: consider importing this enum
    |
3   + use url::Origin;
    |
help: if you import `Origin`, refer to it directly
    |
305 -     let old_contact = Contact::lookup_id_by_addr(bob, old_alice_addr, contact::Origin::Unknown)
305 +     let old_contact = Contact::lookup_id_by_addr(bob, old_alice_addr, Origin::Unknown)
    |

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/chat.rs:569:13
    |
569 |         let text = context.stock_protection_msg(protect, contact_id).await;
    |             ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/chat.rs:569:20
    |
569 |         let text = context.stock_protection_msg(protect, contact_id).await;
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/chat.rs:569:70
    |
569 |         let text = context.stock_protection_msg(protect, contact_id).await;
    |                                                                      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
    |
12  | pub enum Poll<T> {
    |               ^ required by this bound in `Poll::Ready`
...
16  |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
    |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/mimefactory.rs:186:44
    |
186 | ...                   let (authname, addr, id) = row?;
    |                                      ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/mimefactory.rs:186:56
    |
186 | ...                   let (authname, addr, id) = row?;
    |                                                  ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/mimefactory.rs:185:36
    |
185 |                         for row in rows {
    |                                    ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/mimefactory.rs:179:48
    |
179 |                         let authname: String = row.get(0)?;
    |                                                ^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/mimefactory.rs:180:44
    |
180 |                         let addr: String = row.get(1)?;
    |                                            ^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/mimefactory.rs:181:45
    |
181 |                         let id: ContactId = row.get(2)?;
    |                                             ^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: only the last element of a tuple may have a dynamically sized type

error[E0308]: mismatched types
   --> src/mimefactory.rs:188:60
    |
188 | ...                   recipients.push((authname, addr));
    |                                                  ^^^^- help: try using a conversion method: `.to_string()`
    |                                                  |
    |                                                  expected `String`, found `str`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/mimefactory.rs:170:13
    |
170 | /             context
171 | |                 .sql
172 | |                 .query_map(
173 | |                     "SELECT c.authname, c.addr, c.id \
...   |
193 | |                     },
194 | |                 )
    | |_________________^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/mimefactory.rs:195:18
    |
195 |                 .await?;
    |                  ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1663:9
     |
1663 |         curr_rfc724_mid,
     |         ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1646:8
     |
1646 |     if msgs.iter().any(
     |        ^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1604:16
     |
1604 |       let msgs = context
     |  ________________^
1605 | |         .sql
1606 | |         .query_map(
1607 | |             &format!(
...    |
1643 | |         )
1644 | |         .await?;
     | |______________^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1604:16
     |
1604 |       let msgs = context
     |  ________________^
1605 | |         .sql
1606 | |         .query_map(
1607 | |             &format!(
...    |
1642 | |             |rows| rows.collect::<Result<Vec<_>, _>>().map_err(Into::into),
1643 | |         )
     | |_________^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1642:20
     |
1642 |             |rows| rows.collect::<Result<Vec<_>, _>>().map_err(Into::into),
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1666:10
     |
1666 |     ) in msgs
     |          ^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1623:33
     |
1623 |                 let id: MsgId = row.get("id")?;
     |                                 ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1624:39
     |
1624 |                 let chat_id: ChatId = row.get("chat_id")?;
     |                                       ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1625:43
     |
1625 |                 let state: MessageState = row.get("state")?;
     |                                           ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1626:37
     |
1626 |                 let param: Params = row.get::<_, String>("param")?.parse().unwrap_or_default();
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1627:42
     |
1627 |                 let from_id: ContactId = row.get("from_id")?;
     |                                          ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1628:42
     |
1628 |                 let rfc724_mid: String = row.get("rfc724_mid")?;
     |                                          ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1629:48
     |
1629 |                 let blocked: Option<Blocked> = row.get("blocked")?;
     |                                                ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1630:55
     |
1630 |                 let ephemeral_timer: EphemeralTimer = row.get("ephemeral_timer")?;
     |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1693:29
     |
1693 | ...                   (id, curr_from_id, curr_rfc724_mid),
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: within `(MsgId, _, str)`, the trait `Sized` is not implemented for `str`, which is required by `(MsgId, _, str): Sized`
     = note: required because it appears within the type `(MsgId, _, str)`
     = note: tuples must have a statically known size to be initialized

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/qr_code_generator.rs:81:14
     |
81   |         Some(path) => {
     |              ^^^^ doesn't have a size known at compile-time
     |
     = help: within `Path`, the trait `Sized` is not implemented for `[u8]`, which is required by `Path: Sized`
note: required because it appears within the type `Path`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:1992:12
     |
1992 | pub struct Path {
     |            ^^^^
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/qr_code_generator.rs:85:9
     |
85   |         None => None,
     |         ^^^^ doesn't have a size known at compile-time
     |
     = help: within `Path`, the trait `Sized` is not implemented for `[u8]`, which is required by `Path: Sized`
note: required because it appears within the type `Path`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:1992:12
     |
1992 | pub struct Path {
     |            ^^^^
note: required by a bound in `std::prelude::v1::None`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
     |
570  | pub enum Option<T> {
     |                 ^ required by this bound in `std::prelude::v1::None`
...
574  |     None,
     |     ---- required by a bound in this unit variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:621:24
    |
621 |             .replace3(&by_contact.get_stock_name_n_addr(context).await)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:621:66
    |
621 |             .replace3(&by_contact.get_stock_name_n_addr(context).await)
    |                                                                  ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
    |
12  | pub enum Poll<T> {
    |               ^ required by this bound in `Poll::Ready`
...
16  |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
    |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:631:24
    |
631 |             .replace1(&by_contact.get_stock_name_n_addr(context).await)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:631:66
    |
631 |             .replace1(&by_contact.get_stock_name_n_addr(context).await)
    |                                                                  ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
    |
12  | pub enum Poll<T> {
    |               ^ required by this bound in `Poll::Ready`
...
16  |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
    |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:683:24
    |
683 |             .replace2(&by_contact.get_stock_name_n_addr(context).await)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:683:66
    |
683 |             .replace2(&by_contact.get_stock_name_n_addr(context).await)
    |                                                                  ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
    |
12  | pub enum Poll<T> {
    |               ^ required by this bound in `Poll::Ready`
...
16  |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
    |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:730:24
    |
730 |             .replace2(&by_contact.get_stock_name_n_addr(context).await)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:730:66
    |
730 |             .replace2(&by_contact.get_stock_name_n_addr(context).await)
    |                                                                  ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
    |
12  | pub enum Poll<T> {
    |               ^ required by this bound in `Poll::Ready`
...
16  |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
    |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:746:24
    |
746 |             .replace1(&by_contact.get_stock_name_n_addr(context).await)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:746:66
    |
746 |             .replace1(&by_contact.get_stock_name_n_addr(context).await)
    |                                                                  ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
    |
12  | pub enum Poll<T> {
    |               ^ required by this bound in `Poll::Ready`
...
16  |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
    |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:765:24
    |
765 |             .replace1(&by_contact.get_stock_name(context).await)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:765:59
    |
765 |             .replace1(&by_contact.get_stock_name(context).await)
    |                                                           ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
    |
12  | pub enum Poll<T> {
    |               ^ required by this bound in `Poll::Ready`
...
16  |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
    |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:825:24
    |
825 |             .replace1(&by_contact.get_stock_name_n_addr(context).await)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:825:66
    |
825 |             .replace1(&by_contact.get_stock_name_n_addr(context).await)
    |                                                                  ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
    |
12  | pub enum Poll<T> {
    |               ^ required by this bound in `Poll::Ready`
...
16  |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
    |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:853:20
    |
853 |         .replace1(&contact_id.get_stock_name(context).await)
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:853:55
    |
853 |         .replace1(&contact_id.get_stock_name(context).await)
    |                                                       ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
    |
12  | pub enum Poll<T> {
    |               ^ required by this bound in `Poll::Ready`
...
16  |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
    |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:957:24
    |
957 |             .replace1(&contact.get_stock_name_n_addr(context).await)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/stock_str.rs:957:63
    |
957 |             .replace1(&contact.get_stock_name_n_addr(context).await)
    |                                                               ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
    |
12  | pub enum Poll<T> {
    |               ^ required by this bound in `Poll::Ready`
...
16  |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
    |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1026:24
     |
1026 |             .replace1(&by_contact.get_stock_name_n_addr(context).await)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1026:66
     |
1026 |             .replace1(&by_contact.get_stock_name_n_addr(context).await)
     |                                                                  ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
     |
12   | pub enum Poll<T> {
     |               ^ required by this bound in `Poll::Ready`
...
16   |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
     |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1044:24
     |
1044 |             .replace2(&by_contact.get_stock_name_n_addr(context).await)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1044:66
     |
1044 |             .replace2(&by_contact.get_stock_name_n_addr(context).await)
     |                                                                  ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
     |
12   | pub enum Poll<T> {
     |               ^ required by this bound in `Poll::Ready`
...
16   |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
     |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1055:24
     |
1055 |             .replace1(&by_contact.get_stock_name_n_addr(context).await)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1055:66
     |
1055 |             .replace1(&by_contact.get_stock_name_n_addr(context).await)
     |                                                                  ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
     |
12   | pub enum Poll<T> {
     |               ^ required by this bound in `Poll::Ready`
...
16   |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
     |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1066:24
     |
1066 |             .replace1(&by_contact.get_stock_name_n_addr(context).await)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1066:66
     |
1066 |             .replace1(&by_contact.get_stock_name_n_addr(context).await)
     |                                                                  ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
     |
12   | pub enum Poll<T> {
     |               ^ required by this bound in `Poll::Ready`
...
16   |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
     |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1077:24
     |
1077 |             .replace1(&by_contact.get_stock_name_n_addr(context).await)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1077:66
     |
1077 |             .replace1(&by_contact.get_stock_name_n_addr(context).await)
     |                                                                  ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
     |
12   | pub enum Poll<T> {
     |               ^ required by this bound in `Poll::Ready`
...
16   |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
     |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1088:24
     |
1088 |             .replace1(&by_contact.get_stock_name_n_addr(context).await)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1088:66
     |
1088 |             .replace1(&by_contact.get_stock_name_n_addr(context).await)
     |                                                                  ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
     |
12   | pub enum Poll<T> {
     |               ^ required by this bound in `Poll::Ready`
...
16   |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
     |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1143:20
     |
1143 |         .replace1(&contact_id.get_stock_name(context).await)
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1143:55
     |
1143 |         .replace1(&contact_id.get_stock_name(context).await)
     |                                                       ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
     |
12   | pub enum Poll<T> {
     |               ^ required by this bound in `Poll::Ready`
...
16   |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
     |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1175:24
     |
1175 |             .replace2(&by_contact.get_stock_name_n_addr(context).await)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1175:66
     |
1175 |             .replace2(&by_contact.get_stock_name_n_addr(context).await)
     |                                                                  ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
     |
12   | pub enum Poll<T> {
     |               ^ required by this bound in `Poll::Ready`
...
16   |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
     |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1193:24
     |
1193 |             .replace2(&by_contact.get_stock_name_n_addr(context).await)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1193:66
     |
1193 |             .replace2(&by_contact.get_stock_name_n_addr(context).await)
     |                                                                  ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
     |
12   | pub enum Poll<T> {
     |               ^ required by this bound in `Poll::Ready`
...
16   |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
     |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1211:24
     |
1211 |             .replace2(&by_contact.get_stock_name_n_addr(context).await)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1211:66
     |
1211 |             .replace2(&by_contact.get_stock_name_n_addr(context).await)
     |                                                                  ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
     |
12   | pub enum Poll<T> {
     |               ^ required by this bound in `Poll::Ready`
...
16   |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
     |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1229:24
     |
1229 |             .replace2(&by_contact.get_stock_name_n_addr(context).await)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/stock_str.rs:1229:66
     |
1229 |             .replace2(&by_contact.get_stock_name_n_addr(context).await)
     |                                                                  ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
     |
12   | pub enum Poll<T> {
     |               ^ required by this bound in `Poll::Ready`
...
16   |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
     |     ----- required by a bound in this variant

error[E0282]: type annotations needed
   --> src/webxdc/maps_integration.rs:118:57
    |
118 |                 hash_map::Entry::Occupied(e) => e.get().clone(),
    |                                                         ^^^^^ cannot infer type for type parameter `V`

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/summary.rs:69:57
   |
69 |         if let Some((reaction_msg, reaction_contact_id, reaction)) = chat
   |                                                         ^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
   = note: all local variables must have a statically known size
   = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/summary.rs:76:17
   |
76 |             let summary = reaction_msg.get_summary_text_without_prefix(context).await;
   |                 ^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
   = note: all local variables must have a statically known size
   = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/summary.rs:76:27
   |
76 |             let summary = reaction_msg.get_summary_text_without_prefix(context).await;
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
   = note: all local variables must have a statically known size
   = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
  --> src/summary.rs:76:81
   |
76 |             let summary = reaction_msg.get_summary_text_without_prefix(context).await;
   |                                                                                 ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::task::Poll::Ready`
  --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:12:15
   |
12 | pub enum Poll<T> {
   |               ^ required by this bound in `Poll::Ready`
...
16 |     Ready(#[stable(feature = "futures_api", since = "1.36.0")] T),
   |     ----- required by a bound in this variant

Some errors have detailed explanations: E0277, E0282, E0308, E0425, E0432.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `deltachat` (lib) due to 111 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/message.rs:1693:29
     |
1693 | ...                   (id, curr_from_id, curr_rfc724_mid),
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: within `(message::MsgId, _, str)`, the trait `Sized` is not implemented for `str`, which is required by `(message::MsgId, _, str): Sized`
     = note: required because it appears within the type `(message::MsgId, _, str)`
     = note: tuples must have a statically known size to be initialized

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/qr_code_generator.rs:81:14
     |
81   |         Some(path) => {
     |              ^^^^ doesn't have a size known at compile-time
     |
     = help: within `std::path::Path`, the trait `Sized` is not implemented for `[u8]`, which is required by `std::path::Path: Sized`
note: required because it appears within the type `std::path::Path`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:1992:12
     |
1992 | pub struct Path {
     |            ^^^^
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
    --> src/qr_code_generator.rs:85:9
     |
85   |         None => None,
     |         ^^^^ doesn't have a size known at compile-time
     |
     = help: within `std::path::Path`, the trait `Sized` is not implemented for `[u8]`, which is required by `std::path::Path: Sized`
note: required because it appears within the type `std::path::Path`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:1992:12
     |
1992 | pub struct Path {
     |            ^^^^
note: required by a bound in `std::prelude::v1::None`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
     |
570  | pub enum Option<T> {
     |                 ^ required by this bound in `std::prelude::v1::None`
...
574  |     None,
     |     ---- required by a bound in this unit variant

Some errors have detailed explanations: E0277, E0282, E0308, E0425, E0432, E0433.
error: could not compile `deltachat` (lib test) due to 124 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101
</error message>
<c function>
* Same as dc_contact_is_verified() but allows speeding up things
 * by adding the peerstate belonging to the contact.
 * If you do not have the peerstate available, it is loaded automatically.
 *
 * @private @memberof dc_context_t
 */
int dc_contact_is_verified_ex(dc_contact_t* contact, const dc_apeerstate_t* peerstate)
{
	int              contact_verified = DC_NOT_VERIFIED;
	dc_apeerstate_t* peerstate_to_delete = NULL;

	if (contact==NULL || contact->magic!=DC_CONTACT_MAGIC) {
		goto cleanup;
	}

	if (contact->id==DC_CONTACT_ID_SELF) {
		contact_verified = DC_BIDIRECT_VERIFIED;
		goto cleanup; // we're always sort of secured-verified as we could verify the key on this device any time with the key on this device
	}

	if (peerstate==NULL) {
		peerstate_to_delete = dc_apeerstate_new(contact->context);
		if (!dc_apeerstate_load_by_addr(peerstate_to_delete, contact->context->sql, contact->addr)) {
			goto cleanup;
		}
		peerstate = peerstate_to_delete;
	}

	contact_verified = peerstate->verified_key? DC_BIDIRECT_VERIFIED : 0;

cleanup:
	dc_apeerstate_unref(peerstate_to_delete);
	return contact_verified;
}
</c function>
<rust function signature>
pub async fn is_verified(&self, context: &Context) -> Result<bool> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub(crate) async fn is_backward_verified(&self, context: &Context) -> Result<bool> {
        let Some(backward_verified_key_id) = self.backward_verified_key_id else {
            return Ok(false);
        };

        let self_key_id = context.get_config_i64(Config::KeyId).await?;

        let backward_verified = backward_verified_key_id == self_key_id;
        Ok(backward_verified)
    }

pub(crate) fn is_using_verified_key(&self) -> bool {
        let verified = self.peek_key_fingerprint(true);

        verified.is_some() && verified == self.peek_key_fingerprint(false)
    }

pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

pub async fn from_addr(context: &Context, addr: &str) -> Result<Option<Peerstate>> {
        if context.is_self_addr(addr).await? {
            return Ok(None);
        }
        let query = "SELECT addr, last_seen, last_seen_autocrypt, prefer_encrypted, public_key, \
                     gossip_timestamp, gossip_key, public_key_fingerprint, gossip_key_fingerprint, \
                     verified_key, verified_key_fingerprint, \
                     verifier, \
                     secondary_verified_key, secondary_verified_key_fingerprint, \
                     secondary_verifier, \
                     backward_verified_key_id \
                     FROM acpeerstates \
                     WHERE addr=? COLLATE NOCASE LIMIT 1;";
        Self::from_stmt(context, query, (addr,)).await
    }
    
pub struct Contact {
    /// The contact ID.
    pub id: ContactId,

    /// Contact name. It is recommended to use `Contact::get_name`,
    /// `Contact::get_display_name` or `Contact::get_name_n_addr` to access this field.
    /// May be empty, initially set to `authname`.
    name: String,

    /// Name authorized by the contact himself. Only this name may be spread to others,
    /// e.g. in To:-lists. May be empty. It is recommended to use `Contact::get_authname`,
    /// to access this field.
    authname: String,

    /// E-Mail-Address of the contact. It is recommended to use `Contact::get_addr` to access this field.
    addr: String,

    /// Blocked state. Use contact_is_blocked to access this field.
    pub blocked: bool,

    /// Time when the contact was seen last time, Unix time in seconds.
    last_seen: i64,

    /// The origin/source of the contact.
    pub origin: Origin,

    /// Parameters as Param::ProfileImage
    pub param: Params,

    /// Last seen message signature for this contact, to be displayed in the profile.
    status: String,

    /// If the contact is a bot.
    is_bot: bool,
}

pub struct ContactId(u32);

impl ContactId {
    /// Undefined contact. Used as a placeholder for trashed messages.
    pub const UNDEFINED: ContactId = ContactId::new(0);

    /// The owner of the account.
    ///
    /// The email-address is set by `set_config` using "addr".
    pub const SELF: ContactId = ContactId::new(1);

    /// ID of the contact for info messages.
    pub const INFO: ContactId = ContactId::new(2);

    /// ID of the contact for device messages.
    pub const DEVICE: ContactId = ContactId::new(5);
    pub(crate) const LAST_SPECIAL: ContactId = ContactId::new(9);

    /// Address to go with [`ContactId::DEVICE`].
    ///
    /// This is used by APIs which need to return an email address for this contact.
    pub const DEVICE_ADDR: &'static str = "device@localhost";
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>
use std::cmp::{min, Reverse};
use std::collections::BinaryHeap;
use std::fmt;
use std::path::{Path, PathBuf};
use std::time::UNIX_EPOCH;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use base64::Engine as _;
use deltachat_contact_tools::may_be_valid_addr;
use deltachat_contact_tools::{
    self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
    ContactAddress, VcardContact,
};
use deltachat_derive::{FromSql, ToSql};
use rusqlite::OptionalExtension;
use serde::{Deserialize, Serialize};
use tokio::task;
use tokio::time::{timeout, Duration};
use crate::aheader::{Aheader, EncryptPreference};
use crate::blob::BlobObject;
use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{load_self_public_key, DcKey, SignedPublicKey};
use crate::log::LogExt;
use crate::login_param::LoginParam;
use crate::message::MessageState;
use crate::mimeparser::AvatarAction;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::sql::{self, params_iter};
use crate::sync::{self, Sync::*};
use crate::tools::{
    duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
};
use crate::{chat, chatlist_events, stock_str};
use deltachat_contact_tools::{may_be_valid_addr, normalize_name};
use super::*;
use crate::chat::{get_chat_contacts, send_text_msg, Chat};
use crate::chatlist::Chatlist;
use crate::receive_imf::receive_imf;
use crate::test_utils::{self, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<reapir response>
Based on the provided C function and Rust function signature, here's the corrected Rust implementation:

```rust
pub async fn is_verified(&self, context: &Context) -> Result<bool> {
    let mut contact_verified = DC_NOT_VERIFIED;

    if self.id == ContactId::SELF {
        contact_verified = DC_BIDIRECT_VERIFIED;
        // we're always sort of secured-verified as we could verify the key on this device any time with the key on this device
        return Ok(contact_verified != DC_NOT_VERIFIED);
    }

    let peerstate = match Peerstate::from_addr(context, &self.addr).await? {
        Some(peerstate) => peerstate,
        None => return Ok(false),
    };

    contact_verified = if peerstate.is_using_verified_key() {
        DC_BIDIRECT_VERIFIED
    } else {
        DC_NOT_VERIFIED
    };

    Ok(contact_verified != DC_NOT_VERIFIED)
}
```

This implementation follows the logic of the C function while using Rust idioms and the provided dependencies. Here are the key changes:

1. We use `ContactId::SELF` instead of `DC_CONTACT_ID_SELF`.
2. We use `Peerstate::from_addr` to load the peerstate instead of creating and loading it manually.
3. We use `peerstate.is_using_verified_key()` to check if the key is verified instead of checking `verified_key` directly.
4. We return a `Result<bool>` as specified in the function signature, using `Ok(contact_verified != DC_NOT_VERIFIED)` to convert the verification status to a boolean.

Note that this implementation assumes that `DC_NOT_VERIFIED` and `DC_BIDIRECT_VERIFIED` are defined constants in your Rust code. If they are not, you'll need to define them or use appropriate values.</reapir response>
<message>
you were asked to translate the given java function to rust and execute your response and get some error message.
Fix the bug in your previous response according to error message, java function, rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).
Only response the function results.
<previous response>
b'pub fn set_properties(mut self, props: HashMap<String, String>) -> Result<Self> {\n    if props.is_empty() {\n        return Err(Error::new(\n            ErrorKind::DataInvalid,\n            "Invalid properties map: null".to_string(),\n        ));\n    } \n    if props.contains_key(&"".to_string()) {\n        return Err(Error::new(\n            ErrorKind::DataInvalid,\n            "Invalid property: null".to_string(),\n        ));\n    }\n    for value in props.values() {\n        if value.is_empty() {\n            return Err(Error::new(\n                ErrorKind::DataInvalid,\n                format!("Invalid value for properties {:?}: null", props),\n            ));\n        }\n    }\n    for (key, value) in props {\n        self.properties.insert(key, value);\n    }\n    Ok(self)\n}'
</previous response>
<error message>
Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0599]: no method named `is_none` found for reference `&std::string::String` in the current scope
   --> crates/iceberg/src/transaction.rs:102:36
    |
102 |     if props.iter().any(|(k, v)| k.is_none() || v.is_none()) {
    |                                    ^^^^^^^ method not found in `&String`

error[E0599]: no method named `is_none` found for reference `&std::string::String` in the current scope
   --> crates/iceberg/src/transaction.rs:102:51
    |
102 |     if props.iter().any(|(k, v)| k.is_none() || v.is_none()) {
    |                                                   ^^^^^^^ method not found in `&String`

For more information about this error, try `rustc --explain E0599`.
error: could not compile `iceberg` (lib) due to 2 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 2 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0599]: no method named `is_none` found for reference `&std::string::String` in the current scope
   --> crates/iceberg/src/transaction.rs:102:36
    |
102 |     if props.iter().any(|(k, v)| k.is_none() || v.is_none()) {
    |                                    ^^^^^^^ method not found in `&String`

error[E0599]: no method named `is_none` found for reference `&std::string::String` in the current scope
   --> crates/iceberg/src/transaction.rs:102:51
    |
102 |     if props.iter().any(|(k, v)| k.is_none() || v.is_none()) {
    |                                                   ^^^^^^^ method not found in `&String`

For more information about this error, try `rustc --explain E0599`.
error: could not compile `iceberg` (lib) due to 2 previous errors
</error message>
<java function>
public Builder setProperties(Map<String, String> props) {
      Preconditions.checkNotNull(props, "Invalid properties map: null");
      Preconditions.checkArgument(!props.containsKey(null), "Invalid property: null");
      Preconditions.checkArgument(
          !props.containsValue(null),
          "Invalid value for properties %s: null",
          Maps.filterValues(props, Objects::isNull).keySet());
      properties.putAll(props);
      return this;
    }
</java function>
<rust function signature>
pub fn set_properties(mut self, props: HashMap<String, String>) -> Result<Self> 
</rust function signature>
<rust function dependencies, and data type declarations>
fn append_updates(&mut self, updates: Vec<TableUpdate>) -> Result<()> {
        for update in &updates {
            for up in &self.updates {
                if discriminant(up) == discriminant(update) {
                    return Err(Error::new(
                        ErrorKind::DataInvalid,
                        format!(
                            "Cannot apply update with same type at same time: {:?}",
                            update
                        ),
                    ));
                }
            }
        }
        self.updates.extend(updates);
        Ok(())
    }

pub struct Transaction<'a> {
    table: &'a Table,
    updates: Vec<TableUpdate>,
    requirements: Vec<TableRequirement>,
}

pub enum TableUpdate {
    /// Upgrade table's format version
    #[serde(rename_all = "kebab-case")]
    UpgradeFormatVersion {
        /// Target format upgrade to.
        format_version: FormatVersion,
    },
    /// Assign a new UUID to the table
    #[serde(rename_all = "kebab-case")]
    AssignUuid {
        /// The new UUID to assign.
        uuid: Uuid,
    },
    /// Add a new schema to the table
    #[serde(rename_all = "kebab-case")]
    AddSchema {
        /// The schema to add.
        schema: Schema,
        /// The last column id of the table.
        last_column_id: Option<i32>,
    },
    /// Set table's current schema
    #[serde(rename_all = "kebab-case")]
    SetCurrentSchema {
        /// Schema ID to set as current, or -1 to set last added schema
        schema_id: i32,
    },
    /// Add a new partition spec to the table
    AddSpec {
        /// The partition spec to add.
        spec: UnboundPartitionSpec,
    },
    /// Set table's default spec
    #[serde(rename_all = "kebab-case")]
    SetDefaultSpec {
        /// Partition spec ID to set as the default, or -1 to set last added spec
        spec_id: i32,
    },
    /// Add sort order to table.
    #[serde(rename_all = "kebab-case")]
    AddSortOrder {
        /// Sort order to add.
        sort_order: SortOrder,
    },
    /// Set table's default sort order
    #[serde(rename_all = "kebab-case")]
    SetDefaultSortOrder {
        /// Sort order ID to set as the default, or -1 to set last added sort order
        sort_order_id: i64,
    },
    /// Add snapshot to table.
    #[serde(rename_all = "kebab-case")]
    AddSnapshot {
        /// Snapshot to add.
        snapshot: Snapshot,
    },
    /// Set table's snapshot ref.
    #[serde(rename_all = "kebab-case")]
    SetSnapshotRef {
        /// Name of snapshot reference to set.
        ref_name: String,
        /// Snapshot reference to set.
        #[serde(flatten)]
        reference: SnapshotReference,
    },
    /// Remove table's snapshots
    #[serde(rename_all = "kebab-case")]
    RemoveSnapshots {
        /// Snapshot ids to remove.
        snapshot_ids: Vec<i64>,
    },
    /// Remove snapshot reference
    #[serde(rename_all = "kebab-case")]
    RemoveSnapshotRef {
        /// Name of snapshot reference to remove.
        ref_name: String,
    },
    /// Update table's location
    SetLocation {
        /// New location for table.
        location: String,
    },
    /// Update table's properties
    SetProperties {
        /// Properties to update for table.
        updates: HashMap<String, String>,
    },
    /// Remove table's properties
    RemoveProperties {
        /// Properties to remove
        removals: Vec<String>,
    },
}



</rust function dependencies and data type declarations>
<rust function dependency libraries>
use crate::error::Result;
use crate::spec::{FormatVersion, NullOrder, SortDirection, SortField, SortOrder, Transform};
use crate::table::Table;
use crate::TableUpdate::UpgradeFormatVersion;
use crate::{Catalog, Error, ErrorKind, TableCommit, TableRequirement, TableUpdate};
use std::cmp::Ordering;
use std::collections::HashMap;
use std::mem::discriminant;
use crate::io::FileIO;
use crate::spec::{FormatVersion, TableMetadata};
use crate::table::Table;
use crate::transaction::Transaction;
use crate::{TableIdent, TableRequirement, TableUpdate};
use std::collections::HashMap;
use std::fs::File;
use std::io::BufReader;

</rust function dependency libraries>

</message>
<reapir response>
Based on the error message and the provided Java function, I'll modify the Rust function to fix the issues. Here's the corrected version:

```rust
pub fn set_properties(mut self, props: HashMap<String, String>) -> Result<Self> {
    if props.is_empty() {
        return Err(Error::new(
            ErrorKind::DataInvalid,
            "Invalid properties map: null".to_string(),
        ));
    }
    if props.keys().any(|k| k.is_empty()) {
        return Err(Error::new(
            ErrorKind::DataInvalid,
            "Invalid property: null".to_string(),
        ));
    }
    if props.values().any(|v| v.is_empty()) {
        return Err(Error::new(
            ErrorKind::DataInvalid,
            format!("Invalid value for properties {:?}: null", props.keys().filter(|k| props[*k].is_empty()).collect::<Vec<_>>()),
        ));
    }
    self.properties.extend(props);
    Ok(self)
}
```

This version addresses the following issues:

1. Replaced `is_none()` checks with `is_empty()` for String values.
2. Used `any()` method to check for empty keys and values.
3. Simplified the logic to match the Java version more closely.
4. Used `extend()` instead of iterating and inserting each key-value pair.

This implementation should work correctly and match the behavior of the Java function.</reapir response>
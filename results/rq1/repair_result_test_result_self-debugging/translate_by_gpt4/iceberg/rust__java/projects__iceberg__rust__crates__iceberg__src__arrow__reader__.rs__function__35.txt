Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:555:13
    |
555 |     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()...
    |             ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
555 |     if lhs(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:555:12
    |
555 |     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()...
    |        --- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |        |
    |        arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
555 -     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
555 +     if lhs(RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:555:38
    |
555 |     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()...
    |                                      ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-13748349204810795517.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:555:59
    |
555 | ...y())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                             ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
555 |     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                                                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:555:58
    |
555 |     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()...
    |                                           -------------- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                                           |
    |                                           arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
555 -     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
555 +     if lhs(&RecordBatch::new_empty())? == always_false()(RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:555:84
    |
555 | ...mpty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                                                         ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-13206372156404047363.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:555:94
    |
555 | ...h::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                             ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
555 |     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? == always_false()(&RecordBatch::new_empty())? {
    |                                                                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:555:93
    |
555 | ...RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                                  --- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                                  |
    |                                  arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
555 -     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
555 +     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:555:119
    |
555 | ...atch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                                                         ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-413856647147381462.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:555:140
    |
555 | ...y())? == always_false()(&RecordBatch::new_empty())? {
    |                             ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
555 |     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? {
    |                                                                                                                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:555:139
    |
555 | ...Batch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                            -------------- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                            |
    |                            arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
555 -     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
555 +     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:555:165
    |
555 | ...mpty())? == always_false()(&RecordBatch::new_empty())? {
    |                                                         ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-7118315367697310460.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:555:38
    |
555 |     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()...
    |                                      ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-4992103607977606239.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:557:20
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                    ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
557 |     } else if lhs(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? == always_true()(&RecordBatch::new_empty())? {
    |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:557:19
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |               --- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |               |
    |               arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
557 -     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
557 +     } else if lhs(RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:557:45
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-7268102217935901111.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:557:65
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? {
    |                                                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:555:84
    |
555 | ...mpty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                                                         ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-7236898575691323291.txt'

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:557:64
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                                  ------------- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                                                  |
    |                                                  arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
557 -     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
557 +     } else if lhs(&RecordBatch::new_empty())? == always_true()(RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:555:119
    |
555 | ...atch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                                                         ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-17276012650541146075.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:557:90
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                                                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-14546580675231475586.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:559:20
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                    ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
559 |     } else if rhs(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? == always_true()(&RecordBatch::new_empty())? {
    |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:555:165
    |
555 | ...mpty())? == always_false()(&RecordBatch::new_empty())? {
    |                                                         ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-16140453263782119383.txt'

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:559:19
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |               --- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |               |
    |               arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
559 -     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
559 +     } else if rhs(RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:559:45
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-7653734608296536141.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:559:65
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? {
    |                                                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:557:45
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-6573199396228811642.txt'

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:559:64
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                                  ------------- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                                                  |
    |                                                  arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
559 -     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
559 +     } else if rhs(&RecordBatch::new_empty())? == always_true()(RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:559:90
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                                                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-11934708177807129648.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:557:90
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                                                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-1316187643058917291.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:559:45
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-1880297289793200674.txt'

Some errors have detailed explanations: E0061, E0277, E0308.
For more information about an error, try `rustc --explain E0061`.
error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:559:90
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                                                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-15184732406411296371.txt'

error: could not compile `iceberg` (lib) due to 24 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 24 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:555:13
    |
555 |     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()...
    |             ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
555 |     if lhs(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:555:12
    |
555 |     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()...
    |        --- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |        |
    |        arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
555 -     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
555 +     if lhs(RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:555:38
    |
555 |     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()...
    |                                      ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-17310780132462070864.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:555:59
    |
555 | ...y())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                             ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
555 |     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                                                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:555:58
    |
555 |     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()...
    |                                           -------------- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                                           |
    |                                           arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
555 -     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
555 +     if lhs(&RecordBatch::new_empty())? == always_false()(RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:555:84
    |
555 | ...mpty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                                                         ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-16719109419046507743.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:555:94
    |
555 | ...h::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                             ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
555 |     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? == always_false()(&RecordBatch::new_empty())? {
    |                                                                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:555:93
    |
555 | ...RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                                  --- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                                  |
    |                                  arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
555 -     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
555 +     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:555:119
    |
555 | ...atch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                                                         ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-12196306775162708707.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:555:140
    |
555 | ...y())? == always_false()(&RecordBatch::new_empty())? {
    |                             ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
555 |     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? {
    |                                                                                                                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:555:139
    |
555 | ...Batch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
    |                            -------------- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                            |
    |                            arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
555 -     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? {
555 +     if lhs(&RecordBatch::new_empty())? == always_false()(&RecordBatch::new_empty())? || rhs(&RecordBatch::new_empty())? == always_false()(RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:555:165
    |
555 | ...mpty())? == always_false()(&RecordBatch::new_empty())? {
    |                                                         ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-1345202201589916179.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:557:20
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                    ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
557 |     } else if lhs(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? == always_true()(&RecordBatch::new_empty())? {
    |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:557:19
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |               --- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |               |
    |               arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
557 -     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
557 +     } else if lhs(RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:557:45
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-9728176656797820640.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:557:65
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? {
    |                                                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:557:64
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                                  ------------- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                                                  |
    |                                                  arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
557 -     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
557 +     } else if lhs(&RecordBatch::new_empty())? == always_true()(RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:557:90
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                                                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-2050686099241323326.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:559:20
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                    ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
559 |     } else if rhs(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? == always_true()(&RecordBatch::new_empty())? {
    |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:559:19
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |               --- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |               |
    |               arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
559 -     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
559 +     } else if rhs(RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:559:45
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-11514002263030502382.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:559:65
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? {
    |                                                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:559:64
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                                  ------------- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                                                  |
    |                                                  arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
559 -     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
559 +     } else if rhs(&RecordBatch::new_empty())? == always_true()(RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:559:90
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true()(&RecordBatch::new_empty())? {
    |                                                                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-4589812174554350981.txt'

Some errors have detailed explanations: E0061, E0277, E0308.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `iceberg` (lib) due to 24 previous errors


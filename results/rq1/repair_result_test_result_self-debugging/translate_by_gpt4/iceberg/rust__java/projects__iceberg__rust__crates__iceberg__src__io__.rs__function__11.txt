Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/io.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:107
    |
234 | async fn read_fully(&self, position: u64, buffer: &mut [u8], offset: usize, length: usize) -> Result<()> {\n    if offset + length > buff...
    |                                                                                                           ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:148
    |
234 | ...h: usize) -> Result<()> {\n    if offset + length > buffer.len() {\n        return Err(Error::from(ErrorKind::InvalidArgument));\n    ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:210
    |
234 | ...() {\n        return Err(Error::from(ErrorKind::InvalidArgument));\n    }\n\n    let range = Range {\n        start: position,\n      ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:217
    |
234 | ...       return Err(Error::from(ErrorKind::InvalidArgument));\n    }\n\n    let range = Range {\n        start: position,\n        end: ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:219
    |
234 | ...     return Err(Error::from(ErrorKind::InvalidArgument));\n    }\n\n    let range = Range {\n        start: position,\n        end: po...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:244
    |
234 | ...om(ErrorKind::InvalidArgument));\n    }\n\n    let range = Range {\n        start: position,\n        end: position + length as u64\n ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:270
    |
234 | ...ent));\n    }\n\n    let range = Range {\n        start: position,\n        end: position + length as u64\n    };\n\n    let data = se...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:309
    |
234 | ...{\n        start: position,\n        end: position + length as u64\n    };\n\n    let data = self.read(range).await?.to_vec();\n\n    ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:317
    |
234 | ...   start: position,\n        end: position + length as u64\n    };\n\n    let data = self.read(range).await?.to_vec();\n\n    buffer[o...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:319
    |
234 | ... start: position,\n        end: position + length as u64\n    };\n\n    let data = self.read(range).await?.to_vec();\n\n    buffer[off...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:369
    |
234 | ...as u64\n    };\n\n    let data = self.read(range).await?.to_vec();\n\n    buffer[offset..(offset+length)].copy_from_slice(&data[0..len...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:371
    |
234 | ... u64\n    };\n\n    let data = self.read(range).await?.to_vec();\n\n    buffer[offset..(offset+length)].copy_from_slice(&data[0..lengt...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:443
    |
234 | ...buffer[offset..(offset+length)].copy_from_slice(&data[0..length]);\n\n    Ok(())\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:445
    |
234 | ...ffer[offset..(offset+length)].copy_from_slice(&data[0..length]);\n\n    Ok(())\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:457
    |
234 | ....(offset+length)].copy_from_slice(&data[0..length]);\n\n    Ok(())\n}
    |                                                                      ^

error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `if`
   --> crates/iceberg/src/io.rs:234:113
    |
234 | ...fset: usize, length: usize) -> Result<()> {\n    if offset + length > buffer.len() {\n        return Err(Error::from(ErrorKind::Invali...
    |                                                     ^^ expected one of 8 possible tokens

error: unexpected token, expected `;`
   --> crates/iceberg/src/io.rs:234:113
    |
234 | async fn read_fully(&self, position: u64, buffer: &mut [u8], offset: usize, length: usize) -> Result<()> {\n    if offset + length > buff...
    |                                                                                                                 ^^

error[E0277]: the trait bound `opendal::Reader: FileRead` is not satisfied
   --> crates/iceberg/src/io.rs:286:57
    |
286 |       pub async fn reader(&self) -> Result<impl FileRead> {
    |  _________________________________________________________^
287 | |         Ok(self.op.reader(&self.path[self.relative_path_pos..]).await?)
288 | |     }
    | |_____^ the trait `FileRead` is not implemented for `opendal::Reader`
    |
help: this trait has no implementations, consider adding one
   --> crates/iceberg/src/io.rs:223:1
    |
223 | pub trait FileRead: Send + Unpin + 'static {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `opendal::Reader: FileRead` is not satisfied
   --> crates/iceberg/src/io.rs:286:42
    |
286 |     pub async fn reader(&self) -> Result<impl FileRead> {
    |                                          ^^^^^^^^^^^^^ the trait `FileRead` is not implemented for `opendal::Reader`
    |
help: this trait has no implementations, consider adding one
   --> crates/iceberg/src/io.rs:223:1
    |
223 | pub trait FileRead: Send + Unpin + 'static {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For more information about this error, try `rustc --explain E0277`.
error: could not compile `iceberg` (lib) due to 19 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 19 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:107
    |
234 | async fn read_fully(&self, position: u64, buffer: &mut [u8], offset: usize, length: usize) -> Result<()> {\n    if offset + length > buff...
    |                                                                                                           ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:148
    |
234 | ...h: usize) -> Result<()> {\n    if offset + length > buffer.len() {\n        return Err(Error::from(ErrorKind::InvalidArgument));\n    ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:210
    |
234 | ...() {\n        return Err(Error::from(ErrorKind::InvalidArgument));\n    }\n\n    let range = Range {\n        start: position,\n      ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:217
    |
234 | ...       return Err(Error::from(ErrorKind::InvalidArgument));\n    }\n\n    let range = Range {\n        start: position,\n        end: ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:219
    |
234 | ...     return Err(Error::from(ErrorKind::InvalidArgument));\n    }\n\n    let range = Range {\n        start: position,\n        end: po...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:244
    |
234 | ...om(ErrorKind::InvalidArgument));\n    }\n\n    let range = Range {\n        start: position,\n        end: position + length as u64\n ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:270
    |
234 | ...ent));\n    }\n\n    let range = Range {\n        start: position,\n        end: position + length as u64\n    };\n\n    let data = se...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:309
    |
234 | ...{\n        start: position,\n        end: position + length as u64\n    };\n\n    let data = self.read(range).await?.to_vec();\n\n    ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:317
    |
234 | ...   start: position,\n        end: position + length as u64\n    };\n\n    let data = self.read(range).await?.to_vec();\n\n    buffer[o...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:319
    |
234 | ... start: position,\n        end: position + length as u64\n    };\n\n    let data = self.read(range).await?.to_vec();\n\n    buffer[off...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:369
    |
234 | ...as u64\n    };\n\n    let data = self.read(range).await?.to_vec();\n\n    buffer[offset..(offset+length)].copy_from_slice(&data[0..len...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:371
    |
234 | ... u64\n    };\n\n    let data = self.read(range).await?.to_vec();\n\n    buffer[offset..(offset+length)].copy_from_slice(&data[0..lengt...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:443
    |
234 | ...buffer[offset..(offset+length)].copy_from_slice(&data[0..length]);\n\n    Ok(())\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:445
    |
234 | ...ffer[offset..(offset+length)].copy_from_slice(&data[0..length]);\n\n    Ok(())\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/io.rs:234:457
    |
234 | ....(offset+length)].copy_from_slice(&data[0..length]);\n\n    Ok(())\n}
    |                                                                      ^

error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `if`
   --> crates/iceberg/src/io.rs:234:113
    |
234 | ...fset: usize, length: usize) -> Result<()> {\n    if offset + length > buffer.len() {\n        return Err(Error::from(ErrorKind::Invali...
    |                                                     ^^ expected one of 8 possible tokens

error: unexpected token, expected `;`
   --> crates/iceberg/src/io.rs:234:113
    |
234 | async fn read_fully(&self, position: u64, buffer: &mut [u8], offset: usize, length: usize) -> Result<()> {\n    if offset + length > buff...
    |                                                                                                                 ^^

error[E0277]: the trait bound `opendal::Reader: FileRead` is not satisfied
   --> crates/iceberg/src/io.rs:286:57
    |
286 |       pub async fn reader(&self) -> Result<impl FileRead> {
    |  _________________________________________________________^
287 | |         Ok(self.op.reader(&self.path[self.relative_path_pos..]).await?)
288 | |     }
    | |_____^ the trait `FileRead` is not implemented for `opendal::Reader`
    |
help: this trait has no implementations, consider adding one
   --> crates/iceberg/src/io.rs:223:1
    |
223 | pub trait FileRead: Send + Unpin + 'static {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `opendal::Reader: FileRead` is not satisfied
   --> crates/iceberg/src/io.rs:286:42
    |
286 |     pub async fn reader(&self) -> Result<impl FileRead> {
    |                                          ^^^^^^^^^^^^^ the trait `FileRead` is not implemented for `opendal::Reader`
    |
help: this trait has no implementations, consider adding one
   --> crates/iceberg/src/io.rs:223:1
    |
223 | pub trait FileRead: Send + Unpin + 'static {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For more information about this error, try `rustc --explain E0277`.
error: could not compile `iceberg` (lib) due to 19 previous errors


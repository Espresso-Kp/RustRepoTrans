Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/spec/schema.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:8
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |        ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:24
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |                        ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:44
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |                                            ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:75
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |                                                                           ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:101
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |                                                                                                     ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:130
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |                                                                                                                                  ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:184
    |
908 | ...ion<Type>> {\n    if self.selected.contains(&map.value_field.id) {\n        if self.select_full_types {\n            return Ok(Some(Ty...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:221
    |
908 | ...ntains(&map.value_field.id) {\n        if self.select_full_types {\n            return Ok(Some(Type::Map(map.clone())));\n        } el...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:275
    |
908 | ...full_types {\n            return Ok(Some(Type::Map(map.clone())));\n        } else if map.value_field.field_type.is_struct() {\n      ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:335
    |
908 | ...())));\n        } else if map.value_field.field_type.is_struct() {\n            let projected_struct = match self.project_selected_str...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:423
    |
908 | ...ected_struct = match self.project_selected_struct(value.clone()) {\n                Ok(s) => s,\n                Err(_) => return Err(...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:452
    |
908 | ...ject_selected_struct(value.clone()) {\n                Ok(s) => s,\n                Err(_) => return Err(Error::new(\n                ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:502
    |
908 | ...     Ok(s) => s,\n                Err(_) => return Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    "...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:547
    |
908 | ...eturn Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    "Expected a struct type".to_string(),\n       ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:606
    |
908 | ...nvalid,\n                    "Expected a struct type".to_string(),\n                )),\n            };\n            return match self...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:627
    |
908 | ...        "Expected a struct type".to_string(),\n                )),\n            };\n            return match self.project_map(map, Typ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:643
    |
908 | ...d a struct type".to_string(),\n                )),\n            };\n            return match self.project_map(map, Type::Struct(projec...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:725
    |
908 | ...turn match self.project_map(map, Type::Struct(projected_struct)) {\n                Ok(m) => Ok(Some(Type::Map(m))),\n                ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:775
    |
908 | ...ected_struct)) {\n                Ok(m) => Ok(Some(Type::Map(m))),\n                Err(_) => Err(Error::new(\n                    Err...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:818
    |
908 | ...Ok(Some(Type::Map(m))),\n                Err(_) => Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    "...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:863
    |
908 | ..._) => Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    "Failed to project map".to_string(),\n        ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:921
    |
908 | ...Invalid,\n                    "Failed to project map".to_string(),\n                )),\n            };\n        } else {\n           ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:942
    |
908 | ...         "Failed to project map".to_string(),\n                )),\n            };\n        } else {\n            if !map.value_field....
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:958
    |
908 | ... to project map".to_string(),\n                )),\n            };\n        } else {\n            if !map.value_field.field_type.is_pr...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:976
    |
908 | ...o_string(),\n                )),\n            };\n        } else {\n            if !map.value_field.field_type.is_primitive() {\n     ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1037
    |
908 | ...lse {\n            if !map.value_field.field_type.is_primitive() {\n                return Err(Error::new(\n                    ErrorK...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1077
    |
908 | ...ield_type.is_primitive() {\n                return Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    f...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1122
    |
908 | ...eturn Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    format!(\n                        "Cannot expl...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1152
    |
908 | ...             ErrorKind::DataInvalid,\n                    format!(\n                        "Cannot explicitly project List or Map typ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1264
    |
908 | ...roject List or Map types, Map value {} of type {:?} was selected",\n                        map.value_field.id,\n                     ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1309
    |
908 | ...e {:?} was selected",\n                        map.value_field.id,\n                        map.value_field.field_type\n              ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1361
    |
908 | ...alue_field.id,\n                        map.value_field.field_type\n                    ),\n                ));\n            }\n      ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1385
    |
908 | ...                map.value_field.field_type\n                    ),\n                ));\n            }\n            return Ok(Some(Typ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1406
    |
908 | ...alue_field.field_type\n                    ),\n                ));\n            }\n            return Ok(Some(Type::Map(map.clone())))...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1421
    |
908 | ...d_type\n                    ),\n                ));\n            }\n            return Ok(Some(Type::Map(map.clone())));\n        }\n ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1475
    |
908 | ...           }\n            return Ok(Some(Type::Map(map.clone())));\n        }\n    } else if value.is_some() {\n        return match s...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1486
    |
908 | ...}\n            return Ok(Some(Type::Map(map.clone())));\n        }\n    } else if value.is_some() {\n        return match self.project...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1519
    |
908 | ...e::Map(map.clone())));\n        }\n    } else if value.is_some() {\n        return match self.project_map(map, value.unwrap()) {\n    ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1581
    |
908 | ...() {\n        return match self.project_map(map, value.unwrap()) {\n            Ok(m) => Ok(Some(Type::Map(m))),\n            Err(_) =...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1627
    |
908 | ...p, value.unwrap()) {\n            Ok(m) => Ok(Some(Type::Map(m))),\n            Err(_) => Err(Error::new(\n                ErrorKind::...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1666
    |
908 | ... => Ok(Some(Type::Map(m))),\n            Err(_) => Err(Error::new(\n                ErrorKind::DataInvalid,\n                "Failed t...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1707
    |
908 | ...Err(_) => Err(Error::new(\n                ErrorKind::DataInvalid,\n                "Failed to project map".to_string(),\n            ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1761
    |
908 | ...DataInvalid,\n                "Failed to project map".to_string(),\n            )),\n        };\n    } else if self.selected.contains(...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1778
    |
908 | ...             "Failed to project map".to_string(),\n            )),\n        };\n    } else if self.selected.contains(&map.key_field.id...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1790
    |
908 | ... "Failed to project map".to_string(),\n            )),\n        };\n    } else if self.selected.contains(&map.key_field.id) {\n       ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1849
    |
908 | ...     };\n    } else if self.selected.contains(&map.key_field.id) {\n        return Ok(Some(Type::Map(map.clone())));\n    }\n    retur...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1899
    |
908 | ....key_field.id) {\n        return Ok(Some(Type::Map(map.clone())));\n    }\n    return Ok(None);\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1906
    |
908 | ...eld.id) {\n        return Ok(Some(Type::Map(map.clone())));\n    }\n    return Ok(None);\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1928
    |
908 | ...urn Ok(Some(Type::Map(map.clone())));\n    }\n    return Ok(None);\n}
    |                                                                      ^

error: expected one of `:`, `@`, or `|`, found `&`
   --> crates/iceberg/src/spec/schema.rs:908:14
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |              ^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `map`
   --> crates/iceberg/src/spec/schema.rs:908:30
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |                              ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `_key_value`
   --> crates/iceberg/src/spec/schema.rs:908:50
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |                                                  ^^^^^^^^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `value`
   --> crates/iceberg/src/spec/schema.rs:908:81
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |                                                                                 ^^^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `)`
   --> crates/iceberg/src/spec/schema.rs:908:103
    |
908 | ...y_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if self.selected.contains(&map.value_field.id) {\n ...
    |                                                      ^ expected one of `:`, `@`, or `|`
    |
    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)
help: if this is a parameter name, give it a type
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n: TypeName) -> Result<Option<Type>> {\n    if self.selected.contains(&map.value_field.id) {\n        if self.select_full_types {\n            return Ok(Some(Type::Map(map.clone())));\n        } else if map.value_field.field_type.is_struct() {\n            let projected_struct = match self.project_selected_struct(value.clone()) {\n                Ok(s) => s,\n                Err(_) => return Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    "Expected a struct type".to_string(),\n                )),\n            };\n            return match self.project_map(map, Type::Struct(projected_struct)) {\n                Ok(m) => Ok(Some(Type::Map(m))),\n                Err(_) => Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    "Failed to project map".to_string(),\n                )),\n            };\n        } else {\n            if !map.value_field.field_type.is_primitive() {\n                return Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    format!(\n                        "Cannot explicitly project List or Map types, Map value {} of type {:?} was selected",\n                        map.value_field.id,\n                        map.value_field.field_type\n                    ),\n                ));\n            }\n            return Ok(Some(Type::Map(map.clone())));\n        }\n    } else if value.is_some() {\n        return match self.project_map(map, value.unwrap()) {\n            Ok(m) => Ok(Some(Type::Map(m))),\n            Err(_) => Err(Error::new(\n                ErrorKind::DataInvalid,\n                "Failed to project map".to_string(),\n            )),\n        };\n    } else if self.selected.contains(&map.key_field.id) {\n        return Ok(Some(Type::Map(map.clone())));\n    }\n    return Ok(None);\n}
    |                                                                                                       ++++++++++
help: if this is a type, explicitly ignore the parameter name
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\_: n) -> Result<Option<Type>> {\n    if self.selected.contains(&map.value_field.id) {\n        if self.select_full_types {\n            return Ok(Some(Type::Map(map.clone())));\n        } else if map.value_field.field_type.is_struct() {\n            let projected_struct = match self.project_selected_struct(value.clone()) {\n                Ok(s) => s,\n                Err(_) => return Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    "Expected a struct type".to_string(),\n                )),\n            };\n            return match self.project_map(map, Type::Struct(projected_struct)) {\n                Ok(m) => Ok(Some(Type::Map(m))),\n                Err(_) => Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    "Failed to project map".to_string(),\n                )),\n            };\n        } else {\n            if !map.value_field.field_type.is_primitive() {\n                return Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    format!(\n                        "Cannot explicitly project List or Map types, Map value {} of type {:?} was selected",\n                        map.value_field.id,\n                        map.value_field.field_type\n                    ),\n                ));\n            }\n            return Ok(Some(Type::Map(map.clone())));\n        }\n    } else if value.is_some() {\n        return match self.project_map(map, value.unwrap()) {\n            Ok(m) => Ok(Some(Type::Map(m))),\n            Err(_) => Err(Error::new(\n                ErrorKind::DataInvalid,\n                "Failed to project map".to_string(),\n            )),\n        };\n    } else if self.selected.contains(&map.key_field.id) {\n        return Ok(Some(Type::Map(map.clone())));\n    }\n    return Ok(None);\n}
    |                                                                                                      ++

error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `if`
   --> crates/iceberg/src/spec/schema.rs:908:136
    |
908 | ... Option<Type>,\n) -> Result<Option<Type>> {\n    if self.selected.contains(&map.value_field.id) {\n        if self.select_full_types {...
    |                                                     ^^ expected one of 8 possible tokens

error[E0186]: method `map` has a `&mut self` declaration in the trait, but not in the impl
   --> crates/iceberg/src/spec/schema.rs:908:1
    |
411 |     fn map(&mut self, map: &MapType, key_value: Self::T, value: Self::T) -> Result<Self::T>;
    |     ---------------------------------------------------------------------------------------- `&mut self` used in trait
...
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&mut self` in impl

For more information about this error, try `rustc --explain E0186`.
error: could not compile `iceberg` (lib) due to 56 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 56 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:8
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |        ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:24
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |                        ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:44
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |                                            ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:75
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |                                                                           ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:101
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |                                                                                                     ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:130
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |                                                                                                                                  ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:184
    |
908 | ...ion<Type>> {\n    if self.selected.contains(&map.value_field.id) {\n        if self.select_full_types {\n            return Ok(Some(Ty...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:221
    |
908 | ...ntains(&map.value_field.id) {\n        if self.select_full_types {\n            return Ok(Some(Type::Map(map.clone())));\n        } el...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:275
    |
908 | ...full_types {\n            return Ok(Some(Type::Map(map.clone())));\n        } else if map.value_field.field_type.is_struct() {\n      ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:335
    |
908 | ...())));\n        } else if map.value_field.field_type.is_struct() {\n            let projected_struct = match self.project_selected_str...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:423
    |
908 | ...ected_struct = match self.project_selected_struct(value.clone()) {\n                Ok(s) => s,\n                Err(_) => return Err(...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:452
    |
908 | ...ject_selected_struct(value.clone()) {\n                Ok(s) => s,\n                Err(_) => return Err(Error::new(\n                ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:502
    |
908 | ...     Ok(s) => s,\n                Err(_) => return Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    "...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:547
    |
908 | ...eturn Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    "Expected a struct type".to_string(),\n       ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:606
    |
908 | ...nvalid,\n                    "Expected a struct type".to_string(),\n                )),\n            };\n            return match self...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:627
    |
908 | ...        "Expected a struct type".to_string(),\n                )),\n            };\n            return match self.project_map(map, Typ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:643
    |
908 | ...d a struct type".to_string(),\n                )),\n            };\n            return match self.project_map(map, Type::Struct(projec...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:725
    |
908 | ...turn match self.project_map(map, Type::Struct(projected_struct)) {\n                Ok(m) => Ok(Some(Type::Map(m))),\n                ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:775
    |
908 | ...ected_struct)) {\n                Ok(m) => Ok(Some(Type::Map(m))),\n                Err(_) => Err(Error::new(\n                    Err...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:818
    |
908 | ...Ok(Some(Type::Map(m))),\n                Err(_) => Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    "...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:863
    |
908 | ..._) => Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    "Failed to project map".to_string(),\n        ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:921
    |
908 | ...Invalid,\n                    "Failed to project map".to_string(),\n                )),\n            };\n        } else {\n           ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:942
    |
908 | ...         "Failed to project map".to_string(),\n                )),\n            };\n        } else {\n            if !map.value_field....
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:958
    |
908 | ... to project map".to_string(),\n                )),\n            };\n        } else {\n            if !map.value_field.field_type.is_pr...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:976
    |
908 | ...o_string(),\n                )),\n            };\n        } else {\n            if !map.value_field.field_type.is_primitive() {\n     ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1037
    |
908 | ...lse {\n            if !map.value_field.field_type.is_primitive() {\n                return Err(Error::new(\n                    ErrorK...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1077
    |
908 | ...ield_type.is_primitive() {\n                return Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    f...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1122
    |
908 | ...eturn Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    format!(\n                        "Cannot expl...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1152
    |
908 | ...             ErrorKind::DataInvalid,\n                    format!(\n                        "Cannot explicitly project List or Map typ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1264
    |
908 | ...roject List or Map types, Map value {} of type {:?} was selected",\n                        map.value_field.id,\n                     ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1309
    |
908 | ...e {:?} was selected",\n                        map.value_field.id,\n                        map.value_field.field_type\n              ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1361
    |
908 | ...alue_field.id,\n                        map.value_field.field_type\n                    ),\n                ));\n            }\n      ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1385
    |
908 | ...                map.value_field.field_type\n                    ),\n                ));\n            }\n            return Ok(Some(Typ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1406
    |
908 | ...alue_field.field_type\n                    ),\n                ));\n            }\n            return Ok(Some(Type::Map(map.clone())))...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1421
    |
908 | ...d_type\n                    ),\n                ));\n            }\n            return Ok(Some(Type::Map(map.clone())));\n        }\n ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1475
    |
908 | ...           }\n            return Ok(Some(Type::Map(map.clone())));\n        }\n    } else if value.is_some() {\n        return match s...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1486
    |
908 | ...}\n            return Ok(Some(Type::Map(map.clone())));\n        }\n    } else if value.is_some() {\n        return match self.project...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1519
    |
908 | ...e::Map(map.clone())));\n        }\n    } else if value.is_some() {\n        return match self.project_map(map, value.unwrap()) {\n    ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1581
    |
908 | ...() {\n        return match self.project_map(map, value.unwrap()) {\n            Ok(m) => Ok(Some(Type::Map(m))),\n            Err(_) =...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1627
    |
908 | ...p, value.unwrap()) {\n            Ok(m) => Ok(Some(Type::Map(m))),\n            Err(_) => Err(Error::new(\n                ErrorKind::...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1666
    |
908 | ... => Ok(Some(Type::Map(m))),\n            Err(_) => Err(Error::new(\n                ErrorKind::DataInvalid,\n                "Failed t...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1707
    |
908 | ...Err(_) => Err(Error::new(\n                ErrorKind::DataInvalid,\n                "Failed to project map".to_string(),\n            ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1761
    |
908 | ...DataInvalid,\n                "Failed to project map".to_string(),\n            )),\n        };\n    } else if self.selected.contains(...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1778
    |
908 | ...             "Failed to project map".to_string(),\n            )),\n        };\n    } else if self.selected.contains(&map.key_field.id...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1790
    |
908 | ... "Failed to project map".to_string(),\n            )),\n        };\n    } else if self.selected.contains(&map.key_field.id) {\n       ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1849
    |
908 | ...     };\n    } else if self.selected.contains(&map.key_field.id) {\n        return Ok(Some(Type::Map(map.clone())));\n    }\n    retur...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1899
    |
908 | ....key_field.id) {\n        return Ok(Some(Type::Map(map.clone())));\n    }\n    return Ok(None);\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1906
    |
908 | ...eld.id) {\n        return Ok(Some(Type::Map(map.clone())));\n    }\n    return Ok(None);\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/spec/schema.rs:908:1928
    |
908 | ...urn Ok(Some(Type::Map(map.clone())));\n    }\n    return Ok(None);\n}
    |                                                                      ^

error: expected one of `:`, `@`, or `|`, found `&`
   --> crates/iceberg/src/spec/schema.rs:908:14
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |              ^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `map`
   --> crates/iceberg/src/spec/schema.rs:908:30
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |                              ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `_key_value`
   --> crates/iceberg/src/spec/schema.rs:908:50
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |                                                  ^^^^^^^^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `value`
   --> crates/iceberg/src/spec/schema.rs:908:81
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    |                                                                                 ^^^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `)`
   --> crates/iceberg/src/spec/schema.rs:908:103
    |
908 | ...y_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if self.selected.contains(&map.value_field.id) {\n ...
    |                                                      ^ expected one of `:`, `@`, or `|`
    |
    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)
help: if this is a parameter name, give it a type
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n: TypeName) -> Result<Option<Type>> {\n    if self.selected.contains(&map.value_field.id) {\n        if self.select_full_types {\n            return Ok(Some(Type::Map(map.clone())));\n        } else if map.value_field.field_type.is_struct() {\n            let projected_struct = match self.project_selected_struct(value.clone()) {\n                Ok(s) => s,\n                Err(_) => return Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    "Expected a struct type".to_string(),\n                )),\n            };\n            return match self.project_map(map, Type::Struct(projected_struct)) {\n                Ok(m) => Ok(Some(Type::Map(m))),\n                Err(_) => Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    "Failed to project map".to_string(),\n                )),\n            };\n        } else {\n            if !map.value_field.field_type.is_primitive() {\n                return Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    format!(\n                        "Cannot explicitly project List or Map types, Map value {} of type {:?} was selected",\n                        map.value_field.id,\n                        map.value_field.field_type\n                    ),\n                ));\n            }\n            return Ok(Some(Type::Map(map.clone())));\n        }\n    } else if value.is_some() {\n        return match self.project_map(map, value.unwrap()) {\n            Ok(m) => Ok(Some(Type::Map(m))),\n            Err(_) => Err(Error::new(\n                ErrorKind::DataInvalid,\n                "Failed to project map".to_string(),\n            )),\n        };\n    } else if self.selected.contains(&map.key_field.id) {\n        return Ok(Some(Type::Map(map.clone())));\n    }\n    return Ok(None);\n}
    |                                                                                                       ++++++++++
help: if this is a type, explicitly ignore the parameter name
    |
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\_: n) -> Result<Option<Type>> {\n    if self.selected.contains(&map.value_field.id) {\n        if self.select_full_types {\n            return Ok(Some(Type::Map(map.clone())));\n        } else if map.value_field.field_type.is_struct() {\n            let projected_struct = match self.project_selected_struct(value.clone()) {\n                Ok(s) => s,\n                Err(_) => return Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    "Expected a struct type".to_string(),\n                )),\n            };\n            return match self.project_map(map, Type::Struct(projected_struct)) {\n                Ok(m) => Ok(Some(Type::Map(m))),\n                Err(_) => Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    "Failed to project map".to_string(),\n                )),\n            };\n        } else {\n            if !map.value_field.field_type.is_primitive() {\n                return Err(Error::new(\n                    ErrorKind::DataInvalid,\n                    format!(\n                        "Cannot explicitly project List or Map types, Map value {} of type {:?} was selected",\n                        map.value_field.id,\n                        map.value_field.field_type\n                    ),\n                ));\n            }\n            return Ok(Some(Type::Map(map.clone())));\n        }\n    } else if value.is_some() {\n        return match self.project_map(map, value.unwrap()) {\n            Ok(m) => Ok(Some(Type::Map(m))),\n            Err(_) => Err(Error::new(\n                ErrorKind::DataInvalid,\n                "Failed to project map".to_string(),\n            )),\n        };\n    } else if self.selected.contains(&map.key_field.id) {\n        return Ok(Some(Type::Map(map.clone())));\n    }\n    return Ok(None);\n}
    |                                                                                                      ++

error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `if`
   --> crates/iceberg/src/spec/schema.rs:908:136
    |
908 | ... Option<Type>,\n) -> Result<Option<Type>> {\n    if self.selected.contains(&map.value_field.id) {\n        if self.select_full_types {...
    |                                                     ^^ expected one of 8 possible tokens

error[E0186]: method `map` has a `&mut self` declaration in the trait, but not in the impl
   --> crates/iceberg/src/spec/schema.rs:908:1
    |
411 |     fn map(&mut self, map: &MapType, key_value: Self::T, value: Self::T) -> Result<Self::T>;
    |     ---------------------------------------------------------------------------------------- `&mut self` used in trait
...
908 | fn map(\n    &mut self,\n    map: &MapType,\n    _key_value: Option<Type>,\n    value: Option<Type>,\n) -> Result<Option<Type>> {\n    if...
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&mut self` in impl

For more information about this error, try `rustc --explain E0186`.
error: could not compile `iceberg` (lib) due to 56 previous errors


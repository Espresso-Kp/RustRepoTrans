Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:7
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |       ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:23
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |                       ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:59
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |                                                           ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:95
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |                                                                                               ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:131
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |                                                                                                                                   ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:220
    |
553 | ... Box::new(|_: RecordBatch| Ok(BooleanArray::from(vec![true; 1])));\n    let always_false = Box::new(|_: RecordBatch| Ok(BooleanArray::...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:311
    |
553 | ...Box::new(|_: RecordBatch| Ok(BooleanArray::from(vec![false; 1])));\n    if lhs.as_ref() as *const _ == always_true.as_ref() as *const ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:383
    |
553 | ...if lhs.as_ref() as *const _ == always_true.as_ref() as *const _ ||\n       rhs.as_ref() as *const _ == always_true.as_ref() as *const ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:454
    |
553 | ...    rhs.as_ref() as *const _ == always_true.as_ref() as *const _ {\n        return Ok(always_true);\n    } else if lhs.as_ref() as *co...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:487
    |
553 | ...lways_true.as_ref() as *const _ {\n        return Ok(always_true);\n    } else if lhs.as_ref() as *const _ == always_false.as_ref() as...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:566
    |
553 | ...if lhs.as_ref() as *const _ == always_false.as_ref() as *const _ {\n        return Ok(rhs);\n    } else if rhs.as_ref() as *const _ ==...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:591
    |
553 | ... _ == always_false.as_ref() as *const _ {\n        return Ok(rhs);\n    } else if rhs.as_ref() as *const _ == always_false.as_ref() as...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:670
    |
553 | ...if rhs.as_ref() as *const _ == always_false.as_ref() as *const _ {\n        return Ok(lhs);\n    }\n    Ok(Box::new(move |record_batch...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:695
    |
553 | ... _ == always_false.as_ref() as *const _ {\n        return Ok(lhs);\n    }\n    Ok(Box::new(move |record_batch: RecordBatch| {\n       ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:702
    |
553 | ...lways_false.as_ref() as *const _ {\n        return Ok(lhs);\n    }\n    Ok(Box::new(move |record_batch: RecordBatch| {\n        let lh...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:754
    |
553 | ...k(lhs);\n    }\n    Ok(Box::new(move |record_batch: RecordBatch| {\n        let lhs_result = lhs.as_mut()(record_batch.clone())?;\n   ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:817
    |
553 | ...| {\n        let lhs_result = lhs.as_mut()(record_batch.clone())?;\n        let rhs_result = rhs.as_mut()(record_batch)?;\n        or(...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:872
    |
553 | ....clone())?;\n        let rhs_result = rhs.as_mut()(record_batch)?;\n        or(&lhs_result, &rhs_result)\n    }))\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:910
    |
553 | ...rhs.as_mut()(record_batch)?;\n        or(&lhs_result, &rhs_result)\n    }))\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:919
    |
553 | ...t()(record_batch)?;\n        or(&lhs_result, &rhs_result)\n    }))\n}
    |                                                                      ^

error: expected one of `:`, `@`, or `|`, found `&`
   --> crates/iceberg/src/arrow/reader.rs:553:13
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |             ^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found keyword `mut`
   --> crates/iceberg/src/arrow/reader.rs:553:29
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |                             ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found keyword `mut`
   --> crates/iceberg/src/arrow/reader.rs:553:65
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |                                                                 ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `)`
   --> crates/iceberg/src/arrow/reader.rs:553:97
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |                                                                                                 ^ expected one of `:`, `@`, or `|`
    |
    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)
help: if this is a parameter name, give it a type
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n: TypeName) -> Result<Box<PredicateResult>>{\n    let always_true = Box::new(|_: RecordBatch| Ok(BooleanArray::from(vec![true; 1])));\n    let always_false = Box::new(|_: RecordBatch| Ok(BooleanArray::from(vec![false; 1])));\n    if lhs.as_ref() as *const _ == always_true.as_ref() as *const _ ||\n       rhs.as_ref() as *const _ == always_true.as_ref() as *const _ {\n        return Ok(always_true);\n    } else if lhs.as_ref() as *const _ == always_false.as_ref() as *const _ {\n        return Ok(rhs);\n    } else if rhs.as_ref() as *const _ == always_false.as_ref() as *const _ {\n        return Ok(lhs);\n    }\n    Ok(Box::new(move |record_batch: RecordBatch| {\n        let lhs_result = lhs.as_mut()(record_batch.clone())?;\n        let rhs_result = rhs.as_mut()(record_batch)?;\n        or(&lhs_result, &rhs_result)\n    }))\n}
    |                                                                                                 ++++++++++
help: if this is a type, explicitly ignore the parameter name
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\_: n) -> Result<Box<PredicateResult>>{\n    let always_true = Box::new(|_: RecordBatch| Ok(BooleanArray::from(vec![true; 1])));\n    let always_false = Box::new(|_: RecordBatch| Ok(BooleanArray::from(vec![false; 1])));\n    if lhs.as_ref() as *const _ == always_true.as_ref() as *const _ ||\n       rhs.as_ref() as *const _ == always_true.as_ref() as *const _ {\n        return Ok(always_true);\n    } else if lhs.as_ref() as *const _ == always_false.as_ref() as *const _ {\n        return Ok(rhs);\n    } else if rhs.as_ref() as *const _ == always_false.as_ref() as *const _ {\n        return Ok(lhs);\n    }\n    Ok(Box::new(move |record_batch: RecordBatch| {\n        let lhs_result = lhs.as_mut()(record_batch.clone())?;\n        let rhs_result = rhs.as_mut()(record_batch)?;\n        or(&lhs_result, &rhs_result)\n    }))\n}
    |                                                                                                ++

error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `let`
   --> crates/iceberg/src/arrow/reader.rs:553:137
    |
553 | ...sult>,\n) -> Result<Box<PredicateResult>>{\n    let always_true = Box::new(|_: RecordBatch| Ok(BooleanArray::from(vec![true; 1])));\n ...
    |                                                    ^^^ expected one of 8 possible tokens

warning: unused import: `or`
  --> crates/iceberg/src/arrow/reader.rs:21:60
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                                                            ^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0186]: method `or` has a `&mut self` declaration in the trait, but not in the impl
   --> crates/iceberg/src/arrow/reader.rs:553:1
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&mut self` in impl
    |
   ::: crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:38:5
    |
38  |     fn or(&mut self, lhs: Self::T, rhs: Self::T) -> Result<Self::T>;
    |     ---------------------------------------------------------------- `&mut self` used in trait

For more information about this error, try `rustc --explain E0186`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 26 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
warning: `iceberg` (lib test) generated 1 warning (1 duplicate)
error: could not compile `iceberg` (lib test) due to 26 previous errors; 1 warning emitted

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:7
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |       ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:23
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |                       ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:59
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |                                                           ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:95
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |                                                                                               ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:131
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |                                                                                                                                   ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:220
    |
553 | ... Box::new(|_: RecordBatch| Ok(BooleanArray::from(vec![true; 1])));\n    let always_false = Box::new(|_: RecordBatch| Ok(BooleanArray::...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:311
    |
553 | ...Box::new(|_: RecordBatch| Ok(BooleanArray::from(vec![false; 1])));\n    if lhs.as_ref() as *const _ == always_true.as_ref() as *const ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:383
    |
553 | ...if lhs.as_ref() as *const _ == always_true.as_ref() as *const _ ||\n       rhs.as_ref() as *const _ == always_true.as_ref() as *const ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:454
    |
553 | ...    rhs.as_ref() as *const _ == always_true.as_ref() as *const _ {\n        return Ok(always_true);\n    } else if lhs.as_ref() as *co...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:487
    |
553 | ...lways_true.as_ref() as *const _ {\n        return Ok(always_true);\n    } else if lhs.as_ref() as *const _ == always_false.as_ref() as...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:566
    |
553 | ...if lhs.as_ref() as *const _ == always_false.as_ref() as *const _ {\n        return Ok(rhs);\n    } else if rhs.as_ref() as *const _ ==...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:591
    |
553 | ... _ == always_false.as_ref() as *const _ {\n        return Ok(rhs);\n    } else if rhs.as_ref() as *const _ == always_false.as_ref() as...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:670
    |
553 | ...if rhs.as_ref() as *const _ == always_false.as_ref() as *const _ {\n        return Ok(lhs);\n    }\n    Ok(Box::new(move |record_batch...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:695
    |
553 | ... _ == always_false.as_ref() as *const _ {\n        return Ok(lhs);\n    }\n    Ok(Box::new(move |record_batch: RecordBatch| {\n       ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:702
    |
553 | ...lways_false.as_ref() as *const _ {\n        return Ok(lhs);\n    }\n    Ok(Box::new(move |record_batch: RecordBatch| {\n        let lh...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:754
    |
553 | ...k(lhs);\n    }\n    Ok(Box::new(move |record_batch: RecordBatch| {\n        let lhs_result = lhs.as_mut()(record_batch.clone())?;\n   ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:817
    |
553 | ...| {\n        let lhs_result = lhs.as_mut()(record_batch.clone())?;\n        let rhs_result = rhs.as_mut()(record_batch)?;\n        or(...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:872
    |
553 | ....clone())?;\n        let rhs_result = rhs.as_mut()(record_batch)?;\n        or(&lhs_result, &rhs_result)\n    }))\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:910
    |
553 | ...rhs.as_mut()(record_batch)?;\n        or(&lhs_result, &rhs_result)\n    }))\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:919
    |
553 | ...t()(record_batch)?;\n        or(&lhs_result, &rhs_result)\n    }))\n}
    |                                                                      ^

error: expected one of `:`, `@`, or `|`, found `&`
   --> crates/iceberg/src/arrow/reader.rs:553:13
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |             ^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found keyword `mut`
   --> crates/iceberg/src/arrow/reader.rs:553:29
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |                             ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found keyword `mut`
   --> crates/iceberg/src/arrow/reader.rs:553:65
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |                                                                 ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `)`
   --> crates/iceberg/src/arrow/reader.rs:553:97
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    |                                                                                                 ^ expected one of `:`, `@`, or `|`
    |
    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)
help: if this is a parameter name, give it a type
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n: TypeName) -> Result<Box<PredicateResult>>{\n    let always_true = Box::new(|_: RecordBatch| Ok(BooleanArray::from(vec![true; 1])));\n    let always_false = Box::new(|_: RecordBatch| Ok(BooleanArray::from(vec![false; 1])));\n    if lhs.as_ref() as *const _ == always_true.as_ref() as *const _ ||\n       rhs.as_ref() as *const _ == always_true.as_ref() as *const _ {\n        return Ok(always_true);\n    } else if lhs.as_ref() as *const _ == always_false.as_ref() as *const _ {\n        return Ok(rhs);\n    } else if rhs.as_ref() as *const _ == always_false.as_ref() as *const _ {\n        return Ok(lhs);\n    }\n    Ok(Box::new(move |record_batch: RecordBatch| {\n        let lhs_result = lhs.as_mut()(record_batch.clone())?;\n        let rhs_result = rhs.as_mut()(record_batch)?;\n        or(&lhs_result, &rhs_result)\n    }))\n}
    |                                                                                                 ++++++++++
help: if this is a type, explicitly ignore the parameter name
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\_: n) -> Result<Box<PredicateResult>>{\n    let always_true = Box::new(|_: RecordBatch| Ok(BooleanArray::from(vec![true; 1])));\n    let always_false = Box::new(|_: RecordBatch| Ok(BooleanArray::from(vec![false; 1])));\n    if lhs.as_ref() as *const _ == always_true.as_ref() as *const _ ||\n       rhs.as_ref() as *const _ == always_true.as_ref() as *const _ {\n        return Ok(always_true);\n    } else if lhs.as_ref() as *const _ == always_false.as_ref() as *const _ {\n        return Ok(rhs);\n    } else if rhs.as_ref() as *const _ == always_false.as_ref() as *const _ {\n        return Ok(lhs);\n    }\n    Ok(Box::new(move |record_batch: RecordBatch| {\n        let lhs_result = lhs.as_mut()(record_batch.clone())?;\n        let rhs_result = rhs.as_mut()(record_batch)?;\n        or(&lhs_result, &rhs_result)\n    }))\n}
    |                                                                                                ++

error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `let`
   --> crates/iceberg/src/arrow/reader.rs:553:137
    |
553 | ...sult>,\n) -> Result<Box<PredicateResult>>{\n    let always_true = Box::new(|_: RecordBatch| Ok(BooleanArray::from(vec![true; 1])));\n ...
    |                                                    ^^^ expected one of 8 possible tokens

warning: unused import: `or`
  --> crates/iceberg/src/arrow/reader.rs:21:60
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                                                            ^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0186]: method `or` has a `&mut self` declaration in the trait, but not in the impl
   --> crates/iceberg/src/arrow/reader.rs:553:1
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>>{\n    l...
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&mut self` in impl
    |
   ::: crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:38:5
    |
38  |     fn or(&mut self, lhs: Self::T, rhs: Self::T) -> Result<Self::T>;
    |     ---------------------------------------------------------------- `&mut self` used in trait

For more information about this error, try `rustc --explain E0186`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 26 previous errors; 1 warning emitted


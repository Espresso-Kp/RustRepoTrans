Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:8
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |        ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:24
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |                        ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:60
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |                                                            ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:96
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |                                                                                                ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:133
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |                                                                                                                                     ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:159
    |
541 | ...t>,\n) -> Result<Box<PredicateResult>> {\n    let lhs_val = lhs();\n    let rhs_val = rhs();\n    match (lhs_val, rhs_val) {\n        ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:185
    |
541 | ...cateResult>> {\n    let lhs_val = lhs();\n    let rhs_val = rhs();\n    match (lhs_val, rhs_val) {\n        (Ok(lhs_arr), Ok(rhs_arr))...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:217
    |
541 | ...= lhs();\n    let rhs_val = rhs();\n    match (lhs_val, rhs_val) {\n        (Ok(lhs_arr), Ok(rhs_arr)) => {\n            if !lhs_arr.v...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:258
    |
541 | ...atch (lhs_val, rhs_val) {\n        (Ok(lhs_arr), Ok(rhs_arr)) => {\n            if !lhs_arr.value(0) || !rhs_arr.value(0) {\n         ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:315
    |
541 | ...rr)) => {\n            if !lhs_arr.value(0) || !rhs_arr.value(0) {\n                return Ok(Box::new(|_batch| Ok(BooleanArray::from(...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:399
    |
541 | ...return Ok(Box::new(|_batch| Ok(BooleanArray::from(vec![false]))));\n            } else if lhs_arr.value(0) {\n                return O...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:441
    |
541 | ...y::from(vec![false]))));\n            } else if lhs_arr.value(0) {\n                return Ok(rhs);\n            } else if rhs_arr.val...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:474
    |
541 | ...     } else if lhs_arr.value(0) {\n                return Ok(rhs);\n            } else if rhs_arr.value(0) {\n                return O...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:516
    |
541 | ...         return Ok(rhs);\n            } else if rhs_arr.value(0) {\n                return Ok(lhs);\n            } else {\n           ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:549
    |
541 | ...     } else if rhs_arr.value(0) {\n                return Ok(lhs);\n            } else {\n                Ok(Box::new(move |batch: Rec...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:571
    |
541 | ....value(0) {\n                return Ok(lhs);\n            } else {\n                Ok(Box::new(move |batch: RecordBatch| {\n         ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:628
    |
541 | ... } else {\n                Ok(Box::new(move |batch: RecordBatch| {\n                    let lhs_arr = lhs(batch.clone())?;\n          ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:684
    |
541 | ...rdBatch| {\n                    let lhs_arr = lhs(batch.clone())?;\n                    let rhs_arr = rhs(batch)?;\n                  ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:732
    |
541 | ...s(batch.clone())?;\n                    let rhs_arr = rhs(batch)?;\n                    and(&lhs_arr, &rhs_arr)\n                }))\n...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:777
    |
541 | ...hs_arr = rhs(batch)?;\n                    and(&lhs_arr, &rhs_arr)\n                }))\n            }\n        }\n        (_, Err(_))...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:798
    |
541 | ...\n                    and(&lhs_arr, &rhs_arr)\n                }))\n            }\n        }\n        (_, Err(_)) => Err(ArrowError::I...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:813
    |
541 | ...       and(&lhs_arr, &rhs_arr)\n                }))\n            }\n        }\n        (_, Err(_)) => Err(ArrowError::InvalidArgumentE...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:824
    |
541 | ...&lhs_arr, &rhs_arr)\n                }))\n            }\n        }\n        (_, Err(_)) => Err(ArrowError::InvalidArgumentError("rhs f...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:924
    |
541 | ...Error::InvalidArgumentError("rhs failed to execute".to_string())),\n        (Err(_), _) => Err(ArrowError::InvalidArgumentError("lhs f...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:1024
    |
541 | ...Error::InvalidArgumentError("lhs failed to execute".to_string())),\n    }\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:1031
    |
541 | ...InvalidArgumentError("lhs failed to execute".to_string())),\n    }\n}
    |                                                                      ^

error: expected one of `:`, `@`, or `|`, found `&`
   --> crates/iceberg/src/arrow/reader.rs:541:14
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |              ^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found keyword `mut`
   --> crates/iceberg/src/arrow/reader.rs:541:30
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |                              ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found keyword `mut`
   --> crates/iceberg/src/arrow/reader.rs:541:66
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |                                                                  ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `)`
   --> crates/iceberg/src/arrow/reader.rs:541:98
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |                                                                                                  ^ expected one of `:`, `@`, or `|`
    |
    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)
help: if this is a parameter name, give it a type
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n: TypeName) -> Result<Box<PredicateResult>> {\n    let lhs_val = lhs();\n    let rhs_val = rhs();\n    match (lhs_val, rhs_val) {\n        (Ok(lhs_arr), Ok(rhs_arr)) => {\n            if !lhs_arr.value(0) || !rhs_arr.value(0) {\n                return Ok(Box::new(|_batch| Ok(BooleanArray::from(vec![false]))));\n            } else if lhs_arr.value(0) {\n                return Ok(rhs);\n            } else if rhs_arr.value(0) {\n                return Ok(lhs);\n            } else {\n                Ok(Box::new(move |batch: RecordBatch| {\n                    let lhs_arr = lhs(batch.clone())?;\n                    let rhs_arr = rhs(batch)?;\n                    and(&lhs_arr, &rhs_arr)\n                }))\n            }\n        }\n        (_, Err(_)) => Err(ArrowError::InvalidArgumentError("rhs failed to execute".to_string())),\n        (Err(_), _) => Err(ArrowError::InvalidArgumentError("lhs failed to execute".to_string())),\n    }\n}
    |                                                                                                  ++++++++++
help: if this is a type, explicitly ignore the parameter name
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\_: n) -> Result<Box<PredicateResult>> {\n    let lhs_val = lhs();\n    let rhs_val = rhs();\n    match (lhs_val, rhs_val) {\n        (Ok(lhs_arr), Ok(rhs_arr)) => {\n            if !lhs_arr.value(0) || !rhs_arr.value(0) {\n                return Ok(Box::new(|_batch| Ok(BooleanArray::from(vec![false]))));\n            } else if lhs_arr.value(0) {\n                return Ok(rhs);\n            } else if rhs_arr.value(0) {\n                return Ok(lhs);\n            } else {\n                Ok(Box::new(move |batch: RecordBatch| {\n                    let lhs_arr = lhs(batch.clone())?;\n                    let rhs_arr = rhs(batch)?;\n                    and(&lhs_arr, &rhs_arr)\n                }))\n            }\n        }\n        (_, Err(_)) => Err(ArrowError::InvalidArgumentError("rhs failed to execute".to_string())),\n        (Err(_), _) => Err(ArrowError::InvalidArgumentError("lhs failed to execute".to_string())),\n    }\n}
    |                                                                                                 ++

error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `let`
   --> crates/iceberg/src/arrow/reader.rs:541:139
    |
541 | ...ult>,\n) -> Result<Box<PredicateResult>> {\n    let lhs_val = lhs();\n    let rhs_val = rhs();\n    match (lhs_val, rhs_val) {\n      ...
    |                                                    ^^^ expected one of 8 possible tokens

warning: unused import: `and`
  --> crates/iceberg/src/arrow/reader.rs:21:28
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                            ^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0186]: method `and` has a `&mut self` declaration in the trait, but not in the impl
   --> crates/iceberg/src/arrow/reader.rs:541:1
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&mut self` in impl
    |
   ::: crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:35:5
    |
35  |     fn and(&mut self, lhs: Self::T, rhs: Self::T) -> Result<Self::T>;
    |     ----------------------------------------------------------------- `&mut self` used in trait

For more information about this error, try `rustc --explain E0186`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 32 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
warning: `iceberg` (lib test) generated 1 warning (1 duplicate)
error: could not compile `iceberg` (lib test) due to 32 previous errors; 1 warning emitted

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:8
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |        ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:24
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |                        ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:60
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |                                                            ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:96
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |                                                                                                ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:133
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |                                                                                                                                     ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:159
    |
541 | ...t>,\n) -> Result<Box<PredicateResult>> {\n    let lhs_val = lhs();\n    let rhs_val = rhs();\n    match (lhs_val, rhs_val) {\n        ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:185
    |
541 | ...cateResult>> {\n    let lhs_val = lhs();\n    let rhs_val = rhs();\n    match (lhs_val, rhs_val) {\n        (Ok(lhs_arr), Ok(rhs_arr))...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:217
    |
541 | ...= lhs();\n    let rhs_val = rhs();\n    match (lhs_val, rhs_val) {\n        (Ok(lhs_arr), Ok(rhs_arr)) => {\n            if !lhs_arr.v...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:258
    |
541 | ...atch (lhs_val, rhs_val) {\n        (Ok(lhs_arr), Ok(rhs_arr)) => {\n            if !lhs_arr.value(0) || !rhs_arr.value(0) {\n         ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:315
    |
541 | ...rr)) => {\n            if !lhs_arr.value(0) || !rhs_arr.value(0) {\n                return Ok(Box::new(|_batch| Ok(BooleanArray::from(...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:399
    |
541 | ...return Ok(Box::new(|_batch| Ok(BooleanArray::from(vec![false]))));\n            } else if lhs_arr.value(0) {\n                return O...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:441
    |
541 | ...y::from(vec![false]))));\n            } else if lhs_arr.value(0) {\n                return Ok(rhs);\n            } else if rhs_arr.val...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:474
    |
541 | ...     } else if lhs_arr.value(0) {\n                return Ok(rhs);\n            } else if rhs_arr.value(0) {\n                return O...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:516
    |
541 | ...         return Ok(rhs);\n            } else if rhs_arr.value(0) {\n                return Ok(lhs);\n            } else {\n           ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:549
    |
541 | ...     } else if rhs_arr.value(0) {\n                return Ok(lhs);\n            } else {\n                Ok(Box::new(move |batch: Rec...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:571
    |
541 | ....value(0) {\n                return Ok(lhs);\n            } else {\n                Ok(Box::new(move |batch: RecordBatch| {\n         ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:628
    |
541 | ... } else {\n                Ok(Box::new(move |batch: RecordBatch| {\n                    let lhs_arr = lhs(batch.clone())?;\n          ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:684
    |
541 | ...rdBatch| {\n                    let lhs_arr = lhs(batch.clone())?;\n                    let rhs_arr = rhs(batch)?;\n                  ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:732
    |
541 | ...s(batch.clone())?;\n                    let rhs_arr = rhs(batch)?;\n                    and(&lhs_arr, &rhs_arr)\n                }))\n...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:777
    |
541 | ...hs_arr = rhs(batch)?;\n                    and(&lhs_arr, &rhs_arr)\n                }))\n            }\n        }\n        (_, Err(_))...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:798
    |
541 | ...\n                    and(&lhs_arr, &rhs_arr)\n                }))\n            }\n        }\n        (_, Err(_)) => Err(ArrowError::I...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:813
    |
541 | ...       and(&lhs_arr, &rhs_arr)\n                }))\n            }\n        }\n        (_, Err(_)) => Err(ArrowError::InvalidArgumentE...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:824
    |
541 | ...&lhs_arr, &rhs_arr)\n                }))\n            }\n        }\n        (_, Err(_)) => Err(ArrowError::InvalidArgumentError("rhs f...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:924
    |
541 | ...Error::InvalidArgumentError("rhs failed to execute".to_string())),\n        (Err(_), _) => Err(ArrowError::InvalidArgumentError("lhs f...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:1024
    |
541 | ...Error::InvalidArgumentError("lhs failed to execute".to_string())),\n    }\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:541:1031
    |
541 | ...InvalidArgumentError("lhs failed to execute".to_string())),\n    }\n}
    |                                                                      ^

error: expected one of `:`, `@`, or `|`, found `&`
   --> crates/iceberg/src/arrow/reader.rs:541:14
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |              ^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found keyword `mut`
   --> crates/iceberg/src/arrow/reader.rs:541:30
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |                              ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found keyword `mut`
   --> crates/iceberg/src/arrow/reader.rs:541:66
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |                                                                  ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `)`
   --> crates/iceberg/src/arrow/reader.rs:541:98
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    |                                                                                                  ^ expected one of `:`, `@`, or `|`
    |
    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)
help: if this is a parameter name, give it a type
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n: TypeName) -> Result<Box<PredicateResult>> {\n    let lhs_val = lhs();\n    let rhs_val = rhs();\n    match (lhs_val, rhs_val) {\n        (Ok(lhs_arr), Ok(rhs_arr)) => {\n            if !lhs_arr.value(0) || !rhs_arr.value(0) {\n                return Ok(Box::new(|_batch| Ok(BooleanArray::from(vec![false]))));\n            } else if lhs_arr.value(0) {\n                return Ok(rhs);\n            } else if rhs_arr.value(0) {\n                return Ok(lhs);\n            } else {\n                Ok(Box::new(move |batch: RecordBatch| {\n                    let lhs_arr = lhs(batch.clone())?;\n                    let rhs_arr = rhs(batch)?;\n                    and(&lhs_arr, &rhs_arr)\n                }))\n            }\n        }\n        (_, Err(_)) => Err(ArrowError::InvalidArgumentError("rhs failed to execute".to_string())),\n        (Err(_), _) => Err(ArrowError::InvalidArgumentError("lhs failed to execute".to_string())),\n    }\n}
    |                                                                                                  ++++++++++
help: if this is a type, explicitly ignore the parameter name
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\_: n) -> Result<Box<PredicateResult>> {\n    let lhs_val = lhs();\n    let rhs_val = rhs();\n    match (lhs_val, rhs_val) {\n        (Ok(lhs_arr), Ok(rhs_arr)) => {\n            if !lhs_arr.value(0) || !rhs_arr.value(0) {\n                return Ok(Box::new(|_batch| Ok(BooleanArray::from(vec![false]))));\n            } else if lhs_arr.value(0) {\n                return Ok(rhs);\n            } else if rhs_arr.value(0) {\n                return Ok(lhs);\n            } else {\n                Ok(Box::new(move |batch: RecordBatch| {\n                    let lhs_arr = lhs(batch.clone())?;\n                    let rhs_arr = rhs(batch)?;\n                    and(&lhs_arr, &rhs_arr)\n                }))\n            }\n        }\n        (_, Err(_)) => Err(ArrowError::InvalidArgumentError("rhs failed to execute".to_string())),\n        (Err(_), _) => Err(ArrowError::InvalidArgumentError("lhs failed to execute".to_string())),\n    }\n}
    |                                                                                                 ++

error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `let`
   --> crates/iceberg/src/arrow/reader.rs:541:139
    |
541 | ...ult>,\n) -> Result<Box<PredicateResult>> {\n    let lhs_val = lhs();\n    let rhs_val = rhs();\n    match (lhs_val, rhs_val) {\n      ...
    |                                                    ^^^ expected one of 8 possible tokens

warning: unused import: `and`
  --> crates/iceberg/src/arrow/reader.rs:21:28
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                            ^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0186]: method `and` has a `&mut self` declaration in the trait, but not in the impl
   --> crates/iceberg/src/arrow/reader.rs:541:1
    |
541 | fn and(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n   ...
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&mut self` in impl
    |
   ::: crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:35:5
    |
35  |     fn and(&mut self, lhs: Self::T, rhs: Self::T) -> Result<Self::T>;
    |     ----------------------------------------------------------------- `&mut self` used in trait

For more information about this error, try `rustc --explain E0186`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 32 previous errors; 1 warning emitted


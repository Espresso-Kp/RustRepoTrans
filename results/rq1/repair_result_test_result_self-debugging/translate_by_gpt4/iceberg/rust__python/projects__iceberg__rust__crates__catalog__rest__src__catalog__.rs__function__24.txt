Fail
file path is :
projects/iceberg/rust/crates/catalog/rest/src/catalog.rs

output is:



error is :
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
error[E0252]: the name `HeaderValue` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:33:52
   |
25 | use reqwest::header::HeaderValue;
   |     ---------------------------- previous import of the type `HeaderValue` here
...
33 | use reqwest::header::{self, HeaderMap, HeaderName, HeaderValue};
   |                                                    ^^^^^^^^^^^ `HeaderValue` reimported here
   |
   = note: `HeaderValue` must be defined only once in the type namespace of this module

error[E0252]: the name `Request` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:34:23
   |
22 | use reqwest::{Request, Response};
   |               ------- previous import of the type `Request` here
...
34 | use reqwest::{Client, Request, Response, StatusCode, Url};
   |                       ^^^^^^^--
   |                       |
   |                       `Request` reimported here
   |                       help: remove unnecessary import
   |
   = note: `Request` must be defined only once in the type namespace of this module

error[E0252]: the name `Response` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:34:32
   |
22 | use reqwest::{Request, Response};
   |                        -------- previous import of the type `Response` here
...
34 | use reqwest::{Client, Request, Response, StatusCode, Url};
   |                                ^^^^^^^^--
   |                                |
   |                                `Response` reimported here
   |                                help: remove unnecessary import
   |
   = note: `Response` must be defined only once in the type namespace of this module

error[E0252]: the name `StatusCode` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:34:42
   |
26 | use reqwest::StatusCode;
   |     ------------------- previous import of the type `StatusCode` here
...
34 | use reqwest::{Client, Request, Response, StatusCode, Url};
   |                                          ^^^^^^^^^^--
   |                                          |
   |                                          `StatusCode` reimported here
   |                                          help: remove unnecessary import
   |
   = note: `StatusCode` must be defined only once in the type namespace of this module

error[E0252]: the name `Error` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:46:14
   |
24 | use reqwest::Error;
   |     -------------- previous import of the type `Error` here
...
46 |     Catalog, Error, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ^^^^^ `Error` reimported here
   |
   = note: `Error` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
46 |     Catalog, Error as OtherError, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ~~~~~~~~~~~~~~~~~~~

warning: unused import: `std::convert::Infallible`
  --> crates/catalog/rest/src/catalog.rs:21:5
   |
21 | use std::convert::Infallible;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `tokio::runtime::Runtime`
  --> crates/catalog/rest/src/catalog.rs:23:5
   |
23 | use tokio::runtime::Runtime;
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `HeaderValue`
  --> crates/catalog/rest/src/catalog.rs:33:52
   |
33 | use reqwest::header::{self, HeaderMap, HeaderName, HeaderValue};
   |                                                    ^^^^^^^^^^^

warning: unused imports: `Request`, `Response`, `StatusCode`
  --> crates/catalog/rest/src/catalog.rs:34:23
   |
34 | use reqwest::{Client, Request, Response, StatusCode, Url};
   |                       ^^^^^^^  ^^^^^^^^  ^^^^^^^^^^

warning: unused import: `Error`
  --> crates/catalog/rest/src/catalog.rs:46:14
   |
46 |     Catalog, Error, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ^^^^^

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:213:24
    |
213 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:213:17
    |
213 |                 Error::new(
    |                 ^^^^^^^^^^
214 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:215:21
    |
215 |                     "Failed to parse response from rest catalog server!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
215 |                     Some("Failed to parse response from rest catalog server!"),
    |                     +++++                                                    +

error[E0599]: no method named `with_context` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:217:18
    |
213 | /                 Error::new(
214 | |                     ErrorKind::Unexpected,
215 | |                     "Failed to parse response from rest catalog server!",
216 | |                 )
217 | |                 .with_context("json", String::from_utf8_lossy(&text))
    | |                 -^^^^^^^^^^^^ help: there is a method with a similar name: `is_connect`
    | |_________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:224:24
    |
224 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:224:17
    |
224 |                 Error::new(
    |                 ^^^^^^^^^^
225 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:226:21
    |
226 |                     "Failed to parse response from rest catalog server!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
226 |                     Some("Failed to parse response from rest catalog server!"),
    |                     +++++                                                    +

error[E0599]: no method named `with_context` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:228:18
    |
224 | /                 Error::new(
225 | |                     ErrorKind::Unexpected,
226 | |                     "Failed to parse response from rest catalog server!",
227 | |                 )
228 | |                 .with_context("json", String::from_utf8_lossy(&text))
    | |                 -^^^^^^^^^^^^ help: there is a method with a similar name: `is_connect`
    | |_________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:248:24
    |
248 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:248:17
    |
248 |                 Error::new(
    |                 ^^^^^^^^^^
249 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:250:21
    |
250 |                     "Failed to parse response from rest catalog server!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
250 |                     Some("Failed to parse response from rest catalog server!"),
    |                     +++++                                                    +

error[E0599]: no method named `with_context` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:252:18
    |
248 | /                 Error::new(
249 | |                     ErrorKind::Unexpected,
250 | |                     "Failed to parse response from rest catalog server!",
251 | |                 )
252 | |                 .with_context("json", String::from_utf8_lossy(&text))
    | |                 -^^^^^^^^^^^^ help: there is a method with a similar name: `is_connect`
    | |_________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:274:24
    |
274 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:274:17
    |
274 |                 Error::new(
    |                 ^^^^^^^^^^
275 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:276:21
    |
276 |                     "Failed to parse response from rest catalog server!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
276 |                     Some("Failed to parse response from rest catalog server!"),
    |                     +++++                                                    +

error[E0599]: no method named `with_context` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:278:18
    |
274 | /                 Error::new(
275 | |                     ErrorKind::Unexpected,
276 | |                     "Failed to parse response from rest catalog server!",
277 | |                 )
278 | |                 .with_context("code", code.to_string())
    | |                 -^^^^^^^^^^^^ help: there is a method with a similar name: `is_connect`
    | |_________________|
    | 

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:631:41
    |
631 |                 .query::<TokenResponse, ErrorResponse, OK>(req)
    |                  -----                  ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |                  |
    |                  required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:634:28
    |
634 |                       Error::new(
    |                              ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:634:21
    |
634 |                     Error::new(
    |                     ^^^^^^^^^^
635 |                         ErrorKind::Unexpected,
    |                         --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:636:25
    |
636 |                         "Failed to fetch access token from catalog server!",
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
636 |                         Some("Failed to fetch access token from catalog server!"),
    |                         +++++                                                   +

error[E0599]: no method named `with_source` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:638:22
    |
634 | /                     Error::new(
635 | |                         ErrorKind::Unexpected,
636 | |                         "Failed to fetch access token from catalog server!",
637 | |                     )
638 | |                     .with_source(e)
    | |                     -^^^^^^^^^^^ help: there is a method with a similar name: `with_url`
    | |_____________________|
    | 

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:656:37
    |
656 |             .query::<CatalogConfig, ErrorResponse, OK>(request.build()?)
    |              -----                  ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:135:28
    |
135 |                       Error::new(
    |                              ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:135:21
    |
135 |                     Error::new(
    |                     ^^^^^^^^^^
136 |                         ErrorKind::DataInvalid,
    |                         ---------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:137:25
    |
137 |                         "Invalid token received from catalog server!",
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
137 |                         Some("Invalid token received from catalog server!"),
    |                         +++++                                             +

error[E0599]: no method named `with_source` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:139:22
    |
135 | /                     Error::new(
136 | |                         ErrorKind::DataInvalid,
137 | |                         "Invalid token received from catalog server!",
138 | |                     )
139 | |                     .with_source(e)
    | |                     -^^^^^^^^^^^ help: there is a method with a similar name: `with_url`
    | |_____________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:150:36
    |
150 |   ...                   Error::new(
    |                                ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:152:33
    |
152 | ...                   format!("Invalid header name: {stripped_key}!"),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<_>`, found `String`
    |
    = note: expected enum `std::option::Option<_>`
             found struct `std::string::String`
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)
help: call `Into::into` on this expression to convert `std::string::String` into `std::option::Option<_>`
    |
152 |                                 format!("Invalid header name: {stripped_key}!").into(),
    |                                                                                +++++++

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:151:33
    |
150 | ...                   Error::new(
    |                       ---------- arguments to this function are incorrect
151 | ...                       ErrorKind::DataInvalid,
    |                           ^^^^^^^^^^^^^^^^^^^^^^ expected `Kind`, found `ErrorKind`
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^

error[E0599]: no method named `with_source` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:154:30
    |
150 | / ...                   Error::new(
151 | | ...                       ErrorKind::DataInvalid,
152 | | ...                       format!("Invalid header name: {stripped_key}!"),
153 | | ...                   )
154 | | ...                   .with_source(e)
    | |                       -^^^^^^^^^^^ help: there is a method with a similar name: `with_url`
    | |_______________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:157:36
    |
157 |   ...                   Error::new(
    |                                ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:159:33
    |
159 | ...                   format!("Invalid header value: {value}!"),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<_>`, found `String`
    |
    = note: expected enum `std::option::Option<_>`
             found struct `std::string::String`
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)
help: call `Into::into` on this expression to convert `std::string::String` into `std::option::Option<_>`
    |
159 |                                 format!("Invalid header value: {value}!").into(),
    |                                                                          +++++++

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:158:33
    |
157 | ...                   Error::new(
    |                       ---------- arguments to this function are incorrect
158 | ...                       ErrorKind::DataInvalid,
    |                           ^^^^^^^^^^^^^^^^^^^^^^ expected `Kind`, found `ErrorKind`
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^

error[E0599]: no method named `with_source` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:161:30
    |
157 | / ...                   Error::new(
158 | | ...                       ErrorKind::DataInvalid,
159 | | ...                       format!("Invalid header value: {value}!"),
160 | | ...                   )
161 | | ...                   .with_source(e)
    | |                       -^^^^^^^^^^^ help: there is a method with a similar name: `with_url`
    | |_______________________|
    | 

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:308:45
    |
308 |             .query::<ListNamespaceResponse, ErrorResponse, OK>(request.build()?)
    |              -----                          ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:335:38
    |
335 |             .query::<NamespaceSerde, ErrorResponse, OK>(request)
    |              -----                   ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:351:38
    |
351 |             .query::<NamespaceSerde, ErrorResponse, OK>(request)
    |              -----                   ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:366:20
    |
366 |           Err(Error::new(
    |                      ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:366:13
    |
366 |         Err(Error::new(
    |             ^^^^^^^^^^
367 |             ErrorKind::FeatureUnsupported,
    |             ----------------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:368:13
    |
368 |             "Updating namespace not supported yet!",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
368 |             Some("Updating namespace not supported yet!"),
    |             +++++                                       +

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:366:13
    |
366 |           Err(Error::new(
    |  _________---_^
    | |         |
    | |         arguments to this enum variant are incorrect
367 | |             ErrorKind::FeatureUnsupported,
368 | |             "Updating namespace not supported yet!",
369 | |         ))
    | |_________^ expected `iceberg::Error`, found `reqwest::Error`
    |
    = note: `reqwest::Error` and `iceberg::Error` have similar names, but are actually distinct types
note: `reqwest::Error` is defined in crate `reqwest`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:16:1
    |
16  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `iceberg::Error` is defined in crate `iceberg`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `reqwest::Error` due to the type of the argument passed
   --> crates/catalog/rest/src/catalog.rs:366:9
    |
366 |            Err(Error::new(
    |  __________^___-
    | | _________|
    | ||
367 | ||             ErrorKind::FeatureUnsupported,
368 | ||             "Updating namespace not supported yet!",
369 | ||         ))
    | ||_________-^
    | |__________|
    |            this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `reqwest::Error` into `iceberg::Error`
    |
369 |         ).into())
    |          +++++++

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:380:33
    |
380 |             .do_execute::<bool, ErrorResponse>(request, |resp| match resp.status() {
    |              ----------         ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::do_execute`
   --> crates/catalog/rest/src/catalog.rs:261:50
    |
261 |     async fn do_execute<R, E: DeserializeOwned + Into<Error>>(
    |                                                  ^^^^^^^^^^^ required by this bound in `HttpClient::do_execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:397:24
    |
397 |             .execute::<ErrorResponse, NO_CONTENT>(request)
    |              -------   ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::execute`
   --> crates/catalog/rest/src/catalog.rs:236:44
    |
236 |     async fn execute<E: DeserializeOwned + Into<Error>, const SUCCESS_CODE: u16>(
    |                                            ^^^^^^^^^^^ required by this bound in `HttpClient::execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:411:41
    |
411 |             .query::<ListTableResponse, ErrorResponse, OK>(request)
    |              -----                      ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:447:41
    |
447 |             .query::<LoadTableResponse, ErrorResponse, OK>(request)
    |              -----                      ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:457:24
    |
457 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:457:17
    |
457 |                 Error::new(
    |                 ^^^^^^^^^^
458 |                     ErrorKind::DataInvalid,
    |                     ---------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:459:21
    |
459 |                     "Metadata location missing in create table response!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
459 |                     Some("Metadata location missing in create table response!"),
    |                     +++++                                                     +

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:477:41
    |
477 |             .query::<LoadTableResponse, ErrorResponse, OK>(request)
    |              -----                      ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0599]: no method named `table_endpoint` found for reference `&catalog::RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:499:26
    |
499 |     let table_url = self.table_endpoint(table);
    |                          ^^^^^^^^^^^^^^ method not found in `&RestCatalog`
    |
help: one of the expressions' fields has a method of the same name
    |
499 |     let table_url = self.config.table_endpoint(table);
    |                          +++++++

error[E0599]: no method named `delete` found for struct `HttpClient` in the current scope
   --> crates/catalog/rest/src/catalog.rs:501:31
    |
197 | struct HttpClient(Client);
    | ----------------- method `delete` not found for this struct
...
501 |     let request = self.client.delete(table_url.clone()).unwrap();
    |                               ^^^^^^ method not found in `HttpClient`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `delete`, perhaps you need to implement one of them:
            candidate #1: `opendal::raw::accessor::Access`
            candidate #2: `opendal::raw::layer::LayeredAccess`
            candidate #3: `opendal::raw::adapters::kv::api::Adapter`
            candidate #4: `opendal::raw::adapters::typed_kv::api::Adapter`
            candidate #5: `object_store::ObjectStore`
            candidate #6: `similar::algorithms::hook::DiffHook`
help: one of the expressions' fields has a method of the same name
    |
501 |     let request = self.client.0.delete(table_url.clone()).unwrap();
    |                               ++

error[E0599]: no method named `status` found for unit type `()` in the current scope
   --> crates/catalog/rest/src/catalog.rs:506:24
    |
506 |             match resp.status() {
    |                        ^^^^^^ method not found in `()`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:508:53
    |
508 |                   StatusCode::NOT_FOUND => Err(Error::new(
    |                                                       ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:508:46
    |
508 |                 StatusCode::NOT_FOUND => Err(Error::new(
    |                                              ^^^^^^^^^^
509 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:510:21
    |
510 |                     "NoSuchTableError"
    |                     ^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
510 |                     Some("NoSuchTableError")
    |                     +++++                  +

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:508:46
    |
508 |                   StatusCode::NOT_FOUND => Err(Error::new(
    |  __________________________________________---_^
    | |                                          |
    | |                                          arguments to this enum variant are incorrect
509 | |                     ErrorKind::Unexpected,
510 | |                     "NoSuchTableError"
511 | |                 )),
    | |_________________^ expected `iceberg::Error`, found `reqwest::Error`
    |
    = note: `reqwest::Error` and `iceberg::Error` have similar names, but are actually distinct types
note: `reqwest::Error` is defined in crate `reqwest`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:16:1
    |
16  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `iceberg::Error` is defined in crate `iceberg`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `reqwest::Error` due to the type of the argument passed
   --> crates/catalog/rest/src/catalog.rs:508:42
    |
508 |                    StatusCode::NOT_FOUND => Err(Error::new(
    |  ___________________________________________^___-
    | | __________________________________________|
    | ||
509 | ||                     ErrorKind::Unexpected,
510 | ||                     "NoSuchTableError"
511 | ||                 )),
    | ||_________________-^
    | |__________________|
    |                    this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `reqwest::Error` into `iceberg::Error`
    |
511 |                 ).into()),
    |                  +++++++

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:512:34
    |
512 |                   _ =>  Err(Error::new(
    |                                    ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:512:27
    |
512 |                 _ =>  Err(Error::new(
    |                           ^^^^^^^^^^
513 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:514:21
    |
514 |                     "Unexpected HTTP response code",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
514 |                     Some("Unexpected HTTP response code"),
    |                     +++++                               +

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:512:27
    |
512 |                   _ =>  Err(Error::new(
    |  _______________________---_^
    | |                       |
    | |                       arguments to this enum variant are incorrect
513 | |                     ErrorKind::Unexpected,
514 | |                     "Unexpected HTTP response code",
515 | |                 )),
    | |_________________^ expected `iceberg::Error`, found `reqwest::Error`
    |
    = note: `reqwest::Error` and `iceberg::Error` have similar names, but are actually distinct types
note: `reqwest::Error` is defined in crate `reqwest`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:16:1
    |
16  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `iceberg::Error` is defined in crate `iceberg`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `reqwest::Error` due to the type of the argument passed
   --> crates/catalog/rest/src/catalog.rs:512:23
    |
512 |                    _ =>  Err(Error::new(
    |  ________________________^___-
    | | _______________________|
    | ||
513 | ||                     ErrorKind::Unexpected,
514 | ||                     "Unexpected HTTP response code",
515 | ||                 )),
    | ||_________________-^
    | |__________________|
    |                    this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `reqwest::Error` into `iceberg::Error`
    |
515 |                 ).into()),
    |                  +++++++

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:518:31
    |
518 |           Err(_e) => Err(Error::new(
    |                                 ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:518:24
    |
518 |         Err(_e) => Err(Error::new(
    |                        ^^^^^^^^^^
519 |             ErrorKind::Unexpected,
    |             --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:520:13
    |
520 |             "Network error",
    |             ^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
520 |             Some("Network error"),
    |             +++++               +

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:518:24
    |
518 |           Err(_e) => Err(Error::new(
    |  ____________________---_^
    | |                    |
    | |                    arguments to this enum variant are incorrect
519 | |             ErrorKind::Unexpected,
520 | |             "Network error",
521 | |         )),
    | |_________^ expected `iceberg::Error`, found `reqwest::Error`
    |
    = note: `reqwest::Error` and `iceberg::Error` have similar names, but are actually distinct types
note: `reqwest::Error` is defined in crate `reqwest`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:16:1
    |
16  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `iceberg::Error` is defined in crate `iceberg`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `reqwest::Error` due to the type of the argument passed
   --> crates/catalog/rest/src/catalog.rs:518:20
    |
518 |            Err(_e) => Err(Error::new(
    |  _____________________^___-
    | | ____________________|
    | ||
519 | ||             ErrorKind::Unexpected,
520 | ||             "Network error",
521 | ||         )),
    | ||_________-^
    | |__________|
    |            this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `reqwest::Error` into `iceberg::Error`
    |
521 |         ).into()),
    |          +++++++

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:536:33
    |
536 |             .do_execute::<bool, ErrorResponse>(request, |resp| match resp.status() {
    |              ----------         ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::do_execute`
   --> crates/catalog/rest/src/catalog.rs:261:50
    |
261 |     async fn do_execute<R, E: DeserializeOwned + Into<Error>>(
    |                                                  ^^^^^^^^^^^ required by this bound in `HttpClient::do_execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:557:24
    |
557 |             .execute::<ErrorResponse, NO_CONTENT>(request)
    |              -------   ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::execute`
   --> crates/catalog/rest/src/catalog.rs:236:44
    |
236 |     async fn execute<E: DeserializeOwned + Into<Error>, const SUCCESS_CODE: u16>(
    |                                            ^^^^^^^^^^^ required by this bound in `HttpClient::execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:576:43
    |
576 |             .query::<CommitTableResponse, ErrorResponse, OK>(request)
    |              -----                        ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:692:35
    |
692 |                   return Err(Error::new(
    |                                     ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:692:28
    |
692 |                 return Err(Error::new(
    |                            ^^^^^^^^^^
693 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:694:21
    |
694 |                     "Unable to load file io, neither warehouse nor metadata location is set!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
694 |                     Some("Unable to load file io, neither warehouse nor metadata location is set!"),
    |                     +++++                                                                         +

Some errors have detailed explanations: E0252, E0277, E0308, E0599, E0624.
For more information about an error, try `rustc --explain E0252`.
warning: `iceberg-catalog-rest` (lib test) generated 5 warnings
error: could not compile `iceberg-catalog-rest` (lib test) due to 63 previous errors; 5 warnings emitted
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
error[E0252]: the name `HeaderValue` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:33:52
   |
25 | use reqwest::header::HeaderValue;
   |     ---------------------------- previous import of the type `HeaderValue` here
...
33 | use reqwest::header::{self, HeaderMap, HeaderName, HeaderValue};
   |                                                    ^^^^^^^^^^^ `HeaderValue` reimported here
   |
   = note: `HeaderValue` must be defined only once in the type namespace of this module

error[E0252]: the name `Request` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:34:23
   |
22 | use reqwest::{Request, Response};
   |               ------- previous import of the type `Request` here
...
34 | use reqwest::{Client, Request, Response, StatusCode, Url};
   |                       ^^^^^^^--
   |                       |
   |                       `Request` reimported here
   |                       help: remove unnecessary import
   |
   = note: `Request` must be defined only once in the type namespace of this module

error[E0252]: the name `Response` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:34:32
   |
22 | use reqwest::{Request, Response};
   |                        -------- previous import of the type `Response` here
...
34 | use reqwest::{Client, Request, Response, StatusCode, Url};
   |                                ^^^^^^^^--
   |                                |
   |                                `Response` reimported here
   |                                help: remove unnecessary import
   |
   = note: `Response` must be defined only once in the type namespace of this module

error[E0252]: the name `StatusCode` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:34:42
   |
26 | use reqwest::StatusCode;
   |     ------------------- previous import of the type `StatusCode` here
...
34 | use reqwest::{Client, Request, Response, StatusCode, Url};
   |                                          ^^^^^^^^^^--
   |                                          |
   |                                          `StatusCode` reimported here
   |                                          help: remove unnecessary import
   |
   = note: `StatusCode` must be defined only once in the type namespace of this module

error[E0252]: the name `Error` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:46:14
   |
24 | use reqwest::Error;
   |     -------------- previous import of the type `Error` here
...
46 |     Catalog, Error, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ^^^^^ `Error` reimported here
   |
   = note: `Error` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
46 |     Catalog, Error as OtherError, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ~~~~~~~~~~~~~~~~~~~

error[E0433]: failed to resolve: use of undeclared crate or module `tokio`
  --> crates/catalog/rest/src/catalog.rs:23:5
   |
23 | use tokio::runtime::Runtime;
   |     ^^^^^ use of undeclared crate or module `tokio`

warning: unused import: `std::convert::Infallible`
  --> crates/catalog/rest/src/catalog.rs:21:5
   |
21 | use std::convert::Infallible;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `HeaderValue`
  --> crates/catalog/rest/src/catalog.rs:33:52
   |
33 | use reqwest::header::{self, HeaderMap, HeaderName, HeaderValue};
   |                                                    ^^^^^^^^^^^

warning: unused imports: `Request`, `Response`, `StatusCode`
  --> crates/catalog/rest/src/catalog.rs:34:23
   |
34 | use reqwest::{Client, Request, Response, StatusCode, Url};
   |                       ^^^^^^^  ^^^^^^^^  ^^^^^^^^^^

warning: unused import: `Error`
  --> crates/catalog/rest/src/catalog.rs:46:14
   |
46 |     Catalog, Error, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ^^^^^

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:213:24
    |
213 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:213:17
    |
213 |                 Error::new(
    |                 ^^^^^^^^^^
214 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:215:21
    |
215 |                     "Failed to parse response from rest catalog server!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
215 |                     Some("Failed to parse response from rest catalog server!"),
    |                     +++++                                                    +

error[E0599]: no method named `with_context` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:217:18
    |
213 | /                 Error::new(
214 | |                     ErrorKind::Unexpected,
215 | |                     "Failed to parse response from rest catalog server!",
216 | |                 )
217 | |                 .with_context("json", String::from_utf8_lossy(&text))
    | |                 -^^^^^^^^^^^^ help: there is a method with a similar name: `is_connect`
    | |_________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:224:24
    |
224 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:224:17
    |
224 |                 Error::new(
    |                 ^^^^^^^^^^
225 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:226:21
    |
226 |                     "Failed to parse response from rest catalog server!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
226 |                     Some("Failed to parse response from rest catalog server!"),
    |                     +++++                                                    +

error[E0599]: no method named `with_context` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:228:18
    |
224 | /                 Error::new(
225 | |                     ErrorKind::Unexpected,
226 | |                     "Failed to parse response from rest catalog server!",
227 | |                 )
228 | |                 .with_context("json", String::from_utf8_lossy(&text))
    | |                 -^^^^^^^^^^^^ help: there is a method with a similar name: `is_connect`
    | |_________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:248:24
    |
248 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:248:17
    |
248 |                 Error::new(
    |                 ^^^^^^^^^^
249 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:250:21
    |
250 |                     "Failed to parse response from rest catalog server!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
250 |                     Some("Failed to parse response from rest catalog server!"),
    |                     +++++                                                    +

error[E0599]: no method named `with_context` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:252:18
    |
248 | /                 Error::new(
249 | |                     ErrorKind::Unexpected,
250 | |                     "Failed to parse response from rest catalog server!",
251 | |                 )
252 | |                 .with_context("json", String::from_utf8_lossy(&text))
    | |                 -^^^^^^^^^^^^ help: there is a method with a similar name: `is_connect`
    | |_________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:274:24
    |
274 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:274:17
    |
274 |                 Error::new(
    |                 ^^^^^^^^^^
275 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:276:21
    |
276 |                     "Failed to parse response from rest catalog server!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
276 |                     Some("Failed to parse response from rest catalog server!"),
    |                     +++++                                                    +

error[E0599]: no method named `with_context` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:278:18
    |
274 | /                 Error::new(
275 | |                     ErrorKind::Unexpected,
276 | |                     "Failed to parse response from rest catalog server!",
277 | |                 )
278 | |                 .with_context("code", code.to_string())
    | |                 -^^^^^^^^^^^^ help: there is a method with a similar name: `is_connect`
    | |_________________|
    | 

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:631:41
    |
631 |                 .query::<TokenResponse, ErrorResponse, OK>(req)
    |                  -----                  ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |                  |
    |                  required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:634:28
    |
634 |                       Error::new(
    |                              ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:634:21
    |
634 |                     Error::new(
    |                     ^^^^^^^^^^
635 |                         ErrorKind::Unexpected,
    |                         --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:636:25
    |
636 |                         "Failed to fetch access token from catalog server!",
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
636 |                         Some("Failed to fetch access token from catalog server!"),
    |                         +++++                                                   +

error[E0599]: no method named `with_source` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:638:22
    |
634 | /                     Error::new(
635 | |                         ErrorKind::Unexpected,
636 | |                         "Failed to fetch access token from catalog server!",
637 | |                     )
638 | |                     .with_source(e)
    | |                     -^^^^^^^^^^^ help: there is a method with a similar name: `with_url`
    | |_____________________|
    | 

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:656:37
    |
656 |             .query::<CatalogConfig, ErrorResponse, OK>(request.build()?)
    |              -----                  ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:135:28
    |
135 |                       Error::new(
    |                              ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:135:21
    |
135 |                     Error::new(
    |                     ^^^^^^^^^^
136 |                         ErrorKind::DataInvalid,
    |                         ---------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:137:25
    |
137 |                         "Invalid token received from catalog server!",
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
137 |                         Some("Invalid token received from catalog server!"),
    |                         +++++                                             +

error[E0599]: no method named `with_source` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:139:22
    |
135 | /                     Error::new(
136 | |                         ErrorKind::DataInvalid,
137 | |                         "Invalid token received from catalog server!",
138 | |                     )
139 | |                     .with_source(e)
    | |                     -^^^^^^^^^^^ help: there is a method with a similar name: `with_url`
    | |_____________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:150:36
    |
150 |   ...                   Error::new(
    |                                ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:152:33
    |
152 | ...                   format!("Invalid header name: {stripped_key}!"),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<_>`, found `String`
    |
    = note: expected enum `std::option::Option<_>`
             found struct `std::string::String`
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)
help: call `Into::into` on this expression to convert `std::string::String` into `std::option::Option<_>`
    |
152 |                                 format!("Invalid header name: {stripped_key}!").into(),
    |                                                                                +++++++

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:151:33
    |
150 | ...                   Error::new(
    |                       ---------- arguments to this function are incorrect
151 | ...                       ErrorKind::DataInvalid,
    |                           ^^^^^^^^^^^^^^^^^^^^^^ expected `Kind`, found `ErrorKind`
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^

error[E0599]: no method named `with_source` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:154:30
    |
150 | / ...                   Error::new(
151 | | ...                       ErrorKind::DataInvalid,
152 | | ...                       format!("Invalid header name: {stripped_key}!"),
153 | | ...                   )
154 | | ...                   .with_source(e)
    | |                       -^^^^^^^^^^^ help: there is a method with a similar name: `with_url`
    | |_______________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:157:36
    |
157 |   ...                   Error::new(
    |                                ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:159:33
    |
159 | ...                   format!("Invalid header value: {value}!"),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<_>`, found `String`
    |
    = note: expected enum `std::option::Option<_>`
             found struct `std::string::String`
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)
help: call `Into::into` on this expression to convert `std::string::String` into `std::option::Option<_>`
    |
159 |                                 format!("Invalid header value: {value}!").into(),
    |                                                                          +++++++

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:158:33
    |
157 | ...                   Error::new(
    |                       ---------- arguments to this function are incorrect
158 | ...                       ErrorKind::DataInvalid,
    |                           ^^^^^^^^^^^^^^^^^^^^^^ expected `Kind`, found `ErrorKind`
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^

error[E0599]: no method named `with_source` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:161:30
    |
157 | / ...                   Error::new(
158 | | ...                       ErrorKind::DataInvalid,
159 | | ...                       format!("Invalid header value: {value}!"),
160 | | ...                   )
161 | | ...                   .with_source(e)
    | |                       -^^^^^^^^^^^ help: there is a method with a similar name: `with_url`
    | |_______________________|
    | 

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:308:45
    |
308 |             .query::<ListNamespaceResponse, ErrorResponse, OK>(request.build()?)
    |              -----                          ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:335:38
    |
335 |             .query::<NamespaceSerde, ErrorResponse, OK>(request)
    |              -----                   ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:351:38
    |
351 |             .query::<NamespaceSerde, ErrorResponse, OK>(request)
    |              -----                   ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:366:20
    |
366 |           Err(Error::new(
    |                      ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:366:13
    |
366 |         Err(Error::new(
    |             ^^^^^^^^^^
367 |             ErrorKind::FeatureUnsupported,
    |             ----------------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:368:13
    |
368 |             "Updating namespace not supported yet!",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
368 |             Some("Updating namespace not supported yet!"),
    |             +++++                                       +

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:366:13
    |
366 |           Err(Error::new(
    |  _________---_^
    | |         |
    | |         arguments to this enum variant are incorrect
367 | |             ErrorKind::FeatureUnsupported,
368 | |             "Updating namespace not supported yet!",
369 | |         ))
    | |_________^ expected `iceberg::Error`, found `reqwest::Error`
    |
    = note: `reqwest::Error` and `iceberg::Error` have similar names, but are actually distinct types
note: `reqwest::Error` is defined in crate `reqwest`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:16:1
    |
16  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `iceberg::Error` is defined in crate `iceberg`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `reqwest::Error` due to the type of the argument passed
   --> crates/catalog/rest/src/catalog.rs:366:9
    |
366 |            Err(Error::new(
    |  __________^___-
    | | _________|
    | ||
367 | ||             ErrorKind::FeatureUnsupported,
368 | ||             "Updating namespace not supported yet!",
369 | ||         ))
    | ||_________-^
    | |__________|
    |            this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `reqwest::Error` into `iceberg::Error`
    |
369 |         ).into())
    |          +++++++

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:380:33
    |
380 |             .do_execute::<bool, ErrorResponse>(request, |resp| match resp.status() {
    |              ----------         ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::do_execute`
   --> crates/catalog/rest/src/catalog.rs:261:50
    |
261 |     async fn do_execute<R, E: DeserializeOwned + Into<Error>>(
    |                                                  ^^^^^^^^^^^ required by this bound in `HttpClient::do_execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:397:24
    |
397 |             .execute::<ErrorResponse, NO_CONTENT>(request)
    |              -------   ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::execute`
   --> crates/catalog/rest/src/catalog.rs:236:44
    |
236 |     async fn execute<E: DeserializeOwned + Into<Error>, const SUCCESS_CODE: u16>(
    |                                            ^^^^^^^^^^^ required by this bound in `HttpClient::execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:411:41
    |
411 |             .query::<ListTableResponse, ErrorResponse, OK>(request)
    |              -----                      ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:447:41
    |
447 |             .query::<LoadTableResponse, ErrorResponse, OK>(request)
    |              -----                      ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:457:24
    |
457 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:457:17
    |
457 |                 Error::new(
    |                 ^^^^^^^^^^
458 |                     ErrorKind::DataInvalid,
    |                     ---------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:459:21
    |
459 |                     "Metadata location missing in create table response!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
459 |                     Some("Metadata location missing in create table response!"),
    |                     +++++                                                     +

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:477:41
    |
477 |             .query::<LoadTableResponse, ErrorResponse, OK>(request)
    |              -----                      ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0599]: no method named `table_endpoint` found for reference `&RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:499:26
    |
499 |     let table_url = self.table_endpoint(table);
    |                          ^^^^^^^^^^^^^^ method not found in `&RestCatalog`
    |
help: one of the expressions' fields has a method of the same name
    |
499 |     let table_url = self.config.table_endpoint(table);
    |                          +++++++

error[E0599]: no method named `delete` found for struct `HttpClient` in the current scope
   --> crates/catalog/rest/src/catalog.rs:501:31
    |
197 | struct HttpClient(Client);
    | ----------------- method `delete` not found for this struct
...
501 |     let request = self.client.delete(table_url.clone()).unwrap();
    |                               ^^^^^^ method not found in `HttpClient`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `delete`, perhaps you need to implement one of them:
            candidate #1: `opendal::raw::accessor::Access`
            candidate #2: `opendal::raw::layer::LayeredAccess`
            candidate #3: `opendal::raw::adapters::kv::api::Adapter`
            candidate #4: `opendal::raw::adapters::typed_kv::api::Adapter`
            candidate #5: `object_store::ObjectStore`
help: one of the expressions' fields has a method of the same name
    |
501 |     let request = self.client.0.delete(table_url.clone()).unwrap();
    |                               ++

error[E0599]: no method named `status` found for unit type `()` in the current scope
   --> crates/catalog/rest/src/catalog.rs:506:24
    |
506 |             match resp.status() {
    |                        ^^^^^^ method not found in `()`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:508:53
    |
508 |                   StatusCode::NOT_FOUND => Err(Error::new(
    |                                                       ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:508:46
    |
508 |                 StatusCode::NOT_FOUND => Err(Error::new(
    |                                              ^^^^^^^^^^
509 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:510:21
    |
510 |                     "NoSuchTableError"
    |                     ^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
510 |                     Some("NoSuchTableError")
    |                     +++++                  +

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:508:46
    |
508 |                   StatusCode::NOT_FOUND => Err(Error::new(
    |  __________________________________________---_^
    | |                                          |
    | |                                          arguments to this enum variant are incorrect
509 | |                     ErrorKind::Unexpected,
510 | |                     "NoSuchTableError"
511 | |                 )),
    | |_________________^ expected `iceberg::Error`, found `reqwest::Error`
    |
    = note: `reqwest::Error` and `iceberg::Error` have similar names, but are actually distinct types
note: `reqwest::Error` is defined in crate `reqwest`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:16:1
    |
16  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `iceberg::Error` is defined in crate `iceberg`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `reqwest::Error` due to the type of the argument passed
   --> crates/catalog/rest/src/catalog.rs:508:42
    |
508 |                    StatusCode::NOT_FOUND => Err(Error::new(
    |  ___________________________________________^___-
    | | __________________________________________|
    | ||
509 | ||                     ErrorKind::Unexpected,
510 | ||                     "NoSuchTableError"
511 | ||                 )),
    | ||_________________-^
    | |__________________|
    |                    this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `reqwest::Error` into `iceberg::Error`
    |
511 |                 ).into()),
    |                  +++++++

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:512:34
    |
512 |                   _ =>  Err(Error::new(
    |                                    ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:512:27
    |
512 |                 _ =>  Err(Error::new(
    |                           ^^^^^^^^^^
513 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:514:21
    |
514 |                     "Unexpected HTTP response code",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
514 |                     Some("Unexpected HTTP response code"),
    |                     +++++                               +

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:512:27
    |
512 |                   _ =>  Err(Error::new(
    |  _______________________---_^
    | |                       |
    | |                       arguments to this enum variant are incorrect
513 | |                     ErrorKind::Unexpected,
514 | |                     "Unexpected HTTP response code",
515 | |                 )),
    | |_________________^ expected `iceberg::Error`, found `reqwest::Error`
    |
    = note: `reqwest::Error` and `iceberg::Error` have similar names, but are actually distinct types
note: `reqwest::Error` is defined in crate `reqwest`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:16:1
    |
16  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `iceberg::Error` is defined in crate `iceberg`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `reqwest::Error` due to the type of the argument passed
   --> crates/catalog/rest/src/catalog.rs:512:23
    |
512 |                    _ =>  Err(Error::new(
    |  ________________________^___-
    | | _______________________|
    | ||
513 | ||                     ErrorKind::Unexpected,
514 | ||                     "Unexpected HTTP response code",
515 | ||                 )),
    | ||_________________-^
    | |__________________|
    |                    this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `reqwest::Error` into `iceberg::Error`
    |
515 |                 ).into()),
    |                  +++++++

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:518:31
    |
518 |           Err(_e) => Err(Error::new(
    |                                 ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:518:24
    |
518 |         Err(_e) => Err(Error::new(
    |                        ^^^^^^^^^^
519 |             ErrorKind::Unexpected,
    |             --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:520:13
    |
520 |             "Network error",
    |             ^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
520 |             Some("Network error"),
    |             +++++               +

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:518:24
    |
518 |           Err(_e) => Err(Error::new(
    |  ____________________---_^
    | |                    |
    | |                    arguments to this enum variant are incorrect
519 | |             ErrorKind::Unexpected,
520 | |             "Network error",
521 | |         )),
    | |_________^ expected `iceberg::Error`, found `reqwest::Error`
    |
    = note: `reqwest::Error` and `iceberg::Error` have similar names, but are actually distinct types
note: `reqwest::Error` is defined in crate `reqwest`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:16:1
    |
16  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `iceberg::Error` is defined in crate `iceberg`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `reqwest::Error` due to the type of the argument passed
   --> crates/catalog/rest/src/catalog.rs:518:20
    |
518 |            Err(_e) => Err(Error::new(
    |  _____________________^___-
    | | ____________________|
    | ||
519 | ||             ErrorKind::Unexpected,
520 | ||             "Network error",
521 | ||         )),
    | ||_________-^
    | |__________|
    |            this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `reqwest::Error` into `iceberg::Error`
    |
521 |         ).into()),
    |          +++++++

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:536:33
    |
536 |             .do_execute::<bool, ErrorResponse>(request, |resp| match resp.status() {
    |              ----------         ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::do_execute`
   --> crates/catalog/rest/src/catalog.rs:261:50
    |
261 |     async fn do_execute<R, E: DeserializeOwned + Into<Error>>(
    |                                                  ^^^^^^^^^^^ required by this bound in `HttpClient::do_execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:557:24
    |
557 |             .execute::<ErrorResponse, NO_CONTENT>(request)
    |              -------   ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::execute`
   --> crates/catalog/rest/src/catalog.rs:236:44
    |
236 |     async fn execute<E: DeserializeOwned + Into<Error>, const SUCCESS_CODE: u16>(
    |                                            ^^^^^^^^^^^ required by this bound in `HttpClient::execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:576:43
    |
576 |             .query::<CommitTableResponse, ErrorResponse, OK>(request)
    |              -----                        ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:202:31
    |
200 |     async fn query<
    |              ----- required by a bound in this associated function
201 |         R: DeserializeOwned,
202 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:692:35
    |
692 |                   return Err(Error::new(
    |                                     ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:692:28
    |
692 |                 return Err(Error::new(
    |                            ^^^^^^^^^^
693 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:694:21
    |
694 |                     "Unable to load file io, neither warehouse nor metadata location is set!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
694 |                     Some("Unable to load file io, neither warehouse nor metadata location is set!"),
    |                     +++++                                                                         +

Some errors have detailed explanations: E0252, E0277, E0308, E0433, E0599, E0624.
For more information about an error, try `rustc --explain E0252`.
warning: `iceberg-catalog-rest` (lib) generated 4 warnings
error: could not compile `iceberg-catalog-rest` (lib) due to 64 previous errors; 4 warnings emitted


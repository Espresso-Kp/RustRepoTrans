Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:7
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |       ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:23
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |                       ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:59
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |                                                           ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:95
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |                                                                                               ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:132
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |                                                                                                                                    ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:236
    |
553 | ...h: &RecordBatch| Ok(BooleanArray::from(vec![true; batch.len()])));\n\n    if lhs.is::<AlwaysTrue>() || rhs.is::<AlwaysTrue>() {\n     ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:238
    |
553 | ... &RecordBatch| Ok(BooleanArray::from(vec![true; batch.len()])));\n\n    if lhs.is::<AlwaysTrue>() || rhs.is::<AlwaysTrue>() {\n       ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:297
    |
553 | ...])));\n\n    if lhs.is::<AlwaysTrue>() || rhs.is::<AlwaysTrue>() {\n        return Ok(always_true); \n    }\n\n    if lhs.is::<AlwaysF...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:331
    |
553 | ...e>() || rhs.is::<AlwaysTrue>() {\n        return Ok(always_true); \n    }\n\n    if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs);...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:338
    |
553 | ... rhs.is::<AlwaysTrue>() {\n        return Ok(always_true); \n    }\n\n    if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs); \n    ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:340
    |
553 | ...hs.is::<AlwaysTrue>() {\n        return Ok(always_true); \n    }\n\n    if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs); \n    }\...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:374
    |
553 | ...eturn Ok(always_true); \n    }\n\n    if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs); \n    }\n\n    if rhs.is::<AlwaysFalse>() ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:400
    |
553 | ...   }\n\n    if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs); \n    }\n\n    if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs);...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:407
    |
553 | ...n    if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs); \n    }\n\n    if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs); \n    ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:409
    |
553 | ...   if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs); \n    }\n\n    if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs); \n    }\...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:443
    |
553 | ...       return Ok(rhs); \n    }\n\n    if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs); \n    }\n\n    Ok(Box::new(move |batch| {\...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:469
    |
553 | ...   }\n\n    if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs); \n    }\n\n    Ok(Box::new(move |batch| {\n       let lhs_array = lh...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:476
    |
553 | ...n    if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs); \n    }\n\n    Ok(Box::new(move |batch| {\n       let lhs_array = lhs(batch...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:478
    |
553 | ...   if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs); \n    }\n\n    Ok(Box::new(move |batch| {\n       let lhs_array = lhs(batch)?...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:510
    |
553 | ...n        return Ok(lhs); \n    }\n\n    Ok(Box::new(move |batch| {\n       let lhs_array = lhs(batch)?;\n       let rhs_array = rhs(ba...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:547
    |
553 | ...   Ok(Box::new(move |batch| {\n       let lhs_array = lhs(batch)?;\n       let rhs_array = rhs(batch)?;\n       let result = or(&lhs_a...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:584
    |
553 | ... let lhs_array = lhs(batch)?;\n       let rhs_array = rhs(batch)?;\n       let result = or(&lhs_array, &rhs_array)?;\n       Ok(result...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:634
    |
553 | ...y = rhs(batch)?;\n       let result = or(&lhs_array, &rhs_array)?;\n       Ok(result)\n    }))\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:653
    |
553 | ...      let result = or(&lhs_array, &rhs_array)?;\n       Ok(result)\n    }))\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:662
    |
553 | ... result = or(&lhs_array, &rhs_array)?;\n       Ok(result)\n    }))\n}
    |                                                                      ^

error: expected one of `:`, `@`, or `|`, found `&`
   --> crates/iceberg/src/arrow/reader.rs:553:13
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |             ^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found keyword `mut`
   --> crates/iceberg/src/arrow/reader.rs:553:29
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |                             ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found keyword `mut`
   --> crates/iceberg/src/arrow/reader.rs:553:65
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |                                                                 ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `)`
   --> crates/iceberg/src/arrow/reader.rs:553:97
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |                                                                                                 ^ expected one of `:`, `@`, or `|`
    |
    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)
help: if this is a parameter name, give it a type
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n: TypeName) -> Result<Box<PredicateResult>> {\n    let always_true = Box::new(|batch: &RecordBatch| Ok(BooleanArray::from(vec![true; batch.len()])));\n\n    if lhs.is::<AlwaysTrue>() || rhs.is::<AlwaysTrue>() {\n        return Ok(always_true); \n    }\n\n    if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs); \n    }\n\n    if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs); \n    }\n\n    Ok(Box::new(move |batch| {\n       let lhs_array = lhs(batch)?;\n       let rhs_array = rhs(batch)?;\n       let result = or(&lhs_array, &rhs_array)?;\n       Ok(result)\n    }))\n}
    |                                                                                                 ++++++++++
help: if this is a type, explicitly ignore the parameter name
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\_: n) -> Result<Box<PredicateResult>> {\n    let always_true = Box::new(|batch: &RecordBatch| Ok(BooleanArray::from(vec![true; batch.len()])));\n\n    if lhs.is::<AlwaysTrue>() || rhs.is::<AlwaysTrue>() {\n        return Ok(always_true); \n    }\n\n    if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs); \n    }\n\n    if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs); \n    }\n\n    Ok(Box::new(move |batch| {\n       let lhs_array = lhs(batch)?;\n       let rhs_array = rhs(batch)?;\n       let result = or(&lhs_array, &rhs_array)?;\n       Ok(result)\n    }))\n}
    |                                                                                                ++

error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `let`
   --> crates/iceberg/src/arrow/reader.rs:553:138
    |
553 | ...ult>,\n) -> Result<Box<PredicateResult>> {\n    let always_true = Box::new(|batch: &RecordBatch| Ok(BooleanArray::from(vec![true; batc...
    |                                                    ^^^ expected one of 8 possible tokens

warning: unused import: `or`
  --> crates/iceberg/src/arrow/reader.rs:21:60
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                                                            ^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0186]: method `or` has a `&mut self` declaration in the trait, but not in the impl
   --> crates/iceberg/src/arrow/reader.rs:553:1
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&mut self` in impl
    |
   ::: crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:38:5
    |
38  |     fn or(&mut self, lhs: Self::T, rhs: Self::T) -> Result<Self::T>;
    |     ---------------------------------------------------------------- `&mut self` used in trait

For more information about this error, try `rustc --explain E0186`.
warning: `iceberg` (lib test) generated 1 warning
error: could not compile `iceberg` (lib test) due to 31 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
warning: `iceberg` (lib) generated 1 warning (1 duplicate)
error: could not compile `iceberg` (lib) due to 31 previous errors; 1 warning emitted

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:7
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |       ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:23
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |                       ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:59
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |                                                           ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:95
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |                                                                                               ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:132
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |                                                                                                                                    ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:236
    |
553 | ...h: &RecordBatch| Ok(BooleanArray::from(vec![true; batch.len()])));\n\n    if lhs.is::<AlwaysTrue>() || rhs.is::<AlwaysTrue>() {\n     ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:238
    |
553 | ... &RecordBatch| Ok(BooleanArray::from(vec![true; batch.len()])));\n\n    if lhs.is::<AlwaysTrue>() || rhs.is::<AlwaysTrue>() {\n       ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:297
    |
553 | ...])));\n\n    if lhs.is::<AlwaysTrue>() || rhs.is::<AlwaysTrue>() {\n        return Ok(always_true); \n    }\n\n    if lhs.is::<AlwaysF...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:331
    |
553 | ...e>() || rhs.is::<AlwaysTrue>() {\n        return Ok(always_true); \n    }\n\n    if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs);...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:338
    |
553 | ... rhs.is::<AlwaysTrue>() {\n        return Ok(always_true); \n    }\n\n    if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs); \n    ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:340
    |
553 | ...hs.is::<AlwaysTrue>() {\n        return Ok(always_true); \n    }\n\n    if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs); \n    }\...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:374
    |
553 | ...eturn Ok(always_true); \n    }\n\n    if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs); \n    }\n\n    if rhs.is::<AlwaysFalse>() ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:400
    |
553 | ...   }\n\n    if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs); \n    }\n\n    if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs);...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:407
    |
553 | ...n    if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs); \n    }\n\n    if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs); \n    ...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:409
    |
553 | ...   if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs); \n    }\n\n    if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs); \n    }\...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:443
    |
553 | ...       return Ok(rhs); \n    }\n\n    if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs); \n    }\n\n    Ok(Box::new(move |batch| {\...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:469
    |
553 | ...   }\n\n    if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs); \n    }\n\n    Ok(Box::new(move |batch| {\n       let lhs_array = lh...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:476
    |
553 | ...n    if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs); \n    }\n\n    Ok(Box::new(move |batch| {\n       let lhs_array = lhs(batch...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:478
    |
553 | ...   if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs); \n    }\n\n    Ok(Box::new(move |batch| {\n       let lhs_array = lhs(batch)?...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:510
    |
553 | ...n        return Ok(lhs); \n    }\n\n    Ok(Box::new(move |batch| {\n       let lhs_array = lhs(batch)?;\n       let rhs_array = rhs(ba...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:547
    |
553 | ...   Ok(Box::new(move |batch| {\n       let lhs_array = lhs(batch)?;\n       let rhs_array = rhs(batch)?;\n       let result = or(&lhs_a...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:584
    |
553 | ... let lhs_array = lhs(batch)?;\n       let rhs_array = rhs(batch)?;\n       let result = or(&lhs_array, &rhs_array)?;\n       Ok(result...
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:634
    |
553 | ...y = rhs(batch)?;\n       let result = or(&lhs_array, &rhs_array)?;\n       Ok(result)\n    }))\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:653
    |
553 | ...      let result = or(&lhs_array, &rhs_array)?;\n       Ok(result)\n    }))\n}
    |                                                                      ^

error: unknown start of token: \
   --> crates/iceberg/src/arrow/reader.rs:553:662
    |
553 | ... result = or(&lhs_array, &rhs_array)?;\n       Ok(result)\n    }))\n}
    |                                                                      ^

error: expected one of `:`, `@`, or `|`, found `&`
   --> crates/iceberg/src/arrow/reader.rs:553:13
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |             ^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found keyword `mut`
   --> crates/iceberg/src/arrow/reader.rs:553:29
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |                             ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found keyword `mut`
   --> crates/iceberg/src/arrow/reader.rs:553:65
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |                                                                 ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `)`
   --> crates/iceberg/src/arrow/reader.rs:553:97
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    |                                                                                                 ^ expected one of `:`, `@`, or `|`
    |
    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)
help: if this is a parameter name, give it a type
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n: TypeName) -> Result<Box<PredicateResult>> {\n    let always_true = Box::new(|batch: &RecordBatch| Ok(BooleanArray::from(vec![true; batch.len()])));\n\n    if lhs.is::<AlwaysTrue>() || rhs.is::<AlwaysTrue>() {\n        return Ok(always_true); \n    }\n\n    if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs); \n    }\n\n    if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs); \n    }\n\n    Ok(Box::new(move |batch| {\n       let lhs_array = lhs(batch)?;\n       let rhs_array = rhs(batch)?;\n       let result = or(&lhs_array, &rhs_array)?;\n       Ok(result)\n    }))\n}
    |                                                                                                 ++++++++++
help: if this is a type, explicitly ignore the parameter name
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\_: n) -> Result<Box<PredicateResult>> {\n    let always_true = Box::new(|batch: &RecordBatch| Ok(BooleanArray::from(vec![true; batch.len()])));\n\n    if lhs.is::<AlwaysTrue>() || rhs.is::<AlwaysTrue>() {\n        return Ok(always_true); \n    }\n\n    if lhs.is::<AlwaysFalse>() {\n        return Ok(rhs); \n    }\n\n    if rhs.is::<AlwaysFalse>() {\n        return Ok(lhs); \n    }\n\n    Ok(Box::new(move |batch| {\n       let lhs_array = lhs(batch)?;\n       let rhs_array = rhs(batch)?;\n       let result = or(&lhs_array, &rhs_array)?;\n       Ok(result)\n    }))\n}
    |                                                                                                ++

error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `let`
   --> crates/iceberg/src/arrow/reader.rs:553:138
    |
553 | ...ult>,\n) -> Result<Box<PredicateResult>> {\n    let always_true = Box::new(|batch: &RecordBatch| Ok(BooleanArray::from(vec![true; batc...
    |                                                    ^^^ expected one of 8 possible tokens

warning: unused import: `or`
  --> crates/iceberg/src/arrow/reader.rs:21:60
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                                                            ^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0186]: method `or` has a `&mut self` declaration in the trait, but not in the impl
   --> crates/iceberg/src/arrow/reader.rs:553:1
    |
553 | fn or(\n    &mut self,\n    mut lhs: Box<PredicateResult>,\n    mut rhs: Box<PredicateResult>,\n) -> Result<Box<PredicateResult>> {\n    ...
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&mut self` in impl
    |
   ::: crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:38:5
    |
38  |     fn or(&mut self, lhs: Self::T, rhs: Self::T) -> Result<Self::T>;
    |     ---------------------------------------------------------------- `&mut self` used in trait

For more information about this error, try `rustc --explain E0186`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 31 previous errors; 1 warning emitted


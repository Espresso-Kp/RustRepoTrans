Fail
file path is :
projects/incubator-milagro-crypto/rust/src/mpin192.rs

output is:


error is :
   Compiling amcl v0.3.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/incubator-milagro-crypto/rust)
error: unknown start of token: \
   --> src/./mpin192.rs:905:19
    |
905 | pub fn server_key(\n    sha: usize,\n    z: &[u8],\n    sst: &[u8],\n    w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    ...
    |                   ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:36
    |
905 | pub fn server_key(\n    sha: usize,\n    z: &[u8],\n    sst: &[u8],\n    w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    ...
    |                                    ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:51
    |
905 | pub fn server_key(\n    sha: usize,\n    z: &[u8],\n    sst: &[u8],\n    w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    ...
    |                                                   ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:68
    |
905 | pub fn server_key(\n    sha: usize,\n    z: &[u8],\n    sst: &[u8],\n    w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    ...
    |                                                                    ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:83
    |
905 | pub fn server_key(\n    sha: usize,\n    z: &[u8],\n    sst: &[u8],\n    w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    ...
    |                                                                                   ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:98
    |
905 | pub fn server_key(\n    sha: usize,\n    z: &[u8],\n    sst: &[u8],\n    w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    ...
    |                                                                                                  ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:115
    |
905 | pub fn server_key(\n    sha: usize,\n    z: &[u8],\n    sst: &[u8],\n    w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    ...
    |                                                                                                                   ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:132
    |
905 | pub fn server_key(\n    sha: usize,\n    z: &[u8],\n    sst: &[u8],\n    w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    ...
    |                                                                                                                                    ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:158
    |
905 | ...&[u8],\n    hid: &[u8],\n    xid: &[u8],\n    xcid: Option<&[u8]>,\n    sk: &mut [u8],\n) -> isize {\n    let mut t: [u8; 10 * EFS] = ...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:178
    |
905 | ...8],\n    xid: &[u8],\n    xcid: Option<&[u8]>,\n    sk: &mut [u8],\n) -> isize {\n    let mut t: [u8; 10 * EFS] = [0; 10 * EFS];\n    ...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:192
    |
905 | ...&[u8],\n    xcid: Option<&[u8]>,\n    sk: &mut [u8],\n) -> isize {\n    let mut t: [u8; 10 * EFS] = [0; 10 * EFS];\n    let s_q: ECP4 ...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:240
    |
905 | ...u8],\n) -> isize {\n    let mut t: [u8; 10 * EFS] = [0; 10 * EFS];\n    let s_q: ECP4 = ECP4::from_bytes(sst);\n    if s_q.is_infinity...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:284
    |
905 | ... EFS] = [0; 10 * EFS];\n    let s_q: ECP4 = ECP4::from_bytes(sst);\n    if s_q.is_infinity() {\n        return INVALID_POINT;\n    }\n...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:312
    |
905 | ...let s_q: ECP4 = ECP4::from_bytes(sst);\n    if s_q.is_infinity() {\n        return INVALID_POINT;\n    }\n    let mut r: ECP = ECP::fr...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:343
    |
905 | ...s(sst);\n    if s_q.is_infinity() {\n        return INVALID_POINT;\n    }\n    let mut r: ECP = ECP::from_bytes(z);\n    if r.is_infin...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:350
    |
905 | ...\n    if s_q.is_infinity() {\n        return INVALID_POINT;\n    }\n    let mut r: ECP = ECP::from_bytes(z);\n    if r.is_infinity() {...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:392
    |
905 | ...rn INVALID_POINT;\n    }\n    let mut r: ECP = ECP::from_bytes(z);\n    if r.is_infinity() {\n        return INVALID_POINT;\n    }\n  ...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:418
    |
905 | ...    let mut r: ECP = ECP::from_bytes(z);\n    if r.is_infinity() {\n        return INVALID_POINT;\n    }\n    let mut a: ECP = ECP::fr...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:449
    |
905 | ...bytes(z);\n    if r.is_infinity() {\n        return INVALID_POINT;\n    }\n    let mut a: ECP = ECP::from_bytes(hid);\n    if a.is_inf...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:456
    |
905 | ...);\n    if r.is_infinity() {\n        return INVALID_POINT;\n    }\n    let mut a: ECP = ECP::from_bytes(hid);\n    if a.is_infinity()...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:500
    |
905 | ... INVALID_POINT;\n    }\n    let mut a: ECP = ECP::from_bytes(hid);\n    if a.is_infinity() {\n        return INVALID_POINT;\n    }\n\n...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:526
    |
905 | ...  let mut a: ECP = ECP::from_bytes(hid);\n    if a.is_infinity() {\n        return INVALID_POINT;\n    }\n\n    let mut u: ECP;\n    m...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:557
    |
905 | ...tes(hid);\n    if a.is_infinity() {\n        return INVALID_POINT;\n    }\n\n    let mut u: ECP;\n    match xcid {\n        Some(cid) ...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:564
    |
905 | ...);\n    if a.is_infinity() {\n        return INVALID_POINT;\n    }\n\n    let mut u: ECP;\n    match xcid {\n        Some(cid) => u = ...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:566
    |
905 | ...\n    if a.is_infinity() {\n        return INVALID_POINT;\n    }\n\n    let mut u: ECP;\n    match xcid {\n        Some(cid) => u = EC...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:587
    |
905 | ...y() {\n        return INVALID_POINT;\n    }\n\n    let mut u: ECP;\n    match xcid {\n        Some(cid) => u = ECP::from_bytes(cid),\n...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:605
    |
905 | ...urn INVALID_POINT;\n    }\n\n    let mut u: ECP;\n    match xcid {\n        Some(cid) => u = ECP::from_bytes(cid),\n        None => u ...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:653
    |
905 | ...\n    match xcid {\n        Some(cid) => u = ECP::from_bytes(cid),\n        None => u = ECP::from_bytes(xid),\n    }\n\n    if u.is_in...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:696
    |
905 | ...= ECP::from_bytes(cid),\n        None => u = ECP::from_bytes(xid),\n    }\n\n    if u.is_infinity() {\n        return INVALID_POINT;\n...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:703
    |
905 | ...from_bytes(cid),\n        None => u = ECP::from_bytes(xid),\n    }\n\n    if u.is_infinity() {\n        return INVALID_POINT;\n    }\n...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:705
    |
905 | ...om_bytes(cid),\n        None => u = ECP::from_bytes(xid),\n    }\n\n    if u.is_infinity() {\n        return INVALID_POINT;\n    }\n\n...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:731
    |
905 | ...ne => u = ECP::from_bytes(xid),\n    }\n\n    if u.is_infinity() {\n        return INVALID_POINT;\n    }\n\n    let mut w: Big = Big::...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:762
    |
905 | ...\n    }\n\n    if u.is_infinity() {\n        return INVALID_POINT;\n    }\n\n    let mut w: Big = Big::from_bytes(w);\n    let mut h: ...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:769
    |
905 | ...\n\n    if u.is_infinity() {\n        return INVALID_POINT;\n    }\n\n    let mut w: Big = Big::from_bytes(w);\n    let mut h: Big = B...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:771
    |
905 | ...\n    if u.is_infinity() {\n        return INVALID_POINT;\n    }\n\n    let mut w: Big = Big::from_bytes(w);\n    let mut h: Big = Big...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:813
    |
905 | ... INVALID_POINT;\n    }\n\n    let mut w: Big = Big::from_bytes(w);\n    let mut h: Big = Big::from_bytes(h);\n\n    a = pair192::g1mul...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:855
    |
905 | ...ig = Big::from_bytes(w);\n    let mut h: Big = Big::from_bytes(h);\n\n    a = pair192::g1mul(&a, &mut h);\n    r.add(&a);\n\n    u = p...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:857
    |
905 | ... = Big::from_bytes(w);\n    let mut h: Big = Big::from_bytes(h);\n\n    a = pair192::g1mul(&a, &mut h);\n    r.add(&a);\n\n    u = pai...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:894
    |
905 | ...: Big = Big::from_bytes(h);\n\n    a = pair192::g1mul(&a, &mut h);\n    r.add(&a);\n\n    u = pair192::g1mul(&u, &mut w);\n    let mut...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:910
    |
905 | ...m_bytes(h);\n\n    a = pair192::g1mul(&a, &mut h);\n    r.add(&a);\n\n    u = pair192::g1mul(&u, &mut w);\n    let mut g: FP24 = pair1...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:912
    |
905 | ...bytes(h);\n\n    a = pair192::g1mul(&a, &mut h);\n    r.add(&a);\n\n    u = pair192::g1mul(&u, &mut w);\n    let mut g: FP24 = pair192...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:949
    |
905 | ...a, &mut h);\n    r.add(&a);\n\n    u = pair192::g1mul(&u, &mut w);\n    let mut g: FP24 = pair192::ate(&s_q, &r);\n    g = pair192::fe...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:996
    |
905 | ...:g1mul(&u, &mut w);\n    let mut g: FP24 = pair192::ate(&s_q, &r);\n    g = pair192::fexp(&g);\n\n    let mut c: FP8 = g.trace();\n\n ...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:1024
    |
905 | ... mut g: FP24 = pair192::ate(&s_q, &r);\n    g = pair192::fexp(&g);\n\n    let mut c: FP8 = g.trace();\n\n    hash(sha, &mut c, &mut u,...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:1026
    |
905 | ...ut g: FP24 = pair192::ate(&s_q, &r);\n    g = pair192::fexp(&g);\n\n    let mut c: FP8 = g.trace();\n\n    hash(sha, &mut c, &mut u, &...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:1059
    |
905 | ...r);\n    g = pair192::fexp(&g);\n\n    let mut c: FP8 = g.trace();\n\n    hash(sha, &mut c, &mut u, &mut t);\n\n    for i in 0..HASH_L...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:1061
    |
905 | ...;\n    g = pair192::fexp(&g);\n\n    let mut c: FP8 = g.trace();\n\n    hash(sha, &mut c, &mut u, &mut t);\n\n    for i in 0..HASH_LEN...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:1101
    |
905 | ... mut c: FP8 = g.trace();\n\n    hash(sha, &mut c, &mut u, &mut t);\n\n    for i in 0..HASH_LEN {\n        sk[i] = t[i]\n    }\n\n    r...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:1103
    |
905 | ...ut c: FP8 = g.trace();\n\n    hash(sha, &mut c, &mut u, &mut t);\n\n    for i in 0..HASH_LEN {\n        sk[i] = t[i]\n    }\n\n    ret...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:1131
    |
905 | ...  hash(sha, &mut c, &mut u, &mut t);\n\n    for i in 0..HASH_LEN {\n        sk[i] = t[i]\n    }\n\n    return 0;\n}
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:1153
    |
905 | ...ut u, &mut t);\n\n    for i in 0..HASH_LEN {\n        sk[i] = t[i]\n    }\n\n    return 0;\n}
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:1160
    |
905 | ...mut t);\n\n    for i in 0..HASH_LEN {\n        sk[i] = t[i]\n    }\n\n    return 0;\n}
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:1162
    |
905 | ...t t);\n\n    for i in 0..HASH_LEN {\n        sk[i] = t[i]\n    }\n\n    return 0;\n}
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:905:1177
    |
905 | ...r i in 0..HASH_LEN {\n        sk[i] = t[i]\n    }\n\n    return 0;\n}
    |                                                                      ^

error: expected one of `:`, `@`, or `|`, found `sha`
   --> src/./mpin192.rs:905:25
    |
905 | pub fn server_key(\n    sha: usize,\n    z: &[u8],\n    sst: &[u8],\n    w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    ...
    |                         ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `z`
   --> src/./mpin192.rs:905:42
    |
905 | pub fn server_key(\n    sha: usize,\n    z: &[u8],\n    sst: &[u8],\n    w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    ...
    |                                          ^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `sst`
   --> src/./mpin192.rs:905:57
    |
905 | pub fn server_key(\n    sha: usize,\n    z: &[u8],\n    sst: &[u8],\n    w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    ...
    |                                                         ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `w`
   --> src/./mpin192.rs:905:74
    |
905 | pub fn server_key(\n    sha: usize,\n    z: &[u8],\n    sst: &[u8],\n    w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    ...
    |                                                                          ^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `h`
   --> src/./mpin192.rs:905:89
    |
905 | pub fn server_key(\n    sha: usize,\n    z: &[u8],\n    sst: &[u8],\n    w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    ...
    |                                                                                         ^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `hid`
   --> src/./mpin192.rs:905:104
    |
905 | ...  sst: &[u8],\n    w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    xcid: Option<&[u8]>,\n    sk: &mut [u8],\n) -> isiz...
    |                                                     ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `xid`
   --> src/./mpin192.rs:905:121
    |
905 | ...  w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    xcid: Option<&[u8]>,\n    sk: &mut [u8],\n) -> isize {\n    let mut ...
    |                                                     ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `xcid`
   --> src/./mpin192.rs:905:138
    |
905 | ...: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    xcid: Option<&[u8]>,\n    sk: &mut [u8],\n) -> isize {\n    let mut t: [u8; 10 * EFS] ...
    |                                                    ^^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `sk`
   --> src/./mpin192.rs:905:164
    |
905 | ...\n    xid: &[u8],\n    xcid: Option<&[u8]>,\n    sk: &mut [u8],\n) -> isize {\n    let mut t: [u8; 10 * EFS] = [0; 10 * EFS];\n    let...
    |                                                     ^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `)`
   --> src/./mpin192.rs:905:180
    |
905 | ...],\n    xcid: Option<&[u8]>,\n    sk: &mut [u8],\n) -> isize {\n    let mut t: [u8; 10 * EFS] = [0; 10 * EFS];\n    let s_q: ECP4 = EC...
    |                                                      ^ expected one of `:`, `@`, or `|`
    |
    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)
help: if this is a parameter name, give it a type
    |
905 | pub fn server_key(\n    sha: usize,\n    z: &[u8],\n    sst: &[u8],\n    w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    xcid: Option<&[u8]>,\n    sk: &mut [u8],\n: TypeName) -> isize {\n    let mut t: [u8; 10 * EFS] = [0; 10 * EFS];\n    let s_q: ECP4 = ECP4::from_bytes(sst);\n    if s_q.is_infinity() {\n        return INVALID_POINT;\n    }\n    let mut r: ECP = ECP::from_bytes(z);\n    if r.is_infinity() {\n        return INVALID_POINT;\n    }\n    let mut a: ECP = ECP::from_bytes(hid);\n    if a.is_infinity() {\n        return INVALID_POINT;\n    }\n\n    let mut u: ECP;\n    match xcid {\n        Some(cid) => u = ECP::from_bytes(cid),\n        None => u = ECP::from_bytes(xid),\n    }\n\n    if u.is_infinity() {\n        return INVALID_POINT;\n    }\n\n    let mut w: Big = Big::from_bytes(w);\n    let mut h: Big = Big::from_bytes(h);\n\n    a = pair192::g1mul(&a, &mut h);\n    r.add(&a);\n\n    u = pair192::g1mul(&u, &mut w);\n    let mut g: FP24 = pair192::ate(&s_q, &r);\n    g = pair192::fexp(&g);\n\n    let mut c: FP8 = g.trace();\n\n    hash(sha, &mut c, &mut u, &mut t);\n\n    for i in 0..HASH_LEN {\n        sk[i] = t[i]\n    }\n\n    return 0;\n}
    |                                                                                                                                                                                    ++++++++++
help: if this is a type, explicitly ignore the parameter name
    |
905 | pub fn server_key(\n    sha: usize,\n    z: &[u8],\n    sst: &[u8],\n    w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    xcid: Option<&[u8]>,\n    sk: &mut [u8],\_: n) -> isize {\n    let mut t: [u8; 10 * EFS] = [0; 10 * EFS];\n    let s_q: ECP4 = ECP4::from_bytes(sst);\n    if s_q.is_infinity() {\n        return INVALID_POINT;\n    }\n    let mut r: ECP = ECP::from_bytes(z);\n    if r.is_infinity() {\n        return INVALID_POINT;\n    }\n    let mut a: ECP = ECP::from_bytes(hid);\n    if a.is_infinity() {\n        return INVALID_POINT;\n    }\n\n    let mut u: ECP;\n    match xcid {\n        Some(cid) => u = ECP::from_bytes(cid),\n        None => u = ECP::from_bytes(xid),\n    }\n\n    if u.is_infinity() {\n        return INVALID_POINT;\n    }\n\n    let mut w: Big = Big::from_bytes(w);\n    let mut h: Big = Big::from_bytes(h);\n\n    a = pair192::g1mul(&a, &mut h);\n    r.add(&a);\n\n    u = pair192::g1mul(&u, &mut w);\n    let mut g: FP24 = pair192::ate(&s_q, &r);\n    g = pair192::fexp(&g);\n\n    let mut c: FP8 = g.trace();\n\n    hash(sha, &mut c, &mut u, &mut t);\n\n    for i in 0..HASH_LEN {\n        sk[i] = t[i]\n    }\n\n    return 0;\n}
    |                                                                                                                                                                                   ++

error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `let`
   --> src/./mpin192.rs:905:198
    |
905 | ...<&[u8]>,\n    sk: &mut [u8],\n) -> isize {\n    let mut t: [u8; 10 * EFS] = [0; 10 * EFS];\n    let s_q: ECP4 = ECP4::from_bytes(sst);...
    |                                                    ^^^ expected one of 8 possible tokens

error[E0061]: this function takes 10 arguments but 9 arguments were supplied
    --> src/./mpin192.rs:1120:13
     |
1120 |             server_key(sha, &z, &sst, &w, &h, &hid, &xid, pxcid, &mut sk);
     |             ^^^^^^^^^^--------------------------------------------------- an argument is missing
     |
note: function defined here
    --> src/./mpin192.rs:905:8
     |
905  | ...fn server_key(\n    sha: usize,\n    z: &[u8],\n    sst: &[u8],\n    w: &[u8],\n    h: &[u8],\n    hid: &[u8],\n    xid: &[u8],\n    xcid: Option<&[u8]>,\n    sk: &mut [u8],\n) -...
     |       ^^^^^^^^^^  ---------------  -------------  ---------------  -------------  -------------  ---------------  ---------------  ------------------------  ------------------  -
help: provide the argument
     |
1120 |             server_key(sha, &z, &sst, &w, &h, &hid, &xid, pxcid, &mut sk, /* n */);
     |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error: could not compile `amcl` (lib) due to 65 previous errors
warning: build failed, waiting for other jobs to finish...
For more information about this error, try `rustc --explain E0061`.
error: could not compile `amcl` (lib test) due to 66 previous errors


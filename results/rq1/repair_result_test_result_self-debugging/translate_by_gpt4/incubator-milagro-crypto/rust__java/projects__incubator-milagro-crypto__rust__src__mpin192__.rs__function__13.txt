Fail
file path is :
projects/incubator-milagro-crypto/rust/src/mpin192.rs

output is:


error is :
   Compiling amcl v0.3.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/incubator-milagro-crypto/rust)
error: unknown start of token: \
   --> src/./mpin192.rs:388:24
    |
388 | pub fn get_g1_multiple(\n    rng: Option<&mut RAND>,\n    typ: usize,\n    x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\n) -> isize {\...
    |                        ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:53
    |
388 | pub fn get_g1_multiple(\n    rng: Option<&mut RAND>,\n    typ: usize,\n    x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\n) -> isize {\...
    |                                                     ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:70
    |
388 | pub fn get_g1_multiple(\n    rng: Option<&mut RAND>,\n    typ: usize,\n    x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\n) -> isize {\...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:89
    |
388 | pub fn get_g1_multiple(\n    rng: Option<&mut RAND>,\n    typ: usize,\n    x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\n) -> isize {\...
    |                                                                                         ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:104
    |
388 | pub fn get_g1_multiple(\n    rng: Option<&mut RAND>,\n    typ: usize,\n    x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\n) -> isize {\...
    |                                                                                                        ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:123
    |
388 | pub fn get_g1_multiple(\n    rng: Option<&mut RAND>,\n    typ: usize,\n    x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\n) -> isize {\...
    |                                                                                                                           ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:137
    |
388 | ...n    x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\n) -> isize {\n    let r = Big::new_ints(&rom::CURVE_ORDER);\n    let mut big_x: ...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:184
    |
388 | ...[u8],\n) -> isize {\n    let r = Big::new_ints(&rom::CURVE_ORDER);\n    let mut big_x: Big;\n    if let Some(rand) = rng {\n        bi...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:209
    |
388 | ...let r = Big::new_ints(&rom::CURVE_ORDER);\n    let mut big_x: Big;\n    if let Some(rand) = rng {\n        big_x = Big::randomnum(&r, ...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:240
    |
388 | ...VE_ORDER);\n    let mut big_x: Big;\n    if let Some(rand) = rng {\n        big_x = Big::randomnum(&r, rand);\n        big_x.to_bytes(...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:283
    |
388 | ... let Some(rand) = rng {\n        big_x = Big::randomnum(&r, rand);\n        big_x.to_bytes(x);\n    } else {\n        big_x = Big::fro...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:311
    |
388 | ...     big_x = Big::randomnum(&r, rand);\n        big_x.to_bytes(x);\n    } else {\n        big_x = Big::from_bytes(x);\n    }\n    let ...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:325
    |
388 | ...ig::randomnum(&r, rand);\n        big_x.to_bytes(x);\n    } else {\n        big_x = Big::from_bytes(x);\n    }\n    let mut p: ECP;\n ...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:362
    |
388 | ..._x.to_bytes(x);\n    } else {\n        big_x = Big::from_bytes(x);\n    }\n    let mut p: ECP;\n    if typ == 0 {\n        p = ECP::fr...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:369
    |
388 | ...ytes(x);\n    } else {\n        big_x = Big::from_bytes(x);\n    }\n    let mut p: ECP;\n    if typ == 0 {\n        p = ECP::from_byte...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:390
    |
388 | ...{\n        big_x = Big::from_bytes(x);\n    }\n    let mut p: ECP;\n    if typ == 0 {\n        p = ECP::from_bytes(g);\n        if p.i...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:409
    |
388 | ...Big::from_bytes(x);\n    }\n    let mut p: ECP;\n    if typ == 0 {\n        p = ECP::from_bytes(g);\n        if p.is_infinity() { retu...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:442
    |
388 | ...et mut p: ECP;\n    if typ == 0 {\n        p = ECP::from_bytes(g);\n        if p.is_infinity() { return INVALID_POINT; }\n    } else {...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:496
    |
388 | ...om_bytes(g);\n        if p.is_infinity() { return INVALID_POINT; }\n    } else {\n        p = ECP::mapit(g);\n    }\n    let res = pai...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:510
    |
388 | ...        if p.is_infinity() { return INVALID_POINT; }\n    } else {\n        p = ECP::mapit(g);\n    }\n    let res = pair192::g1mul(&p...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:538
    |
388 | ... return INVALID_POINT; }\n    } else {\n        p = ECP::mapit(g);\n    }\n    let res = pair192::g1mul(&p,big_x);\n    res.to_bytes(w...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:545
    |
388 | ... INVALID_POINT; }\n    } else {\n        p = ECP::mapit(g);\n    }\n    let res = pair192::g1mul(&p,big_x);\n    res.to_bytes(w,false)...
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:586
    |
388 | ...p = ECP::mapit(g);\n    }\n    let res = pair192::g1mul(&p,big_x);\n    res.to_bytes(w,false);\n    return 0;\n}
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:614
    |
388 | ...   let res = pair192::g1mul(&p,big_x);\n    res.to_bytes(w,false);\n    return 0;\n}
    |                                                                      ^

error: unknown start of token: \
   --> src/./mpin192.rs:388:629
    |
388 | ...ir192::g1mul(&p,big_x);\n    res.to_bytes(w,false);\n    return 0;\n}
    |                                                                      ^

error: expected one of `:`, `@`, or `|`, found `rng`
   --> src/./mpin192.rs:388:30
    |
388 | pub fn get_g1_multiple(\n    rng: Option<&mut RAND>,\n    typ: usize,\n    x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\n) -> isize {\...
    |                              ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `typ`
   --> src/./mpin192.rs:388:59
    |
388 | pub fn get_g1_multiple(\n    rng: Option<&mut RAND>,\n    typ: usize,\n    x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\n) -> isize {\...
    |                                                           ^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `x`
   --> src/./mpin192.rs:388:76
    |
388 | pub fn get_g1_multiple(\n    rng: Option<&mut RAND>,\n    typ: usize,\n    x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\n) -> isize {\...
    |                                                                            ^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `g`
   --> src/./mpin192.rs:388:95
    |
388 | pub fn get_g1_multiple(\n    rng: Option<&mut RAND>,\n    typ: usize,\n    x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\n) -> isize {\...
    |                                                                                               ^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `w`
   --> src/./mpin192.rs:388:110
    |
388 | ...yp: usize,\n    x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\n) -> isize {\n    let r = Big::new_ints(&rom::CURVE_ORDER);\n    let ...
    |                                                      ^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `)`
   --> src/./mpin192.rs:388:125
    |
388 | ... x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\n) -> isize {\n    let r = Big::new_ints(&rom::CURVE_ORDER);\n    let mut big_x: Big;...
    |                                                      ^ expected one of `:`, `@`, or `|`
    |
    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)
help: if this is a parameter name, give it a type
    |
388 | pub fn get_g1_multiple(\n    rng: Option<&mut RAND>,\n    typ: usize,\n    x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\n: TypeName) -> isize {\n    let r = Big::new_ints(&rom::CURVE_ORDER);\n    let mut big_x: Big;\n    if let Some(rand) = rng {\n        big_x = Big::randomnum(&r, rand);\n        big_x.to_bytes(x);\n    } else {\n        big_x = Big::from_bytes(x);\n    }\n    let mut p: ECP;\n    if typ == 0 {\n        p = ECP::from_bytes(g);\n        if p.is_infinity() { return INVALID_POINT; }\n    } else {\n        p = ECP::mapit(g);\n    }\n    let res = pair192::g1mul(&p,big_x);\n    res.to_bytes(w,false);\n    return 0;\n}
    |                                                                                                                             ++++++++++
help: if this is a type, explicitly ignore the parameter name
    |
388 | pub fn get_g1_multiple(\n    rng: Option<&mut RAND>,\n    typ: usize,\n    x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\_: n) -> isize {\n    let r = Big::new_ints(&rom::CURVE_ORDER);\n    let mut big_x: Big;\n    if let Some(rand) = rng {\n        big_x = Big::randomnum(&r, rand);\n        big_x.to_bytes(x);\n    } else {\n        big_x = Big::from_bytes(x);\n    }\n    let mut p: ECP;\n    if typ == 0 {\n        p = ECP::from_bytes(g);\n        if p.is_infinity() { return INVALID_POINT; }\n    } else {\n        p = ECP::mapit(g);\n    }\n    let res = pair192::g1mul(&p,big_x);\n    res.to_bytes(w,false);\n    return 0;\n}
    |                                                                                                                            ++

error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `let`
   --> src/./mpin192.rs:388:143
    |
388 | ...g: &[u8],\n    w: &mut [u8],\n) -> isize {\n    let r = Big::new_ints(&rom::CURVE_ORDER);\n    let mut big_x: Big;\n    if let Some(ra...
    |                                                    ^^^ expected one of 8 possible tokens

error[E0061]: this function takes 6 arguments but 5 arguments were supplied
   --> src/./mpin192.rs:395:12
    |
395 |     return get_g1_multiple(None, 1, s, cid, cst);
    |            ^^^^^^^^^^^^^^^---------------------- an argument is missing
    |
note: function defined here
   --> src/./mpin192.rs:388:8
    |
388 | pub fn get_g1_multiple(\n    rng: Option<&mut RAND>,\n    typ: usize,\n    x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\n) -> isize {\...
    |        ^^^^^^^^^^^^^^^  ---------------------------  ---------------  -----------------  -------------  -----------------  -
help: provide the argument
    |
395 |     return get_g1_multiple(None, 1, s, cid, cst, /* n */);
    |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this function takes 6 arguments but 5 arguments were supplied
    --> src/./mpin192.rs:1056:13
     |
1056 |             get_g1_multiple(Some(&mut rng), 1, &mut r, &hcid, &mut z); // Also Send Z=r.ID to Server, remember random r
     |             ^^^^^^^^^^^^^^^------------------------------------------ an argument is missing
     |
note: function defined here
    --> src/./mpin192.rs:388:8
     |
388  | pub fn get_g1_multiple(\n    rng: Option<&mut RAND>,\n    typ: usize,\n    x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\n) -> isize {\...
     |        ^^^^^^^^^^^^^^^  ---------------------------  ---------------  -----------------  -------------  -----------------  -
help: provide the argument
     |
1056 |             get_g1_multiple(Some(&mut rng), 1, &mut r, &hcid, &mut z, /* n */); // Also Send Z=r.ID to Server, remember random r
     |                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this function takes 6 arguments but 5 arguments were supplied
    --> src/./mpin192.rs:1074:13
     |
1074 |             get_g1_multiple(Some(&mut rng), 0, &mut w, &rhid, &mut t); // Also send T=w.ID to client, remember random w
     |             ^^^^^^^^^^^^^^^------------------------------------------ an argument is missing
     |
note: function defined here
    --> src/./mpin192.rs:388:8
     |
388  | pub fn get_g1_multiple(\n    rng: Option<&mut RAND>,\n    typ: usize,\n    x: &mut [u8],\n    g: &[u8],\n    w: &mut [u8],\n) -> isize {\...
     |        ^^^^^^^^^^^^^^^  ---------------------------  ---------------  -----------------  -------------  -----------------  -
help: provide the argument
     |
1074 |             get_g1_multiple(Some(&mut rng), 0, &mut w, &rhid, &mut t, /* n */); // Also send T=w.ID to client, remember random w
     |                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For more information about this error, try `rustc --explain E0061`.
error: could not compile `amcl` (lib) due to 33 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `amcl` (lib test) due to 35 previous errors


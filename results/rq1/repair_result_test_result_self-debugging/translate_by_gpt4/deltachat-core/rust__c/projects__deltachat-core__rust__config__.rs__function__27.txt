Fail
file path is :
projects/deltachat-core/rust/src/config.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error: unknown start of token: \
   --> src/config.rs:723:78
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                                                                              ^

error: unknown start of token: \
   --> src/config.rs:723:103
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                                                                                                       ^

error: unknown start of token: \
   --> src/config.rs:723:130
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                                                                                                                                  ^

error: unknown start of token: \
   --> src/config.rs:723:137
    |
723 | ...bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\n\n    let addr = addr.unwrap();\n    let self_addr = self.get_conf...
    |                                                                      ^

error: unknown start of token: \
   --> src/config.rs:723:139
    |
723 | ...ol> {\n    if addr.is_none() {\n        return Ok(false);\n    }\n\n    let addr = addr.unwrap();\n    let self_addr = self.get_config...
    |                                                                      ^

error: unknown start of token: \
   --> src/config.rs:723:170
    |
723 | ...n        return Ok(false);\n    }\n\n    let addr = addr.unwrap();\n    let self_addr = self.get_config(Config::ConfiguredAddr).await?...
    |                                                                      ^

error: unknown start of token: \
   --> src/config.rs:723:248
    |
723 | ...lf_addr = self.get_config(Config::ConfiguredAddr).await?.unwrap();\n    Ok(addr_cmp(addr, &self_addr))\n}
    |                                                                      ^

error: unknown start of token: \
   --> src/config.rs:723:284
    |
723 | ...nfiguredAddr).await?.unwrap();\n    Ok(addr_cmp(addr, &self_addr))\n}
    |                                                                      ^

error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `if`
   --> src/config.rs:723:84
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                                                                                    ^^ expected one of 8 possible tokens

error[E0308]: mismatched types
   --> src/peerstate.rs:171:33
    |
171 |         if context.is_self_addr(addr).await? {
    |                    ------------ ^^^^ expected `Option<&str>`, found `&str`
    |                    |
    |                    arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&str`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
171 |         if context.is_self_addr(Some(addr)).await? {
    |                                 +++++    +

error[E0308]: mismatched types
   --> src/contact.rs:710:33
    |
710 |         if context.is_self_addr(&addr_normalized).await? {
    |                    ------------ ^^^^^^^^^^^^^^^^ expected `Option<&str>`, found `&String`
    |                    |
    |                    arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&std::string::String`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
710 |         if context.is_self_addr(Some(&addr_normalized)).await? {
    |                                 +++++                +

error[E0308]: mismatched types
    --> src/chat.rs:3727:29
     |
3727 |     if context.is_self_addr(contact.get_addr()).await? {
     |                ------------ ^^^^^^^^^^^^^^^^^^ expected `Option<&str>`, found `&str`
     |                |
     |                arguments to this method are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&str`
note: method defined here
    --> src/config.rs:723:21
     |
723  | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
     |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
     |
3727 |     if context.is_self_addr(Some(contact.get_addr())).await? {
     |                             +++++                  +

error[E0308]: mismatched types
   --> src/contact.rs:768:33
    |
768 |         if context.is_self_addr(addr).await? {
    |                    ------------ ^^^^ expected `Option<&str>`, found `&ContactAddress`
    |                    |
    |                    arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&ContactAddress`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
768 |         if context.is_self_addr(Some(addr)).await? {
    |                                 +++++    +

error[E0308]: mismatched types
    --> src/receive_imf.rs:2834:29
     |
2834 |     if context.is_self_addr(&addr).await? {
     |                ------------ ^^^^^ expected `Option<&str>`, found `&ContactAddress`
     |                |
     |                arguments to this method are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&ContactAddress`
note: method defined here
    --> src/config.rs:723:21
     |
723  | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
     |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
     |
2834 |     if context.is_self_addr(Some(&addr)).await? {
     |                             +++++     +

error[E0308]: mismatched types
    --> src/imap.rs:1228:53
     |
1228 | ...                   if context.is_self_addr(&from.addr).await? {
     |                                  ------------ ^^^^^^^^^^ expected `Option<&str>`, found `&String`
     |                                  |
     |                                  arguments to this method are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&std::string::String`
note: method defined here
    --> src/config.rs:723:21
     |
723  | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
     |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
     |
1228 |                             if context.is_self_addr(Some(&from.addr)).await? {
     |                                                     +++++          +

error[E0308]: mismatched types
   --> src/mimeparser.rs:318:46
    |
318 |         let incoming = !context.is_self_addr(&from.addr).await?;
    |                                 ------------ ^^^^^^^^^^ expected `Option<&str>`, found `&String`
    |                                 |
    |                                 arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&std::string::String`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
318 |         let incoming = !context.is_self_addr(Some(&from.addr)).await?;
    |                                              +++++          +

error[E0308]: mismatched types
   --> src/peerstate.rs:632:33
    |
632 |         if context.is_self_addr(&self.addr).await? {
    |                    ------------ ^^^^^^^^^^ expected `Option<&str>`, found `&String`
    |                    |
    |                    arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&std::string::String`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
632 |         if context.is_self_addr(Some(&self.addr)).await? {
    |                                 +++++          +

error[E0308]: mismatched types
   --> src/securejoin.rs:301:78
    |
301 |             if key.fingerprint() == self_fingerprint && context.is_self_addr(addr).await? {
    |                                                                 ------------ ^^^^ expected `Option<&str>`, found `&String`
    |                                                                 |
    |                                                                 arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&std::string::String`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
301 |             if key.fingerprint() == self_fingerprint && context.is_self_addr(Some(addr)).await? {
    |                                                                              +++++    +

error[E0308]: mismatched types
   --> src/securejoin.rs:509:38
    |
509 |             if !context.is_self_addr(member_added).await? {
    |                         ------------ ^^^^^^^^^^^^ expected `Option<&str>`, found `&str`
    |                         |
    |                         arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&str`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
509 |             if !context.is_self_addr(Some(member_added)).await? {
    |                                      +++++            +

error[E0308]: mismatched types
    --> src/receive_imf.rs:1890:55
     |
1890 |             Some(member_addr) => context.is_self_addr(member_addr).await?,
     |                                          ------------ ^^^^^^^^^^^ expected `Option<&str>`, found `&str`
     |                                          |
     |                                          arguments to this method are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&str`
note: method defined here
    --> src/config.rs:723:21
     |
723  | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
     |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
     |
1890 |             Some(member_addr) => context.is_self_addr(Some(member_addr)).await?,
     |                                                       +++++           +

error[E0308]: mismatched types
   --> src/decrypt.rs:64:52
    |
64  |     let autocrypt_header = if context.is_self_addr(from).await? {
    |                                       ------------ ^^^^ expected `Option<&str>`, found `&str`
    |                                       |
    |                                       arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&str`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
64  |     let autocrypt_header = if context.is_self_addr(Some(from)).await? {
    |                                                    +++++    +

error[E0308]: mismatched types
   --> src/decrypt.rs:292:46
    |
292 |     let allow_change = !context.is_self_addr(from).await?;
    |                                 ------------ ^^^^ expected `Option<&str>`, found `&str`
    |                                 |
    |                                 arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&str`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
292 |     let allow_change = !context.is_self_addr(Some(from)).await?;
    |                                              +++++    +

error[E0308]: mismatched types
   --> src/mimeparser.rs:720:42
    |
720 |                 if !context.is_self_addr(from).await? {
    |                             ------------ ^^^^ expected `Option<&str>`, found `&String`
    |                             |
    |                             arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&std::string::String`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
720 |                 if !context.is_self_addr(Some(from)).await? {
    |                                          +++++    +

error[E0308]: mismatched types
   --> src/peerstate.rs:216:33
    |
216 |         if context.is_self_addr(addr).await? {
    |                    ------------ ^^^^ expected `Option<&str>`, found `&str`
    |                    |
    |                    arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&str`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
216 |         if context.is_self_addr(Some(addr)).await? {
    |                                 +++++    +

error[E0308]: mismatched types
   --> src/qr.rs:390:31
    |
390 |                 .is_self_addr(&addr)
    |                  ------------ ^^^^^ expected `Option<&str>`, found `&ContactAddress`
    |                  |
    |                  arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&ContactAddress`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
390 |                 .is_self_addr(Some(&addr))
    |                               +++++     +

error[E0308]: mismatched types
   --> src/qr.rs:423:40
    |
423 |         } else if context.is_self_addr(&addr).await? {
    |                           ------------ ^^^^^ expected `Option<&str>`, found `&ContactAddress`
    |                           |
    |                           arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&ContactAddress`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
423 |         } else if context.is_self_addr(Some(&addr)).await? {
    |                                        +++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `deltachat` (lib) due to 26 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
   --> src/contact.rs:768:33
    |
768 |         if context.is_self_addr(addr).await? {
    |                    ------------ ^^^^ expected `Option<&str>`, found `&ContactAddress`
    |                    |
    |                    arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&deltachat_contact_tools::ContactAddress`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
768 |         if context.is_self_addr(Some(addr)).await? {
    |                                 +++++    +

error[E0308]: mismatched types
    --> src/receive_imf.rs:2834:29
     |
2834 |     if context.is_self_addr(&addr).await? {
     |                ------------ ^^^^^ expected `Option<&str>`, found `&ContactAddress`
     |                |
     |                arguments to this method are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&deltachat_contact_tools::ContactAddress`
note: method defined here
    --> src/config.rs:723:21
     |
723  | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
     |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
     |
2834 |     if context.is_self_addr(Some(&addr)).await? {
     |                             +++++     +

error[E0308]: mismatched types
   --> src/qr.rs:390:31
    |
390 |                 .is_self_addr(&addr)
    |                  ------------ ^^^^^ expected `Option<&str>`, found `&ContactAddress`
    |                  |
    |                  arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&deltachat_contact_tools::ContactAddress`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
390 |                 .is_self_addr(Some(&addr))
    |                               +++++     +

error[E0308]: mismatched types
   --> src/qr.rs:423:40
    |
423 |         } else if context.is_self_addr(&addr).await? {
    |                           ------------ ^^^^^ expected `Option<&str>`, found `&ContactAddress`
    |                           |
    |                           arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&deltachat_contact_tools::ContactAddress`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
423 |         } else if context.is_self_addr(Some(&addr)).await? {
    |                                        +++++     +

error[E0308]: mismatched types
   --> src/config.rs:889:36
    |
889 |         assert!(alice.is_self_addr("alice@example.org").await?);
    |                       ------------ ^^^^^^^^^^^^^^^^^^^ expected `Option<&str>`, found `&str`
    |                       |
    |                       arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
889 |         assert!(alice.is_self_addr(Some("alice@example.org")).await?);
    |                                    +++++                   +

error[E0308]: mismatched types
   --> src/config.rs:891:37
    |
891 |         assert!(!alice.is_self_addr("alice@alice.com").await?);
    |                        ------------ ^^^^^^^^^^^^^^^^^ expected `Option<&str>`, found `&str`
    |                        |
    |                        arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
891 |         assert!(!alice.is_self_addr(Some("alice@alice.com")).await?);
    |                                     +++++                 +

error[E0308]: mismatched types
   --> src/config.rs:902:36
    |
902 |         assert!(alice.is_self_addr("aliCe@example.org").await?);
    |                       ------------ ^^^^^^^^^^^^^^^^^^^ expected `Option<&str>`, found `&str`
    |                       |
    |                       arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
902 |         assert!(alice.is_self_addr(Some("aliCe@example.org")).await?);
    |                                    +++++                   +

error[E0308]: mismatched types
   --> src/config.rs:903:36
    |
903 |         assert!(alice.is_self_addr("alice@alice.com").await?);
    |                       ------------ ^^^^^^^^^^^^^^^^^ expected `Option<&str>`, found `&str`
    |                       |
    |                       arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
903 |         assert!(alice.is_self_addr(Some("alice@alice.com")).await?);
    |                                    +++++                 +

error[E0308]: mismatched types
   --> src/config.rs:931:36
    |
931 |         assert!(alice.is_self_addr("alice@example.org").await?);
    |                       ------------ ^^^^^^^^^^^^^^^^^^^ expected `Option<&str>`, found `&str`
    |                       |
    |                       arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
931 |         assert!(alice.is_self_addr(Some("alice@example.org")).await?);
    |                                    +++++                   +

error[E0308]: mismatched types
   --> src/config.rs:932:36
    |
932 |         assert!(alice.is_self_addr("alice@alice.com").await?);
    |                       ------------ ^^^^^^^^^^^^^^^^^ expected `Option<&str>`, found `&str`
    |                       |
    |                       arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
932 |         assert!(alice.is_self_addr(Some("alice@alice.com")).await?);
    |                                    +++++                 +

error[E0308]: mismatched types
   --> src/config.rs:933:36
    |
933 |         assert!(alice.is_self_addr("Alice@alice.xyz").await?);
    |                       ------------ ^^^^^^^^^^^^^^^^^ expected `Option<&str>`, found `&str`
    |                       |
    |                       arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: method defined here
   --> src/config.rs:723:21
    |
723 | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
    |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
    |
933 |         assert!(alice.is_self_addr(Some("Alice@alice.xyz")).await?);
    |                                    +++++                 +

error[E0308]: mismatched types
    --> src/contact.rs:2059:35
     |
2059 |         assert_eq!(t.is_self_addr("me@me.org").await?, false);
     |                      ------------ ^^^^^^^^^^^ expected `Option<&str>`, found `&str`
     |                      |
     |                      arguments to this method are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: method defined here
    --> src/config.rs:723:21
     |
723  | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
     |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
     |
2059 |         assert_eq!(t.is_self_addr(Some("me@me.org")).await?, false);
     |                                   +++++           +

error[E0308]: mismatched types
    --> src/contact.rs:2062:35
     |
2062 |         assert_eq!(t.is_self_addr("me@me.org").await?, false);
     |                      ------------ ^^^^^^^^^^^ expected `Option<&str>`, found `&str`
     |                      |
     |                      arguments to this method are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: method defined here
    --> src/config.rs:723:21
     |
723  | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
     |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
     |
2062 |         assert_eq!(t.is_self_addr(Some("me@me.org")).await?, false);
     |                                   +++++           +

error[E0308]: mismatched types
    --> src/contact.rs:2063:35
     |
2063 |         assert_eq!(t.is_self_addr("you@you.net").await?, true);
     |                      ------------ ^^^^^^^^^^^^^ expected `Option<&str>`, found `&str`
     |                      |
     |                      arguments to this method are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: method defined here
    --> src/config.rs:723:21
     |
723  | pub(crate) async fn is_self_addr(&self, addr: Option<&str>) -> Result<bool> {\n    if addr.is_none() {\n        return Ok(false);\n    }\...
     |                     ^^^^^^^^^^^^        ------------------
help: try wrapping the expression in `Some`
     |
2063 |         assert_eq!(t.is_self_addr(Some("you@you.net")).await?, true);
     |                                   +++++             +

error: could not compile `deltachat` (lib test) due to 36 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


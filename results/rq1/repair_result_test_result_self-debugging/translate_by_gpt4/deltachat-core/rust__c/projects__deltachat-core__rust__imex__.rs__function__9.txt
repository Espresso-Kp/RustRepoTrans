Fail
file path is :
projects/deltachat-core/rust/src/imex.rs

output is:


error is :
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0425]: cannot find function `decode_config` in crate `base64`
   --> src/imex.rs:374:26
    |
374 |     let binary = base64::decode_config(&*base64, base64::STANDARD)?;
    |                          ^^^^^^^^^^^^^ not found in `base64`

error[E0425]: cannot find value `STANDARD` in crate `base64`
   --> src/imex.rs:374:58
    |
374 |     let binary = base64::decode_config(&*base64, base64::STANDARD)?;
    |                                                          ^^^^^^^^ not found in `base64`
    |
help: consider importing one of these items
    |
4   + use base64::alphabet::STANDARD;
    |
4   + use base64::engine::general_purpose::STANDARD;
    |
help: if you import `STANDARD`, refer to it directly
    |
374 -     let binary = base64::decode_config(&*base64, base64::STANDARD)?;
374 +     let binary = base64::decode_config(&*base64, STANDARD)?;
    |

error[E0277]: the size for values of type `dyn StdError + std::marker::Send + std::marker::Sync` cannot be known at compilation time
   --> src/imex.rs:292:62
    |
292 |         let armored_key = decrypt_setup_file(&sc, file).await?;
    |                                                              ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn StdError + std::marker::Send + std::marker::Sync`, which is required by `std::result::Result<(), anyhow::Error>: FromResidual<std::result::Result<Infallible, Box<dyn StdError + std::marker::Send + std::marker::Sync>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Box<dyn StdError + std::marker::Send + std::marker::Sync>` to implement `StdError`
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError + std::marker::Send + std::marker::Sync>>`
    = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError + std::marker::Send + std::marker::Sync>>>`

error[E0308]: mismatched types
   --> src/imex.rs:362:47
    |
362 |     let (header, base64) = split_armored_data(&file_content);
    |                            ------------------ ^^^^^^^^^^^^^ expected `&[u8]`, found `&String`
    |                            |
    |                            arguments to this function are incorrect
    |
    = note: expected reference `&[u8]`
               found reference `&std::string::String`
note: function defined here
   --> src/pgp.rs:103:8
    |
103 | pub fn split_armored_data(buf: &[u8]) -> Result<(BlockType, BTreeMap<String, String>, Vec<u8>)> {
    |        ^^^^^^^^^^^^^^^^^^ ----------

error[E0308]: mismatched types
   --> src/imex.rs:362:9
    |
362 |     let (header, base64) = split_armored_data(&file_content);
    |         ^^^^^^^^^^^^^^^^   --------------------------------- this expression has type `std::result::Result<(BlockType, BTreeMap<std::string::String, std::string::String>, Vec<u8>), anyhow::Error>`
    |         |
    |         expected `Result<(BlockType, ..., ...), ...>`, found `(_, _)`
    |
    = note: expected enum `std::result::Result<(BlockType, BTreeMap<std::string::String, std::string::String>, Vec<u8>), anyhow::Error>`
              found tuple `(_, _)`

error[E0308]: mismatched types
   --> src/imex.rs:376:30
    |
376 |     let plain = symm_decrypt(passphrase.to_string(), &*binary).await?;
    |                 ------------ ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |                 |
    |                 arguments to this function are incorrect
    |
note: function defined here
   --> src/pgp.rs:379:14
    |
379 | pub async fn symm_decrypt<T: std::io::Read + std::io::Seek>(
    |              ^^^^^^^^^^^^
380 |     passphrase: &str,
    |     ----------------
help: try removing the method call
    |
376 -     let plain = symm_decrypt(passphrase.to_string(), &*binary).await?;
376 +     let plain = symm_decrypt(passphrase, &*binary).await?;
    |

warning: unused import: `std::io::Read`
 --> src/imex.rs:4:5
  |
4 | use std::io::Read;
  |     ^^^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

Some errors have detailed explanations: E0277, E0308, E0425.
For more information about an error, try `rustc --explain E0277`.
warning: `deltachat` (lib) generated 1 warning
error: could not compile `deltachat` (lib) due to 6 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
   --> src/imex.rs:362:9
    |
362 |     let (header, base64) = split_armored_data(&file_content);
    |         ^^^^^^^^^^^^^^^^   --------------------------------- this expression has type `std::result::Result<(pgp::armor::BlockType, BTreeMap<std::string::String, std::string::String>, Vec<u8>), anyhow::Error>`
    |         |
    |         expected `Result<(BlockType, ..., ...), ...>`, found `(_, _)`
    |
    = note: expected enum `std::result::Result<(pgp::armor::BlockType, BTreeMap<std::string::String, std::string::String>, Vec<u8>), anyhow::Error>`
              found tuple `(_, _)`

warning: `deltachat` (lib test) generated 1 warning (1 duplicate)
error: could not compile `deltachat` (lib test) due to 6 previous errors; 1 warning emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


Fail
file path is :
projects/deltachat-core/rust/src/imex.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error: unknown start of token: \
   --> src/imex.rs:274:36
    |
274 | pub async fn continue_key_transfer(\n    context: &Context,\n    msg_id: MsgId,\n    setup_code: &str,\n) -> Result<()> {\n    if msg_id....
    |                                    ^

error: unknown start of token: \
   --> src/imex.rs:274:60
    |
274 | pub async fn continue_key_transfer(\n    context: &Context,\n    msg_id: MsgId,\n    setup_code: &str,\n) -> Result<()> {\n    if msg_id....
    |                                                            ^

error: unknown start of token: \
   --> src/imex.rs:274:80
    |
274 | pub async fn continue_key_transfer(\n    context: &Context,\n    msg_id: MsgId,\n    setup_code: &str,\n) -> Result<()> {\n    if msg_id....
    |                                                                                ^

error: unknown start of token: \
   --> src/imex.rs:274:103
    |
274 | pub async fn continue_key_transfer(\n    context: &Context,\n    msg_id: MsgId,\n    setup_code: &str,\n) -> Result<()> {\n    if msg_id....
    |                                                                                                       ^

error: unknown start of token: \
   --> src/imex.rs:274:122
    |
274 | pub async fn continue_key_transfer(\n    context: &Context,\n    msg_id: MsgId,\n    setup_code: &str,\n) -> Result<()> {\n    if msg_id....
    |                                                                                                                          ^

error: unknown start of token: \
   --> src/imex.rs:274:152
    |
274 | ...setup_code: &str,\n) -> Result<()> {\n    if msg_id.is_special() {\n        return Err(format_err!("Invalid MsgId"));\n    }\n\n    le...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:203
    |
274 | ....is_special() {\n        return Err(format_err!("Invalid MsgId"));\n    }\n\n    let msg = Message::load_from_db(context, msg_id).awai...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:210
    |
274 | ...cial() {\n        return Err(format_err!("Invalid MsgId"));\n    }\n\n    let msg = Message::load_from_db(context, msg_id).await?;\n\n...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:212
    |
274 | ...al() {\n        return Err(format_err!("Invalid MsgId"));\n    }\n\n    let msg = Message::load_from_db(context, msg_id).await?;\n\n  ...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:274
    |
274 | ... }\n\n    let msg = Message::load_from_db(context, msg_id).await?;\n\n    if !msg.is_setupmessage() {\n        error!(context, "Messag...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:276
    |
274 | ...\n\n    let msg = Message::load_from_db(context, msg_id).await?;\n\n    if !msg.is_setupmessage() {\n        error!(context, "Message ...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:309
    |
274 | ...rom_db(context, msg_id).await?;\n\n    if !msg.is_setupmessage() {\n        error!(context, "Message is no Autocrypt Setup Message.");...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:377
    |
274 | ...        error!(context, "Message is no Autocrypt Setup Message.");\n        return Err(format_err!("Message is no Autocrypt Setup Mess...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:453
    |
274 | ...return Err(format_err!("Message is no Autocrypt Setup Message."));\n    }\n\n    let filename = match msg.get_file(context) {\n       ...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:460
    |
274 | ...Err(format_err!("Message is no Autocrypt Setup Message."));\n    }\n\n    let filename = match msg.get_file(context) {\n        Some(f...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:462
    |
274 | ...r(format_err!("Message is no Autocrypt Setup Message."));\n    }\n\n    let filename = match msg.get_file(context) {\n        Some(f) ...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:512
    |
274 | ...ge."));\n    }\n\n    let filename = match msg.get_file(context) {\n        Some(f) => f,\n        None => {\n            error!(conte...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:535
    |
274 | ...et filename = match msg.get_file(context) {\n        Some(f) => f,\n        None => {\n            error!(context, "Cannot get filenam...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:554
    |
274 | ... msg.get_file(context) {\n        Some(f) => f,\n        None => {\n            error!(context, "Cannot get filename from message.");\...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:621
    |
274 | ...n            error!(context, "Cannot get filename from message.");\n            return Err(format_err!("Cannot get filename from messa...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:696
    |
274 | ...     return Err(format_err!("Cannot get filename from message."));\n        }\n    };\n\n    let file = match context.open_file_std(&f...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:707
    |
274 | ... Err(format_err!("Cannot get filename from message."));\n        }\n    };\n\n    let file = match context.open_file_std(&filename).aw...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:715
    |
274 | ...mat_err!("Cannot get filename from message."));\n        }\n    };\n\n    let file = match context.open_file_std(&filename).await {\n ...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:717
    |
274 | ...t_err!("Cannot get filename from message."));\n        }\n    };\n\n    let file = match context.open_file_std(&filename).await {\n   ...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:780
    |
274 | ...;\n\n    let file = match context.open_file_std(&filename).await {\n        Ok(f) => f,\n        Err(err) => {\n            error!(con...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:801
    |
274 | ...atch context.open_file_std(&filename).await {\n        Ok(f) => f,\n        Err(err) => {\n            error!(context, "Failed to open...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:824
    |
274 | ...std(&filename).await {\n        Ok(f) => f,\n        Err(err) => {\n            error!(context, "Failed to open file: {:?}", err);\n  ...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:888
    |
274 | ... {\n            error!(context, "Failed to open file: {:?}", err);\n            return Err(err);\n        }\n    };\n\n    let filecon...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:918
    |
274 | ..., "Failed to open file: {:?}", err);\n            return Err(err);\n        }\n    };\n\n    let filecontent = get_filebytes(&file).un...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:929
    |
274 | ...o open file: {:?}", err);\n            return Err(err);\n        }\n    };\n\n    let filecontent = get_filebytes(&file).unwrap();\n\n...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:937
    |
274 | ...ile: {:?}", err);\n            return Err(err);\n        }\n    };\n\n    let filecontent = get_filebytes(&file).unwrap();\n\n    let ...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:939
    |
274 | ...e: {:?}", err);\n            return Err(err);\n        }\n    };\n\n    let filecontent = get_filebytes(&file).unwrap();\n\n    let se...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:993
    |
274 | ... }\n    };\n\n    let filecontent = get_filebytes(&file).unwrap();\n\n    let setup_code_normalized = normalize_setup_code(setup_code)...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:995
    |
274 | ...\n    };\n\n    let filecontent = get_filebytes(&file).unwrap();\n\n    let setup_code_normalized = normalize_setup_code(setup_code);\...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:1062
    |
274 | ...n    let setup_code_normalized = normalize_setup_code(setup_code);\n    let res = continue_key_transfer_inner(context, &setup_code_nor...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:1159
    |
274 | ...ansfer_inner(context, &setup_code_normalized, &filecontent).await;\n\n    match res {\n        Ok(_) => {\n            maybe_add_bcc_s...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:1161
    |
274 | ...sfer_inner(context, &setup_code_normalized, &filecontent).await;\n\n    match res {\n        Ok(_) => {\n            maybe_add_bcc_sel...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:1178
    |
274 | ...t, &setup_code_normalized, &filecontent).await;\n\n    match res {\n        Ok(_) => {\n            maybe_add_bcc_self_device_msg(cont...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:1198
    |
274 | ...lized, &filecontent).await;\n\n    match res {\n        Ok(_) => {\n            maybe_add_bcc_self_device_msg(context).await?;\n      ...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:1258
    |
274 | ...) => {\n            maybe_add_bcc_self_device_msg(context).await?;\n            Ok(())\n        }\n        Err(err) => {\n            ...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:1278
    |
274 | ...maybe_add_bcc_self_device_msg(context).await?;\n            Ok(())\n        }\n        Err(err) => {\n            warn!(context, "Cann...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:1289
    |
274 | ...cc_self_device_msg(context).await?;\n            Ok(())\n        }\n        Err(err) => {\n            warn!(context, "Cannot decrypt ...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:1312
    |
274 | ...ext).await?;\n            Ok(())\n        }\n        Err(err) => {\n            warn!(context, "Cannot decrypt Autocrypt Setup Message...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:1399
    |
274 | ...ontext, "Cannot decrypt Autocrypt Setup Message. Error: {}", err);\n            Err(format_err!("Could not transfer key"))\n        }\...
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:1455
    |
274 | ...{}", err);\n            Err(format_err!("Could not transfer key"))\n        }\n    }\n}
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:1466
    |
274 | ...n            Err(format_err!("Could not transfer key"))\n        }\n    }\n}
    |                                                                      ^

error: unknown start of token: \
   --> src/imex.rs:274:1473
    |
274 | ...      Err(format_err!("Could not transfer key"))\n        }\n    }\n}
    |                                                                      ^

error: expected one of `:`, `@`, or `|`, found `context`
   --> src/imex.rs:274:42
    |
274 | pub async fn continue_key_transfer(\n    context: &Context,\n    msg_id: MsgId,\n    setup_code: &str,\n) -> Result<()> {\n    if msg_id....
    |                                          ^^^^^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `msg_id`
   --> src/imex.rs:274:66
    |
274 | pub async fn continue_key_transfer(\n    context: &Context,\n    msg_id: MsgId,\n    setup_code: &str,\n) -> Result<()> {\n    if msg_id....
    |                                                                  ^^^^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `setup_code`
   --> src/imex.rs:274:86
    |
274 | pub async fn continue_key_transfer(\n    context: &Context,\n    msg_id: MsgId,\n    setup_code: &str,\n) -> Result<()> {\n    if msg_id....
    |                                                                                      ^^^^^^^^^^ expected one of `:`, `@`, or `|`

error: expected one of `:`, `@`, or `|`, found `)`
   --> src/imex.rs:274:105
    |
274 | ...text,\n    msg_id: MsgId,\n    setup_code: &str,\n) -> Result<()> {\n    if msg_id.is_special() {\n        return Err(format_err!("Inv...
    |                                                      ^ expected one of `:`, `@`, or `|`
    |
    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)
help: if this is a parameter name, give it a type
    |
274 | pub async fn continue_key_transfer(\n    context: &Context,\n    msg_id: MsgId,\n    setup_code: &str,\n: TypeName) -> Result<()> {\n    if msg_id.is_special() {\n        return Err(format_err!("Invalid MsgId"));\n    }\n\n    let msg = Message::load_from_db(context, msg_id).await?;\n\n    if !msg.is_setupmessage() {\n        error!(context, "Message is no Autocrypt Setup Message.");\n        return Err(format_err!("Message is no Autocrypt Setup Message."));\n    }\n\n    let filename = match msg.get_file(context) {\n        Some(f) => f,\n        None => {\n            error!(context, "Cannot get filename from message.");\n            return Err(format_err!("Cannot get filename from message."));\n        }\n    };\n\n    let file = match context.open_file_std(&filename).await {\n        Ok(f) => f,\n        Err(err) => {\n            error!(context, "Failed to open file: {:?}", err);\n            return Err(err);\n        }\n    };\n\n    let filecontent = get_filebytes(&file).unwrap();\n\n    let setup_code_normalized = normalize_setup_code(setup_code);\n    let res = continue_key_transfer_inner(context, &setup_code_normalized, &filecontent).await;\n\n    match res {\n        Ok(_) => {\n            maybe_add_bcc_self_device_msg(context).await?;\n            Ok(())\n        }\n        Err(err) => {\n            warn!(context, "Cannot decrypt Autocrypt Setup Message. Error: {}", err);\n            Err(format_err!("Could not transfer key"))\n        }\n    }\n}
    |                                                                                                         ++++++++++
help: if this is a type, explicitly ignore the parameter name
    |
274 | pub async fn continue_key_transfer(\n    context: &Context,\n    msg_id: MsgId,\n    setup_code: &str,\_: n) -> Result<()> {\n    if msg_id.is_special() {\n        return Err(format_err!("Invalid MsgId"));\n    }\n\n    let msg = Message::load_from_db(context, msg_id).await?;\n\n    if !msg.is_setupmessage() {\n        error!(context, "Message is no Autocrypt Setup Message.");\n        return Err(format_err!("Message is no Autocrypt Setup Message."));\n    }\n\n    let filename = match msg.get_file(context) {\n        Some(f) => f,\n        None => {\n            error!(context, "Cannot get filename from message.");\n            return Err(format_err!("Cannot get filename from message."));\n        }\n    };\n\n    let file = match context.open_file_std(&filename).await {\n        Ok(f) => f,\n        Err(err) => {\n            error!(context, "Failed to open file: {:?}", err);\n            return Err(err);\n        }\n    };\n\n    let filecontent = get_filebytes(&file).unwrap();\n\n    let setup_code_normalized = normalize_setup_code(setup_code);\n    let res = continue_key_transfer_inner(context, &setup_code_normalized, &filecontent).await;\n\n    match res {\n        Ok(_) => {\n            maybe_add_bcc_self_device_msg(context).await?;\n            Ok(())\n        }\n        Err(err) => {\n            warn!(context, "Cannot decrypt Autocrypt Setup Message. Error: {}", err);\n            Err(format_err!("Could not transfer key"))\n        }\n    }\n}
    |                                                                                                        ++

error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `if`
   --> src/imex.rs:274:128
    |
274 | ...,\n    setup_code: &str,\n) -> Result<()> {\n    if msg_id.is_special() {\n        return Err(format_err!("Invalid MsgId"));\n    }\n\...
    |                                                     ^^ expected one of 8 possible tokens

warning: unused import: `MsgId`
  --> src/imex.rs:27:31
   |
27 | use crate::message::{Message, MsgId, Viewtype};
   |                               ^^^^^
   |
note: the lint level is defined here
  --> src/lib.rs:6:5
   |
6  |     unused,
   |     ^^^^^^
   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `open_file_std`
  --> src/imex.rs:34:52
   |
34 |     create_folder, delete_file, get_filesuffix_lc, open_file_std, read_file, time, write_file,
   |                                                    ^^^^^^^^^^^^^

warning: `deltachat` (lib) generated 2 warnings
error: could not compile `deltachat` (lib) due to 52 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0061]: this function takes 4 arguments but 3 arguments were supplied
    --> src/imex.rs:1148:9
     |
1148 |         continue_key_transfer(&alice2, msg.id, &setup_code).await?;
     |         ^^^^^^^^^^^^^^^^^^^^^------------------------------ an argument is missing
     |
note: function defined here
    --> src/imex.rs:274:14
     |
274  | pub async fn continue_key_transfer(\n    context: &Context,\n    msg_id: MsgId,\n    setup_code: &str,\n) -> Result<()> {\n    if msg_id....
     |              ^^^^^^^^^^^^^^^^^^^^^  ----------------------  ------------------  ---------------------  -
help: provide the argument
     |
1148 |         continue_key_transfer(&alice2, msg.id, &setup_code, /* n */).await?;
     |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this function takes 4 arguments but 3 arguments were supplied
    --> src/imex.rs:1192:9
     |
1192 |         continue_key_transfer(t, *received.msg_ids.last().unwrap(), setup_code).await?;
     |         ^^^^^^^^^^^^^^^^^^^^^-------------------------------------------------- an argument is missing
     |
note: function defined here
    --> src/imex.rs:274:14
     |
274  | pub async fn continue_key_transfer(\n    context: &Context,\n    msg_id: MsgId,\n    setup_code: &str,\n) -> Result<()> {\n    if msg_id....
     |              ^^^^^^^^^^^^^^^^^^^^^  ----------------------  ------------------  ---------------------  -
help: provide the argument
     |
1192 |         continue_key_transfer(t, *received.msg_ids.last().unwrap(), setup_code, /* n */).await?;
     |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For more information about this error, try `rustc --explain E0061`.
warning: `deltachat` (lib test) generated 2 warnings (2 duplicates)
error: could not compile `deltachat` (lib test) due to 54 previous errors; 2 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


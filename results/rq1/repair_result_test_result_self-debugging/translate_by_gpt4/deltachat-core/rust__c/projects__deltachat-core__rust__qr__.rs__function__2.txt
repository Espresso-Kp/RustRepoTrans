Fail
file path is :
projects/deltachat-core/rust/src/qr.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error: unknown start of token: \
   --> src/qr.rs:254:67
    |
254 | pub async fn check_qr(context: &Context, qr: &str) -> Result<Qr> {\n    let res = async {\n        let qr_upper = qr.to_uppercase();\n   ...
    |                                                                   ^

error: unknown start of token: \
   --> src/qr.rs:254:90
    |
254 | pub async fn check_qr(context: &Context, qr: &str) -> Result<Qr> {\n    let res = async {\n        let qr_upper = qr.to_uppercase();\n   ...
    |                                                                                          ^

error: unknown start of token: \
   --> src/qr.rs:254:133
    |
254 | pub async fn check_qr(context: &Context, qr: &str) -> Result<Qr> {\n    let res = async {\n        let qr_upper = qr.to_uppercase();\n   ...
    |                                                                                                                                     ^

error: unknown start of token: \
   --> src/qr.rs:254:194
    |
254 | ...se();\n        if starts_with_ignore_case(qr, IDELTACHAT_SCHEME) {\n            decode_openpgp(context, qr).await\n        } else if s...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:241
    |
254 | ...DELTACHAT_SCHEME) {\n            decode_openpgp(context, qr).await\n        } else if starts_with_ignore_case(qr, IDELTACHAT_NOSLASH_S...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:317
    |
254 | ...} else if starts_with_ignore_case(qr, IDELTACHAT_NOSLASH_SCHEME) {\n            decode_openpgp(context, qr).await\n        } else if s...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:364
    |
254 | ...T_NOSLASH_SCHEME) {\n            decode_openpgp(context, qr).await\n        } else if starts_with_ignore_case(&qr_upper, OPENPGP4FPR_S...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:440
    |
254 | ...} else if starts_with_ignore_case(&qr_upper, OPENPGP4FPR_SCHEME) {\n            decode_openpgp(context, qr).await\n        } else if s...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:487
    |
254 | ...ENPGP4FPR_SCHEME) {\n            decode_openpgp(context, qr).await\n        } else if starts_with_ignore_case(&qr_upper, DCACCOUNT_SCH...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:561
    |
254 | ...  } else if starts_with_ignore_case(&qr_upper, DCACCOUNT_SCHEME) {\n            decode_account(qr)\n        } else if starts_with_igno...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:593
    |
254 | ...ase(&qr_upper, DCACCOUNT_SCHEME) {\n            decode_account(qr)\n        } else if starts_with_ignore_case(&qr_upper, DCWEBRTC_SCHE...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:666
    |
254 | ...   } else if starts_with_ignore_case(&qr_upper, DCWEBRTC_SCHEME) {\n            decode_webrtc_instance(context, qr)\n        } else if...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:715
    |
254 | ...CWEBRTC_SCHEME) {\n            decode_webrtc_instance(context, qr)\n        } else if starts_with_ignore_case(qr, MAILTO_SCHEME) {\n  ...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:779
    |
254 | ...r)\n        } else if starts_with_ignore_case(qr, MAILTO_SCHEME) {\n            decode_mailto(context, qr).await\n        } else if st...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:825
    |
254 | ...qr, MAILTO_SCHEME) {\n            decode_mailto(context, qr).await\n        } else if starts_with_ignore_case(&qr_upper, MATMSG_SCHEME...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:896
    |
254 | ...     } else if starts_with_ignore_case(&qr_upper, MATMSG_SCHEME) {\n            decode_matmsg(context, qr).await\n        } else if st...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:942
    |
254 | ...er, MATMSG_SCHEME) {\n            decode_matmsg(context, qr).await\n        } else if starts_with_ignore_case(&qr_upper, VCARD_SCHEME)...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1012
    |
254 | ...      } else if starts_with_ignore_case(&qr_upper, VCARD_SCHEME) {\n            decode_vcard(context, qr).await\n        } else if sta...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1057
    |
254 | ...pper, VCARD_SCHEME) {\n            decode_vcard(context, qr).await\n        } else if starts_with_ignore_case(&qr_upper, SMTP_SCHEME) ...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1126
    |
254 | ...       } else if starts_with_ignore_case(&qr_upper, SMTP_SCHEME) {\n            decode_smtp(context, qr).await\n        } else if star...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1170
    |
254 | ..._upper, SMTP_SCHEME) {\n            decode_smtp(context, qr).await\n        } else if starts_with_ignore_case(qr, DCLOGIN_SCHEME) {\n ...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1235
    |
254 | ...t\n        } else if starts_with_ignore_case(qr, DCLOGIN_SCHEME) {\n            let login_options = LoginOptions::default();\n        ...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1293
    |
254 | ...CHEME) {\n            let login_options = LoginOptions::default();\n            Ok(Qr::Login {\n                inner: configure_from_...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1321
    |
254 | ...gin_options = LoginOptions::default();\n            Ok(Qr::Login {\n                inner: configure_from_login_qr(context, qr, login_...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1405
    |
254 | ...inner: configure_from_login_qr(context, qr, login_options).await?,\n            })\n        } else if starts_with_ignore_case(qr, DCBA...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1421
    |
254 | ..._from_login_qr(context, qr, login_options).await?,\n            })\n        } else if starts_with_ignore_case(qr, DCBACKUP_SCHEME) {\n...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1487
    |
254 | ...\n        } else if starts_with_ignore_case(qr, DCBACKUP_SCHEME) {\n            decode_backup(qr)\n        } else {\n            let l...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1518
    |
254 | ..._ignore_case(qr, DCBACKUP_SCHEME) {\n            decode_backup(qr)\n        } else {\n            let lower = qr.to_lowercase();\n    ...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1536
    |
254 | ...CBACKUP_SCHEME) {\n            decode_backup(qr)\n        } else {\n            let lower = qr.to_lowercase();\n            if lower.s...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1580
    |
254 | ...(qr)\n        } else {\n            let lower = qr.to_lowercase();\n            if lower.starts_with(HTTP_SCHEME) || lower.starts_with...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1664
    |
254 | ...ower.starts_with(HTTP_SCHEME) || lower.starts_with(HTTPS_SCHEME) {\n                if lower.starts_with("http://") || lower.starts_wi...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1748
    |
254 | ...if lower.starts_with("http://") || lower.starts_with("https://") {\n                    Ok(Qr::URL(qr.to_string()))\n                }...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1797
    |
254 | ...ith("https://") {\n                    Ok(Qr::URL(qr.to_string()))\n                } else {\n                    Ok(Qr::Text(qr.to_st...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1823
    |
254 | ...             Ok(Qr::URL(qr.to_string()))\n                } else {\n                    Ok(Qr::Text(qr.to_string()))\n                ...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1873
    |
254 | ...        } else {\n                    Ok(Qr::Text(qr.to_string()))\n                }\n            } else {\n                Ok(Qr::Te...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1892
    |
254 | ...                   Ok(Qr::Text(qr.to_string()))\n                }\n            } else {\n                Ok(Qr::Text(qr.to_string()))...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1914
    |
254 | ...Qr::Text(qr.to_string()))\n                }\n            } else {\n                Ok(Qr::Text(qr.to_string()))\n            }\n     ...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1960
    |
254 | ...            } else {\n                Ok(Qr::Text(qr.to_string()))\n            }\n        }\n    }\n   .await\n    .context(if qr.len...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1975
    |
254 | ...lse {\n                Ok(Qr::Text(qr.to_string()))\n            }\n        }\n    }\n   .await\n    .context(if qr.len() > 50 {\n    ...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1986
    |
254 | ...            Ok(Qr::Text(qr.to_string()))\n            }\n        }\n    }\n   .await\n    .context(if qr.len() > 50 {\n        format!...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:1993
    |
254 | ...     Ok(Qr::Text(qr.to_string()))\n            }\n        }\n    }\n   .await\n    .context(if qr.len() > 50 {\n        format!("Faile...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:2004
    |
254 | ...:Text(qr.to_string()))\n            }\n        }\n    }\n   .await\n    .context(if qr.len() > 50 {\n        format!("Failed to decode...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:2037
    |
254 | ...   }\n        }\n    }\n   .await\n    .context(if qr.len() > 50 {\n        format!("Failed to decode QR code core/{}", &qr[..50])\n  ...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:2101
    |
254 | ... {\n        format!("Failed to decode QR code core/{}", &qr[..50])\n    } else {\n        format!("Failed to decode QR code core/{}", ...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:2115
    |
254 | ...rmat!("Failed to decode QR code core/{}", &qr[..50])\n    } else {\n        format!("Failed to decode QR code core/{}", qr)\n    });\n...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:2172
    |
254 | ... } else {\n        format!("Failed to decode QR code core/{}", qr)\n    });\n    if res.is_err() {\n        info!(context, "Unknown QR...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:2181
    |
254 | ...\n        format!("Failed to decode QR code core/{}", qr)\n    });\n    if res.is_err() {\n        info!(context, "Unknown QR code sca...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:2204
    |
254 | ...ed to decode QR code core/{}", qr)\n    });\n    if res.is_err() {\n        info!(context, "Unknown QR code scanned: {}", qr);\n    }\...
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:2264
    |
254 | ...rr() {\n        info!(context, "Unknown QR code scanned: {}", qr);\n    }\n    res\n}
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:2271
    |
254 | ...n        info!(context, "Unknown QR code scanned: {}", qr);\n    }\n    res\n}
    |                                                                      ^

error: unknown start of token: \
   --> src/qr.rs:254:2280
    |
254 | ...info!(context, "Unknown QR code scanned: {}", qr);\n    }\n    res\n}
    |                                                                      ^

error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `let`
   --> src/qr.rs:254:73
    |
254 | pub async fn check_qr(context: &Context, qr: &str) -> Result<Qr> {\n    let res = async {\n        let qr_upper = qr.to_uppercase();\n   ...
    |                                                                         ^^^ expected one of 8 possible tokens

error: could not compile `deltachat` (lib) due to 52 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 52 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


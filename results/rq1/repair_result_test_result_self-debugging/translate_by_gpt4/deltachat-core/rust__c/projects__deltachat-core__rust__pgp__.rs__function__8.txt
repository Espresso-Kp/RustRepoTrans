Fail
file path is :
projects/deltachat-core/rust/src/pgp.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0432]: unresolved imports `pgp::composed::SecretKeyTrait`, `pgp::composed::SignedKeyId`
 --> src/pgp.rs:5:33
  |
5 | use pgp::composed::{KeyDetails, SecretKeyTrait, SignedKeyId};
  |                                 ^^^^^^^^^^^^^^  ^^^^^^^^^^^ no `SignedKeyId` in `composed`
  |                                 |
  |                                 no `SecretKeyTrait` in `composed`
  |                                 help: a similar name exists in the module: `SecretKeyParams`
  |
  = help: consider importing this trait instead:
          pgp::types::SecretKeyTrait

warning: unused `#[macro_use]` import
  --> src/lib.rs:31:1
   |
31 | #[macro_use]
   | ^^^^^^^^^^^^
   |
note: the lint level is defined here
  --> src/lib.rs:6:5
   |
6  |     unused,
   |     ^^^^^^
   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `std::io::Write`
 --> src/pgp.rs:4:5
  |
4 | use std::io::Write;
  |     ^^^^^^^^^^^^^^

warning: unused import: `KeyDetails`
 --> src/pgp.rs:5:21
  |
5 | use pgp::composed::{KeyDetails, SecretKeyTrait, SignedKeyId};
  |                     ^^^^^^^^^^

warning: unused import: `SubkeyParamsBuilder`
  --> src/pgp.rs:16:63
   |
16 |     SignedPublicSubKey, SignedSecretKey, StandaloneSignature, SubkeyParamsBuilder,
   |                                                               ^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/key.rs:232:68
    |
232 |                 .spawn_blocking(move || crate::pgp::create_keypair(addr, keytype))
    |                                         -------------------------- ^^^^- help: try using a conversion method: `.to_string()`
    |                                         |                          |
    |                                         |                          expected `String`, found `EmailAddress`
    |                                         arguments to this function are incorrect
    |
note: function defined here
   --> src/pgp.rs:150:15
    |
150 | pub(crate) fn create_keypair(addr: String, keygen_type: KeyGenType) -> Result<KeyPair> {
    |               ^^^^^^^^^^^^^^ ------------

error[E0308]: mismatched types
   --> src/pgp.rs:151:39
    |
151 |     let mut key_pair = KeyPair {addr: addr, public: SignedPublicKey::new(), secret: SignedSecretKey::new()};
    |                                       ^^^^ expected `EmailAddress`, found `String`

error[E0061]: this function takes 3 arguments but 0 arguments were supplied
   --> src/pgp.rs:151:53
    |
151 |     let mut key_pair = KeyPair {addr: addr, public: SignedPublicKey::new(), secret: SignedSecretKey::new()};
    |                                                     ^^^^^^^^^^^^^^^^^^^^-- three arguments of type `pgp::packet::PublicKey`, `SignedKeyDetails`, and `Vec<SignedPublicSubKey>` are missing
    |
note: associated function defined here
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/public.rs:39:12
    |
39  |     pub fn new(
    |            ^^^
help: provide the arguments
    |
151 |     let mut key_pair = KeyPair {addr: addr, public: SignedPublicKey::new(/* pgp::packet::PublicKey */, /* SignedKeyDetails */, /* Vec<SignedPublicSubKey> */), secret: SignedSecretKey::new()};
    |                                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this function takes 4 arguments but 0 arguments were supplied
   --> src/pgp.rs:151:85
    |
151 |     let mut key_pair = KeyPair {addr: addr, public: SignedPublicKey::new(), secret: SignedSecretKey::new()};
    |                                                                                     ^^^^^^^^^^^^^^^^^^^^-- multiple arguments are missing
    |
note: associated function defined here
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/secret.rs:47:12
    |
47  |     pub fn new(
    |            ^^^
help: provide the arguments
    |
151 |     let mut key_pair = KeyPair {addr: addr, public: SignedPublicKey::new(), secret: SignedSecretKey::new(/* pgp::packet::SecretKey */, /* SignedKeyDetails */, /* Vec<SignedPublicSubKey> */, /* Vec<SignedSecretSubKey> */)};
    |                                                                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the trait bound `std::result::Result<_, anyhow::Error>: StdError` is not satisfied
   --> src/pgp.rs:156:123
    |
156 |             let (public, secret) = generate_rsa_keypair(4096, None).map_err(|_| bail!("Failed generate rsa 4096 keypair"))?;
    |                                                                                                                           ^ the trait `StdError` is not implemented for `std::result::Result<_, anyhow::Error>`, which is required by `std::result::Result<KeyPair, anyhow::Error>: FromResidual<std::result::Result<Infallible, std::result::Result<_, anyhow::Error>>>`
    |
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `anyhow::Error` to implement `From<std::result::Result<_, anyhow::Error>>`
    = note: required for `std::result::Result<KeyPair, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, std::result::Result<_, anyhow::Error>>>`

error[E0277]: the trait bound `std::result::Result<_, anyhow::Error>: StdError` is not satisfied
   --> src/pgp.rs:161:123
    |
161 |             let (public, secret) = generate_rsa_keypair(2048, None).map_err(|_| bail!("Failed generate rsa 2048 keypair"))?;
    |                                                                                                                           ^ the trait `StdError` is not implemented for `std::result::Result<_, anyhow::Error>`, which is required by `std::result::Result<KeyPair, anyhow::Error>: FromResidual<std::result::Result<Infallible, std::result::Result<_, anyhow::Error>>>`
    |
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `anyhow::Error` to implement `From<std::result::Result<_, anyhow::Error>>`
    = note: required for `std::result::Result<KeyPair, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, std::result::Result<_, anyhow::Error>>>`

error[E0277]: the trait bound `std::result::Result<_, anyhow::Error>: StdError` is not satisfied
   --> src/pgp.rs:166:116
    |
166 |             let (public, secret) = generate_ed25519_keypair().map_err(|_| bail!("Failed generate ed25519 keypair"))?;
    |                                                                                                                    ^ the trait `StdError` is not implemented for `std::result::Result<_, anyhow::Error>`, which is required by `std::result::Result<KeyPair, anyhow::Error>: FromResidual<std::result::Result<Infallible, std::result::Result<_, anyhow::Error>>>`
    |
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `anyhow::Error` to implement `From<std::result::Result<_, anyhow::Error>>`
    = note: required for `std::result::Result<KeyPair, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, std::result::Result<_, anyhow::Error>>>`

error[E0599]: no method named `is_empty` found for struct `SignedPublicKey` in the current scope
   --> src/pgp.rs:172:24
    |
172 |     if key_pair.public.is_empty() || key_pair.secret.is_empty() {
    |                        ^^^^^^^^ method not found in `SignedPublicKey`
    |
help: some of the expressions' fields have a method of the same name
    |
172 |     if key_pair.public.details.revocation_signatures.is_empty() || key_pair.secret.is_empty() {
    |                        ++++++++++++++++++++++++++++++
172 |     if key_pair.public.public_subkeys.is_empty() || key_pair.secret.is_empty() {
    |                        +++++++++++++++

error[E0599]: no method named `is_empty` found for struct `SignedSecretKey` in the current scope
   --> src/pgp.rs:172:54
    |
172 |     if key_pair.public.is_empty() || key_pair.secret.is_empty() {
    |                                                      ^^^^^^^^ method not found in `SignedSecretKey`
    |
help: some of the expressions' fields have a method of the same name
    |
172 |     if key_pair.public.is_empty() || key_pair.secret.details.revocation_signatures.is_empty() {
    |                                                      ++++++++++++++++++++++++++++++
172 |     if key_pair.public.is_empty() || key_pair.secret.public_subkeys.is_empty() {
    |                                                      +++++++++++++++
172 |     if key_pair.public.is_empty() || key_pair.secret.secret_subkeys.is_empty() {
    |                                                      +++++++++++++++

error[E0599]: no method named `can_create_certificates` found for mutable reference `&mut SecretKeyParamsBuilder` in the current scope
   --> src/pgp.rs:182:10
    |
180 |       let key_params = SecretKeyParamsBuilder::default()
    |  ______________________-
181 | |         .key_type(PgpKeyType::Rsa(bits))
182 | |         .can_create_certificates(true)
    | |         -^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut SecretKeyParamsBuilder`
    | |_________|
    | 

error[E0599]: no variant or associated item named `Aes256` found for enum `SymmetricKeyAlgorithm` in the current scope
   --> src/pgp.rs:185:69
    |
185 |         .preferred_symmetric_algorithms(vec![SymmetricKeyAlgorithm::Aes256])
    |                                                                     ^^^^^^
    |                                                                     |
    |                                                                     variant or associated item not found in `SymmetricKeyAlgorithm`
    |                                                                     help: there is a variant with a similar name: `AES256`

error[E0599]: no variant or associated item named `ZLib` found for enum `CompressionAlgorithm` in the current scope
   --> src/pgp.rs:187:70
    |
187 |         .preferred_compression_algorithms(vec![CompressionAlgorithm::ZLib])
    |                                                                      ^^^^
    |                                                                      |
    |                                                                      variant or associated item not found in `CompressionAlgorithm`
    |                                                                      help: there is a variant with a similar name: `ZLIB`

error[E0599]: no function or associated item named `with_params` found for struct `SignedSecretKey` in the current scope
   --> src/pgp.rs:190:39
    |
190 |     let secret_key = SignedSecretKey::with_params(&mut rng, key_params)?;
    |                                       ^^^^^^^^^^^ function or associated item not found in `SignedSecretKey`
    |
note: if you're trying to build a new `SignedSecretKey`, consider using `SignedSecretKey::new` which returns `SignedSecretKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/secret.rs:47:5
    |
47  | /     pub fn new(
48  | |         primary_key: packet::SecretKey,
49  | |         details: SignedKeyDetails,
50  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
51  | |         mut secret_subkeys: Vec<SignedSecretSubKey>,
52  | |     ) -> Self {
    | |_____________^

error[E0599]: no method named `can_create_certificates` found for mutable reference `&mut SecretKeyParamsBuilder` in the current scope
   --> src/pgp.rs:199:10
    |
197 |       let key_params = SecretKeyParamsBuilder::default()
    |  ______________________-
198 | |         .key_type(PgpKeyType::EdDSA)
199 | |         .can_create_certificates(true)
    | |         -^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut SecretKeyParamsBuilder`
    | |_________|
    | 

error[E0599]: no function or associated item named `with_params` found for struct `SignedSecretKey` in the current scope
   --> src/pgp.rs:203:39
    |
203 |     let secret_key = SignedSecretKey::with_params(&mut rng, key_params)?;
    |                                       ^^^^^^^^^^^ function or associated item not found in `SignedSecretKey`
    |
note: if you're trying to build a new `SignedSecretKey`, consider using `SignedSecretKey::new` which returns `SignedSecretKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/secret.rs:47:5
    |
47  | /     pub fn new(
48  | |         primary_key: packet::SecretKey,
49  | |         details: SignedKeyDetails,
50  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
51  | |         mut secret_subkeys: Vec<SignedSecretSubKey>,
52  | |     ) -> Self {
    | |_____________^

warning: unused import: `SecretKeyTrait`
  --> src/pgp.rs:21:58
   |
21 |     CompressionAlgorithm, KeyTrait, Mpi, PublicKeyTrait, SecretKeyTrait, StringToKey,
   |                                                          ^^^^^^^^^^^^^^

Some errors have detailed explanations: E0061, E0277, E0308, E0432, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `deltachat` (lib) generated 5 warnings
error: could not compile `deltachat` (lib) due to 16 previous errors; 5 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0277]: the trait bound `std::result::Result<_, anyhow::Error>: StdError` is not satisfied
   --> src/pgp.rs:156:123
    |
156 |             let (public, secret) = generate_rsa_keypair(4096, None).map_err(|_| bail!("Failed generate rsa 4096 keypair"))?;
    |                                                                                                                           ^ the trait `StdError` is not implemented for `std::result::Result<_, anyhow::Error>`, which is required by `std::result::Result<pgp::KeyPair, anyhow::Error>: FromResidual<std::result::Result<Infallible, std::result::Result<_, anyhow::Error>>>`
    |
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `anyhow::Error` to implement `From<std::result::Result<_, anyhow::Error>>`
    = note: required for `std::result::Result<pgp::KeyPair, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, std::result::Result<_, anyhow::Error>>>`

error[E0277]: the trait bound `std::result::Result<_, anyhow::Error>: StdError` is not satisfied
   --> src/pgp.rs:161:123
    |
161 |             let (public, secret) = generate_rsa_keypair(2048, None).map_err(|_| bail!("Failed generate rsa 2048 keypair"))?;
    |                                                                                                                           ^ the trait `StdError` is not implemented for `std::result::Result<_, anyhow::Error>`, which is required by `std::result::Result<pgp::KeyPair, anyhow::Error>: FromResidual<std::result::Result<Infallible, std::result::Result<_, anyhow::Error>>>`
    |
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `anyhow::Error` to implement `From<std::result::Result<_, anyhow::Error>>`
    = note: required for `std::result::Result<pgp::KeyPair, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, std::result::Result<_, anyhow::Error>>>`

error[E0277]: the trait bound `std::result::Result<_, anyhow::Error>: StdError` is not satisfied
   --> src/pgp.rs:166:116
    |
166 |             let (public, secret) = generate_ed25519_keypair().map_err(|_| bail!("Failed generate ed25519 keypair"))?;
    |                                                                                                                    ^ the trait `StdError` is not implemented for `std::result::Result<_, anyhow::Error>`, which is required by `std::result::Result<pgp::KeyPair, anyhow::Error>: FromResidual<std::result::Result<Infallible, std::result::Result<_, anyhow::Error>>>`
    |
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `anyhow::Error` to implement `From<std::result::Result<_, anyhow::Error>>`
    = note: required for `std::result::Result<pgp::KeyPair, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, std::result::Result<_, anyhow::Error>>>`

error[E0599]: no method named `is_empty` found for struct `pgp::SignedPublicKey` in the current scope
   --> src/pgp.rs:172:24
    |
172 |     if key_pair.public.is_empty() || key_pair.secret.is_empty() {
    |                        ^^^^^^^^ method not found in `SignedPublicKey`
    |
help: some of the expressions' fields have a method of the same name
    |
172 |     if key_pair.public.details.revocation_signatures.is_empty() || key_pair.secret.is_empty() {
    |                        ++++++++++++++++++++++++++++++
172 |     if key_pair.public.public_subkeys.is_empty() || key_pair.secret.is_empty() {
    |                        +++++++++++++++

error[E0599]: no method named `is_empty` found for struct `pgp::SignedSecretKey` in the current scope
   --> src/pgp.rs:172:54
    |
172 |     if key_pair.public.is_empty() || key_pair.secret.is_empty() {
    |                                                      ^^^^^^^^ method not found in `SignedSecretKey`
    |
help: some of the expressions' fields have a method of the same name
    |
172 |     if key_pair.public.is_empty() || key_pair.secret.details.revocation_signatures.is_empty() {
    |                                                      ++++++++++++++++++++++++++++++
172 |     if key_pair.public.is_empty() || key_pair.secret.public_subkeys.is_empty() {
    |                                                      +++++++++++++++
172 |     if key_pair.public.is_empty() || key_pair.secret.secret_subkeys.is_empty() {
    |                                                      +++++++++++++++

error[E0599]: no function or associated item named `with_params` found for struct `pgp::SignedSecretKey` in the current scope
   --> src/pgp.rs:190:39
    |
190 |     let secret_key = SignedSecretKey::with_params(&mut rng, key_params)?;
    |                                       ^^^^^^^^^^^ function or associated item not found in `SignedSecretKey`
    |
note: if you're trying to build a new `pgp::SignedSecretKey`, consider using `pgp::SignedSecretKey::new` which returns `pgp::SignedSecretKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/secret.rs:47:5
    |
47  | /     pub fn new(
48  | |         primary_key: packet::SecretKey,
49  | |         details: SignedKeyDetails,
50  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
51  | |         mut secret_subkeys: Vec<SignedSecretSubKey>,
52  | |     ) -> Self {
    | |_____________^

error[E0599]: no function or associated item named `with_params` found for struct `pgp::SignedSecretKey` in the current scope
   --> src/pgp.rs:203:39
    |
203 |     let secret_key = SignedSecretKey::with_params(&mut rng, key_params)?;
    |                                       ^^^^^^^^^^^ function or associated item not found in `SignedSecretKey`
    |
note: if you're trying to build a new `pgp::SignedSecretKey`, consider using `pgp::SignedSecretKey::new` which returns `pgp::SignedSecretKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/secret.rs:47:5
    |
47  | /     pub fn new(
48  | |         primary_key: packet::SecretKey,
49  | |         details: SignedKeyDetails,
50  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
51  | |         mut secret_subkeys: Vec<SignedSecretSubKey>,
52  | |     ) -> Self {
    | |_____________^

error[E0308]: mismatched types
   --> src/pgp.rs:441:13
    |
440 |         let keypair0 = create_keypair(
    |                        -------------- arguments to this function are incorrect
441 |             EmailAddress::new("foo@bar.de").unwrap(),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |             |
    |             expected `String`, found `EmailAddress`
    |
note: function defined here
   --> src/pgp.rs:150:15
    |
150 | pub(crate) fn create_keypair(addr: String, keygen_type: KeyGenType) -> Result<KeyPair> {
    |               ^^^^^^^^^^^^^^ ------------

error[E0308]: mismatched types
   --> src/pgp.rs:446:13
    |
445 |         let keypair1 = create_keypair(
    |                        -------------- arguments to this function are incorrect
446 |             EmailAddress::new("two@zwo.de").unwrap(),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |             |
    |             expected `String`, found `EmailAddress`
    |
note: function defined here
   --> src/pgp.rs:150:15
    |
150 | pub(crate) fn create_keypair(addr: String, keygen_type: KeyGenType) -> Result<KeyPair> {
    |               ^^^^^^^^^^^^^^ ------------

warning: `deltachat` (lib test) generated 5 warnings (5 duplicates)
error: could not compile `deltachat` (lib test) due to 18 previous errors; 5 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


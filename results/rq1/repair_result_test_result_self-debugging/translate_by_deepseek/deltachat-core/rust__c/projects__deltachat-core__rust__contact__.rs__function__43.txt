Fail
file path is :
projects/deltachat-core/rust/src/contact.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `PathBuf` is defined multiple times
  --> src/contact.rs:10:23
   |
4  | use std::path::PathBuf;
   |     ------------------ previous import of the type `PathBuf` here
...
10 | use std::path::{Path, PathBuf};
   |                       ^^^^^^^ `PathBuf` reimported here
   |
   = note: `PathBuf` must be defined only once in the type namespace of this module

error[E0252]: the name `get_abs_path` is defined multiple times
  --> src/contact.rs:45:22
   |
5  | use crate::tools::get_abs_path;
   |     -------------------------- previous import of the value `get_abs_path` here
...
45 |     duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
   |                      ^^^^^^^^^^^^--
   |                      |
   |                      `get_abs_path` reimported here
   |                      help: remove unnecessary import
   |
   = note: `get_abs_path` must be defined only once in the value namespace of this module

warning: unused import: `PathBuf`
  --> src/contact.rs:10:23
   |
10 | use std::path::{Path, PathBuf};
   |                       ^^^^^^^
   |
note: the lint level is defined here
  --> src/lib.rs:6:5
   |
6  |     unused,
   |     ^^^^^^
   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `get_abs_path`
  --> src/contact.rs:45:22
   |
45 |     duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
   |                      ^^^^^^^^^^^^

error[E0308]: mismatched types
    --> src/chat.rs:1748:28
     |
1748 |                     return contact.get_profile_image(context).await;
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<Option<PathBuf>, Error>`, found `Result<Option<PathBuf>, Box<...>>`
     |
     = note: expected enum `std::result::Result<_, anyhow::Error>`
                found enum `std::result::Result<_, Box<dyn StdError>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
   --> src/contact.rs:206:69
    |
206 |         let profile_image = match c.get_profile_image(context).await? {
    |                                                                     ^ `dyn StdError` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<std::string::String, anyhow::Error>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
    |
195 | pub struct Box<
    |            ^^^
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<std::string::String, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
   --> src/contact.rs:206:69
    |
206 |         let profile_image = match c.get_profile_image(context).await? {
    |                                                                     ^ `dyn StdError` cannot be shared between threads safely
    |
    = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<std::string::String, anyhow::Error>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
    |
195 | pub struct Box<
    |            ^^^
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<std::string::String, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
   --> src/contact.rs:206:69
    |
206 |         let profile_image = match c.get_profile_image(context).await? {
    |                                                                     ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<std::string::String, anyhow::Error>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Box<dyn StdError>` to implement `StdError`
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<std::string::String, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0599]: no method named `get_config` found for reference `&Contact` in the current scope
    --> src/contact.rs:1388:27
     |
1388 |     let selfavatar = self.get_config(Config::Selfavatar)?.unwrap_or_default();
     |                           ^^^^^^^^^^ help: there is a method with a similar name: `get_id`

error[E0277]: `dyn StdError` cannot be sent between threads safely
   --> src/qr_code_generator.rs:80:64
    |
80  |     let avatar = match contact.get_profile_image(context).await? {
    |                                                                ^ `dyn StdError` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(std::option::Option<Vec<u8>>, std::string::String, std::string::String, std::string::String), anyhow::Error>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
    |
195 | pub struct Box<
    |            ^^^
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<(std::option::Option<Vec<u8>>, std::string::String, std::string::String, std::string::String), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
   --> src/qr_code_generator.rs:80:64
    |
80  |     let avatar = match contact.get_profile_image(context).await? {
    |                                                                ^ `dyn StdError` cannot be shared between threads safely
    |
    = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(std::option::Option<Vec<u8>>, std::string::String, std::string::String, std::string::String), anyhow::Error>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
    |
195 | pub struct Box<
    |            ^^^
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<(std::option::Option<Vec<u8>>, std::string::String, std::string::String, std::string::String), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
  --> src/qr_code_generator.rs:80:64
   |
80 |     let avatar = match contact.get_profile_image(context).await? {
   |                                                                ^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(std::option::Option<Vec<u8>>, std::string::String, std::string::String, std::string::String), anyhow::Error>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
   = help: the following other types implement trait `FromResidual<R>`:
             <std::result::Result<T, F> as FromResidual<Yeet<E>>>
             <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
   = note: required for `Box<dyn StdError>` to implement `StdError`
   = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
   = note: required for `std::result::Result<(std::option::Option<Vec<u8>>, std::string::String, std::string::String, std::string::String), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

Some errors have detailed explanations: E0252, E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0252`.
warning: `deltachat` (lib) generated 2 warnings
error: could not compile `deltachat` (lib) due to 10 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0599]: no method named `get_config` found for reference `&contact::Contact` in the current scope
    --> src/contact.rs:1388:27
     |
1388 |     let selfavatar = self.get_config(Config::Selfavatar)?.unwrap_or_default();
     |                           ^^^^^^^^^^ help: there is a method with a similar name: `get_id`

error[E0277]: `dyn StdError` cannot be sent between threads safely
   --> src/events/chatlist_events.rs:282:59
    |
282 |         assert!(alice_on_bob.get_profile_image(&bob).await?.is_some());
    |                                                           ^ `dyn StdError` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
    |
195 | pub struct Box<
    |            ^^^
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
   --> src/events/chatlist_events.rs:282:59
    |
282 |         assert!(alice_on_bob.get_profile_image(&bob).await?.is_some());
    |                                                           ^ `dyn StdError` cannot be shared between threads safely
    |
    = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
    |
195 | pub struct Box<
    |            ^^^
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
   --> src/events/chatlist_events.rs:282:59
    |
282 |         assert!(alice_on_bob.get_profile_image(&bob).await?.is_some());
    |                                                           ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Box<dyn StdError>` to implement `StdError`
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:3129:68
     |
3129 |         assert_eq!(alice_bob_contact.get_profile_image(alice).await?, None);
     |                                                                    ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:3129:68
     |
3129 |         assert_eq!(alice_bob_contact.get_profile_image(alice).await?, None);
     |                                                                    ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:3129:68
     |
3129 |         assert_eq!(alice_bob_contact.get_profile_image(alice).await?, None);
     |                                                                    ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

warning: `deltachat` (lib test) generated 2 warnings (2 duplicates)
error: could not compile `deltachat` (lib test) due to 16 previous errors; 2 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


Fail
file path is :
projects/deltachat-core/rust/src/blob.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `io` is defined multiple times
  --> src/blob.rs:21:17
   |
4  | use std::io::{self, Write};
   |               ---- previous import of the module `io` here
...
21 | use tokio::{fs, io};
   |                 ^^ `io` reimported here
   |
   = note: `io` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
21 | use tokio::{fs, io as other_io};
   |                 ~~~~~~~~~~~~~~

warning: unused import: `io`
  --> src/blob.rs:21:17
   |
21 | use tokio::{fs, io};
   |                 ^^
   |
note: the lint level is defined here
  --> src/lib.rs:6:5
   |
6  |     unused,
   |     ^^^^^^
   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

error[E0277]: the trait bound `std::result::Result<PathBuf, anyhow::Error>: AsRef<Path>` is not satisfied
   --> src/config.rs:619:48
    |
619 | ...                   let buf = fs::read(blob.to_abs_path()).await?;
    |                                 -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `std::result::Result<PathBuf, anyhow::Error>`
    |                                 |
    |                                 required by a bound introduced by this call
    |
note: required by a bound in `tokio::fs::read`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
    |
46  | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
    |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0308]: mismatched types
    --> src/chat.rs:2635:80
     |
2635 |             if let Some((better_type, _)) = message::guess_msgtype_from_suffix(&blob.to_abs_path())
     |                                             ---------------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `&Result<PathBuf, Error>`
     |                                             |
     |                                             arguments to this function are incorrect
     |
     = note: expected reference `&Path`
                found reference `&std::result::Result<PathBuf, anyhow::Error>`
note: function defined here
    --> src/message.rs:1371:15
     |
1371 | pub(crate) fn guess_msgtype_from_suffix(path: &Path) -> Option<(Viewtype, &str)> {
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ -----------

error[E0308]: mismatched types
    --> src/chat.rs:2639:54
     |
2639 |                         .ensure_sendable_webxdc_file(&blob.to_abs_path())
     |                          --------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `&Result<PathBuf, Error>`
     |                          |
     |                          arguments to this method are incorrect
     |
     = note: expected reference `&Path`
                found reference `&std::result::Result<PathBuf, anyhow::Error>`
note: method defined here
    --> src/webxdc.rs:223:25
     |
223  |     pub(crate) async fn ensure_sendable_webxdc_file(&self, path: &Path) -> Result<()> {
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^        -----------

error[E0308]: mismatched types
    --> src/chat.rs:2648:46
     |
2648 |                 .ensure_sendable_webxdc_file(&blob.to_abs_path())
     |                  --------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `&Result<PathBuf, Error>`
     |                  |
     |                  arguments to this method are incorrect
     |
     = note: expected reference `&Path`
                found reference `&std::result::Result<PathBuf, anyhow::Error>`
note: method defined here
    --> src/webxdc.rs:223:25
     |
223  |     pub(crate) async fn ensure_sendable_webxdc_file(&self, path: &Path) -> Result<()> {
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^        -----------

error[E0308]: mismatched types
    --> src/chat.rs:2675:73
     |
2675 |             if let Some((_, mime)) = message::guess_msgtype_from_suffix(&blob.to_abs_path()) {
     |                                      ---------------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `&Result<PathBuf, Error>`
     |                                      |
     |                                      arguments to this function are incorrect
     |
     = note: expected reference `&Path`
                found reference `&std::result::Result<PathBuf, anyhow::Error>`
note: function defined here
    --> src/message.rs:1371:15
     |
1371 | pub(crate) fn guess_msgtype_from_suffix(path: &Path) -> Option<(Viewtype, &str)> {
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ -----------

error[E0599]: no method named `display` found for enum `std::result::Result` in the current scope
    --> src/chat.rs:2685:32
     |
2685 |             blob.to_abs_path().display(),
     |                                ^^^^^^^ method not found in `Result<PathBuf, Error>`
     |
note: the method `display` exists on the type `PathBuf`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:2727:5
     |
2727 |     pub fn display(&self) -> Display<'_> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: use the `?` operator to extract the `PathBuf` value, propagating a `Result::Err` value to the caller
     |
2685 |             blob.to_abs_path()?.display(),
     |                               +

error[E0277]: the trait bound `tokio::fs::File: std::io::Read` is not satisfied
   --> src/blob.rs:126:36
    |
126 |         if let Err(err) = io::copy(&mut src_file, &mut dst_file).await {
    |                           -------- ^^^^^^^^^^^^^ the trait `std::io::Read` is not implemented for `tokio::fs::File`
    |                           |
    |                           required by a bound introduced by this call
    |
note: required by a bound in `std::io::copy`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/copy.rs:63:8
    |
61  | pub fn copy<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> Result<u64>
    |        ---- required by a bound in this function
62  | where
63  |     R: Read,
    |        ^^^^ required by this bound in `copy`

error[E0277]: the trait bound `tokio::fs::File: std::io::Write` is not satisfied
   --> src/blob.rs:126:51
    |
126 |         if let Err(err) = io::copy(&mut src_file, &mut dst_file).await {
    |                           --------                ^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `tokio::fs::File`
    |                           |
    |                           required by a bound introduced by this call
    |
note: required by a bound in `std::io::copy`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/copy.rs:64:8
    |
61  | pub fn copy<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> Result<u64>
    |        ---- required by a bound in this function
...
64  |     W: Write,
    |        ^^^^^ required by this bound in `copy`

error[E0277]: `std::result::Result<u64, std::io::Error>` is not a future
   --> src/blob.rs:126:66
    |
126 |         if let Err(err) = io::copy(&mut src_file, &mut dst_file).await {
    |                           ---------------------------------------^^^^^
    |                           |                                     ||
    |                           |                                     |`std::result::Result<u64, std::io::Error>` is not a future
    |                           |                                     help: remove the `.await`
    |                           this call returns `std::result::Result<u64, std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<u64, std::io::Error>`, which is required by `std::result::Result<u64, std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<u64, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<u64, std::io::Error>` to implement `std::future::IntoFuture`

error[E0308]: mismatched types
   --> src/blob.rs:388:13
    |
386 |         if let Some(new_name) = self.recode_to_size(
    |                                      -------------- arguments to this method are incorrect
387 |             context,
388 |             blob_abs,
    |             ^^^^^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
    |
    = note: expected struct `PathBuf`
                 found enum `std::result::Result<PathBuf, anyhow::Error>`
note: method defined here
   --> src/blob.rs:438:8
    |
438 |     fn recode_to_size(
    |        ^^^^^^^^^^^^^^
...
441 |         mut blob_abs: PathBuf,
    |         ---------------------
help: use the `?` operator to extract the `std::result::Result<PathBuf, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
388 |             blob_abs?,
    |                     +

error[E0308]: mismatched types
   --> src/blob.rs:425:13
    |
423 |         if let Some(new_name) = self.recode_to_size(
    |                                      -------------- arguments to this method are incorrect
424 |             context,
425 |             blob_abs,
    |             ^^^^^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
    |
    = note: expected struct `PathBuf`
                 found enum `std::result::Result<PathBuf, anyhow::Error>`
note: method defined here
   --> src/blob.rs:438:8
    |
438 |     fn recode_to_size(
    |        ^^^^^^^^^^^^^^
...
441 |         mut blob_abs: PathBuf,
    |         ---------------------
help: use the `?` operator to extract the `std::result::Result<PathBuf, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
425 |             blob_abs?,
    |                     +

error[E0277]: the trait bound `std::result::Result<PathBuf, anyhow::Error>: AsRef<Path>` is not satisfied
    --> src/mimefactory.rs:1564:25
     |
1564 |     let body = fs::read(blob.to_abs_path()).await?;
     |                -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `std::result::Result<PathBuf, anyhow::Error>`
     |                |
     |                required by a bound introduced by this call
     |
note: required by a bound in `tokio::fs::read`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
     |
46   | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
     |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: the trait bound `std::result::Result<PathBuf, anyhow::Error>: AsRef<Path>` is not satisfied
    --> src/mimefactory.rs:1547:25
     |
1547 |     let body = fs::read(blob.to_abs_path()).await?;
     |                -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `std::result::Result<PathBuf, anyhow::Error>`
     |                |
     |                required by a bound introduced by this call
     |
note: required by a bound in `tokio::fs::read`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
     |
46   | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
     |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: the trait bound `std::result::Result<PathBuf, anyhow::Error>: AsRef<Path>` is not satisfied
   --> src/imex.rs:588:35
    |
588 |         let mut file = File::open(blob.to_abs_path()).await?;
    |                        ---------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `std::result::Result<PathBuf, anyhow::Error>`
    |                        |
    |                        required by a bound introduced by this call
    |
note: required by a bound in `tokio::fs::File::open`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/file.rs:152:34
    |
152 |     pub async fn open(path: impl AsRef<Path>) -> io::Result<File> {
    |                                  ^^^^^^^^^^^ required by this bound in `File::open`

error[E0308]: mismatched types
   --> src/imex/transfer.rs:177:46
    |
177 |             files.push(DataSource::with_name(path, name));
    |                        --------------------- ^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
    |                        |
    |                        arguments to this function are incorrect
    |
    = note: expected struct `PathBuf`
                 found enum `std::result::Result<PathBuf, anyhow::Error>`
note: associated function defined here
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/iroh-0.4.2/src/provider/mod.rs:950:12
    |
950 |     pub fn with_name(path: PathBuf, name: String) -> Self {
    |            ^^^^^^^^^
help: use the `?` operator to extract the `std::result::Result<PathBuf, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
177 |             files.push(DataSource::with_name(path?, name));
    |                                                  +

error[E0277]: the trait bound `std::result::Result<PathBuf, anyhow::Error>: AsRef<Path>` is not satisfied
  --> src/qr_code_generator.rs:35:34
   |
35 |             Some(tokio::fs::read(avatar_blob.to_abs_path()).await?)
   |                  --------------- ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `std::result::Result<PathBuf, anyhow::Error>`
   |                  |
   |                  required by a bound introduced by this call
   |
note: required by a bound in `tokio::fs::read`
  --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
   |
46 | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
   |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: the trait bound `std::result::Result<PathBuf, anyhow::Error>: AsRef<Path>` is not satisfied
  --> src/qr_code_generator.rs:83:34
   |
83 |             Some(tokio::fs::read(avatar_blob.to_abs_path()).await?)
   |                  --------------- ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `std::result::Result<PathBuf, anyhow::Error>`
   |                  |
   |                  required by a bound introduced by this call
   |
note: required by a bound in `tokio::fs::read`
  --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
   |
46 | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
   |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0609]: no field `context` on type `&BlobObject<'a>`
   --> src/blob.rs:206:25
    |
206 |     let context = &self.context;
    |                         ^^^^^^^ unknown field
    |
    = note: available fields are: `blobdir`, `name`

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
   --> src/config.rs:619:48
    |
619 | ...                   let buf = fs::read(blob.to_abs_path()).await?;
    |                                 -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
    |                                 |
    |                                 required by a bound introduced by this call
    |
note: required by a bound in `tokio::fs::read`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
    |
46  | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
    |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0599]: no method named `is_null` found for reference `&std::string::String` in the current scope
   --> src/blob.rs:209:45
    |
209 |     if context.is_null() || path_n_filename.is_null() {
    |                                             ^^^^^^^ method not found in `&String`

error[E0599]: no method named `to_string_lossy` found for reference `&std::string::String` in the current scope
   --> src/blob.rs:213:51
    |
213 |     let mut path_n_filename_abs = path_n_filename.to_string_lossy().to_string();
    |                                                   ^^^^^^^^^^^^^^^ method not found in `&String`
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
4   + use rustix::path::arg::Arg;
    |

error[E0277]: the trait bound `std::result::Result<PathBuf, anyhow::Error>: AsRef<Path>` is not satisfied
   --> src/blob.rs:604:40
    |
604 |         let file = std::fs::File::open(self.to_abs_path())?;
    |                    ------------------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `std::result::Result<PathBuf, anyhow::Error>`
    |                    |
    |                    required by a bound introduced by this call
    |
note: required by a bound in `std::fs::File::open`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:374:20
    |
374 |     pub fn open<P: AsRef<Path>>(path: P) -> io::Result<File> {
    |                    ^^^^^^^^^^^ required by this bound in `File::open`

error[E0308]: `match` arms have incompatible types
   --> src/param.rs:408:39
    |
406 |           let path = match file {
    |  ____________________-
407 | |             ParamsFile::FsPath(path) => path,
    | |                                         ---- this is found to be of type `PathBuf`
408 | |             ParamsFile::Blob(blob) => blob.to_abs_path(),
    | |                                       ^^^^^^^^^^^^^^^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
409 | |         };
    | |_________- `match` arms have incompatible types
    |
    = note: expected struct `PathBuf`
                 found enum `std::result::Result<PathBuf, anyhow::Error>`
help: use the `?` operator to extract the `std::result::Result<PathBuf, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
408 |             ParamsFile::Blob(blob) => blob.to_abs_path()?,
    |                                                         +

warning: unused import: `Write`
 --> src/blob.rs:4:21
  |
4 | use std::io::{self, Write};
  |                     ^^^^^

Some errors have detailed explanations: E0252, E0277, E0308, E0599, E0609.
For more information about an error, try `rustc --explain E0252`.
error[E0308]: mismatched types
    --> src/chat.rs:2635:80
     |
2635 |             if let Some((better_type, _)) = message::guess_msgtype_from_suffix(&blob.to_abs_path())
     |                                             ---------------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `&Result<PathBuf, Error>`
     |                                             |
     |                                             arguments to this function are incorrect
     |
     = note: expected reference `&std::path::Path`
                found reference `&std::result::Result<std::path::PathBuf, anyhow::Error>`
note: function defined here
    --> src/message.rs:1371:15
     |
1371 | pub(crate) fn guess_msgtype_from_suffix(path: &Path) -> Option<(Viewtype, &str)> {
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ -----------

warning: `deltachat` (lib) generated 2 warnings
error: could not compile `deltachat` (lib) due to 23 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
    --> src/chat.rs:2639:54
     |
2639 |                         .ensure_sendable_webxdc_file(&blob.to_abs_path())
     |                          --------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `&Result<PathBuf, Error>`
     |                          |
     |                          arguments to this method are incorrect
     |
     = note: expected reference `&std::path::Path`
                found reference `&std::result::Result<std::path::PathBuf, anyhow::Error>`
note: method defined here
    --> src/webxdc.rs:223:25
     |
223  |     pub(crate) async fn ensure_sendable_webxdc_file(&self, path: &Path) -> Result<()> {
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^        -----------

error[E0308]: mismatched types
    --> src/chat.rs:2648:46
     |
2648 |                 .ensure_sendable_webxdc_file(&blob.to_abs_path())
     |                  --------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `&Result<PathBuf, Error>`
     |                  |
     |                  arguments to this method are incorrect
     |
     = note: expected reference `&std::path::Path`
                found reference `&std::result::Result<std::path::PathBuf, anyhow::Error>`
note: method defined here
    --> src/webxdc.rs:223:25
     |
223  |     pub(crate) async fn ensure_sendable_webxdc_file(&self, path: &Path) -> Result<()> {
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^        -----------

error[E0308]: mismatched types
    --> src/chat.rs:2675:73
     |
2675 |             if let Some((_, mime)) = message::guess_msgtype_from_suffix(&blob.to_abs_path()) {
     |                                      ---------------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `&Result<PathBuf, Error>`
     |                                      |
     |                                      arguments to this function are incorrect
     |
     = note: expected reference `&std::path::Path`
                found reference `&std::result::Result<std::path::PathBuf, anyhow::Error>`
note: function defined here
    --> src/message.rs:1371:15
     |
1371 | pub(crate) fn guess_msgtype_from_suffix(path: &Path) -> Option<(Viewtype, &str)> {
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ -----------

error[E0599]: no method named `display` found for enum `std::result::Result` in the current scope
    --> src/chat.rs:2685:32
     |
2685 |             blob.to_abs_path().display(),
     |                                ^^^^^^^ method not found in `Result<PathBuf, Error>`
     |
note: the method `display` exists on the type `std::path::PathBuf`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:2727:5
     |
2727 |     pub fn display(&self) -> Display<'_> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: use the `?` operator to extract the `std::path::PathBuf` value, propagating a `Result::Err` value to the caller
     |
2685 |             blob.to_abs_path()?.display(),
     |                               +

error[E0308]: mismatched types
   --> src/blob.rs:388:13
    |
386 |         if let Some(new_name) = self.recode_to_size(
    |                                      -------------- arguments to this method are incorrect
387 |             context,
388 |             blob_abs,
    |             ^^^^^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
    |
    = note: expected struct `std::path::PathBuf`
                 found enum `std::result::Result<std::path::PathBuf, anyhow::Error>`
note: method defined here
   --> src/blob.rs:438:8
    |
438 |     fn recode_to_size(
    |        ^^^^^^^^^^^^^^
...
441 |         mut blob_abs: PathBuf,
    |         ---------------------
help: use the `?` operator to extract the `std::result::Result<std::path::PathBuf, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
388 |             blob_abs?,
    |                     +

error[E0308]: mismatched types
   --> src/blob.rs:425:13
    |
423 |         if let Some(new_name) = self.recode_to_size(
    |                                      -------------- arguments to this method are incorrect
424 |             context,
425 |             blob_abs,
    |             ^^^^^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
    |
    = note: expected struct `std::path::PathBuf`
                 found enum `std::result::Result<std::path::PathBuf, anyhow::Error>`
note: method defined here
   --> src/blob.rs:438:8
    |
438 |     fn recode_to_size(
    |        ^^^^^^^^^^^^^^
...
441 |         mut blob_abs: PathBuf,
    |         ---------------------
help: use the `?` operator to extract the `std::result::Result<std::path::PathBuf, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
425 |             blob_abs?,
    |                     +

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
    --> src/mimefactory.rs:1564:25
     |
1564 |     let body = fs::read(blob.to_abs_path()).await?;
     |                -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
     |                |
     |                required by a bound introduced by this call
     |
note: required by a bound in `tokio::fs::read`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
     |
46   | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
     |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
    --> src/mimefactory.rs:1547:25
     |
1547 |     let body = fs::read(blob.to_abs_path()).await?;
     |                -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
     |                |
     |                required by a bound introduced by this call
     |
note: required by a bound in `tokio::fs::read`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
     |
46   | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
     |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
   --> src/imex.rs:588:35
    |
588 |         let mut file = File::open(blob.to_abs_path()).await?;
    |                        ---------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
    |                        |
    |                        required by a bound introduced by this call
    |
note: required by a bound in `tokio::fs::File::open`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/file.rs:152:34
    |
152 |     pub async fn open(path: impl AsRef<Path>) -> io::Result<File> {
    |                                  ^^^^^^^^^^^ required by this bound in `File::open`

error[E0308]: mismatched types
   --> src/imex/transfer.rs:177:46
    |
177 |             files.push(DataSource::with_name(path, name));
    |                        --------------------- ^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
    |                        |
    |                        arguments to this function are incorrect
    |
    = note: expected struct `std::path::PathBuf`
                 found enum `std::result::Result<std::path::PathBuf, anyhow::Error>`
note: associated function defined here
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/iroh-0.4.2/src/provider/mod.rs:950:12
    |
950 |     pub fn with_name(path: PathBuf, name: String) -> Self {
    |            ^^^^^^^^^
help: use the `?` operator to extract the `std::result::Result<std::path::PathBuf, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
177 |             files.push(DataSource::with_name(path?, name));
    |                                                  +

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
  --> src/qr_code_generator.rs:35:34
   |
35 |             Some(tokio::fs::read(avatar_blob.to_abs_path()).await?)
   |                  --------------- ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
   |                  |
   |                  required by a bound introduced by this call
   |
note: required by a bound in `tokio::fs::read`
  --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
   |
46 | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
   |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
  --> src/qr_code_generator.rs:83:34
   |
83 |             Some(tokio::fs::read(avatar_blob.to_abs_path()).await?)
   |                  --------------- ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
   |                  |
   |                  required by a bound introduced by this call
   |
note: required by a bound in `tokio::fs::read`
  --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
   |
46 | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
   |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0609]: no field `context` on type `&blob::BlobObject<'a>`
   --> src/blob.rs:206:25
    |
206 |     let context = &self.context;
    |                         ^^^^^^^ unknown field
    |
    = note: available fields are: `blobdir`, `name`

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
   --> src/blob.rs:604:40
    |
604 |         let file = std::fs::File::open(self.to_abs_path())?;
    |                    ------------------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
    |                    |
    |                    required by a bound introduced by this call
    |
note: required by a bound in `std::fs::File::open`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:374:20
    |
374 |     pub fn open<P: AsRef<Path>>(path: P) -> io::Result<File> {
    |                    ^^^^^^^^^^^ required by this bound in `File::open`

error[E0369]: binary operation `==` cannot be applied to type `std::result::Result<std::path::PathBuf, anyhow::Error>`
   --> src/blob.rs:792:9
    |
792 |         assert_eq!(blob.to_abs_path(), t.get_blobdir().join("foo"));
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |         |
    |         std::result::Result<std::path::PathBuf, anyhow::Error>
    |         std::path::PathBuf
    |
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
   --> src/blob.rs:886:29
    |
886 |         let data = fs::read(blob.to_abs_path()).await.unwrap();
    |                    -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
    |                    |
    |                    required by a bound introduced by this call
    |
note: required by a bound in `tokio::fs::read`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
    |
46  | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
    |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
   --> src/blob.rs:907:29
    |
907 |         let data = fs::read(blob.to_abs_path()).await.unwrap();
    |                    -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
    |                    |
    |                    required by a bound introduced by this call
    |
note: required by a bound in `tokio::fs::read`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
    |
46  | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
    |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
   --> src/blob.rs:914:29
    |
914 |         let data = fs::read(blob.to_abs_path()).await.unwrap();
    |                    -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
    |                    |
    |                    required by a bound introduced by this call
    |
note: required by a bound in `tokio::fs::read`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
    |
46  | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
    |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0308]: mismatched types
   --> src/blob.rs:998:17
    |
996 |             blob.recode_to_size(
    |                  -------------- arguments to this method are incorrect
997 |                 &t,
998 |                 blob.to_abs_path(),
    |                 ^^^^^^^^^^^^^^^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
    |
    = note: expected struct `std::path::PathBuf`
                 found enum `std::result::Result<std::path::PathBuf, anyhow::Error>`
note: method defined here
   --> src/blob.rs:438:8
    |
438 |     fn recode_to_size(
    |        ^^^^^^^^^^^^^^
...
441 |         mut blob_abs: PathBuf,
    |         ---------------------
help: consider using `Result::expect` to unwrap the `std::result::Result<std::path::PathBuf, anyhow::Error>` value, panicking if the value is a `Result::Err`
    |
998 |                 blob.to_abs_path().expect("REASON"),
    |                                   +++++++++++++++++

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
    --> src/blob.rs:1006:39
     |
1006 |                 let img = image::open(blob.to_abs_path()).unwrap();
     |                           ----------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
     |                           |
     |                           required by a bound introduced by this call
     |
note: required by a bound in `open`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/image-0.25.1/src/dynimage.rs:1085:8
     |
1083 | pub fn open<P>(path: P) -> ImageResult<DynamicImage>
     |        ---- required by a bound in this function
1084 | where
1085 |     P: AsRef<Path>,
     |        ^^^^^^^^^^^ required by this bound in `open`

error[E0308]: mismatched types
    --> src/blob.rs:1047:13
     |
1045 |         blob.recode_to_size(
     |              -------------- arguments to this method are incorrect
1046 |             &t,
1047 |             blob.to_abs_path(),
     |             ^^^^^^^^^^^^^^^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
     |
     = note: expected struct `std::path::PathBuf`
                  found enum `std::result::Result<std::path::PathBuf, anyhow::Error>`
note: method defined here
    --> src/blob.rs:438:8
     |
438  |     fn recode_to_size(
     |        ^^^^^^^^^^^^^^
...
441  |         mut blob_abs: PathBuf,
     |         ---------------------
help: consider using `Result::expect` to unwrap the `std::result::Result<std::path::PathBuf, anyhow::Error>` value, panicking if the value is a `Result::Err`
     |
1047 |             blob.to_abs_path().expect("REASON"),
     |                               +++++++++++++++++

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
    --> src/mimeparser.rs:3085:39
     |
3085 |         let f = tokio::fs::File::open(blob.to_abs_path()).await.unwrap();
     |                 --------------------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
     |                 |
     |                 required by a bound introduced by this call
     |
note: required by a bound in `tokio::fs::File::open`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/file.rs:152:34
     |
152  |     pub async fn open(path: impl AsRef<Path>) -> io::Result<File> {
     |                                  ^^^^^^^^^^^ required by this bound in `File::open`

error[E0308]: `match` arms have incompatible types
   --> src/param.rs:408:39
    |
406 |           let path = match file {
    |  ____________________-
407 | |             ParamsFile::FsPath(path) => path,
    | |                                         ---- this is found to be of type `std::path::PathBuf`
408 | |             ParamsFile::Blob(blob) => blob.to_abs_path(),
    | |                                       ^^^^^^^^^^^^^^^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
409 | |         };
    | |_________- `match` arms have incompatible types
    |
    = note: expected struct `std::path::PathBuf`
                 found enum `std::result::Result<std::path::PathBuf, anyhow::Error>`
help: use the `?` operator to extract the `std::result::Result<std::path::PathBuf, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
408 |             ParamsFile::Blob(blob) => blob.to_abs_path()?,
    |                                                         +

Some errors have detailed explanations: E0252, E0277, E0308, E0369, E0599, E0609.
warning: `deltachat` (lib test) generated 2 warnings (2 duplicates)
error: could not compile `deltachat` (lib test) due to 31 previous errors; 2 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


Fail
file path is :
projects/deltachat-core/rust/src/location.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0255]: the name `delete_orphaned_poi_locations` is defined multiple times
   --> src/location.rs:541:1
    |
26  | use crate::location::{self, delete_orphaned_poi_locations, delete_poi_location, get_message_kml, get_kml, is_sending_locations_to_chat};
    |                             ----------------------------- previous import of the value `delete_orphaned_poi_locations` here
...
541 | pub(crate) async fn delete_orphaned_poi_locations(context: &Context) -> Result<()> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `delete_orphaned_poi_locations` redefined here
    |
    = note: `delete_orphaned_poi_locations` must be defined only once in the value namespace of this module
help: you can use `as` to change the binding name of the import
    |
26  | use crate::location::{self, delete_orphaned_poi_locations as other_delete_orphaned_poi_locations, delete_poi_location, get_message_kml, get_kml, is_sending_locations_to_chat};
    |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0255]: the name `delete_poi_location` is defined multiple times
   --> src/location.rs:529:1
    |
26  | use crate::location::{self, delete_orphaned_poi_locations, delete_poi_location, get_message_kml, get_kml, is_sending_locations_to_chat};
    |                                                            ------------------- previous import of the value `delete_poi_location` here
...
529 | pub(crate) async fn delete_poi_location(context: &Context, location_id: u32) -> Result<()> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `delete_poi_location` redefined here
    |
    = note: `delete_poi_location` must be defined only once in the value namespace of this module
help: you can use `as` to change the binding name of the import
    |
26  | use crate::location::{self, delete_orphaned_poi_locations, delete_poi_location as other_delete_poi_location, get_message_kml, get_kml, is_sending_locations_to_chat};
    |                                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0255]: the name `get_message_kml` is defined multiple times
   --> src/location.rs:639:1
    |
26  | use crate::location::{self, delete_orphaned_poi_locations, delete_poi_location, get_message_kml, get_kml, is_sending_locations_to_chat};
    |                                                                                 --------------- previous import of the value `get_message_kml` here
...
639 | pub fn get_message_kml(timestamp: i64, latitude: f64, longitude: f64) -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `get_message_kml` redefined here
    |
    = note: `get_message_kml` must be defined only once in the value namespace of this module
help: you can use `as` to change the binding name of the import
    |
26  | use crate::location::{self, delete_orphaned_poi_locations, delete_poi_location, get_message_kml as other_get_message_kml, get_kml, is_sending_locations_to_chat};
    |                                                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0255]: the name `get_kml` is defined multiple times
   --> src/location.rs:553:1
    |
26  | use crate::location::{self, delete_orphaned_poi_locations, delete_poi_location, get_message_kml, get_kml, is_sending_locations_to_chat};
    |                                                                                                  ------- previous import of the value `get_kml` here
...
553 | pub async fn get_kml(context: &Context, chat_id: ChatId) -> Result<Option<(String, u32)>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `get_kml` redefined here
    |
    = note: `get_kml` must be defined only once in the value namespace of this module
help: you can use `as` to change the binding name of the import
    |
26  | use crate::location::{self, delete_orphaned_poi_locations, delete_poi_location, get_message_kml, get_kml as other_get_kml, is_sending_locations_to_chat};
    |                                                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0255]: the name `is_sending_locations_to_chat` is defined multiple times
   --> src/location.rs:331:1
    |
26  |   use crate::location::{self, delete_orphaned_poi_locations, delete_poi_location, get_message_kml, get_kml, is_sending_locations_to_chat};
    |                                                                                                             ---------------------------- previous import of the value `is_sending_locations_to_chat` here
...
331 | / pub async fn is_sending_locations_to_chat(
332 | |     context: &Context,
333 | |     chat_id: Option<ChatId>,
334 | | ) -> Result<bool> {
...   |
355 | |     Ok(exists)
356 | | }
    | |_^ `is_sending_locations_to_chat` redefined here
    |
    = note: `is_sending_locations_to_chat` must be defined only once in the value namespace of this module
help: you can use `as` to change the binding name of the import
    |
26  | use crate::location::{self, delete_orphaned_poi_locations, delete_poi_location, get_message_kml, get_kml, is_sending_locations_to_chat as other_is_sending_locations_to_chat};
    |                                                                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0255]: the name `Location` is defined multiple times
  --> src/location.rs:48:1
   |
27 | use crate::location::Location;
   |     ------------------------- previous import of the type `Location` here
...
48 | pub struct Location {
   | ^^^^^^^^^^^^^^^^^^^ `Location` redefined here
   |
   = note: `Location` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
27 | use crate::location::Location as OtherLocation;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0425]: cannot find function `new` in this scope
   --> src/location.rs:437:61
    |
437 |         params![chat_id.is_none() as i32, chat_id.unwrap_or(new(0)).0],
    |                                                             ^^^ not found in this scope
    |
help: consider importing this function
    |
14  + use tagger::new;
    |

warning: unused import: `std::sync::Arc`
  --> src/location.rs:14:5
   |
14 | use std::sync::Arc;
   |     ^^^^^^^^^^^^^^
   |
note: the lint level is defined here
  --> src/lib.rs:6:5
   |
6  |     unused,
   |     ^^^^^^
   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `Row`
  --> src/location.rs:16:24
   |
16 | use rusqlite::{params, Row};
   |                        ^^^

warning: unused import: `tokio::sync::Notify`
  --> src/location.rs:17:5
   |
17 | use tokio::sync::Notify;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `tokio::sync::RwLock`
  --> src/location.rs:18:5
   |
18 | use tokio::sync::RwLock;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `tokio::sync::Mutex`
  --> src/location.rs:19:5
   |
19 | use tokio::sync::Mutex;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
  --> src/location.rs:20:5
   |
20 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::PathBuf`
  --> src/location.rs:21:5
   |
21 | use std::path::PathBuf;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::atomic::AtomicBool`
  --> src/location.rs:22:5
   |
22 | use std::sync::atomic::AtomicBool;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::atomic::Ordering`
  --> src/location.rs:23:5
   |
23 | use std::sync::atomic::Ordering;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::RwLock as StdRwLock`
  --> src/location.rs:24:5
   |
24 | use std::sync::RwLock as StdRwLock;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc as StdArc`
  --> src/location.rs:25:5
   |
25 | use std::sync::Arc as StdArc;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `delete_orphaned_poi_locations`, `delete_poi_location`, `get_kml`, `get_message_kml`, `is_sending_locations_to_chat`, `self`
  --> src/location.rs:26:23
   |
26 | use crate::location::{self, delete_orphaned_poi_locations, delete_poi_location, get_message_kml, get_kml, is_sending_locations_to_chat};
   |                       ^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::location::Location`
  --> src/location.rs:27:5
   |
27 | use crate::location::Location;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0616]: field `0` of struct `ChatId` is private
   --> src/location.rs:437:69
    |
437 |         params![chat_id.is_none() as i32, chat_id.unwrap_or(new(0)).0],
    |                                                                     ^ private field

error[E0599]: no method named `query_map` found for reference `&context::Context` in the current scope
   --> src/location.rs:445:13
    |
445 |     context.query_map(&sql, &params, |row| {
    |     --------^^^^^^^^^ method not found in `&Context`
    |
help: one of the expressions' fields has a method of the same name
    |
445 |     context.inner.sql.query_map(&sql, &params, |row| {
    |             ++++++++++
help: one of the expressions' fields has a method of the same name
    |
445 |     context.sql.query_map(&sql, &params, |row| {
    |             ++++

error[E0423]: cannot initialize a tuple struct which contains private fields
   --> src/location.rs:463:25
    |
463 |             contact_id: ContactId(contact_id as u32),
    |                         ^^^^^^^^^
    |
note: constructor is not visible here due to private fields
   --> src/contact.rs:55:22
    |
55  | pub struct ContactId(u32);
    |                      ^^^ private field
help: consider making the field publicly accessible
   --> src/contact.rs:55:22
    |
55  | pub struct ContactId(pub u32);
    |                      +++
help: a local variable with a similar name exists
    |
463 |             contact_id: contact_id(contact_id as u32),
    |                         ~~~~~~~~~~

error[E0423]: cannot initialize a tuple struct which contains private fields
   --> src/location.rs:465:22
    |
465 |             chat_id: ChatId(chat_id as u32),
    |                      ^^^^^^
    |
note: constructor is not visible here due to private fields
   --> src/chat.rs:166:19
    |
166 | pub struct ChatId(u32);
    |                   ^^^ private field
help: consider making the field publicly accessible
   --> src/chat.rs:166:19
    |
166 | pub struct ChatId(pub u32);
    |                   +++

error[E0616]: field `0` of struct `chat::ChatId` is private
   --> src/location.rs:437:69
    |
437 |         params![chat_id.is_none() as i32, chat_id.unwrap_or(new(0)).0],
    |                                                                     ^ private field

Some errors have detailed explanations: E0255, E0423, E0425, E0599, E0616.
For more information about an error, try `rustc --explain E0255`.
warning: `deltachat` (lib) generated 13 warnings
error: could not compile `deltachat` (lib) due to 11 previous errors; 13 warnings emitted
warning: build failed, waiting for other jobs to finish...
warning: `deltachat` (lib test) generated 13 warnings (13 duplicates)
error: could not compile `deltachat` (lib test) due to 11 previous errors; 13 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


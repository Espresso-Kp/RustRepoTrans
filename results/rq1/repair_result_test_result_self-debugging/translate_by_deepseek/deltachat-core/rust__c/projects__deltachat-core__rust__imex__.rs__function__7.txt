Fail
file path is :
projects/deltachat-core/rust/src/imex.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0428]: the name `set_self_key` is defined multiple times
   --> src/imex.rs:397:1
    |
391 | fn set_self_key(context: &Context, armored: &str, set_default: bool) -> bool {
    | ---------------------------------------------------------------------------- previous definition of the value `set_self_key` here
...
397 | async fn set_self_key(context: &Context, armored: &str, set_default: bool) -> Result<()> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `set_self_key` redefined here
    |
    = note: `set_self_key` must be defined only once in the value namespace of this module

error[E0252]: the name `Path` is defined multiple times
  --> src/imex.rs:14:17
   |
4  | use std::path::Path;
   |     --------------- previous import of the type `Path` here
...
14 | use std::path::{Path, PathBuf};
   |                 ^^^^--
   |                 |
   |                 `Path` reimported here
   |                 help: remove unnecessary import
   |
   = note: `Path` must be defined only once in the type namespace of this module

error[E0252]: the name `Result` is defined multiple times
  --> src/imex.rs:17:54
   |
6  | use anyhow::Result;
   |     -------------- previous import of the type `Result` here
...
17 | use anyhow::{bail, ensure, format_err, Context as _, Result};
   |                                                      ^^^^^^ `Result` reimported here
   |
   = note: `Result` must be defined only once in the type namespace of this module

error[E0252]: the name `key` is defined multiple times
  --> src/imex.rs:33:5
   |
9  | use crate::key;
   |     ---------- previous import of the module `key` here
...
33 |     self, load_self_secret_key, DcKey, DcSecretKey, SignedPublicKey, SignedSecretKey,
   |     ^^^^--
   |     |
   |     `key` reimported here
   |     help: remove unnecessary import
   |
   = note: `key` must be defined only once in the type namespace of this module

error[E0252]: the name `open_file_std` is defined multiple times
  --> src/imex.rs:43:52
   |
10 | use crate::tools::open_file_std;
   |     --------------------------- previous import of the value `open_file_std` here
...
43 |     create_folder, delete_file, get_filesuffix_lc, open_file_std, read_file, time, write_file,
   |                                                    ^^^^^^^^^^^^^--
   |                                                    |
   |                                                    `open_file_std` reimported here
   |                                                    help: remove unnecessary import
   |
   = note: `open_file_std` must be defined only once in the value namespace of this module

error[E0432]: unresolved import `crate::Context`
 --> src/imex.rs:7:5
  |
7 | use crate::Context;
  |     ^^^^^^^^^^^^^^ no `Context` in the root
  |
help: a similar name exists in the module
  |
7 | use crate::context;
  |            ~~~~~~~
help: consider importing one of these items instead
  |
7 | use anyhow::Context;
  |     ~~~~~~~~~~~~~~~
7 | use core::task::Context;
  |     ~~~~~~~~~~~~~~~~~~~
7 | use crate::context::Context;
  |     ~~~~~~~~~~~~~~~~~~~~~~~
7 | use exif::Context;
  |     ~~~~~~~~~~~~~
    and 2 other candidates

error[E0432]: unresolved import `crate::MsgId`
 --> src/imex.rs:8:5
  |
8 | use crate::MsgId;
  |     ^^^^^^^^^^^^ no `MsgId` in the root
  |
help: consider importing this struct instead
  |
8 | use crate::message::MsgId;
  |     ~~~~~~~~~~~~~~~~~~~~~

error[E0425]: cannot find value `armored_key` in this scope
   --> src/imex.rs:352:10
    |
352 |     free(armored_key);
    |          ^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `filecontent` in this scope
   --> src/imex.rs:353:10
    |
353 |     free(filecontent);
    |          ^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `filename` in this scope
   --> src/imex.rs:354:10
    |
354 |     free(filename);
    |          ^^^^^^^^ not found in this scope

error[E0425]: cannot find value `msg` in this scope
   --> src/imex.rs:355:18
    |
355 |     dc_msg_unref(msg);
    |                  ^^^ not found in this scope

error[E0425]: cannot find value `norm_sc` in this scope
   --> src/imex.rs:356:10
    |
356 |     free(norm_sc);
    |          ^^^^^^^ not found in this scope

error[E0412]: cannot find type `dc_msg_t` in this scope
   --> src/imex.rs:366:65
    |
366 | async fn dc_get_msg(context: &Context, msg_id: MsgId) -> Option<dc_msg_t> {
    |                                                                 ^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
366 | async fn dc_get_msg<dc_msg_t>(context: &Context, msg_id: MsgId) -> Option<dc_msg_t> {
    |                    ++++++++++

error[E0412]: cannot find type `dc_msg_t` in this scope
   --> src/imex.rs:370:33
    |
370 | fn dc_msg_is_setupmessage(msg: &dc_msg_t) -> bool {
    |                                 ^^^^^^^^ not found in this scope

error[E0412]: cannot find type `dc_msg_t` in this scope
   --> src/imex.rs:373:26
    |
373 | fn dc_msg_get_file(msg: &dc_msg_t) -> Option<&str> {
    |                          ^^^^^^^^ not found in this scope

warning: unused import: `std::sync::Arc`
 --> src/imex.rs:5:5
  |
5 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `Path`
  --> src/imex.rs:14:17
   |
14 | use std::path::{Path, PathBuf};
   |                 ^^^^

warning: unused import: `Result`
  --> src/imex.rs:17:54
   |
17 | use anyhow::{bail, ensure, format_err, Context as _, Result};
   |                                                      ^^^^^^

warning: unused import: `self`
  --> src/imex.rs:33:5
   |
33 |     self, load_self_secret_key, DcKey, DcSecretKey, SignedPublicKey, SignedSecretKey,
   |     ^^^^

warning: unused import: `open_file_std`
  --> src/imex.rs:43:52
   |
43 |     create_folder, delete_file, get_filesuffix_lc, open_file_std, read_file, time, write_file,
   |                                                    ^^^^^^^^^^^^^

error: usage of an `unsafe` block
   --> src/imex.rs:362:5
    |
362 | /     unsafe {
363 | |         std::ptr::drop_in_place(ptr);
364 | |     }
    | |_____^
    |
note: the lint level is defined here
   --> src/lib.rs:4:11
    |
4   | #![forbid(unsafe_code)]
    |           ^^^^^^^^^^^

error[E0277]: `bool` is not a future
   --> src/imex.rs:705:50
    |
705 |     set_self_key(context, &armored, set_default).await?;
    |     -------------------------------------------- ^^^^^ `bool` is not a future
    |     |
    |     this call returns `bool`
    |
    = help: the trait `futures::Future` is not implemented for `bool`, which is required by `bool: std::future::IntoFuture`
    = note: bool must be a future or must implement `IntoFuture` to be awaited
    = note: required for `bool` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
705 -     set_self_key(context, &armored, set_default).await?;
705 +     set_self_key(context, &armored, set_default)?;
    |
help: alternatively, consider making `fn set_self_key` asynchronous
    |
391 | async fn set_self_key(context: &Context, armored: &str, set_default: bool) -> bool {
    | +++++

error[E0599]: no method named `is_special` found for reference `&context::Context` in the current scope
   --> src/imex.rs:296:16
    |
296 |     if context.is_special() || setup_code.is_none() {
    |                ^^^^^^^^^^ method not found in `&Context`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `is_special`, perhaps you need to implement it:
            candidate #1: `aho_corasick::automaton::Automaton`

error[E0599]: no method named `is_none` found for reference `&str` in the current scope
   --> src/imex.rs:296:43
    |
296 |     if context.is_special() || setup_code.is_none() {
    |                                           ^^^^^^^ method not found in `&str`

error[E0277]: `std::result::Result<std::fs::File, anyhow::Error>` is not a future
   --> src/imex.rs:311:74
    |
311 |     if let Ok(file) = open_file_std(context, filename.as_ref().unwrap()).await {
    |                       -------------------------------------------------- ^^^^^ `std::result::Result<std::fs::File, anyhow::Error>` is not a future
    |                       |
    |                       this call returns `std::result::Result<std::fs::File, anyhow::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<std::fs::File, anyhow::Error>`, which is required by `std::result::Result<std::fs::File, anyhow::Error>: std::future::IntoFuture`
    = note: std::result::Result<std::fs::File, anyhow::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<std::fs::File, anyhow::Error>` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
311 -     if let Ok(file) = open_file_std(context, filename.as_ref().unwrap()).await {
311 +     if let Ok(file) = open_file_std(context, filename.as_ref().unwrap()) {
    |
help: alternatively, consider making `fn open_file_std` asynchronous
   --> src/tools.rs:441:4
    |
441 | pub async fn open_file_std(context: &Context, path: impl AsRef<Path>) -> Result<std::fs::File> {
    |     +++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> src/imex.rs:312:39
    |
312 |         if let Ok((content, bytes)) = read_file(&file) {
    |                                       ^^^^^^^^^------- an argument is missing
    |
note: function defined here
   --> src/tools.rs:407:14
    |
407 | pub async fn read_file(context: &Context, path: impl AsRef<Path>) -> Result<Vec<u8>> {
    |              ^^^^^^^^^ -----------------  ----------------------
help: provide the argument
    |
312 |         if let Ok((content, bytes)) = read_file(&file, /* path */) {
    |                                                ~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> src/imex.rs:312:16
    |
312 |         if let Ok((content, bytes)) = read_file(&file) {
    |                ^^^^^^^^^^^^^^^^^^^^   ---------------- this expression has type `impl futures::Future<Output = std::result::Result<Vec<u8>, anyhow::Error>>`
    |                |
    |                expected future, found `Result<_, _>`
    |
    = note: expected opaque type `impl futures::Future<Output = std::result::Result<Vec<u8>, anyhow::Error>>`
                      found enum `std::result::Result<_, _>`
help: consider `await`ing on the `Future`
    |
312 |         if let Ok((content, bytes)) = read_file(&file).await {
    |                                                       ++++++

error[E0277]: `std::option::Option<std::string::String>` is not a future
   --> src/imex.rs:324:70
    |
324 |     if let Some(normalized_sc) = dc_normalize_setup_code(setup_code).await {
    |                                  ----------------------------------- ^^^^^ `std::option::Option<std::string::String>` is not a future
    |                                  |
    |                                  this call returns `std::option::Option<std::string::String>`
    |
    = help: the trait `futures::Future` is not implemented for `std::option::Option<std::string::String>`, which is required by `std::option::Option<std::string::String>: std::future::IntoFuture`
    = note: std::option::Option<std::string::String> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::option::Option<std::string::String>` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
324 -     if let Some(normalized_sc) = dc_normalize_setup_code(setup_code).await {
324 +     if let Some(normalized_sc) = dc_normalize_setup_code(setup_code) {
    |
help: alternatively, consider making `fn dc_normalize_setup_code` asynchronous
    |
385 | async fn dc_normalize_setup_code(setup_code: &str) -> Option<String> {
    | +++++

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imex.rs:331:73
    |
331 |     if let Some(decrypted_key) = dc_decrypt_setup_file(context, norm_sc.as_ref().unwrap(), filecontent.as_ref().unwrap()).await {
    |                                                                         ^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::option::Option::<T>::as_ref`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:585:6
    |
585 | impl<T> Option<T> {
    |      ^ required by this bound in `Option::<T>::as_ref`
...
680 |     pub const fn as_ref(&self) -> Option<&T> {
    |                  ------ required by a bound in this associated function

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imex.rs:294:23
    |
294 |     let mut norm_sc = None;
    |                       ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::None`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `std::prelude::v1::None`
...
574 |     None,
    |     ---- required by a bound in this unit variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imex.rs:325:24
    |
325 |         norm_sc = Some(normalized_sc);
    |                   ---- ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |                   |
    |                   required by a bound introduced by this call
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::Some`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `std::prelude::v1::Some`
...
578 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ---- required by a bound in this tuple variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imex.rs:324:17
    |
324 |     if let Some(normalized_sc) = dc_normalize_setup_code(setup_code).await {
    |                 ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imex.rs:324:12
    |
324 |     if let Some(normalized_sc) = dc_normalize_setup_code(setup_code).await {
    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::Some`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `std::prelude::v1::Some`
...
578 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ---- required by a bound in this tuple variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imex.rs:324:70
    |
324 |     if let Some(normalized_sc) = dc_normalize_setup_code(setup_code).await {
    |                                                                      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::option::Option`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `Option`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imex.rs:331:104
    |
331 |     if let Some(decrypted_key) = dc_decrypt_setup_file(context, norm_sc.as_ref().unwrap(), filecontent.as_ref().unwrap()).await {
    |                                                                                                        ^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::option::Option::<T>::as_ref`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:585:6
    |
585 | impl<T> Option<T> {
    |      ^ required by this bound in `Option::<T>::as_ref`
...
680 |     pub const fn as_ref(&self) -> Option<&T> {
    |                  ------ required by a bound in this associated function

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imex.rs:291:27
    |
291 |     let mut filecontent = None;
    |                           ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::None`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `std::prelude::v1::None`
...
574 |     None,
    |     ---- required by a bound in this unit variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imex.rs:313:32
    |
313 |             filecontent = Some(content);
    |                           ---- ^^^^^^^ doesn't have a size known at compile-time
    |                           |
    |                           required by a bound introduced by this call
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::Some`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `std::prelude::v1::Some`
...
578 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ---- required by a bound in this tuple variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imex.rs:312:20
    |
312 |         if let Ok((content, bytes)) = read_file(&file) {
    |                    ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: `std::option::Option<std::string::String>` is not a future
   --> src/imex.rs:331:123
    |
331 |     if let Some(decrypted_key) = dc_decrypt_setup_file(context, norm_sc.as_ref().unwrap(), filecontent.as_ref().unwrap()).await {
    |                                  ---------------------------------------------------------------------------------------- ^^^^^ `std::option::Option<std::string::String>` is not a future
    |                                  |
    |                                  this call returns `std::option::Option<std::string::String>`
    |
    = help: the trait `futures::Future` is not implemented for `std::option::Option<std::string::String>`, which is required by `std::option::Option<std::string::String>: std::future::IntoFuture`
    = note: std::option::Option<std::string::String> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::option::Option<std::string::String>` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
331 -     if let Some(decrypted_key) = dc_decrypt_setup_file(context, norm_sc.as_ref().unwrap(), filecontent.as_ref().unwrap()).await {
331 +     if let Some(decrypted_key) = dc_decrypt_setup_file(context, norm_sc.as_ref().unwrap(), filecontent.as_ref().unwrap()) {
    |
help: alternatively, consider making `fn dc_decrypt_setup_file` asynchronous
    |
388 | async fn dc_decrypt_setup_file(context: &Context, norm_sc: &str, filecontent: &str) -> Option<String> {
    | +++++

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imex.rs:338:43
    |
338 |     if !set_self_key(context, armored_key.as_ref().unwrap(), 1).await {
    |                                           ^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::option::Option::<T>::as_ref`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:585:6
    |
585 | impl<T> Option<T> {
    |      ^ required by this bound in `Option::<T>::as_ref`
...
680 |     pub const fn as_ref(&self) -> Option<&T> {
    |                  ------ required by a bound in this associated function

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imex.rs:293:27
    |
293 |     let mut armored_key = None;
    |                           ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::None`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `std::prelude::v1::None`
...
574 |     None,
    |     ---- required by a bound in this unit variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imex.rs:332:28
    |
332 |         armored_key = Some(decrypted_key);
    |                       ---- ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |                       |
    |                       required by a bound introduced by this call
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::Some`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `std::prelude::v1::Some`
...
578 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ---- required by a bound in this tuple variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imex.rs:331:17
    |
331 |     if let Some(decrypted_key) = dc_decrypt_setup_file(context, norm_sc.as_ref().unwrap(), filecontent.as_ref().unwrap()).await {
    |                 ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imex.rs:331:12
    |
331 |     if let Some(decrypted_key) = dc_decrypt_setup_file(context, norm_sc.as_ref().unwrap(), filecontent.as_ref().unwrap()).await {
    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::Some`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `std::prelude::v1::Some`
...
578 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ---- required by a bound in this tuple variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imex.rs:331:123
    |
331 |     if let Some(decrypted_key) = dc_decrypt_setup_file(context, norm_sc.as_ref().unwrap(), filecontent.as_ref().unwrap()).await {
    |                                                                                                                           ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::option::Option`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `Option`

error[E0308]: mismatched types
   --> src/imex.rs:338:62
    |
338 |     if !set_self_key(context, armored_key.as_ref().unwrap(), 1).await {
    |         ------------                                         ^ expected `bool`, found integer
    |         |
    |         arguments to this function are incorrect
    |
note: function defined here
   --> src/imex.rs:391:4
    |
391 | fn set_self_key(context: &Context, armored: &str, set_default: bool) -> bool {
    |    ^^^^^^^^^^^^                                   -----------------

error[E0277]: `bool` is not a future
   --> src/imex.rs:338:65
    |
338 |     if !set_self_key(context, armored_key.as_ref().unwrap(), 1).await {
    |         ------------------------------------------------------- ^^^^^ `bool` is not a future
    |         |
    |         this call returns `bool`
    |
    = help: the trait `futures::Future` is not implemented for `bool`, which is required by `bool: std::future::IntoFuture`
    = note: bool must be a future or must implement `IntoFuture` to be awaited
    = note: required for `bool` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
338 -     if !set_self_key(context, armored_key.as_ref().unwrap(), 1).await {
338 +     if !set_self_key(context, armored_key.as_ref().unwrap(), 1) {
    |
help: alternatively, consider making `fn set_self_key` asynchronous
    |
391 | async fn set_self_key(context: &Context, armored: &str, set_default: bool) -> bool {
    | +++++

error[E0425]: cannot find function `dc_msg_unref` in this scope
   --> src/imex.rs:355:5
    |
355 |     dc_msg_unref(msg);
    |     ^^^^^^^^^^^^ not found in this scope

Some errors have detailed explanations: E0061, E0252, E0277, E0308, E0412, E0425, E0428, E0432, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `deltachat` (lib) generated 5 warnings
error: could not compile `deltachat` (lib) due to 43 previous errors; 5 warnings emitted
warning: build failed, waiting for other jobs to finish...
warning: `deltachat` (lib test) generated 5 warnings (5 duplicates)
error: could not compile `deltachat` (lib test) due to 43 previous errors; 5 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


Fail
file path is :
projects/deltachat-core/rust/src/chat.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `Result` is defined multiple times
  --> src/chat.rs:15:50
   |
4  | use rusqlite::{params, Result};
   |                        ------ previous import of the type `Result` here
...
15 | use anyhow::{anyhow, bail, ensure, Context as _, Result};
   |                                                  ^^^^^^ `Result` reimported here
   |
   = note: `Result` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
15 | use anyhow::{anyhow, bail, ensure, Context as _, Result as OtherResult};
   |                                                  ~~~~~~~~~~~~~~~~~~~~~

warning: unused import: `std::sync::Arc`
 --> src/chat.rs:5:5
  |
5 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `Result`
  --> src/chat.rs:15:50
   |
15 | use anyhow::{anyhow, bail, ensure, Context as _, Result};
   |                                                  ^^^^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:293:73
    |
293 |                 if Contact::real_exists_by_id(context, contact_id).await?
    |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:300:96
    |
300 |                     ContactId::scaleup_origin(context, &[contact_id], Origin::CreateChat).await?;
    |                                                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/chat.rs:307:21
    |
307 |                     bail!("Can not create chat for non-existing contact");
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2782:44
     |
2782 |             msg.update_param(context).await?;
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2790:40
     |
2790 |         msg.update_param(context).await?;
     |                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2314:86
     |
2314 |         let blob = BlobObject::create(context, "icon-saved-messages.png", icon).await?;
     |                                                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2329:78
     |
2329 |         let blob = BlobObject::create(context, "icon-device.png", icon).await?;
     |                                                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2336:79
     |
2336 |         let mut contact = Contact::get_by_id(context, ContactId::DEVICE).await?;
     |                                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2338:44
     |
2338 |         contact.update_param(context).await?;
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4275:5
     |
4275 | /     ensure!(
4276 | |         label.is_some() || msg.is_some(),
4277 | |         "device-messages need label, msg or both"
4278 | |     );
     | |_____^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4306:19
     |
4306 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4343:19
     |
4343 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4346:50
     |
4346 |         msg_id = MsgId::new(u32::try_from(row_id)?);
     |                                                  ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4356:19
     |
4356 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2412:63
     |
2412 |     let Some(bobstate) = BobState::from_db(&context.sql).await? else {
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:2453:9
     |
2453 |         ensure!(context.sql.is_open().await, "Database not available");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:2454:9
     |
2454 | /         ensure!(
2455 | |             contact_id != ContactId::UNDEFINED,
2456 | |             "Invalid contact id requested"
2457 | |         );
     | |_________^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `rusqlite::Error: From<anyhow::Error>` is not satisfied
    --> src/chat.rs:2459:9
     |
2459 | /         context
2460 | |             .sql
2461 | |             .query_row_optional(
2462 | |                 "SELECT c.id, c.blocked
...    |
2476 | |             .await
2477 | |             .map_err(Into::into)
     | |________________________________^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `anyhow::Error: Into<_>`
     |
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `anyhow::Error` to implement `Into<rusqlite::Error>`

error[E0277]: the trait bound `rusqlite::Error: From<anyhow::Error>` is not satisfied
    --> src/chat.rs:2477:22
     |
2477 |             .map_err(Into::into)
     |                      ^^^^^^^^^^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `anyhow::Error: Into<_>`
     |
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `anyhow::Error` to implement `Into<rusqlite::Error>`

error[E0308]: mismatched types
    --> src/chat.rs:2489:9
     |
2489 |         ensure!(context.sql.is_open().await, "Database not available");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:2490:9
     |
2490 | /         ensure!(
2491 | |             contact_id != ContactId::UNDEFINED,
2492 | |             "Invalid contact id requested"
2493 | |         );
     | |_________^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2500:68
     |
2500 |         let contact = Contact::get_by_id(context, contact_id).await?;
     |                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatIdBlocked, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatIdBlocked, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2513:80
     |
2513 |         let peerstate = Peerstate::from_addr(context, contact.get_addr()).await?;
     |                                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatIdBlocked, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatIdBlocked, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2555:19
     |
2555 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatIdBlocked, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatIdBlocked, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:344:20
    |
344 |             ).await?;
    |                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:346:56
    |
346 |         let chat_id = ChatId::new(u32::try_from(row_id)?);
    |                                                        ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:375:19
    |
375 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/chat.rs:384:13
    |
384 |             bail!("ignoring setting of Block-status for {}", self);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |             |
    |             expected `rusqlite::Error`, found `anyhow::Error`
    |             arguments to this enum variant are incorrect
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
   --> src/chat.rs:384:13
    |
384 |             bail!("ignoring setting of Block-status for {}", self);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this argument influences the type of `$crate`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
    |
511 |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
    |     ^^^
    = note: this error originates in the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:392:19
    |
392 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/chat.rs:407:17
    |
407 |                 bail!("Can't block chat of type {:?}", chat.typ)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                 |
    |                 expected `rusqlite::Error`, found `anyhow::Error`
    |                 arguments to this enum variant are incorrect
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
   --> src/chat.rs:407:17
    |
407 |                 bail!("Can't block chat of type {:?}", chat.typ)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this argument influences the type of `$crate`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
    |
511 |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
    |     ^^^
    = note: this error originates in the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:416:86
    |
416 |                         contact::set_blocked(context, Nosync, contact_id, true).await?;
    |                                                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1518:77
     |
1518 |             .context(format!("Failed loading chat {chat_id} from database"))?;
     |                                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Chat, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Chat, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2159:80
     |
2159 |                     let contact = Contact::get_by_id(context, contact_id).await?;
     |                                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::option::Option<SyncId>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::option::Option<SyncId>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2201:15
     |
2201 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2202:34
     |
2202 |     context.send_sync_msg().await?;
     |                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:498:35
    |
498 | ...                   .await?;
    |                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/chat.rs:529:9
    |
529 |         ensure!(!self.is_special(), "Invalid chat-id {self}.");
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> src/chat.rs:541:42
    |
541 |                 Chattype::Mailinglist => bail!("Cannot protect mailing lists"),
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:549:19
    |
549 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4433:69
     |
4433 |     let ephemeral_timer = chat_id.get_ephemeral_timer(context).await?;
     |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4459:12
     |
4459 |     ).await?;
     |            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4462:46
     |
4462 |     let msg_id = MsgId::new(row_id.try_into()?);
     |                                              ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, _>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1368:23
     |
1368 |                 .await?
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<i64, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<i64, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1384:23
     |
1384 |                 .await?
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<i64, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<i64, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:644:78
    |
644 |             .with_context(|| format!("can't create chat for {}", contact_id))?;
    |                                                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/chat.rs:667:9
    |
667 | /         ensure!(
668 | |             !self.is_special(),
669 | |             "bad chat_id, can not be special chat: {}",
670 | |             self
671 | |         );
    | |         ^
    | |         |
    | |_________expected `rusqlite::Error`, found `anyhow::Error`
    |           arguments to this enum variant are incorrect
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
   --> src/chat.rs:667:9
    |
667 | /         ensure!(
668 | |             !self.is_special(),
669 | |             "bad chat_id, can not be special chat: {}",
670 | |             self
671 | |         );
    | |_________^ this argument influences the type of `$crate`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
    |
511 |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
    |     ^^^
    = note: this error originates in the macro `$crate::__fallback_ensure` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:688:19
    |
688 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:724:23
    |
724 |                 .await?;
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:742:23
    |
742 |                 .await?;
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:752:19
    |
752 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/chat.rs:768:9
    |
768 | /         ensure!(
769 | |             !self.is_special(),
770 | |             "bad chat_id, can not be a special chat: {}",
771 | |             self
772 | |         );
    | |         ^
    | |         |
    | |_________expected `rusqlite::Error`, found `anyhow::Error`
    |           arguments to this enum variant are incorrect
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
   --> src/chat.rs:768:9
    |
768 | /         ensure!(
769 | |             !self.is_special(),
770 | |             "bad chat_id, can not be a special chat: {}",
771 | |             self
772 | |         );
    | |_________^ this argument influences the type of `$crate`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
    |
511 |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
    |     ^^^
    = note: this error originates in the macro `$crate::__fallback_ensure` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:781:19
    |
781 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:786:19
    |
786 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:791:19
    |
791 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:796:19
    |
796 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:803:19
    |
803 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:878:53
    |
878 |                 msg_id.delete_from_db(context).await?;
    |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/chat.rs:889:34
    |
889 |             Viewtype::Unknown => bail!("Can not set draft of unknown type."),
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> src/chat.rs:892:21
    |
892 |                     bail!("No text and no quote in draft");
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:899:27
    |
899 |                     .await?
    |                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:900:57
    |
900 |                     .context("no file stored in params")?;
    |                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:935:31
    |
935 |                         .await?;
    |                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:969:19
    |
969 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:970:46
    |
970 |         msg.id = MsgId::new(row_id.try_into()?);
    |                                              ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, _>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:854:19
    |
854 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::option::Option<MsgId>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<std::option::Option<MsgId>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:865:77
    |
865 |                 let msg = Message::load_from_db(context, draft_msg_id).await?;
    |                                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::option::Option<message::Message>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<std::option::Option<message::Message>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:982:19
    |
982 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<usize, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<usize, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0599]: no method named `is_archived_link` found for struct `Arc<InnerContext>` in the current scope
   --> src/chat.rs:991:31
    |
991 |     let mut stmt = if context.is_archived_link(chat_id) {
    |                               ^^^^^^^^^^^^^^^^ method not found in `Arc<InnerContext>`

error[E0599]: `Arc<InnerContext>` is not an iterator
   --> src/chat.rs:992:17
    |
992 |   ...   context.count("SELECT COUNT(DISTINCT(m.chat_id)) FROM msgs m LEFT JOIN chats c ON m.chat_id=c.id WHERE m.state=10 AND m.hidden=0 AN...
    |                 ^^^^^ `Arc<InnerContext>` is not an iterator
    |
   ::: src/context.rs:223:1
    |
223 |   pub struct InnerContext {
    |   ----------------------- doesn't satisfy `InnerContext: Iterator`
    |
   ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/sync.rs:248:1
    |
248 | / pub struct Arc<
249 | |     T: ?Sized,
250 | |     #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
251 | | > {
    | |_- doesn't satisfy `Arc<InnerContext>: Iterator`
    |
    = note: the following trait bounds were not satisfied:
            `Arc<InnerContext>: Iterator`
            which is required by `&mut Arc<InnerContext>: Iterator`
            `InnerContext: Iterator`
            which is required by `&mut InnerContext: Iterator`
note: the trait `Iterator` must be implemented
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:75:1
    |
75  | pub trait Iterator {
    | ^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `count`, perhaps you need to implement it:
            candidate #1: `Iterator`

error[E0599]: `Arc<InnerContext>` is not an iterator
   --> src/chat.rs:994:17
    |
994 |           context.count("SELECT COUNT(*) FROM msgs WHERE state=? AND hidden=0 AND chat_id=?", params![10, chat_id]).await?
    |                   ^^^^^ `Arc<InnerContext>` is not an iterator
    |
   ::: src/context.rs:223:1
    |
223 |   pub struct InnerContext {
    |   ----------------------- doesn't satisfy `InnerContext: Iterator`
    |
   ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/sync.rs:248:1
    |
248 | / pub struct Arc<
249 | |     T: ?Sized,
250 | |     #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
251 | | > {
    | |_- doesn't satisfy `Arc<InnerContext>: Iterator`
    |
    = note: the following trait bounds were not satisfied:
            `Arc<InnerContext>: Iterator`
            which is required by `&mut Arc<InnerContext>: Iterator`
            `InnerContext: Iterator`
            which is required by `&mut InnerContext: Iterator`
note: the trait `Iterator` must be implemented
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:75:1
    |
75  | pub trait Iterator {
    | ^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `count`, perhaps you need to implement it:
            candidate #1: `Iterator`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1007:19
     |
1007 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::option::Option<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::option::Option<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1042:69
     |
1042 |             .context("failed to calculate member set intersections")?;
     |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<(ChatId, f64)>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<(ChatId, f64)>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1063:58
     |
1063 |             .context("failed to count chat member sizes")?;
     |                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<(ChatId, f64)>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<(ChatId, f64)>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1123:55
     |
1123 |             .context("failed to get similar chat IDs")?
     |                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Chatlist, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Chatlist, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1127:73
     |
1127 |         let chatlist = Chatlist::from_chat_ids(context, &chat_ids).await?;
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Chatlist, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Chatlist, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1135:19
     |
1135 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<param::Params, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<param::Params, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:1201:9
     |
1201 |         sql.query_row_optional(&query, (self,), f).await
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1240:73
     |
1240 |             let contact = Contact::get_by_id(context, *contact_id).await?;
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1242:70
     |
1242 |             let peerstate = Peerstate::from_addr(context, addr).await?;
     |                                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:1310:9
     |
1310 | /         ensure!(
1311 | |             !self.is_special(),
1312 | |             "can not set gossiped timestamp for special chats"
1313 | |         );
     | |_________^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1325:19
     |
1325 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1301:19
     |
1301 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<i64, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<i64, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1335:19
     |
1335 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ProtectionStatus, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ProtectionStatus, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2757:15
     |
2757 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1636:19
     |
1636 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<u64, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<u64, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1647:51
     |
1647 |                 .saturating_add(timeout.try_into()?)
     |                                                   ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<u64, rusqlite::Error>: FromResidual<std::result::Result<Infallible, _>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<u64, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1687:19
     |
1687 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:1725:28
     |
1725 |                     return contact.get_profile_image(context).await;
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3451:15
     |
3451 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<ContactId>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<ContactId>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1782:72
     |
1782 |             ephemeral_timer: self.id.get_ephemeral_timer(context).await?,
     |                                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatInfo, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatInfo, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1883:23
     |
1883 |                 .await?
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:1891:17
     |
1891 |                 bail!("Cannot set message, contact for {} not found.", self.id);
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |                 |
     |                 expected `rusqlite::Error`, found `anyhow::Error`
     |                 arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:1891:17
     |
1891 |                 bail!("Cannot set message, contact for {} not found.", self.id);
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1912:64
     |
1912 |         let is_bot = context.get_config_bool(Config::Bot).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2009:55
     |
2009 |             self.id.get_ephemeral_timer(context).await?
     |                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2018:53
     |
2018 |                 msg.get_id().get_html(context).await?
     |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2025:19
     |
2025 |                 })?),
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2071:23
     |
2071 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2119:23
     |
2119 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2121:54
     |
2121 |             msg.id = MsgId::new(u32::try_from(raw_id)?);
     |                                                      ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2123:63
     |
2123 |             maybe_set_logging_xdc(context, msg, self.id).await?;
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2124:66
     |
2124 |             context.update_webxdc_integration_database(msg).await?;
     |                                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:293:73
    |
293 |                 if Contact::real_exists_by_id(context, contact_id).await?
    |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2143:19
     |
2143 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:300:96
    |
300 |                     ContactId::scaleup_origin(context, &[contact_id], Origin::CreateChat).await?;
    |                                                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2344:75
     |
2344 |     if let Some(icon) = context.sql.get_raw_config("icon-broadcast").await? {
     |                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2349:77
     |
2349 |     let blob = BlobObject::create(context, "icon-broadcast.png", icon).await?;
     |                                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2354:15
     |
2354 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2359:73
     |
2359 |     if let Some(icon) = context.sql.get_raw_config("icon-archive").await? {
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2364:75
     |
2364 |     let blob = BlobObject::create(context, "icon-archive.png", icon).await?;
     |                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2369:15
     |
2369 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2388:19
     |
2388 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:2583:5
     |
2583 | /     ensure!(
2584 | |         !chat_id.is_special(),
2585 | |         "Cannot prepare message for special chat"
2586 | |     );
     | |_____^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2601:19
     |
2601 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2602:98
     |
2602 |             .with_context(|| format!("attachment missing for message of type #{}", msg.viewtype))?;
     |                                                                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2626:23
     |
2626 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2635:23
     |
2635 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2657:55
     |
2657 |         msg.try_calc_and_set_dimensions(context).await?;
     |                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:2666:9
     |
2666 |         bail!("Cannot send messages of type #{}.", msg.viewtype);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |         |
     |         expected `rusqlite::Error`, found `anyhow::Error`
     |         arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:2666:9
     |
2666 |         bail!("Cannot send messages of type #{}.", msg.viewtype);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2782:44
     |
2782 |             msg.update_param(context).await?;
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2790:40
     |
2790 |         msg.update_param(context).await?;
     |                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:2692:13
     |
2692 |             bail!("cannot send to {chat_id}: {reason}");
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2700:83
     |
2700 |     if chat.typ != Chattype::Single && !context.get_config_bool(Config::Bot).await? {
     |                                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2701:72
     |
2701 |         if let Some(quoted_message) = msg.quoted_message(context).await? {
     |                                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4306:19
     |
4306 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:2703:17
     |
2703 |                 bail!("Bad quote reply");
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4343:19
     |
4343 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2808:73
     |
2808 |             .context("failed to send message, queued for later sending")?;
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4346:50
     |
4346 |         msg_id = MsgId::new(u32::try_from(row_id)?);
     |                                                  ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2826:71
     |
2826 |             context.emit_location_changed(Some(ContactId::SELF)).await?;
     |                                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4356:19
     |
4356 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:2850:9
     |
2850 | /         ensure!(
2851 | |             chat_id.is_unset() || chat_id == msg.chat_id,
2852 | |             "Inconsistent chat ID"
2853 | |         );
     | |_________^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2854:83
     |
2854 |         message::update_msg_state(context, msg.id, MessageState::OutPending).await?;
     |                                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2867:64
     |
2867 |     let mimefactory = MimeFactory::from_msg(context, msg).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2871:53
     |
2871 |     let from = context.get_primary_self_addr().await?;
     |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2885:54
     |
2885 |     if context.get_config_bool(Config::BccSelf).await?
     |                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2904:44
     |
2904 |         msg.id.set_delivered(context).await?;
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2912:74
     |
2912 |             message::set_msg_failed(context, msg, &err.to_string()).await?;
     |                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2915:6
     |
2915 |     }?;
     |      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2924:15
     |
2924 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:2925:9
     |
2925 | /         bail!(
2926 | |             "e2e encryption unavailable {} - {:?}",
2927 | |             msg.id,
2928 | |             needs_encryption
2929 | |         );
     | |         ^
     | |         |
     | |_________expected `rusqlite::Error`, found `anyhow::Error`
     |           arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:2925:9
     |
2925 | /         bail!(
2926 | |             "e2e encryption unavailable {} - {:?}",
2927 | |             msg.id,
2928 | |             needs_encryption
2929 | |         );
     | |_________^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2947:19
     |
2947 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2970:40
     |
2970 |         msg.update_param(context).await?;
     |                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2974:38
     |
2974 |     msg.update_subject(context).await?;
     |                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2975:58
     |
2975 |     let chunk_size = context.get_max_smtp_rcpt_to().await?;
     |                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:2994:5
     |
2994 |     context.sql.transaction(trans_fn).await
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^

error[E0308]: mismatched types
    --> src/chat.rs:3005:5
     |
3005 | /     ensure!(
3006 | |         !chat_id.is_special(),
3007 | |         "bad chat_id, can not be a special chat: {}",
3008 | |         chat_id
3009 | |     );
     | |     ^
     | |     |
     | |_____expected `rusqlite::Error`, found `anyhow::Error`
     |       arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:3005:5
     |
3005 | /     ensure!(
3006 | |         !chat_id.is_special(),
3007 | |         "bad chat_id, can not be a special chat: {}",
3008 | |         chat_id
3009 | |     );
     | |_____^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `$crate::__fallback_ensure` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:3018:5
     |
3018 | /     ensure!(
3019 | |         !chat_id.is_special(),
3020 | |         "video chat invitation cannot be sent to special chat: {}",
3021 | |         chat_id
3022 | |     );
     | |     ^
     | |     |
     | |_____expected `rusqlite::Error`, found `anyhow::Error`
     |       arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:3018:5
     |
3018 | /     ensure!(
3019 | |         !chat_id.is_special(),
3020 | |         "video chat invitation cannot be sent to special chat: {}",
3021 | |         chat_id
3022 | |     );
     | |_____^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `$crate::__fallback_ensure` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3024:92
     |
3024 |     let instance = if let Some(instance) = context.get_config(Config::WebrtcInstance).await? {
     |                                                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3028:13
     |
3028 |             bail!("webrtc_instance is empty");
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:3031:9
     |
3031 |         bail!("webrtc_instance not set");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3160:19
     |
3160 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<ChatItem>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<ChatItem>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3173:19
     |
3173 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<ChatItem>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<ChatItem>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3207:19
     |
3207 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3221:19
     |
3221 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3234:19
     |
3234 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3249:19
     |
3249 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3310:15
     |
3310 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3370:15
     |
3370 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<MsgId>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<MsgId>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3463:5
     |
3463 |     ensure!(!chat_name.is_empty(), "Invalid chat name");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3476:15
     |
3476 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3478:52
     |
3478 |     let chat_id = ChatId::new(u32::try_from(row_id)?);
     |                                                    ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3493:51
     |
3493 |     if !context.get_config_bool(Config::Bot).await?
     |                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3494:69
     |
3494 |         && !context.get_config_bool(Config::SkipStartMessages).await?
     |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3518:19
     |
3518 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3568:48
     |
3568 |         context.sql.transaction(trans_fn).await?
     |                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3570:52
     |
3570 |     let chat_id = ChatId::new(u32::try_from(row_id)?);
     |                                                    ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3602:15
     |
3602 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3623:15
     |
3623 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3640:15
     |
3640 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3662:5
     |
3662 |     ensure!(!chat_id.is_special(), "can not add member to special chats");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3663:64
     |
3663 |     let contact = Contact::get_by_id(context, contact_id).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3670:5
     |
3670 | /     ensure!(
3671 | |         chat.typ == Chattype::Group || chat.typ == Chattype::Broadcast,
3672 | |         "{} is not a group/broadcast where one can add members",
3673 | |         chat_id
3674 | |     );
     | |     ^
     | |     |
     | |_____expected `rusqlite::Error`, found `anyhow::Error`
     |       arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:3670:5
     |
3670 | /     ensure!(
3671 | |         chat.typ == Chattype::Group || chat.typ == Chattype::Broadcast,
3672 | |         "{} is not a group/broadcast where one can add members",
3673 | |         chat_id
3674 | |     );
     | |_____^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `$crate::__fallback_ensure` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3676:62
     |
3676 |         Contact::real_exists_by_id(context, contact_id).await? || contact_id == ContactId::SELF,
     |                                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3675:5
     |
3675 | /     ensure!(
3676 | |         Contact::real_exists_by_id(context, contact_id).await? || contact_id == ContactId::SELF,
3677 | |         "invalid contact_id {} for adding to group",
3678 | |         contact_id
3679 | |     );
     | |     ^
     | |     |
     | |_____expected `rusqlite::Error`, found `anyhow::Error`
     |       arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:3675:5
     |
3675 | /     ensure!(
3676 | |         Contact::real_exists_by_id(context, contact_id).await? || contact_id == ContactId::SELF,
3677 | |         "invalid contact_id {} for adding to group",
3678 | |         contact_id
3679 | |     );
     | |_____^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `$crate::__fallback_ensure` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1518:77
     |
1518 |             .context(format!("Failed loading chat {chat_id} from database"))?;
     |                                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::Chat, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::Chat, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3680:5
     |
3680 |     ensure!(!chat.is_mailing_list(), "Mailing lists can't be changed");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:3681:5
     |
3681 | /     ensure!(
3682 | |         chat.typ != Chattype::Broadcast || contact_id != ContactId::SELF,
3683 | |         "Cannot add SELF to broadcast."
3684 | |     );
     | |_____^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:3690:9
     |
3690 |         bail!("can not add contact because the account is not part of the group/broadcast");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3704:54
     |
3704 |     if context.is_self_addr(contact.get_addr()).await? {
     |                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3720:70
     |
3720 |         if chat.is_protected() && !contact.is_verified(context).await? {
     |                                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3778:15
     |
3778 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3841:5
     |
3841 |     ensure!(!chat_id.is_special(), "Invalid chat ID");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3849:71
     |
3849 |         .context(format!("Failed to set mute duration for {chat_id}"))?;
     |                                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3868:5
     |
3868 | /     ensure!(
3869 | |         !chat_id.is_special(),
3870 | |         "bad chat_id, can not be special chat: {}",
3871 | |         chat_id
3872 | |     );
     | |     ^
     | |     |
     | |_____expected `rusqlite::Error`, found `anyhow::Error`
     |       arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:3868:5
     |
3868 | /     ensure!(
3869 | |         !chat_id.is_special(),
3870 | |         "bad chat_id, can not be special chat: {}",
3871 | |         chat_id
3872 | |     );
     | |_____^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `$crate::__fallback_ensure` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:3873:5
     |
3873 | /     ensure!(
3874 | |         !contact_id.is_special() || contact_id == ContactId::SELF,
3875 | |         "Cannot remove special contact"
3876 | |     );
     | |_____^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:3887:13
     |
3887 |             bail!("{}", err_msg);
     |             ^^^^^^^^^^^^^^^^^^^^
     |             |
     |             expected `rusqlite::Error`, found `anyhow::Error`
     |             arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:3887:13
     |
3887 |             bail!("{}", err_msg);
     |             ^^^^^^^^^^^^^^^^^^^^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3893:90
     |
3893 |             if let Some(contact) = Contact::get_by_id_optional(context, contact_id).await? {
     |                                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3931:9
     |
3931 |         bail!("Cannot remove members from non-group chats.");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3942:19
     |
3942 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3952:15
     |
3952 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3971:5
     |
3971 |     ensure!(!new_name.is_empty(), "Invalid name");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:3972:5
     |
3972 |     ensure!(!chat_id.is_special(), "Invalid chat ID");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3994:23
     |
3994 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4018:9
     |
4018 |         bail!("Failed to set name");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:4040:5
     |
4040 |     ensure!(!chat_id.is_special(), "Invalid chat ID");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:4042:5
     |
4042 | /     ensure!(
4043 | |         chat.typ == Chattype::Group || chat.typ == Chattype::Mailinglist,
4044 | |         "Failed to set profile image; group does not exist"
4045 | |     );
     | |_____^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:4051:9
     |
4051 |         bail!("Failed to set profile image");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4433:69
     |
4433 |     let ephemeral_timer = chat_id.get_ephemeral_timer(context).await?;
     |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4061:92
     |
4061 |         let mut image_blob = BlobObject::new_from_path(context, Path::new(new_image)).await?;
     |                                                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4459:12
     |
4459 |     ).await?;
     |            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4062:56
     |
4062 |         image_blob.recode_to_avatar_size(context).await?;
     |                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4462:46
     |
4462 |     let msg_id = MsgId::new(row_id.try_into()?);
     |                                              ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, _>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0308]: mismatched types
    --> src/chat.rs:4079:5
     |
4079 |     ensure!(!msg_ids.is_empty(), "empty msgs_ids: nothing to forward");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:4080:5
     |
4080 |     ensure!(!chat_id.is_special(), "can not forward to special chat");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:4091:9
     |
4091 |         bail!("cannot send to {}: {}", chat_id, reason);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |         |
     |         expected `rusqlite::Error`, found `anyhow::Error`
     |         arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:4091:9
     |
4091 |         bail!("cannot send to {}: {}", chat_id, reason);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4105:15
     |
4105 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4109:71
     |
4109 |         let mut msg = Message::load_from_db(context, src_msg_id).await?;
     |                                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4111:13
     |
4111 |             bail!("cannot forward drafts.");
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4155:44
     |
4155 |             msg.update_param(context).await?;
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4182:64
     |
4182 |         let msg = Message::load_from_db(context, *msg_id).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4184:13
     |
4184 | /             ensure!(
4185 | |                 chat_id == msg.chat_id,
4186 | |                 "messages to resend needs to be in the same chat"
4187 | |             );
     | |_____________^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:4191:9
     |
4191 | /         ensure!(
4192 | |             msg.from_id == ContactId::SELF,
4193 | |             "can resend only own messages"
4194 | |         );
     | |_________^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:4195:9
     |
4195 |         ensure!(!msg.is_info(), "cannot resend info messages");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4207:44
     |
4207 |             msg.update_param(context).await?;
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2500:68
     |
2500 |         let contact = Contact::get_by_id(context, contact_id).await?;
     |                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatIdBlocked, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatIdBlocked, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4211:91
     |
4211 |                 message::update_msg_state(context, msg.id, MessageState::OutPending).await?
     |                                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2513:80
     |
2513 |         let peerstate = Peerstate::from_addr(context, contact.get_addr()).await?;
     |                                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatIdBlocked, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatIdBlocked, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2555:19
     |
2555 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatIdBlocked, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatIdBlocked, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4213:18
     |
4213 |             _ => bail!("unexpected message state"),
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4235:19
     |
4235 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<usize, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<usize, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4247:5
     |
4247 | /     context
4248 | |         .sql
4249 | |         .query_row_optional(
4250 | |             "SELECT id, blocked, protected FROM chats WHERE grpid=?;",
...    |
4261 | |         )
4262 | |         .await
     | |______________^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^

error[E0308]: mismatched types
    --> src/chat.rs:4377:5
     |
4377 |     ensure!(!label.is_empty(), "empty label");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4384:15
     |
4384 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:344:20
    |
344 |             ).await?;
    |                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:346:56
    |
346 |         let chat_id = ChatId::new(u32::try_from(row_id)?);
    |                                                        ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4400:15
     |
4400 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4401:63
     |
4401 |     context.sql.execute("DELETE FROM devmsglabels;", ()).await?;
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4410:15
     |
4410 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4413:15
     |
4413 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4501:15
     |
4501 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4509:5
     |
4509 | /     ensure!(
4510 | |         chat.typ == Chattype::Group || chat.typ == Chattype::Broadcast,
4511 | |         "{id} is not a group/broadcast",
4512 | |     );
     | |_____^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4515:53
     |
4515 |         let contact_addr = ContactAddress::new(addr)?;
     |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4517:19
     |
4517 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4560:69
     |
4560 |                     Contact::create_ex(self, Nosync, to, addr).await?;
     |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4564:27
     |
4564 |                     .await?
     |                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4565:78
     |
4565 |                     .with_context(|| format!("No contact for addr '{addr}'"))?;
     |                                                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4568:32
     |
4568 |                         return contact::set_blocked(self, Nosync, contact_id, true).await
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^

error[E0308]: mismatched types
    --> src/chat.rs:4571:32
     |
4571 |                         return contact::set_blocked(self, Nosync, contact_id, false).await
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^

error[E0308]: mismatched types
    --> src/chat.rs:4605:21
     |
4605 |                 Err(anyhow!("sync_alter_chat({id:?}, {action:?}): Bad request."))
     |                 --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |                 |
     |                 arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:4605:17
     |
4605 |                 Err(anyhow!("sync_alter_chat({id:?}, {action:?}): Bad request."))
     |                 ^^^^------------------------------------------------------------^
     |                     |
     |                     this argument influences the type of `Err`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3451:15
     |
3451 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<contact::ContactId>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<contact::ContactId>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3568:48
     |
3568 |         context.sql.transaction(trans_fn).await?
     |                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3570:52
     |
3570 |     let chat_id = ChatId::new(u32::try_from(row_id)?);
     |                                                    ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0308]: `match` arms have incompatible types
   --> src/sync.rs:277:49
    |
274 |                   SyncDataOrUnknown::SyncData(data) => match data {
    |  ______________________________________________________-
275 | |                     AddQrToken(token) => self.add_qr_token(token).await,
    | |                                          ------------------------------ this is found to be of type `std::result::Result<(), anyhow::Error>`
276 | |                     DeleteQrToken(token) => self.delete_qr_token(token).await,
    | |                                             --------------------------------- this is found to be of type `std::result::Result<(), anyhow::Error>`
277 | |                     AlterChat { id, action } => self.sync_alter_chat(id, action).await,
    | |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `anyhow::Error`, found `rusqlite::Error`
278 | |                     SyncData::Config { key, val } => self.sync_config(key, val).await,
279 | |                 },
    | |_________________- `match` arms have incompatible types
    |
    = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:854:19
    |
854 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::option::Option<message::MsgId>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<std::option::Option<message::MsgId>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1042:69
     |
1042 |             .context("failed to calculate member set intersections")?;
     |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<(chat::ChatId, f64)>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<(chat::ChatId, f64)>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1063:58
     |
1063 |             .context("failed to count chat member sizes")?;
     |                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<(chat::ChatId, f64)>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<(chat::ChatId, f64)>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1123:55
     |
1123 |             .context("failed to get similar chat IDs")?
     |                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chatlist::Chatlist, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chatlist::Chatlist, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1127:73
     |
1127 |         let chatlist = Chatlist::from_chat_ids(context, &chat_ids).await?;
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chatlist::Chatlist, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chatlist::Chatlist, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1335:19
     |
1335 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ProtectionStatus, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ProtectionStatus, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1782:72
     |
1782 |             ephemeral_timer: self.id.get_ephemeral_timer(context).await?,
     |                                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatInfo, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatInfo, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1883:23
     |
1883 |                 .await?
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1912:64
     |
1912 |         let is_bot = context.get_config_bool(Config::Bot).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2009:55
     |
2009 |             self.id.get_ephemeral_timer(context).await?
     |                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2018:53
     |
2018 |                 msg.get_id().get_html(context).await?
     |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2025:19
     |
2025 |                 })?),
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2071:23
     |
2071 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2119:23
     |
2119 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2121:54
     |
2121 |             msg.id = MsgId::new(u32::try_from(raw_id)?);
     |                                                      ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2123:63
     |
2123 |             maybe_set_logging_xdc(context, msg, self.id).await?;
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2124:66
     |
2124 |             context.update_webxdc_integration_database(msg).await?;
     |                                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2700:83
     |
2700 |     if chat.typ != Chattype::Single && !context.get_config_bool(Config::Bot).await? {
     |                                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2701:72
     |
2701 |         if let Some(quoted_message) = msg.quoted_message(context).await? {
     |                                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2808:73
     |
2808 |             .context("failed to send message, queued for later sending")?;
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2826:71
     |
2826 |             context.emit_location_changed(Some(ContactId::SELF)).await?;
     |                                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3024:92
     |
3024 |     let instance = if let Some(instance) = context.get_config(Config::WebrtcInstance).await? {
     |                                                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3160:19
     |
3160 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<chat::ChatItem>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<chat::ChatItem>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3173:19
     |
3173 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<chat::ChatItem>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<chat::ChatItem>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3370:15
     |
3370 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<message::MsgId>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<message::MsgId>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3476:15
     |
3476 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3478:52
     |
3478 |     let chat_id = ChatId::new(u32::try_from(row_id)?);
     |                                                    ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3493:51
     |
3493 |     if !context.get_config_bool(Config::Bot).await?
     |                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3494:69
     |
3494 |         && !context.get_config_bool(Config::SkipStartMessages).await?
     |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

warning: unused import: `crate::log::LogExt`
  --> src/sync.rs:12:5
   |
12 | use crate::log::LogExt;
   |     ^^^^^^^^^^^^^^^^^^

Some errors have detailed explanations: E0252, E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0252`.
warning: `deltachat` (lib) generated 3 warnings
error: could not compile `deltachat` (lib) due to 224 previous errors; 3 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5663:19
     |
5663 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5745:19
     |
5745 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6399:45
     |
6399 |         tokio::fs::write(&file, bytes).await?;
     |                                             ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6421:46
     |
6421 |         assert!(msg.get_filebytes(&bob).await?.unwrap() > 250);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7096:49
     |
7096 |             tokio::fs::write(&file, bytes).await?;
     |                                                 ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> src/events/chatlist_events.rs:486:33
    |
486 |         assert!(chat_id_for_bob.get_fresh_msg_cnt(&bob).await? >= 1);
    |                                 ^^^^^^^^^^^^^^^^^------ an argument of type `u32` is missing
    |
note: method defined here
   --> src/chat.rs:989:14
    |
989 | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
    |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
    |
486 |         assert!(chat_id_for_bob.get_fresh_msg_cnt(&bob, /* u32 */).await? >= 1);
    |                                                  ~~~~~~~~~~~~~~~~~

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4763:69
     |
4763 |         let test = Message::load_from_db(&t, id_after_prepare).await?;
     |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4779:23
     |
4779 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4782:23
     |
4782 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4789:61
     |
4789 |         let test = Message::load_from_db(&t, draft.id).await?;
     |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4792:46
     |
4792 |         assert!(test.quoted_message(&t).await?.is_none());
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4795:49
     |
4795 |         draft.set_quote(&t, Some(&quote1)).await?;
     |                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4798:61
     |
4798 |         let test = Message::load_from_db(&t, draft.id).await?;
     |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4801:49
     |
4801 |         assert_eq!(test.quoted_message(&t).await?.unwrap().id, quote1.id);
     |                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4805:49
     |
4805 |         draft.set_quote(&t, Some(&quote2)).await?;
     |                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4808:61
     |
4808 |         let test = Message::load_from_db(&t, draft.id).await?;
     |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4811:49
     |
4811 |         assert_eq!(test.quoted_message(&t).await?.unwrap().id, quote2.id);
     |                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4814:40
     |
4814 |         draft.set_quote(&t, None).await?;
     |                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4817:61
     |
4817 |         let test = Message::load_from_db(&t, draft.id).await?;
     |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4820:46
     |
4820 |         assert!(test.quoted_message(&t).await?.is_none());
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4832:70
     |
4832 |         let grp_msg = Message::load_from_db(&alice, grp_msg_id).await?;
     |                                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4836:78
     |
4836 |         let one2one_msg = Message::load_from_db(&alice, one2one_msg_id).await?;
     |                                                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4841:52
     |
4841 |         msg.set_quote(&alice, Some(&grp_msg)).await?;
     |                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4847:56
     |
4847 |         msg.set_quote(&alice, Some(&one2one_msg)).await?;
     |                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4855:52
     |
4855 |         msg.set_quote(&alice, Some(&grp_msg)).await?;
     |                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4862:56
     |
4862 |         msg.set_quote(&alice, Some(&one2one_msg)).await?;
     |                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4871:55
     |
4871 |         alice.set_config(Config::Bot, Some("1")).await?;
     |                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4903:63
     |
4903 |         alice.set_config(Config::E2eeEnabled, Some("0")).await?;
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4904:61
     |
4904 |         bob.set_config(Config::E2eeEnabled, Some("0")).await?;
     |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4907:94
     |
4907 |         let alice_bob_contact_id = Contact::create(&alice, "robert", "bob@example.net").await?;
     |                                                                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4910:63
     |
4910 |         bob.set_config(Config::Displayname, Some("Bob")).await?;
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4915:91
     |
4915 |             let alice_bob_contact = Contact::get_by_id(&alice, alice_bob_contact_id).await?;
     |                                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4927:97
     |
4927 |         let alice_fiona_contact_id = Contact::create(&alice, "Fiona", "fiona@example.net").await?;
     |                                                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4976:63
     |
4976 |         alice.set_config(Config::E2eeEnabled, Some("0")).await?;
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4977:61
     |
4977 |         bob.set_config(Config::E2eeEnabled, Some("0")).await?;
     |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4979:91
     |
4979 |         let alice_bob_contact_id = Contact::create(&alice, "Bob", "bob@example.net").await?;
     |                                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4980:97
     |
4980 |         let alice_fiona_contact_id = Contact::create(&alice, "Fiona", "fiona@example.net").await?;
     |                                                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4982:74
     |
4982 |             Contact::create(&alice, "Claire", "claire@example.net").await?;
     |                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5039:79
     |
5039 |             Contact::create(&alice, "Bob", &bob.get_config(Config::Addr).await?.unwrap()).await?;
     |                                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5039:96
     |
5039 |             Contact::create(&alice, "Bob", &bob.get_config(Config::Addr).await?.unwrap()).await?;
     |                                                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5041:88
     |
5041 |         let alice_fiona_contact_id = Contact::create(&alice, "Fiona", fiona_addr).await?;
     |                                                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5042:84
     |
5042 |         let bob_fiona_contact_id = Contact::create(&bob, "Fiona", fiona_addr).await?;
     |                                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5072:56
     |
5072 |         a1.set_config_bool(Config::BccSelf, true).await?;
     |                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5095:68
     |
5095 |         let bob = Contact::create(&a1, "", "bob@example.org").await?;
     |                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5149:74
     |
5149 |         let bob_id = Contact::create(&alice, "", "bob@example.net").await?;
     |                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5150:75
     |
5150 |         let claire_id = Contact::create(&alice, "", "claire@foo.de").await?;
     |                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5151:73
     |
5151 |         let daisy_id = Contact::create(&alice, "", "daisy@bar.de").await?;
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5207:74
     |
5207 |         let claire_id = Contact::create(alice, "", "claire@foo.de").await?;
     |                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5223:74
     |
5223 |         let bob_id = Contact::create(&alice, "", "bob@example.net").await?;
     |                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5224:75
     |
5224 |         let claire_id = Contact::create(&alice, "", "claire@foo.de").await?;
     |                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5225:73
     |
5225 |         let daisy_id = Contact::create(&alice, "", "daisy@bar.de").await?;
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5268:79
     |
5268 |         let bob_contact = Contact::create(&alice, "", "bob@example.net").await?;
     |                                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5328:58
     |
5328 |         let msg = Message::load_from_db(&t, msg_id).await?;
     |                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5399:88
     |
5399 |         let msg1 = message::Message::load_from_db(&t, *msg1_id.as_ref().unwrap()).await?;
     |                                                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5423:70
     |
5423 |         message::delete_msgs(&t, &[*msg1_id.as_ref().unwrap()]).await?;
     |                                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5671:46
     |
5671 |         assert_eq!(get_archived_cnt(&t).await?, 1);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5675:46
     |
5675 |         assert_eq!(get_archived_cnt(&t).await?, 0);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5681:46
     |
5681 |         assert_eq!(get_archived_cnt(&t).await?, 1);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5695:46
     |
5695 |         assert_eq!(get_archived_cnt(&t).await?, 1);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5709:46
     |
5709 |         assert_eq!(get_archived_cnt(&t).await?, 0);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5716:46
     |
5716 |         assert_eq!(get_archived_cnt(&t).await?, 1);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5721:46
     |
5721 |         assert_eq!(get_archived_cnt(&t).await?, 0);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5757:45
     |
5757 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 0);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5757 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5760:45
     |
5760 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 1);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5760 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5763:45
     |
5763 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 1);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5763 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5775:32
     |
5775 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t).await?, 2);
     |                                ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5775 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                 ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5776:35
     |
5776 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t).await?, 3);
     |                                   ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5776 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 3);
     |                                                    ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5777:45
     |
5777 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 2);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5777 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5781:32
     |
5781 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t).await?, 2);
     |                                ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5781 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                 ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5782:35
     |
5782 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t).await?, 0);
     |                                   ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5782 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                                    ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5783:45
     |
5783 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 1);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5783 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5787:32
     |
5787 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t).await?, 2);
     |                                ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5787 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                 ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5788:35
     |
5788 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t).await?, 1);
     |                                   ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5788 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                    ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5789:45
     |
5789 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 2);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5789 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5795:33
     |
5795 |         assert_eq!(dave_chat_id.get_fresh_msg_cnt(&t).await?, 1);
     |                                 ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5795 |         assert_eq!(dave_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                  ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5796:45
     |
5796 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 2);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5796 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5801:32
     |
5801 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t).await?, 0);
     |                                ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5801 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                                 ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5802:35
     |
5802 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t).await?, 0);
     |                                   ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5802 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                                    ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5803:33
     |
5803 |         assert_eq!(dave_chat_id.get_fresh_msg_cnt(&t).await?, 1);
     |                                 ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5803 |         assert_eq!(dave_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                  ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5804:45
     |
5804 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 0);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5804 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                                              ~~~~~~~~~~~~~~~

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5790:44
     |
5790 |         assert_eq!(t.get_fresh_msgs().await?.len(), 0);
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5797:44
     |
5797 |         assert_eq!(t.get_fresh_msgs().await?.len(), 1);
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5805:44
     |
5805 |         assert_eq!(t.get_fresh_msgs().await?.len(), 1);
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5968:48
     |
5968 |             &ContactAddress::new("foo@bar.org")?,
     |                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5971:15
     |
5971 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5978:53
     |
5978 |         t.set_config(Config::Selfavatar, None).await?; // setting to None also forces re-sending
     |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6046:37
     |
6046 |         assert!(msg.parent(&t).await?.is_none());
     |                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6047:45
     |
6047 |         assert!(msg.quoted_message(&t).await?.is_none());
     |                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6067:58
     |
6067 |         let msg = Message::load_from_db(&t, msg_id).await?;
     |                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6073:37
     |
6073 |         assert!(msg.parent(&t).await?.is_none());
     |                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6074:45
     |
6074 |         assert!(msg.quoted_message(&t).await?.is_none());
     |                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6217:28
     |
6217 |         assert_eq!(chat.id.get_fresh_msg_cnt(&t).await?, 1);
     |                            ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
6217 |         assert_eq!(chat.id.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6235:28
     |
6235 |         assert_eq!(chat.id.get_fresh_msg_cnt(&t).await?, 0);
     |                            ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
6235 |         assert_eq!(chat.id.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                             ~~~~~~~~~~~~~~~

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6212:15
     |
6212 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6214:64
     |
6214 |         let chats = Chatlist::try_load(&t, 0, None, None).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6216:40
     |
6216 |         assert_eq!(chats.get_chat_id(0)?, chat.id);
     |                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6218:44
     |
6218 |         assert_eq!(t.get_fresh_msgs().await?.len(), 1);
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6226:67
     |
6226 |         let msg = message::Message::load_from_db(&t, msg_id).await?;
     |                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6231:64
     |
6231 |         let chats = Chatlist::try_load(&t, 0, None, None).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6233:67
     |
6233 |         let msg = message::Message::load_from_db(&t, msg_id).await?;
     |                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6236:44
     |
6236 |         assert_eq!(t.get_fresh_msgs().await?.len(), 0);
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6269:28
     |
6269 |         assert_eq!(chat_id.get_fresh_msg_cnt(&t).await?, 1);
     |                            ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
6269 |         assert_eq!(chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6245:64
     |
6245 |         let chats = Chatlist::try_load(&t, 0, None, None).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6259:15
     |
6259 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6261:64
     |
6261 |         let chats = Chatlist::try_load(&t, 0, None, None).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6276:67
     |
6276 |         let msg = message::Message::load_from_db(&t, msg_id).await?;
     |                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6280:44
     |
6280 |         assert_eq!(t.get_fresh_msgs().await?.len(), 0);
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6282:64
     |
6282 |         let chats = Chatlist::try_load(&t, 0, None, None).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6284:67
     |
6284 |         let msg = message::Message::load_from_db(&t, msg_id).await?;
     |                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6286:44
     |
6286 |         assert_eq!(t.get_fresh_msgs().await?.len(), 0);
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6306:15
     |
6306 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6308:64
     |
6308 |         let chats = Chatlist::try_load(&t, 0, None, None).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6310:43
     |
6310 |         let chat_id = chats.get_chat_id(0)?;
     |                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6312:46
     |
6312 |         assert_eq!(get_archived_cnt(&t).await?, 0);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6317:64
     |
6317 |         let chats = Chatlist::try_load(&t, 0, None, None).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6319:43
     |
6319 |         let chat_id = chats.get_chat_id(0)?;
     |                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6321:46
     |
6321 |         assert_eq!(get_archived_cnt(&t).await?, 1);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6323:83
     |
6323 |         let chats = Chatlist::try_load(&t, DC_GCL_ARCHIVED_ONLY, None, None).await?;
     |                                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6325:43
     |
6325 |         let chat_id = chats.get_chat_id(0)?;
     |                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6350:28
     |
6350 |         assert_eq!(chat_id.get_fresh_msg_cnt(&alice).await?, 1);
     |                            ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
6350 |         assert_eq!(chat_id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6362:28
     |
6362 |         assert_eq!(chat_id.get_fresh_msg_cnt(&alice).await?, 1);
     |                            ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
6362 |         assert_eq!(chat_id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~~~~~

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6346:15
     |
6346 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6519:45
     |
6519 |         tokio::fs::write(&file, bytes).await?;
     |                                             ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6565:70
     |
6565 |         let bob_id = Contact::create(&t, "", "bob@example.net").await?;
     |                                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6599:57
     |
6599 |         reply.set_quote(&bob, Some(&received_msg)).await?;
     |                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6607:65
     |
6607 |         assert!(alice_forwarded_msg.quoted_message(&alice).await?.is_none());
     |                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6614:61
     |
6614 |         assert!(bob_forwarded_msg.quoted_message(&bob).await?.is_none());
     |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6631:77
     |
6631 |         let bob_id = Contact::create(&alice, "Bob", "bob@example.net").await?;
     |                                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6632:86
     |
6632 |         let claire_id = Contact::create(&alice, "Claire", "claire@example.net").await?;
     |                                                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6644:76
     |
6644 |         message::delete_msgs(&alice, &[sent_group_msg.sender_msg_id]).await?;
     |                                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6676:19
     |
6676 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6677:77
     |
6677 |         let bob_id = Contact::create(&alice, "bob", "bob@example.net").await?;
     |                                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6692:76
     |
6692 |         let claire_id = Contact::create(&bob, "claire", "claire@foo").await?;
     |                                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6720:65
     |
6720 |             Contact::create(&alice, "", "bob@example.net").await?,
     |                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6729:68
     |
6729 |             Contact::create(&alice, "", "claire@example.org").await?,
     |                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6760:76
     |
6760 |         let msg_from = Contact::get_by_id(&claire, msg.get_from_id()).await?;
     |                                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6774:65
     |
6774 |             Contact::create(&alice, "", "bob@example.net").await?,
     |                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6794:65
     |
6794 |             Contact::create(&alice, "", "bob@example.net").await?,
     |                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6813:66
     |
6813 |             Contact::create(&bob, "", "claire@example.org").await?,
     |                                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6830:65
     |
6830 |             Contact::create(&alice, "", "bob@example.net").await?,
     |                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6838:68
     |
6838 |             Contact::create(&alice, "", "claire@example.org").await?,
     |                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6850:64
     |
6850 |         let bob = Contact::create(&alice, "", "bob@f.br").await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6981:48
     |
6981 |             &ContactAddress::new("foo@bar.org")?,
     |                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6984:15
     |
6984 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7019:82
     |
7019 |         let contact_bob = Contact::create(&alice, "Bob", "bob@example.net").await?;
     |                                                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7020:83
     |
7020 |         let contact_fiona = Contact::create(&alice, "", "fiona@example.net").await?;
     |                                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7053:61
     |
7053 |         bob.set_config(Config::E2eeEnabled, Some("0")).await?;
     |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7221:54
     |
7221 |         delete_msgs(&t, &[second_image_msg_id]).await?;
     |                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7246:68
     |
7246 |             Contact::create(&alice, "bob", "bob@example.net").await?,
     |                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7249:38
     |
7249 |         let dir = tempfile::tempdir()?;
     |                                      ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7251:38
     |
7251 |         fs::write(&file, "aaa").await?;
     |                                      ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7269:60
     |
7269 |             a.set_config_bool(Config::SyncMsgs, true).await?;
     |                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7291:55
     |
7291 |         Contact::unblock(alice0, a0b_contact_id).await?;
     |                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7294:53
     |
7294 |         Contact::block(alice0, a0b_contact_id).await?;
     |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7297:55
     |
7297 |         Contact::unblock(alice0, a0b_contact_id).await?;
     |                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7324:23
     |
7324 |                 .await?
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7335:60
     |
7335 |             a.set_config_bool(Config::SyncMsgs, true).await?;
     |                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7352:19
     |
7352 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7369:23
     |
7369 |                 .await?
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7383:60
     |
7383 |             a.set_config_bool(Config::SyncMsgs, true).await?;
     |                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7409:60
     |
7409 |             a.set_config_bool(Config::SyncMsgs, true).await?;
     |                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7431:72
     |
7431 | ...                   time.duration_since(SystemTime::UNIX_EPOCH)?.as_secs(),
     |                                                                  ^ the trait `From<SystemTimeError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, SystemTimeError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, SystemTimeError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7446:60
     |
7446 |             a.set_config_bool(Config::SyncMsgs, true).await?;
     |                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7466:48
     |
7466 |             &bob.get_config(Config::Addr).await?.unwrap(),
     |                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7469:15
     |
7469 |         .await?
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7492:60
     |
7492 |             a.set_config_bool(Config::SyncMsgs, true).await?;
     |                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1461:27
     |
1461 |         assert_eq!(bob.id.get_fresh_msg_cnt(&t).await.unwrap(), 1);
     |                           ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1461 |         assert_eq!(bob.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 1);
     |                                            ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1467:30
     |
1467 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t).await.unwrap(), 2);
     |                              ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1467 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 2);
     |                                               ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1474:28
     |
1474 |         assert_eq!(dave.id.get_fresh_msg_cnt(&t).await.unwrap(), 3);
     |                            ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1474 |         assert_eq!(dave.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 3);
     |                                             ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1481:30
     |
1481 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t).await.unwrap(), 2);
     |                              ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1481 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 2);
     |                                               ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1489:30
     |
1489 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t).await.unwrap(), 3);
     |                              ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1489 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 3);
     |                                               ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1496:30
     |
1496 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t).await.unwrap(), 3);
     |                              ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1496 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 3);
     |                                               ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/message.rs:2394:34
     |
2394 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice).await?, 2);
     |                                  ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
2394 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 2);
     |                                                   ~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/message.rs:2403:34
     |
2403 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice).await?, 2);
     |                                  ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
2403 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 2);
     |                                                   ~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/message.rs:2409:34
     |
2409 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice).await?, 1);
     |                                  ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
2409 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 1);
     |                                                   ~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/message.rs:2415:34
     |
2415 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice).await?, 0);
     |                                  ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
2415 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 0);
     |                                                   ~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0061, E0252, E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `deltachat` (lib test) generated 3 warnings (3 duplicates)
error: could not compile `deltachat` (lib test) due to 400 previous errors; 3 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


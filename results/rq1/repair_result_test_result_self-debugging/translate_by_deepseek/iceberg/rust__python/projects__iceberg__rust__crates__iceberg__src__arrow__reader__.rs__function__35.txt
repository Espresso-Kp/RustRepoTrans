Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0252]: the name `ArrowError` is defined multiple times
  --> crates/iceberg/src/arrow/reader.rs:28:20
   |
21 | use arrow_schema::ArrowError;
   |     ------------------------ previous import of the type `ArrowError` here
...
28 | use arrow_schema::{ArrowError, DataType, SchemaRef as ArrowSchemaRef};
   |                    ^^^^^^^^^^--
   |                    |
   |                    `ArrowError` reimported here
   |                    help: remove unnecessary import
   |
   = note: `ArrowError` must be defined only once in the type namespace of this module

error[E0252]: the name `HashMap` is defined multiple times
  --> crates/iceberg/src/arrow/reader.rs:40:24
   |
22 | use std::collections::HashMap;
   |     ------------------------- previous import of the type `HashMap` here
...
40 | use std::collections::{HashMap, HashSet};
   |                        ^^^^^^^--
   |                        |
   |                        `HashMap` reimported here
   |                        help: remove unnecessary import
   |
   = note: `HashMap` must be defined only once in the type namespace of this module

error[E0449]: visibility qualifiers are not permitted here
   --> crates/iceberg/src/arrow/reader.rs:545:1
    |
545 | pub fn and(
    | ^^^
    |
    = note: trait items always share the visibility of their trait

error[E0407]: method `as_any` is not a member of trait `BoundPredicateVisitor`
   --> crates/iceberg/src/arrow/reader.rs:564:1
    |
564 | / fn as_any(&self) -> &dyn std::any::Any {
565 | |         self
566 | |     }
    | |_____^ not a member of trait `BoundPredicateVisitor`

error[E0407]: method `as_any` is not a member of trait `BoundPredicateVisitor`
   --> crates/iceberg/src/arrow/reader.rs:567:1
    |
567 | / fn as_any(&self) -> &dyn std::any::Any {
568 | |         self
569 | |     }
    | |_____^ not a member of trait `BoundPredicateVisitor`

error[E0201]: duplicate definitions with name `eq`:
   --> crates/iceberg/src/arrow/reader.rs:573:1
    |
570 | / fn eq(&self, _other: &Self) -> bool {
571 | |         true
572 | |     }
    | |_____- previous definition here
573 | / fn eq(&self, _other: &Self) -> bool {
574 | |         true
575 | |     }
    | |_____^ duplicate definition
    |
   ::: crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:101:5
    |
101 | /     fn eq(
102 | |         &mut self,
103 | |         reference: &BoundReference,
104 | |         literal: &Datum,
105 | |         predicate: &BoundPredicate,
106 | |     ) -> Result<Self::T>;
    | |_________________________- item in trait

error[E0201]: duplicate definitions with name `eq`:
   --> crates/iceberg/src/arrow/reader.rs:732:5
    |
570 | / fn eq(&self, _other: &Self) -> bool {
571 | |         true
572 | |     }
    | |_____- previous definition here
...
732 | /     fn eq(
733 | |         &mut self,
734 | |         reference: &BoundReference,
735 | |         literal: &Datum,
...   |
748 | |         }
749 | |     }
    | |_____^ duplicate definition
    |
   ::: crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:101:5
    |
101 | /     fn eq(
102 | |         &mut self,
103 | |         reference: &BoundReference,
104 | |         literal: &Datum,
105 | |         predicate: &BoundPredicate,
106 | |     ) -> Result<Self::T>;
    | |_________________________- item in trait

error[E0422]: cannot find struct, variant or union type `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:550:73
    |
550 | ...   if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) || rhs(self.record_batch.clone())?.as_any().is::<Bo...
    |                                                                       ^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
21  + use crate::arrow::reader::BoundPredicate::AlwaysFalse;
    |
21  + use crate::expr::Predicate::AlwaysFalse;
    |

error[E0422]: cannot find struct, variant or union type `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:550:153
    |
550 | ...ord_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) {
    |                                                     ^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
21  + use crate::arrow::reader::BoundPredicate::AlwaysFalse;
    |
21  + use crate::expr::Predicate::AlwaysFalse;
    |

error[E0422]: cannot find struct, variant or union type `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:551:32
    |
551 |             return Ok(Box::new(AlwaysFalse {}));
    |                                ^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
21  + use crate::arrow::reader::BoundPredicate::AlwaysFalse;
    |
21  + use crate::expr::Predicate::AlwaysFalse;
    |

error[E0422]: cannot find struct, variant or union type `AlwaysTrue` in this scope
   --> crates/iceberg/src/arrow/reader.rs:552:80
    |
552 |         } else if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                                                                                ^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
21  + use crate::arrow::reader::BoundPredicate::AlwaysTrue;
    |
21  + use crate::expr::Predicate::AlwaysTrue;
    |

error[E0422]: cannot find struct, variant or union type `AlwaysTrue` in this scope
   --> crates/iceberg/src/arrow/reader.rs:554:80
    |
554 |         } else if rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                                                                                ^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
21  + use crate::arrow::reader::BoundPredicate::AlwaysTrue;
    |
21  + use crate::expr::Predicate::AlwaysTrue;
    |

warning: unused import: `and`
  --> crates/iceberg/src/arrow/reader.rs:25:28
   |
25 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                            ^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `ArrowError`
  --> crates/iceberg/src/arrow/reader.rs:28:20
   |
28 | use arrow_schema::{ArrowError, DataType, SchemaRef as ArrowSchemaRef};
   |                    ^^^^^^^^^^

warning: unused import: `HashMap`
  --> crates/iceberg/src/arrow/reader.rs:40:24
   |
40 | use std::collections::{HashMap, HashSet};
   |                        ^^^^^^^

error[E0050]: method `eq` has 2 parameters but the declaration in trait `BoundPredicateVisitor::eq` has 4
   --> crates/iceberg/src/arrow/reader.rs:570:7
    |
570 |   fn eq(&self, _other: &Self) -> bool {
    |         ^^^^^^^^^^^^^^^^^^^^ expected 4 parameters, found 2
    |
   ::: crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:102:9
    |
102 | /         &mut self,
103 | |         reference: &BoundReference,
104 | |         literal: &Datum,
105 | |         predicate: &BoundPredicate,
    | |__________________________________- trait requires 4 parameters

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:550:21
    |
550 | ...   if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) || rhs(self.record_batch.clone())?.as_any().is::<Bo...
    |                   ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:550:42
    |
550 |         if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) || rhs(self.record_batch.clone())?.as_any().is::<...
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-10318793976069729184.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:550:44
    |
550 | ...   if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) || rhs(self.record_batch.clone())?.as_any().is::<Bo...
    |                                          ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
21  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:550:101
    |
550 | ...   if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) || rhs(self.record_batch.clone())?.as_any().is::<Bo...
    |                                                                                                   ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:550:122
    |
550 | ...y>(&AlwaysFalse {}) || rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) {
    |                                                         ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-552290688703247514.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:550:124
    |
550 | ...sFalse {}) || rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) {
    |                                                  ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
21  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:552:28
    |
552 |         } else if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                            ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:552:49
    |
552 |         } else if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-13732048872484141739.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:552:51
    |
552 |         } else if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                                                   ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
21  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:554:28
    |
554 |         } else if rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                            ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:554:49
    |
554 |         } else if rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-10973085558262790516.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:554:51
    |
554 |         } else if rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                                                   ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
21  + use arrow_array::Array;
    |

error[E0599]: no method named `clone` found for mutable reference `&mut PredicateConverter<'a>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:28
    |
558 |             let obj = self.clone();
    |                            ^^^^^ method not found in `&mut PredicateConverter<'a>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the trait `Clone` defines an item `clone`, but is explicitly unimplemented

Some errors have detailed explanations: E0050, E0201, E0252, E0277, E0407, E0422, E0449, E0599, E0609.
For more information about an error, try `rustc --explain E0050`.
warning: `iceberg` (lib) generated 3 warnings
error: could not compile `iceberg` (lib) due to 26 previous errors; 3 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:550:42
    |
550 |         if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) || rhs(self.record_batch.clone())?.as_any().is::<...
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-5748239901684788794.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:550:122
    |
550 | ...y>(&AlwaysFalse {}) || rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) {
    |                                                         ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-1103153399894296671.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:552:49
    |
552 |         } else if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-5938645458104889581.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:554:49
    |
554 |         } else if rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-7505971632427867413.txt'

warning: `iceberg` (lib test) generated 3 warnings (3 duplicates)
error: could not compile `iceberg` (lib test) due to 26 previous errors; 3 warnings emitted

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0252]: the name `ArrowError` is defined multiple times
  --> crates/iceberg/src/arrow/reader.rs:28:20
   |
21 | use arrow_schema::ArrowError;
   |     ------------------------ previous import of the type `ArrowError` here
...
28 | use arrow_schema::{ArrowError, DataType, SchemaRef as ArrowSchemaRef};
   |                    ^^^^^^^^^^--
   |                    |
   |                    `ArrowError` reimported here
   |                    help: remove unnecessary import
   |
   = note: `ArrowError` must be defined only once in the type namespace of this module

error[E0252]: the name `HashMap` is defined multiple times
  --> crates/iceberg/src/arrow/reader.rs:40:24
   |
22 | use std::collections::HashMap;
   |     ------------------------- previous import of the type `HashMap` here
...
40 | use std::collections::{HashMap, HashSet};
   |                        ^^^^^^^--
   |                        |
   |                        `HashMap` reimported here
   |                        help: remove unnecessary import
   |
   = note: `HashMap` must be defined only once in the type namespace of this module

error[E0449]: visibility qualifiers are not permitted here
   --> crates/iceberg/src/arrow/reader.rs:545:1
    |
545 | pub fn and(
    | ^^^
    |
    = note: trait items always share the visibility of their trait

error[E0407]: method `as_any` is not a member of trait `BoundPredicateVisitor`
   --> crates/iceberg/src/arrow/reader.rs:564:1
    |
564 | / fn as_any(&self) -> &dyn std::any::Any {
565 | |         self
566 | |     }
    | |_____^ not a member of trait `BoundPredicateVisitor`

error[E0407]: method `as_any` is not a member of trait `BoundPredicateVisitor`
   --> crates/iceberg/src/arrow/reader.rs:567:1
    |
567 | / fn as_any(&self) -> &dyn std::any::Any {
568 | |         self
569 | |     }
    | |_____^ not a member of trait `BoundPredicateVisitor`

error[E0201]: duplicate definitions with name `eq`:
   --> crates/iceberg/src/arrow/reader.rs:573:1
    |
570 | / fn eq(&self, _other: &Self) -> bool {
571 | |         true
572 | |     }
    | |_____- previous definition here
573 | / fn eq(&self, _other: &Self) -> bool {
574 | |         true
575 | |     }
    | |_____^ duplicate definition
    |
   ::: crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:101:5
    |
101 | /     fn eq(
102 | |         &mut self,
103 | |         reference: &BoundReference,
104 | |         literal: &Datum,
105 | |         predicate: &BoundPredicate,
106 | |     ) -> Result<Self::T>;
    | |_________________________- item in trait

error[E0201]: duplicate definitions with name `eq`:
   --> crates/iceberg/src/arrow/reader.rs:732:5
    |
570 | / fn eq(&self, _other: &Self) -> bool {
571 | |         true
572 | |     }
    | |_____- previous definition here
...
732 | /     fn eq(
733 | |         &mut self,
734 | |         reference: &BoundReference,
735 | |         literal: &Datum,
...   |
748 | |         }
749 | |     }
    | |_____^ duplicate definition
    |
   ::: crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:101:5
    |
101 | /     fn eq(
102 | |         &mut self,
103 | |         reference: &BoundReference,
104 | |         literal: &Datum,
105 | |         predicate: &BoundPredicate,
106 | |     ) -> Result<Self::T>;
    | |_________________________- item in trait

error[E0422]: cannot find struct, variant or union type `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:550:73
    |
550 | ...   if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) || rhs(self.record_batch.clone())?.as_any().is::<Bo...
    |                                                                       ^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
21  + use crate::arrow::reader::BoundPredicate::AlwaysFalse;
    |
21  + use crate::expr::Predicate::AlwaysFalse;
    |

error[E0422]: cannot find struct, variant or union type `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:550:153
    |
550 | ...ord_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) {
    |                                                     ^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
21  + use crate::arrow::reader::BoundPredicate::AlwaysFalse;
    |
21  + use crate::expr::Predicate::AlwaysFalse;
    |

error[E0422]: cannot find struct, variant or union type `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:551:32
    |
551 |             return Ok(Box::new(AlwaysFalse {}));
    |                                ^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
21  + use crate::arrow::reader::BoundPredicate::AlwaysFalse;
    |
21  + use crate::expr::Predicate::AlwaysFalse;
    |

error[E0422]: cannot find struct, variant or union type `AlwaysTrue` in this scope
   --> crates/iceberg/src/arrow/reader.rs:552:80
    |
552 |         } else if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                                                                                ^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
21  + use crate::arrow::reader::BoundPredicate::AlwaysTrue;
    |
21  + use crate::expr::Predicate::AlwaysTrue;
    |

error[E0422]: cannot find struct, variant or union type `AlwaysTrue` in this scope
   --> crates/iceberg/src/arrow/reader.rs:554:80
    |
554 |         } else if rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                                                                                ^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
21  + use crate::arrow::reader::BoundPredicate::AlwaysTrue;
    |
21  + use crate::expr::Predicate::AlwaysTrue;
    |

warning: unused import: `and`
  --> crates/iceberg/src/arrow/reader.rs:25:28
   |
25 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                            ^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `ArrowError`
  --> crates/iceberg/src/arrow/reader.rs:28:20
   |
28 | use arrow_schema::{ArrowError, DataType, SchemaRef as ArrowSchemaRef};
   |                    ^^^^^^^^^^

warning: unused import: `HashMap`
  --> crates/iceberg/src/arrow/reader.rs:40:24
   |
40 | use std::collections::{HashMap, HashSet};
   |                        ^^^^^^^

error[E0050]: method `eq` has 2 parameters but the declaration in trait `BoundPredicateVisitor::eq` has 4
   --> crates/iceberg/src/arrow/reader.rs:570:7
    |
570 |   fn eq(&self, _other: &Self) -> bool {
    |         ^^^^^^^^^^^^^^^^^^^^ expected 4 parameters, found 2
    |
   ::: crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:102:9
    |
102 | /         &mut self,
103 | |         reference: &BoundReference,
104 | |         literal: &Datum,
105 | |         predicate: &BoundPredicate,
    | |__________________________________- trait requires 4 parameters

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:550:21
    |
550 | ...   if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) || rhs(self.record_batch.clone())?.as_any().is::<Bo...
    |                   ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:550:42
    |
550 |         if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) || rhs(self.record_batch.clone())?.as_any().is::<...
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-12817056192369175862.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:550:44
    |
550 | ...   if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) || rhs(self.record_batch.clone())?.as_any().is::<Bo...
    |                                          ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
21  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:550:101
    |
550 | ...   if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) || rhs(self.record_batch.clone())?.as_any().is::<Bo...
    |                                                                                                   ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:550:122
    |
550 | ...y>(&AlwaysFalse {}) || rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) {
    |                                                         ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-14777476784806590493.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:550:124
    |
550 | ...sFalse {}) || rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysFalse {}) {
    |                                                  ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
21  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:552:28
    |
552 |         } else if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                            ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:552:49
    |
552 |         } else if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-12107251956039440699.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:552:51
    |
552 |         } else if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                                                   ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
21  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:554:28
    |
554 |         } else if rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                            ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:554:49
    |
554 |         } else if rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-10498078553200901849.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:554:51
    |
554 |         } else if rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>(&AlwaysTrue {}) {
    |                                                   ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
21  + use arrow_array::Array;
    |

error[E0599]: no method named `clone` found for mutable reference `&mut PredicateConverter<'a>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:28
    |
558 |             let obj = self.clone();
    |                            ^^^^^ method not found in `&mut PredicateConverter<'a>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the trait `Clone` defines an item `clone`, but is explicitly unimplemented

Some errors have detailed explanations: E0050, E0201, E0252, E0277, E0407, E0422, E0449, E0599, E0609.
For more information about an error, try `rustc --explain E0050`.
warning: `iceberg` (lib) generated 3 warnings
error: could not compile `iceberg` (lib) due to 26 previous errors; 3 warnings emitted


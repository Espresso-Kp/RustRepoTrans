Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/avro/schema.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: 3 positional arguments in format string, but there are 2 arguments
   --> crates/iceberg/src/avro/schema.rs:156:20
    |
156 |         &format!("k{}_{}v{}", self.last_map_key_field_id, self.last_map_value_field_id),
    |                    ^^ ^^ ^^   --------------------------  ----------------------------

error[E0449]: visibility qualifiers are not permitted here
   --> crates/iceberg/src/avro/schema.rs:132:1
    |
132 | pub fn map(
    | ^^^
    |
    = note: trait items always share the visibility of their trait

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:138:31
    |
138 |     if let AvroSchemaOrField::Schema(schema) = &key_value {
    |                               ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0559]: variant `apache_avro::Schema::Map` has no field named `values`
   --> crates/iceberg/src/avro/schema.rs:142:17
    |
142 |                 values: Box::new(value),
    |                 ^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:103:5
    |
103 |     Map(Box<Schema>),
    |     --- `apache_avro::Schema::Map` defined here
    |
help: `apache_avro::Schema::Map` is a tuple variant, use the appropriate syntax
    |
141 |             let map_schema = apache_avro::Schema::Map(/* fields */);
    |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0559]: variant `apache_avro::Schema::Map` has no field named `key_id`
   --> crates/iceberg/src/avro/schema.rs:143:17
    |
143 |                 key_id: self.last_map_key_field_id,
    |                 ^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:103:5
    |
103 |     Map(Box<Schema>),
    |     --- `apache_avro::Schema::Map` defined here
    |
help: `apache_avro::Schema::Map` is a tuple variant, use the appropriate syntax
    |
141 |             let map_schema = apache_avro::Schema::Map(/* fields */);
    |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:143:30
    |
143 |                 key_id: self.last_map_key_field_id,
    |                              ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0559]: variant `apache_avro::Schema::Map` has no field named `value_id`
   --> crates/iceberg/src/avro/schema.rs:144:17
    |
144 |                 value_id: self.last_map_value_field_id,
    |                 ^^^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:103:5
    |
103 |     Map(Box<Schema>),
    |     --- `apache_avro::Schema::Map` defined here
    |
help: `apache_avro::Schema::Map` is a tuple variant, use the appropriate syntax
    |
141 |             let map_schema = apache_avro::Schema::Map(/* fields */);
    |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:144:32
    |
144 |                 value_id: self.last_map_value_field_id,
    |                                ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:146:42
    |
146 |             return Ok(AvroSchemaOrField::Schema(map_schema));
    |                                          ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0599]: no function or associated item named `new` found for struct `RecordField` in the current scope
   --> crates/iceberg/src/avro/schema.rs:152:38
    |
152 |     let key_field = AvroRecordField::new("key", key_value.clone(), self.last_map_key_field_id)?;
    |                                      ^^^ function or associated item not found in `RecordField`
    |
note: if you're trying to build a new `RecordField`, consider using `RecordField::parse` which returns `std::result::Result<RecordField, apache_avro::Error>`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:642:5
    |
642 | /     fn parse(
643 | |         field: &Map<String, Value>,
644 | |         position: usize,
645 | |         parser: &mut Parser,
646 | |         enclosing_record: &Name,
647 | |     ) -> AvroResult<Self> {
    | |_________________________^

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:152:73
    |
152 |     let key_field = AvroRecordField::new("key", key_value.clone(), self.last_map_key_field_id)?;
    |                                                                         ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no function or associated item named `new` found for struct `RecordField` in the current scope
   --> crates/iceberg/src/avro/schema.rs:153:40
    |
153 |     let value_field = AvroRecordField::new("value", value.clone(), self.last_map_value_field_id)?;
    |                                        ^^^ function or associated item not found in `RecordField`
    |
note: if you're trying to build a new `RecordField`, consider using `RecordField::parse` which returns `std::result::Result<RecordField, apache_avro::Error>`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:642:5
    |
642 | /     fn parse(
643 | |         field: &Map<String, Value>,
644 | |         position: usize,
645 | |         parser: &mut Parser,
646 | |         enclosing_record: &Name,
647 | |     ) -> AvroResult<Self> {
    | |_________________________^

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:153:73
    |
153 |     let value_field = AvroRecordField::new("value", value.clone(), self.last_map_value_field_id)?;
    |                                                                         ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:156:36
    |
156 |         &format!("k{}_{}v{}", self.last_map_key_field_id, self.last_map_value_field_id),
    |                                    ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:156:64
    |
156 |         &format!("k{}_{}v{}", self.last_map_key_field_id, self.last_map_value_field_id),
    |                                                                ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no variant or associated item named `Logical` found for enum `apache_avro::Schema` in the current scope
    --> crates/iceberg/src/avro/schema.rs:159:42
     |
159  |     let logical_map_schema = AvroSchema::Logical(LogicalSchema::Map {
     |                                          ^^^^^^^ variant or associated item not found in `Schema`
     |
note: if you're trying to build a new `apache_avro::Schema` consider using one of the following associated functions:
      apache_avro::Schema::parse_str
      apache_avro::Schema::parse_reader
      apache_avro::Schema::parse
      apache_avro::Schema::parse_with_names
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:997:5
     |
997  |     pub fn parse_str(input: &str) -> Result<Schema, Error> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1035 |     pub fn parse_reader(reader: &mut (impl Read + ?Sized)) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1044 |     pub fn parse(value: &Value) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1051 |     pub(crate) fn parse_with_names(value: &Value, names: Names) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:163:27
    |
163 |     Ok(AvroSchemaOrField::Schema(logical_map_schema))
    |                           ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0433]: failed to resolve: use of undeclared type `LogicalSchema`
   --> crates/iceberg/src/avro/schema.rs:159:50
    |
159 |     let logical_map_schema = AvroSchema::Logical(LogicalSchema::Map {
    |                                                  ^^^^^^^^^^^^^
    |                                                  |
    |                                                  use of undeclared type `LogicalSchema`
    |                                                  help: a struct with a similar name exists: `DecimalSchema`

Some errors have detailed explanations: E0433, E0449, E0559, E0599, E0609.
For more information about an error, try `rustc --explain E0433`.
error: could not compile `iceberg` (lib) due to 18 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 18 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: 3 positional arguments in format string, but there are 2 arguments
   --> crates/iceberg/src/avro/schema.rs:156:20
    |
156 |         &format!("k{}_{}v{}", self.last_map_key_field_id, self.last_map_value_field_id),
    |                    ^^ ^^ ^^   --------------------------  ----------------------------

error[E0449]: visibility qualifiers are not permitted here
   --> crates/iceberg/src/avro/schema.rs:132:1
    |
132 | pub fn map(
    | ^^^
    |
    = note: trait items always share the visibility of their trait

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:138:31
    |
138 |     if let AvroSchemaOrField::Schema(schema) = &key_value {
    |                               ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0559]: variant `apache_avro::Schema::Map` has no field named `values`
   --> crates/iceberg/src/avro/schema.rs:142:17
    |
142 |                 values: Box::new(value),
    |                 ^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:103:5
    |
103 |     Map(Box<Schema>),
    |     --- `apache_avro::Schema::Map` defined here
    |
help: `apache_avro::Schema::Map` is a tuple variant, use the appropriate syntax
    |
141 |             let map_schema = apache_avro::Schema::Map(/* fields */);
    |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0559]: variant `apache_avro::Schema::Map` has no field named `key_id`
   --> crates/iceberg/src/avro/schema.rs:143:17
    |
143 |                 key_id: self.last_map_key_field_id,
    |                 ^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:103:5
    |
103 |     Map(Box<Schema>),
    |     --- `apache_avro::Schema::Map` defined here
    |
help: `apache_avro::Schema::Map` is a tuple variant, use the appropriate syntax
    |
141 |             let map_schema = apache_avro::Schema::Map(/* fields */);
    |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:143:30
    |
143 |                 key_id: self.last_map_key_field_id,
    |                              ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0559]: variant `apache_avro::Schema::Map` has no field named `value_id`
   --> crates/iceberg/src/avro/schema.rs:144:17
    |
144 |                 value_id: self.last_map_value_field_id,
    |                 ^^^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:103:5
    |
103 |     Map(Box<Schema>),
    |     --- `apache_avro::Schema::Map` defined here
    |
help: `apache_avro::Schema::Map` is a tuple variant, use the appropriate syntax
    |
141 |             let map_schema = apache_avro::Schema::Map(/* fields */);
    |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:144:32
    |
144 |                 value_id: self.last_map_value_field_id,
    |                                ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:146:42
    |
146 |             return Ok(AvroSchemaOrField::Schema(map_schema));
    |                                          ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0599]: no function or associated item named `new` found for struct `RecordField` in the current scope
   --> crates/iceberg/src/avro/schema.rs:152:38
    |
152 |     let key_field = AvroRecordField::new("key", key_value.clone(), self.last_map_key_field_id)?;
    |                                      ^^^ function or associated item not found in `RecordField`
    |
note: if you're trying to build a new `RecordField`, consider using `RecordField::parse` which returns `std::result::Result<RecordField, apache_avro::Error>`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:642:5
    |
642 | /     fn parse(
643 | |         field: &Map<String, Value>,
644 | |         position: usize,
645 | |         parser: &mut Parser,
646 | |         enclosing_record: &Name,
647 | |     ) -> AvroResult<Self> {
    | |_________________________^

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:152:73
    |
152 |     let key_field = AvroRecordField::new("key", key_value.clone(), self.last_map_key_field_id)?;
    |                                                                         ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no function or associated item named `new` found for struct `RecordField` in the current scope
   --> crates/iceberg/src/avro/schema.rs:153:40
    |
153 |     let value_field = AvroRecordField::new("value", value.clone(), self.last_map_value_field_id)?;
    |                                        ^^^ function or associated item not found in `RecordField`
    |
note: if you're trying to build a new `RecordField`, consider using `RecordField::parse` which returns `std::result::Result<RecordField, apache_avro::Error>`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:642:5
    |
642 | /     fn parse(
643 | |         field: &Map<String, Value>,
644 | |         position: usize,
645 | |         parser: &mut Parser,
646 | |         enclosing_record: &Name,
647 | |     ) -> AvroResult<Self> {
    | |_________________________^

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:153:73
    |
153 |     let value_field = AvroRecordField::new("value", value.clone(), self.last_map_value_field_id)?;
    |                                                                         ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:156:36
    |
156 |         &format!("k{}_{}v{}", self.last_map_key_field_id, self.last_map_value_field_id),
    |                                    ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:156:64
    |
156 |         &format!("k{}_{}v{}", self.last_map_key_field_id, self.last_map_value_field_id),
    |                                                                ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no variant or associated item named `Logical` found for enum `apache_avro::Schema` in the current scope
    --> crates/iceberg/src/avro/schema.rs:159:42
     |
159  |     let logical_map_schema = AvroSchema::Logical(LogicalSchema::Map {
     |                                          ^^^^^^^ variant or associated item not found in `Schema`
     |
note: if you're trying to build a new `apache_avro::Schema` consider using one of the following associated functions:
      apache_avro::Schema::parse_str
      apache_avro::Schema::parse_reader
      apache_avro::Schema::parse
      apache_avro::Schema::parse_with_names
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:997:5
     |
997  |     pub fn parse_str(input: &str) -> Result<Schema, Error> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1035 |     pub fn parse_reader(reader: &mut (impl Read + ?Sized)) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1044 |     pub fn parse(value: &Value) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1051 |     pub(crate) fn parse_with_names(value: &Value, names: Names) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:163:27
    |
163 |     Ok(AvroSchemaOrField::Schema(logical_map_schema))
    |                           ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0433]: failed to resolve: use of undeclared type `LogicalSchema`
   --> crates/iceberg/src/avro/schema.rs:159:50
    |
159 |     let logical_map_schema = AvroSchema::Logical(LogicalSchema::Map {
    |                                                  ^^^^^^^^^^^^^
    |                                                  |
    |                                                  use of undeclared type `LogicalSchema`
    |                                                  help: a struct with a similar name exists: `DecimalSchema`

Some errors have detailed explanations: E0433, E0449, E0559, E0599, E0609.
For more information about an error, try `rustc --explain E0433`.
error: could not compile `iceberg` (lib) due to 18 previous errors


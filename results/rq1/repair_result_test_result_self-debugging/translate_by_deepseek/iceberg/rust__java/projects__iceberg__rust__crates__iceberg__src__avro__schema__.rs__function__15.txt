Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/avro/schema.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0252]: the name `Error` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:30:32
   |
21 | use crate::{Error, ErrorKind, Result};
   |             ----- previous import of the type `Error` here
...
30 | use crate::{ensure_data_valid, Error, ErrorKind, Result};
   |                                ^^^^^--
   |                                |
   |                                `Error` reimported here
   |                                help: remove unnecessary import
   |
   = note: `Error` must be defined only once in the type namespace of this module

error[E0252]: the name `Result` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:30:50
   |
21 | use crate::{Error, ErrorKind, Result};
   |                               ------ previous import of the type `Result` here
...
30 | use crate::{ensure_data_valid, Error, ErrorKind, Result};
   |                                                  ^^^^^^ `Result` reimported here
   |
   = note: `Result` must be defined only once in the type namespace of this module

error[E0252]: the name `PrimitiveType` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:27:67
   |
22 | use crate::spec::{Type, PrimitiveType};
   |                         ------------- previous import of the type `PrimitiveType` here
...
27 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
   |                                                                   ^^^^^^^^^^^^^--
   |                                                                   |
   |                                                                   `PrimitiveType` reimported here
   |                                                                   help: remove unnecessary import
   |
   = note: `PrimitiveType` must be defined only once in the type namespace of this module

error[E0252]: the name `Schema` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:27:82
   |
20 | use apache_avro::schema::{LogicalType, Schema};
   |                                        ------ previous import of the type `Schema` here
...
27 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
   |                                                                                  ^^^^^^ `Schema` reimported here
   |
   = note: `Schema` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
27 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema as OtherSchema,
   |                                                                                  ~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `Type` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:28:32
   |
22 | use crate::spec::{Type, PrimitiveType};
   |                   ---- previous import of the type `Type` here
...
28 |     SchemaVisitor, StructType, Type,
   |                                ^^^^-
   |                                |
   |                                `Type` reimported here
   |                                help: remove unnecessary import
   |
   = note: `Type` must be defined only once in the type namespace of this module

error[E0252]: the name `ErrorKind` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:30:39
   |
21 | use crate::{Error, ErrorKind, Result};
   |                    --------- previous import of the type `ErrorKind` here
...
30 | use crate::{ensure_data_valid, Error, ErrorKind, Result};
   |                                       ^^^^^^^^^--
   |                                       |
   |                                       `ErrorKind` reimported here
   |                                       help: remove unnecessary import
   |
   = note: `ErrorKind` must be defined only once in the type namespace of this module

error[E0449]: visibility qualifiers are not permitted here
   --> crates/iceberg/src/avro/schema.rs:455:1
    |
455 | pub fn primitive(&mut self, schema: &Schema) -> Result<Option<Type>> {
    | ^^^
    |
    = note: trait items always share the visibility of their trait

error[E0432]: unresolved import `apache_avro::schema::LogicalType`
  --> crates/iceberg/src/avro/schema.rs:20:27
   |
20 | use apache_avro::schema::{LogicalType, Schema};
   |                           ^^^^^^^^^^^ no `LogicalType` in `schema`
   |
   = help: consider importing one of these items instead:
           parquet::basic::LogicalType
           parquet::format::LogicalType

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:477:31
    |
477 |             Some(apache_avro::SchemaType::Boolean) => Ok(Some(Type::Primitive(PrimitiveType::Boolean))),
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:478:31
    |
478 |             Some(apache_avro::SchemaType::Int) => Ok(Some(Type::Primitive(PrimitiveType::Int))),
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:479:31
    |
479 |             Some(apache_avro::SchemaType::Long) => Ok(Some(Type::Primitive(PrimitiveType::Long))),
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:480:31
    |
480 |             Some(apache_avro::SchemaType::Float) => Ok(Some(Type::Primitive(PrimitiveType::Float))),
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:481:31
    |
481 |             Some(apache_avro::SchemaType::Double) => Ok(Some(Type::Primitive(PrimitiveType::Double))),
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:482:31
    |
482 |             Some(apache_avro::SchemaType::String) | Some(apache_avro::SchemaType::Enum) => {
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:482:71
    |
482 |             Some(apache_avro::SchemaType::String) | Some(apache_avro::SchemaType::Enum) => {
    |                                                                       ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:485:31
    |
485 |             Some(apache_avro::SchemaType::Fixed) => {
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:495:31
    |
495 |             Some(apache_avro::SchemaType::Bytes) => Ok(Some(Type::Primitive(PrimitiveType::Binary))),
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:496:31
    |
496 |             Some(apache_avro::SchemaType::Null) => Ok(None),
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

warning: unused imports: `PrimitiveType`, `Schema`, `Type`
  --> crates/iceberg/src/avro/schema.rs:27:67
   |
27 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
   |                                                                   ^^^^^^^^^^^^^  ^^^^^^
28 |     SchemaVisitor, StructType, Type,
   |                                ^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `ErrorKind`, `Error`, `Result`
  --> crates/iceberg/src/avro/schema.rs:30:32
   |
30 | use crate::{ensure_data_valid, Error, ErrorKind, Result};
   |                                ^^^^^  ^^^^^^^^^  ^^^^^^

error[E0053]: method `schema` has an incompatible type for trait
   --> crates/iceberg/src/avro/schema.rs:55:35
    |
55  |     fn schema(&mut self, _schema: &Schema, value: AvroSchemaOrField) -> Result<AvroSchemaOrField> {
    |                                   ^^^^^^^
    |                                   |
    |                                   expected `spec::schema::Schema`, found `apache_avro::Schema`
    |                                   help: change the parameter type to match the trait: `&spec::schema::Schema`
    |
note: type in trait
   --> crates/iceberg/src/spec/schema.rs:403:34
    |
403 |     fn schema(&mut self, schema: &Schema, value: Self::T) -> Result<Self::T>;
    |                                  ^^^^^^^
    = note: expected signature `fn(&mut SchemaToAvroSchema, &spec::schema::Schema, itertools::Either<_, _>) -> std::result::Result<_, _>`
               found signature `fn(&mut SchemaToAvroSchema, &apache_avro::Schema, itertools::Either<_, _>) -> std::result::Result<_, _>`

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/manifest_list.rs:495:61
    |
495 |         Lazy::new(|| schema_to_avro_schema("manifest_file", &V1_SCHEMA).unwrap());
    |                      ---------------------                  ^^^^^^^^^^ expected `&Schema`, found `&Lazy<Schema>`
    |                      |
    |                      arguments to this function are incorrect
    |
    = note: expected reference `&apache_avro::Schema`
               found reference `&once_cell::sync::Lazy<spec::schema::Schema>`
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:222:15
    |
222 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/manifest_list.rs:498:61
    |
498 |         Lazy::new(|| schema_to_avro_schema("manifest_file", &V2_SCHEMA).unwrap());
    |                      ---------------------                  ^^^^^^^^^^ expected `&Schema`, found `&Lazy<Schema>`
    |                      |
    |                      arguments to this function are incorrect
    |
    = note: expected reference `&apache_avro::Schema`
               found reference `&once_cell::sync::Lazy<spec::schema::Schema>`
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:222:15
    |
222 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:227:18
    |
227 |     visit_schema(schema, &mut converter).map(Either::unwrap_left)
    |     ------------ ^^^^^^ expected `spec::schema::Schema`, found `apache_avro::Schema`
    |     |
    |     arguments to this function are incorrect
    |
    = note: `apache_avro::Schema` and `spec::schema::Schema` have similar names, but are actually distinct types
note: `apache_avro::Schema` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
    |
78  | pub enum Schema {
    | ^^^^^^^^^^^^^^^
note: `spec::schema::Schema` is defined in the current crate
   --> crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ^^^^^^^^^^^^^^^^^
note: function defined here
   --> crates/iceberg/src/spec/schema.rs:462:8
    |
462 | pub fn visit_schema<V: SchemaVisitor>(schema: &Schema, visitor: &mut V) -> Result<V::T> {
    |        ^^^^^^^^^^^^                   ---------------

error[E0599]: no method named `get_logical_type` found for reference `&apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:456:44
    |
456 |         if let Some(logical_type) = schema.get_logical_type() {
    |                                            ^^^^^^^^^^^^^^^^ method not found in `&Schema`

error[E0599]: no method named `schema_type` found for reference `&apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:476:22
    |
476 |         match schema.schema_type() {
    |                      ^^^^^^^^^^^ method not found in `&Schema`

error[E0599]: no method named `fixed_size` found for reference `&apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:486:44
    |
486 |                 if let Some(size) = schema.fixed_size() {
    |                                            ^^^^^^^^^^ method not found in `&Schema`

error[E0599]: no variant or associated item named `builder` found for enum `apache_avro::Schema` in the current scope
    --> crates/iceberg/src/avro/schema.rs:513:21
     |
513  |             Schema::builder()
     |                     ^^^^^^^ variant or associated item not found in `Schema`
     |
note: if you're trying to build a new `apache_avro::Schema` consider using one of the following associated functions:
      apache_avro::Schema::parse_str
      apache_avro::Schema::parse_reader
      apache_avro::Schema::parse
      apache_avro::Schema::parse_with_names
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:997:5
     |
997  |     pub fn parse_str(input: &str) -> Result<Schema, Error> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1035 |     pub fn parse_reader(reader: &mut (impl Read + ?Sized)) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1044 |     pub fn parse(value: &Value) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1051 |     pub(crate) fn parse_with_names(value: &Value, names: Names) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/manifest.rs:659:49
    |
659 |         schema_to_avro_schema("manifest_entry", &schema)
    |         ---------------------                   ^^^^^^^ expected `apache_avro::Schema`, found `spec::schema::Schema`
    |         |
    |         arguments to this function are incorrect
    |
    = note: `spec::schema::Schema` and `apache_avro::Schema` have similar names, but are actually distinct types
note: `spec::schema::Schema` is defined in the current crate
   --> crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ^^^^^^^^^^^^^^^^^
note: `apache_avro::Schema` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
    |
78  | pub enum Schema {
    | ^^^^^^^^^^^^^^^
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:222:15
    |
222 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/manifest.rs:693:49
    |
693 |         schema_to_avro_schema("manifest_entry", &schema)
    |         ---------------------                   ^^^^^^^ expected `apache_avro::Schema`, found `spec::schema::Schema`
    |         |
    |         arguments to this function are incorrect
    |
    = note: `spec::schema::Schema` and `apache_avro::Schema` have similar names, but are actually distinct types
note: `spec::schema::Schema` is defined in the current crate
   --> crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ^^^^^^^^^^^^^^^^^
note: `apache_avro::Schema` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
    |
78  | pub enum Schema {
    | ^^^^^^^^^^^^^^^
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:222:15
    |
222 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

Some errors have detailed explanations: E0053, E0252, E0308, E0432, E0433, E0449, E0599.
For more information about an error, try `rustc --explain E0053`.
warning: `iceberg` (lib) generated 2 warnings
error: could not compile `iceberg` (lib) due to 28 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:557:49
    |
557 |             assert_eq!(expected_iceberg_schema, converted_iceberg_schema);
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ expected `spec::schema::Schema`, found `apache_avro::Schema`
    |
    = note: `apache_avro::Schema` and `spec::schema::Schema` have similar names, but are actually distinct types
note: `apache_avro::Schema` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
    |
78  | pub enum Schema {
    | ^^^^^^^^^^^^^^^
note: `spec::schema::Schema` is defined in the current crate
   --> crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:562:13
    |
560 |         let converted_avro_schema = schema_to_avro_schema(
    |                                     --------------------- arguments to this function are incorrect
561 |             avro_schema.name().unwrap().fullname(Namespace::None),
562 |             &expected_iceberg_schema,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ expected `apache_avro::Schema`, found `spec::schema::Schema`
    |
    = note: `spec::schema::Schema` and `apache_avro::Schema` have similar names, but are actually distinct types
note: `spec::schema::Schema` is defined in the current crate
   --> crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ^^^^^^^^^^^^^^^^^
note: `apache_avro::Schema` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
    |
78  | pub enum Schema {
    | ^^^^^^^^^^^^^^^
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:222:15
    |
222 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
    --> crates/iceberg/src/spec/values.rs:2527:57
     |
2527 |         let avro_schema = schema_to_avro_schema("test", &schema).unwrap();
     |                           ---------------------         ^^^^^^^ expected `apache_avro::Schema`, found `spec::schema::Schema`
     |                           |
     |                           arguments to this function are incorrect
     |
     = note: `spec::schema::Schema` and `apache_avro::Schema` have similar names, but are actually distinct types
note: `spec::schema::Schema` is defined in the current crate
    --> crates/iceberg/src/spec/schema.rs:47:1
     |
47   | pub struct Schema {
     | ^^^^^^^^^^^^^^^^^
note: `apache_avro::Schema` is defined in crate `apache_avro`
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
     |
78   | pub enum Schema {
     | ^^^^^^^^^^^^^^^
note: function defined here
    --> crates/iceberg/src/avro/schema.rs:222:15
     |
222  | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
     |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
    --> crates/iceberg/src/spec/values.rs:2553:57
     |
2553 |         let avro_schema = schema_to_avro_schema("test", &schema).unwrap();
     |                           ---------------------         ^^^^^^^ expected `apache_avro::Schema`, found `spec::schema::Schema`
     |                           |
     |                           arguments to this function are incorrect
     |
     = note: `spec::schema::Schema` and `apache_avro::Schema` have similar names, but are actually distinct types
note: `spec::schema::Schema` is defined in the current crate
    --> crates/iceberg/src/spec/schema.rs:47:1
     |
47   | pub struct Schema {
     | ^^^^^^^^^^^^^^^^^
note: `apache_avro::Schema` is defined in crate `apache_avro`
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
     |
78   | pub enum Schema {
     | ^^^^^^^^^^^^^^^
note: function defined here
    --> crates/iceberg/src/avro/schema.rs:222:15
     |
222  | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
     |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
    --> crates/iceberg/src/spec/values.rs:2962:57
     |
2962 |         let avro_schema = schema_to_avro_schema("test", &schema).unwrap();
     |                           ---------------------         ^^^^^^^ expected `apache_avro::Schema`, found `spec::schema::Schema`
     |                           |
     |                           arguments to this function are incorrect
     |
     = note: `spec::schema::Schema` and `apache_avro::Schema` have similar names, but are actually distinct types
note: `spec::schema::Schema` is defined in the current crate
    --> crates/iceberg/src/spec/schema.rs:47:1
     |
47   | pub struct Schema {
     | ^^^^^^^^^^^^^^^^^
note: `apache_avro::Schema` is defined in crate `apache_avro`
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
     |
78   | pub enum Schema {
     | ^^^^^^^^^^^^^^^
note: function defined here
    --> crates/iceberg/src/avro/schema.rs:222:15
     |
222  | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
     |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

warning: `iceberg` (lib test) generated 2 warnings (2 duplicates)
error: could not compile `iceberg` (lib test) due to 33 previous errors; 2 warnings emitted

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0252]: the name `Error` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:30:32
   |
21 | use crate::{Error, ErrorKind, Result};
   |             ----- previous import of the type `Error` here
...
30 | use crate::{ensure_data_valid, Error, ErrorKind, Result};
   |                                ^^^^^--
   |                                |
   |                                `Error` reimported here
   |                                help: remove unnecessary import
   |
   = note: `Error` must be defined only once in the type namespace of this module

error[E0252]: the name `Result` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:30:50
   |
21 | use crate::{Error, ErrorKind, Result};
   |                               ------ previous import of the type `Result` here
...
30 | use crate::{ensure_data_valid, Error, ErrorKind, Result};
   |                                                  ^^^^^^ `Result` reimported here
   |
   = note: `Result` must be defined only once in the type namespace of this module

error[E0252]: the name `PrimitiveType` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:27:67
   |
22 | use crate::spec::{Type, PrimitiveType};
   |                         ------------- previous import of the type `PrimitiveType` here
...
27 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
   |                                                                   ^^^^^^^^^^^^^--
   |                                                                   |
   |                                                                   `PrimitiveType` reimported here
   |                                                                   help: remove unnecessary import
   |
   = note: `PrimitiveType` must be defined only once in the type namespace of this module

error[E0252]: the name `Schema` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:27:82
   |
20 | use apache_avro::schema::{LogicalType, Schema};
   |                                        ------ previous import of the type `Schema` here
...
27 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
   |                                                                                  ^^^^^^ `Schema` reimported here
   |
   = note: `Schema` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
27 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema as OtherSchema,
   |                                                                                  ~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `Type` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:28:32
   |
22 | use crate::spec::{Type, PrimitiveType};
   |                   ---- previous import of the type `Type` here
...
28 |     SchemaVisitor, StructType, Type,
   |                                ^^^^-
   |                                |
   |                                `Type` reimported here
   |                                help: remove unnecessary import
   |
   = note: `Type` must be defined only once in the type namespace of this module

error[E0252]: the name `ErrorKind` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:30:39
   |
21 | use crate::{Error, ErrorKind, Result};
   |                    --------- previous import of the type `ErrorKind` here
...
30 | use crate::{ensure_data_valid, Error, ErrorKind, Result};
   |                                       ^^^^^^^^^--
   |                                       |
   |                                       `ErrorKind` reimported here
   |                                       help: remove unnecessary import
   |
   = note: `ErrorKind` must be defined only once in the type namespace of this module

error[E0449]: visibility qualifiers are not permitted here
   --> crates/iceberg/src/avro/schema.rs:455:1
    |
455 | pub fn primitive(&mut self, schema: &Schema) -> Result<Option<Type>> {
    | ^^^
    |
    = note: trait items always share the visibility of their trait

error[E0432]: unresolved import `apache_avro::schema::LogicalType`
  --> crates/iceberg/src/avro/schema.rs:20:27
   |
20 | use apache_avro::schema::{LogicalType, Schema};
   |                           ^^^^^^^^^^^ no `LogicalType` in `schema`
   |
   = help: consider importing one of these items instead:
           parquet::basic::LogicalType
           parquet::format::LogicalType

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:477:31
    |
477 |             Some(apache_avro::SchemaType::Boolean) => Ok(Some(Type::Primitive(PrimitiveType::Boolean))),
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:478:31
    |
478 |             Some(apache_avro::SchemaType::Int) => Ok(Some(Type::Primitive(PrimitiveType::Int))),
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:479:31
    |
479 |             Some(apache_avro::SchemaType::Long) => Ok(Some(Type::Primitive(PrimitiveType::Long))),
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:480:31
    |
480 |             Some(apache_avro::SchemaType::Float) => Ok(Some(Type::Primitive(PrimitiveType::Float))),
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:481:31
    |
481 |             Some(apache_avro::SchemaType::Double) => Ok(Some(Type::Primitive(PrimitiveType::Double))),
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:482:31
    |
482 |             Some(apache_avro::SchemaType::String) | Some(apache_avro::SchemaType::Enum) => {
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:482:71
    |
482 |             Some(apache_avro::SchemaType::String) | Some(apache_avro::SchemaType::Enum) => {
    |                                                                       ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:485:31
    |
485 |             Some(apache_avro::SchemaType::Fixed) => {
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:495:31
    |
495 |             Some(apache_avro::SchemaType::Bytes) => Ok(Some(Type::Primitive(PrimitiveType::Binary))),
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

error[E0433]: failed to resolve: could not find `SchemaType` in `apache_avro`
   --> crates/iceberg/src/avro/schema.rs:496:31
    |
496 |             Some(apache_avro::SchemaType::Null) => Ok(None),
    |                               ^^^^^^^^^^ could not find `SchemaType` in `apache_avro`

warning: unused imports: `PrimitiveType`, `Schema`, `Type`
  --> crates/iceberg/src/avro/schema.rs:27:67
   |
27 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
   |                                                                   ^^^^^^^^^^^^^  ^^^^^^
28 |     SchemaVisitor, StructType, Type,
   |                                ^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `ErrorKind`, `Error`, `Result`
  --> crates/iceberg/src/avro/schema.rs:30:32
   |
30 | use crate::{ensure_data_valid, Error, ErrorKind, Result};
   |                                ^^^^^  ^^^^^^^^^  ^^^^^^

error[E0053]: method `schema` has an incompatible type for trait
   --> crates/iceberg/src/avro/schema.rs:55:35
    |
55  |     fn schema(&mut self, _schema: &Schema, value: AvroSchemaOrField) -> Result<AvroSchemaOrField> {
    |                                   ^^^^^^^
    |                                   |
    |                                   expected `spec::schema::Schema`, found `apache_avro::Schema`
    |                                   help: change the parameter type to match the trait: `&spec::schema::Schema`
    |
note: type in trait
   --> crates/iceberg/src/spec/schema.rs:403:34
    |
403 |     fn schema(&mut self, schema: &Schema, value: Self::T) -> Result<Self::T>;
    |                                  ^^^^^^^
    = note: expected signature `fn(&mut SchemaToAvroSchema, &spec::schema::Schema, itertools::Either<_, _>) -> std::result::Result<_, _>`
               found signature `fn(&mut SchemaToAvroSchema, &apache_avro::Schema, itertools::Either<_, _>) -> std::result::Result<_, _>`

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/manifest_list.rs:495:61
    |
495 |         Lazy::new(|| schema_to_avro_schema("manifest_file", &V1_SCHEMA).unwrap());
    |                      ---------------------                  ^^^^^^^^^^ expected `&Schema`, found `&Lazy<Schema>`
    |                      |
    |                      arguments to this function are incorrect
    |
    = note: expected reference `&apache_avro::Schema`
               found reference `&once_cell::sync::Lazy<spec::schema::Schema>`
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:222:15
    |
222 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/manifest_list.rs:498:61
    |
498 |         Lazy::new(|| schema_to_avro_schema("manifest_file", &V2_SCHEMA).unwrap());
    |                      ---------------------                  ^^^^^^^^^^ expected `&Schema`, found `&Lazy<Schema>`
    |                      |
    |                      arguments to this function are incorrect
    |
    = note: expected reference `&apache_avro::Schema`
               found reference `&once_cell::sync::Lazy<spec::schema::Schema>`
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:222:15
    |
222 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:227:18
    |
227 |     visit_schema(schema, &mut converter).map(Either::unwrap_left)
    |     ------------ ^^^^^^ expected `spec::schema::Schema`, found `apache_avro::Schema`
    |     |
    |     arguments to this function are incorrect
    |
    = note: `apache_avro::Schema` and `spec::schema::Schema` have similar names, but are actually distinct types
note: `apache_avro::Schema` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
    |
78  | pub enum Schema {
    | ^^^^^^^^^^^^^^^
note: `spec::schema::Schema` is defined in the current crate
   --> crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ^^^^^^^^^^^^^^^^^
note: function defined here
   --> crates/iceberg/src/spec/schema.rs:462:8
    |
462 | pub fn visit_schema<V: SchemaVisitor>(schema: &Schema, visitor: &mut V) -> Result<V::T> {
    |        ^^^^^^^^^^^^                   ---------------

error[E0599]: no method named `get_logical_type` found for reference `&apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:456:44
    |
456 |         if let Some(logical_type) = schema.get_logical_type() {
    |                                            ^^^^^^^^^^^^^^^^ method not found in `&Schema`

error[E0599]: no method named `schema_type` found for reference `&apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:476:22
    |
476 |         match schema.schema_type() {
    |                      ^^^^^^^^^^^ method not found in `&Schema`

error[E0599]: no method named `fixed_size` found for reference `&apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:486:44
    |
486 |                 if let Some(size) = schema.fixed_size() {
    |                                            ^^^^^^^^^^ method not found in `&Schema`

error[E0599]: no variant or associated item named `builder` found for enum `apache_avro::Schema` in the current scope
    --> crates/iceberg/src/avro/schema.rs:513:21
     |
513  |             Schema::builder()
     |                     ^^^^^^^ variant or associated item not found in `Schema`
     |
note: if you're trying to build a new `apache_avro::Schema` consider using one of the following associated functions:
      apache_avro::Schema::parse_str
      apache_avro::Schema::parse_reader
      apache_avro::Schema::parse
      apache_avro::Schema::parse_with_names
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:997:5
     |
997  |     pub fn parse_str(input: &str) -> Result<Schema, Error> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1035 |     pub fn parse_reader(reader: &mut (impl Read + ?Sized)) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1044 |     pub fn parse(value: &Value) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1051 |     pub(crate) fn parse_with_names(value: &Value, names: Names) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/manifest.rs:659:49
    |
659 |         schema_to_avro_schema("manifest_entry", &schema)
    |         ---------------------                   ^^^^^^^ expected `apache_avro::Schema`, found `spec::schema::Schema`
    |         |
    |         arguments to this function are incorrect
    |
    = note: `spec::schema::Schema` and `apache_avro::Schema` have similar names, but are actually distinct types
note: `spec::schema::Schema` is defined in the current crate
   --> crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ^^^^^^^^^^^^^^^^^
note: `apache_avro::Schema` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
    |
78  | pub enum Schema {
    | ^^^^^^^^^^^^^^^
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:222:15
    |
222 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/manifest.rs:693:49
    |
693 |         schema_to_avro_schema("manifest_entry", &schema)
    |         ---------------------                   ^^^^^^^ expected `apache_avro::Schema`, found `spec::schema::Schema`
    |         |
    |         arguments to this function are incorrect
    |
    = note: `spec::schema::Schema` and `apache_avro::Schema` have similar names, but are actually distinct types
note: `spec::schema::Schema` is defined in the current crate
   --> crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ^^^^^^^^^^^^^^^^^
note: `apache_avro::Schema` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
    |
78  | pub enum Schema {
    | ^^^^^^^^^^^^^^^
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:222:15
    |
222 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

Some errors have detailed explanations: E0053, E0252, E0308, E0432, E0433, E0449, E0599.
For more information about an error, try `rustc --explain E0053`.
warning: `iceberg` (lib) generated 2 warnings
error: could not compile `iceberg` (lib) due to 28 previous errors; 2 warnings emitted


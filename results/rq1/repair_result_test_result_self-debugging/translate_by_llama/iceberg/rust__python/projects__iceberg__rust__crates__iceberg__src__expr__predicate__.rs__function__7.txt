Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/expr/predicate.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:112:31
    |
112 |     Self::Bound::new(self.op, bound_term)
    |     ----------------          ^^^^^^^^^^ expected associated type, found `Result<<T as Bind>::Bound, Error>`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected associated type `<T as Bind>::Bound`
                          found enum `std::result::Result<<T as Bind>::Bound, error::Error>`
note: associated function defined here
   --> crates/iceberg/src/expr/predicate.rs:119:19
    |
119 |     pub(crate) fn new(op: PredicateOperator, term: T) -> Self {
    |                   ^^^                        -------
help: use the `?` operator to extract the `std::result::Result<<T as Bind>::Bound, error::Error>` value, propagating a `Result::Err` value to the caller
    |
112 |     Self::Bound::new(self.op, bound_term?)
    |                                         +

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:112:5
    |
110 | fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> crate::Result<Self::Bound> {
    |                                                            -------------------------- expected `std::result::Result<predicate::UnaryExpression<<T as Bind>::Bound>, error::Error>` because of return type
111 |     let bound_term = self.term.bind(schema, case_sensitive);
112 |     Self::Bound::new(self.op, bound_term)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<UnaryExpression<...>, ...>`, found `UnaryExpression<<T as Bind>::Bound>`
    |
    = note: expected enum `std::result::Result<predicate::UnaryExpression<_>, error::Error>`
             found struct `predicate::UnaryExpression<_>`
help: try wrapping the expression in `Ok`
    |
112 |     Ok(Self::Bound::new(self.op, bound_term))
    |     +++                                     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `iceberg` (lib) due to 2 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 2 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:112:31
    |
112 |     Self::Bound::new(self.op, bound_term)
    |     ----------------          ^^^^^^^^^^ expected associated type, found `Result<<T as Bind>::Bound, Error>`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected associated type `<T as Bind>::Bound`
                          found enum `std::result::Result<<T as Bind>::Bound, error::Error>`
note: associated function defined here
   --> crates/iceberg/src/expr/predicate.rs:119:19
    |
119 |     pub(crate) fn new(op: PredicateOperator, term: T) -> Self {
    |                   ^^^                        -------
help: use the `?` operator to extract the `std::result::Result<<T as Bind>::Bound, error::Error>` value, propagating a `Result::Err` value to the caller
    |
112 |     Self::Bound::new(self.op, bound_term?)
    |                                         +

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:112:5
    |
110 | fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> crate::Result<Self::Bound> {
    |                                                            -------------------------- expected `std::result::Result<predicate::UnaryExpression<<T as Bind>::Bound>, error::Error>` because of return type
111 |     let bound_term = self.term.bind(schema, case_sensitive);
112 |     Self::Bound::new(self.op, bound_term)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<UnaryExpression<...>, ...>`, found `UnaryExpression<<T as Bind>::Bound>`
    |
    = note: expected enum `std::result::Result<predicate::UnaryExpression<_>, error::Error>`
             found struct `predicate::UnaryExpression<_>`
help: try wrapping the expression in `Ok`
    |
112 |     Ok(Self::Bound::new(self.op, bound_term))
    |     +++                                     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `iceberg` (lib) due to 2 previous errors


Fail
file path is :
projects/deltachat-core/rust/src/imex.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `Rng` is defined multiple times
  --> src/imex.rs:16:24
   |
4  | use rand::Rng;
   |     --------- previous import of the trait `Rng` here
...
16 | use rand::{thread_rng, Rng};
   |                        ^^^ `Rng` reimported here
   |
   = note: `Rng` must be defined only once in the type namespace of this module

error: unexpected end of macro invocation
   --> src/imex.rs:246:85
    |
246 |                 warn!("Falling back to pseudo-number generation for the setup code.");
    |                                                                                     ^ missing tokens in macro arguments
    |
   ::: src/log.rs:23:1
    |
23  | macro_rules! warn {
    | ----------------- when calling this macro
    |
note: while trying to match `,`
   --> src/log.rs:24:15
    |
24  |     ($ctx:expr, $msg:expr) => {
    |               ^

error[E0432]: unresolved import `log`
 --> src/imex.rs:5:5
  |
5 | use log::warn;
  |     ^^^ help: a similar path exists: `crate::log`
  |
  = note: `use` statements changed in Rust 2018; read more at <https://doc.rust-lang.org/edition-guide/rust-2018/module-system/path-clarity.html>

error[E0659]: `warn` is ambiguous
   --> src/imex.rs:246:17
    |
246 |                 warn!("Falling back to pseudo-number generation for the setup code.");
    |                 ^^^^ ambiguous name
    |
    = note: ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module
note: `warn` could refer to the macro defined here
   --> src/log.rs:23:1
    |
23  | / macro_rules! warn {
24  | |     ($ctx:expr, $msg:expr) => {
25  | |         warn!($ctx, $msg,)
26  | |     };
...   |
34  | |     }};
35  | | }
    | |_^
note: `warn` could also refer to the unresolved item imported here
   --> src/imex.rs:5:5
    |
5   | use log::warn;
    |     ^^^^^^^^^
    = help: use `self::warn` to refer to this unresolved item unambiguously

error[E0659]: `warn` is ambiguous
   --> src/imex.rs:481:21
    |
481 |                     warn!(context, "No file name");
    |                     ^^^^ ambiguous name
    |
    = note: ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module
note: `warn` could refer to the macro defined here
   --> src/log.rs:23:1
    |
23  | / macro_rules! warn {
24  | |     ($ctx:expr, $msg:expr) => {
25  | |         warn!($ctx, $msg,)
26  | |     };
...   |
34  | |     }};
35  | | }
    | |_^
note: `warn` could also refer to the unresolved item imported here
   --> src/imex.rs:5:5
    |
5   | use log::warn;
    |     ^^^^^^^^^
    = help: use `self::warn` to refer to this unresolved item unambiguously

error[E0659]: `warn` is ambiguous
   --> src/log.rs:25:9
    |
25  |         warn!($ctx, $msg,)
    |         ^^^^ ambiguous name
    |
   ::: src/imex.rs:481:21
    |
481 |                     warn!(context, "No file name");
    |                     ------------------------------ in this macro invocation
    |
    = note: ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module
note: `warn` could refer to the macro defined here
   --> src/log.rs:23:1
    |
23  | / macro_rules! warn {
24  | |     ($ctx:expr, $msg:expr) => {
25  | |         warn!($ctx, $msg,)
26  | |     };
...   |
34  | |     }};
35  | | }
    | |_^
note: `warn` could also refer to the unresolved item imported here
   --> src/imex.rs:5:5
    |
5   | use log::warn;
    |     ^^^^^^^^^
    = help: use `self::warn` to refer to this unresolved item unambiguously
    = note: this error originates in the macro `warn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0659]: `warn` is ambiguous
   --> src/imex.rs:660:13
    |
660 |             warn!(
    |             ^^^^ ambiguous name
    |
    = note: ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module
note: `warn` could refer to the macro defined here
   --> src/log.rs:23:1
    |
23  | / macro_rules! warn {
24  | |     ($ctx:expr, $msg:expr) => {
25  | |         warn!($ctx, $msg,)
26  | |     };
...   |
34  | |     }};
35  | | }
    | |_^
note: `warn` could also refer to the unresolved item imported here
   --> src/imex.rs:5:5
    |
5   | use log::warn;
    |     ^^^^^^^^^
    = help: use `self::warn` to refer to this unresolved item unambiguously

error[E0659]: `warn` is ambiguous
   --> src/imex.rs:803:32
    |
803 |                 .map_err(|err| warn!(context, "Vacuum failed, exporting anyway {err}"))
    |                                ^^^^ ambiguous name
    |
    = note: ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module
note: `warn` could refer to the macro defined here
   --> src/log.rs:23:1
    |
23  | / macro_rules! warn {
24  | |     ($ctx:expr, $msg:expr) => {
25  | |         warn!($ctx, $msg,)
26  | |     };
...   |
34  | |     }};
35  | | }
    | |_^
note: `warn` could also refer to the unresolved item imported here
   --> src/imex.rs:5:5
    |
5   | use log::warn;
    |     ^^^^^^^^^
    = help: use `self::warn` to refer to this unresolved item unambiguously

error[E0659]: `warn` is ambiguous
   --> src/log.rs:25:9
    |
25  |         warn!($ctx, $msg,)
    |         ^^^^ ambiguous name
    |
   ::: src/imex.rs:803:32
    |
803 |                 .map_err(|err| warn!(context, "Vacuum failed, exporting anyway {err}"))
    |                                ------------------------------------------------------- in this macro invocation
    |
    = note: ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module
note: `warn` could refer to the macro defined here
   --> src/log.rs:23:1
    |
23  | / macro_rules! warn {
24  | |     ($ctx:expr, $msg:expr) => {
25  | |         warn!($ctx, $msg,)
26  | |     };
...   |
34  | |     }};
35  | | }
    | |_^
note: `warn` could also refer to the unresolved item imported here
   --> src/imex.rs:5:5
    |
5   | use log::warn;
    |     ^^^^^^^^^
    = help: use `self::warn` to refer to this unresolved item unambiguously
    = note: this error originates in the macro `warn` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused import: `rand::Rng`
 --> src/imex.rs:4:5
  |
4 | use rand::Rng;
  |     ^^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `Rng`
  --> src/imex.rs:16:24
   |
16 | use rand::{thread_rng, Rng};
   |                        ^^^

error[E0659]: `warn` is ambiguous
   --> src/imex.rs:246:17
    |
246 |                 warn!("Falling back to pseudo-number generation for the setup code.");
    |                 ^^^^ ambiguous name
    |
    = note: ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module
note: `warn` could refer to the macro defined here
   --> src/log.rs:23:1
    |
23  | / macro_rules! warn {
24  | |     ($ctx:expr, $msg:expr) => {
25  | |         warn!($ctx, $msg,)
26  | |     };
...   |
34  | |     }};
35  | | }
    | |_^
note: `warn` could also refer to the macro imported here
   --> src/imex.rs:5:5
    |
5   | use log::warn;
    |     ^^^^^^^^^
    = help: use `self::warn` to refer to this macro unambiguously

error[E0659]: `warn` is ambiguous
   --> src/imex.rs:481:21
    |
481 |                     warn!(context, "No file name");
    |                     ^^^^ ambiguous name
    |
    = note: ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module
note: `warn` could refer to the macro defined here
   --> src/log.rs:23:1
    |
23  | / macro_rules! warn {
24  | |     ($ctx:expr, $msg:expr) => {
25  | |         warn!($ctx, $msg,)
26  | |     };
...   |
34  | |     }};
35  | | }
    | |_^
note: `warn` could also refer to the macro imported here
   --> src/imex.rs:5:5
    |
5   | use log::warn;
    |     ^^^^^^^^^
    = help: use `self::warn` to refer to this macro unambiguously

error[E0659]: `warn` is ambiguous
   --> src/log.rs:25:9
    |
25  |         warn!($ctx, $msg,)
    |         ^^^^ ambiguous name
    |
   ::: src/imex.rs:481:21
    |
481 |                     warn!(context, "No file name");
    |                     ------------------------------ in this macro invocation
    |
    = note: ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module
note: `warn` could refer to the macro defined here
   --> src/log.rs:23:1
    |
23  | / macro_rules! warn {
24  | |     ($ctx:expr, $msg:expr) => {
25  | |         warn!($ctx, $msg,)
26  | |     };
...   |
34  | |     }};
35  | | }
    | |_^
note: `warn` could also refer to the macro imported here
   --> src/imex.rs:5:5
    |
5   | use log::warn;
    |     ^^^^^^^^^
    = help: use `self::warn` to refer to this macro unambiguously
    = note: this error originates in the macro `warn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0659]: `warn` is ambiguous
   --> src/imex.rs:660:13
    |
660 |             warn!(
    |             ^^^^ ambiguous name
    |
    = note: ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module
note: `warn` could refer to the macro defined here
   --> src/log.rs:23:1
    |
23  | / macro_rules! warn {
24  | |     ($ctx:expr, $msg:expr) => {
25  | |         warn!($ctx, $msg,)
26  | |     };
...   |
34  | |     }};
35  | | }
    | |_^
note: `warn` could also refer to the macro imported here
   --> src/imex.rs:5:5
    |
5   | use log::warn;
    |     ^^^^^^^^^
    = help: use `self::warn` to refer to this macro unambiguously

error[E0659]: `warn` is ambiguous
   --> src/imex.rs:803:32
    |
803 |                 .map_err(|err| warn!(context, "Vacuum failed, exporting anyway {err}"))
    |                                ^^^^ ambiguous name
    |
    = note: ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module
note: `warn` could refer to the macro defined here
   --> src/log.rs:23:1
    |
23  | / macro_rules! warn {
24  | |     ($ctx:expr, $msg:expr) => {
25  | |         warn!($ctx, $msg,)
26  | |     };
...   |
34  | |     }};
35  | | }
    | |_^
note: `warn` could also refer to the macro imported here
   --> src/imex.rs:5:5
    |
5   | use log::warn;
    |     ^^^^^^^^^
    = help: use `self::warn` to refer to this macro unambiguously

error[E0659]: `warn` is ambiguous
   --> src/log.rs:25:9
    |
25  |         warn!($ctx, $msg,)
    |         ^^^^ ambiguous name
    |
   ::: src/imex.rs:803:32
    |
803 |                 .map_err(|err| warn!(context, "Vacuum failed, exporting anyway {err}"))
    |                                ------------------------------------------------------- in this macro invocation
    |
    = note: ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module
note: `warn` could refer to the macro defined here
   --> src/log.rs:23:1
    |
23  | / macro_rules! warn {
24  | |     ($ctx:expr, $msg:expr) => {
25  | |         warn!($ctx, $msg,)
26  | |     };
...   |
34  | |     }};
35  | | }
    | |_^
note: `warn` could also refer to the macro imported here
   --> src/imex.rs:5:5
    |
5   | use log::warn;
    |     ^^^^^^^^^
    = help: use `self::warn` to refer to this macro unambiguously
    = note: this error originates in the macro `warn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `try_fill_bytes` found for struct `ThreadRng` in the current scope
   --> src/imex.rs:245:29
    |
245 |             if thread_rng().try_fill_bytes(&mut random_val) {
    |                             ^^^^^^^^^^^^^^ method not found in `ThreadRng`
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
4   + use rand::RngCore;
    |

error[E0599]: no method named `fill_bytes` found for struct `ThreadRng` in the current scope
   --> src/imex.rs:247:30
    |
247 |                 thread_rng().fill_bytes(&mut random_val);
    |                              ^^^^^^^^^^ method not found in `ThreadRng`
    |
   ::: /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.6.4/src/lib.rs:171:8
    |
171 |     fn fill_bytes(&mut self, dest: &mut [u8]);
    |        ---------- the method is available for `ThreadRng` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
4   + use rand::RngCore;
    |

warning: unreachable statement
   --> src/imex.rs:250:9
    |
244 | /         loop {
245 | |             if thread_rng().try_fill_bytes(&mut random_val) {
246 | |                 warn!("Falling back to pseudo-number generation for the setup code.");
247 | |                 thread_rng().fill_bytes(&mut random_val);
248 | |             }
249 | |         }
    | |_________- any code following this expression is unreachable
250 |           random_val %= 10000;
    |           ^^^^^^^^^^^^^^^^^^^^ unreachable statement
    |
    = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`

Some errors have detailed explanations: E0252, E0432, E0599, E0659.
For more information about an error, try `rustc --explain E0252`.
warning: `deltachat` (lib) generated 3 warnings
error: could not compile `deltachat` (lib) due to 11 previous errors; 3 warnings emitted
warning: build failed, waiting for other jobs to finish...
Some errors have detailed explanations: E0252, E0599, E0659.
warning: `deltachat` (lib test) generated 3 warnings (3 duplicates)
error: could not compile `deltachat` (lib test) due to 10 previous errors; 3 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


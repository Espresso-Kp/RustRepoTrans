Fail
file path is :
projects/deltachat-core/rust/src/imex.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error: prefix `running` is unknown
   --> src/imex.rs:773:38
    |
773 |         "cannot export backup, IO is running"
    |                                      ^^^^^^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
773 |         "cannot export backup, IO is running "
    |                                             +

error: prefix `overflow` is unknown
   --> src/imex.rs:775:68
    |
775 |     let timestamp = timestamp.try_into().context("32-bit UNIX time overflow")?;
    |                                                                    ^^^^^^^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
775 |     let timestamp = timestamp.try_into().context("32-bit UNIX time overflow ")?;
    |                                                                            +

error: prefix `unicode` is unknown
   --> src/imex.rs:780:56
    |
780 |         .with_context(|| format!("path {} is not valid unicode", dest.display()))?;
    |                                                        ^^^^^^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
780 |         .with_context(|| format!("path {} is not valid unicode ", dest.display()))?;
    |                                                               +

error: prefix `database` is unknown
   --> src/imex.rs:794:51
    |
794 |                 .context("failed to attach backup database")?;
    |                                                   ^^^^^^^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
794 |                 .context("failed to attach backup database ")?;
    |                                                           +

error: character literal may only contain one codepoint
   --> src/imex.rs:796:53
    |
796 |                 .query_row("SELECT sqlcipher_export('backup')", [], |_row| Ok(()))
    |                                                     ^^^^^^^^
    |
help: if you meant to write a `str` literal, use double quotes
    |
796 |                 .query_row("SELECT sqlcipher_export("backup")", [], |_row| Ok(()))
    |                                                     ~~~~~~~~

error: prefix `database` is unknown
   --> src/imex.rs:797:63
    |
797 |                 .context("failed to export to attached backup database");
    |                                                               ^^^^^^^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
797 |                 .context("failed to export to attached backup database ");
    |                                                                       +

error: character literal may only contain one codepoint
   --> src/imex.rs:799:67
    |
799 |                 "UPDATE backup.config SET value='0' WHERE keyname='verified_one_on_one_chats';",
    |                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: if you meant to write a `str` literal, use double quotes
    |
799 |                 "UPDATE backup.config SET value='0' WHERE keyname="verified_one_on_one_chats";",
    |                                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~

error: prefix `backup` is unknown
   --> src/imex.rs:803:43
    |
803 |             conn.execute("DETACH DATABASE backup", [])
    |                                           ^^^^^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
803 |             conn.execute("DETACH DATABASE backup ", [])
    |                                                 +

error: prefix `database` is unknown
   --> src/imex.rs:804:51
    |
804 |                 .context("failed to detach backup database")?;
    |                                                   ^^^^^^^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
804 |                 .context("failed to detach backup database ")?;
    |                                                           +

error: prefix `title` is unknown
   --> src/imex.rs:830:63
    |
830 |         assert!(msg.contains("<title>Autocrypt Setup Message</title"));
    |                                                               ^^^^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
830 |         assert!(msg.contains("<title>Autocrypt Setup Message</title "));
    |                                                                    +

error: prefix `to` is unknown
   --> src/imex.rs:832:75
    |
832 |         assert!(msg.contains("<p>This is the Autocrypt Setup Message used to"));
    |                                                                           ^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
832 |         assert!(msg.contains("<p>This is the Autocrypt Setup Message used to "));
    |                                                                             +

error: unknown start of token: \
   --> src/imex.rs:833:58
    |
833 |         assert!(msg.contains("-----BEGIN PGP MESSAGE-----\r\n"));
    |                                                          ^

error: unknown start of token: \
   --> src/imex.rs:833:60
    |
833 |         assert!(msg.contains("-----BEGIN PGP MESSAGE-----\r\n"));
    |                                                            ^

error: prefix `n` is unknown
   --> src/imex.rs:833:61
    |
833 |         assert!(msg.contains("-----BEGIN PGP MESSAGE-----\r\n"));
    |                                                             ^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
833 |         assert!(msg.contains("-----BEGIN PGP MESSAGE-----\r\n "));
    |                                                              +

error: unknown start of token: \
   --> src/imex.rs:834:60
    |
834 |         assert!(msg.contains("Passphrase-Format: numeric9x4\r\n"));
    |                                                            ^

error: unknown start of token: \
   --> src/imex.rs:834:62
    |
834 |         assert!(msg.contains("Passphrase-Format: numeric9x4\r\n"));
    |                                                              ^

error: prefix `n` is unknown
   --> src/imex.rs:834:63
    |
834 |         assert!(msg.contains("Passphrase-Format: numeric9x4\r\n"));
    |                                                               ^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
834 |         assert!(msg.contains("Passphrase-Format: numeric9x4\r\n "));
    |                                                                +

error: unknown start of token: \
   --> src/imex.rs:835:51
    |
835 |         assert!(msg.contains("Passphrase-Begin: he\r\n"));
    |                                                   ^

error: unknown start of token: \
   --> src/imex.rs:835:53
    |
835 |         assert!(msg.contains("Passphrase-Begin: he\r\n"));
    |                                                     ^

error: prefix `n` is unknown
   --> src/imex.rs:835:54
    |
835 |         assert!(msg.contains("Passphrase-Begin: he\r\n"));
    |                                                      ^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
835 |         assert!(msg.contains("Passphrase-Begin: he\r\n "));
    |                                                       +

error: unknown start of token: \
   --> src/imex.rs:836:56
    |
836 |         assert!(msg.contains("-----END PGP MESSAGE-----\r\n"));
    |                                                        ^

error: unknown start of token: \
   --> src/imex.rs:836:58
    |
836 |         assert!(msg.contains("-----END PGP MESSAGE-----\r\n"));
    |                                                          ^

error: prefix `n` is unknown
   --> src/imex.rs:836:59
    |
836 |         assert!(msg.contains("-----END PGP MESSAGE-----\r\n"));
    |                                                           ^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
836 |         assert!(msg.contains("-----END PGP MESSAGE-----\r\n "));
    |                                                            +

error: unknown start of token: \
   --> src/imex.rs:846:69
    |
846 |         t.set_stock_translation(StockMessage::AcSetupMsgBody, "hello\r\nthere".to_string())
    |                                                                     ^

error: unknown start of token: \
   --> src/imex.rs:846:71
    |
846 |         t.set_stock_translation(StockMessage::AcSetupMsgBody, "hello\r\nthere".to_string())
    |                                                                       ^

error: prefix `nthere` is unknown
   --> src/imex.rs:846:72
    |
846 |         t.set_stock_translation(StockMessage::AcSetupMsgBody, "hello\r\nthere".to_string())
    |                                                                        ^^^^^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
846 |         t.set_stock_translation(StockMessage::AcSetupMsgBody, "hello\r\nthere ".to_string())
    |                                                                              +

error: prefix `BLOBDIR` is unknown
   --> src/imex.rs:873:35
    |
873 |         let blobdir = Path::new("$BLOBDIR");
    |                                   ^^^^^^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
873 |         let blobdir = Path::new("$BLOBDIR ");
    |                                          +

error: prefix `asc` is unknown
   --> src/imex.rs:878:62
    |
878 |         let filename = format!("{blobdir}/public-key-default.asc");
    |                                                              ^^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
878 |         let filename = format!("{blobdir}/public-key-default.asc ");
    |                                                                 +

error: prefix `BLOBDIR` is unknown
   --> src/imex.rs:888:35
    |
888 |         let blobdir = Path::new("$BLOBDIR");
    |                                   ^^^^^^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
888 |         let blobdir = Path::new("$BLOBDIR ");
    |                                          +

error: prefix `asc` is unknown
   --> src/imex.rs:893:63
    |
893 |         let filename = format!("{blobdir}/private-key-default.asc");
    |                                                               ^^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
893 |         let filename = format!("{blobdir}/private-key-default.asc ");
    |                                                                  +

error: prefix `asc` is unknown
   --> src/imex.rs:927:67
    |
927 |         let keyfile = export_dir.path().join("private-key-default.asc");
    |                                                                   ^^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
927 |         let keyfile = export_dir.path().join("private-key-default.asc ");
    |                                                                      +

error: prefix `key` is unknown
   --> src/imex.rs:938:65
    |
938 |         let sent = alice.send_text(chat.id, "Encrypted with old key").await;
    |                                                                 ^^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
938 |         let sent = alice.send_text(chat.id, "Encrypted with old key ").await;
    |                                                                    +

error: prefix `org` is unknown
   --> src/imex.rs:942:45
    |
942 |         alice.configure_addr("alice@example.org").await;
    |                                             ^^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
942 |         alice.configure_addr("alice@example.org ").await;
    |                                                +

error: prefix `key` is unknown
   --> src/imex.rs:960:56
    |
960 |         assert_eq!(msg.get_text(), "Encrypted with old key");
    |                                                        ^^^ unknown prefix
    |
    = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
    |
960 |         assert_eq!(msg.get_text(), "Encrypted with old key ");
    |                                                           +

error: prefix `org` is unknown
    --> src/imex.rs:1019:37
     |
1019 |                 Some("alice@example.org".to_string())
     |                                     ^^^ unknown prefix
     |
     = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
     |
1019 |                 Some("alice@example.org ".to_string())
     |                                        +

error: unknown start of token: \
    --> src/imex.rs:1083:35
     |
1083 |             normalize_setup_code("\t1 2 3422343234- foo bar-- 423-45 2 34 6234723482349234      ");
     |                                   ^

error: prefix `key` is unknown
    --> src/imex.rs:1088:32
     |
1088 |     with an "encrypted session key", see RFC 4880.  The code is in S_EM_SETUPCODE */
     |                                ^^^ unknown prefix
     |
     = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
     |
1088 |     with an "encrypted session key ", see RFC 4880.  The code is in S_EM_SETUPCODE */
     |                                   +

error: prefix `txt` is unknown
    --> src/imex.rs:1090:76
     |
1090 |     const S_EM_SETUPFILE: &str = include_str!("../test-data/message/stress.txt");
     |                                                                            ^^^ unknown prefix
     |
     = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
     |
1090 |     const S_EM_SETUPFILE: &str = include_str!("../test-data/message/stress.txt ");
     |                                                                               +

error: prefix `txt` is unknown
    --> src/imex.rs:1094:70
     |
1094 |         include_str!("../test-data/message/plaintext-autocrypt-setup.txt");
     |                                                                      ^^^ unknown prefix
     |
     = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
     |
1094 |         include_str!("../test-data/message/plaintext-autocrypt-setup.txt ");
     |                                                                         +

error: prefix `packets` is unknown
    --> src/imex.rs:1123:81
     |
1123 |     /// "Implementations MUST NOT use plaintext in Symmetrically Encrypted Data packets".
     |                                                                                 ^^^^^^^ unknown prefix
     |
     = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
     |
1123 |     /// "Implementations MUST NOT use plaintext in Symmetrically Encrypted Data packets ".
     |                                                                                        +

error: prefix `org` is unknown
    --> src/imex.rs:1148:46
     |
1148 |         alice2.configure_addr("alice@example.org").await;
     |                                              ^^^ unknown prefix
     |
     = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
     |
1148 |         alice2.configure_addr("alice@example.org ").await;
     |                                                 +

error: prefix `org` is unknown
    --> src/imex.rs:1199:50
     |
1199 |         t.configure_addr("autocrypt@nine.testrun.org").await;
     |                                                  ^^^ unknown prefix
     |
     = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
     |
1199 |         t.configure_addr("autocrypt@nine.testrun.org ").await;
     |                                                     +

error: prefix `eml` is unknown
    --> src/imex.rs:1201:84
     |
1201 |         let raw = include_bytes!("../test-data/message/k-9-autocrypt-setup-message.eml");
     |                                                                                    ^^^ unknown prefix
     |
     = note: prefixed identifiers and literals are reserved since Rust 2021
help: consider inserting whitespace here
     |
1201 |         let raw = include_bytes!("../test-data/message/k-9-autocrypt-setup-message.eml ");
     |                                                                                       +

error[E0765]: unterminated double quote string
    --> src/imex.rs:1204:71
     |
1204 |           let setup_code = "0655-9868-8252-5455-4232-5158-1237-5333-2638";
     |  _______________________________________________________________________^
1205 | |         continue_key_transfer(t, *received.msg_ids.last().unwrap(), setup_code).await?;
1206 | |
1207 | |         Ok(())
1208 | |     }
1209 | | }
     | |__^

For more information about this error, try `rustc --explain E0765`.
error: could not compile `deltachat` (lib) due to 44 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 44 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


Fail
file path is :
projects/iceberg/rust/crates/catalog/glue/src/catalog.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-catalog-hms v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/hms)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
warning: unused import: `from_aws_build_error`
  --> crates/catalog/glue/src/catalog.rs:31:20
   |
31 | use crate::error::{from_aws_build_error, from_aws_sdk_error};
   |                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0599]: no variant or associated item named `NamespaceDoesNotExist` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:523:24
    |
523 |             ErrorKind::NamespaceDoesNotExist,
    |                        ^^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:526:17
    |
526 |                 src, dest, dest.namespace()
    |                 ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:526:22
    |
526 |                 src, dest, dest.namespace()
    |                      ^^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `NamespaceIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:526:28
    |
526 |                 src, dest, dest.namespace()
    |                            ^^^^^^^^^^^^^^^^ `NamespaceIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `NamespaceIdent`, which is required by `&NamespaceIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no variant or associated item named `TableDoesNotExist` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:550:28
    |
550 |                 ErrorKind::TableDoesNotExist,
    |                            ^^^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:553:21
    |
553 |                     src
    |                     ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `owner` found for enum `std::option::Option` in the current scope
   --> crates/catalog/glue/src/catalog.rs:560:26
    |
560 |         .owner(src_table.owner().map(|s| s.to_string()))
    |                          ^^^^^ method not found in `Option<&Table>`
    |
note: the method `owner` exists on the type `&aws_sdk_glue::types::Table`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table.rs:86:5
    |
86  |     pub fn owner(&self) -> ::std::option::Option<&str> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `&aws_sdk_glue::types::Table` value, panicking if the value is an `Option::None`
    |
560 |         .owner(src_table.expect("REASON").owner().map(|s| s.to_string()))
    |                         +++++++++++++++++

error[E0599]: no method named `parameters` found for enum `std::option::Option` in the current scope
   --> crates/catalog/glue/src/catalog.rs:561:31
    |
561 |         .parameters(src_table.parameters().cloned())
    |                               ^^^^^^^^^^ method not found in `Option<&Table>`
    |
note: the method `parameters` exists on the type `&aws_sdk_glue::types::Table`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table.rs:149:5
    |
149 |     pub fn parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `&aws_sdk_glue::types::Table` value, panicking if the value is an `Option::None`
    |
561 |         .parameters(src_table.expect("REASON").parameters().cloned())
    |                              +++++++++++++++++

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:561:10
    |
561 |         .parameters(src_table.parameters().cloned())
    |          ^^^^^^^^^^--------------------------------- an argument is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:12
    |
375 |     pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>)...
    |            ^^^^^^^^^^
help: provide the argument
    |
561 |         .parameters(src_table.parameters().cloned(), /* v */)
    |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `storage_descriptor` found for enum `std::option::Option` in the current scope
   --> crates/catalog/glue/src/catalog.rs:562:39
    |
562 |         .storage_descriptor(src_table.storage_descriptor().cloned());
    |                                       ^^^^^^^^^^^^^^^^^^ method not found in `Option<&Table>`
    |
note: the method `storage_descriptor` exists on the type `&aws_sdk_glue::types::Table`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table.rs:110:5
    |
110 |     pub fn storage_descriptor(&self) -> ::std::option::Option<&crate::types::StorageDescriptor> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `&aws_sdk_glue::types::Table` value, panicking if the value is an `Option::None`
    |
562 |         .storage_descriptor(src_table.expect("REASON").storage_descriptor().cloned());
    |                                      +++++++++++++++++

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:569:22
    |
569 |         .table_input(table_input_builder.name(to_table_name).build());
    |          ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `TableInput`, found `Result<TableInput, BuildError>`
    |          |
    |          arguments to this method are incorrect
    |
    = note: expected struct `TableInput`
                 found enum `Result<TableInput, aws_sdk_glue::error::BuildError>`
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/operation/create_table/builders.rs:140:12
    |
140 |     pub fn table_input(mut self, input: crate::types::TableInput) -> Self {
    |            ^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `Result<TableInput, aws_sdk_glue::error::BuildError>` value, panicking if the value is a `Result::Err`
    |
569 |         .table_input(table_input_builder.name(to_table_name).build().expect("REASON"));
    |                                                                     +++++++++++++++++

Some errors have detailed explanations: E0061, E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib) generated 1 warning
error: could not compile `iceberg-catalog-glue` (lib) due to 11 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
warning: unused import: `from_aws_build_error`
  --> crates/catalog/glue/src/catalog.rs:31:20
   |
31 | use crate::error::{from_aws_build_error, from_aws_sdk_error};
   |                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0599]: no variant or associated item named `NamespaceDoesNotExist` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:523:24
    |
523 |             ErrorKind::NamespaceDoesNotExist,
    |                        ^^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:526:17
    |
526 |                 src, dest, dest.namespace()
    |                 ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:526:22
    |
526 |                 src, dest, dest.namespace()
    |                      ^^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `NamespaceIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:526:28
    |
526 |                 src, dest, dest.namespace()
    |                            ^^^^^^^^^^^^^^^^ `NamespaceIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `NamespaceIdent`, which is required by `&NamespaceIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no variant or associated item named `TableDoesNotExist` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:550:28
    |
550 |                 ErrorKind::TableDoesNotExist,
    |                            ^^^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:553:21
    |
553 |                     src
    |                     ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `owner` found for enum `std::option::Option` in the current scope
   --> crates/catalog/glue/src/catalog.rs:560:26
    |
560 |         .owner(src_table.owner().map(|s| s.to_string()))
    |                          ^^^^^ method not found in `Option<&Table>`
    |
note: the method `owner` exists on the type `&aws_sdk_glue::types::Table`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table.rs:86:5
    |
86  |     pub fn owner(&self) -> ::std::option::Option<&str> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `&aws_sdk_glue::types::Table` value, panicking if the value is an `Option::None`
    |
560 |         .owner(src_table.expect("REASON").owner().map(|s| s.to_string()))
    |                         +++++++++++++++++

error[E0599]: no method named `parameters` found for enum `std::option::Option` in the current scope
   --> crates/catalog/glue/src/catalog.rs:561:31
    |
561 |         .parameters(src_table.parameters().cloned())
    |                               ^^^^^^^^^^ method not found in `Option<&Table>`
    |
note: the method `parameters` exists on the type `&aws_sdk_glue::types::Table`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table.rs:149:5
    |
149 |     pub fn parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `&aws_sdk_glue::types::Table` value, panicking if the value is an `Option::None`
    |
561 |         .parameters(src_table.expect("REASON").parameters().cloned())
    |                              +++++++++++++++++

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:561:10
    |
561 |         .parameters(src_table.parameters().cloned())
    |          ^^^^^^^^^^--------------------------------- an argument is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:12
    |
375 |     pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>)...
    |            ^^^^^^^^^^
help: provide the argument
    |
561 |         .parameters(src_table.parameters().cloned(), /* v */)
    |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `storage_descriptor` found for enum `std::option::Option` in the current scope
   --> crates/catalog/glue/src/catalog.rs:562:39
    |
562 |         .storage_descriptor(src_table.storage_descriptor().cloned());
    |                                       ^^^^^^^^^^^^^^^^^^ method not found in `Option<&Table>`
    |
note: the method `storage_descriptor` exists on the type `&aws_sdk_glue::types::Table`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table.rs:110:5
    |
110 |     pub fn storage_descriptor(&self) -> ::std::option::Option<&crate::types::StorageDescriptor> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `&aws_sdk_glue::types::Table` value, panicking if the value is an `Option::None`
    |
562 |         .storage_descriptor(src_table.expect("REASON").storage_descriptor().cloned());
    |                                      +++++++++++++++++

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:569:22
    |
569 |         .table_input(table_input_builder.name(to_table_name).build());
    |          ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `TableInput`, found `Result<TableInput, BuildError>`
    |          |
    |          arguments to this method are incorrect
    |
    = note: expected struct `TableInput`
                 found enum `Result<TableInput, aws_sdk_glue::error::BuildError>`
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/operation/create_table/builders.rs:140:12
    |
140 |     pub fn table_input(mut self, input: crate::types::TableInput) -> Self {
    |            ^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `Result<TableInput, aws_sdk_glue::error::BuildError>` value, panicking if the value is a `Result::Err`
    |
569 |         .table_input(table_input_builder.name(to_table_name).build().expect("REASON"));
    |                                                                     +++++++++++++++++

Some errors have detailed explanations: E0061, E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib) generated 1 warning
error: could not compile `iceberg-catalog-glue` (lib) due to 11 previous errors; 1 warning emitted


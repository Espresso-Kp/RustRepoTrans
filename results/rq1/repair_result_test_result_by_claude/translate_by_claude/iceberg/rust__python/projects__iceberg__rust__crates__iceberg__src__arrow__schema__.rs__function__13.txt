Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/schema.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0428]: the name `field` is defined multiple times
   --> crates/iceberg/src/arrow/schema.rs:314:1
    |
289 | fn field(&mut self, field: &Field) -> Result<()> {
    | ------------------------------------------------ previous definition of the value `field` here
...
314 | fn field(&mut self, field: &Field) -> Result<NestedFieldRef> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `field` redefined here
    |
    = note: `field` must be defined only once in the value namespace of this module

error: `self` parameter is only allowed in associated functions
   --> crates/iceberg/src/arrow/schema.rs:289:10
    |
289 | fn field(&mut self, field: &Field) -> Result<()> {
    |          ^^^^^^^^^ not semantically valid as function parameter
    |
    = note: associated functions are those in `impl` or `trait` definitions

error: `self` parameter is only allowed in associated functions
   --> crates/iceberg/src/arrow/schema.rs:295:14
    |
295 | fn end_visit(&mut self) -> Result<Self::U> {
    |              ^^^^^^^^^ not semantically valid as function parameter
    |
    = note: associated functions are those in `impl` or `trait` definitions

error: `self` parameter is only allowed in associated functions
   --> crates/iceberg/src/arrow/schema.rs:298:11
    |
298 | fn schema(&mut self, schema: &ArrowSchema, results: Vec<Result<NestedFieldRef>>) -> Result<Schema> {
    |           ^^^^^^^^^ not semantically valid as function parameter
    |
    = note: associated functions are those in `impl` or `trait` definitions

error: `self` parameter is only allowed in associated functions
   --> crates/iceberg/src/arrow/schema.rs:314:10
    |
314 | fn field(&mut self, field: &Field) -> Result<NestedFieldRef> {
    |          ^^^^^^^^^ not semantically valid as function parameter
    |
    = note: associated functions are those in `impl` or `trait` definitions

error[E0407]: method `field` is not a member of trait `ArrowSchemaVisitor`
   --> crates/iceberg/src/arrow/schema.rs:215:9
    |
215 | /         fn field(&mut self, field: &Field) -> Result<()> {
216 | |             if field.metadata().contains_key(PARQUET_FIELD_ID_META_KEY) {
217 | |                 self.has_ids = true;
218 | |             }
219 | |             Ok(())
220 | |         }
    | |_________^ not a member of trait `ArrowSchemaVisitor`

error[E0407]: method `end_visit` is not a member of trait `ArrowSchemaVisitor`
   --> crates/iceberg/src/arrow/schema.rs:222:9
    |
222 | /         fn end_visit(&mut self) -> Result<Self::U> {
223 | |             Ok(self.has_ids)
224 | |         }
    | |_________^ not a member of trait `ArrowSchemaVisitor`

error[E0407]: method `field` is not a member of trait `ArrowSchemaVisitor`
   --> crates/iceberg/src/arrow/schema.rs:259:9
    |
259 | /         fn field(&mut self, field: &Field) -> Result<NestedFieldRef> {
260 | |             // Implement field conversion logic here
261 | |             // This is a placeholder and needs to be implemented properly
262 | |             unimplemented!("Field conversion not implemented")
263 | |         }
    | |_________^ not a member of trait `ArrowSchemaVisitor`

error[E0412]: cannot find type `SchemaId` in this scope
   --> crates/iceberg/src/arrow/schema.rs:228:20
    |
228 |         schema_id: SchemaId,
    |                    ^^^^^^^^
    |
   ::: crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ----------------- similarly named struct `Schema` defined here
    |
help: a struct with a similar name exists
    |
228 |         schema_id: Schema,
    |                    ~~~~~~
help: consider importing this type alias through its public re-export
    |
20  + use crate::spec::SchemaId;
    |

error[E0412]: cannot find type `HashSet` in this scope
   --> crates/iceberg/src/arrow/schema.rs:231:31
    |
231 |         identifier_field_ids: HashSet<i32>,
    |                               ^^^^^^^ not found in this scope
    |
help: consider importing this struct
    |
20  + use std::collections::HashSet;
    |

error[E0412]: cannot find type `BiHashMap` in this scope
   --> crates/iceberg/src/arrow/schema.rs:232:22
    |
232 |         alias_to_id: BiHashMap<String, i32>,
    |                      ^^^^^^^^^
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/collections/hash/map.rs:213:1
    |
    = note: similarly named struct `HashMap` defined here
    |
help: a struct with a similar name exists
    |
232 |         alias_to_id: HashMap<String, i32>,
    |                      ~~~~~~~
help: consider importing this struct
    |
20  + use bimap::BiHashMap;
    |

error[E0433]: failed to resolve: use of undeclared type `SchemaId`
   --> crates/iceberg/src/arrow/schema.rs:271:24
    |
271 |             schema_id: SchemaId::new(0),
    |                        ^^^^^^^^ use of undeclared type `SchemaId`
    |
help: a struct with a similar name exists
    |
271 |             schema_id: Schema::new(0),
    |                        ~~~~~~
help: consider importing this type alias through its public re-export
    |
20  + use crate::spec::SchemaId;
    |

error[E0433]: failed to resolve: use of undeclared type `HashSet`
   --> crates/iceberg/src/arrow/schema.rs:274:35
    |
274 |             identifier_field_ids: HashSet::new(),
    |                                   ^^^^^^^ use of undeclared type `HashSet`
    |
help: consider importing this struct
    |
20  + use std::collections::HashSet;
    |

error[E0433]: failed to resolve: use of undeclared type `BiHashMap`
   --> crates/iceberg/src/arrow/schema.rs:275:26
    |
275 |             alias_to_id: BiHashMap::new(),
    |                          ^^^^^^^^^ use of undeclared type `BiHashMap`
    |
help: a struct with a similar name exists
    |
275 |             alias_to_id: HashMap::new(),
    |                          ~~~~~~~
help: consider importing this struct
    |
20  + use bimap::BiHashMap;
    |

error[E0046]: not all trait items implemented, missing: `T`, `schema`, `struct`, `list`, `map`, `primitive`
   --> crates/iceberg/src/arrow/schema.rs:212:5
    |
42  |     type T;
    |     ------ `T` from trait
...
88  |     fn schema(&mut self, schema: &ArrowSchema, values: Vec<Self::T>) -> Result<Self::U>;
    |     ------------------------------------------------------------------------------------ `schema` from trait
...
91  |     fn r#struct(&mut self, fields: &Fields, results: Vec<Self::T>) -> Result<Self::T>;
    |     ---------------------------------------------------------------------------------- `r#struct` from trait
...
94  |     fn list(&mut self, list: &DataType, value: Self::T) -> Result<Self::T>;
    |     ----------------------------------------------------------------------- `list` from trait
...
97  |     fn map(&mut self, map: &DataType, key_value: Self::T, value: Self::T) -> Result<Self::T>;
    |     ----------------------------------------------------------------------------------------- `map` from trait
...
100 |     fn primitive(&mut self, p: &DataType) -> Result<Self::T>;
    |     --------------------------------------------------------- `primitive` from trait
...
212 |     impl ArrowSchemaVisitor for HasIds {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `T`, `schema`, `struct`, `list`, `map`, `primitive` in implementation

error[E0046]: not all trait items implemented, missing: `T`, `struct`, `list`, `map`, `primitive`
   --> crates/iceberg/src/arrow/schema.rs:239:5
    |
42  |     type T;
    |     ------ `T` from trait
...
91  |     fn r#struct(&mut self, fields: &Fields, results: Vec<Self::T>) -> Result<Self::T>;
    |     ---------------------------------------------------------------------------------- `r#struct` from trait
...
94  |     fn list(&mut self, list: &DataType, value: Self::T) -> Result<Self::T>;
    |     ----------------------------------------------------------------------- `list` from trait
...
97  |     fn map(&mut self, map: &DataType, key_value: Self::T, value: Self::T) -> Result<Self::T>;
    |     ----------------------------------------------------------------------------------------- `map` from trait
...
100 |     fn primitive(&mut self, p: &DataType) -> Result<Self::T>;
    |     --------------------------------------------------------- `primitive` from trait
...
239 |     impl ArrowSchemaVisitor for ConvertToIceberg {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `T`, `struct`, `list`, `map`, `primitive` in implementation

error[E0599]: no variant or associated item named `ValueError` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/arrow/schema.rs:284:24
    |
284 |             ErrorKind::ValueError,
    |                        ^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `ValueError` not found for this enum

error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions
   --> crates/iceberg/src/arrow/schema.rs:295:35
    |
295 | fn end_visit(&mut self) -> Result<Self::U> {
    |                                   ^^^^ `Self` is only available in impls, traits, and type definitions

Some errors have detailed explanations: E0046, E0407, E0412, E0428, E0433, E0599.
For more information about an error, try `rustc --explain E0046`.
error: could not compile `iceberg` (lib) due to 18 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 18 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0428]: the name `field` is defined multiple times
   --> crates/iceberg/src/arrow/schema.rs:314:1
    |
289 | fn field(&mut self, field: &Field) -> Result<()> {
    | ------------------------------------------------ previous definition of the value `field` here
...
314 | fn field(&mut self, field: &Field) -> Result<NestedFieldRef> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `field` redefined here
    |
    = note: `field` must be defined only once in the value namespace of this module

error: `self` parameter is only allowed in associated functions
   --> crates/iceberg/src/arrow/schema.rs:289:10
    |
289 | fn field(&mut self, field: &Field) -> Result<()> {
    |          ^^^^^^^^^ not semantically valid as function parameter
    |
    = note: associated functions are those in `impl` or `trait` definitions

error: `self` parameter is only allowed in associated functions
   --> crates/iceberg/src/arrow/schema.rs:295:14
    |
295 | fn end_visit(&mut self) -> Result<Self::U> {
    |              ^^^^^^^^^ not semantically valid as function parameter
    |
    = note: associated functions are those in `impl` or `trait` definitions

error: `self` parameter is only allowed in associated functions
   --> crates/iceberg/src/arrow/schema.rs:298:11
    |
298 | fn schema(&mut self, schema: &ArrowSchema, results: Vec<Result<NestedFieldRef>>) -> Result<Schema> {
    |           ^^^^^^^^^ not semantically valid as function parameter
    |
    = note: associated functions are those in `impl` or `trait` definitions

error: `self` parameter is only allowed in associated functions
   --> crates/iceberg/src/arrow/schema.rs:314:10
    |
314 | fn field(&mut self, field: &Field) -> Result<NestedFieldRef> {
    |          ^^^^^^^^^ not semantically valid as function parameter
    |
    = note: associated functions are those in `impl` or `trait` definitions

error[E0407]: method `field` is not a member of trait `ArrowSchemaVisitor`
   --> crates/iceberg/src/arrow/schema.rs:215:9
    |
215 | /         fn field(&mut self, field: &Field) -> Result<()> {
216 | |             if field.metadata().contains_key(PARQUET_FIELD_ID_META_KEY) {
217 | |                 self.has_ids = true;
218 | |             }
219 | |             Ok(())
220 | |         }
    | |_________^ not a member of trait `ArrowSchemaVisitor`

error[E0407]: method `end_visit` is not a member of trait `ArrowSchemaVisitor`
   --> crates/iceberg/src/arrow/schema.rs:222:9
    |
222 | /         fn end_visit(&mut self) -> Result<Self::U> {
223 | |             Ok(self.has_ids)
224 | |         }
    | |_________^ not a member of trait `ArrowSchemaVisitor`

error[E0407]: method `field` is not a member of trait `ArrowSchemaVisitor`
   --> crates/iceberg/src/arrow/schema.rs:259:9
    |
259 | /         fn field(&mut self, field: &Field) -> Result<NestedFieldRef> {
260 | |             // Implement field conversion logic here
261 | |             // This is a placeholder and needs to be implemented properly
262 | |             unimplemented!("Field conversion not implemented")
263 | |         }
    | |_________^ not a member of trait `ArrowSchemaVisitor`

error[E0412]: cannot find type `SchemaId` in this scope
   --> crates/iceberg/src/arrow/schema.rs:228:20
    |
228 |         schema_id: SchemaId,
    |                    ^^^^^^^^
    |
   ::: crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ----------------- similarly named struct `Schema` defined here
    |
help: a struct with a similar name exists
    |
228 |         schema_id: Schema,
    |                    ~~~~~~
help: consider importing this type alias through its public re-export
    |
20  + use crate::spec::SchemaId;
    |

error[E0412]: cannot find type `HashSet` in this scope
   --> crates/iceberg/src/arrow/schema.rs:231:31
    |
231 |         identifier_field_ids: HashSet<i32>,
    |                               ^^^^^^^ not found in this scope
    |
help: consider importing this struct
    |
20  + use std::collections::HashSet;
    |

error[E0412]: cannot find type `BiHashMap` in this scope
   --> crates/iceberg/src/arrow/schema.rs:232:22
    |
232 |         alias_to_id: BiHashMap<String, i32>,
    |                      ^^^^^^^^^
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/collections/hash/map.rs:213:1
    |
    = note: similarly named struct `HashMap` defined here
    |
help: a struct with a similar name exists
    |
232 |         alias_to_id: HashMap<String, i32>,
    |                      ~~~~~~~
help: consider importing this struct
    |
20  + use bimap::BiHashMap;
    |

error[E0433]: failed to resolve: use of undeclared type `SchemaId`
   --> crates/iceberg/src/arrow/schema.rs:271:24
    |
271 |             schema_id: SchemaId::new(0),
    |                        ^^^^^^^^ use of undeclared type `SchemaId`
    |
help: a struct with a similar name exists
    |
271 |             schema_id: Schema::new(0),
    |                        ~~~~~~
help: consider importing this type alias through its public re-export
    |
20  + use crate::spec::SchemaId;
    |

error[E0433]: failed to resolve: use of undeclared type `HashSet`
   --> crates/iceberg/src/arrow/schema.rs:274:35
    |
274 |             identifier_field_ids: HashSet::new(),
    |                                   ^^^^^^^ use of undeclared type `HashSet`
    |
help: consider importing this struct
    |
20  + use std::collections::HashSet;
    |

error[E0433]: failed to resolve: use of undeclared type `BiHashMap`
   --> crates/iceberg/src/arrow/schema.rs:275:26
    |
275 |             alias_to_id: BiHashMap::new(),
    |                          ^^^^^^^^^ use of undeclared type `BiHashMap`
    |
help: a struct with a similar name exists
    |
275 |             alias_to_id: HashMap::new(),
    |                          ~~~~~~~
help: consider importing this struct
    |
20  + use bimap::BiHashMap;
    |

error[E0046]: not all trait items implemented, missing: `T`, `schema`, `struct`, `list`, `map`, `primitive`
   --> crates/iceberg/src/arrow/schema.rs:212:5
    |
42  |     type T;
    |     ------ `T` from trait
...
88  |     fn schema(&mut self, schema: &ArrowSchema, values: Vec<Self::T>) -> Result<Self::U>;
    |     ------------------------------------------------------------------------------------ `schema` from trait
...
91  |     fn r#struct(&mut self, fields: &Fields, results: Vec<Self::T>) -> Result<Self::T>;
    |     ---------------------------------------------------------------------------------- `r#struct` from trait
...
94  |     fn list(&mut self, list: &DataType, value: Self::T) -> Result<Self::T>;
    |     ----------------------------------------------------------------------- `list` from trait
...
97  |     fn map(&mut self, map: &DataType, key_value: Self::T, value: Self::T) -> Result<Self::T>;
    |     ----------------------------------------------------------------------------------------- `map` from trait
...
100 |     fn primitive(&mut self, p: &DataType) -> Result<Self::T>;
    |     --------------------------------------------------------- `primitive` from trait
...
212 |     impl ArrowSchemaVisitor for HasIds {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `T`, `schema`, `struct`, `list`, `map`, `primitive` in implementation

error[E0046]: not all trait items implemented, missing: `T`, `struct`, `list`, `map`, `primitive`
   --> crates/iceberg/src/arrow/schema.rs:239:5
    |
42  |     type T;
    |     ------ `T` from trait
...
91  |     fn r#struct(&mut self, fields: &Fields, results: Vec<Self::T>) -> Result<Self::T>;
    |     ---------------------------------------------------------------------------------- `r#struct` from trait
...
94  |     fn list(&mut self, list: &DataType, value: Self::T) -> Result<Self::T>;
    |     ----------------------------------------------------------------------- `list` from trait
...
97  |     fn map(&mut self, map: &DataType, key_value: Self::T, value: Self::T) -> Result<Self::T>;
    |     ----------------------------------------------------------------------------------------- `map` from trait
...
100 |     fn primitive(&mut self, p: &DataType) -> Result<Self::T>;
    |     --------------------------------------------------------- `primitive` from trait
...
239 |     impl ArrowSchemaVisitor for ConvertToIceberg {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `T`, `struct`, `list`, `map`, `primitive` in implementation

error[E0599]: no variant or associated item named `ValueError` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/arrow/schema.rs:284:24
    |
284 |             ErrorKind::ValueError,
    |                        ^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `ValueError` not found for this enum

error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions
   --> crates/iceberg/src/arrow/schema.rs:295:35
    |
295 | fn end_visit(&mut self) -> Result<Self::U> {
    |                                   ^^^^ `Self` is only available in impls, traits, and type definitions

Some errors have detailed explanations: E0046, E0407, E0412, E0428, E0433, E0599.
For more information about an error, try `rustc --explain E0046`.
error: could not compile `iceberg` (lib) due to 18 previous errors


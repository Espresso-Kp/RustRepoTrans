Fail
file path is :
projects/iceberg/rust/crates/catalog/glue/src/catalog.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
   Compiling iceberg-catalog-hms v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/hms)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:271:50
    |
271 |     let db_name = convert_to_database(namespace, false)?;
    |                   -------------------            ^^^^^ expected `&HashMap<String, String>`, found `bool`
    |                   |
    |                   arguments to this function are incorrect
    |
    = note: expected reference `&HashMap<std::string::String, std::string::String>`
                    found type `bool`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------

error[E0277]: the trait bound `std::string::String: From<&DatabaseInput>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:273:60
    |
273 |     let builder = self.client.0.get_tables().database_name(&db_name);
    |                                              ------------- ^^^^^^^^ the trait `From<&DatabaseInput>` is not implemented for `std::string::String`, which is required by `&DatabaseInput: Into<std::string::String>`
    |                                              |
    |                                              required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&DatabaseInput` to implement `Into<std::string::String>`
note: required by a bound in `GetTablesFluentBuilder::database_name`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/operation/get_tables/builders.rs:126:48
    |
126 |     pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `GetTablesFluentBuilder::database_name`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:277:12
    |
277 |     if let Some(table_list) = response.table_list() {
    |            ^^^^^^^^^^^^^^^^   --------------------- this expression has type `&[aws_sdk_glue::types::Table]`
    |            |
    |            expected `[Table]`, found `Option<_>`
    |
    = note: expected slice `[aws_sdk_glue::types::Table]`
                found enum `std::option::Option<_>`

error[E0282]: type annotations needed
   --> crates/catalog/glue/src/catalog.rs:278:24
    |
278 |         if !table_list.is_empty() {
    |                        ^^^^^^^^ cannot infer type for type parameter `T` declared on the enum `Option`

error[E0599]: no method named `is_glue_iceberg_table` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:280:21
    |
280 |             if self.is_glue_iceberg_table(table) {
    |                     ^^^^^^^^^^^^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0599]: no variant or associated item named `NamespaceNotEmpty` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:282:32
    |
282 |                     ErrorKind::NamespaceNotEmpty,
    |                                ^^^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0599]: no variant or associated item named `NamespaceNotEmpty` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:287:32
    |
287 |                     ErrorKind::NamespaceNotEmpty,
    |                                ^^^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: the trait bound `std::string::String: From<&DatabaseInput>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:294:56
    |
294 |     let builder = self.client.0.delete_database().name(&db_name);
    |                                                   ---- ^^^^^^^^ the trait `From<&DatabaseInput>` is not implemented for `std::string::String`, which is required by `&DatabaseInput: Into<std::string::String>`
    |                                                   |
    |                                                   required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&DatabaseInput` to implement `Into<std::string::String>`
note: required by a bound in `DeleteDatabaseFluentBuilder::name`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/operation/delete_database/builders.rs:129:39
    |
129 |     pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `DeleteDatabaseFluentBuilder::name`

Some errors have detailed explanations: E0277, E0282, E0308, E0599.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `iceberg-catalog-glue` (lib) due to 8 previous errors
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:271:50
    |
271 |     let db_name = convert_to_database(namespace, false)?;
    |                   -------------------            ^^^^^ expected `&HashMap<String, String>`, found `bool`
    |                   |
    |                   arguments to this function are incorrect
    |
    = note: expected reference `&HashMap<std::string::String, std::string::String>`
                    found type `bool`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------

error[E0277]: the trait bound `std::string::String: From<&DatabaseInput>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:273:60
    |
273 |     let builder = self.client.0.get_tables().database_name(&db_name);
    |                                              ------------- ^^^^^^^^ the trait `From<&DatabaseInput>` is not implemented for `std::string::String`, which is required by `&DatabaseInput: Into<std::string::String>`
    |                                              |
    |                                              required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&DatabaseInput` to implement `Into<std::string::String>`
note: required by a bound in `GetTablesFluentBuilder::database_name`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/operation/get_tables/builders.rs:126:48
    |
126 |     pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `GetTablesFluentBuilder::database_name`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:277:12
    |
277 |     if let Some(table_list) = response.table_list() {
    |            ^^^^^^^^^^^^^^^^   --------------------- this expression has type `&[aws_sdk_glue::types::Table]`
    |            |
    |            expected `[Table]`, found `Option<_>`
    |
    = note: expected slice `[aws_sdk_glue::types::Table]`
                found enum `std::option::Option<_>`

error[E0282]: type annotations needed
   --> crates/catalog/glue/src/catalog.rs:278:24
    |
278 |         if !table_list.is_empty() {
    |                        ^^^^^^^^ cannot infer type for type parameter `T` declared on the enum `Option`

error[E0599]: no method named `is_glue_iceberg_table` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:280:21
    |
280 |             if self.is_glue_iceberg_table(table) {
    |                     ^^^^^^^^^^^^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0599]: no variant or associated item named `NamespaceNotEmpty` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:282:32
    |
282 |                     ErrorKind::NamespaceNotEmpty,
    |                                ^^^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0599]: no variant or associated item named `NamespaceNotEmpty` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:287:32
    |
287 |                     ErrorKind::NamespaceNotEmpty,
    |                                ^^^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: the trait bound `std::string::String: From<&DatabaseInput>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:294:56
    |
294 |     let builder = self.client.0.delete_database().name(&db_name);
    |                                                   ---- ^^^^^^^^ the trait `From<&DatabaseInput>` is not implemented for `std::string::String`, which is required by `&DatabaseInput: Into<std::string::String>`
    |                                                   |
    |                                                   required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&DatabaseInput` to implement `Into<std::string::String>`
note: required by a bound in `DeleteDatabaseFluentBuilder::name`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/operation/delete_database/builders.rs:129:39
    |
129 |     pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `DeleteDatabaseFluentBuilder::name`

Some errors have detailed explanations: E0277, E0282, E0308, E0599.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `iceberg-catalog-glue` (lib) due to 8 previous errors


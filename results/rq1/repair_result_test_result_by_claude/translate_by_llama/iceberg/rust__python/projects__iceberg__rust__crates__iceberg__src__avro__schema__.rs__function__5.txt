Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/avro/schema.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0277]: the trait bound `apache_avro::Schema: From<itertools::Either<apache_avro::Schema, RecordField>>` is not satisfied
   --> crates/iceberg/src/avro/schema.rs:140:61
    |
140 |         let schema = AvroSchema::Map(Box::new(value.clone().try_into()?));
    |                                                             ^^^^^^^^ the trait `From<itertools::Either<apache_avro::Schema, RecordField>>` is not implemented for `apache_avro::Schema`, which is required by `itertools::Either<apache_avro::Schema, RecordField>: TryInto<_>`
    |
    = note: required for `itertools::Either<apache_avro::Schema, RecordField>` to implement `Into<apache_avro::Schema>`
    = note: required for `apache_avro::Schema` to implement `TryFrom<itertools::Either<apache_avro::Schema, RecordField>>`
    = note: required for `itertools::Either<apache_avro::Schema, RecordField>` to implement `TryInto<apache_avro::Schema>`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/avro/schema.rs:140:71
    |
140 |         let schema = AvroSchema::Map(Box::new(value.clone().try_into()?));
    |                                                                       ^ the trait `From<Infallible>` is not implemented for `error::Error`, which is required by `std::result::Result<itertools::Either<apache_avro::Schema, RecordField>, error::Error>: FromResidual<std::result::Result<Infallible, _>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `std::result::Result<itertools::Either<apache_avro::Schema, RecordField>, error::Error>` to implement `FromResidual<std::result::Result<Infallible, Infallible>>`

error[E0063]: missing fields `aliases` and `custom_attributes` in initializer of `RecordField`
   --> crates/iceberg/src/avro/schema.rs:145:25
    |
145 |         let key_field = AvroRecordField {
    |                         ^^^^^^^^^^^^^^^ missing `aliases` and `custom_attributes`

error[E0277]: the trait bound `apache_avro::Schema: From<itertools::Either<apache_avro::Schema, RecordField>>` is not satisfied
   --> crates/iceberg/src/avro/schema.rs:149:39
    |
149 |             schema: key_value.clone().try_into()?,
    |                                       ^^^^^^^^ the trait `From<itertools::Either<apache_avro::Schema, RecordField>>` is not implemented for `apache_avro::Schema`, which is required by `itertools::Either<apache_avro::Schema, RecordField>: TryInto<_>`
    |
    = note: required for `itertools::Either<apache_avro::Schema, RecordField>` to implement `Into<apache_avro::Schema>`
    = note: required for `apache_avro::Schema` to implement `TryFrom<itertools::Either<apache_avro::Schema, RecordField>>`
    = note: required for `itertools::Either<apache_avro::Schema, RecordField>` to implement `TryInto<apache_avro::Schema>`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/avro/schema.rs:149:49
    |
149 |             schema: key_value.clone().try_into()?,
    |                                                 ^ the trait `From<Infallible>` is not implemented for `error::Error`, which is required by `std::result::Result<itertools::Either<apache_avro::Schema, RecordField>, error::Error>: FromResidual<std::result::Result<Infallible, _>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `std::result::Result<itertools::Either<apache_avro::Schema, RecordField>, error::Error>` to implement `FromResidual<std::result::Result<Infallible, Infallible>>`

error[E0063]: missing fields `aliases` and `custom_attributes` in initializer of `RecordField`
   --> crates/iceberg/src/avro/schema.rs:153:27
    |
153 |         let value_field = AvroRecordField {
    |                           ^^^^^^^^^^^^^^^ missing `aliases` and `custom_attributes`

error[E0277]: the trait bound `apache_avro::Schema: From<itertools::Either<apache_avro::Schema, RecordField>>` is not satisfied
   --> crates/iceberg/src/avro/schema.rs:157:35
    |
157 |             schema: value.clone().try_into()?,
    |                                   ^^^^^^^^ the trait `From<itertools::Either<apache_avro::Schema, RecordField>>` is not implemented for `apache_avro::Schema`, which is required by `itertools::Either<apache_avro::Schema, RecordField>: TryInto<_>`
    |
    = note: required for `itertools::Either<apache_avro::Schema, RecordField>` to implement `Into<apache_avro::Schema>`
    = note: required for `apache_avro::Schema` to implement `TryFrom<itertools::Either<apache_avro::Schema, RecordField>>`
    = note: required for `itertools::Either<apache_avro::Schema, RecordField>` to implement `TryInto<apache_avro::Schema>`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/avro/schema.rs:157:45
    |
157 |             schema: value.clone().try_into()?,
    |                                             ^ the trait `From<Infallible>` is not implemented for `error::Error`, which is required by `std::result::Result<itertools::Either<apache_avro::Schema, RecordField>, error::Error>: FromResidual<std::result::Result<Infallible, _>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `std::result::Result<itertools::Either<apache_avro::Schema, RecordField>, error::Error>` to implement `FromResidual<std::result::Result<Infallible, Infallible>>`

Some errors have detailed explanations: E0063, E0277.
For more information about an error, try `rustc --explain E0063`.
error: could not compile `iceberg` (lib) due to 8 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 8 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0277]: the trait bound `apache_avro::Schema: From<itertools::Either<apache_avro::Schema, RecordField>>` is not satisfied
   --> crates/iceberg/src/avro/schema.rs:140:61
    |
140 |         let schema = AvroSchema::Map(Box::new(value.clone().try_into()?));
    |                                                             ^^^^^^^^ the trait `From<itertools::Either<apache_avro::Schema, RecordField>>` is not implemented for `apache_avro::Schema`, which is required by `itertools::Either<apache_avro::Schema, RecordField>: TryInto<_>`
    |
    = note: required for `itertools::Either<apache_avro::Schema, RecordField>` to implement `Into<apache_avro::Schema>`
    = note: required for `apache_avro::Schema` to implement `TryFrom<itertools::Either<apache_avro::Schema, RecordField>>`
    = note: required for `itertools::Either<apache_avro::Schema, RecordField>` to implement `TryInto<apache_avro::Schema>`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/avro/schema.rs:140:71
    |
140 |         let schema = AvroSchema::Map(Box::new(value.clone().try_into()?));
    |                                                                       ^ the trait `From<Infallible>` is not implemented for `error::Error`, which is required by `std::result::Result<itertools::Either<apache_avro::Schema, RecordField>, error::Error>: FromResidual<std::result::Result<Infallible, _>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `std::result::Result<itertools::Either<apache_avro::Schema, RecordField>, error::Error>` to implement `FromResidual<std::result::Result<Infallible, Infallible>>`

error[E0063]: missing fields `aliases` and `custom_attributes` in initializer of `RecordField`
   --> crates/iceberg/src/avro/schema.rs:145:25
    |
145 |         let key_field = AvroRecordField {
    |                         ^^^^^^^^^^^^^^^ missing `aliases` and `custom_attributes`

error[E0277]: the trait bound `apache_avro::Schema: From<itertools::Either<apache_avro::Schema, RecordField>>` is not satisfied
   --> crates/iceberg/src/avro/schema.rs:149:39
    |
149 |             schema: key_value.clone().try_into()?,
    |                                       ^^^^^^^^ the trait `From<itertools::Either<apache_avro::Schema, RecordField>>` is not implemented for `apache_avro::Schema`, which is required by `itertools::Either<apache_avro::Schema, RecordField>: TryInto<_>`
    |
    = note: required for `itertools::Either<apache_avro::Schema, RecordField>` to implement `Into<apache_avro::Schema>`
    = note: required for `apache_avro::Schema` to implement `TryFrom<itertools::Either<apache_avro::Schema, RecordField>>`
    = note: required for `itertools::Either<apache_avro::Schema, RecordField>` to implement `TryInto<apache_avro::Schema>`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/avro/schema.rs:149:49
    |
149 |             schema: key_value.clone().try_into()?,
    |                                                 ^ the trait `From<Infallible>` is not implemented for `error::Error`, which is required by `std::result::Result<itertools::Either<apache_avro::Schema, RecordField>, error::Error>: FromResidual<std::result::Result<Infallible, _>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `std::result::Result<itertools::Either<apache_avro::Schema, RecordField>, error::Error>` to implement `FromResidual<std::result::Result<Infallible, Infallible>>`

error[E0063]: missing fields `aliases` and `custom_attributes` in initializer of `RecordField`
   --> crates/iceberg/src/avro/schema.rs:153:27
    |
153 |         let value_field = AvroRecordField {
    |                           ^^^^^^^^^^^^^^^ missing `aliases` and `custom_attributes`

error[E0277]: the trait bound `apache_avro::Schema: From<itertools::Either<apache_avro::Schema, RecordField>>` is not satisfied
   --> crates/iceberg/src/avro/schema.rs:157:35
    |
157 |             schema: value.clone().try_into()?,
    |                                   ^^^^^^^^ the trait `From<itertools::Either<apache_avro::Schema, RecordField>>` is not implemented for `apache_avro::Schema`, which is required by `itertools::Either<apache_avro::Schema, RecordField>: TryInto<_>`
    |
    = note: required for `itertools::Either<apache_avro::Schema, RecordField>` to implement `Into<apache_avro::Schema>`
    = note: required for `apache_avro::Schema` to implement `TryFrom<itertools::Either<apache_avro::Schema, RecordField>>`
    = note: required for `itertools::Either<apache_avro::Schema, RecordField>` to implement `TryInto<apache_avro::Schema>`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/avro/schema.rs:157:45
    |
157 |             schema: value.clone().try_into()?,
    |                                             ^ the trait `From<Infallible>` is not implemented for `error::Error`, which is required by `std::result::Result<itertools::Either<apache_avro::Schema, RecordField>, error::Error>: FromResidual<std::result::Result<Infallible, _>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `std::result::Result<itertools::Either<apache_avro::Schema, RecordField>, error::Error>` to implement `FromResidual<std::result::Result<Infallible, Infallible>>`

Some errors have detailed explanations: E0063, E0277.
For more information about an error, try `rustc --explain E0063`.
error: could not compile `iceberg` (lib) due to 8 previous errors


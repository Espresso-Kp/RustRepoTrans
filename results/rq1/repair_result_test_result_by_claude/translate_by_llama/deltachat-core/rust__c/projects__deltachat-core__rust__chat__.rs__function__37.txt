Fail
file path is :
projects/deltachat-core/rust/src/chat.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0599]: no method named `not` found for opaque type `impl futures::Future<Output = bool>` in the current scope
   --> src/chat.rs:985:36
    |
985 |     if context.inner.sql.is_open().not() {
    |                                    ^^^ method not found in `impl Future<Output = bool>`

error[E0277]: can't compare `u32` with `ChatId`
   --> src/chat.rs:989:28
    |
989 |     let query = if chat_id == DC_CHAT_ID_ARCHIVED_LINK {
    |                            ^^ no implementation for `u32 == ChatId`
    |
    = help: the trait `PartialEq<ChatId>` is not implemented for `u32`
    = help: the following other types implement trait `PartialEq<Rhs>`:
              <u32 as PartialEq>
              <u32 as PartialEq<precis_core::Codepoints>>
              <u32 as PartialEq<stun_rs::types::Cookie>>
              <u32 as PartialEq<serde_json::Value>>

error[E0277]: can't compare `u32` with `ChatId`
    --> src/chat.rs:1003:60
     |
1003 |     let params: Vec<Box<dyn rusqlite::ToSql>> = if chat_id == DC_CHAT_ID_ARCHIVED_LINK {
     |                                                            ^^ no implementation for `u32 == ChatId`
     |
     = help: the trait `PartialEq<ChatId>` is not implemented for `u32`
     = help: the following other types implement trait `PartialEq<Rhs>`:
               <u32 as PartialEq>
               <u32 as PartialEq<precis_core::Codepoints>>
               <u32 as PartialEq<stun_rs::types::Cookie>>
               <u32 as PartialEq<serde_json::Value>>

error[E0277]: `dyn rusqlite::ToSql` cannot be sent between threads safely
    --> src/chat.rs:1009:48
     |
1009 |     let count = context.inner.sql.count(query, rusqlite::params_from_iter(params)).await?;
     |                                   -----        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn rusqlite::ToSql` cannot be sent between threads safely
     |                                   |
     |                                   required by a bound introduced by this call
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn rusqlite::ToSql`, which is required by `ParamsFromIter<Vec<Box<dyn rusqlite::ToSql>>>: std::marker::Send`
     = note: required for `Unique<dyn rusqlite::ToSql>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn rusqlite::ToSql>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `Unique<Box<dyn rusqlite::ToSql>>` to implement `std::marker::Send`
note: required because it appears within the type `smallvec::alloc::raw_vec::RawVec<Box<dyn rusqlite::ToSql>>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/raw_vec.rs:61:19
     |
61   | pub(crate) struct RawVec<T, A: Allocator = Global> {
     |                   ^^^^^^
note: required because it appears within the type `Vec<Box<dyn rusqlite::ToSql>>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:398:12
     |
398  | pub struct Vec<T, #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global> {
     |            ^^^
note: required because it appears within the type `ParamsFromIter<Vec<Box<dyn rusqlite::ToSql>>>`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/params.rs:426:12
     |
426  | pub struct ParamsFromIter<I>(I);
     |            ^^^^^^^^^^^^^^
note: required by a bound in `Sql::count`
    --> src/sql.rs:446:76
     |
446  |     pub async fn count(&self, query: &str, params: impl rusqlite::Params + Send) -> Result<usize> {
     |                                                                            ^^^^ required by this bound in `Sql::count`

error[E0277]: can't compare `u32` with `chat::ChatId`
   --> src/chat.rs:989:28
    |
989 |     let query = if chat_id == DC_CHAT_ID_ARCHIVED_LINK {
    |                            ^^ no implementation for `u32 == chat::ChatId`
    |
    = help: the trait `PartialEq<chat::ChatId>` is not implemented for `u32`
    = help: the following other types implement trait `PartialEq<Rhs>`:
              <u32 as PartialEq>
              <u32 as PartialEq<precis_core::Codepoints>>
              <u32 as PartialEq<stun_rs::types::Cookie>>
              <u32 as PartialEq<serde_json::Value>>

error[E0277]: can't compare `u32` with `chat::ChatId`
    --> src/chat.rs:1003:60
     |
1003 |     let params: Vec<Box<dyn rusqlite::ToSql>> = if chat_id == DC_CHAT_ID_ARCHIVED_LINK {
     |                                                            ^^ no implementation for `u32 == chat::ChatId`
     |
     = help: the trait `PartialEq<chat::ChatId>` is not implemented for `u32`
     = help: the following other types implement trait `PartialEq<Rhs>`:
               <u32 as PartialEq>
               <u32 as PartialEq<precis_core::Codepoints>>
               <u32 as PartialEq<stun_rs::types::Cookie>>
               <u32 as PartialEq<serde_json::Value>>

error[E0277]: `dyn rusqlite::ToSql` cannot be sent between threads safely
    --> src/chat.rs:1009:48
     |
1009 |     let count = context.inner.sql.count(query, rusqlite::params_from_iter(params)).await?;
     |                                   -----        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn rusqlite::ToSql` cannot be sent between threads safely
     |                                   |
     |                                   required by a bound introduced by this call
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn rusqlite::ToSql`, which is required by `ParamsFromIter<Vec<Box<dyn rusqlite::ToSql>>>: std::marker::Send`
     = note: required for `Unique<dyn rusqlite::ToSql>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn rusqlite::ToSql>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `Unique<Box<dyn rusqlite::ToSql>>` to implement `std::marker::Send`
note: required because it appears within the type `smallvec::alloc::raw_vec::RawVec<Box<dyn rusqlite::ToSql>>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/raw_vec.rs:61:19
     |
61   | pub(crate) struct RawVec<T, A: Allocator = Global> {
     |                   ^^^^^^
note: required because it appears within the type `Vec<Box<dyn rusqlite::ToSql>>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:398:12
     |
398  | pub struct Vec<T, #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global> {
     |            ^^^
note: required because it appears within the type `ParamsFromIter<Vec<Box<dyn rusqlite::ToSql>>>`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/params.rs:426:12
     |
426  | pub struct ParamsFromIter<I>(I);
     |            ^^^^^^^^^^^^^^
note: required by a bound in `sql::Sql::count`
    --> src/sql.rs:446:76
     |
446  |     pub async fn count(&self, query: &str, params: impl rusqlite::Params + Send) -> Result<usize> {
     |                                                                            ^^^^ required by this bound in `Sql::count`

Some errors have detailed explanations: E0277, E0599.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `deltachat` (lib) due to 4 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> src/events/chatlist_events.rs:486:33
    |
486 |         assert!(chat_id_for_bob.get_fresh_msg_cnt(&bob).await? >= 1);
    |                                 ^^^^^^^^^^^^^^^^^------ an argument of type `u32` is missing
    |
note: method defined here
   --> src/chat.rs:984:14
    |
984 | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
    |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
    |
486 |         assert!(chat_id_for_bob.get_fresh_msg_cnt(&bob, /* u32 */).await? >= 1);
    |                                                  ~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5770:45
     |
5770 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 0);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5770 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5773:45
     |
5773 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 1);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5773 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5776:45
     |
5776 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 1);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5776 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5788:32
     |
5788 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t).await?, 2);
     |                                ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5788 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                 ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5789:35
     |
5789 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t).await?, 3);
     |                                   ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5789 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 3);
     |                                                    ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5790:45
     |
5790 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 2);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5790 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5794:32
     |
5794 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t).await?, 2);
     |                                ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5794 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                 ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5795:35
     |
5795 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t).await?, 0);
     |                                   ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5795 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                                    ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5796:45
     |
5796 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 1);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5796 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5800:32
     |
5800 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t).await?, 2);
     |                                ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5800 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                 ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5801:35
     |
5801 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t).await?, 1);
     |                                   ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5801 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                    ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5802:45
     |
5802 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 2);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5802 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5808:33
     |
5808 |         assert_eq!(dave_chat_id.get_fresh_msg_cnt(&t).await?, 1);
     |                                 ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5808 |         assert_eq!(dave_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                  ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5809:45
     |
5809 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 2);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5809 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5814:32
     |
5814 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t).await?, 0);
     |                                ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5814 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                                 ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5815:35
     |
5815 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t).await?, 0);
     |                                   ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5815 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                                    ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5816:33
     |
5816 |         assert_eq!(dave_chat_id.get_fresh_msg_cnt(&t).await?, 1);
     |                                 ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5816 |         assert_eq!(dave_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                  ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5817:45
     |
5817 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 0);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5817 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6230:28
     |
6230 |         assert_eq!(chat.id.get_fresh_msg_cnt(&t).await?, 1);
     |                            ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
6230 |         assert_eq!(chat.id.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6248:28
     |
6248 |         assert_eq!(chat.id.get_fresh_msg_cnt(&t).await?, 0);
     |                            ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
6248 |         assert_eq!(chat.id.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                             ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6282:28
     |
6282 |         assert_eq!(chat_id.get_fresh_msg_cnt(&t).await?, 1);
     |                            ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
6282 |         assert_eq!(chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6363:28
     |
6363 |         assert_eq!(chat_id.get_fresh_msg_cnt(&alice).await?, 1);
     |                            ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
6363 |         assert_eq!(chat_id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6375:28
     |
6375 |         assert_eq!(chat_id.get_fresh_msg_cnt(&alice).await?, 1);
     |                            ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
6375 |         assert_eq!(chat_id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1461:27
     |
1461 |         assert_eq!(bob.id.get_fresh_msg_cnt(&t).await.unwrap(), 1);
     |                           ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1461 |         assert_eq!(bob.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 1);
     |                                            ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1467:30
     |
1467 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t).await.unwrap(), 2);
     |                              ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1467 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 2);
     |                                               ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1474:28
     |
1474 |         assert_eq!(dave.id.get_fresh_msg_cnt(&t).await.unwrap(), 3);
     |                            ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1474 |         assert_eq!(dave.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 3);
     |                                             ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1481:30
     |
1481 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t).await.unwrap(), 2);
     |                              ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1481 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 2);
     |                                               ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1489:30
     |
1489 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t).await.unwrap(), 3);
     |                              ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1489 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 3);
     |                                               ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1496:30
     |
1496 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t).await.unwrap(), 3);
     |                              ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1496 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 3);
     |                                               ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/message.rs:2394:34
     |
2394 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice).await?, 2);
     |                                  ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
2394 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 2);
     |                                                   ~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/message.rs:2403:34
     |
2403 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice).await?, 2);
     |                                  ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
2403 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 2);
     |                                                   ~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/message.rs:2409:34
     |
2409 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice).await?, 1);
     |                                  ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
2409 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 1);
     |                                                   ~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/message.rs:2415:34
     |
2415 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice).await?, 0);
     |                                  ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
2415 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 0);
     |                                                   ~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0061, E0277, E0599.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `deltachat` (lib test) due to 38 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/expr/predicate.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0599]: no method named `field` found for associated type `<T as Bind>::Bound` in the current scope
   --> crates/iceberg/src/expr/predicate.rs:115:27
    |
115 |             if bound_term.field().required {
    |                           ^^^^^ method not found in `<T as Bind>::Bound`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `spec::schema::SchemaVisitor` defines an item `field`, perhaps you need to implement it
   --> crates/iceberg/src/spec/schema.rs:365:1
    |
365 | pub trait SchemaVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:116:27
    |
116 |                 return Ok(BoundPredicate::AlwaysFalse);
    |                        -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `UnaryExpression<<T as Bind>::Bound>`, found `BoundPredicate`
    |                        |
    |                        arguments to this enum variant are incorrect
    |
    = note: expected struct `predicate::UnaryExpression<<T as Bind>::Bound>`
                 found enum `predicate::BoundPredicate`
help: the type constructed contains `predicate::BoundPredicate` due to the type of the argument passed
   --> crates/iceberg/src/expr/predicate.rs:116:24
    |
116 |                 return Ok(BoundPredicate::AlwaysFalse);
    |                        ^^^---------------------------^
    |                           |
    |                           this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5

error[E0599]: no method named `field` found for associated type `<T as Bind>::Bound` in the current scope
   --> crates/iceberg/src/expr/predicate.rs:120:27
    |
120 |             if bound_term.field().required {
    |                           ^^^^^ method not found in `<T as Bind>::Bound`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `spec::schema::SchemaVisitor` defines an item `field`, perhaps you need to implement it
   --> crates/iceberg/src/spec/schema.rs:365:1
    |
365 | pub trait SchemaVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:121:27
    |
121 |                 return Ok(BoundPredicate::AlwaysTrue);
    |                        -- ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `UnaryExpression<<T as Bind>::Bound>`, found `BoundPredicate`
    |                        |
    |                        arguments to this enum variant are incorrect
    |
    = note: expected struct `predicate::UnaryExpression<<T as Bind>::Bound>`
                 found enum `predicate::BoundPredicate`
help: the type constructed contains `predicate::BoundPredicate` due to the type of the argument passed
   --> crates/iceberg/src/expr/predicate.rs:121:24
    |
121 |                 return Ok(BoundPredicate::AlwaysTrue);
    |                        ^^^--------------------------^
    |                           |
    |                           this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5

error[E0599]: no method named `field` found for associated type `<T as Bind>::Bound` in the current scope
   --> crates/iceberg/src/expr/predicate.rs:125:28
    |
125 |             if !bound_term.field().field_type.is_floating_type() {
    |                            ^^^^^ method not found in `<T as Bind>::Bound`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `spec::schema::SchemaVisitor` defines an item `field`, perhaps you need to implement it
   --> crates/iceberg/src/spec/schema.rs:365:1
    |
365 | pub trait SchemaVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `field` found for associated type `<T as Bind>::Bound` in the current scope
   --> crates/iceberg/src/expr/predicate.rs:130:36
    |
130 |                         bound_term.field().field_type
    |                                    ^^^^^ method not found in `<T as Bind>::Bound`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `spec::schema::SchemaVisitor` defines an item `field`, perhaps you need to implement it
   --> crates/iceberg/src/spec/schema.rs:365:1
    |
365 | pub trait SchemaVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: use of undeclared type `BoundUnaryExpression`
   --> crates/iceberg/src/expr/predicate.rs:143:30
    |
143 |     Ok(BoundPredicate::Unary(BoundUnaryExpression::new(
    |                              ^^^^^^^^^^^^^^^^^^^^
    |                              |
    |                              use of undeclared type `BoundUnaryExpression`
    |                              help: a struct with a similar name exists: `BinaryExpression`

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:143:8
    |
143 |       Ok(BoundPredicate::Unary(BoundUnaryExpression::new(
    |  _____--_^
    | |     |
    | |     arguments to this enum variant are incorrect
144 | |         self.op,
145 | |         bound_term,
146 | |     )))
    | |______^ expected `UnaryExpression<<T as Bind>::Bound>`, found `BoundPredicate`
    |
    = note: expected struct `predicate::UnaryExpression<<T as Bind>::Bound>`
                 found enum `predicate::BoundPredicate`
help: the type constructed contains `predicate::BoundPredicate` due to the type of the argument passed
   --> crates/iceberg/src/expr/predicate.rs:143:5
    |
143 |        Ok(BoundPredicate::Unary(BoundUnaryExpression::new(
    |  ______^__-
    | | _____|
    | ||
144 | ||         self.op,
145 | ||         bound_term,
146 | ||     )))
    | ||______-^
    | |_______|
    |         this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5

Some errors have detailed explanations: E0308, E0433, E0599.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `iceberg` (lib) due to 8 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 8 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0599]: no method named `field` found for associated type `<T as Bind>::Bound` in the current scope
   --> crates/iceberg/src/expr/predicate.rs:115:27
    |
115 |             if bound_term.field().required {
    |                           ^^^^^ method not found in `<T as Bind>::Bound`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `spec::schema::SchemaVisitor` defines an item `field`, perhaps you need to implement it
   --> crates/iceberg/src/spec/schema.rs:365:1
    |
365 | pub trait SchemaVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:116:27
    |
116 |                 return Ok(BoundPredicate::AlwaysFalse);
    |                        -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `UnaryExpression<<T as Bind>::Bound>`, found `BoundPredicate`
    |                        |
    |                        arguments to this enum variant are incorrect
    |
    = note: expected struct `predicate::UnaryExpression<<T as Bind>::Bound>`
                 found enum `predicate::BoundPredicate`
help: the type constructed contains `predicate::BoundPredicate` due to the type of the argument passed
   --> crates/iceberg/src/expr/predicate.rs:116:24
    |
116 |                 return Ok(BoundPredicate::AlwaysFalse);
    |                        ^^^---------------------------^
    |                           |
    |                           this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5

error[E0599]: no method named `field` found for associated type `<T as Bind>::Bound` in the current scope
   --> crates/iceberg/src/expr/predicate.rs:120:27
    |
120 |             if bound_term.field().required {
    |                           ^^^^^ method not found in `<T as Bind>::Bound`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `spec::schema::SchemaVisitor` defines an item `field`, perhaps you need to implement it
   --> crates/iceberg/src/spec/schema.rs:365:1
    |
365 | pub trait SchemaVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:121:27
    |
121 |                 return Ok(BoundPredicate::AlwaysTrue);
    |                        -- ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `UnaryExpression<<T as Bind>::Bound>`, found `BoundPredicate`
    |                        |
    |                        arguments to this enum variant are incorrect
    |
    = note: expected struct `predicate::UnaryExpression<<T as Bind>::Bound>`
                 found enum `predicate::BoundPredicate`
help: the type constructed contains `predicate::BoundPredicate` due to the type of the argument passed
   --> crates/iceberg/src/expr/predicate.rs:121:24
    |
121 |                 return Ok(BoundPredicate::AlwaysTrue);
    |                        ^^^--------------------------^
    |                           |
    |                           this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5

error[E0599]: no method named `field` found for associated type `<T as Bind>::Bound` in the current scope
   --> crates/iceberg/src/expr/predicate.rs:125:28
    |
125 |             if !bound_term.field().field_type.is_floating_type() {
    |                            ^^^^^ method not found in `<T as Bind>::Bound`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `spec::schema::SchemaVisitor` defines an item `field`, perhaps you need to implement it
   --> crates/iceberg/src/spec/schema.rs:365:1
    |
365 | pub trait SchemaVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `field` found for associated type `<T as Bind>::Bound` in the current scope
   --> crates/iceberg/src/expr/predicate.rs:130:36
    |
130 |                         bound_term.field().field_type
    |                                    ^^^^^ method not found in `<T as Bind>::Bound`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `spec::schema::SchemaVisitor` defines an item `field`, perhaps you need to implement it
   --> crates/iceberg/src/spec/schema.rs:365:1
    |
365 | pub trait SchemaVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: use of undeclared type `BoundUnaryExpression`
   --> crates/iceberg/src/expr/predicate.rs:143:30
    |
143 |     Ok(BoundPredicate::Unary(BoundUnaryExpression::new(
    |                              ^^^^^^^^^^^^^^^^^^^^
    |                              |
    |                              use of undeclared type `BoundUnaryExpression`
    |                              help: a struct with a similar name exists: `BinaryExpression`

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:143:8
    |
143 |       Ok(BoundPredicate::Unary(BoundUnaryExpression::new(
    |  _____--_^
    | |     |
    | |     arguments to this enum variant are incorrect
144 | |         self.op,
145 | |         bound_term,
146 | |     )))
    | |______^ expected `UnaryExpression<<T as Bind>::Bound>`, found `BoundPredicate`
    |
    = note: expected struct `predicate::UnaryExpression<<T as Bind>::Bound>`
                 found enum `predicate::BoundPredicate`
help: the type constructed contains `predicate::BoundPredicate` due to the type of the argument passed
   --> crates/iceberg/src/expr/predicate.rs:143:5
    |
143 |        Ok(BoundPredicate::Unary(BoundUnaryExpression::new(
    |  ______^__-
    | | _____|
    | ||
144 | ||         self.op,
145 | ||         bound_term,
146 | ||     )))
    | ||______-^
    | |_______|
    |         this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5

Some errors have detailed explanations: E0308, E0433, E0599.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `iceberg` (lib) due to 8 previous errors


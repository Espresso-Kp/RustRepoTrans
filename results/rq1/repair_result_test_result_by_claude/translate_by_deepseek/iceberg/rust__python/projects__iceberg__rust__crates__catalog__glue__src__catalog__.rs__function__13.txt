Fail
file path is :
projects/iceberg/rust/crates/catalog/glue/src/catalog.rs

output is:



error is :
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
error[E0599]: no method named `identifier_to_database_and_table` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:462:44
    |
462 |     let (database_name, table_name) = self.identifier_to_database_and_table(table)?;
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0277]: `?` couldn't convert the error to `iceberg::Error`
   --> crates/catalog/glue/src/catalog.rs:467:17
    |
467 |         .build()?;
    |                 ^ the trait `From<aws_sdk_glue::error::BuildError>` is not implemented for `iceberg::Error`, which is required by `std::result::Result<(), iceberg::Error>: FromResidual<std::result::Result<Infallible, aws_sdk_glue::error::BuildError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <iceberg::Error as From<reqwest::error::Error>>
              <iceberg::Error as From<serde_json::Error>>
              <iceberg::Error as From<uuid::Error>>
              <iceberg::Error as From<url::parser::ParseError>>
              <iceberg::Error as From<rust_decimal::error::Error>>
              <iceberg::Error as From<opendal::types::error::Error>>
              <iceberg::Error as From<apache_avro::error::Error>>
              <iceberg::Error as From<chrono::format::ParseError>>
            and 5 others
    = note: required for `std::result::Result<(), iceberg::Error>` to implement `FromResidual<std::result::Result<Infallible, aws_sdk_glue::error::BuildError>>`

error[E0277]: `?` couldn't convert the error to `iceberg::Error`
   --> crates/catalog/glue/src/catalog.rs:467:17
    |
467 |         .build()?;
    |                 ^ the trait `From<aws_sdk_glue::error::BuildError>` is not implemented for `iceberg::Error`, which is required by `Result<(), iceberg::Error>: FromResidual<Result<Infallible, aws_sdk_glue::error::BuildError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <iceberg::Error as From<reqwest::error::Error>>
              <iceberg::Error as From<serde_json::Error>>
              <iceberg::Error as From<uuid::Error>>
              <iceberg::Error as From<url::parser::ParseError>>
              <iceberg::Error as From<rust_decimal::error::Error>>
              <iceberg::Error as From<opendal::types::error::Error>>
              <iceberg::Error as From<apache_avro::error::Error>>
              <iceberg::Error as From<chrono::format::ParseError>>
            and 5 others
    = note: required for `Result<(), iceberg::Error>` to implement `FromResidual<Result<Infallible, aws_sdk_glue::error::BuildError>>`

error[E0061]: this method takes 0 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/utils.rs:280:22
    |
280 |             $builder.catalog_id(catalog_id)
    |                      ^^^^^^^^^^ ---------- unexpected argument of type `&std::string::String`
    |
   ::: crates/catalog/glue/src/catalog.rs:469:30
    |
469 |     let delete_table_input = with_catalog_id!(delete_table_input, self.config);
    |                              ------------------------------------------------- in this macro invocation
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/operation/delete_table/_delete_table_input.rs:17:12
    |
17  |     pub fn catalog_id(&self) -> ::std::option::Option<&str> {
    |            ^^^^^^^^^^
    = note: this error originates in the macro `with_catalog_id` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: `if` and `else` have incompatible types
   --> crates/catalog/glue/src/catalog.rs:469:47
    |
469 |       let delete_table_input = with_catalog_id!(delete_table_input, self.config);
    |                                                 ^^^^^^^^^^^^^^^^^^ expected `Option<&str>`, found `DeleteTableInput`
    |
   ::: crates/catalog/glue/src/utils.rs:279:9
    |
279 | /         if let Some(catalog_id) = &$config.catalog_id {
280 | |             $builder.catalog_id(catalog_id)
    | |             ------------------------------- expected because of this
281 | |         } else {
282 | |             $builder
283 | |         }
    | |_________- `if` and `else` have incompatible types
    |
    = note: expected enum `std::option::Option<&str>`
             found struct `DeleteTableInput`

error[E0599]: no method named `set_input` found for struct `DeleteTableFluentBuilder` in the current scope
   --> crates/catalog/glue/src/catalog.rs:471:40
    |
471 |     match self.client.0.delete_table().set_input(delete_table_input).send().await {
    |                                        ^^^^^^^^^ help: there is a method with a similar name: `as_input`

error[E0282]: type annotations needed
   --> crates/catalog/glue/src/catalog.rs:474:26
    |
474 |             if err.err().is_entity_not_found_exception() {
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `E`

error[E0599]: no variant or associated item named `NoSuchTable` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:476:32
    |
476 |                     ErrorKind::NoSuchTable,
    |                                ^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

Some errors have detailed explanations: E0061, E0277, E0282, E0308, E0599.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `iceberg-catalog-glue` (lib) due to 7 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg-catalog-glue` (lib test) due to 7 previous errors

   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
error[E0599]: no method named `identifier_to_database_and_table` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:462:44
    |
462 |     let (database_name, table_name) = self.identifier_to_database_and_table(table)?;
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0277]: `?` couldn't convert the error to `iceberg::Error`
   --> crates/catalog/glue/src/catalog.rs:467:17
    |
467 |         .build()?;
    |                 ^ the trait `From<aws_sdk_glue::error::BuildError>` is not implemented for `iceberg::Error`, which is required by `Result<(), iceberg::Error>: FromResidual<Result<Infallible, aws_sdk_glue::error::BuildError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <iceberg::Error as From<reqwest::error::Error>>
              <iceberg::Error as From<serde_json::Error>>
              <iceberg::Error as From<uuid::Error>>
              <iceberg::Error as From<url::parser::ParseError>>
              <iceberg::Error as From<rust_decimal::error::Error>>
              <iceberg::Error as From<opendal::types::error::Error>>
              <iceberg::Error as From<apache_avro::error::Error>>
              <iceberg::Error as From<chrono::format::ParseError>>
            and 5 others
    = note: required for `Result<(), iceberg::Error>` to implement `FromResidual<Result<Infallible, aws_sdk_glue::error::BuildError>>`

error[E0061]: this method takes 0 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/utils.rs:280:22
    |
280 |             $builder.catalog_id(catalog_id)
    |                      ^^^^^^^^^^ ---------- unexpected argument of type `&std::string::String`
    |
   ::: crates/catalog/glue/src/catalog.rs:469:30
    |
469 |     let delete_table_input = with_catalog_id!(delete_table_input, self.config);
    |                              ------------------------------------------------- in this macro invocation
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/operation/delete_table/_delete_table_input.rs:17:12
    |
17  |     pub fn catalog_id(&self) -> ::std::option::Option<&str> {
    |            ^^^^^^^^^^
    = note: this error originates in the macro `with_catalog_id` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: `if` and `else` have incompatible types
   --> crates/catalog/glue/src/catalog.rs:469:47
    |
469 |       let delete_table_input = with_catalog_id!(delete_table_input, self.config);
    |                                                 ^^^^^^^^^^^^^^^^^^ expected `Option<&str>`, found `DeleteTableInput`
    |
   ::: crates/catalog/glue/src/utils.rs:279:9
    |
279 | /         if let Some(catalog_id) = &$config.catalog_id {
280 | |             $builder.catalog_id(catalog_id)
    | |             ------------------------------- expected because of this
281 | |         } else {
282 | |             $builder
283 | |         }
    | |_________- `if` and `else` have incompatible types
    |
    = note: expected enum `std::option::Option<&str>`
             found struct `DeleteTableInput`

error[E0599]: no method named `set_input` found for struct `DeleteTableFluentBuilder` in the current scope
   --> crates/catalog/glue/src/catalog.rs:471:40
    |
471 |     match self.client.0.delete_table().set_input(delete_table_input).send().await {
    |                                        ^^^^^^^^^ help: there is a method with a similar name: `as_input`

error[E0282]: type annotations needed
   --> crates/catalog/glue/src/catalog.rs:474:26
    |
474 |             if err.err().is_entity_not_found_exception() {
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `E`

error[E0599]: no variant or associated item named `NoSuchTable` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:476:32
    |
476 |                     ErrorKind::NoSuchTable,
    |                                ^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

Some errors have detailed explanations: E0061, E0277, E0282, E0308, E0599.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `iceberg-catalog-glue` (lib) due to 7 previous errors


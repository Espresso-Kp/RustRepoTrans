Fail
file path is :
projects/iceberg/rust/crates/catalog/glue/src/catalog.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-catalog-hms v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/hms)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
error[E0449]: visibility qualifiers are not permitted here
   --> crates/catalog/glue/src/catalog.rs:295:1
    |
295 | pub async fn list_tables(&self, namespace: &NamespaceIdent) -> Result<Vec<TableIdent>> {
    | ^^^
    |
    = note: trait items always share the visibility of their trait

error[E0407]: method `is_glue_iceberg_table` is not a member of trait `Catalog`
   --> crates/catalog/glue/src/catalog.rs:334:1
    |
334 | / fn is_glue_iceberg_table(&self, table: &aws_sdk_glue::types::Table) -> bool {
335 | |         // Implement the logic to check if the table is an Iceberg table
336 | |         // This is a placeholder implementation
337 | |         table.parameters().map_or(false, |params| params.contains_key("table_type") && params["table_type"] == "ICEBERG")
338 | |     }
    | |_____^ not a member of trait `Catalog`

error[E0407]: method `to_table_id` is not a member of trait `Catalog`
   --> crates/catalog/glue/src/catalog.rs:339:1
    |
339 | / fn to_table_id(&self, table: &aws_sdk_glue::types::Table) -> TableIdent {
340 | |         // Implement the logic to convert Glue table to TableIdent
341 | |         // This is a placeholder implementation
342 | |         let name = table.name().unwrap_or_default().to_string();
343 | |         let namespace = NamespaceIdent::new(vec![table.database_name().unwrap_or_default().to_string()]);
344 | |         TableIdent::new(namespace, name)
345 | |     }
    | |_____^ not a member of trait `Catalog`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:298:29
    |
298 |         let database_name = convert_to_database(namespace)?;
    |                             ^^^^^^^^^^^^^^^^^^^----------- an argument of type `&HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
298 |         let database_name = convert_to_database(namespace, /* &HashMap<std::string::String, std::string::String> */)?;
    |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the trait bound `std::string::String: From<DatabaseInput>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:306:32
    |
306 |                 .database_name(database_name.clone())
    |                  ------------- ^^^^^^^^^^^^^^^^^^^^^ the trait `From<DatabaseInput>` is not implemented for `std::string::String`, which is required by `DatabaseInput: Into<std::string::String>`
    |                  |
    |                  required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `DatabaseInput` to implement `Into<std::string::String>`
note: required by a bound in `GetTablesFluentBuilder::database_name`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/operation/get_tables/builders.rs:126:48
    |
126 |     pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `GetTablesFluentBuilder::database_name`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:312:20
    |
312 |             if let Some(table_list) = response.table_list() {
    |                    ^^^^^^^^^^^^^^^^   --------------------- this expression has type `&[aws_sdk_glue::types::Table]`
    |                    |
    |                    expected `[Table]`, found `Option<_>`
    |
    = note: expected slice `[aws_sdk_glue::types::Table]`
                found enum `std::option::Option<_>`

error[E0282]: type annotations needed
   --> crates/catalog/glue/src/catalog.rs:315:26
    |
315 |                         .iter()
    |                          ^^^^ cannot infer type for type parameter `T` declared on the enum `Option`

error[E0599]: no method named `is_glue_iceberg_table` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:316:46
    |
316 |                         .filter(|table| self.is_glue_iceberg_table(table))
    |                                              ^^^^^^^^^^^^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0599]: no method named `to_table_id` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:317:43
    |
317 |                         .map(|table| self.to_table_id(table))
    |                                           ^^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0599]: no method named `unwrap_or_default` found for reference `&str` in the current scope
   --> crates/catalog/glue/src/catalog.rs:342:33
    |
342 |         let name = table.name().unwrap_or_default().to_string();
    |                                 ^^^^^^^^^^^^^^^^^ method not found in `&str`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:343:45
    |
343 |         let namespace = NamespaceIdent::new(vec![table.database_name().unwrap_or_default().to_string()]);
    |                         ------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `String`, found `Vec<String>`
    |                         |
    |                         arguments to this function are incorrect
    |
    = note: expected struct `std::string::String`
               found struct `Vec<std::string::String>`
note: associated function defined here
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:106:12
    |
106 |     pub fn new(name: String) -> Self {
    |            ^^^

Some errors have detailed explanations: E0061, E0277, E0282, E0308, E0407, E0449, E0599.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `iceberg-catalog-glue` (lib) due to 11 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:298:29
    |
298 |         let database_name = convert_to_database(namespace)?;
    |                             ^^^^^^^^^^^^^^^^^^^----------- an argument of type `&std::collections::HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
298 |         let database_name = convert_to_database(namespace, /* &std::collections::HashMap<std::string::String, std::string::String> */)?;
    |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error: could not compile `iceberg-catalog-glue` (lib test) due to 11 previous errors

   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
error[E0449]: visibility qualifiers are not permitted here
   --> crates/catalog/glue/src/catalog.rs:295:1
    |
295 | pub async fn list_tables(&self, namespace: &NamespaceIdent) -> Result<Vec<TableIdent>> {
    | ^^^
    |
    = note: trait items always share the visibility of their trait

error[E0407]: method `is_glue_iceberg_table` is not a member of trait `Catalog`
   --> crates/catalog/glue/src/catalog.rs:334:1
    |
334 | / fn is_glue_iceberg_table(&self, table: &aws_sdk_glue::types::Table) -> bool {
335 | |         // Implement the logic to check if the table is an Iceberg table
336 | |         // This is a placeholder implementation
337 | |         table.parameters().map_or(false, |params| params.contains_key("table_type") && params["table_type"] == "ICEBERG")
338 | |     }
    | |_____^ not a member of trait `Catalog`

error[E0407]: method `to_table_id` is not a member of trait `Catalog`
   --> crates/catalog/glue/src/catalog.rs:339:1
    |
339 | / fn to_table_id(&self, table: &aws_sdk_glue::types::Table) -> TableIdent {
340 | |         // Implement the logic to convert Glue table to TableIdent
341 | |         // This is a placeholder implementation
342 | |         let name = table.name().unwrap_or_default().to_string();
343 | |         let namespace = NamespaceIdent::new(vec![table.database_name().unwrap_or_default().to_string()]);
344 | |         TableIdent::new(namespace, name)
345 | |     }
    | |_____^ not a member of trait `Catalog`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:298:29
    |
298 |         let database_name = convert_to_database(namespace)?;
    |                             ^^^^^^^^^^^^^^^^^^^----------- an argument of type `&HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
298 |         let database_name = convert_to_database(namespace, /* &HashMap<std::string::String, std::string::String> */)?;
    |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the trait bound `std::string::String: From<DatabaseInput>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:306:32
    |
306 |                 .database_name(database_name.clone())
    |                  ------------- ^^^^^^^^^^^^^^^^^^^^^ the trait `From<DatabaseInput>` is not implemented for `std::string::String`, which is required by `DatabaseInput: Into<std::string::String>`
    |                  |
    |                  required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `DatabaseInput` to implement `Into<std::string::String>`
note: required by a bound in `GetTablesFluentBuilder::database_name`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/operation/get_tables/builders.rs:126:48
    |
126 |     pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `GetTablesFluentBuilder::database_name`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:312:20
    |
312 |             if let Some(table_list) = response.table_list() {
    |                    ^^^^^^^^^^^^^^^^   --------------------- this expression has type `&[aws_sdk_glue::types::Table]`
    |                    |
    |                    expected `[Table]`, found `Option<_>`
    |
    = note: expected slice `[aws_sdk_glue::types::Table]`
                found enum `std::option::Option<_>`

error[E0282]: type annotations needed
   --> crates/catalog/glue/src/catalog.rs:315:26
    |
315 |                         .iter()
    |                          ^^^^ cannot infer type for type parameter `T` declared on the enum `Option`

error[E0599]: no method named `is_glue_iceberg_table` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:316:46
    |
316 |                         .filter(|table| self.is_glue_iceberg_table(table))
    |                                              ^^^^^^^^^^^^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0599]: no method named `to_table_id` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:317:43
    |
317 |                         .map(|table| self.to_table_id(table))
    |                                           ^^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0599]: no method named `unwrap_or_default` found for reference `&str` in the current scope
   --> crates/catalog/glue/src/catalog.rs:342:33
    |
342 |         let name = table.name().unwrap_or_default().to_string();
    |                                 ^^^^^^^^^^^^^^^^^ method not found in `&str`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:343:45
    |
343 |         let namespace = NamespaceIdent::new(vec![table.database_name().unwrap_or_default().to_string()]);
    |                         ------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `String`, found `Vec<String>`
    |                         |
    |                         arguments to this function are incorrect
    |
    = note: expected struct `std::string::String`
               found struct `Vec<std::string::String>`
note: associated function defined here
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:106:12
    |
106 |     pub fn new(name: String) -> Self {
    |            ^^^

Some errors have detailed explanations: E0061, E0277, E0282, E0308, E0407, E0449, E0599.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `iceberg-catalog-glue` (lib) due to 11 previous errors


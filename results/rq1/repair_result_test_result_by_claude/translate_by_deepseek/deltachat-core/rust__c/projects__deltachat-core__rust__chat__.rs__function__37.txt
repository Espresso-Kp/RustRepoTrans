Fail
file path is :
projects/deltachat-core/rust/src/chat.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0277]: `dyn rusqlite::ToSql` cannot be shared between threads safely
   --> src/chat.rs:997:26
    |
997 |         sql.count(query, params![MessageState::InFresh as i32]).await
    |             -----        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn rusqlite::ToSql` cannot be shared between threads safely
    |             |
    |             required by a bound introduced by this call
    |
    = help: within `[&dyn rusqlite::ToSql]`, the trait `std::marker::Sync` is not implemented for `dyn rusqlite::ToSql`, which is required by `&[&dyn rusqlite::ToSql]: std::marker::Send`
    = note: required because it appears within the type `&dyn rusqlite::ToSql`
    = note: required because it appears within the type `[&dyn rusqlite::ToSql]`
    = note: required for `&[&dyn rusqlite::ToSql]` to implement `std::marker::Send`
note: required by a bound in `Sql::count`
   --> src/sql.rs:446:76
    |
446 |     pub async fn count(&self, query: &str, params: impl rusqlite::Params + Send) -> Result<usize> {
    |                                                                            ^^^^ required by this bound in `Sql::count`

error[E0277]: `dyn rusqlite::ToSql` cannot be shared between threads safely
    --> src/chat.rs:1003:26
     |
1003 |         sql.count(query, params![MessageState::InFresh as i32, chat_id.0]).await
     |             -----        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn rusqlite::ToSql` cannot be shared between threads safely
     |             |
     |             required by a bound introduced by this call
     |
     = help: within `[&dyn rusqlite::ToSql]`, the trait `std::marker::Sync` is not implemented for `dyn rusqlite::ToSql`, which is required by `&[&dyn rusqlite::ToSql]: std::marker::Send`
     = note: required because it appears within the type `&dyn rusqlite::ToSql`
     = note: required because it appears within the type `[&dyn rusqlite::ToSql]`
     = note: required for `&[&dyn rusqlite::ToSql]` to implement `std::marker::Send`
note: required by a bound in `Sql::count`
    --> src/sql.rs:446:76
     |
446  |     pub async fn count(&self, query: &str, params: impl rusqlite::Params + Send) -> Result<usize> {
     |                                                                            ^^^^ required by this bound in `Sql::count`

error[E0277]: `dyn rusqlite::ToSql` cannot be shared between threads safely
   --> src/chat.rs:997:26
    |
997 |         sql.count(query, params![MessageState::InFresh as i32]).await
    |             -----        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn rusqlite::ToSql` cannot be shared between threads safely
    |             |
    |             required by a bound introduced by this call
    |
    = help: within `[&dyn rusqlite::ToSql]`, the trait `std::marker::Sync` is not implemented for `dyn rusqlite::ToSql`, which is required by `&[&dyn rusqlite::ToSql]: std::marker::Send`
    = note: required because it appears within the type `&dyn rusqlite::ToSql`
    = note: required because it appears within the type `[&dyn rusqlite::ToSql]`
    = note: required for `&[&dyn rusqlite::ToSql]` to implement `std::marker::Send`
note: required by a bound in `sql::Sql::count`
   --> src/sql.rs:446:76
    |
446 |     pub async fn count(&self, query: &str, params: impl rusqlite::Params + Send) -> Result<usize> {
    |                                                                            ^^^^ required by this bound in `Sql::count`

error[E0277]: `dyn rusqlite::ToSql` cannot be shared between threads safely
    --> src/chat.rs:1003:26
     |
1003 |         sql.count(query, params![MessageState::InFresh as i32, chat_id.0]).await
     |             -----        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn rusqlite::ToSql` cannot be shared between threads safely
     |             |
     |             required by a bound introduced by this call
     |
     = help: within `[&dyn rusqlite::ToSql]`, the trait `std::marker::Sync` is not implemented for `dyn rusqlite::ToSql`, which is required by `&[&dyn rusqlite::ToSql]: std::marker::Send`
     = note: required because it appears within the type `&dyn rusqlite::ToSql`
     = note: required because it appears within the type `[&dyn rusqlite::ToSql]`
     = note: required for `&[&dyn rusqlite::ToSql]` to implement `std::marker::Send`
note: required by a bound in `sql::Sql::count`
    --> src/sql.rs:446:76
     |
446  |     pub async fn count(&self, query: &str, params: impl rusqlite::Params + Send) -> Result<usize> {
     |                                                                            ^^^^ required by this bound in `Sql::count`

For more information about this error, try `rustc --explain E0277`.
error: could not compile `deltachat` (lib) due to 2 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> src/events/chatlist_events.rs:486:33
    |
486 |         assert!(chat_id_for_bob.get_fresh_msg_cnt(&bob).await? >= 1);
    |                                 ^^^^^^^^^^^^^^^^^------ an argument of type `chat::ChatId` is missing
    |
note: method defined here
   --> src/chat.rs:984:14
    |
984 | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
    |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
    |
486 |         assert!(chat_id_for_bob.get_fresh_msg_cnt(&bob, /* chat::ChatId */).await? >= 1);
    |                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5764:45
     |
5764 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 0);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5764 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 0);
     |                                                              ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5767:45
     |
5767 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 1);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5767 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 1);
     |                                                              ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5770:45
     |
5770 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 1);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5770 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 1);
     |                                                              ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5782:32
     |
5782 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t).await?, 2);
     |                                ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5782 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 2);
     |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5783:35
     |
5783 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t).await?, 3);
     |                                   ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5783 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 3);
     |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5784:45
     |
5784 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 2);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5784 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 2);
     |                                                              ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5788:32
     |
5788 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t).await?, 2);
     |                                ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5788 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 2);
     |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5789:35
     |
5789 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t).await?, 0);
     |                                   ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5789 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 0);
     |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5790:45
     |
5790 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 1);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5790 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 1);
     |                                                              ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5794:32
     |
5794 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t).await?, 2);
     |                                ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5794 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 2);
     |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5795:35
     |
5795 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t).await?, 1);
     |                                   ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5795 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 1);
     |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5796:45
     |
5796 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 2);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5796 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 2);
     |                                                              ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5802:33
     |
5802 |         assert_eq!(dave_chat_id.get_fresh_msg_cnt(&t).await?, 1);
     |                                 ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5802 |         assert_eq!(dave_chat_id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 1);
     |                                                  ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5803:45
     |
5803 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 2);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5803 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 2);
     |                                                              ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5808:32
     |
5808 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t).await?, 0);
     |                                ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5808 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 0);
     |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5809:35
     |
5809 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t).await?, 0);
     |                                   ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5809 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 0);
     |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5810:33
     |
5810 |         assert_eq!(dave_chat_id.get_fresh_msg_cnt(&t).await?, 1);
     |                                 ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5810 |         assert_eq!(dave_chat_id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 1);
     |                                                  ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5811:45
     |
5811 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 0);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5811 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 0);
     |                                                              ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6224:28
     |
6224 |         assert_eq!(chat.id.get_fresh_msg_cnt(&t).await?, 1);
     |                            ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
6224 |         assert_eq!(chat.id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6242:28
     |
6242 |         assert_eq!(chat.id.get_fresh_msg_cnt(&t).await?, 0);
     |                            ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
6242 |         assert_eq!(chat.id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 0);
     |                                             ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6276:28
     |
6276 |         assert_eq!(chat_id.get_fresh_msg_cnt(&t).await?, 1);
     |                            ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
6276 |         assert_eq!(chat_id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6357:28
     |
6357 |         assert_eq!(chat_id.get_fresh_msg_cnt(&alice).await?, 1);
     |                            ^^^^^^^^^^^^^^^^^-------- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
6357 |         assert_eq!(chat_id.get_fresh_msg_cnt(&alice, /* chat::ChatId */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6369:28
     |
6369 |         assert_eq!(chat_id.get_fresh_msg_cnt(&alice).await?, 1);
     |                            ^^^^^^^^^^^^^^^^^-------- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
6369 |         assert_eq!(chat_id.get_fresh_msg_cnt(&alice, /* chat::ChatId */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1461:27
     |
1461 |         assert_eq!(bob.id.get_fresh_msg_cnt(&t).await.unwrap(), 1);
     |                           ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
1461 |         assert_eq!(bob.id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await.unwrap(), 1);
     |                                            ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1467:30
     |
1467 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t).await.unwrap(), 2);
     |                              ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
1467 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await.unwrap(), 2);
     |                                               ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1474:28
     |
1474 |         assert_eq!(dave.id.get_fresh_msg_cnt(&t).await.unwrap(), 3);
     |                            ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
1474 |         assert_eq!(dave.id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await.unwrap(), 3);
     |                                             ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1481:30
     |
1481 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t).await.unwrap(), 2);
     |                              ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
1481 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await.unwrap(), 2);
     |                                               ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1489:30
     |
1489 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t).await.unwrap(), 3);
     |                              ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
1489 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await.unwrap(), 3);
     |                                               ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1496:30
     |
1496 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t).await.unwrap(), 3);
     |                              ^^^^^^^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
1496 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t, /* chat::ChatId */).await.unwrap(), 3);
     |                                               ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/message.rs:2394:34
     |
2394 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice).await?, 2);
     |                                  ^^^^^^^^^^^^^^^^^-------- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
2394 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice, /* chat::ChatId */).await?, 2);
     |                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/message.rs:2403:34
     |
2403 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice).await?, 2);
     |                                  ^^^^^^^^^^^^^^^^^-------- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
2403 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice, /* chat::ChatId */).await?, 2);
     |                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/message.rs:2409:34
     |
2409 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice).await?, 1);
     |                                  ^^^^^^^^^^^^^^^^^-------- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
2409 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice, /* chat::ChatId */).await?, 1);
     |                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/message.rs:2415:34
     |
2415 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice).await?, 0);
     |                                  ^^^^^^^^^^^^^^^^^-------- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:984:14
     |
984  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
2415 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice, /* chat::ChatId */).await?, 0);
     |                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0061, E0277.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `deltachat` (lib test) due to 36 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


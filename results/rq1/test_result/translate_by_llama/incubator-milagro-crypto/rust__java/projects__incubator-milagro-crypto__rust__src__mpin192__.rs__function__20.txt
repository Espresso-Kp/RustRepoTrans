Fail
file path is :
projects/incubator-milagro-crypto/rust/src/mpin192.rs

output is:


error is :
   Compiling amcl v0.3.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/incubator-milagro-crypto/rust)
error[E0425]: cannot find value `CURVE_Order` in module `rom`
   --> src/./mpin192.rs:534:37
    |
534 |       let mut r = Big::new_ints(&rom::CURVE_Order);
    |                                       ^^^^^^^^^^^ help: a constant with a similar name exists: `CURVE_ORDER`
    |
   ::: src/./roms/rom_bls24_64.rs:77:1
    |
77  | / pub const CURVE_ORDER: [Chunk; NLEN] = [
78  | |     0x1A08FFF0000001,
79  | |     0x1E7033FF551190,
80  | |     0x6ADE7EE322DDAF,
...   |
86  | |     0x0,
87  | | ];
    | |__- similarly named constant `CURVE_ORDER` defined here

error[E0423]: expected value, found builtin type `u8`
   --> src/./mpin192.rs:560:22
    |
560 |         let mut h = [u8; 64];
    |                      ^^ not a value

error[E0425]: cannot find function, tuple struct or tuple variant `G1mul` in module `pair192`
   --> src/./mpin192.rs:564:26
    |
564 |             P = pair192::G1mul(&P, &x);
    |                          ^^^^^ help: a function with a similar name exists: `g1mul`
    |
   ::: src/./pair192.rs:464:1
    |
464 | pub fn g1mul(P: &ECP, e: &mut Big) -> ECP {
    | ----------------------------------------- similarly named function `g1mul` defined here

error[E0425]: cannot find function, tuple struct or tuple variant `G1mul` in module `pair192`
   --> src/./mpin192.rs:566:26
    |
566 |             W = pair192::G1mul(&W, &x);
    |                          ^^^^^ help: a function with a similar name exists: `g1mul`
    |
   ::: src/./pair192.rs:464:1
    |
464 | pub fn g1mul(P: &ECP, e: &mut Big) -> ECP {
    | ----------------------------------------- similarly named function `g1mul` defined here

error[E0425]: cannot find function, tuple struct or tuple variant `G1mul` in module `pair192`
   --> src/./mpin192.rs:570:26
    |
570 |             P = pair192::G1mul(&P, &x);
    |                          ^^^^^ help: a function with a similar name exists: `g1mul`
    |
   ::: src/./pair192.rs:464:1
    |
464 | pub fn g1mul(P: &ECP, e: &mut Big) -> ECP {
    | ----------------------------------------- similarly named function `g1mul` defined here

error[E0425]: cannot find function, tuple struct or tuple variant `G1mul` in module `pair192`
   --> src/./mpin192.rs:578:26
    |
578 |             P = pair192::G1mul(&P, &x);
    |                          ^^^^^ help: a function with a similar name exists: `g1mul`
    |
   ::: src/./pair192.rs:464:1
    |
464 | pub fn g1mul(P: &ECP, e: &mut Big) -> ECP {
    | ----------------------------------------- similarly named function `g1mul` defined here

error[E0308]: mismatched types
   --> src/./mpin192.rs:542:20
    |
542 |         x.to_bytes(x);
    |           -------- ^ expected `&mut [u8]`, found `Big`
    |           |
    |           arguments to this method are incorrect
    |
note: method defined here
   --> src/./big.rs:510:12
    |
510 |     pub fn to_bytes(&self, b: &mut [u8]) {
    |            ^^^^^^^^        ------------

error[E0308]: mismatched types
   --> src/./mpin192.rs:544:29
    |
544 |         x = Big::from_bytes(x);
    |             --------------- ^ expected `&[u8]`, found `Big`
    |             |
    |             arguments to this function are incorrect
    |
note: associated function defined here
   --> src/./big.rs:519:12
    |
519 |     pub fn from_bytes(b: &[u8]) -> Big {
    |            ^^^^^^^^^^ --------

error[E0308]: mismatched types
   --> src/./mpin192.rs:551:12
    |
551 |     pin %= MAXPIN;
    |            ^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot calculate and assign the remainder of `usize` divided by `i32`
   --> src/./mpin192.rs:551:9
    |
551 |     pin %= MAXPIN;
    |         ^^ no implementation for `usize %= i32`
    |
    = help: the trait `RemAssign<i32>` is not implemented for `usize`
    = help: the following other types implement trait `RemAssign<Rhs>`:
              <usize as RemAssign>
              <usize as RemAssign<&usize>>

error[E0308]: mismatched types
    --> src/./mpin192.rs:552:22
     |
552  |     let W = P.pinmul(pin, PBLEN);
     |               ------ ^^^ expected `i32`, found `usize`
     |               |
     |               arguments to this method are incorrect
     |
note: method defined here
    --> src/./ecp.rs:1048:12
     |
1048 |     pub fn pinmul(&self, e: i32, bts: i32) -> ECP {
     |            ^^^^^^        ------
help: you can convert a `usize` to an `i32` and panic if the converted value doesn't fit
     |
552  |     let W = P.pinmul(pin.try_into().unwrap(), PBLEN);
     |                         ++++++++++++++++++++

error[E0308]: mismatched types
   --> src/./mpin192.rs:555:37
    |
555 |         let mut W = ECP::from_bytes(permit);
    |                     --------------- ^^^^^^ expected `&[u8]`, found `Option<&[u8]>`
    |                     |
    |                     arguments to this function are incorrect
    |
    = note: expected reference `&[u8]`
                    found enum `Option<&[u8]>`
note: associated function defined here
   --> src/./ecp.rs:469:12
    |
469 |     pub fn from_bytes(b: &[u8]) -> ECP {
    |            ^^^^^^^^^^ --------
help: consider using `Option::expect` to unwrap the `Option<&[u8]>` value, panicking if the value is an `Option::None`
    |
555 |         let mut W = ECP::from_bytes(permit.expect("REASON"));
    |                                           +++++++++++++++++

error[E0308]: mismatched types
   --> src/./mpin192.rs:555:37
    |
555 |         let mut W = ECP::from_bytes(permit);
    |                     --------------- ^^^^^^ expected `&[u8]`, found `Option<&[u8]>`
    |                     |
    |                     arguments to this function are incorrect
    |
    = note: expected reference `&[u8]`
                    found enum `std::option::Option<&[u8]>`
note: associated function defined here
   --> src/./ecp.rs:469:12
    |
469 |     pub fn from_bytes(b: &[u8]) -> ECP {
    |            ^^^^^^^^^^ --------
help: consider using `Option::expect` to unwrap the `std::option::Option<&[u8]>` value, panicking if the value is an `Option::None`
    |
555 |         let mut W = ECP::from_bytes(permit.expect("REASON"));
    |                                           +++++++++++++++++

Some errors have detailed explanations: E0277, E0308, E0423, E0425.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `amcl` (lib) due to 12 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `amcl` (lib test) due to 12 previous errors


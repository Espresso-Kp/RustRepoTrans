Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/iceberg/rust/crates/iceberg)
error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:543:48
    |
543 |         mut lhs: Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static>,
    |                                                ^^^^^^               ---------- help: remove this generic argument
    |                                                |
    |                                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:544:48
    |
544 |         mut rhs: Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static>,
    |                                                ^^^^^^               ---------- help: remove this generic argument
    |                                                |
    |                                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:545:47
    |
545 |     ) -> Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static>> {
    |                                               ^^^^^^               ---------- help: remove this generic argument
    |                                               |
    |                                               expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0053]: method `and` has an incompatible type for trait
   --> crates/iceberg/src/arrow/reader.rs:543:18
    |
543 |         mut lhs: Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static>,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                  |
    |                  expected `arrow_schema::ArrowError`, found `error::Error`
    |                  help: change the parameter type to match the trait: `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>`
    |
note: type in trait
   --> crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:35:28
    |
35  |     fn and(&mut self, lhs: Self::T, rhs: Self::T) -> Result<Self::T>;
    |                            ^^^^^^^
    = note: expected signature `fn(&mut PredicateConverter<'_>, Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>) -> std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, _>`
               found signature `fn(&mut PredicateConverter<'_>, Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>, Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>) -> std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>, _>`

error[E0599]: no method named `is_null` found for struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:546:16
    |
546 |         if lhs.is_null() || rhs.is_null() {
    |                ^^^^^^^ method not found in `Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, Error> + Send>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `BoundPredicateVisitor` defines an item `is_null`, perhaps you need to implement it
   --> crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:24:1
    |
24  | pub trait BoundPredicateVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `is_null` found for struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:546:33
    |
546 |         if lhs.is_null() || rhs.is_null() {
    |                                 ^^^^^^^ method not found in `Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, Error> + Send>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `BoundPredicateVisitor` defines an item `is_null`, perhaps you need to implement it
   --> crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:24:1
    |
24  | pub trait BoundPredicateVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `InvalidArgument` found for enum `arrow_schema::ArrowError` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:547:64
    |
547 |             return Ok(Box::new(|_record_batch| Err(ArrowError::InvalidArgument)));
    |                                                                ^^^^^^^^^^^^^^^
    |                                                                |
    |                                                                variant or associated item not found in `ArrowError`
    |                                                                help: there is a variant with a similar name: `InvalidArgumentError`
    |
note: if you're trying to build a new `arrow_schema::ArrowError`, consider using `arrow_schema::ArrowError::from_external_error` which returns `arrow_schema::ArrowError`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-schema-52.1.0/src/error.rs:50:5
    |
50  |     pub fn from_external_error(error: Box<dyn Error + Send + Sync>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `is_true` found for struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:548:23
    |
548 |         } else if lhs.is_true() {
    |                       ^^^^^^^ method not found in `Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, Error> + Send>`

error[E0599]: no method named `is_true` found for struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:550:23
    |
550 |         } else if rhs.is_true() {
    |                       ^^^^^^^ method not found in `Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, Error> + Send>`

error[E0308]: arguments to this function are incorrect
   --> crates/iceberg/src/arrow/reader.rs:557:42
    |
557 |                 (Ok(lhs), Ok(rhs)) => Ok(and(lhs, rhs)),
    |                                          ^^^ ---  --- expected `&BooleanArray`, found `BooleanArray`
    |                                              |
    |                                              expected `&BooleanArray`, found `BooleanArray`
    |
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:254:8
    |
254 | pub fn and(left: &BooleanArray, right: &BooleanArray) -> Result<BooleanArray, ArrowError> {
    |        ^^^
help: consider borrowing here
    |
557 |                 (Ok(lhs), Ok(rhs)) => Ok(and(&lhs, rhs)),
    |                                              +
help: consider borrowing here
    |
557 |                 (Ok(lhs), Ok(rhs)) => Ok(and(lhs, &rhs)),
    |                                                   +

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:557:42
    |
557 |                 (Ok(lhs), Ok(rhs)) => Ok(and(lhs, rhs)),
    |                                       -- ^^^^^^^^^^^^^ expected `BooleanArray`, found `Result<BooleanArray, ArrowError>`
    |                                       |
    |                                       arguments to this enum variant are incorrect
    |
    = note: expected struct `BooleanArray`
                 found enum `std::result::Result<BooleanArray, arrow_schema::ArrowError>`
help: the type constructed contains `std::result::Result<BooleanArray, arrow_schema::ArrowError>` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:557:39
    |
557 |                 (Ok(lhs), Ok(rhs)) => Ok(and(lhs, rhs)),
    |                                       ^^^-------------^
    |                                          |
    |                                          this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: consider using `Result::expect` to unwrap the `std::result::Result<BooleanArray, arrow_schema::ArrowError>` value, panicking if the value is a `Result::Err`
    |
557 |                 (Ok(lhs), Ok(rhs)) => Ok(and(lhs, rhs).expect("REASON")),
    |                                                       +++++++++++++++++

error[E0599]: no variant or associated item named `InvalidArgument` found for enum `arrow_schema::ArrowError` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:38
    |
558 |                 _ => Err(ArrowError::InvalidArgument),
    |                                      ^^^^^^^^^^^^^^^
    |                                      |
    |                                      variant or associated item not found in `ArrowError`
    |                                      help: there is a variant with a similar name: `InvalidArgumentError`
    |
note: if you're trying to build a new `arrow_schema::ArrowError`, consider using `arrow_schema::ArrowError::from_external_error` which returns `arrow_schema::ArrowError`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-schema-52.1.0/src/error.rs:50:5
    |
50  |     pub fn from_external_error(error: Box<dyn Error + Send + Sync>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Some errors have detailed explanations: E0053, E0107, E0308, E0599.
For more information about an error, try `rustc --explain E0053`.
error: could not compile `iceberg` (lib) due to 12 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 12 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/iceberg/rust/crates/iceberg)
error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:543:48
    |
543 |         mut lhs: Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static>,
    |                                                ^^^^^^               ---------- help: remove this generic argument
    |                                                |
    |                                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:544:48
    |
544 |         mut rhs: Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static>,
    |                                                ^^^^^^               ---------- help: remove this generic argument
    |                                                |
    |                                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:545:47
    |
545 |     ) -> Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static>> {
    |                                               ^^^^^^               ---------- help: remove this generic argument
    |                                               |
    |                                               expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0053]: method `and` has an incompatible type for trait
   --> crates/iceberg/src/arrow/reader.rs:543:18
    |
543 |         mut lhs: Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static>,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                  |
    |                  expected `arrow_schema::ArrowError`, found `error::Error`
    |                  help: change the parameter type to match the trait: `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>`
    |
note: type in trait
   --> crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:35:28
    |
35  |     fn and(&mut self, lhs: Self::T, rhs: Self::T) -> Result<Self::T>;
    |                            ^^^^^^^
    = note: expected signature `fn(&mut PredicateConverter<'_>, Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>) -> std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, _>`
               found signature `fn(&mut PredicateConverter<'_>, Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>, Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>) -> std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>, _>`

error[E0599]: no method named `is_null` found for struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:546:16
    |
546 |         if lhs.is_null() || rhs.is_null() {
    |                ^^^^^^^ method not found in `Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, Error> + Send>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `BoundPredicateVisitor` defines an item `is_null`, perhaps you need to implement it
   --> crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:24:1
    |
24  | pub trait BoundPredicateVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `is_null` found for struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:546:33
    |
546 |         if lhs.is_null() || rhs.is_null() {
    |                                 ^^^^^^^ method not found in `Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, Error> + Send>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `BoundPredicateVisitor` defines an item `is_null`, perhaps you need to implement it
   --> crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:24:1
    |
24  | pub trait BoundPredicateVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `InvalidArgument` found for enum `arrow_schema::ArrowError` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:547:64
    |
547 |             return Ok(Box::new(|_record_batch| Err(ArrowError::InvalidArgument)));
    |                                                                ^^^^^^^^^^^^^^^
    |                                                                |
    |                                                                variant or associated item not found in `ArrowError`
    |                                                                help: there is a variant with a similar name: `InvalidArgumentError`
    |
note: if you're trying to build a new `arrow_schema::ArrowError`, consider using `arrow_schema::ArrowError::from_external_error` which returns `arrow_schema::ArrowError`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-schema-52.1.0/src/error.rs:50:5
    |
50  |     pub fn from_external_error(error: Box<dyn Error + Send + Sync>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `is_true` found for struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:548:23
    |
548 |         } else if lhs.is_true() {
    |                       ^^^^^^^ method not found in `Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, Error> + Send>`

error[E0599]: no method named `is_true` found for struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:550:23
    |
550 |         } else if rhs.is_true() {
    |                       ^^^^^^^ method not found in `Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, Error> + Send>`

error[E0308]: arguments to this function are incorrect
   --> crates/iceberg/src/arrow/reader.rs:557:42
    |
557 |                 (Ok(lhs), Ok(rhs)) => Ok(and(lhs, rhs)),
    |                                          ^^^ ---  --- expected `&BooleanArray`, found `BooleanArray`
    |                                              |
    |                                              expected `&BooleanArray`, found `BooleanArray`
    |
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:254:8
    |
254 | pub fn and(left: &BooleanArray, right: &BooleanArray) -> Result<BooleanArray, ArrowError> {
    |        ^^^
help: consider borrowing here
    |
557 |                 (Ok(lhs), Ok(rhs)) => Ok(and(&lhs, rhs)),
    |                                              +
help: consider borrowing here
    |
557 |                 (Ok(lhs), Ok(rhs)) => Ok(and(lhs, &rhs)),
    |                                                   +

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:557:42
    |
557 |                 (Ok(lhs), Ok(rhs)) => Ok(and(lhs, rhs)),
    |                                       -- ^^^^^^^^^^^^^ expected `BooleanArray`, found `Result<BooleanArray, ArrowError>`
    |                                       |
    |                                       arguments to this enum variant are incorrect
    |
    = note: expected struct `BooleanArray`
                 found enum `std::result::Result<BooleanArray, arrow_schema::ArrowError>`
help: the type constructed contains `std::result::Result<BooleanArray, arrow_schema::ArrowError>` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:557:39
    |
557 |                 (Ok(lhs), Ok(rhs)) => Ok(and(lhs, rhs)),
    |                                       ^^^-------------^
    |                                          |
    |                                          this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: consider using `Result::expect` to unwrap the `std::result::Result<BooleanArray, arrow_schema::ArrowError>` value, panicking if the value is a `Result::Err`
    |
557 |                 (Ok(lhs), Ok(rhs)) => Ok(and(lhs, rhs).expect("REASON")),
    |                                                       +++++++++++++++++

error[E0599]: no variant or associated item named `InvalidArgument` found for enum `arrow_schema::ArrowError` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:38
    |
558 |                 _ => Err(ArrowError::InvalidArgument),
    |                                      ^^^^^^^^^^^^^^^
    |                                      |
    |                                      variant or associated item not found in `ArrowError`
    |                                      help: there is a variant with a similar name: `InvalidArgumentError`
    |
note: if you're trying to build a new `arrow_schema::ArrowError`, consider using `arrow_schema::ArrowError::from_external_error` which returns `arrow_schema::ArrowError`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-schema-52.1.0/src/error.rs:50:5
    |
50  |     pub fn from_external_error(error: Box<dyn Error + Send + Sync>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Some errors have detailed explanations: E0053, E0107, E0308, E0599.
For more information about an error, try `rustc --explain E0053`.
error: could not compile `iceberg` (lib) due to 12 previous errors


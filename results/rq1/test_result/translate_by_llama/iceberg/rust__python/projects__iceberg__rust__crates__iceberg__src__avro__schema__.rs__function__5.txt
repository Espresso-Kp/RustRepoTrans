Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/avro/schema.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/iceberg/rust/crates/iceberg)
error[E0599]: no variant or associated item named `String` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:138:35
    |
138 |         if let AvroSchemaOrField::String(_) = key_value {
    |                                   ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0560]: struct `RecordField` has no field named `type_`
   --> crates/iceberg/src/avro/schema.rs:148:29
    |
148 | ...                   type_: key_value.clone(),
    |                       ^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0560]: struct `RecordField` has no field named `field_id`
   --> crates/iceberg/src/avro/schema.rs:149:29
    |
149 | ...                   field_id: self.next_id,
    |                       ^^^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:149:44
    |
149 | ...                   field_id: self.next_id,
    |                                      ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0560]: struct `RecordField` has no field named `type_`
   --> crates/iceberg/src/avro/schema.rs:153:29
    |
153 | ...                   type_: value.clone(),
    |                       ^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0560]: struct `RecordField` has no field named `field_id`
   --> crates/iceberg/src/avro/schema.rs:154:29
    |
154 | ...                   field_id: self.next_id,
    |                       ^^^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:154:44
    |
154 | ...                   field_id: self.next_id,
    |                                      ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:140:46
    |
140 |               let mut schema = AvroSchema::Map(AvroSchema::Record(
    |  ______________________________---------------_^
    | |                              |
    | |                              arguments to this enum variant are incorrect
141 | |                 RecordSchema {
142 | |                     name: Name::new("")?,
143 | |                     aliases: None,
...   |
159 | |                 }
160 | |             ));
    | |_____________^ expected `Box<Schema>`, found `Schema`
    |
    = note: expected struct `Box<apache_avro::Schema>`
                 found enum `apache_avro::Schema`
    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html
note: tuple variant defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:103:5
    |
103 |     Map(Box<Schema>),
    |     ^^^
help: store this in the heap by calling `Box::new`
    |
140 ~             let mut schema = AvroSchema::Map(Box::new(AvroSchema::Record(
141 |                 RecordSchema {
  ...
159 |                 }
160 ~             )));
    |

error[E0599]: no method named `set_field_id` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:161:20
    |
161 |             schema.set_field_id(self.next_id);
    |                    ^^^^^^^^^^^^ method not found in `Schema`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:161:38
    |
161 |             schema.set_field_id(self.next_id);
    |                                      ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no method named `set_key_id` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:162:20
    |
162 |             schema.set_key_id(self.next_id);
    |                    ^^^^^^^^^^ method not found in `Schema`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:162:36
    |
162 |             schema.set_key_id(self.next_id);
    |                                    ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no method named `set_value_id` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:163:20
    |
163 |             schema.set_value_id(self.next_id);
    |                    ^^^^^^^^^^^^ method not found in `Schema`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:163:38
    |
163 |             schema.set_value_id(self.next_id);
    |                                      ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:164:35
    |
164 |             Ok(AvroSchemaOrField::Schema(schema))
    |                                   ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:175:55
    |
175 | ...                   name: format!("k{}", self.next_id),
    |                                                 ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0560]: struct `RecordField` has no field named `type_`
   --> crates/iceberg/src/avro/schema.rs:176:29
    |
176 | ...                   type_: key_value.clone(),
    |                       ^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0560]: struct `RecordField` has no field named `field_id`
   --> crates/iceberg/src/avro/schema.rs:177:29
    |
177 | ...                   field_id: self.next_id,
    |                       ^^^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:177:44
    |
177 | ...                   field_id: self.next_id,
    |                                      ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:180:55
    |
180 | ...                   name: format!("v{}", self.next_id),
    |                                                 ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0560]: struct `RecordField` has no field named `type_`
   --> crates/iceberg/src/avro/schema.rs:181:29
    |
181 | ...                   type_: value.clone(),
    |                       ^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0560]: struct `RecordField` has no field named `field_id`
   --> crates/iceberg/src/avro/schema.rs:182:29
    |
182 | ...                   field_id: self.next_id,
    |                       ^^^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:182:44
    |
182 | ...                   field_id: self.next_id,
    |                                      ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:168:48
    |
168 |               let mut schema = AvroSchema::Array(AvroSchema::Record(
    |  ______________________________-----------------_^
    | |                              |
    | |                              arguments to this enum variant are incorrect
169 | |                 RecordSchema {
170 | |                     name: Name::new("")?,
171 | |                     aliases: None,
...   |
187 | |                 }
188 | |             ));
    | |_____________^ expected `Box<Schema>`, found `Schema`
    |
    = note: expected struct `Box<apache_avro::Schema>`
                 found enum `apache_avro::Schema`
    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html
note: tuple variant defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:99:5
    |
99  |     Array(Box<Schema>),
    |     ^^^^^
help: store this in the heap by calling `Box::new`
    |
168 ~             let mut schema = AvroSchema::Array(Box::new(AvroSchema::Record(
169 |                 RecordSchema {
  ...
187 |                 }
188 ~             )));
    |

error[E0599]: no method named `set_logical_type` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:189:20
    |
189 |             schema.set_logical_type("map");
    |                    ^^^^^^^^^^^^^^^^ method not found in `Schema`

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:190:35
    |
190 |             Ok(AvroSchemaOrField::Schema(schema))
    |                                   ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

Some errors have detailed explanations: E0308, E0560, E0599, E0609.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `iceberg` (lib) due to 26 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 26 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/iceberg/rust/crates/iceberg)
error[E0599]: no variant or associated item named `String` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:138:35
    |
138 |         if let AvroSchemaOrField::String(_) = key_value {
    |                                   ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0560]: struct `RecordField` has no field named `type_`
   --> crates/iceberg/src/avro/schema.rs:148:29
    |
148 | ...                   type_: key_value.clone(),
    |                       ^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0560]: struct `RecordField` has no field named `field_id`
   --> crates/iceberg/src/avro/schema.rs:149:29
    |
149 | ...                   field_id: self.next_id,
    |                       ^^^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:149:44
    |
149 | ...                   field_id: self.next_id,
    |                                      ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0560]: struct `RecordField` has no field named `type_`
   --> crates/iceberg/src/avro/schema.rs:153:29
    |
153 | ...                   type_: value.clone(),
    |                       ^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0560]: struct `RecordField` has no field named `field_id`
   --> crates/iceberg/src/avro/schema.rs:154:29
    |
154 | ...                   field_id: self.next_id,
    |                       ^^^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:154:44
    |
154 | ...                   field_id: self.next_id,
    |                                      ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:140:46
    |
140 |               let mut schema = AvroSchema::Map(AvroSchema::Record(
    |  ______________________________---------------_^
    | |                              |
    | |                              arguments to this enum variant are incorrect
141 | |                 RecordSchema {
142 | |                     name: Name::new("")?,
143 | |                     aliases: None,
...   |
159 | |                 }
160 | |             ));
    | |_____________^ expected `Box<Schema>`, found `Schema`
    |
    = note: expected struct `Box<apache_avro::Schema>`
                 found enum `apache_avro::Schema`
    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html
note: tuple variant defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:103:5
    |
103 |     Map(Box<Schema>),
    |     ^^^
help: store this in the heap by calling `Box::new`
    |
140 ~             let mut schema = AvroSchema::Map(Box::new(AvroSchema::Record(
141 |                 RecordSchema {
  ...
159 |                 }
160 ~             )));
    |

error[E0599]: no method named `set_field_id` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:161:20
    |
161 |             schema.set_field_id(self.next_id);
    |                    ^^^^^^^^^^^^ method not found in `Schema`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:161:38
    |
161 |             schema.set_field_id(self.next_id);
    |                                      ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no method named `set_key_id` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:162:20
    |
162 |             schema.set_key_id(self.next_id);
    |                    ^^^^^^^^^^ method not found in `Schema`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:162:36
    |
162 |             schema.set_key_id(self.next_id);
    |                                    ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no method named `set_value_id` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:163:20
    |
163 |             schema.set_value_id(self.next_id);
    |                    ^^^^^^^^^^^^ method not found in `Schema`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:163:38
    |
163 |             schema.set_value_id(self.next_id);
    |                                      ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:164:35
    |
164 |             Ok(AvroSchemaOrField::Schema(schema))
    |                                   ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:175:55
    |
175 | ...                   name: format!("k{}", self.next_id),
    |                                                 ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0560]: struct `RecordField` has no field named `type_`
   --> crates/iceberg/src/avro/schema.rs:176:29
    |
176 | ...                   type_: key_value.clone(),
    |                       ^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0560]: struct `RecordField` has no field named `field_id`
   --> crates/iceberg/src/avro/schema.rs:177:29
    |
177 | ...                   field_id: self.next_id,
    |                       ^^^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:177:44
    |
177 | ...                   field_id: self.next_id,
    |                                      ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:180:55
    |
180 | ...                   name: format!("v{}", self.next_id),
    |                                                 ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0560]: struct `RecordField` has no field named `type_`
   --> crates/iceberg/src/avro/schema.rs:181:29
    |
181 | ...                   type_: value.clone(),
    |                       ^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0560]: struct `RecordField` has no field named `field_id`
   --> crates/iceberg/src/avro/schema.rs:182:29
    |
182 | ...                   field_id: self.next_id,
    |                       ^^^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:182:44
    |
182 | ...                   field_id: self.next_id,
    |                                      ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:168:48
    |
168 |               let mut schema = AvroSchema::Array(AvroSchema::Record(
    |  ______________________________-----------------_^
    | |                              |
    | |                              arguments to this enum variant are incorrect
169 | |                 RecordSchema {
170 | |                     name: Name::new("")?,
171 | |                     aliases: None,
...   |
187 | |                 }
188 | |             ));
    | |_____________^ expected `Box<Schema>`, found `Schema`
    |
    = note: expected struct `Box<apache_avro::Schema>`
                 found enum `apache_avro::Schema`
    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html
note: tuple variant defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:99:5
    |
99  |     Array(Box<Schema>),
    |     ^^^^^
help: store this in the heap by calling `Box::new`
    |
168 ~             let mut schema = AvroSchema::Array(Box::new(AvroSchema::Record(
169 |                 RecordSchema {
  ...
187 |                 }
188 ~             )));
    |

error[E0599]: no method named `set_logical_type` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:189:20
    |
189 |             schema.set_logical_type("map");
    |                    ^^^^^^^^^^^^^^^^ method not found in `Schema`

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:190:35
    |
190 |             Ok(AvroSchemaOrField::Schema(schema))
    |                                   ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

Some errors have detailed explanations: E0308, E0560, E0599, E0609.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `iceberg` (lib) due to 26 previous errors


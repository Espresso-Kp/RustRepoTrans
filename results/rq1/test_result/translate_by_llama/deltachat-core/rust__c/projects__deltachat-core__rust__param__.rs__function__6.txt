Fail
file path is :
projects/deltachat-core/rust/src/param.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/deltachat-core/rust)
error[E0308]: mismatched types
   --> src/param.rs:290:44
    |
290 |         if self.inner.is_empty() || key == 0 {
    |                                     ---    ^ expected `Param`, found integer
    |                                     |
    |                                     expected because this is `Param`

error[E0425]: cannot find function `find_param` in this scope
   --> src/param.rs:298:28
    |
298 |             let (p1, p2) = find_param(&old1, key);
    |                            ^^^^^^^^^^ not found in this scope
    |
help: consider using the associated function on `Self`
    |
298 |             let (p1, p2) = Self::find_param(&old1, key);
    |                            ++++++

error[E0599]: no method named `is_none` found for type parameter `impl ToString` in the current scope
   --> src/param.rs:303:29
    |
289 | pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
    |                                          ------------- method `is_none` not found for this type parameter
...
303 |             } else if value.is_none() {
    |                             ^^^^^^^ method not found in `impl ToString`

error[E0308]: mismatched types
   --> src/param.rs:308:27
    |
308 |         let new1 = if let Some(value) = value.to_string() {
    |                           ^^^^^^^^^^^   ----------------- this expression has type `std::string::String`
    |                           |
    |                           expected `String`, found `Option<_>`
    |
    = note: expected struct `std::string::String`
                 found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> src/param.rs:309:53
    |
309 |             format!("{}{}{}={}\n{}", old1.unwrap_or(""), old1.unwrap_or("").len() + 1, key, value, old2.unwrap_or(""))
    |                                           --------- ^^- help: try using a conversion method: `.to_string()`
    |                                           |         |
    |                                           |         expected `String`, found `&str`
    |                                           arguments to this method are incorrect
    |
help: the return type of this call is `&'static str` due to the type of the argument passed
   --> src/param.rs:309:38
    |
309 |             format!("{}{}{}={}\n{}", old1.unwrap_or(""), old1.unwrap_or("").len() + 1, key, value, old2.unwrap_or(""))
    |                                      ^^^^^^^^^^^^^^^--^
    |                                                     |
    |                                                     this argument influences the return type of `unwrap_or`
note: method defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:951:12
    |
951 |     pub fn unwrap_or(self, default: T) -> T {
    |            ^^^^^^^^^

error[E0308]: mismatched types
   --> src/param.rs:309:73
    |
309 |             format!("{}{}{}={}\n{}", old1.unwrap_or(""), old1.unwrap_or("").len() + 1, key, value, old2.unwrap_or(""))
    |                                                               --------- ^^- help: try using a conversion method: `.to_string()`
    |                                                               |         |
    |                                                               |         expected `String`, found `&str`
    |                                                               arguments to this method are incorrect
    |
help: the return type of this call is `&'static str` due to the type of the argument passed
   --> src/param.rs:309:58
    |
309 |             format!("{}{}{}={}\n{}", old1.unwrap_or(""), old1.unwrap_or("").len() + 1, key, value, old2.unwrap_or(""))
    |                                                          ^^^^^^^^^^^^^^^--^
    |                                                                         |
    |                                                                         this argument influences the return type of `unwrap_or`
note: method defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:951:12
    |
951 |     pub fn unwrap_or(self, default: T) -> T {
    |            ^^^^^^^^^

error[E0277]: `Param` doesn't implement `std::fmt::Display`
   --> src/param.rs:309:88
    |
309 |             format!("{}{}{}={}\n{}", old1.unwrap_or(""), old1.unwrap_or("").len() + 1, key, value, old2.unwrap_or(""))
    |                                                                                        ^^^ `Param` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `Param`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> src/param.rs:309:115
    |
309 |             format!("{}{}{}={}\n{}", old1.unwrap_or(""), old1.unwrap_or("").len() + 1, key, value, old2.unwrap_or(""))
    |                                                                                                         --------- ^^- help: try using a conversion method: `.to_string()`
    |                                                                                                         |         |
    |                                                                                                         |         expected `String`, found `&str`
    |                                                                                                         arguments to this method are incorrect
    |
help: the return type of this call is `&'static str` due to the type of the argument passed
   --> src/param.rs:309:100
    |
309 |             format!("{}{}{}={}\n{}", old1.unwrap_or(""), old1.unwrap_or("").len() + 1, key, value, old2.unwrap_or(""))
    |                                                                                                    ^^^^^^^^^^^^^^^--^
    |                                                                                                                   |
    |                                                                                                                   this argument influences the return type of `unwrap_or`
note: method defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:951:12
    |
951 |     pub fn unwrap_or(self, default: T) -> T {
    |            ^^^^^^^^^

error[E0308]: mismatched types
   --> src/param.rs:311:48
    |
311 |             format!("{}{}\n{}", old1.unwrap_or(""), old1.unwrap_or("").len() + 1, old2.unwrap_or(""))
    |                                      --------- ^^- help: try using a conversion method: `.to_string()`
    |                                      |         |
    |                                      |         expected `String`, found `&str`
    |                                      arguments to this method are incorrect
    |
help: the return type of this call is `&'static str` due to the type of the argument passed
   --> src/param.rs:311:33
    |
311 |             format!("{}{}\n{}", old1.unwrap_or(""), old1.unwrap_or("").len() + 1, old2.unwrap_or(""))
    |                                 ^^^^^^^^^^^^^^^--^
    |                                                |
    |                                                this argument influences the return type of `unwrap_or`
note: method defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:951:12
    |
951 |     pub fn unwrap_or(self, default: T) -> T {
    |            ^^^^^^^^^

error[E0308]: mismatched types
   --> src/param.rs:311:68
    |
311 |             format!("{}{}\n{}", old1.unwrap_or(""), old1.unwrap_or("").len() + 1, old2.unwrap_or(""))
    |                                                          --------- ^^- help: try using a conversion method: `.to_string()`
    |                                                          |         |
    |                                                          |         expected `String`, found `&str`
    |                                                          arguments to this method are incorrect
    |
help: the return type of this call is `&'static str` due to the type of the argument passed
   --> src/param.rs:311:53
    |
311 |             format!("{}{}\n{}", old1.unwrap_or(""), old1.unwrap_or("").len() + 1, old2.unwrap_or(""))
    |                                                     ^^^^^^^^^^^^^^^--^
    |                                                                    |
    |                                                                    this argument influences the return type of `unwrap_or`
note: method defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:951:12
    |
951 |     pub fn unwrap_or(self, default: T) -> T {
    |            ^^^^^^^^^

error[E0308]: mismatched types
   --> src/param.rs:311:98
    |
311 |             format!("{}{}\n{}", old1.unwrap_or(""), old1.unwrap_or("").len() + 1, old2.unwrap_or(""))
    |                                                                                        --------- ^^- help: try using a conversion method: `.to_string()`
    |                                                                                        |         |
    |                                                                                        |         expected `String`, found `&str`
    |                                                                                        arguments to this method are incorrect
    |
help: the return type of this call is `&'static str` due to the type of the argument passed
   --> src/param.rs:311:83
    |
311 |             format!("{}{}\n{}", old1.unwrap_or(""), old1.unwrap_or("").len() + 1, old2.unwrap_or(""))
    |                                                                                   ^^^^^^^^^^^^^^^--^
    |                                                                                                  |
    |                                                                                                  this argument influences the return type of `unwrap_or`
note: method defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:951:12
    |
951 |     pub fn unwrap_or(self, default: T) -> T {
    |            ^^^^^^^^^

error[E0308]: mismatched types
   --> src/param.rs:317:39
    |
317 | fn find_param(s: &str, key: Param) -> (Option<usize>, Option<&str>) {
    |    ----------                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(Option<usize>, Option<&str>)`, found `()`
    |    |
    |    implicitly returns `()` as its body has no tail or `return` expression
    |
    = note:  expected tuple `(std::option::Option<usize>, std::option::Option<&str>)`
            found unit type `()`

Some errors have detailed explanations: E0277, E0308, E0425, E0599.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `deltachat` (lib) due to 12 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
   --> src/param.rs:290:44
    |
290 |         if self.inner.is_empty() || key == 0 {
    |                                     ---    ^ expected `Param`, found integer
    |                                     |
    |                                     expected because this is `param::Param`

error[E0277]: `param::Param` doesn't implement `std::fmt::Display`
   --> src/param.rs:309:88
    |
309 |             format!("{}{}{}={}\n{}", old1.unwrap_or(""), old1.unwrap_or("").len() + 1, key, value, old2.unwrap_or(""))
    |                                                                                        ^^^ `param::Param` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `param::Param`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error: could not compile `deltachat` (lib test) due to 12 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


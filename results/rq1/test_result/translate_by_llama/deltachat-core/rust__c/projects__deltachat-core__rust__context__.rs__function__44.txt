Fail
file path is :
projects/deltachat-core/rust/src/context.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/deltachat-core/rust)
error: expected one of `!`, `(`, `+`, `::`, `<`, `where`, or `{`, found `>>`
    --> src/context.rs:1154:53
     |
336  | impl Context {
     |              - while parsing this item list starting here
...
1154 | pub async fn get_fresh_msgs(&self) -> ResultVecMsgId>> {
     |                                                     ^^ expected one of 7 possible tokens
...
1391 | }
     | - the item list ends here

error[E0252]: the name `Result` is defined multiple times
  --> src/context.rs:15:42
   |
4  | use rusqlite::{Connection, Result};
   |                            ------ previous import of the type `Result` here
...
15 | use anyhow::{bail, ensure, Context as _, Result};
   |                                          ^^^^^^ `Result` reimported here
   |
   = note: `Result` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
15 | use anyhow::{bail, ensure, Context as _, Result as OtherResult};
   |                                          ~~~~~~~~~~~~~~~~~~~~~

error[E0603]: module `time` is private
  --> src/context.rs:5:16
   |
5  | use std::time::time;
   |                ^^^^ private module
   |
note: the module `time` is defined here
  --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/time.rs:40:5
   |
40 | use crate::sys::time;
   |     ^^^^^^^^^^^^^^^^
help: import `time` directly
   |
5  | use std::sys::pal::unix::time;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~

warning: unused import: `Connection`
 --> src/context.rs:4:16
  |
4 | use rusqlite::{Connection, Result};
  |                ^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `Result`
  --> src/context.rs:15:42
   |
15 | use anyhow::{bail, ensure, Context as _, Result};
   |                                          ^^^^^^

warning: unused import: `MessageState`
  --> src/context.rs:35:37
   |
35 | use crate::message::{self, Message, MessageState, MsgId, Viewtype};
   |                                     ^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:510:19
    |
510 |             .await?
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<usize, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<usize, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:640:19
    |
640 |             .await?
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `select_folder::Error`
   --> src/imap/select_folder.rs:213:52
    |
213 |                     context.schedule_resync().await?;
    |                                                    ^ the trait `From<rusqlite::Error>` is not implemented for `select_folder::Error`, which is required by `std::result::Result<bool, select_folder::Error>: FromResidual<std::result::Result<Infallible, rusqlite::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `From<anyhow::Error>` is implemented for `select_folder::Error`
    = help: for that trait implementation, expected `anyhow::Error`, found `rusqlite::Error`
    = note: required for `std::result::Result<bool, select_folder::Error>` to implement `FromResidual<std::result::Result<Infallible, rusqlite::Error>>`

error[E0277]: `?` couldn't convert the error to `select_folder::Error`
   --> src/imap/select_folder.rs:243:44
    |
243 |             context.schedule_resync().await?;
    |                                            ^ the trait `From<rusqlite::Error>` is not implemented for `select_folder::Error`, which is required by `std::result::Result<bool, select_folder::Error>: FromResidual<std::result::Result<Infallible, rusqlite::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `From<anyhow::Error>` is implemented for `select_folder::Error`
    = help: for that trait implementation, expected `anyhow::Error`, found `rusqlite::Error`
    = note: required for `std::result::Result<bool, select_folder::Error>` to implement `FromResidual<std::result::Result<Infallible, rusqlite::Error>>`

error[E0599]: no method named `is_mvbox` found for reference `&context::Context` in the current scope
    --> src/imap.rs:1812:16
     |
1812 |     if context.is_mvbox(folder).await? {
     |                ^^^^^^^^ method not found in `&Context`

error[E0599]: no method named `get_delete_msgs_target` found for reference `&context::Context` in the current scope
   --> src/imap.rs:573:37
    |
573 |         let delete_target = context.get_delete_msgs_target().await?;
    |                                     ^^^^^^^^^^^^^^^^^^^^^^ method not found in `&Context`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imap.rs:573:13
    |
573 |         let delete_target = context.get_delete_msgs_target().await?;
    |             ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imap.rs:573:29
    |
573 |         let delete_target = context.get_delete_msgs_target().await?;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imap.rs:573:29
    |
573 |         let delete_target = context.get_delete_msgs_target().await?;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `ControlFlow`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
    |
85  | pub enum ControlFlow<B, C = ()> {
    |                         ^^^^^^ required by this bound in `ControlFlow`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/imap.rs:573:67
    |
573 |         let delete_target = context.get_delete_msgs_target().await?;
    |                                                                   ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `Break`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
    |
85  | pub enum ControlFlow<B, C = ()> {
    |                         ^^^^^^ required by this bound in `Break`
...
93  |     Break(B),
    |     ----- required by a bound in this variant

error[E0599]: no method named `get_delete_msgs_target` found for reference `&context::Context` in the current scope
   --> src/receive_imf.rs:264:38
    |
264 |                 let target = context.get_delete_msgs_target().await?;
    |                                      ^^^^^^^^^^^^^^^^^^^^^^ method not found in `&Context`

error[E0599]: no method named `get_delete_msgs_target` found for reference `&context::Context` in the current scope
   --> src/receive_imf.rs:581:26
    |
581 |             Some(context.get_delete_msgs_target().await?)
    |                          ^^^^^^^^^^^^^^^^^^^^^^ method not found in `&Context`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:349:61
    |
349 |             context.sql.open(&context, "".to_string()).await?;
    |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<context::Context, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<context::Context, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0599]: no method named `should_delete_to_trash` found for reference `&context::Context` in the current scope
   --> src/scheduler.rs:582:13
    |
582 |     if !ctx.should_delete_to_trash().await?
    |             ^^^^^^^^^^^^^^^^^^^^^^ method not found in `&Context`

error[E0308]: mismatched types
   --> src/context.rs:675:9
    |
675 | /         ensure!(
676 | |             matches!(*s, RunningState::Stopped),
677 | |             "There is already another ongoing process running."
678 | |         );
    | |_________^ expected `rusqlite::Error`, found `anyhow::Error`
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:367:54
    |
367 |             tokio::fs::create_dir_all(&blobdir).await?;
    |                                                      ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<context::Context, rusqlite::Error>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<context::Context, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0308]: mismatched types
   --> src/context.rs:196:22
    |
196 |             false => bail!("database could not be decrypted, incorrect or missing password"),
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:385:63
    |
385 |         if self.sql.check_passphrase(passphrase.clone()).await? {
    |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:386:50
    |
386 |             self.sql.open(self, passphrase).await?;
    |                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:395:53
    |
395 |         self.sql.change_passphrase(passphrase).await?;
    |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/context.rs:410:9
    |
410 |         self.sql.check_passphrase(passphrase).await
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/context.rs:502:9
    |
502 |         self.get_config_bool(Config::IsChatmail).await
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:525:40
    |
525 |         if !(self.is_configured().await?) {
    |                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:529:57
    |
529 |         let address = self.get_primary_self_addr().await?;
    |                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:533:68
    |
533 |         let _pause_guard = self.scheduler.pause(self.clone()).await?;
    |                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:536:85
    |
536 |         let mut connection = Imap::new_configured(self, channel::bounded(1).1).await?;
    |                                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:537:57
    |
537 |         let mut session = connection.prepare(self).await?;
    |                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:541:87
    |
541 |             let (_, watch_folder) = convert_folder_meaning(self, folder_meaning).await?;
    |                                                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:544:23
    |
544 |                 .await?;
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:730:72
    |
730 |         let l = LoginParam::load_candidate_params_unchecked(self).await?;
    |                                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:731:64
    |
731 |         let l2 = LoginParam::load_configured_params(self).await?;
    |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:732:68
    |
732 |         let secondary_addrs = self.get_secondary_self_addrs().await?.join(", ");
    |                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:733:69
    |
733 |         let displayname = self.get_config(Config::Displayname).await?;
    |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:734:45
    |
734 |         let chats = get_chat_cnt(self).await?;
    |                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:737:57
    |
737 |         let contacts = Contact::get_real_cnt(self).await?;
    |                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:738:74
    |
738 |         let is_configured = self.get_config_int(Config::Configured).await?;
    |                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:739:78
    |
739 |         let socks5_enabled = self.get_config_int(Config::Socks5Enabled).await?;
    |                                                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:743:19
    |
743 |             .await?
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:748:19
    |
748 |             .await?
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:750:74
    |
750 |         let e2ee_enabled = self.get_config_int(Config::E2eeEnabled).await?;
    |                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:751:74
    |
751 |         let mdns_enabled = self.get_config_int(Config::MdnsEnabled).await?;
    |                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:752:66
    |
752 |         let bcc_self = self.get_config_int(Config::BccSelf).await?;
    |                                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:753:68
    |
753 |         let sync_msgs = self.get_config_int(Config::SyncMsgs).await?;
    |                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:754:75
    |
754 |         let disable_idle = self.get_config_bool(Config::DisableIdle).await?;
    |                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:756:85
    |
756 |         let prv_key_cnt = self.sql.count("SELECT COUNT(*) FROM keypairs;", ()).await?;
    |                                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:761:19
    |
761 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:767:76
    |
767 |         let sentbox_watch = self.get_config_int(Config::SentboxWatch).await?;
    |                                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:768:70
    |
768 |         let mvbox_move = self.get_config_int(Config::MvboxMove).await?;
    |                                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:769:81
    |
769 |         let only_fetch_mvbox = self.get_config_int(Config::OnlyFetchMvbox).await?;
    |                                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:773:19
    |
773 |             .await?
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:778:19
    |
778 |             .await?
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:782:19
    |
782 |             .await?
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:786:19
    |
786 |             .await?
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:790:19
    |
790 |             .await?
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:796:65
    |
796 |         res.insert("bot", self.get_config_int(Config::Bot).await?.to_string());
    |                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:816:23
    |
816 |                 .await?
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:844:23
    |
844 |                 .await?
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:850:23
    |
850 |                 .await?
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:855:58
    |
855 |             self.get_config_int(Config::ShowEmails).await?.to_string(),
    |                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:860:23
    |
860 |                 .await?
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:866:23
    |
866 |                 .await?
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:884:58
    |
884 |             self.get_config_int(Config::KeyGenType).await?.to_string(),
    |                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:895:23
    |
895 |                 .await?
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:900:60
    |
900 |             self.get_config_int(Config::MediaQuality).await?.to_string(),
    |                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:905:23
    |
905 |                 .await?
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:911:23
    |
911 |                 .await?
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:917:23
    |
917 |                 .await?
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:923:23
    |
923 |                 .await?
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:929:23
    |
929 |                 .await?
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:935:23
    |
935 |                 .await?
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:941:23
    |
941 |                 .await?
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:947:23
    |
947 |                 .await?
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:953:23
    |
953 |                 .await?
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:958:60
    |
958 |             self.get_config_int(Config::DebugLogging).await?.to_string(),
    |                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:962:57
    |
962 |             self.get_config_int(Config::LastMsgId).await?.to_string(),
    |                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:966:60
    |
966 |             self.get_config_int(Config::GossipPeriod).await?.to_string(),
    |                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/context.rs:971:23
    |
971 |                 .await?
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<BTreeMap<&str, std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1001:19
     |
1001 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1008:19
     |
1008 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1012:66
     |
1012 |         let db_size = tokio::fs::metadata(&self.sql.dbfile).await?.len();
     |                                                                  ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1015:59
     |
1015 |         let secret_key = &load_self_secret_key(self).await?.primary_key;
     |                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1081:19
     |
1081 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1089:85
     |
1089 |         let self_reporting_id = match self.get_config(Config::SelfReportingId).await? {
     |                                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1093:74
     |
1093 |                 self.set_config(Config::SelfReportingId, Some(&id)).await?;
     |                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1110:91
     |
1110 |         let contact_id = Contact::create(self, "Statistics bot", SELF_REPORTING_BOT).await?;
     |                                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1111:73
     |
1111 |         let chat_id = ChatId::create_for_contact(self, contact_id).await?;
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1124:10
     |
1124 |         )?;
     |          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1132:72
     |
1132 |         peerstate.set_verified(public_key, fingerprint, "".to_string())?;
     |                                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1133:46
     |
1133 |         peerstate.save_to_db(&self.sql).await?;
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1136:19
     |
1136 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1141:54
     |
1141 |         chat_id.set_draft(self, Some(&mut msg)).await?;
     |                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0599]: no method named `get_delete_msgs_target` found for reference `&context::Context` in the current scope
   --> src/ephemeral.rs:633:26
    |
633 |     let target = context.get_delete_msgs_target().await?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^ method not found in `&Context`

error[E0599]: no method named `should_delete_to_trash` found for reference `&context::Context` in the current scope
   --> src/imap.rs:959:32
    |
959 |                     if context.should_delete_to_trash().await? {
    |                                ^^^^^^^^^^^^^^^^^^^^^^ method not found in `&Context`

error[E0599]: no method named `is_trash` found for reference `&context::Context` in the current scope
   --> src/imap.rs:983:29
    |
983 |         let copy = !context.is_trash(target).await?;
    |                             ^^^^^^^^ method not found in `&Context`

error[E0599]: no method named `is_sentbox` found for reference `&context::Context` in the current scope
    --> src/imap.rs:2334:16
     |
2334 |     if context.is_sentbox(folder).await? {
     |                ^^^^^^^^^^ method not found in `&Context`

error[E0599]: no method named `is_mvbox` found for reference `&context::Context` in the current scope
    --> src/imap.rs:2338:18
     |
2338 |     Ok(!(context.is_mvbox(folder).await? || folder_meaning == FolderMeaning::Spam))
     |                  ^^^^^^^^ method not found in `&Context`

error[E0599]: no method named `get_delete_msgs_target` found for reference `&context::Context` in the current scope
    --> src/message.rs:1543:30
     |
1543 |         let target = context.get_delete_msgs_target().await?;
     |                              ^^^^^^^^^^^^^^^^^^^^^^ method not found in `&Context`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1110:91
     |
1110 |         let contact_id = Contact::create(self, "Statistics bot", SELF_REPORTING_BOT).await?;
     |                                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1111:73
     |
1111 |         let chat_id = ChatId::create_for_contact(self, contact_id).await?;
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1124:10
     |
1124 |         )?;
     |          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1132:72
     |
1132 |         peerstate.set_verified(public_key, fingerprint, "".to_string())?;
     |                                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1133:46
     |
1133 |         peerstate.save_to_db(&self.sql).await?;
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1136:19
     |
1136 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1141:54
     |
1141 |         chat_id.set_draft(self, Some(&mut msg)).await?;
     |                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0599]: no function or associated item named `derive_blobdir` found for struct `context::Context` in the current scope
   --> src/accounts.rs:187:32
    |
187 |         let blobdir = Context::derive_blobdir(&dbfile);
    |                                ^^^^^^^^^^^^^^
    |                                |
    |                                function or associated item not found in `Context`
    |                                help: there is a method with a similar name: `get_blobdir`
    |
   ::: src/context.rs:213:1
    |
213 | pub struct Context {
    | ------------------ function or associated item `derive_blobdir` not found for this struct
    |
note: if you're trying to build a new `context::Context`, consider using `context::Context::with_blobdir` which returns `std::result::Result<context::Context, rusqlite::Error>`
   --> src/context.rs:413:5
    |
413 | /     pub(crate) fn with_blobdir(
414 | |         dbfile: PathBuf,
415 | |         blobdir: PathBuf,
416 | |         id: u32,
...   |
419 | |         push_subscriber: PushSubscriber,
420 | |     ) -> Result<Context> {
    | |________________________^

error[E0599]: no function or associated item named `derive_walfile` found for struct `context::Context` in the current scope
   --> src/accounts.rs:188:32
    |
188 |         let walfile = Context::derive_walfile(&dbfile);
    |                                ^^^^^^^^^^^^^^ function or associated item not found in `Context`
    |
   ::: src/context.rs:213:1
    |
213 | pub struct Context {
    | ------------------ function or associated item `derive_walfile` not found for this struct
    |
note: if you're trying to build a new `context::Context`, consider using `context::Context::with_blobdir` which returns `std::result::Result<context::Context, rusqlite::Error>`
   --> src/context.rs:413:5
    |
413 | /     pub(crate) fn with_blobdir(
414 | |         dbfile: PathBuf,
415 | |         blobdir: PathBuf,
416 | |         id: u32,
...   |
419 | |         push_subscriber: PushSubscriber,
420 | |     ) -> Result<Context> {
    | |________________________^

error[E0599]: no function or associated item named `derive_blobdir` found for struct `context::Context` in the current scope
   --> src/accounts.rs:203:36
    |
203 |         let new_blobdir = Context::derive_blobdir(&new_dbfile);
    |                                    ^^^^^^^^^^^^^^
    |                                    |
    |                                    function or associated item not found in `Context`
    |                                    help: there is a method with a similar name: `get_blobdir`
    |
   ::: src/context.rs:213:1
    |
213 | pub struct Context {
    | ------------------ function or associated item `derive_blobdir` not found for this struct
    |
note: if you're trying to build a new `context::Context`, consider using `context::Context::with_blobdir` which returns `std::result::Result<context::Context, rusqlite::Error>`
   --> src/context.rs:413:5
    |
413 | /     pub(crate) fn with_blobdir(
414 | |         dbfile: PathBuf,
415 | |         blobdir: PathBuf,
416 | |         id: u32,
...   |
419 | |         push_subscriber: PushSubscriber,
420 | |     ) -> Result<Context> {
    | |________________________^

error[E0599]: no function or associated item named `derive_walfile` found for struct `context::Context` in the current scope
   --> src/accounts.rs:204:36
    |
204 |         let new_walfile = Context::derive_walfile(&new_dbfile);
    |                                    ^^^^^^^^^^^^^^ function or associated item not found in `Context`
    |
   ::: src/context.rs:213:1
    |
213 | pub struct Context {
    | ------------------ function or associated item `derive_walfile` not found for this struct
    |
note: if you're trying to build a new `context::Context`, consider using `context::Context::with_blobdir` which returns `std::result::Result<context::Context, rusqlite::Error>`
   --> src/context.rs:413:5
    |
413 | /     pub(crate) fn with_blobdir(
414 | |         dbfile: PathBuf,
415 | |         blobdir: PathBuf,
416 | |         id: u32,
...   |
419 | |         push_subscriber: PushSubscriber,
420 | |     ) -> Result<Context> {
    | |________________________^

error[E0308]: mismatched types
   --> src/context.rs:421:9
    |
421 | /         ensure!(
422 | |             blobdir.is_dir(),
423 | |             "Blobdir does not exist: {}",
424 | |             blobdir.display()
425 | |         );
    | |         ^
    | |         |
    | |_________expected `rusqlite::Error`, found `anyhow::Error`
    |           arguments to this enum variant are incorrect
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
   --> src/context.rs:421:9
    |
421 | /         ensure!(
422 | |             blobdir.is_dir(),
423 | |             "Blobdir does not exist: {}",
424 | |             blobdir.display()
425 | |         );
    | |_________^ this argument influences the type of `$crate`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
    |
511 |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
    |     ^^^
    = note: this error originates in the macro `$crate::__fallback_ensure` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused import: `Context`
  --> src/context.rs:15:28
   |
15 | use anyhow::{bail, ensure, Context as _, Result};
   |                            ^^^^^^^

Some errors have detailed explanations: E0252, E0277, E0308, E0599, E0603.
For more information about an error, try `rustc --explain E0252`.
warning: `deltachat` (lib) generated 4 warnings
error: could not compile `deltachat` (lib) due to 105 previous errors; 4 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/chat.rs:5813:22
     |
5813 |         assert_eq!(t.get_fresh_msgs().await?.len(), 0);
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/chat.rs:5820:22
     |
5820 |         assert_eq!(t.get_fresh_msgs().await?.len(), 1);
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/chat.rs:5828:22
     |
5828 |         assert_eq!(t.get_fresh_msgs().await?.len(), 1);
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/chat.rs:6241:22
     |
6241 |         assert_eq!(t.get_fresh_msgs().await?.len(), 1);
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/chat.rs:6259:22
     |
6259 |         assert_eq!(t.get_fresh_msgs().await?.len(), 0);
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/chat.rs:6303:22
     |
6303 |         assert_eq!(t.get_fresh_msgs().await?.len(), 0);
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/chat.rs:6309:22
     |
6309 |         assert_eq!(t.get_fresh_msgs().await?.len(), 0);
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1415:38
     |
1415 |         let tmp = tempfile::tempdir()?;
     |                                      ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1417:48
     |
1417 |         tokio::fs::write(&dbfile, b"123").await?;
     |                                                ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1428:23
     |
1428 |         let fresh = t.get_fresh_msgs().await.unwrap();
     |                       ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1459:22
     |
1459 |         assert_eq!(t.get_fresh_msgs().await.unwrap().len(), 0);
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1464:22
     |
1464 |         assert_eq!(t.get_fresh_msgs().await.unwrap().len(), 1);
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1470:22
     |
1470 |         assert_eq!(t.get_fresh_msgs().await.unwrap().len(), 3);
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1477:22
     |
1477 |         assert_eq!(t.get_fresh_msgs().await.unwrap().len(), 6);
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1484:22
     |
1484 |         assert_eq!(t.get_fresh_msgs().await.unwrap().len(), 4); // muted claires messages are no longer counted
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1492:22
     |
1492 |         assert_eq!(t.get_fresh_msgs().await.unwrap().len(), 6); // muted claire is not counted
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1499:22
     |
1499 |         assert_eq!(t.get_fresh_msgs().await.unwrap().len(), 9); // claire is counted again
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1513:22
     |
1513 |         assert_eq!(t.get_fresh_msgs().await.unwrap().len(), 1);
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1525:22
     |
1525 |         assert_eq!(t.get_fresh_msgs().await.unwrap().len(), 0);
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1538:22
     |
1538 |         assert_eq!(t.get_fresh_msgs().await.unwrap().len(), 1);
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1544:22
     |
1544 |         assert_eq!(t.get_fresh_msgs().await.unwrap().len(), 0);
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1554:22
     |
1554 |         assert_eq!(t.get_fresh_msgs().await.unwrap().len(), 1);
     |                      ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1705:25
     |
1705 |         let res = alice.search_msgs(None, "foo").await?;
     |                         ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1709:25
     |
1709 |         let res = alice.search_msgs(Some(chat.id), "foo").await?;
     |                         ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1722:25
     |
1722 |         let res = alice.search_msgs(None, "ob").await?;
     |                         ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1726:25
     |
1726 |         let res = alice.search_msgs(None, "bar").await?;
     |                         ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1734:25
     |
1734 |         let res = alice.search_msgs(None, "foobarbaz").await?;
     |                         ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1738:25
     |
1738 |         let res = alice.search_msgs(None, "abc").await?;
     |                         ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1742:25
     |
1742 |         let res = alice.search_msgs(Some(chat.id), "foo").await?;
     |                         ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1746:25
     |
1746 |         let res = alice.search_msgs(Some(self_talk), "foo").await?;
     |                         ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1699:82
     |
1699 |         let self_talk = ChatId::create_for_contact(&alice, ContactId::SELF).await?;
     |                                                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1715:51
     |
1715 |         send_msg(&alice, chat.id, &mut msg1).await?;
     |                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1719:51
     |
1719 |         send_msg(&alice, chat.id, &mut msg2).await?;
     |                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1778:22
     |
1778 |         assert_eq!(t.search_msgs(None, "foobar").await?.len(), 1);
     |                      ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1779:22
     |
1779 |         assert_eq!(t.search_msgs(Some(chat_id), "foobar").await?.len(), 1);
     |                      ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1788:22
     |
1788 |         assert_eq!(t.search_msgs(None, "foobar").await?.len(), 0);
     |                      ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1789:22
     |
1789 |         assert_eq!(t.search_msgs(Some(chat_id), "foobar").await?.len(), 0);
     |                      ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1799:22
     |
1799 |         assert_eq!(t.search_msgs(None, "foobar").await?.len(), 1);
     |                      ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1800:22
     |
1800 |         assert_eq!(t.search_msgs(Some(chat_id), "foobar").await?.len(), 1);
     |                      ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1767:15
     |
1767 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1769:57
     |
1769 |         let chat = Chat::load_from_db(&t, chat_id).await?;
     |                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1773:63
     |
1773 |         assert_eq!(Chatlist::try_load(&t, 0, None, None).await?.len(), 1);
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1775:66
     |
1775 |             Chatlist::try_load(&t, 0, Some("BobBar"), None).await?.len(),
     |                                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1781:32
     |
1781 |         chat_id.block(&t).await?;
     |                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1783:63
     |
1783 |         assert_eq!(Chatlist::try_load(&t, 0, None, None).await?.len(), 0);
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1785:66
     |
1785 |             Chatlist::try_load(&t, 0, Some("BobBar"), None).await?.len(),
     |                                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1791:63
     |
1791 |         let contact_ids = get_chat_contacts(&t, chat_id).await?;
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1792:66
     |
1792 |         Contact::unblock(&t, *contact_ids.first().unwrap()).await?;
     |                                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1794:63
     |
1794 |         assert_eq!(Chatlist::try_load(&t, 0, None, None).await?.len(), 1);
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1796:66
     |
1796 |             Chatlist::try_load(&t, 0, Some("BobBar"), None).await?.len(),
     |                                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1818:25
     |
1818 |         let res = alice.search_msgs(None, "foo").await?;
     |                         ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1823:25
     |
1823 |         let res = alice.search_msgs(None, "foo").await?;
     |                         ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1828:25
     |
1828 |         let res = alice.search_msgs(None, "foo").await?;
     |                         ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0599]: no method named `search_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1832:25
     |
1832 |         let res = alice.search_msgs(Some(chat.id), "foo").await?;
     |                         ^^^^^^^^^^^ method not found in `TestContext`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `search_msgs` not found for this struct

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1816:54
     |
1816 |             send_msg(&alice, chat.id, &mut msg).await?;
     |                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1822:50
     |
1822 |         send_msg(&alice, chat.id, &mut msg).await?;
     |                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1827:50
     |
1827 |         send_msg(&alice, chat.id, &mut msg).await?;
     |                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1840:28
     |
1840 |         let dir = tempdir()?;
     |                            ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1847:49
     |
1847 |             .context("failed to create context")?;
     |                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1856:49
     |
1856 |             .context("failed to create context")?;
     |                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1867:28
     |
1867 |         let dir = tempdir()?;
     |                            ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1874:49
     |
1874 |             .context("failed to create context")?;
     |                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1880:19
     |
1880 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1885:52
     |
1885 |             .context("Failed to change passphrase")?;
     |                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1888:51
     |
1888 |             context.get_config(Config::Addr).await?.unwrap(),
     |                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1916:30
     |
1916 |         receiver.recv().await?;
     |                              ^ the trait `From<async_channel::RecvError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, async_channel::RecvError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, async_channel::RecvError>>`

error[E0599]: no method named `get_next_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1942:23
     |
1942 |         assert!(alice.get_next_msgs().await?.is_empty());
     |                       ^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_next_msgs` not found for this struct

error[E0599]: no method named `get_next_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1943:21
     |
1943 |         assert!(bob.get_next_msgs().await?.is_empty());
     |                     ^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_next_msgs` not found for this struct

error[E0599]: no method named `get_next_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1948:36
     |
1948 |         let bob_next_msg_ids = bob.get_next_msgs().await?;
     |                                    ^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_next_msgs` not found for this struct

error[E0599]: no method named `get_next_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1954:21
     |
1954 |         assert!(bob.get_next_msgs().await?.is_empty());
     |                     ^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_next_msgs` not found for this struct

error[E0599]: no method named `get_next_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1957:40
     |
1957 |         let alice_next_msg_ids = alice.get_next_msgs().await?;
     |                                        ^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_next_msgs` not found for this struct

error[E0599]: no method named `get_next_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/context.rs:1964:23
     |
1964 |         assert!(alice.get_next_msgs().await?.is_empty());
     |                       ^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_next_msgs` not found for this struct

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1953:19
     |
1953 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1963:19
     |
1963 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1977:61
     |
1977 |         let chat = Chat::load_from_db(&alice, chat_id).await?;
     |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/context.rs:1980:56
     |
1980 |         let mut draft = chat_id.get_draft(&alice).await?.unwrap();
     |                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/message.rs:2368:24
     |
2368 |         assert_eq!(bob.get_fresh_msgs().await?.len(), 0);
     |                        ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/message.rs:2395:26
     |
2395 |         assert_eq!(alice.get_fresh_msgs().await?.len(), 2);
     |                          ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/message.rs:2404:26
     |
2404 |         assert_eq!(alice.get_fresh_msgs().await?.len(), 2);
     |                          ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/message.rs:2410:26
     |
2410 |         assert_eq!(alice.get_fresh_msgs().await?.len(), 1);
     |                          ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/message.rs:2416:26
     |
2416 |         assert_eq!(alice.get_fresh_msgs().await?.len(), 0);
     |                          ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

error[E0599]: no method named `get_fresh_msgs` found for struct `test_utils::TestContext` in the current scope
    --> src/receive_imf/tests.rs:1504:18
     |
1504 |     assert_eq!(t.get_fresh_msgs().await.unwrap().len(), 1);
     |                  ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_last_msg`
     |
    ::: src/test_utils.rs:261:1
     |
261  | pub struct TestContext {
     | ---------------------- method `get_fresh_msgs` not found for this struct

warning: `deltachat` (lib test) generated 4 warnings (4 duplicates)
error: could not compile `deltachat` (lib test) due to 187 previous errors; 4 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


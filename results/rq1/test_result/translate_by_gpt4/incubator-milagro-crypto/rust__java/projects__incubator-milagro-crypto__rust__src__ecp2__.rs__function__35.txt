Fail
file path is :
projects/incubator-milagro-crypto/rust/src/ecp2.rs

output is:


error is :
   Compiling amcl v0.3.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/incubator-milagro-crypto/rust)
error[E0425]: cannot find value `h` in this scope
   --> src/./ecp2.rs:761:32
    |
761 |     let mut x = Big::frombytes(h);
    |                                ^ help: a local variable with a similar name exists: `q`

error[E0425]: cannot find value `MType` in module `ecp`
   --> src/./ecp2.rs:780:32
    |
780 |     if ecp::SEXTIC_TWIST==ecp::MType {
    |                                ^^^^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::bls461::ecp2::SexticTwist::MType;
    |
help: if you import `MType`, refer to it directly
    |
780 -     if ecp::SEXTIC_TWIST==ecp::MType {
780 +     if ecp::SEXTIC_TWIST==MType {
    |

error[E0425]: cannot find value `CURVE_Bnx` in module `rom`
   --> src/./ecp2.rs:785:41
    |
785 |     let curve_bnx = Big::new_ints(&rom::CURVE_Bnx);
    |                                         ^^^^^^^^^ help: a constant with a similar name exists: `CURVE_BNX`
    |
   ::: src/./roms/rom_bls461_64.rs:105:1
    |
105 | pub const CURVE_BNX: [Chunk; NLEN] = [0xFFBFFFE00000000, 0x1FFFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0];
    | ------------------------------------------------------------------------------------------------ similarly named constant `CURVE_BNX` defined here

error[E0425]: cannot find value `Bn` in module `ecp`
   --> src/./ecp2.rs:787:38
    |
787 |     if ecp::CURVE_PAIRING_TYPE==ecp::Bn {
    |                                      ^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::bls461::ecp2::CurvePairingType::Bn;
    |
help: if you import `Bn`, refer to it directly
    |
787 -     if ecp::CURVE_PAIRING_TYPE==ecp::Bn {
787 +     if ecp::CURVE_PAIRING_TYPE==Bn {
    |

error[E0425]: cannot find value `NEGATIVEX` in module `ecp`
   --> src/./ecp2.rs:791:33
    |
791 |         if ecp::SIGN_OF_X==ecp::NEGATIVEX {
    |                                 ^^^^^^^^^ not found in `ecp`

error[E0425]: cannot find value `Bls` in module `ecp`
   --> src/./ecp2.rs:809:38
    |
809 |     if ecp::CURVE_PAIRING_TYPE==ecp::Bls {
    |                                      ^^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::bls461::ecp2::CurvePairingType::Bls;
    |
help: if you import `Bls`, refer to it directly
    |
809 -     if ecp::CURVE_PAIRING_TYPE==ecp::Bls {
809 +     if ecp::CURVE_PAIRING_TYPE==Bls {
    |

error[E0425]: cannot find value `NEGATIVEX` in module `ecp`
   --> src/./ecp2.rs:812:33
    |
812 |         if ecp::SIGN_OF_X==ecp::NEGATIVEX {
    |                                 ^^^^^^^^^ not found in `ecp`

error[E0425]: cannot find value `MType` in module `ecp`
   --> src/./ecp2.rs:780:32
    |
780 |     if ecp::SEXTIC_TWIST==ecp::MType {
    |                                ^^^^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::bls383::ecp2::SexticTwist::MType;
    |
help: if you import `MType`, refer to it directly
    |
780 -     if ecp::SEXTIC_TWIST==ecp::MType {
780 +     if ecp::SEXTIC_TWIST==MType {
    |

error[E0425]: cannot find value `CURVE_Bnx` in module `rom`
   --> src/./ecp2.rs:785:41
    |
785 |     let curve_bnx = Big::new_ints(&rom::CURVE_Bnx);
    |                                         ^^^^^^^^^ help: a constant with a similar name exists: `CURVE_BNX`
    |
   ::: src/./roms/rom_bls383_64.rs:106:1
    |
106 | pub const CURVE_BNX: [Chunk; NLEN] = [0x8000001001200, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0];
    | -------------------------------------------------------------------------------------- similarly named constant `CURVE_BNX` defined here

error[E0425]: cannot find value `Bn` in module `ecp`
   --> src/./ecp2.rs:787:38
    |
787 |     if ecp::CURVE_PAIRING_TYPE==ecp::Bn {
    |                                      ^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::bls383::ecp2::CurvePairingType::Bn;
    |
help: if you import `Bn`, refer to it directly
    |
787 -     if ecp::CURVE_PAIRING_TYPE==ecp::Bn {
787 +     if ecp::CURVE_PAIRING_TYPE==Bn {
    |

error[E0425]: cannot find value `Bls` in module `ecp`
   --> src/./ecp2.rs:809:38
    |
809 |     if ecp::CURVE_PAIRING_TYPE==ecp::Bls {
    |                                      ^^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::bls383::ecp2::CurvePairingType::Bls;
    |
help: if you import `Bls`, refer to it directly
    |
809 -     if ecp::CURVE_PAIRING_TYPE==ecp::Bls {
809 +     if ecp::CURVE_PAIRING_TYPE==Bls {
    |

error[E0425]: cannot find value `MType` in module `ecp`
   --> src/./ecp2.rs:780:32
    |
780 |     if ecp::SEXTIC_TWIST==ecp::MType {
    |                                ^^^^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::bls381::ecp2::SexticTwist::MType;
    |
help: if you import `MType`, refer to it directly
    |
780 -     if ecp::SEXTIC_TWIST==ecp::MType {
780 +     if ecp::SEXTIC_TWIST==MType {
    |

error[E0425]: cannot find value `CURVE_Bnx` in module `rom`
   --> src/./ecp2.rs:785:41
    |
785 |     let curve_bnx = Big::new_ints(&rom::CURVE_Bnx);
    |                                         ^^^^^^^^^ help: a constant with a similar name exists: `CURVE_BNX`
    |
   ::: src/./roms/rom_bls381_64.rs:98:1
    |
98  | pub const CURVE_BNX: [Chunk; NLEN] = [0x201000000010000, 0x34, 0x0, 0x0, 0x0, 0x0, 0x0];
    | ---------------------------------------------------------------------------------------- similarly named constant `CURVE_BNX` defined here

error[E0425]: cannot find value `Bn` in module `ecp`
   --> src/./ecp2.rs:787:38
    |
787 |     if ecp::CURVE_PAIRING_TYPE==ecp::Bn {
    |                                      ^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::bls381::ecp2::CurvePairingType::Bn;
    |
help: if you import `Bn`, refer to it directly
    |
787 -     if ecp::CURVE_PAIRING_TYPE==ecp::Bn {
787 +     if ecp::CURVE_PAIRING_TYPE==Bn {
    |

error[E0425]: cannot find value `Bls` in module `ecp`
   --> src/./ecp2.rs:809:38
    |
809 |     if ecp::CURVE_PAIRING_TYPE==ecp::Bls {
    |                                      ^^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::bls381::ecp2::CurvePairingType::Bls;
    |
help: if you import `Bls`, refer to it directly
    |
809 -     if ecp::CURVE_PAIRING_TYPE==ecp::Bls {
809 +     if ecp::CURVE_PAIRING_TYPE==Bls {
    |

error[E0425]: cannot find value `MType` in module `ecp`
   --> src/./ecp2.rs:780:32
    |
780 |     if ecp::SEXTIC_TWIST==ecp::MType {
    |                                ^^^^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::fp512bn::ecp2::SexticTwist::MType;
    |
help: if you import `MType`, refer to it directly
    |
780 -     if ecp::SEXTIC_TWIST==ecp::MType {
780 +     if ecp::SEXTIC_TWIST==MType {
    |

error[E0425]: cannot find value `CURVE_Bnx` in module `rom`
   --> src/./ecp2.rs:785:41
    |
785 |       let curve_bnx = Big::new_ints(&rom::CURVE_Bnx);
    |                                           ^^^^^^^^^ help: a constant with a similar name exists: `CURVE_BNX`
    |
   ::: src/./roms/rom_fp512bn_64.rs:89:1
    |
89  | / pub const CURVE_BNX: [Chunk; NLEN] = [
90  | |     0xB306BB5E1BD80F,
91  | |     0x82F5C030B0F7F01,
92  | |     0x68,
...   |
98  | |     0x0,
99  | | ];
    | |__- similarly named constant `CURVE_BNX` defined here

error[E0425]: cannot find value `Bn` in module `ecp`
   --> src/./ecp2.rs:787:38
    |
787 |     if ecp::CURVE_PAIRING_TYPE==ecp::Bn {
    |                                      ^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::fp512bn::ecp2::CurvePairingType::Bn;
    |
help: if you import `Bn`, refer to it directly
    |
787 -     if ecp::CURVE_PAIRING_TYPE==ecp::Bn {
787 +     if ecp::CURVE_PAIRING_TYPE==Bn {
    |

error[E0425]: cannot find value `Bls` in module `ecp`
   --> src/./ecp2.rs:809:38
    |
809 |     if ecp::CURVE_PAIRING_TYPE==ecp::Bls {
    |                                      ^^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::fp512bn::ecp2::CurvePairingType::Bls;
    |
help: if you import `Bls`, refer to it directly
    |
809 -     if ecp::CURVE_PAIRING_TYPE==ecp::Bls {
809 +     if ecp::CURVE_PAIRING_TYPE==Bls {
    |

error[E0425]: cannot find value `MType` in module `ecp`
   --> src/./ecp2.rs:780:32
    |
780 |     if ecp::SEXTIC_TWIST==ecp::MType {
    |                                ^^^^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::fp256bn::ecp2::SexticTwist::MType;
    |
help: if you import `MType`, refer to it directly
    |
780 -     if ecp::SEXTIC_TWIST==ecp::MType {
780 +     if ecp::SEXTIC_TWIST==MType {
    |

error[E0425]: cannot find value `CURVE_Bnx` in module `rom`
   --> src/./ecp2.rs:785:41
    |
785 |     let curve_bnx = Big::new_ints(&rom::CURVE_Bnx);
    |                                         ^^^^^^^^^ help: a constant with a similar name exists: `CURVE_BNX`
    |
   ::: src/./roms/rom_fp256bn_64.rs:70:1
    |
70  | pub const CURVE_BNX: [Chunk; NLEN] = [0x82F5C030B0A801, 0x68, 0x0, 0x0, 0x0];
    | ----------------------------------------------------------------------------- similarly named constant `CURVE_BNX` defined here

error[E0425]: cannot find value `Bn` in module `ecp`
   --> src/./ecp2.rs:787:38
    |
787 |     if ecp::CURVE_PAIRING_TYPE==ecp::Bn {
    |                                      ^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::fp256bn::ecp2::CurvePairingType::Bn;
    |
help: if you import `Bn`, refer to it directly
    |
787 -     if ecp::CURVE_PAIRING_TYPE==ecp::Bn {
787 +     if ecp::CURVE_PAIRING_TYPE==Bn {
    |

error[E0425]: cannot find value `Bls` in module `ecp`
   --> src/./ecp2.rs:809:38
    |
809 |     if ecp::CURVE_PAIRING_TYPE==ecp::Bls {
    |                                      ^^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::fp256bn::ecp2::CurvePairingType::Bls;
    |
help: if you import `Bls`, refer to it directly
    |
809 -     if ecp::CURVE_PAIRING_TYPE==ecp::Bls {
809 +     if ecp::CURVE_PAIRING_TYPE==Bls {
    |

error[E0425]: cannot find value `MType` in module `ecp`
   --> src/./ecp2.rs:780:32
    |
780 |     if ecp::SEXTIC_TWIST==ecp::MType {
    |                                ^^^^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::bn254cx::ecp2::SexticTwist::MType;
    |
help: if you import `MType`, refer to it directly
    |
780 -     if ecp::SEXTIC_TWIST==ecp::MType {
780 +     if ecp::SEXTIC_TWIST==MType {
    |

error[E0425]: cannot find value `CURVE_Bnx` in module `rom`
   --> src/./ecp2.rs:785:41
    |
785 |     let curve_bnx = Big::new_ints(&rom::CURVE_Bnx);
    |                                         ^^^^^^^^^ help: a constant with a similar name exists: `CURVE_BNX`
    |
   ::: src/./roms/rom_bn254cx_64.rs:76:1
    |
76  | pub const CURVE_BNX: [Chunk; NLEN] = [0x3C012B1, 0x40, 0x0, 0x0, 0x0];
    | ---------------------------------------------------------------------- similarly named constant `CURVE_BNX` defined here

error[E0425]: cannot find value `Bn` in module `ecp`
   --> src/./ecp2.rs:787:38
    |
787 |     if ecp::CURVE_PAIRING_TYPE==ecp::Bn {
    |                                      ^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::bn254cx::ecp2::CurvePairingType::Bn;
    |
help: if you import `Bn`, refer to it directly
    |
787 -     if ecp::CURVE_PAIRING_TYPE==ecp::Bn {
787 +     if ecp::CURVE_PAIRING_TYPE==Bn {
    |

error[E0425]: cannot find value `Bls` in module `ecp`
   --> src/./ecp2.rs:809:38
    |
809 |     if ecp::CURVE_PAIRING_TYPE==ecp::Bls {
    |                                      ^^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::bn254cx::ecp2::CurvePairingType::Bls;
    |
help: if you import `Bls`, refer to it directly
    |
809 -     if ecp::CURVE_PAIRING_TYPE==ecp::Bls {
809 +     if ecp::CURVE_PAIRING_TYPE==Bls {
    |

error[E0425]: cannot find value `MType` in module `ecp`
   --> src/./ecp2.rs:780:32
    |
780 |     if ecp::SEXTIC_TWIST==ecp::MType {
    |                                ^^^^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::bn254::ecp2::SexticTwist::MType;
    |
help: if you import `MType`, refer to it directly
    |
780 -     if ecp::SEXTIC_TWIST==ecp::MType {
780 +     if ecp::SEXTIC_TWIST==MType {
    |

error[E0425]: cannot find value `CURVE_Bnx` in module `rom`
   --> src/./ecp2.rs:785:41
    |
785 |     let curve_bnx = Big::new_ints(&rom::CURVE_Bnx);
    |                                         ^^^^^^^^^ help: a constant with a similar name exists: `CURVE_BNX`
    |
   ::: src/./roms/rom_bn254_64.rs:63:1
    |
63  | pub const CURVE_BNX: [Chunk; NLEN] = [0x80000000000001, 0x40, 0x0, 0x0, 0x0];
    | ----------------------------------------------------------------------------- similarly named constant `CURVE_BNX` defined here

error[E0425]: cannot find value `Bn` in module `ecp`
   --> src/./ecp2.rs:787:38
    |
787 |     if ecp::CURVE_PAIRING_TYPE==ecp::Bn {
    |                                      ^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::bn254::ecp2::CurvePairingType::Bn;
    |
help: if you import `Bn`, refer to it directly
    |
787 -     if ecp::CURVE_PAIRING_TYPE==ecp::Bn {
787 +     if ecp::CURVE_PAIRING_TYPE==Bn {
    |

error[E0425]: cannot find value `Bls` in module `ecp`
   --> src/./ecp2.rs:809:38
    |
809 |     if ecp::CURVE_PAIRING_TYPE==ecp::Bls {
    |                                      ^^^ not found in `ecp`
    |
help: consider importing this unit variant
    |
20  + use crate::bn254::ecp2::CurvePairingType::Bls;
    |
help: if you import `Bls`, refer to it directly
    |
809 -     if ecp::CURVE_PAIRING_TYPE==ecp::Bls {
809 +     if ecp::CURVE_PAIRING_TYPE==Bls {
    |

warning: unused imports: `CurvePairingType`, `SignOfX`
  --> src/./ecp2.rs:25:20
   |
25 | use crate::types::{CurvePairingType, SexticTwist, SignOfX};
   |                    ^^^^^^^^^^^^^^^^               ^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0599]: no function or associated item named `frombytes` found for struct `bls461::big::Big` in the current scope
   --> src/./ecp2.rs:761:22
    |
761 |     let mut x = Big::frombytes(h);
    |                      ^^^^^^^^^
    |                      |
    |                      function or associated item not found in `Big`
    |                      help: there is an associated function with a similar name: `from_bytes`
    |
   ::: src/./big.rs:39:1
    |
39  | pub struct Big {
    | -------------- function or associated item `frombytes` not found for this struct
    |
note: if you're trying to build a new `bls461::big::Big` consider using one of the following associated functions:
      bls461::big::Big::new
      bls461::big::Big::new_int
      bls461::big::Big::new_ints
      bls461::big::Big::new_dcopy
      and 10 others
   --> src/./big.rs:87:5
    |
87  |     pub fn new() -> Big {
    |     ^^^^^^^^^^^^^^^^^^^
...
95  |     pub fn new_int(x: isize) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
105 |     pub fn new_ints(a: &[Chunk]) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
117 |     pub fn new_dcopy(y: &DBig) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0616]: field `a` of struct `bls461::fp2::FP2` is private
   --> src/./ecp2.rs:767:20
    |
767 |         self.x = X.a.clone();
    |                    ^ private field

error[E0616]: field `b` of struct `bls461::fp2::FP2` is private
   --> src/./ecp2.rs:768:20
    |
768 |         self.y = X.b.clone();
    |                    ^ private field

error[E0599]: no function or associated item named `frombytes` found for struct `bls383::big::Big` in the current scope
   --> src/./ecp2.rs:761:22
    |
761 |     let mut x = Big::frombytes(h);
    |                      ^^^^^^^^^
    |                      |
    |                      function or associated item not found in `Big`
    |                      help: there is an associated function with a similar name: `from_bytes`
    |
   ::: src/./big.rs:39:1
    |
39  | pub struct Big {
    | -------------- function or associated item `frombytes` not found for this struct
    |
note: if you're trying to build a new `bls383::big::Big` consider using one of the following associated functions:
      bls383::big::Big::new
      bls383::big::Big::new_int
      bls383::big::Big::new_ints
      bls383::big::Big::new_dcopy
      and 10 others
   --> src/./big.rs:87:5
    |
87  |     pub fn new() -> Big {
    |     ^^^^^^^^^^^^^^^^^^^
...
95  |     pub fn new_int(x: isize) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
105 |     pub fn new_ints(a: &[Chunk]) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
117 |     pub fn new_dcopy(y: &DBig) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0616]: field `a` of struct `bls383::fp2::FP2` is private
   --> src/./ecp2.rs:767:20
    |
767 |         self.x = X.a.clone();
    |                    ^ private field

error[E0616]: field `b` of struct `bls383::fp2::FP2` is private
   --> src/./ecp2.rs:768:20
    |
768 |         self.y = X.b.clone();
    |                    ^ private field

error[E0599]: no function or associated item named `frombytes` found for struct `bls381::big::Big` in the current scope
   --> src/./ecp2.rs:761:22
    |
761 |     let mut x = Big::frombytes(h);
    |                      ^^^^^^^^^
    |                      |
    |                      function or associated item not found in `Big`
    |                      help: there is an associated function with a similar name: `from_bytes`
    |
   ::: src/./big.rs:39:1
    |
39  | pub struct Big {
    | -------------- function or associated item `frombytes` not found for this struct
    |
note: if you're trying to build a new `bls381::big::Big` consider using one of the following associated functions:
      bls381::big::Big::new
      bls381::big::Big::new_int
      bls381::big::Big::new_ints
      bls381::big::Big::new_dcopy
      and 10 others
   --> src/./big.rs:87:5
    |
87  |     pub fn new() -> Big {
    |     ^^^^^^^^^^^^^^^^^^^
...
95  |     pub fn new_int(x: isize) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
105 |     pub fn new_ints(a: &[Chunk]) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
117 |     pub fn new_dcopy(y: &DBig) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0616]: field `a` of struct `bls381::fp2::FP2` is private
   --> src/./ecp2.rs:767:20
    |
767 |         self.x = X.a.clone();
    |                    ^ private field

error[E0616]: field `b` of struct `bls381::fp2::FP2` is private
   --> src/./ecp2.rs:768:20
    |
768 |         self.y = X.b.clone();
    |                    ^ private field

error[E0599]: no function or associated item named `frombytes` found for struct `fp512bn::big::Big` in the current scope
   --> src/./ecp2.rs:761:22
    |
761 |     let mut x = Big::frombytes(h);
    |                      ^^^^^^^^^
    |                      |
    |                      function or associated item not found in `Big`
    |                      help: there is an associated function with a similar name: `from_bytes`
    |
   ::: src/./big.rs:39:1
    |
39  | pub struct Big {
    | -------------- function or associated item `frombytes` not found for this struct
    |
note: if you're trying to build a new `fp512bn::big::Big` consider using one of the following associated functions:
      fp512bn::big::Big::new
      fp512bn::big::Big::new_int
      fp512bn::big::Big::new_ints
      fp512bn::big::Big::new_dcopy
      and 10 others
   --> src/./big.rs:87:5
    |
87  |     pub fn new() -> Big {
    |     ^^^^^^^^^^^^^^^^^^^
...
95  |     pub fn new_int(x: isize) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
105 |     pub fn new_ints(a: &[Chunk]) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
117 |     pub fn new_dcopy(y: &DBig) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0616]: field `a` of struct `fp512bn::fp2::FP2` is private
   --> src/./ecp2.rs:767:20
    |
767 |         self.x = X.a.clone();
    |                    ^ private field

error[E0616]: field `b` of struct `fp512bn::fp2::FP2` is private
   --> src/./ecp2.rs:768:20
    |
768 |         self.y = X.b.clone();
    |                    ^ private field

error[E0599]: no function or associated item named `frombytes` found for struct `fp256bn::big::Big` in the current scope
   --> src/./ecp2.rs:761:22
    |
761 |     let mut x = Big::frombytes(h);
    |                      ^^^^^^^^^
    |                      |
    |                      function or associated item not found in `Big`
    |                      help: there is an associated function with a similar name: `from_bytes`
    |
   ::: src/./big.rs:39:1
    |
39  | pub struct Big {
    | -------------- function or associated item `frombytes` not found for this struct
    |
note: if you're trying to build a new `fp256bn::big::Big` consider using one of the following associated functions:
      fp256bn::big::Big::new
      fp256bn::big::Big::new_int
      fp256bn::big::Big::new_ints
      fp256bn::big::Big::new_dcopy
      and 10 others
   --> src/./big.rs:87:5
    |
87  |     pub fn new() -> Big {
    |     ^^^^^^^^^^^^^^^^^^^
...
95  |     pub fn new_int(x: isize) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
105 |     pub fn new_ints(a: &[Chunk]) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
117 |     pub fn new_dcopy(y: &DBig) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0616]: field `a` of struct `fp256bn::fp2::FP2` is private
   --> src/./ecp2.rs:767:20
    |
767 |         self.x = X.a.clone();
    |                    ^ private field

error[E0616]: field `b` of struct `fp256bn::fp2::FP2` is private
   --> src/./ecp2.rs:768:20
    |
768 |         self.y = X.b.clone();
    |                    ^ private field

error[E0599]: no function or associated item named `frombytes` found for struct `bn254cx::big::Big` in the current scope
   --> src/./ecp2.rs:761:22
    |
761 |     let mut x = Big::frombytes(h);
    |                      ^^^^^^^^^
    |                      |
    |                      function or associated item not found in `Big`
    |                      help: there is an associated function with a similar name: `from_bytes`
    |
   ::: src/./big.rs:39:1
    |
39  | pub struct Big {
    | -------------- function or associated item `frombytes` not found for this struct
    |
note: if you're trying to build a new `bn254cx::big::Big` consider using one of the following associated functions:
      bn254cx::big::Big::new
      bn254cx::big::Big::new_int
      bn254cx::big::Big::new_ints
      bn254cx::big::Big::new_dcopy
      and 10 others
   --> src/./big.rs:87:5
    |
87  |     pub fn new() -> Big {
    |     ^^^^^^^^^^^^^^^^^^^
...
95  |     pub fn new_int(x: isize) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
105 |     pub fn new_ints(a: &[Chunk]) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
117 |     pub fn new_dcopy(y: &DBig) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0616]: field `a` of struct `bn254cx::fp2::FP2` is private
   --> src/./ecp2.rs:767:20
    |
767 |         self.x = X.a.clone();
    |                    ^ private field

error[E0616]: field `b` of struct `bn254cx::fp2::FP2` is private
   --> src/./ecp2.rs:768:20
    |
768 |         self.y = X.b.clone();
    |                    ^ private field

error[E0599]: no function or associated item named `frombytes` found for struct `bn254::big::Big` in the current scope
   --> src/./ecp2.rs:761:22
    |
761 |     let mut x = Big::frombytes(h);
    |                      ^^^^^^^^^
    |                      |
    |                      function or associated item not found in `Big`
    |                      help: there is an associated function with a similar name: `from_bytes`
    |
   ::: src/./big.rs:39:1
    |
39  | pub struct Big {
    | -------------- function or associated item `frombytes` not found for this struct
    |
note: if you're trying to build a new `bn254::big::Big` consider using one of the following associated functions:
      bn254::big::Big::new
      bn254::big::Big::new_int
      bn254::big::Big::new_ints
      bn254::big::Big::new_dcopy
      and 10 others
   --> src/./big.rs:87:5
    |
87  |     pub fn new() -> Big {
    |     ^^^^^^^^^^^^^^^^^^^
...
95  |     pub fn new_int(x: isize) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
105 |     pub fn new_ints(a: &[Chunk]) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
117 |     pub fn new_dcopy(y: &DBig) -> Big {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0616]: field `a` of struct `bn254::fp2::FP2` is private
   --> src/./ecp2.rs:767:20
    |
767 |         self.x = X.a.clone();
    |                    ^ private field

error[E0616]: field `b` of struct `bn254::fp2::FP2` is private
   --> src/./ecp2.rs:768:20
    |
768 |         self.y = X.b.clone();
    |                    ^ private field

Some errors have detailed explanations: E0425, E0599, E0616.
For more information about an error, try `rustc --explain E0425`.
warning: `amcl` (lib) generated 1 warning
error: could not compile `amcl` (lib) due to 52 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
warning: `amcl` (lib test) generated 1 warning (1 duplicate)
error: could not compile `amcl` (lib test) due to 52 previous errors; 1 warning emitted


Fail
file path is :
projects/incubator-milagro-crypto/rust/src/mpin.rs

output is:


error is :
   Compiling amcl v0.3.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/incubator-milagro-crypto/rust)
error[E0432]: unresolved import `crate::rom`
   --> src/./mpin.rs:859:16
    |
859 |     use crate::rom::CURVE_ORDER;
    |                ^^^
    |                |
    |                unresolved import
    |                help: a similar path exists: `crate::anssi::rom`

error[E0425]: cannot find value `ROM` in this scope
   --> src/./mpin.rs:873:28
    |
873 |     let r = Big::new_ints(&ROM.CURVE_Order);
    |                            ^^^ not found in this scope

error[E0423]: expected value, found builtin type `u8`
   --> src/./mpin.rs:881:40
    |
881 |     let mut t = hash(sha, c, &W, &mut [u8; ECP::AESKEY]);
    |                                        ^^ not a value

error[E0423]: expected value, found struct `ECP`
   --> src/./mpin.rs:883:17
    |
883 |     for i in 0..ECP.AESKEY{
    |                 ^^^
    |
help: use the path separator to refer to an item
    |
883 |     for i in 0..ECP::AESKEY{
    |                    ~~
help: you might have meant to write `.` instead of `..`
    |
883 -     for i in 0..ECP.AESKEY{
883 +     for i in 0.ECP.AESKEY{
    |

error[E0599]: no associated item named `AESKEY` found for struct `bls461::ecp::ECP` in the current scope
   --> src/./mpin.rs:881:49
    |
881 |     let mut t = hash(sha, c, &W, &mut [u8; ECP::AESKEY]);
    |                                                 ^^^^^^ associated item not found in `ECP`
    |
   ::: src/./ecp.rs:32:1
    |
32  | pub struct ECP {
    | -------------- associated item `AESKEY` not found for this struct
    |
note: if you're trying to build a new `bls461::ecp::ECP` consider using one of the following associated functions:
      bls461::ecp::ECP::pnew
      bls461::ecp::ECP::new
      bls461::ecp::ECP::new_bigs
      bls461::ecp::ECP::new_bigint
      and 8 others
   --> src/./ecp.rs:64:5
    |
64  |     pub fn pnew() -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^
...
76  |     pub fn new() -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^
...
89  |     pub fn new_bigs(ix: &Big, iy: &Big) -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn new_bigint(ix: &Big, s: isize) -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: arguments to this function are incorrect
   --> src/./mpin.rs:881:17
    |
881 |     let mut t = hash(sha, c, &W, &mut [u8; ECP::AESKEY]);
    |                 ^^^^      -  -- types differ in mutability
    |                           |
    |                           expected `&mut FP4`, found `FP4`
    |
    = note: expected mutable reference `&mut bls461::ecp::ECP`
                       found reference `&bls461::ecp::ECP`
note: function defined here
   --> src/./mpin.rs:57:4
    |
57  | fn hash(sha: usize, c: &mut FP4, U: &mut ECP, r: &mut [u8]) -> bool {
    |    ^^^^ ----------  -----------  -----------  ------------
help: consider mutably borrowing here
    |
881 |     let mut t = hash(sha, &mut c, &W, &mut [u8; ECP::AESKEY]);
    |                           ++++

error[E0608]: cannot index into a value of type `bool`
   --> src/./mpin.rs:884:18
    |
884 |         ck[i] = t[i];
    |                  ^^^

error[E0599]: no associated item named `AESKEY` found for struct `bls383::ecp::ECP` in the current scope
   --> src/./mpin.rs:881:49
    |
881 |     let mut t = hash(sha, c, &W, &mut [u8; ECP::AESKEY]);
    |                                                 ^^^^^^ associated item not found in `ECP`
    |
   ::: src/./ecp.rs:32:1
    |
32  | pub struct ECP {
    | -------------- associated item `AESKEY` not found for this struct
    |
note: if you're trying to build a new `bls383::ecp::ECP` consider using one of the following associated functions:
      bls383::ecp::ECP::pnew
      bls383::ecp::ECP::new
      bls383::ecp::ECP::new_bigs
      bls383::ecp::ECP::new_bigint
      and 8 others
   --> src/./ecp.rs:64:5
    |
64  |     pub fn pnew() -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^
...
76  |     pub fn new() -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^
...
89  |     pub fn new_bigs(ix: &Big, iy: &Big) -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn new_bigint(ix: &Big, s: isize) -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: arguments to this function are incorrect
   --> src/./mpin.rs:881:17
    |
881 |     let mut t = hash(sha, c, &W, &mut [u8; ECP::AESKEY]);
    |                 ^^^^      -  -- types differ in mutability
    |                           |
    |                           expected `&mut FP4`, found `FP4`
    |
    = note: expected mutable reference `&mut bls383::ecp::ECP`
                       found reference `&bls383::ecp::ECP`
note: function defined here
   --> src/./mpin.rs:57:4
    |
57  | fn hash(sha: usize, c: &mut FP4, U: &mut ECP, r: &mut [u8]) -> bool {
    |    ^^^^ ----------  -----------  -----------  ------------
help: consider mutably borrowing here
    |
881 |     let mut t = hash(sha, &mut c, &W, &mut [u8; ECP::AESKEY]);
    |                           ++++

error[E0599]: no associated item named `AESKEY` found for struct `bls381::ecp::ECP` in the current scope
   --> src/./mpin.rs:881:49
    |
881 |     let mut t = hash(sha, c, &W, &mut [u8; ECP::AESKEY]);
    |                                                 ^^^^^^ associated item not found in `ECP`
    |
   ::: src/./ecp.rs:32:1
    |
32  | pub struct ECP {
    | -------------- associated item `AESKEY` not found for this struct
    |
note: if you're trying to build a new `bls381::ecp::ECP` consider using one of the following associated functions:
      bls381::ecp::ECP::pnew
      bls381::ecp::ECP::new
      bls381::ecp::ECP::new_bigs
      bls381::ecp::ECP::new_bigint
      and 8 others
   --> src/./ecp.rs:64:5
    |
64  |     pub fn pnew() -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^
...
76  |     pub fn new() -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^
...
89  |     pub fn new_bigs(ix: &Big, iy: &Big) -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn new_bigint(ix: &Big, s: isize) -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: arguments to this function are incorrect
   --> src/./mpin.rs:881:17
    |
881 |     let mut t = hash(sha, c, &W, &mut [u8; ECP::AESKEY]);
    |                 ^^^^      -  -- types differ in mutability
    |                           |
    |                           expected `&mut FP4`, found `FP4`
    |
    = note: expected mutable reference `&mut bls381::ecp::ECP`
                       found reference `&bls381::ecp::ECP`
note: function defined here
   --> src/./mpin.rs:57:4
    |
57  | fn hash(sha: usize, c: &mut FP4, U: &mut ECP, r: &mut [u8]) -> bool {
    |    ^^^^ ----------  -----------  -----------  ------------
help: consider mutably borrowing here
    |
881 |     let mut t = hash(sha, &mut c, &W, &mut [u8; ECP::AESKEY]);
    |                           ++++

error[E0599]: no associated item named `AESKEY` found for struct `fp512bn::ecp::ECP` in the current scope
   --> src/./mpin.rs:881:49
    |
881 |     let mut t = hash(sha, c, &W, &mut [u8; ECP::AESKEY]);
    |                                                 ^^^^^^ associated item not found in `ECP`
    |
   ::: src/./ecp.rs:32:1
    |
32  | pub struct ECP {
    | -------------- associated item `AESKEY` not found for this struct
    |
note: if you're trying to build a new `fp512bn::ecp::ECP` consider using one of the following associated functions:
      fp512bn::ecp::ECP::pnew
      fp512bn::ecp::ECP::new
      fp512bn::ecp::ECP::new_bigs
      fp512bn::ecp::ECP::new_bigint
      and 8 others
   --> src/./ecp.rs:64:5
    |
64  |     pub fn pnew() -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^
...
76  |     pub fn new() -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^
...
89  |     pub fn new_bigs(ix: &Big, iy: &Big) -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn new_bigint(ix: &Big, s: isize) -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: arguments to this function are incorrect
   --> src/./mpin.rs:881:17
    |
881 |     let mut t = hash(sha, c, &W, &mut [u8; ECP::AESKEY]);
    |                 ^^^^      -  -- types differ in mutability
    |                           |
    |                           expected `&mut FP4`, found `FP4`
    |
    = note: expected mutable reference `&mut fp512bn::ecp::ECP`
                       found reference `&fp512bn::ecp::ECP`
note: function defined here
   --> src/./mpin.rs:57:4
    |
57  | fn hash(sha: usize, c: &mut FP4, U: &mut ECP, r: &mut [u8]) -> bool {
    |    ^^^^ ----------  -----------  -----------  ------------
help: consider mutably borrowing here
    |
881 |     let mut t = hash(sha, &mut c, &W, &mut [u8; ECP::AESKEY]);
    |                           ++++

error[E0599]: no associated item named `AESKEY` found for struct `fp256bn::ecp::ECP` in the current scope
   --> src/./mpin.rs:881:49
    |
881 |     let mut t = hash(sha, c, &W, &mut [u8; ECP::AESKEY]);
    |                                                 ^^^^^^ associated item not found in `ECP`
    |
   ::: src/./ecp.rs:32:1
    |
32  | pub struct ECP {
    | -------------- associated item `AESKEY` not found for this struct
    |
note: if you're trying to build a new `fp256bn::ecp::ECP` consider using one of the following associated functions:
      fp256bn::ecp::ECP::pnew
      fp256bn::ecp::ECP::new
      fp256bn::ecp::ECP::new_bigs
      fp256bn::ecp::ECP::new_bigint
      and 8 others
   --> src/./ecp.rs:64:5
    |
64  |     pub fn pnew() -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^
...
76  |     pub fn new() -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^
...
89  |     pub fn new_bigs(ix: &Big, iy: &Big) -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn new_bigint(ix: &Big, s: isize) -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: arguments to this function are incorrect
   --> src/./mpin.rs:881:17
    |
881 |     let mut t = hash(sha, c, &W, &mut [u8; ECP::AESKEY]);
    |                 ^^^^      -  -- types differ in mutability
    |                           |
    |                           expected `&mut FP4`, found `FP4`
    |
    = note: expected mutable reference `&mut fp256bn::ecp::ECP`
                       found reference `&fp256bn::ecp::ECP`
note: function defined here
   --> src/./mpin.rs:57:4
    |
57  | fn hash(sha: usize, c: &mut FP4, U: &mut ECP, r: &mut [u8]) -> bool {
    |    ^^^^ ----------  -----------  -----------  ------------
help: consider mutably borrowing here
    |
881 |     let mut t = hash(sha, &mut c, &W, &mut [u8; ECP::AESKEY]);
    |                           ++++

error[E0599]: no associated item named `AESKEY` found for struct `bn254cx::ecp::ECP` in the current scope
   --> src/./mpin.rs:881:49
    |
881 |     let mut t = hash(sha, c, &W, &mut [u8; ECP::AESKEY]);
    |                                                 ^^^^^^ associated item not found in `ECP`
    |
   ::: src/./ecp.rs:32:1
    |
32  | pub struct ECP {
    | -------------- associated item `AESKEY` not found for this struct
    |
note: if you're trying to build a new `bn254cx::ecp::ECP` consider using one of the following associated functions:
      bn254cx::ecp::ECP::pnew
      bn254cx::ecp::ECP::new
      bn254cx::ecp::ECP::new_bigs
      bn254cx::ecp::ECP::new_bigint
      and 8 others
   --> src/./ecp.rs:64:5
    |
64  |     pub fn pnew() -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^
...
76  |     pub fn new() -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^
...
89  |     pub fn new_bigs(ix: &Big, iy: &Big) -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn new_bigint(ix: &Big, s: isize) -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: arguments to this function are incorrect
   --> src/./mpin.rs:881:17
    |
881 |     let mut t = hash(sha, c, &W, &mut [u8; ECP::AESKEY]);
    |                 ^^^^      -  -- types differ in mutability
    |                           |
    |                           expected `&mut FP4`, found `FP4`
    |
    = note: expected mutable reference `&mut bn254cx::ecp::ECP`
                       found reference `&bn254cx::ecp::ECP`
note: function defined here
   --> src/./mpin.rs:57:4
    |
57  | fn hash(sha: usize, c: &mut FP4, U: &mut ECP, r: &mut [u8]) -> bool {
    |    ^^^^ ----------  -----------  -----------  ------------
help: consider mutably borrowing here
    |
881 |     let mut t = hash(sha, &mut c, &W, &mut [u8; ECP::AESKEY]);
    |                           ++++

error[E0599]: no associated item named `AESKEY` found for struct `bn254::ecp::ECP` in the current scope
   --> src/./mpin.rs:881:49
    |
881 |     let mut t = hash(sha, c, &W, &mut [u8; ECP::AESKEY]);
    |                                                 ^^^^^^ associated item not found in `ECP`
    |
   ::: src/./ecp.rs:32:1
    |
32  | pub struct ECP {
    | -------------- associated item `AESKEY` not found for this struct
    |
note: if you're trying to build a new `bn254::ecp::ECP` consider using one of the following associated functions:
      bn254::ecp::ECP::pnew
      bn254::ecp::ECP::new
      bn254::ecp::ECP::new_bigs
      bn254::ecp::ECP::new_bigint
      and 8 others
   --> src/./ecp.rs:64:5
    |
64  |     pub fn pnew() -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^
...
76  |     pub fn new() -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^
...
89  |     pub fn new_bigs(ix: &Big, iy: &Big) -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn new_bigint(ix: &Big, s: isize) -> ECP {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: arguments to this function are incorrect
   --> src/./mpin.rs:881:17
    |
881 |     let mut t = hash(sha, c, &W, &mut [u8; ECP::AESKEY]);
    |                 ^^^^      -  -- types differ in mutability
    |                           |
    |                           expected `&mut FP4`, found `FP4`
    |
    = note: expected mutable reference `&mut bn254::ecp::ECP`
                       found reference `&bn254::ecp::ECP`
note: function defined here
   --> src/./mpin.rs:57:4
    |
57  | fn hash(sha: usize, c: &mut FP4, U: &mut ECP, r: &mut [u8]) -> bool {
    |    ^^^^ ----------  -----------  -----------  ------------
help: consider mutably borrowing here
    |
881 |     let mut t = hash(sha, &mut c, &W, &mut [u8; ECP::AESKEY]);
    |                           ++++

Some errors have detailed explanations: E0308, E0423, E0425, E0432, E0599, E0608.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `amcl` (lib) due to 19 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `amcl` (lib test) due to 19 previous errors


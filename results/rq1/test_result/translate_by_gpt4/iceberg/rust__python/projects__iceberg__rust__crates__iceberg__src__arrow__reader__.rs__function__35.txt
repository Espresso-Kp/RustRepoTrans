Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/iceberg/rust/crates/iceberg)
error[E0599]: no function or associated item named `new` found for struct `RecordBatch` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:546:43
    |
546 |     if let Ok(lhs_val) = lhs(RecordBatch::new()) { 
    |                                           ^^^ function or associated item not found in `RecordBatch`
    |
note: if you're trying to build a new `RecordBatch` consider using one of the following associated functions:
      RecordBatch::try_new
      RecordBatch::try_new_with_options
      RecordBatch::new_empty
      RecordBatch::try_new_impl
      and 2 others
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:110:5
    |
110 |       pub fn try_new(schema: SchemaRef, columns: Vec<ArrayRef>) -> Result<Self, ArrowError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
119 | /     pub fn try_new_with_options(
120 | |         schema: SchemaRef,
121 | |         columns: Vec<ArrayRef>,
122 | |         options: &RecordBatchOptions,
123 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^
...
128 |       pub fn new_empty(schema: SchemaRef) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
144 | /     fn try_new_impl(
145 | |         schema: SchemaRef,
146 | |         columns: Vec<ArrayRef>,
147 | |         options: &RecordBatchOptions,
148 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^

error[E0599]: no function or associated item named `new` found for struct `RecordBatch` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:547:47
    |
547 |         if let Ok(rhs_val) = rhs(RecordBatch::new()) { 
    |                                               ^^^ function or associated item not found in `RecordBatch`
    |
note: if you're trying to build a new `RecordBatch` consider using one of the following associated functions:
      RecordBatch::try_new
      RecordBatch::try_new_with_options
      RecordBatch::new_empty
      RecordBatch::try_new_impl
      and 2 others
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:110:5
    |
110 |       pub fn try_new(schema: SchemaRef, columns: Vec<ArrayRef>) -> Result<Self, ArrowError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
119 | /     pub fn try_new_with_options(
120 | |         schema: SchemaRef,
121 | |         columns: Vec<ArrayRef>,
122 | |         options: &RecordBatchOptions,
123 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^
...
128 |       pub fn new_empty(schema: SchemaRef) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
144 | /     fn try_new_impl(
145 | |         schema: SchemaRef,
146 | |         columns: Vec<ArrayRef>,
147 | |         options: &RecordBatchOptions,
148 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:548:25
    |
548 |             if !lhs_val.value() || !rhs_val.value() {
    |                         ^^^^^-- an argument of type `usize` is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/boolean_array.rs:172:12
    |
172 |     pub fn value(&self, i: usize) -> bool {
    |            ^^^^^
help: provide the argument
    |
548 |             if !lhs_val.value(/* usize */) || !rhs_val.value() {
    |                              ~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:548:45
    |
548 |             if !lhs_val.value() || !rhs_val.value() {
    |                                             ^^^^^-- an argument of type `usize` is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/boolean_array.rs:172:12
    |
172 |     pub fn value(&self, i: usize) -> bool {
    |            ^^^^^
help: provide the argument
    |
548 |             if !lhs_val.value() || !rhs_val.value(/* usize */) {
    |                                                  ~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:550:31
    |
550 |             } else if lhs_val.value() {
    |                               ^^^^^-- an argument of type `usize` is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/boolean_array.rs:172:12
    |
172 |     pub fn value(&self, i: usize) -> bool {
    |            ^^^^^
help: provide the argument
    |
550 |             } else if lhs_val.value(/* usize */) {
    |                                    ~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:552:31
    |
552 |             } else if rhs_val.value() {
    |                               ^^^^^-- an argument of type `usize` is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/boolean_array.rs:172:12
    |
172 |     pub fn value(&self, i: usize) -> bool {
    |            ^^^^^
help: provide the argument
    |
552 |             } else if rhs_val.value(/* usize */) {
    |                                    ~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:556:21
    |
556 | /                     lhs(batch.clone())
557 | |                         .and_then(|lhs_array| {
558 | |                             rhs(batch)
559 | |                                 .map(|rhs_array| and(&lhs_array, &rhs_array))
560 | |                         })
    | |__________________________^ expected `Result<BooleanArray, ArrowError>`, found `Result<Result<..., ...>, ...>`
    |
    = note: expected enum `std::result::Result<BooleanArray, _>`
               found enum `std::result::Result<std::result::Result<BooleanArray, arrow_schema::ArrowError>, _>`
help: consider using `Result::expect` to unwrap the `std::result::Result<std::result::Result<BooleanArray, arrow_schema::ArrowError>, arrow_schema::ArrowError>` value, panicking if the value is a `Result::Err`
    |
560 |                         }).expect("REASON")
    |                           +++++++++++++++++

error[E0277]: the trait bound `arrow_schema::ArrowError: From<&str>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:564:17
    |
564 |             Err(ArrowError::from("rhs failed to execute"))
    |                 ^^^^^^^^^^ the trait `From<&str>` is not implemented for `arrow_schema::ArrowError`
    |
    = help: the following other types implement trait `From<T>`:
              <arrow_schema::ArrowError as From<std::io::Error>>
              <arrow_schema::ArrowError as From<parquet::errors::ParquetError>>
              <arrow_schema::ArrowError as From<FromUtf8Error>>
              <arrow_schema::ArrowError as From<IntoInnerError<W>>>
              <arrow_schema::ArrowError as From<Utf8Error>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:564:17
    |
564 |             Err(ArrowError::from("rhs failed to execute"))
    |             --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Error`, found `ArrowError`
    |             |
    |             arguments to this enum variant are incorrect
    |
help: the type constructed contains `arrow_schema::ArrowError` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:564:13
    |
564 |             Err(ArrowError::from("rhs failed to execute"))
    |             ^^^^-----------------------------------------^
    |                 |
    |                 this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5

error[E0277]: the trait bound `arrow_schema::ArrowError: From<&str>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:567:13
    |
567 |         Err(ArrowError::from("lhs failed to execute"))
    |             ^^^^^^^^^^ the trait `From<&str>` is not implemented for `arrow_schema::ArrowError`
    |
    = help: the following other types implement trait `From<T>`:
              <arrow_schema::ArrowError as From<std::io::Error>>
              <arrow_schema::ArrowError as From<parquet::errors::ParquetError>>
              <arrow_schema::ArrowError as From<FromUtf8Error>>
              <arrow_schema::ArrowError as From<IntoInnerError<W>>>
              <arrow_schema::ArrowError as From<Utf8Error>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:567:13
    |
567 |         Err(ArrowError::from("lhs failed to execute"))
    |         --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Error`, found `ArrowError`
    |         |
    |         arguments to this enum variant are incorrect
    |
help: the type constructed contains `arrow_schema::ArrowError` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:567:9
    |
567 |         Err(ArrowError::from("lhs failed to execute"))
    |         ^^^^-----------------------------------------^
    |             |
    |             this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5

Some errors have detailed explanations: E0061, E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `iceberg` (lib test) due to 11 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib) due to 11 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/iceberg/rust/crates/iceberg)
error[E0599]: no function or associated item named `new` found for struct `RecordBatch` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:546:43
    |
546 |     if let Ok(lhs_val) = lhs(RecordBatch::new()) { 
    |                                           ^^^ function or associated item not found in `RecordBatch`
    |
note: if you're trying to build a new `RecordBatch` consider using one of the following associated functions:
      RecordBatch::try_new
      RecordBatch::try_new_with_options
      RecordBatch::new_empty
      RecordBatch::try_new_impl
      and 2 others
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:110:5
    |
110 |       pub fn try_new(schema: SchemaRef, columns: Vec<ArrayRef>) -> Result<Self, ArrowError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
119 | /     pub fn try_new_with_options(
120 | |         schema: SchemaRef,
121 | |         columns: Vec<ArrayRef>,
122 | |         options: &RecordBatchOptions,
123 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^
...
128 |       pub fn new_empty(schema: SchemaRef) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
144 | /     fn try_new_impl(
145 | |         schema: SchemaRef,
146 | |         columns: Vec<ArrayRef>,
147 | |         options: &RecordBatchOptions,
148 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^

error[E0599]: no function or associated item named `new` found for struct `RecordBatch` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:547:47
    |
547 |         if let Ok(rhs_val) = rhs(RecordBatch::new()) { 
    |                                               ^^^ function or associated item not found in `RecordBatch`
    |
note: if you're trying to build a new `RecordBatch` consider using one of the following associated functions:
      RecordBatch::try_new
      RecordBatch::try_new_with_options
      RecordBatch::new_empty
      RecordBatch::try_new_impl
      and 2 others
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:110:5
    |
110 |       pub fn try_new(schema: SchemaRef, columns: Vec<ArrayRef>) -> Result<Self, ArrowError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
119 | /     pub fn try_new_with_options(
120 | |         schema: SchemaRef,
121 | |         columns: Vec<ArrayRef>,
122 | |         options: &RecordBatchOptions,
123 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^
...
128 |       pub fn new_empty(schema: SchemaRef) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
144 | /     fn try_new_impl(
145 | |         schema: SchemaRef,
146 | |         columns: Vec<ArrayRef>,
147 | |         options: &RecordBatchOptions,
148 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:548:25
    |
548 |             if !lhs_val.value() || !rhs_val.value() {
    |                         ^^^^^-- an argument of type `usize` is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/boolean_array.rs:172:12
    |
172 |     pub fn value(&self, i: usize) -> bool {
    |            ^^^^^
help: provide the argument
    |
548 |             if !lhs_val.value(/* usize */) || !rhs_val.value() {
    |                              ~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:548:45
    |
548 |             if !lhs_val.value() || !rhs_val.value() {
    |                                             ^^^^^-- an argument of type `usize` is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/boolean_array.rs:172:12
    |
172 |     pub fn value(&self, i: usize) -> bool {
    |            ^^^^^
help: provide the argument
    |
548 |             if !lhs_val.value() || !rhs_val.value(/* usize */) {
    |                                                  ~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:550:31
    |
550 |             } else if lhs_val.value() {
    |                               ^^^^^-- an argument of type `usize` is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/boolean_array.rs:172:12
    |
172 |     pub fn value(&self, i: usize) -> bool {
    |            ^^^^^
help: provide the argument
    |
550 |             } else if lhs_val.value(/* usize */) {
    |                                    ~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:552:31
    |
552 |             } else if rhs_val.value() {
    |                               ^^^^^-- an argument of type `usize` is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/boolean_array.rs:172:12
    |
172 |     pub fn value(&self, i: usize) -> bool {
    |            ^^^^^
help: provide the argument
    |
552 |             } else if rhs_val.value(/* usize */) {
    |                                    ~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:556:21
    |
556 | /                     lhs(batch.clone())
557 | |                         .and_then(|lhs_array| {
558 | |                             rhs(batch)
559 | |                                 .map(|rhs_array| and(&lhs_array, &rhs_array))
560 | |                         })
    | |__________________________^ expected `Result<BooleanArray, ArrowError>`, found `Result<Result<..., ...>, ...>`
    |
    = note: expected enum `std::result::Result<BooleanArray, _>`
               found enum `std::result::Result<std::result::Result<BooleanArray, arrow_schema::ArrowError>, _>`
help: consider using `Result::expect` to unwrap the `std::result::Result<std::result::Result<BooleanArray, arrow_schema::ArrowError>, arrow_schema::ArrowError>` value, panicking if the value is a `Result::Err`
    |
560 |                         }).expect("REASON")
    |                           +++++++++++++++++

error[E0277]: the trait bound `arrow_schema::ArrowError: From<&str>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:564:17
    |
564 |             Err(ArrowError::from("rhs failed to execute"))
    |                 ^^^^^^^^^^ the trait `From<&str>` is not implemented for `arrow_schema::ArrowError`
    |
    = help: the following other types implement trait `From<T>`:
              <arrow_schema::ArrowError as From<std::io::Error>>
              <arrow_schema::ArrowError as From<parquet::errors::ParquetError>>
              <arrow_schema::ArrowError as From<FromUtf8Error>>
              <arrow_schema::ArrowError as From<IntoInnerError<W>>>
              <arrow_schema::ArrowError as From<Utf8Error>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:564:17
    |
564 |             Err(ArrowError::from("rhs failed to execute"))
    |             --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Error`, found `ArrowError`
    |             |
    |             arguments to this enum variant are incorrect
    |
help: the type constructed contains `arrow_schema::ArrowError` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:564:13
    |
564 |             Err(ArrowError::from("rhs failed to execute"))
    |             ^^^^-----------------------------------------^
    |                 |
    |                 this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5

error[E0277]: the trait bound `arrow_schema::ArrowError: From<&str>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:567:13
    |
567 |         Err(ArrowError::from("lhs failed to execute"))
    |             ^^^^^^^^^^ the trait `From<&str>` is not implemented for `arrow_schema::ArrowError`
    |
    = help: the following other types implement trait `From<T>`:
              <arrow_schema::ArrowError as From<std::io::Error>>
              <arrow_schema::ArrowError as From<parquet::errors::ParquetError>>
              <arrow_schema::ArrowError as From<FromUtf8Error>>
              <arrow_schema::ArrowError as From<IntoInnerError<W>>>
              <arrow_schema::ArrowError as From<Utf8Error>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:567:13
    |
567 |         Err(ArrowError::from("lhs failed to execute"))
    |         --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Error`, found `ArrowError`
    |         |
    |         arguments to this enum variant are incorrect
    |
help: the type constructed contains `arrow_schema::ArrowError` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:567:9
    |
567 |         Err(ArrowError::from("lhs failed to execute"))
    |         ^^^^-----------------------------------------^
    |             |
    |             this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5

Some errors have detailed explanations: E0061, E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `iceberg` (lib) due to 11 previous errors


Fail
file path is :
projects/iceberg/rust/crates/catalog/rest/src/catalog.rs

output is:



error is :
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/iceberg/rust/crates/integrations/datafusion)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/iceberg/rust/crates/catalog/rest)
error[E0252]: the name `Request` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:32:23
   |
24 | use reqwest::Request;
   |     ---------------- previous import of the type `Request` here
...
32 | use reqwest::{Client, Request, Response, StatusCode, Url};
   |                       ^^^^^^^--
   |                       |
   |                       `Request` reimported here
   |                       help: remove unnecessary import
   |
   = note: `Request` must be defined only once in the type namespace of this module

error[E0432]: unresolved import `crate::http`
  --> crates/catalog/rest/src/catalog.rs:21:12
   |
21 | use crate::http::HttpClient;
   |            ^^^^ could not find `http` in the crate root

error[E0432]: unresolved import `crate::http`
  --> crates/catalog/rest/src/catalog.rs:22:12
   |
22 | use crate::http::ErrorResponse;
   |            ^^^^ could not find `http` in the crate root

error[E0432]: unresolved import `anyhow`
  --> crates/catalog/rest/src/catalog.rs:23:5
   |
23 | use anyhow::Result;
   |     ^^^^^^ use of undeclared crate or module `anyhow`

error: cannot find macro `json` in this scope
   --> crates/catalog/rest/src/catalog.rs:326:19
    |
326 |     let payload = json!({
    |                   ^^^^
    |
help: consider importing this macro
    |
21  + use serde_json::json;
    |

error[E0433]: failed to resolve: use of undeclared type `ErrorModel`
   --> crates/catalog/rest/src/catalog.rs:336:9
    |
336 |         ErrorModel::Other { code, message } => {
    |         ^^^^^^^^^^ use of undeclared type `ErrorModel`
    |
help: consider importing this struct
    |
21  + use crate::catalog::_serde::ErrorModel;
    |

warning: unused import: `Request`
  --> crates/catalog/rest/src/catalog.rs:32:23
   |
32 | use reqwest::{Client, Request, Response, StatusCode, Url};
   |                       ^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0599]: no method named `try_from` found for reference `&catalog::RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:324:32
    |
324 |     let namespace_tuple = self.try_from(namespace.to_owned())?;
    |                           -----^^^^^^^^----------------------
    |                           |    |
    |                           |    this is an associated function, not a method
    |                           help: use associated function syntax instead: `catalog::RestCatalog::try_from(namespace.to_owned())`
    |
    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter
note: the candidate is defined in the trait `TryFrom`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/convert/mod.rs:686:5

error[E0599]: no method named `namespaces_endpoint` found for reference `&catalog::RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:331:37
    |
331 |     let request = Request::new(self.namespaces_endpoint(), self.client.clone()).body(payload)?;
    |                                     ^^^^^^^^^^^^^^^^^^^ method not found in `&RestCatalog`

error[E0599]: no method named `clone` found for struct `HttpClient` in the current scope
   --> crates/catalog/rest/src/catalog.rs:331:72
    |
195 | struct HttpClient(Client);
    | ----------------- method `clone` not found for this struct
...
331 |     let request = Request::new(self.namespaces_endpoint(), self.client.clone()).body(payload)?;
    |                                                                        ^^^^^ method not found in `HttpClient`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `clone`, perhaps you need to implement it:
            candidate #1: `Clone`

error[E0061]: this method takes 0 arguments but 1 argument was supplied
   --> crates/catalog/rest/src/catalog.rs:331:81
    |
331 |     let request = Request::new(self.namespaces_endpoint(), self.client.clone()).body(payload)?;
    |                                                                                 ^^^^ -------
    |                                                                                      |
    |                                                                                      unexpected argument
    |                                                                                      help: remove the extra argument
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/async_impl/request.rs:92:12
    |
92  |     pub fn body(&self) -> Option<&Body> {
    |            ^^^^

error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in an async block that returns `Result`
   --> crates/catalog/rest/src/catalog.rs:331:94
    |
322 |   ) -> Result<Namespace> {
    |  ________________________-
323 | |
324 | |     let namespace_tuple = self.try_from(namespace.to_owned())?;
325 | |
...   |
331 | |     let request = Request::new(self.namespaces_endpoint(), self.client.clone()).body(payload)?;
    | |                                                                                              ^ use `.ok_or(...)?` to provide an error compatible with `Result<iceberg::Namespace, iceberg::Error>`
...   |
348 | |     }
349 | | }
    | |_- this function returns a `Result`
    |
    = help: the trait `FromResidual<std::option::Option<Infallible>>` is not implemented for `Result<iceberg::Namespace, iceberg::Error>`
    = help: the following other types implement trait `FromResidual<R>`:
              <Result<T, F> as FromResidual<Yeet<E>>>
              <Result<T, F> as FromResidual<Result<Infallible, E>>>

error[E0599]: no method named `query` found for reference `&catalog::RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:333:25
    |
333 |     let response = self.query::<_, ErrorResponse, OK>(request).await?;
    |                         ^^^^^ method not found in `&RestCatalog`
    |
help: one of the expressions' fields has a method of the same name
    |
333 |     let response = self.client.query::<_, ErrorResponse, OK>(request).await?;
    |                         +++++++

error[E0425]: cannot find function, tuple struct or tuple variant `NamespaceAlreadyExistsError` in this scope
   --> crates/catalog/rest/src/catalog.rs:338:21
    |
338 |                 Err(NamespaceAlreadyExistsError())
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

Some errors have detailed explanations: E0061, E0252, E0277, E0425, E0432, E0433, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-rest` (lib test) generated 1 warning
error: could not compile `iceberg-catalog-rest` (lib test) due to 13 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/iceberg/rust/crates/catalog/glue)
error[E0252]: the name `Request` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:32:23
   |
24 | use reqwest::Request;
   |     ---------------- previous import of the type `Request` here
...
32 | use reqwest::{Client, Request, Response, StatusCode, Url};
   |                       ^^^^^^^--
   |                       |
   |                       `Request` reimported here
   |                       help: remove unnecessary import
   |
   = note: `Request` must be defined only once in the type namespace of this module

error[E0432]: unresolved import `crate::http`
  --> crates/catalog/rest/src/catalog.rs:21:12
   |
21 | use crate::http::HttpClient;
   |            ^^^^ could not find `http` in the crate root

error[E0432]: unresolved import `crate::http`
  --> crates/catalog/rest/src/catalog.rs:22:12
   |
22 | use crate::http::ErrorResponse;
   |            ^^^^ could not find `http` in the crate root

error[E0432]: unresolved import `anyhow`
  --> crates/catalog/rest/src/catalog.rs:23:5
   |
23 | use anyhow::Result;
   |     ^^^^^^ use of undeclared crate or module `anyhow`

error: cannot find macro `json` in this scope
   --> crates/catalog/rest/src/catalog.rs:326:19
    |
326 |     let payload = json!({
    |                   ^^^^
    |
help: consider importing this macro
    |
21  + use serde_json::json;
    |

error[E0433]: failed to resolve: use of undeclared type `ErrorModel`
   --> crates/catalog/rest/src/catalog.rs:336:9
    |
336 |         ErrorModel::Other { code, message } => {
    |         ^^^^^^^^^^ use of undeclared type `ErrorModel`
    |
help: consider importing this struct
    |
21  + use crate::catalog::_serde::ErrorModel;
    |

warning: unused import: `Request`
  --> crates/catalog/rest/src/catalog.rs:32:23
   |
32 | use reqwest::{Client, Request, Response, StatusCode, Url};
   |                       ^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0599]: no method named `try_from` found for reference `&RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:324:32
    |
324 |     let namespace_tuple = self.try_from(namespace.to_owned())?;
    |                           -----^^^^^^^^----------------------
    |                           |    |
    |                           |    this is an associated function, not a method
    |                           help: use associated function syntax instead: `RestCatalog::try_from(namespace.to_owned())`
    |
    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter
note: the candidate is defined in the trait `TryFrom`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/convert/mod.rs:686:5

error[E0599]: no method named `namespaces_endpoint` found for reference `&RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:331:37
    |
331 |     let request = Request::new(self.namespaces_endpoint(), self.client.clone()).body(payload)?;
    |                                     ^^^^^^^^^^^^^^^^^^^ method not found in `&RestCatalog`

error[E0599]: no method named `clone` found for struct `HttpClient` in the current scope
   --> crates/catalog/rest/src/catalog.rs:331:72
    |
195 | struct HttpClient(Client);
    | ----------------- method `clone` not found for this struct
...
331 |     let request = Request::new(self.namespaces_endpoint(), self.client.clone()).body(payload)?;
    |                                                                        ^^^^^ method not found in `HttpClient`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `clone`, perhaps you need to implement it:
            candidate #1: `Clone`

error[E0061]: this method takes 0 arguments but 1 argument was supplied
   --> crates/catalog/rest/src/catalog.rs:331:81
    |
331 |     let request = Request::new(self.namespaces_endpoint(), self.client.clone()).body(payload)?;
    |                                                                                 ^^^^ -------
    |                                                                                      |
    |                                                                                      unexpected argument
    |                                                                                      help: remove the extra argument
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/async_impl/request.rs:92:12
    |
92  |     pub fn body(&self) -> Option<&Body> {
    |            ^^^^

error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in an async block that returns `Result`
   --> crates/catalog/rest/src/catalog.rs:331:94
    |
322 |   ) -> Result<Namespace> {
    |  ________________________-
323 | |
324 | |     let namespace_tuple = self.try_from(namespace.to_owned())?;
325 | |
...   |
331 | |     let request = Request::new(self.namespaces_endpoint(), self.client.clone()).body(payload)?;
    | |                                                                                              ^ use `.ok_or(...)?` to provide an error compatible with `Result<Namespace, iceberg::Error>`
...   |
348 | |     }
349 | | }
    | |_- this function returns a `Result`
    |
    = help: the trait `FromResidual<std::option::Option<Infallible>>` is not implemented for `Result<Namespace, iceberg::Error>`
    = help: the following other types implement trait `FromResidual<R>`:
              <Result<T, F> as FromResidual<Yeet<E>>>
              <Result<T, F> as FromResidual<Result<Infallible, E>>>

error[E0599]: no method named `query` found for reference `&RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:333:25
    |
333 |     let response = self.query::<_, ErrorResponse, OK>(request).await?;
    |                         ^^^^^ method not found in `&RestCatalog`
    |
help: one of the expressions' fields has a method of the same name
    |
333 |     let response = self.client.query::<_, ErrorResponse, OK>(request).await?;
    |                         +++++++

error[E0425]: cannot find function, tuple struct or tuple variant `NamespaceAlreadyExistsError` in this scope
   --> crates/catalog/rest/src/catalog.rs:338:21
    |
338 |                 Err(NamespaceAlreadyExistsError())
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

Some errors have detailed explanations: E0061, E0252, E0277, E0425, E0432, E0433, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-rest` (lib) generated 1 warning
error: could not compile `iceberg-catalog-rest` (lib) due to 13 previous errors; 1 warning emitted


Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/avro/schema.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/iceberg/rust/crates/iceberg)
error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:134:9
    |
133 |     match key_result {
    |           ---------- this expression has type `itertools::Either<apache_avro::Schema, RecordField>`
134 |         AvroSchema::String => {
    |         ^^^^^^^^^^^^^^^^^^ expected `Either<Schema, RecordField>`, found `Schema`
    |
    = note: expected enum `itertools::Either<apache_avro::Schema, RecordField>`
               found enum `apache_avro::Schema`
help: try wrapping the pattern in `itertools::Either::Left`
    |
134 |         itertools::Either::Left(AvroSchema::String) => {
    |         ++++++++++++++++++++++++                  +

error[E0599]: no method named `to_value` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:137:69
    |
137 |             avro_map_type.insert("values".to_string(), value_result.to_value()?);
    |                                                                     ^^^^^^^^ method not found in `Either<Schema, RecordField>`

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:138:76
    |
138 |             avro_map_type.insert("key-id".to_string(), Value::Number((self.last_map_key_field_id) as i64));
    |                                                                            ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:139:78
    |
139 |             avro_map_type.insert("value-id".to_string(), Value::Number((self.last_map_value_field_id) as i64));
    |                                                                              ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no variant or associated item named `BTreeMap` found for enum `apache_avro::Schema` in the current scope
    --> crates/iceberg/src/avro/schema.rs:140:53
     |
140  |             Ok(AvroSchema::Map(Box::new(AvroSchema::BTreeMap(avro_map_type))))
     |                                                     ^^^^^^^^ variant or associated item not found in `Schema`
     |
note: if you're trying to build a new `apache_avro::Schema` consider using one of the following associated functions:
      apache_avro::Schema::parse_str
      apache_avro::Schema::parse_reader
      apache_avro::Schema::parse
      apache_avro::Schema::parse_with_names
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:997:5
     |
997  |     pub fn parse_str(input: &str) -> Result<Schema, Error> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1035 |     pub fn parse_reader(reader: &mut (impl Read + ?Sized)) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1044 |     pub fn parse(value: &Value) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1051 |     pub(crate) fn parse_with_names(value: &Value, names: Names) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:140:16
    |
140 |             Ok(AvroSchema::Map(Box::new(AvroSchema::BTreeMap(avro_map_type))))
    |             -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Either<Schema, RecordField>`, found `Schema`
    |             |
    |             arguments to this enum variant are incorrect
    |
    = note: expected enum `itertools::Either<apache_avro::Schema, RecordField>`
               found enum `apache_avro::Schema`
help: the type constructed contains `apache_avro::Schema` due to the type of the argument passed
   --> crates/iceberg/src/avro/schema.rs:140:13
    |
140 |             Ok(AvroSchema::Map(Box::new(AvroSchema::BTreeMap(avro_map_type))))
    |             ^^^--------------------------------------------------------------^
    |                |
    |                this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: try wrapping the expression in `itertools::Either::Left`
    |
140 |             Ok(itertools::Either::Left(AvroSchema::Map(Box::new(AvroSchema::BTreeMap(avro_map_type)))))
    |                ++++++++++++++++++++++++                                                              +

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:146:25
    |
146 |                 schema: Box::new(key_result),
    |                         ^^^^^^^^^^^^^^^^^^^^ expected `Schema`, found `Box<Either<Schema, RecordField>>`
    |
    = note: expected enum `apache_avro::Schema`
             found struct `Box<itertools::Either<apache_avro::Schema, RecordField>>`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:148:24
    |
148 |                 order: None,
    |                        ^^^^ expected `RecordFieldOrder`, found `Option<_>`
    |
    = note: expected enum `RecordFieldOrder`
               found enum `std::option::Option<_>`

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:149:32
    |
149 |                 position: self.last_map_key_field_id,
    |                                ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0063]: missing fields `aliases`, `custom_attributes` and `doc` in initializer of `RecordField`
   --> crates/iceberg/src/avro/schema.rs:144:25
    |
144 |             fields.push(AvroRecordField {
    |                         ^^^^^^^^^^^^^^^ missing `aliases`, `custom_attributes` and `doc`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:153:25
    |
153 |                 schema: Box::new(value_result),
    |                         ^^^^^^^^^^^^^^^^^^^^^^ expected `Schema`, found `Box<Either<Schema, RecordField>>`
    |
    = note: expected enum `apache_avro::Schema`
             found struct `Box<itertools::Either<apache_avro::Schema, RecordField>>`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:155:24
    |
155 |                 order: None,
    |                        ^^^^ expected `RecordFieldOrder`, found `Option<_>`
    |
    = note: expected enum `RecordFieldOrder`
               found enum `std::option::Option<_>`

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:156:32
    |
156 |                 position: self.last_map_value_field_id,
    |                                ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0063]: missing fields `aliases`, `custom_attributes` and `doc` in initializer of `RecordField`
   --> crates/iceberg/src/avro/schema.rs:151:25
    |
151 |             fields.push(AvroRecordField {
    |                         ^^^^^^^^^^^^^^^ missing `aliases`, `custom_attributes` and `doc`

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:160:42
    |
160 |                 &format!("k{}_v{}", self.last_map_key_field_id, self.last_map_value_field_id),
    |                                          ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:160:70
    |
160 |                 &format!("k{}_v{}", self.last_map_key_field_id, self.last_map_value_field_id),
    |                                                                      ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no method named `to_value` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:167:70
    |
167 |             avro_logical_map_type.insert("items".to_string(), record.to_value()?);
    |                                                                      ^^^^^^^^ method not found in `Schema`

error[E0599]: no variant or associated item named `BTreeMap` found for enum `apache_avro::Schema` in the current scope
    --> crates/iceberg/src/avro/schema.rs:169:55
     |
169  |             Ok(AvroSchema::Array(Box::new(AvroSchema::BTreeMap(avro_logical_map_type))))
     |                                                       ^^^^^^^^ variant or associated item not found in `Schema`
     |
note: if you're trying to build a new `apache_avro::Schema` consider using one of the following associated functions:
      apache_avro::Schema::parse_str
      apache_avro::Schema::parse_reader
      apache_avro::Schema::parse
      apache_avro::Schema::parse_with_names
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:997:5
     |
997  |     pub fn parse_str(input: &str) -> Result<Schema, Error> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1035 |     pub fn parse_reader(reader: &mut (impl Read + ?Sized)) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1044 |     pub fn parse(value: &Value) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1051 |     pub(crate) fn parse_with_names(value: &Value, names: Names) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:169:16
    |
169 |             Ok(AvroSchema::Array(Box::new(AvroSchema::BTreeMap(avro_logical_map_type))))
    |             -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Either<Schema, RecordField>`, found `Schema`
    |             |
    |             arguments to this enum variant are incorrect
    |
    = note: expected enum `itertools::Either<apache_avro::Schema, RecordField>`
               found enum `apache_avro::Schema`
help: the type constructed contains `apache_avro::Schema` due to the type of the argument passed
   --> crates/iceberg/src/avro/schema.rs:169:13
    |
169 |             Ok(AvroSchema::Array(Box::new(AvroSchema::BTreeMap(avro_logical_map_type))))
    |             ^^^------------------------------------------------------------------------^
    |                |
    |                this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: try wrapping the expression in `itertools::Either::Left`
    |
169 |             Ok(itertools::Either::Left(AvroSchema::Array(Box::new(AvroSchema::BTreeMap(avro_logical_map_type)))))
    |                ++++++++++++++++++++++++                                                                        +

Some errors have detailed explanations: E0063, E0308, E0599, E0609.
For more information about an error, try `rustc --explain E0063`.
error: could not compile `iceberg` (lib) due to 19 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 19 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/iceberg/rust/crates/iceberg)
error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:134:9
    |
133 |     match key_result {
    |           ---------- this expression has type `itertools::Either<apache_avro::Schema, RecordField>`
134 |         AvroSchema::String => {
    |         ^^^^^^^^^^^^^^^^^^ expected `Either<Schema, RecordField>`, found `Schema`
    |
    = note: expected enum `itertools::Either<apache_avro::Schema, RecordField>`
               found enum `apache_avro::Schema`
help: try wrapping the pattern in `itertools::Either::Left`
    |
134 |         itertools::Either::Left(AvroSchema::String) => {
    |         ++++++++++++++++++++++++                  +

error[E0599]: no method named `to_value` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:137:69
    |
137 |             avro_map_type.insert("values".to_string(), value_result.to_value()?);
    |                                                                     ^^^^^^^^ method not found in `Either<Schema, RecordField>`

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:138:76
    |
138 |             avro_map_type.insert("key-id".to_string(), Value::Number((self.last_map_key_field_id) as i64));
    |                                                                            ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:139:78
    |
139 |             avro_map_type.insert("value-id".to_string(), Value::Number((self.last_map_value_field_id) as i64));
    |                                                                              ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no variant or associated item named `BTreeMap` found for enum `apache_avro::Schema` in the current scope
    --> crates/iceberg/src/avro/schema.rs:140:53
     |
140  |             Ok(AvroSchema::Map(Box::new(AvroSchema::BTreeMap(avro_map_type))))
     |                                                     ^^^^^^^^ variant or associated item not found in `Schema`
     |
note: if you're trying to build a new `apache_avro::Schema` consider using one of the following associated functions:
      apache_avro::Schema::parse_str
      apache_avro::Schema::parse_reader
      apache_avro::Schema::parse
      apache_avro::Schema::parse_with_names
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:997:5
     |
997  |     pub fn parse_str(input: &str) -> Result<Schema, Error> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1035 |     pub fn parse_reader(reader: &mut (impl Read + ?Sized)) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1044 |     pub fn parse(value: &Value) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1051 |     pub(crate) fn parse_with_names(value: &Value, names: Names) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:140:16
    |
140 |             Ok(AvroSchema::Map(Box::new(AvroSchema::BTreeMap(avro_map_type))))
    |             -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Either<Schema, RecordField>`, found `Schema`
    |             |
    |             arguments to this enum variant are incorrect
    |
    = note: expected enum `itertools::Either<apache_avro::Schema, RecordField>`
               found enum `apache_avro::Schema`
help: the type constructed contains `apache_avro::Schema` due to the type of the argument passed
   --> crates/iceberg/src/avro/schema.rs:140:13
    |
140 |             Ok(AvroSchema::Map(Box::new(AvroSchema::BTreeMap(avro_map_type))))
    |             ^^^--------------------------------------------------------------^
    |                |
    |                this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: try wrapping the expression in `itertools::Either::Left`
    |
140 |             Ok(itertools::Either::Left(AvroSchema::Map(Box::new(AvroSchema::BTreeMap(avro_map_type)))))
    |                ++++++++++++++++++++++++                                                              +

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:146:25
    |
146 |                 schema: Box::new(key_result),
    |                         ^^^^^^^^^^^^^^^^^^^^ expected `Schema`, found `Box<Either<Schema, RecordField>>`
    |
    = note: expected enum `apache_avro::Schema`
             found struct `Box<itertools::Either<apache_avro::Schema, RecordField>>`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:148:24
    |
148 |                 order: None,
    |                        ^^^^ expected `RecordFieldOrder`, found `Option<_>`
    |
    = note: expected enum `RecordFieldOrder`
               found enum `std::option::Option<_>`

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:149:32
    |
149 |                 position: self.last_map_key_field_id,
    |                                ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0063]: missing fields `aliases`, `custom_attributes` and `doc` in initializer of `RecordField`
   --> crates/iceberg/src/avro/schema.rs:144:25
    |
144 |             fields.push(AvroRecordField {
    |                         ^^^^^^^^^^^^^^^ missing `aliases`, `custom_attributes` and `doc`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:153:25
    |
153 |                 schema: Box::new(value_result),
    |                         ^^^^^^^^^^^^^^^^^^^^^^ expected `Schema`, found `Box<Either<Schema, RecordField>>`
    |
    = note: expected enum `apache_avro::Schema`
             found struct `Box<itertools::Either<apache_avro::Schema, RecordField>>`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:155:24
    |
155 |                 order: None,
    |                        ^^^^ expected `RecordFieldOrder`, found `Option<_>`
    |
    = note: expected enum `RecordFieldOrder`
               found enum `std::option::Option<_>`

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:156:32
    |
156 |                 position: self.last_map_value_field_id,
    |                                ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0063]: missing fields `aliases`, `custom_attributes` and `doc` in initializer of `RecordField`
   --> crates/iceberg/src/avro/schema.rs:151:25
    |
151 |             fields.push(AvroRecordField {
    |                         ^^^^^^^^^^^^^^^ missing `aliases`, `custom_attributes` and `doc`

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:160:42
    |
160 |                 &format!("k{}_v{}", self.last_map_key_field_id, self.last_map_value_field_id),
    |                                          ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:160:70
    |
160 |                 &format!("k{}_v{}", self.last_map_key_field_id, self.last_map_value_field_id),
    |                                                                      ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no method named `to_value` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:167:70
    |
167 |             avro_logical_map_type.insert("items".to_string(), record.to_value()?);
    |                                                                      ^^^^^^^^ method not found in `Schema`

error[E0599]: no variant or associated item named `BTreeMap` found for enum `apache_avro::Schema` in the current scope
    --> crates/iceberg/src/avro/schema.rs:169:55
     |
169  |             Ok(AvroSchema::Array(Box::new(AvroSchema::BTreeMap(avro_logical_map_type))))
     |                                                       ^^^^^^^^ variant or associated item not found in `Schema`
     |
note: if you're trying to build a new `apache_avro::Schema` consider using one of the following associated functions:
      apache_avro::Schema::parse_str
      apache_avro::Schema::parse_reader
      apache_avro::Schema::parse
      apache_avro::Schema::parse_with_names
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:997:5
     |
997  |     pub fn parse_str(input: &str) -> Result<Schema, Error> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1035 |     pub fn parse_reader(reader: &mut (impl Read + ?Sized)) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1044 |     pub fn parse(value: &Value) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1051 |     pub(crate) fn parse_with_names(value: &Value, names: Names) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:169:16
    |
169 |             Ok(AvroSchema::Array(Box::new(AvroSchema::BTreeMap(avro_logical_map_type))))
    |             -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Either<Schema, RecordField>`, found `Schema`
    |             |
    |             arguments to this enum variant are incorrect
    |
    = note: expected enum `itertools::Either<apache_avro::Schema, RecordField>`
               found enum `apache_avro::Schema`
help: the type constructed contains `apache_avro::Schema` due to the type of the argument passed
   --> crates/iceberg/src/avro/schema.rs:169:13
    |
169 |             Ok(AvroSchema::Array(Box::new(AvroSchema::BTreeMap(avro_logical_map_type))))
    |             ^^^------------------------------------------------------------------------^
    |                |
    |                this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: try wrapping the expression in `itertools::Either::Left`
    |
169 |             Ok(itertools::Either::Left(AvroSchema::Array(Box::new(AvroSchema::BTreeMap(avro_logical_map_type)))))
    |                ++++++++++++++++++++++++                                                                        +

Some errors have detailed explanations: E0063, E0308, E0599, E0609.
For more information about an error, try `rustc --explain E0063`.
error: could not compile `iceberg` (lib) due to 19 previous errors


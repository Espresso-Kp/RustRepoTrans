Fail
file path is :
projects/deltachat-core/rust/src/imex.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/deltachat-core/rust)
error[E0425]: cannot find function `ensure_secret_key_exists` in module `key`
   --> src/imex.rs:202:14
    |
202 |     if !key::ensure_secret_key_exists(context).await? {
    |              ^^^^^^^^^^^^^^^^^^^^^^^^ not found in `key`
    |
help: consider importing this function
    |
3   + use crate::e2ee::ensure_secret_key_exists;
    |
help: if you import `ensure_secret_key_exists`, refer to it directly
    |
202 -     if !key::ensure_secret_key_exists(context).await? {
202 +     if !ensure_secret_key_exists(context).await? {
    |

error[E0599]: no function or associated item named `from_bytes` found for struct `SignedSecretKey` in the current scope
   --> src/imex.rs:189:45
    |
189 |     let curr_private_key = SignedSecretKey::from_bytes(load_self_secret_key(context).await.unwrap().to_bytes());
    |                                             ^^^^^^^^^^ function or associated item not found in `SignedSecretKey`
    |
note: if you're trying to build a new `SignedSecretKey`, consider using `SignedSecretKey::new` which returns `SignedSecretKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/secret.rs:47:5
    |
47  | /     pub fn new(
48  | |         primary_key: packet::SecretKey,
49  | |         details: SignedKeyDetails,
50  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
51  | |         mut secret_subkeys: Vec<SignedSecretSubKey>,
52  | |     ) -> Self {
    | |_____________^
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
3   + use pgp::Deserializable;
    |

error[E0599]: no method named `is_none` found for reference `&context::Context` in the current scope
   --> src/imex.rs:197:16
    |
197 |     if context.is_none() || passphrase.len() < 2 || curr_private_key.is_none() {
    |                ^^^^^^^ method not found in `&Context`

error[E0599]: no method named `get_config` found for struct `Sql` in the current scope
   --> src/imex.rs:207:39
    |
207 |         self_addr = match context.sql.get_config(Config::ConfiguredAddr).await {
    |                                       ^^^^^^^^^^ help: there is a method with a similar name: `get_raw_config`
    |
   ::: src/sql.rs:57:1
    |
57  | pub struct Sql {
    | -------------- method `get_config` not found for this struct

error[E0308]: `match` arms have incompatible types
   --> src/imex.rs:209:21
    |
207 |           self_addr = match context.sql.get_config(Config::ConfiguredAddr).await {
    |  _____________________-
208 | |             Some(addr) => addr,
    | |                           ---- this is found to be of type `std::option::Option<_>`
209 | |             None => "".to_string(),
    | |                     ^^^^^^^^^^^^^^ expected `Option<_>`, found `String`
210 | |         };
    | |_________- `match` arms have incompatible types
    |
    = note: expected enum `std::option::Option<_>`
             found struct `std::string::String`
help: try wrapping the expression in `Some`
    |
209 |             None => Some("".to_string()),
    |                     +++++              +

error[E0599]: no method named `and_then` found for type `bool` in the current scope
   --> src/imex.rs:214:68
    |
214 |         let payload_key_asc = curr_private_key.to_asc(e2ee_enabled.and_then(|e| Some(("Autocrypt-Prefer-Encrypt", "mutual\r\n"))));
    |                                                                    ^^^^^^^^ help: there is a method with a similar name: `then`

error[E0308]: mismatched types
   --> src/imex.rs:244:13
    |
243 |         let setup_message_title = match crate::stock_str::ac_setup_msg_subject(&context).await {
    |                                         ------------------------------------------------------ this expression has type `std::string::String`
244 |             Ok(msg) => msg,
    |             ^^^^^^^ expected `String`, found `Result<_, _>`
    |
    = note: expected struct `std::string::String`
                 found enum `std::result::Result<_, _>`

error[E0308]: mismatched types
   --> src/imex.rs:245:13
    |
243 |         let setup_message_title = match crate::stock_str::ac_setup_msg_subject(&context).await {
    |                                         ------------------------------------------------------ this expression has type `std::string::String`
244 |             Ok(msg) => msg,
245 |             Err(_) => "Autocrypt message".to_string(),
    |             ^^^^^^ expected `String`, found `Result<_, _>`
    |
    = note: expected struct `std::string::String`
                 found enum `std::result::Result<_, _>`

error[E0308]: mismatched types
   --> src/imex.rs:248:13
    |
247 |         let mut setup_message_body = match crate::stock_str::ac_setup_msg_body(&context).await {
    |                                            --------------------------------------------------- this expression has type `std::string::String`
248 |             Ok(msg) => msg,
    |             ^^^^^^^ expected `String`, found `Result<_, _>`
    |
    = note: expected struct `std::string::String`
                 found enum `std::result::Result<_, _>`

error[E0308]: mismatched types
   --> src/imex.rs:249:13
    |
247 |         let mut setup_message_body = match crate::stock_str::ac_setup_msg_body(&context).await {
    |                                            --------------------------------------------------- this expression has type `std::string::String`
248 |             Ok(msg) => msg,
249 |             Err(_) => "This is the Autocrypt message".to_string(),
    |             ^^^^^^ expected `String`, found `Result<_, _>`
    |
    = note: expected struct `std::string::String`
                 found enum `std::result::Result<_, _>`

error[E0599]: no function or associated item named `from_bytes` found for struct `pgp::SignedSecretKey` in the current scope
   --> src/imex.rs:189:45
    |
189 |     let curr_private_key = SignedSecretKey::from_bytes(load_self_secret_key(context).await.unwrap().to_bytes());
    |                                             ^^^^^^^^^^ function or associated item not found in `SignedSecretKey`
    |
note: if you're trying to build a new `pgp::SignedSecretKey`, consider using `pgp::SignedSecretKey::new` which returns `pgp::SignedSecretKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/secret.rs:47:5
    |
47  | /     pub fn new(
48  | |         primary_key: packet::SecretKey,
49  | |         details: SignedKeyDetails,
50  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
51  | |         mut secret_subkeys: Vec<SignedSecretSubKey>,
52  | |     ) -> Self {
    | |_____________^
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
3   + use pgp::Deserializable;
    |

Some errors have detailed explanations: E0308, E0425, E0599.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `deltachat` (lib) due to 10 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0599]: no method named `get_config` found for struct `sql::Sql` in the current scope
   --> src/imex.rs:207:39
    |
207 |         self_addr = match context.sql.get_config(Config::ConfiguredAddr).await {
    |                                       ^^^^^^^^^^ help: there is a method with a similar name: `get_raw_config`
    |
   ::: src/sql.rs:57:1
    |
57  | pub struct Sql {
    | -------------- method `get_config` not found for this struct

error: could not compile `deltachat` (lib test) due to 10 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


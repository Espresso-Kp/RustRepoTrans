Fail
file path is :
projects/deltachat-core/rust/src/securejoin.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/RustRepoTrans/projects/deltachat-core/rust)
error: format argument must be a string literal
   --> src/securejoin.rs:109:20
    |
109 |     info!(context, 0, "Generated QR code: {}", qr);
    |                    ^
    |
help: you might be missing a string literal to format with
    |
109 |     info!(context, "{} {} {}", 0, "Generated QR code: {}", qr);
    |                    +++++++++++

error[E0425]: cannot find function `lookup` in this scope
  --> src/securejoin.rs:66:20
   |
66 |     let mut auth = lookup(context, Namespace::Auth, group_chat_id).await.unwrap_or_default();
   |                    ^^^^^^ not found in this scope
   |
help: consider importing this function
   |
3  + use crate::token::lookup;
   |

error[E0603]: function import `create_id` is private
   --> src/securejoin.rs:69:36
    |
69  |         invitenumber = Some(token::create_id());
    |                                    ^^^^^^^^^ private function import
    |
note: the function import `create_id` is defined here...
   --> src/token.rs:12:20
    |
12  | use crate::tools::{create_id, time};
    |                    ^^^^^^^^^
note: ...and refers to the function `create_id` which is defined here
   --> src/tools.rs:265:1
    |
265 | pub(crate) fn create_id() -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider importing this function instead
    |
69  |         invitenumber = Some(crate::tools::create_id());
    |                             ~~~~~~~~~~~~~~~~~~~~~~~
help: import `create_id` through the re-export
    |
69  |         invitenumber = Some(tools::create_id());
    |                             ~~~~~~~~~~~~~~~~

error[E0603]: function import `create_id` is private
   --> src/securejoin.rs:74:28
    |
74  |         auth = Some(token::create_id());
    |                            ^^^^^^^^^ private function import
    |
note: the function import `create_id` is defined here...
   --> src/token.rs:12:20
    |
12  | use crate::tools::{create_id, time};
    |                    ^^^^^^^^^
note: ...and refers to the function `create_id` which is defined here
   --> src/tools.rs:265:1
    |
265 | pub(crate) fn create_id() -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider importing this function instead
    |
74  |         auth = Some(crate::tools::create_id());
    |                     ~~~~~~~~~~~~~~~~~~~~~~~
help: import `create_id` through the re-export
    |
74  |         auth = Some(tools::create_id());
    |                     ~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
  --> src/securejoin.rs:61:26
   |
61 |         Some(chat_id) => chat_id,
   |                          ^^^^^^^ expected `Option<ChatId>`, found `ChatId`
   |
   = note: expected enum `std::option::Option<ChatId>`
            found struct `ChatId`
help: try wrapping the expression in `Some`
   |
61 |         Some(chat_id) => Some(chat_id),
   |                          +++++       +

error[E0599]: no method named `is_empty` found for enum `std::option::Option` in the current scope
    --> src/securejoin.rs:79:18
     |
79   |     if self_addr.is_empty() {
     |                  ^^^^^^^^ method not found in `Option<String>`
     |
note: the method `is_empty` exists on the type `std::string::String`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/string.rs:1759:5
     |
1759 |     pub fn is_empty(&self) -> bool {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `std::string::String` value, panicking if the value is an `Option::None`
     |
79   |     if self_addr.expect("REASON").is_empty() {
     |                 +++++++++++++++++

error[E0308]: mismatched types
   --> src/securejoin.rs:84:69
    |
84  |     let fingerprint = get_self_fingerprint(context).await.unwrap_or(None); 
    |                                                           --------- ^^^^ expected `Fingerprint`, found `Option<_>`
    |                                                           |
    |                                                           arguments to this method are incorrect
    |
    = note: expected struct `key::Fingerprint`
                 found enum `std::option::Option<_>`
help: the return type of this call is `std::option::Option<_>` due to the type of the argument passed
   --> src/securejoin.rs:84:23
    |
84  |     let fingerprint = get_self_fingerprint(context).await.unwrap_or(None); 
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----^
    |                                                                     |
    |                                                                     this argument influences the return type of `unwrap_or`
note: method defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:951:12
    |
951 |     pub fn unwrap_or(self, default: T) -> T {
    |            ^^^^^^^^^

error[E0599]: no method named `is_none` found for struct `key::Fingerprint` in the current scope
   --> src/securejoin.rs:86:20
    |
86  |     if fingerprint.is_none() {
    |                    ^^^^^^^ method not found in `Fingerprint`
    |
   ::: src/key.rs:372:1
    |
372 | pub struct Fingerprint(Vec<u8>);
    | ---------------------- method `is_none` not found for this struct

error[E0308]: mismatched types
   --> src/securejoin.rs:90:52
    |
90  |     let self_addr_urlencoded = utf8_percent_encode(&self_addr, NON_ALPHANUMERIC).to_string();
    |                                ------------------- ^^^^^^^^^^ expected `&str`, found `&Option<String>`
    |                                |
    |                                arguments to this function are incorrect
    |
    = note: expected reference `&str`
               found reference `&std::option::Option<std::string::String>`
note: function defined here
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/percent-encoding-2.3.1/src/lib.rs:251:8
    |
251 | pub fn utf8_percent_encode<'a>(input: &'a str, ascii_set: &'static AsciiSet) -> PercentEncode<'a> {
    |        ^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/securejoin.rs:91:52
    |
91  |     let self_name_urlencoded = utf8_percent_encode(&self_name, NON_ALPHANUMERIC).to_string();
    |                                ------------------- ^^^^^^^^^^ expected `&str`, found `&Option<String>`
    |                                |
    |                                arguments to this function are incorrect
    |
    = note: expected reference `&str`
               found reference `&std::option::Option<std::string::String>`
note: function defined here
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/percent-encoding-2.3.1/src/lib.rs:251:8
    |
251 | pub fn utf8_percent_encode<'a>(input: &'a str, ascii_set: &'static AsciiSet) -> PercentEncode<'a> {
    |        ^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `is_empty` found for struct `Chat` in the current scope
    --> src/securejoin.rs:98:17
     |
98   |         if chat.is_empty() {
     |                 ^^^^^^^^ method not found in `Chat`
     |
    ::: src/chat.rs:1480:1
     |
1480 | pub struct Chat {
     | --------------- method `is_empty` not found for this struct
     |
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following traits define an item `is_empty`, perhaps you need to implement one of them:
             candidate #1: `ExactSizeIterator`
             candidate #2: `bitflags::traits::Flags`
             candidate #3: `SampleRange`
             candidate #4: `aead::Buffer`
             candidate #5: `nix::NixPath`
             candidate #6: `governor::state::keyed::ShrinkableKeyedStateStore`
             candidate #7: `toml_edit::table::TableLike`
             candidate #8: `gimli::Reader`
help: some of the expressions' fields have a method of the same name
     |
98   |         if chat.grpid.is_empty() {
     |                 ++++++
98   |         if chat.name.is_empty() {
     |                 +++++
98   |         if chat.param.is_empty() {
     |                 ++++++

error[E0599]: no method named `unwrap` found for struct `key::Fingerprint` in the current scope
   --> src/securejoin.rs:104:77
    |
104 | ...   qr = format!("OPENPGP4FPR:{}#a={}&g={}&x={}&i={}&s={}", fingerprint.unwrap().as_hex(), self_addr_urlencoded, group_name_urlencoded,...
    |                                                                           ^^^^^^ method not found in `Fingerprint`
    |
   ::: src/key.rs:372:1
    |
372 | pub struct Fingerprint(Vec<u8>);
    | ---------------------- method `unwrap` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `unwrap`, perhaps you need to implement one of them:
            candidate #1: `fallible_iterator::FallibleIterator`
            candidate #2: `OwnedRetriever`

error[E0599]: no method named `unwrap` found for struct `key::Fingerprint` in the current scope
   --> src/securejoin.rs:106:72
    |
106 | ...   qr = format!("OPENPGP4FPR:{}#a={}&n={}&i={}&s={}", fingerprint.unwrap().as_hex(), self_addr_urlencoded, self_name_urlencoded, invit...
    |                                                                      ^^^^^^ method not found in `Fingerprint`
    |
   ::: src/key.rs:372:1
    |
372 | pub struct Fingerprint(Vec<u8>);
    | ---------------------- method `unwrap` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `unwrap`, perhaps you need to implement one of them:
            candidate #1: `fallible_iterator::FallibleIterator`
            candidate #2: `OwnedRetriever`

error[E0308]: mismatched types
  --> src/securejoin.rs:61:26
   |
61 |         Some(chat_id) => chat_id,
   |                          ^^^^^^^ expected `Option<ChatId>`, found `ChatId`
   |
   = note: expected enum `std::option::Option<chat::ChatId>`
            found struct `chat::ChatId`
help: try wrapping the expression in `Some`
   |
61 |         Some(chat_id) => Some(chat_id),
   |                          +++++       +

Some errors have detailed explanations: E0308, E0425, E0599, E0603.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `deltachat` (lib) due to 13 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0599]: no method named `is_empty` found for struct `chat::Chat` in the current scope
    --> src/securejoin.rs:98:17
     |
98   |         if chat.is_empty() {
     |                 ^^^^^^^^ method not found in `chat::Chat`
     |
    ::: src/chat.rs:1480:1
     |
1480 | pub struct Chat {
     | --------------- method `is_empty` not found for this struct
     |
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following traits define an item `is_empty`, perhaps you need to implement one of them:
             candidate #1: `ExactSizeIterator`
             candidate #2: `bitflags::traits::Flags`
             candidate #3: `SampleRange`
             candidate #4: `gimli::read::reader::Reader`
             candidate #5: `aead::Buffer`
             candidate #6: `nix::NixPath`
             candidate #7: `governor::state::keyed::ShrinkableKeyedStateStore`
             candidate #8: `toml_edit::table::TableLike`
help: some of the expressions' fields have a method of the same name
     |
98   |         if chat.grpid.is_empty() {
     |                 ++++++
98   |         if chat.name.is_empty() {
     |                 +++++
98   |         if chat.param.is_empty() {
     |                 ++++++

error: could not compile `deltachat` (lib test) due to 13 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


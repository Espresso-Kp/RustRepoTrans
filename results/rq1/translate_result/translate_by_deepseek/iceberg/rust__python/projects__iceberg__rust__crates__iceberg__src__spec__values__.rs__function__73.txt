<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def __iter__(self) -> Iterator[MappedField]:
        """Iterate over the mapped fields."""
        return iter(self.root)
</python function>
<rust function signature>
pub fn iter(&self) -> impl Iterator<Item = Option<&Literal>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn iter(&self) -> impl Iterator<Item = Option<&Literal>> {
        self.null_bitmap.iter().zip(self.fields.iter()).map(
            |(null, value)| {
                if *null {
                    None
                } else {
                    Some(value)
                }
            },
        )
    }

fn map(&mut self, map: &AvroSchema, value: Option<Type>) -> Result<Option<Type>> {
        if let AvroSchema::Map(value_schema) = map {
            // Due to avro rust implementation's limitation, we can't store attributes in map schema,
            // we will fix it later when it has been resolved.
            let key_field = NestedField::map_key_element(
                self.next_field_id(),
                Type::Primitive(PrimitiveType::String),
            );
            let value_field = NestedField::map_value_element(
                self.next_field_id(),
                value.unwrap(),
                !is_avro_optional(value_schema),
            );
            Ok(Some(Type::Map(MapType {
                key_field: key_field.into(),
                value_field: value_field.into(),
            })))
        } else {
            Err(Error::new(
                ErrorKind::Unexpected,
                "Expected avro map schema, but {map}",
            ))
        }
    }

pub struct Struct {
    /// Vector to store the field values
    fields: Vec<Literal>,
    /// Null bitmap
    null_bitmap: BitVec,
}


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>
use std::any::Any;
use std::collections::HashMap;
use std::fmt::{Display, Formatter};
use std::hash::Hash;
use std::ops::Index;
use std::str::FromStr;
use bitvec::vec::BitVec;
use chrono::{DateTime, NaiveDate, NaiveDateTime, NaiveTime, TimeZone, Utc};
use ordered_float::OrderedFloat;
use rust_decimal::Decimal;
use serde_bytes::ByteBuf;
use serde_json::{Map as JsonMap, Number, Value as JsonValue};
use uuid::Uuid;
use _serde::RawLiteral;
use crate::error::Result;
use crate::spec::values::date::{date_from_naive_date, days_to_date, unix_epoch};
use crate::spec::values::time::microseconds_to_time;
use crate::spec::values::timestamp::microseconds_to_datetime;
use crate::spec::values::timestamptz::microseconds_to_datetimetz;
use crate::spec::MAX_DECIMAL_PRECISION;
use crate::{ensure_data_valid, Error, ErrorKind};
use super::datatypes::{PrimitiveType, Type};
use chrono::{DateTime, NaiveDate, TimeDelta, TimeZone, Utc};
use chrono::NaiveTime;
use chrono::{DateTime, NaiveDateTime};
use chrono::DateTime;
use chrono::Utc;
use serde::{
        de::Visitor,
        ser::{SerializeMap, SerializeSeq, SerializeStruct},
        Deserialize, Serialize,
    };
use serde_bytes::ByteBuf;
use serde_derive::Deserialize as DeserializeDerive;
use serde_derive::Serialize as SerializeDerive;
use crate::{
        spec::{PrimitiveType, Type, MAP_KEY_FIELD_NAME, MAP_VALUE_FIELD_NAME},
        Error, ErrorKind,
    };
use super::{Literal, Map, PrimitiveLiteral};
use apache_avro::{to_value, types::Value};
use crate::{
        avro::schema_to_avro_schema,
        spec::{
            datatypes::{ListType, MapType, NestedField, StructType},
            Schema,
        },
    };
use super::*;

</rust function dependency libraries>

</message>
<function>
pub fn iter(&self) -> impl Iterator<Item = Option<&Literal>> {
        self.null_bitmap.iter().zip(self.fields.iter()).map(
            |(null, value)| {
                if *null {
                    None
                } else {
                    Some(value)
                }
            },
        )
    }
</function>
<translated function>
 ```rust
pub fn iter(&self) -> impl Iterator<Item = Option<&Literal>> {
    self.null_bitmap.iter().zip(self.fields.iter()).map(
        |(null, value)| {
            if *null {
                None
            } else {
                Some(value)
            }
        },
    )
}
```</translated function> ```rust
pub fn iter(&self) -> impl Iterator<Item = Option<&Literal>> {
    self.null_bitmap.iter().zip(self.fields.iter()).map(
        |(null, value)| {
            if *null {
                None
            } else {
                Some(value)
            }
        },
    )
}
```
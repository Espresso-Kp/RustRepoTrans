<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def new_output(self, location: str) -> FsspecOutputFile:
        """Get an FsspecOutputFile instance to write bytes to the file at the given location.

        Args:
            location (str): A URI or a path to a local file.

        Returns:
            FsspecOutputFile: An FsspecOutputFile instance for the given location.
        """
        uri = urlparse(location)
        fs = self.get_fs(uri.scheme)
        return FsspecOutputFile(location=location, fs=fs)
</python function>
<rust function signature>
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> 
</rust function signature>
<rust function dependencies, and data type declarations>
fn create_operator<'a>(&self, path: &'a impl AsRef<str>) -> Result<(Operator, &'a str)> {
        let path = path.as_ref();
        match self {
            Storage::LocalFs { op } => {
                if let Some(stripped) = path.strip_prefix("file:/") {
                    Ok((op.clone(), stripped))
                } else {
                    Ok((op.clone(), &path[1..]))
                }
            }
            Storage::S3 { scheme_str, props } => {
                let mut props = props.clone();
                let url = Url::parse(path)?;
                let bucket = url.host_str().ok_or_else(|| {
                    Error::new(
                        ErrorKind::DataInvalid,
                        format!("Invalid s3 url: {}, missing bucket", path),
                    )
                })?;

                props.insert("bucket".to_string(), bucket.to_string());

                let prefix = format!("{}://{}/", scheme_str, bucket);
                if path.starts_with(&prefix) {
                    Ok((Operator::via_map(Scheme::S3, props)?, &path[prefix.len()..]))
                } else {
                    Err(Error::new(
                        ErrorKind::DataInvalid,
                        format!("Invalid s3 url: {}, should start with {}", path, prefix),
                    ))
                }
            }
        }
    }

pub struct OutputFile {
    op: Operator,
    // Absolution path of file.
    path: String,
    // Relative path of file to uri, starts at [`relative_path_pos`]
    relative_path_pos: usize,
}

pub struct FileIO {
    inner: Arc<Storage>,
}


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use bytes::Bytes;
use std::ops::Range;
use std::{collections::HashMap, sync::Arc};
use crate::{error::Result, Error, ErrorKind};
use once_cell::sync::Lazy;
use opendal::{Operator, Scheme};
use url::Url;
use std::io::Write;
use std::{fs::File, path::Path};
use futures::io::AllowStdIo;
use futures::AsyncReadExt;
use tempfile::TempDir;
use super::{FileIO, FileIOBuilder};

</rust function dependency libraries>

</message>
<function>
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> {
        let (op, relative_path) = self.inner.create_operator(&path)?;
        let path = path.as_ref().to_string();
        let relative_path_pos = path.len() - relative_path.len();
        Ok(OutputFile {
            op,
            path,
            relative_path_pos,
        })
    }
</function>
<translated function>
 ```rust
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> {
    let path = path.as_ref();
    let uri = url::parse(path)?;
    let fs = self.get_fs(uri.scheme())?;

    let (op, relative_path) = self.create_operator(path)?;

    Ok(OutputFile {
        op,
        path: relative_path.to_string(),
        relative_path_pos: 0,
    })
}
```</translated function> ```rust
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> {
    let path = path.as_ref();
    let uri = url::parse(path)?;
    let fs = self.get_fs(uri.scheme())?;

    let (op, relative_path) = self.create_operator(path)?;

    Ok(OutputFile {
        op,
        path: relative_path.to_string(),
        relative_path_pos: 0,
    })
}
```
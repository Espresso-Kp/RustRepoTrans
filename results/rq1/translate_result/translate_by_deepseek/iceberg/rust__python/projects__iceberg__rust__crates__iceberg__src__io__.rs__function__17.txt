<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def write(self, b: bytes) -> None:
        self._output_stream.write(b)
</python function>
<rust function signature>
async fn write(&mut self, bs: Bytes) -> Result<()> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct OutputFile {
    op: Operator,
    // Absolution path of file.
    path: String,
    // Relative path of file to uri, starts at [`relative_path_pos`]
    relative_path_pos: usize,
}


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use bytes::Bytes;
use std::ops::Range;
use std::{collections::HashMap, sync::Arc};
use crate::{error::Result, Error, ErrorKind};
use once_cell::sync::Lazy;
use opendal::{Operator, Scheme};
use url::Url;
use std::io::Write;
use std::{fs::File, path::Path};
use futures::io::AllowStdIo;
use futures::AsyncReadExt;
use tempfile::TempDir;
use super::{FileIO, FileIOBuilder};

</rust function dependency libraries>

</message>
<function>
async fn write(&mut self, bs: Bytes) -> Result<()> {
        Ok(opendal::Writer::write(self, bs).await?)
    }
</function>
<translated function>
 ```rust
async fn write(&mut self, bs: Bytes) -> Result<()> {
    self._output_stream.write(bs.as_ref()).map_err(|e| Error::new(ErrorKind::Other, e.to_string()))
}
```</translated function> ```rust
async fn write(&mut self, bs: Bytes) -> Result<()> {
    self._output_stream.write(bs.as_ref()).map_err(|e| Error::new(ErrorKind::Other, e.to_string()))
}
```
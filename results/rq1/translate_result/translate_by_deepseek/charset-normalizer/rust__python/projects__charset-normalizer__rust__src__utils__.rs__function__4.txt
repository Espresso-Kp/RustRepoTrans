<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def is_unicode_range_secondary(range_name: str) -> bool:
    return any(keyword in range_name for keyword in UNICODE_SECONDARY_RANGE_KEYWORD)
</python function>
<rust function signature>
pub(crate) fn is_unicode_range_secondary(range_name: &str) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn iter(&self) -> CharsetMatchesIter {
        CharsetMatchesIter {
            items: self.items.iter(),
        }
    }


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<function>
pub(crate) fn is_unicode_range_secondary(range_name: &str) -> bool {
    UNICODE_SECONDARY_RANGE_KEYWORD
        .iter()
        .any(|&s| range_name.contains(s))
}
</function>
<translated function>
 ```rust
pub(crate) fn is_unicode_range_secondary(range_name: &str) -> bool {
    use crate::consts::UNICODE_SECONDARY_RANGE_KEYWORD;

    UNICODE_SECONDARY_RANGE_KEYWORD.iter().any(|&keyword| range_name.contains(keyword))
}
```</translated function> ```rust
pub(crate) fn is_unicode_range_secondary(range_name: &str) -> bool {
    use crate::consts::UNICODE_SECONDARY_RANGE_KEYWORD;

    UNICODE_SECONDARY_RANGE_KEYWORD.iter().any(|&keyword| range_name.contains(keyword))
}
```
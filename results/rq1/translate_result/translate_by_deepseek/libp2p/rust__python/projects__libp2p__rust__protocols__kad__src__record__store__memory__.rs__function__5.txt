<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def get(self, peer_id: ID, key: str) -> Any:
        """
        :param peer_id: peer ID to get peer data for
        :param key: the key to search value for
        :return: value corresponding to the key
        :raise PeerStoreError: if peer ID or value not found
        """
        if peer_id in self.peer_data_map:
            try:
                val = self.peer_data_map[peer_id].get_metadata(key)
            except PeerDataError as error:
                raise PeerStoreError() from error
            return val
        raise PeerStoreError("peer ID not found")
</python function>
<rust function signature>
fn get(&self, k: &Key) -> Option<Cow<'_, Record>> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct MemoryStore {
    /// The identity of the peer owning the store.
    local_key: kbucket::Key<PeerId>,
    /// The configuration of the store.
    config: MemoryStoreConfig,
    /// The stored (regular) records.
    records: HashMap<Key, Record>,
    /// The stored provider records.
    providers: HashMap<Key, SmallVec<[ProviderRecord; K_VALUE.get()]>>,
    /// The set of all provider records for the node identified by `local_key`.
    ///
    /// Must be kept in sync with `providers`.
    provided: HashSet<ProviderRecord>,
}


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use super::*;
use crate::kbucket;
use smallvec::SmallVec;
use std::collections::{hash_map, hash_set, HashMap, HashSet};
use std::iter;
use super::*;
use crate::SHA_256_MH;
use quickcheck::*;
use rand::Rng;

</rust function dependency libraries>

</message>
<function>
fn get(&self, k: &Key) -> Option<Cow<'_, Record>> {
        self.records.get(k).map(Cow::Borrowed)
    }
</function>
<translated function>
 ```rust
impl MemoryStore {
    pub fn get(&self, k: &Key) -> Option<Cow<'_, Record>> {
        if let Some(record) = self.records.get(k) {
            return Some(Cow::Borrowed(record));
        }
        None
    }
}
```</translated function> ```rust
impl MemoryStore {
    pub fn get(&self, k: &Key) -> Option<Cow<'_, Record>> {
        if let Some(record) = self.records.get(k) {
            return Some(Cow::Borrowed(record));
        }
        None
    }
}
```
<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def to_base58(self) -> str:
        if not self._b58_str:
            self._b58_str = base58.b58encode(self._bytes).decode()
        return self._b58_str
</python function>
<rust function signature>
pub fn to_base58(self) -> String 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn to_bytes(self) -> Vec<u8> {
        self.multihash.to_bytes()
    }

pub struct PeerId {
    multihash: Multihash,
}


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use rand::Rng;
use sha2::Digest as _;
use std::{fmt, str::FromStr};
use thiserror::Error;
use serde::{Deserialize, Serialize};
use serde::de::*;
use super::*;

</rust function dependency libraries>

</message>
<function>
pub fn to_base58(self) -> String {
        bs58::encode(self.to_bytes()).into_string()
    }
</function>
<translated function>
 ```rust
use base58::{encode, FromBase58};
use std::str;

pub fn to_base58(self) -> String {
    if self._b58_str.is_empty() {
        let bytes = self.to_bytes();
        self._b58_str = encode(&bytes);
    }
    self._b58_str.clone()
}
```</translated function> ```rust
use base58::{encode, FromBase58};
use std::str;

pub fn to_base58(self) -> String {
    if self._b58_str.is_empty() {
        let bytes = self.to_bytes();
        self._b58_str = encode(&bytes);
    }
    self._b58_str.clone()
}
```
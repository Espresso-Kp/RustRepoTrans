<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public static int SERVER_2(int date,byte[] HID,byte[] HTID,byte[] Y,byte[] SST,byte[] xID,byte[] xCID,byte[] mSEC,byte[] E,byte[] F)
	{
		BIG q=new BIG(ROM.Modulus);
		ECP2 Q=ECP2.generator();

		ECP2 sQ=ECP2.fromBytes(SST);
		if (sQ.is_infinity()) return INVALID_POINT;	

		ECP R;
		if (date!=0)
			R=ECP.fromBytes(xCID);
		else 
		{
			if (xID==null) return BAD_PARAMS;
			R=ECP.fromBytes(xID);
		}
		if (R.is_infinity()) return INVALID_POINT;

		BIG y=BIG.fromBytes(Y);
		ECP P;
		if (date!=0) P=ECP.fromBytes(HTID);
		else 
		{
			if (HID==null) return BAD_PARAMS;
			P=ECP.fromBytes(HID);
		}
	
		if (P.is_infinity()) return INVALID_POINT;

		P=PAIR.G1mul(P,y);
		P.add(R); //P.affine();
		R=ECP.fromBytes(mSEC);
		if (R.is_infinity()) return INVALID_POINT;

		FP12 g;

		g=PAIR.ate2(Q,R,sQ,P);
		g=PAIR.fexp(g);

		if (!g.isunity())
		{
			if (HID!=null && xID!=null && E!=null && F!=null)
			{
				g.toBytes(E);
				if (date!=0)
				{
					P=ECP.fromBytes(HID);
					if (P.is_infinity()) return INVALID_POINT;
					R=ECP.fromBytes(xID);
					if (R.is_infinity()) return INVALID_POINT;

					P=PAIR.G1mul(P,y);
					P.add(R); //P.affine();
				}
				g=PAIR.ate(Q,P);
				g=PAIR.fexp(g);
				g.toBytes(F);
			}
			return BAD_PIN;
		}

		return 0;
	}
</java function>
<rust function signature>
pub fn server_2(
    date: usize,
    hid: &[u8],
    htid: Option<&[u8]>,
    y: &[u8],
    sst: &[u8],
    xid: Option<&[u8]>,
    xcid: Option<&[u8]>,
    msec: &[u8],
    e: Option<&mut [u8]>,
    f: Option<&mut [u8]>,
) -> isize 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn add(&mut self, Q: &ECP2) -> isize {
        let b = 3 * rom::CURVE_B_I;
        let mut t0 = self.x.clone();
        t0.mul(&Q.x); // x.Q.x
        let mut t1 = self.y.clone();
        t1.mul(&Q.y); // y.Q.y

        let mut t2 = self.z.clone();
        t2.mul(&Q.z);
        let mut t3 = self.x.clone();
        t3.add(&self.y);
        t3.norm(); //t3=X1+Y1
        let mut t4 = Q.x.clone();
        t4.add(&Q.y);
        t4.norm(); //t4=X2+Y2
        t3.mul(&t4); //t3=(X1+Y1)(X2+Y2)
        t4 = t0.clone();
        t4.add(&t1); //t4=X1.X2+Y1.Y2

        t3.sub(&t4);
        t3.norm();
        if ecp::SEXTIC_TWIST == SexticTwist::DType {
            t3.mul_ip();
            t3.norm(); //t3=(X1+Y1)(X2+Y2)-(X1.X2+Y1.Y2) = X1.Y2+X2.Y1
        }
        t4 = self.getpy();
        t4.add(&self.z);
        t4.norm(); //t4=Y1+Z1
        let mut x3 = Q.y.clone();
        x3.add(&Q.z);
        x3.norm(); //x3=Y2+Z2

        t4.mul(&x3); //t4=(Y1+Z1)(Y2+Z2)
        x3 = t1.clone(); //
        x3.add(&t2); //X3=Y1.Y2+Z1.Z2

        t4.sub(&x3);
        t4.norm();
        if ecp::SEXTIC_TWIST == SexticTwist::DType {
            t4.mul_ip();
            t4.norm(); //t4=(Y1+Z1)(Y2+Z2) - (Y1.Y2+Z1.Z2) = Y1.Z2+Y2.Z1
        }
        x3 = self.getpx();
        x3.add(&self.z);
        x3.norm(); // x3=X1+Z1
        let mut y3 = Q.x.clone();
        y3.add(&Q.z);
        y3.norm(); // y3=X2+Z2
        x3.mul(&y3); // x3=(X1+Z1)(X2+Z2)
        y3 = t0.clone();
        y3.add(&t2); // y3=X1.X2+Z1+Z2
        y3.rsub(&x3);
        y3.norm(); // y3=(X1+Z1)(X2+Z2) - (X1.X2+Z1.Z2) = X1.Z2+X2.Z1

        if ecp::SEXTIC_TWIST == SexticTwist::DType {
            t0.mul_ip();
            t0.norm(); // x.Q.x
            t1.mul_ip();
            t1.norm(); // y.Q.y
        }
        x3 = t0.clone();
        x3.add(&t0);
        t0.add(&x3);
        t0.norm();
        t2.imul(b);
        if ecp::SEXTIC_TWIST == SexticTwist::MType {
            t2.mul_ip();
            t2.norm();
        }
        let mut z3 = t1.clone();
        z3.add(&t2);
        z3.norm();
        t1.sub(&t2);
        t1.norm();
        y3.imul(b);
        if ecp::SEXTIC_TWIST == SexticTwist::MType {
            y3.mul_ip();
            y3.norm();
        }
        x3 = y3.clone();
        x3.mul(&t4);
        t2 = t3.clone();
        t2.mul(&t1);
        x3.rsub(&t2);
        y3.mul(&t0);
        t1.mul(&z3);
        y3.add(&t1);
        t0.mul(&t3);
        z3.mul(&t4);
        z3.add(&t0);

        self.x = x3;
        self.x.norm();
        self.y = y3;
        self.y.norm();
        self.z = z3;
        self.z.norm();

        return 0;
    }

pub fn to_bytes(&self, b: &mut [u8]) {
        let mut t: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];
        let mb = big::MODBYTES as usize;
        let mut W = self.clone();

        W.affine();
        W.x.geta().to_bytes(&mut t);
        for i in 0..mb {
            b[i] = t[i]
        }
        W.x.getb().to_bytes(&mut t);
        for i in 0..mb {
            b[i + mb] = t[i]
        }

        W.y.geta().to_bytes(&mut t);
        for i in 0..mb {
            b[i + 2 * mb] = t[i]
        }
        W.y.getb().to_bytes(&mut t);
        for i in 0..mb {
            b[i + 3 * mb] = t[i]
        }
    }

pub fn is_unity(&self) -> bool {
        let one = FP2::new_int(1);
        self.a.equals(&one) && self.b.is_zilch()
    }

pub fn is_infinity(&self) -> bool {
        self.x.is_zilch() && self.z.is_zilch()
    }

pub fn generator() -> ECP2 {
        return ECP2::new_fp2s(
            FP2::new_bigs(
                Big::new_ints(&rom::CURVE_PXA),
                Big::new_ints(&rom::CURVE_PXB),
            ),
            FP2::new_bigs(
                Big::new_ints(&rom::CURVE_PYA),
                Big::new_ints(&rom::CURVE_PYB),
            ),
        );
    }

pub fn from_bytes(b: &[u8]) -> ECP2 {
        let mut t: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];
        let mb = big::MODBYTES as usize;

        for i in 0..mb {
            t[i] = b[i]
        }
        let ra = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = b[i + mb]
        }
        let rb = Big::from_bytes(&t);
        let rx = FP2::new_bigs(ra, rb);

        for i in 0..mb {
            t[i] = b[i + 2 * mb]
        }
        let ra = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = b[i + 3 * mb]
        }
        let rb = Big::from_bytes(&t);
        let ry = FP2::new_bigs(ra, rb);

        ECP2::new_fp2s(rx, ry)
    }

pub fn from_bytes(b: &[u8]) -> ECP {
        let mut t: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];
        let mb = big::MODBYTES as usize;
        let p = Big::new_ints(&rom::MODULUS);

        for i in 0..mb {
            t[i] = b[i + 1]
        }
        let px = Big::from_bytes(&t);
        if Big::comp(&px, &p) >= 0 {
            return ECP::new();
        }

        if CURVETYPE == CurveType::Montgomery {
            return ECP::new_big(&px);
        }

        if b[0] == 0x04 {
            for i in 0..mb {
                t[i] = b[i + mb + 1]
            }
            let py = Big::from_bytes(&t);
            if Big::comp(&py, &p) >= 0 {
                return ECP::new();
            }
            return ECP::new_bigs(&px, &py);
        }

        if b[0] == 0x02 || b[0] == 0x03 {
            return ECP::new_bigint(&px, (b[0] & 1) as isize);
        }

        return ECP::new();
    }

pub fn from_bytes(b: &[u8]) -> Big {
        Big::from_byte_array(b, 0)
    }

pub fn g1mul(P: &ECP, e: &Big) -> ECP {
    if rom::USE_GLV {
        let mut R = P.clone();
        let mut Q = P.clone();
        Q.affine();
        let q = Big::new_ints(&rom::CURVE_ORDER);
        let mut cru = FP::new_big(Big::new_ints(&rom::CURVE_CRU));
        let mut u = glv(e);
        Q.mulx(&mut cru);

        let mut np = u[0].nbits();
        let mut t: Big = Big::modneg(&u[0], &q);
        let mut nn = t.nbits();
        if nn < np {
            u[0] = t.clone();
            R.neg();
        }

        np = u[1].nbits();
        t = Big::modneg(&u[1], &q);
        nn = t.nbits();
        if nn < np {
            u[1] = t;
            Q.neg();
        }
        u[0].norm();
        u[1].norm();
        R.mul2(&u[0], &Q, &u[1])
    } else {
        P.mul(e)
    }
}

pub fn fexp(m: &FP12) -> FP12 {
    let f = FP2::new_bigs(Big::new_ints(&rom::FRA), Big::new_ints(&rom::FRB));
    let mut x = Big::new_ints(&rom::CURVE_BNX);
    let mut r = m.clone();

    // Easy part of final exp
    let mut lv = r.clone();
    lv.inverse();
    r.conj();

    r.mul(&lv);
    lv = r.clone();
    r.frob(&f);
    r.frob(&f);
    r.mul(&lv);
    //    if r.is_unity() {
    //	r.zero();
    //	return r;
    //    }

    /* Hard part of final exp */
    if ecp::CURVE_PAIRING_TYPE == CurvePairingType::Bn {
        lv = r.clone();
        lv.frob(&f);
        let mut x0 = lv.clone();
        x0.frob(&f);
        lv.mul(&r);
        x0.mul(&lv);
        x0.frob(&f);
        let mut x1 = r.clone();
        x1.conj();
        let mut x4 = r.pow(&x);
        if ecp::SIGN_OF_X == SignOfX::PositiveX {
            x4.conj();
        }

        let mut x3 = x4.clone();
        x3.frob(&f);

        let mut x2 = x4.pow(&x);
        if ecp::SIGN_OF_X == SignOfX::PositiveX {
            x2.conj();
        }
        let mut x5 = x2.clone();
        x5.conj();
        lv = x2.pow(&x);
        if ecp::SIGN_OF_X == SignOfX::PositiveX {
            lv.conj();
        }
        x2.frob(&f);
        r = x2.clone();
        r.conj();

        x4.mul(&r);
        x2.frob(&f);

        r = lv.clone();
        r.frob(&f);
        lv.mul(&r);

        lv.usqr();
        lv.mul(&x4);
        lv.mul(&x5);
        r = x3.clone();
        r.mul(&x5);
        r.mul(&lv);
        lv.mul(&x2);
        r.usqr();
        r.mul(&lv);
        r.usqr();
        lv = r.clone();
        lv.mul(&x1);
        r.mul(&x0);
        lv.usqr();
        r.mul(&lv);
        r.reduce();
    } else {
        // Ghamman & Fouotsa Method

        let mut y0 = r.clone();
        y0.usqr();
        let mut y1 = y0.pow(&x);
        if ecp::SIGN_OF_X == SignOfX::NegativeX {
            y1.conj();
        }
        x.fshr(1);
        let mut y2 = y1.pow(&x);
        if ecp::SIGN_OF_X == SignOfX::NegativeX {
            y2.conj();
        }
        x.fshl(1);
        let mut y3 = r.clone();
        y3.conj();
        y1.mul(&y3);

        y1.conj();
        y1.mul(&y2);

        y2 = y1.pow(&x);
        if ecp::SIGN_OF_X == SignOfX::NegativeX {
            y2.conj();
        }
        y3 = y2.pow(&x);
        if ecp::SIGN_OF_X == SignOfX::NegativeX {
            y3.conj();
        }
        y1.conj();
        y3.mul(&y1);

        y1.conj();
        y1.frob(&f);
        y1.frob(&f);
        y1.frob(&f);
        y2.frob(&f);
        y2.frob(&f);
        y1.mul(&y2);

        y2 = y3.pow(&x);
        if ecp::SIGN_OF_X == SignOfX::NegativeX {
            y2.conj();
        }
        y2.mul(&y0);
        y2.mul(&r);

        y1.mul(&y2);
        y2 = y3;
        y2.frob(&f);
        y1.mul(&y2);
        r = y1;
        r.reduce();
    }
    return r;
}

pub fn ate2(P1: &ECP2, Q1: &ECP, R1: &ECP2, S1: &ECP) -> FP12 {
    let mut f = FP2::new_bigs(Big::new_ints(&rom::FRA), Big::new_ints(&rom::FRB));
    let mut n = Big::new();
    let mut n3 = Big::new();

    if ecp::CURVE_PAIRING_TYPE == CurvePairingType::Bn {
        if ecp::SEXTIC_TWIST == SexticTwist::MType {
            f.inverse();
            f.norm();
        }
    }

    let mut P = P1.clone();
    P.affine();
    let mut Q = Q1.clone();
    Q.affine();
    let mut R = R1.clone();
    R.affine();
    let mut S = S1.clone();
    S.affine();

    let qx = Q.getpx();
    let qy = Q.getpy();

    let sx = S.getpx();
    let sy = S.getpy();

    let mut r = FP12::new_int(1);

    let mut A = P.clone();
    let mut B = R.clone();

    let mut NP = P.clone();
    NP.neg();
    let mut NR = R.clone();
    NR.neg();

    let nb = lbits(&mut n3, &mut n);

    for i in (1..nb - 1).rev() {
        r.sqr();
        let mut lv = linedbl(&mut A, &qx, &qy);
        let lv2 = linedbl(&mut B, &sx, &sy);
        lv.smul(&lv2);
        r.ssmul(&lv);
        let bt = n3.bit(i) - n.bit(i);
        if bt == 1 {
            lv = lineadd(&mut A, &P, &qx, &qy);
            let lv2 = lineadd(&mut B, &R, &sx, &sy);
            lv.smul(&lv2);
            r.ssmul(&lv);
        }
        if bt == -1 {
            lv = lineadd(&mut A, &NP, &qx, &qy);
            let lv2 = lineadd(&mut B, &NR, &sx, &sy);
            lv.smul(&lv2);
            r.ssmul(&lv);
        }
    }

    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        r.conj();
    }

    // R-ate fixup
    if ecp::CURVE_PAIRING_TYPE == CurvePairingType::Bn {
        if ecp::SIGN_OF_X == SignOfX::NegativeX {
            A.neg();
            B.neg();
        }
        let mut K = P.clone();
        K.frob(&f);

        let mut lv = lineadd(&mut A, &K, &qx, &qy);
        K.frob(&f);
        K.neg();
        let mut lv2 = lineadd(&mut A, &K, &qx, &qy);
        lv.smul(&lv2);
        r.ssmul(&lv);

        K = R.clone();
        K.frob(&f);

        lv = lineadd(&mut B, &K, &sx, &sy);
        K.frob(&f);
        K.neg();
        lv2 = lineadd(&mut B, &K, &sx, &sy);
        lv.smul(&lv2);
        r.ssmul(&lv);
    }

    return r;
}

pub const BAD_PARAMS: isize = -11;

pub const INVALID_POINT: isize = -14;

pub const BAD_PIN: isize = -19;

pub struct ECP {
    x: FP,
    y: FP,
    z: FP,
}

pub struct FP12 {
    a: FP4,
    b: FP4,
    c: FP4,
    stype: usize,
}


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp2::ECP2;
use super::fp12::FP12;
use super::fp4::FP4;
use super::pair;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn server_2(
    date: usize,
    hid: &[u8],
    htid: Option<&[u8]>,
    y: &[u8],
    sst: &[u8],
    xid: Option<&[u8]>,
    xcid: Option<&[u8]>,
    msec: &[u8],
    e: Option<&mut [u8]>,
    f: Option<&mut [u8]>,
) -> isize {
    let Q = ECP2::generator();

    let sQ = ECP2::from_bytes(&sst);
    if sQ.is_infinity() {
        return INVALID_POINT;
    }

    let mut R: ECP;
    if date != 0 {
        if let Some(rxcid) = xcid {
            R = ECP::from_bytes(&rxcid);
        } else {
            return BAD_PARAMS;
        }
    } else {
        if let Some(rxid) = xid {
            R = ECP::from_bytes(&rxid)
        } else {
            return BAD_PARAMS;
        }
    }
    if R.is_infinity() {
        return INVALID_POINT;
    }

    let mut sy = Big::from_bytes(&y);
    let mut P: ECP;
    if date != 0 {
        if let Some(rhtid) = htid {
            P = ECP::from_bytes(&rhtid)
        } else {
            return BAD_PARAMS;
        }
    } else {
        P = ECP::from_bytes(&hid);
    }

    if P.is_infinity() {
        return INVALID_POINT;
    }

    P = pair::g1mul(&P, &mut sy);
    P.add(&R);
    R = ECP::from_bytes(&msec);
    if R.is_infinity() {
        return INVALID_POINT;
    }

    let mut g: FP12;

    g = pair::ate2(&Q, &R, &sQ, &P);
    g = pair::fexp(&g);

    if !g.is_unity() {
        if let Some(rxid) = xid {
            if let Some(re) = e {
                if let Some(rf) = f {
                    g.to_bytes(re);
                    if date != 0 {
                        P = ECP::from_bytes(&hid);
                        if P.is_infinity() {
                            return INVALID_POINT;
                        }
                        R = ECP::from_bytes(&rxid);
                        if R.is_infinity() {
                            return INVALID_POINT;
                        }
                        P = pair::g1mul(&P, &mut sy);
                        P.add(&R); //P.affine();
                    }
                    g = pair::ate(&Q, &P);
                    g = pair::fexp(&g);
                    g.to_bytes(rf);
                }
            }
        }

        return BAD_PIN;
    }

    return 0;
}
</function>
<translated function>
 ```rust
use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp2::ECP2;
use super::fp12::FP12;
use super::fp4::FP4;
use super::pair;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

pub fn server_2(
    date: usize,
    hid: &[u8],
    htid: Option<&[u8]>,
    y: &[u8],
    sst: &[u8],
    xid: Option<&[u8]>,
    xcid: Option<&[u8]>,
    msec: &[u8],
    e: Option<&mut [u8]>,
    f: Option<&mut [u8]>,
) -> isize {
    let q = Big::new_ints(&rom::Modulus);
    let q = BIG::from_bytes(&q);
    let mut s_q = ECP2::from_bytes(sst);
    if s_q.is_infinity() {
        return INVALID_POINT;
    }

    let mut r: ECP;
    if date != 0 {
        r = ECP::from_bytes(msec);
    } else {
        if xid.is_none() {
            return BAD_PARAMS;
        }
        r = ECP::from_bytes(xid.unwrap());
    }
    if r.is_infinity() {
        return INVALID_POINT;
    }

    let y = Big::from_bytes(y);
    let mut p: ECP;
    if date != 0 {
        p = ECP::from_bytes(htid.unwrap());
    } else {
        if hid.is_none() {
            return BAD_PARAMS;
        }
        p = ECP::from_bytes(hid);
    }
    if p.is_infinity() {
        return INVALID_POINT;
    }

    p = PAIR::g1mul(&p, &y);
    p.add(&r); // P.affine();
    let mut r = ECP::from_bytes(msec);
    if r.is_infinity() {
        return INVALID_POINT;
    }

    let mut g = PAIR::ate2(&ECP2::generator(), &r, &s_q, &p);
    g = PAIR::fexp(&g);

    if !g.is_unity() {
        if hid.is_some() && xid.is_some() && e.is_some() && f.is_some() {
            g.to_bytes(e.unwrap());
            if date != 0 {
                p = ECP::from_bytes(hid);
                if p.is_infinity() {
                    return INVALID_POINT;
                }
                r = ECP::from_bytes(xid.unwrap());
                if r.is_infinity() {
                    return INVALID_POINT;
                }

                p = PAIR::g1mul(&p, &y);
                p.add(&r); // P.affine();
            }
            g = PAIR::ate(&ECP2::generator(), &p);
            g = PAIR::fexp(&g);
            g.to_bytes(f.unwrap());
        }
        return BAD_PIN;
    }

    return 0;
}
```</translated function> ```rust
use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp2::ECP2;
use super::fp12::FP12;
use super::fp4::FP4;
use super::pair;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

pub fn server_2(
    date: usize,
    hid: &[u8],
    htid: Option<&[u8]>,
    y: &[u8],
    sst: &[u8],
    xid: Option<&[u8]>,
    xcid: Option<&[u8]>,
    msec: &[u8],
    e: Option<&mut [u8]>,
    f: Option<&mut [u8]>,
) -> isize {
    let q = Big::new_ints(&rom::Modulus);
    let q = BIG::from_bytes(&q);
    let mut s_q = ECP2::from_bytes(sst);
    if s_q.is_infinity() {
        return INVALID_POINT;
    }

    let mut r: ECP;
    if date != 0 {
        r = ECP::from_bytes(msec);
    } else {
        if xid.is_none() {
            return BAD_PARAMS;
        }
        r = ECP::from_bytes(xid.unwrap());
    }
    if r.is_infinity() {
        return INVALID_POINT;
    }

    let y = Big::from_bytes(y);
    let mut p: ECP;
    if date != 0 {
        p = ECP::from_bytes(htid.unwrap());
    } else {
        if hid.is_none() {
            return BAD_PARAMS;
        }
        p = ECP::from_bytes(hid);
    }
    if p.is_infinity() {
        return INVALID_POINT;
    }

    p = PAIR::g1mul(&p, &y);
    p.add(&r); // P.affine();
    let mut r = ECP::from_bytes(msec);
    if r.is_infinity() {
        return INVALID_POINT;
    }

    let mut g = PAIR::ate2(&ECP2::generator(), &r, &s_q, &p);
    g = PAIR::fexp(&g);

    if !g.is_unity() {
        if hid.is_some() && xid.is_some() && e.is_some() && f.is_some() {
            g.to_bytes(e.unwrap());
            if date != 0 {
                p = ECP::from_bytes(hid);
                if p.is_infinity() {
                    return INVALID_POINT;
                }
                r = ECP::from_bytes(xid.unwrap());
                if r.is_infinity() {
                    return INVALID_POINT;
                }

                p = PAIR::g1mul(&p, &y);
                p.add(&r); // P.affine();
            }
            g = PAIR::ate(&ECP2::generator(), &p);
            g = PAIR::fexp(&g);
            g.to_bytes(f.unwrap());
        }
        return BAD_PIN;
    }

    return 0;
}
```
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def filter_alt_coherence_matches(results: CoherenceMatches) -> CoherenceMatches:
    """
    We shall NOT return "English" in CoherenceMatches because it is an alternative
    of "English". This function only keeps the best match and remove the em-dash in it.
    """
    index_results: Dict[str, List[float]] = dict()

    for result in results:
        language, ratio = result
        no_em_name: str = language.replace("", "")

        if no_em_name not in index_results:
            index_results[no_em_name] = []

        index_results[no_em_name].append(ratio)

    if any(len(index_results[e]) > 1 for e in index_results):
        filtered_results: CoherenceMatches = []

        for language in index_results:
            filtered_results.append((language, max(index_results[language])))

        return filtered_results

    return results
</python function>
<rust function signature>
pub(crate) fn filter_alt_coherence_matches(results: &CoherenceMatches) -> CoherenceMatches 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn len(&self) -> usize {
        self.items.len()
    }

pub struct CoherenceMatch {
    pub language: &'static Language,
    pub score: f32,
}


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>
use crate::assets::{ENCODING_TO_LANGUAGE, LANGUAGES, LANGUAGE_SUPPORTED_COUNT};
use crate::consts::TOO_SMALL_SEQUENCE;
use crate::entity::{CoherenceMatch, CoherenceMatches, Language};
use crate::utils::{
    get_language_data, is_accentuated, is_multi_byte_encoding, is_suspiciously_successive_range,
    is_unicode_range_secondary, unicode_range,
};
use ahash::{HashMap, HashMapExt, HashSet};
use cached::proc_macro::cached;
use counter::Counter;
use encoding::label::encoding_from_whatwg_label;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use strsim::jaro;

</rust function dependency libraries>

</message>
<function>
pub(crate) fn filter_alt_coherence_matches(results: &CoherenceMatches) -> CoherenceMatches {
    let mut index: HashMap<&Language, f32> = HashMap::with_capacity(results.len());
    for result in results {
        let score = index.entry(result.language).or_default();
        *score = result.score.max(*score);
    }
    index
        .into_iter()
        .map(|(language, score)| CoherenceMatch { language, score })
        .collect()
}
</function>
<translated function>
Based on the provided Python function and all the given Rust context, the translated function would look like:

```rust
pub(crate) fn filter_alt_coherence_matches(results: &CoherenceMatches) -> CoherenceMatches {
    
    let mut index_results = HashMap::<&'static Language, Vec<f32>>::new();

    for result in results.iter() {
        let language = result.language;
        let score = result.score;

        if !index_results.contains_key(&language) {
            index_results.insert(language.clone(), Vec::new());
        }

        index_results.get_mut(&language).unwrap().push(score);
    }

    if index_results.iter().any( |(_language, scores)| scores.len() > 1 ) {
        
        let mut filtered_results: CoherenceMatches = Vec::new();

        for (language, scores) in index_results {
            filtered_results.push(CoherenceMatch{
                language: language, 
                score: scores.iter().cloned().fold(0./0., f32::max)
            });
        }

        return filtered_results;
    }

    return results.to_vec();
}
```

Note:

1. The Python dict type translates to Rust's HashMap from the crate ahash in this case.
2. In Python, map keys and values can be accessed through a single 'for' loop. In Rust, the 'for' loop only provides keys, and the syntax is slightly different.
3. To emulate Python's 'not in', Rust uses the 'contains_key' function.
4. Instead of append(), push() is used in Rust to add an element at the end of Vec.
5. Converting the logic for language string replacement is not needed because Rust uses static references rather than strings for languages.
6. Please replace `'static Language` or other types used here according to your context.</translated function>Based on the provided Python function and all the given Rust context, the translated function would look like:

```rust
pub(crate) fn filter_alt_coherence_matches(results: &CoherenceMatches) -> CoherenceMatches {
    
    let mut index_results = HashMap::<&'static Language, Vec<f32>>::new();

    for result in results.iter() {
        let language = result.language;
        let score = result.score;

        if !index_results.contains_key(&language) {
            index_results.insert(language.clone(), Vec::new());
        }

        index_results.get_mut(&language).unwrap().push(score);
    }

    if index_results.iter().any( |(_language, scores)| scores.len() > 1 ) {
        
        let mut filtered_results: CoherenceMatches = Vec::new();

        for (language, scores) in index_results {
            filtered_results.push(CoherenceMatch{
                language: language, 
                score: scores.iter().cloned().fold(0./0., f32::max)
            });
        }

        return filtered_results;
    }

    return results.to_vec();
}
```

Note:

1. The Python dict type translates to Rust's HashMap from the crate ahash in this case.
2. In Python, map keys and values can be accessed through a single 'for' loop. In Rust, the 'for' loop only provides keys, and the syntax is slightly different.
3. To emulate Python's 'not in', Rust uses the 'contains_key' function.
4. Instead of append(), push() is used in Rust to add an element at the end of Vec.
5. Converting the logic for language string replacement is not needed because Rust uses static references rather than strings for languages.
6. Please replace `'static Language` or other types used here according to your context.
<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def is_finished(self) -> bool:
        return self._finished.is_set()
</python function>
<rust function signature>
pub fn is_finished(&self) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct ClosestPeersIter {
    config: ClosestPeersIterConfig,

    /// The target whose distance to any peer determines the position of
    /// the peer in the iterator.
    target: KeyBytes,

    /// The internal iterator state.
    state: State,

    /// The closest peers to the target, ordered by increasing distance.
    closest_peers: BTreeMap<Distance, Peer>,

    /// The number of peers for which the iterator is currently waiting for results.
    num_waiting: usize,
}


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use super::*;
use crate::kbucket::{Distance, Key, KeyBytes};
use crate::{ALPHA_VALUE, K_VALUE};
use std::collections::btree_map::{BTreeMap, Entry};
use std::{num::NonZeroUsize, time::Duration};
use web_time::Instant;
use super::*;
use crate::SHA_256_MH;
use libp2p_core::multihash::Multihash;
use quickcheck::*;
use rand::{rngs::StdRng, Rng, SeedableRng};
use std::iter;

</rust function dependency libraries>

</message>
<function>
pub fn is_finished(&self) -> bool {
        self.state == State::Finished
    }
</function>
<translated function>
<rust function>
pub fn is_finished(&self) -> bool {
    self.state == State::Finished
}
</rust function></translated function><rust function>
pub fn is_finished(&self) -> bool {
    self.state == State::Finished
}
</rust function>
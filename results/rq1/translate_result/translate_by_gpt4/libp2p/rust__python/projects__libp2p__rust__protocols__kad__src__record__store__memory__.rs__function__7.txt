<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def remove_conn(self, swarm_conn: SwarmConn) -> None:
        """
        Simply remove the connection from Swarm's records, without closing
        the connection.
        """
        peer_id = swarm_conn.muxed_conn.peer_id
        if peer_id not in self.connections:
            return
        del self.connections[peer_id]
</python function>
<rust function signature>
fn remove(&mut self, k: &Key) 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct MemoryStore {
    /// The identity of the peer owning the store.
    local_key: kbucket::Key<PeerId>,
    /// The configuration of the store.
    config: MemoryStoreConfig,
    /// The stored (regular) records.
    records: HashMap<Key, Record>,
    /// The stored provider records.
    providers: HashMap<Key, SmallVec<[ProviderRecord; K_VALUE.get()]>>,
    /// The set of all provider records for the node identified by `local_key`.
    ///
    /// Must be kept in sync with `providers`.
    provided: HashSet<ProviderRecord>,
}


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use super::*;
use crate::kbucket;
use smallvec::SmallVec;
use std::collections::{hash_map, hash_set, HashMap, HashSet};
use std::iter;
use super::*;
use crate::SHA_256_MH;
use quickcheck::*;
use rand::Rng;

</rust function dependency libraries>

</message>
<function>
fn remove(&mut self, k: &Key) {
        self.records.remove(k);
    }
</function>
<translated function>
Your Rust function which is based on your Python function would look like this:

```rust
fn remove(&mut self, k: &Key) {
    if self.records.contains_key(&k) {
        self.records.remove(&k);
    }
}
```

This function will address to `MemoryStore` structure and will remove the record associated to the given key from the `records` HashMap if it exists. Note, the Key data type should fit according to your existing structure and HashMap, not mentioned explicitly.</translated function>Your Rust function which is based on your Python function would look like this:

```rust
fn remove(&mut self, k: &Key) {
    if self.records.contains_key(&k) {
        self.records.remove(&k);
    }
}
```

This function will address to `MemoryStore` structure and will remove the record associated to the given key from the `records` HashMap if it exists. Note, the Key data type should fit according to your existing structure and HashMap, not mentioned explicitly.
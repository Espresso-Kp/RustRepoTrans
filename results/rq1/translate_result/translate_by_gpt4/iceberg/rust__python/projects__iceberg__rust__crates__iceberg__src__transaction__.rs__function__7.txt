<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def remove_properties(self, *removals: str) -> Transaction:
        """Remove properties.

        Args:
            removals: Properties to be removed.

        Returns:
            The alter table builder.
        """
        return self._apply((RemovePropertiesUpdate(removals=removals),))
</python function>
<rust function signature>
pub fn remove_properties(mut self, keys: Vec<String>) -> Result<Self> 
</rust function signature>
<rust function dependencies, and data type declarations>
fn append_updates(&mut self, updates: Vec<TableUpdate>) -> Result<()> {
        for update in &updates {
            for up in &self.updates {
                if discriminant(up) == discriminant(update) {
                    return Err(Error::new(
                        ErrorKind::DataInvalid,
                        format!(
                            "Cannot apply update with same type at same time: {:?}",
                            update
                        ),
                    ));
                }
            }
        }
        self.updates.extend(updates);
        Ok(())
    }

pub struct Transaction<'a> {
    table: &'a Table,
    updates: Vec<TableUpdate>,
    requirements: Vec<TableRequirement>,
}


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use crate::error::Result;
use crate::spec::{FormatVersion, NullOrder, SortDirection, SortField, SortOrder, Transform};
use crate::table::Table;
use crate::TableUpdate::UpgradeFormatVersion;
use crate::{Catalog, Error, ErrorKind, TableCommit, TableRequirement, TableUpdate};
use std::cmp::Ordering;
use std::collections::HashMap;
use std::mem::discriminant;
use crate::io::FileIO;
use crate::spec::{FormatVersion, TableMetadata};
use crate::table::Table;
use crate::transaction::Transaction;
use crate::{TableIdent, TableRequirement, TableUpdate};
use std::collections::HashMap;
use std::fs::File;
use std::io::BufReader;

</rust function dependency libraries>

</message>
<function>
pub fn remove_properties(mut self, keys: Vec<String>) -> Result<Self> {
        self.append_updates(vec![TableUpdate::RemoveProperties { removals: keys }])?;
        Ok(self)
    }
</function>
<translated function>
You can translate the python function to Rust like this:

```rust
pub fn remove_properties(mut self, keys: Vec<String>) -> Result<Self> {
    for key in keys {
        self.append_updates(vec![TableUpdate::RemoveProperty(key)])?;
    }
    Ok(self)
}
```

Here we are essentially converting the list of `keys` (i.e., properties to be removed) into a vector of `TableUpdate::RemoveProperty` variants of the `TableUpdate` enum. `append_updates` method is used to append these updates to the `updates` vector of `self` object, which is the instance of `Transaction` struct. Finally, the updated instance of `Transaction` is returned.</translated function>You can translate the python function to Rust like this:

```rust
pub fn remove_properties(mut self, keys: Vec<String>) -> Result<Self> {
    for key in keys {
        self.append_updates(vec![TableUpdate::RemoveProperty(key)])?;
    }
    Ok(self)
}
```

Here we are essentially converting the list of `keys` (i.e., properties to be removed) into a vector of `TableUpdate::RemoveProperty` variants of the `TableUpdate` enum. `append_updates` method is used to append these updates to the `updates` vector of `self` object, which is the instance of `Transaction` struct. Finally, the updated instance of `Transaction` is returned.
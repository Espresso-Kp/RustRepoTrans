<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def bind(self, schema: Schema, case_sensitive: bool = True) -> BoundUnaryPredicate[Any]:
        bound_term = self.term.bind(schema, case_sensitive)
        return self.as_bound(bound_term)
</python function>
<rust function signature>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> 
</rust function signature>
<rust function dependencies, and data type declarations>

pub struct UnaryExpression<T> {
    /// Operator of this predicate, must be single operand operator.
    op: PredicateOperator,
    /// Term of this predicate, for example, `a` in `a IS NULL`.
    term: T,
}

fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> crate::Result<Self::Bound>;

pub(crate) fn new(op: PredicateOperator, term: T) -> Self {
        debug_assert!(op.is_unary());
        Self { op, term }
    }


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use std::fmt::{Debug, Display, Formatter};
use std::ops::Not;
use array_init::array_init;
use fnv::FnvHashSet;
use itertools::Itertools;
use crate::error::Result;
use crate::expr::{Bind, BoundReference, PredicateOperator, Reference};
use crate::spec::{Datum, SchemaRef};
use crate::{Error, ErrorKind};
use std::ops::Not;
use std::sync::Arc;
use crate::expr::Bind;
use crate::expr::Predicate::{AlwaysFalse, AlwaysTrue};
use crate::expr::Reference;
use crate::spec::Datum;
use crate::spec::{NestedField, PrimitiveType, Schema, SchemaRef, Type};

</rust function dependency libraries>

</message>
<function>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
        let bound_term = self.term.bind(schema, case_sensitive)?;
        Ok(UnaryExpression::new(self.op, bound_term))
    }
</function>
<translated function>
In Rust, your translated function would be:

```rust
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
    let bound_term = self.term.bind(schema, case_sensitive)?;
    self.as_bound(bound_term)
}
```

On assumption that `as_bound()` function is similar to python `self.as_bound()` function.

In Rust '?' at the end of `bind()` helps to return early in case of `Err()`. If we didn't use '?' and `bind()` function returns `Err`, then we would have needed to handle this error explicitly using match or if let. This is equivalent to how in python it will throw an exception if error, which can be caught at higher levels.

If you don't have a specific `as_bound()` function in rust that matches the Python function, you'd need to figure out how to map that correctly, the above code is assuming there is some kind of equivalent function.</translated function>In Rust, your translated function would be:

```rust
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
    let bound_term = self.term.bind(schema, case_sensitive)?;
    self.as_bound(bound_term)
}
```

On assumption that `as_bound()` function is similar to python `self.as_bound()` function.

In Rust '?' at the end of `bind()` helps to return early in case of `Err()`. If we didn't use '?' and `bind()` function returns `Err`, then we would have needed to handle this error explicitly using match or if let. This is equivalent to how in python it will throw an exception if error, which can be caught at higher levels.

If you don't have a specific `as_bound()` function in rust that matches the Python function, you'd need to figure out how to map that correctly, the above code is assuming there is some kind of equivalent function.
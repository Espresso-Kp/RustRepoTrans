<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public static byte[] PBKDF2(int sha,byte[] Pass,byte[] Salt,int rep,int olen)
	{
		int i,j,k,len,d,opt;
		d=olen/sha; if (olen%sha!=0) d++;
		byte[] F=new byte[sha];
		byte[] U=new byte[sha];
		byte[] S=new byte[Salt.length+4];

		byte[] K=new byte[d*sha];
		opt=0;

		for (i=1;i<=d;i++)
		{
			for (j=0;j<Salt.length;j++) S[j]=Salt[j];
			byte[] N=inttoBytes(i,4);
			for (j=0;j<4;j++) S[Salt.length+j]=N[j];

			HMAC(sha,S,Pass,F);

			for (j=0;j<sha;j++) U[j]=F[j];
			for (j=2;j<=rep;j++)
			{
				HMAC(sha,U,Pass,U);
				for (k=0;k<sha;k++) F[k]^=U[k];
			}
			for (j=0;j<sha;j++) K[opt++]=F[j];
		}
		byte[] key=new byte[olen];
		for (i=0;i<olen;i++) key[i]=K[i];
		return key;
	}
</java function>
<rust function signature>
pub fn pbkdf2(sha: usize, pass: &[u8], salt: &[u8], rep: usize, olen: usize, k: &mut [u8]) 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn hmac(sha: usize, m: &[u8], k: &[u8], olen: usize, tag: &mut [u8]) -> bool {
    // Input is from an octet m
    // olen is requested output length in bytes. k is the key
    // The output is the calculated tag
    let mut b: [u8; 64] = [0; 64]; // Not good
    let mut k0: [u8; 128] = [0; 128];

    if olen < 4 {
        return false;
    }

    let mut lb = 64;
    if sha > 32 {
        lb = 128
    }

    for i in 0..lb {
        k0[i] = 0
    }

    if k.len() > lb {
        hashit(sha, k, 0, None, 0, &mut b);
        for i in 0..sha {
            k0[i] = b[i]
        }
    } else {
        for i in 0..k.len() {
            k0[i] = k[i]
        }
    }

    for i in 0..lb {
        k0[i] ^= 0x36
    }
    hashit(sha, &k0[0..lb], 0, Some(m), 0, &mut b);

    for i in 0..lb {
        k0[i] ^= 0x6a
    }
    hashit(sha, &k0[0..lb], 0, Some(&b[0..sha]), olen, tag);

    return true;
}

fn intto_bytes(n: usize, b: &mut [u8]) {
    let mut i = b.len();
    let mut m = n;
    while m > 0 && i > 0 {
        i -= 1;
        b[i] = (m & 0xff) as u8;
        m /= 256;
    }
}

pub const EFS: usize = big::MODBYTES as usize;


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

</rust function dependency libraries>

</message>
<function>
pub fn pbkdf2(sha: usize, pass: &[u8], salt: &[u8], rep: usize, olen: usize, k: &mut [u8]) {
    let mut d = olen / sha;
    if olen % sha != 0 {
        d += 1
    }
    let mut f: [u8; 64] = [0; 64];
    let mut u: [u8; 64] = [0; 64];
    let mut ku: [u8; 64] = [0; 64];
    let mut s: [u8; 36] = [0; 36]; // Maximum salt of 32 bytes + 4
    let mut n: [u8; 4] = [0; 4];

    let sl = salt.len();
    let mut kp = 0;
    for i in 0..d {
        for j in 0..sl {
            s[j] = salt[j]
        }
        intto_bytes(i + 1, &mut n);
        for j in 0..4 {
            s[sl + j] = n[j]
        }

        hmac(sha, &s[0..sl + 4], pass, sha, &mut f);

        for j in 0..sha {
            u[j] = f[j]
        }
        for _ in 1..rep {
            hmac(sha, &u, pass, sha, &mut ku);
            for k in 0..sha {
                u[k] = ku[k];
                f[k] ^= u[k]
            }
        }
        for j in 0..EFS {
            if kp < olen && kp < f.len() {
                k[kp] = f[j]
            }
            kp += 1
        }
    }
}
</function>
<translated function>
Here is the translated rust function of the Java function provided.
```rust
pub fn pbkdf2(sha: usize, pass: &[u8], salt: &[u8], rep: usize, olen: usize, k: &mut [u8]) {
    let mut i: usize;
    let mut j: usize;
    let mut len: usize;
    let mut d: usize;
    let mut opt: usize = 0;
    d = olen / sha;
    if olen % sha != 0 {
        d += 1
    };
    let mut f: Vec<u8> = vec![0; sha];
    let mut u: Vec<u8> = vec![0; sha];
    let mut s: Vec<u8> = vec![0; salt.len() + 4];
    let mut a: [u8; 4] = [0; 4];

    for i in 1..=d {
        for j in 0..salt.len() {
            s[j] = salt[j];
        }
        w::intto_bytes(i, &mut a);
        for j in 0..4 {
            s[salt.len() + j] = a[j];
        }
        bcm::hmac(sha, &s, pass, sha, &mut f);
        for j in 0..sha {
            u[j] = f[j];
        }
        for _j in 2..=rep {
            bcm::hmac(sha, &u, pass, sha, &mut u);
            for k in 0..sha {
                f[k] ^= u[k];
            }
        }
        for j in 0..sha {
            k[opt] = f[j];
            opt += 1;
        }
    }
    for i in 0..olen {
        k[i] = k[i];
    }
}
```
This code is assuming that all the variables are usize and the HMAC function is taking same parameters as in Java. Make sure you have imported the used functions and dependencies at the top of your rust file to prevent any undefined function errors. Also, make sure to have the same crate references in your rust project.</translated function>Here is the translated rust function of the Java function provided.
```rust
pub fn pbkdf2(sha: usize, pass: &[u8], salt: &[u8], rep: usize, olen: usize, k: &mut [u8]) {
    let mut i: usize;
    let mut j: usize;
    let mut len: usize;
    let mut d: usize;
    let mut opt: usize = 0;
    d = olen / sha;
    if olen % sha != 0 {
        d += 1
    };
    let mut f: Vec<u8> = vec![0; sha];
    let mut u: Vec<u8> = vec![0; sha];
    let mut s: Vec<u8> = vec![0; salt.len() + 4];
    let mut a: [u8; 4] = [0; 4];

    for i in 1..=d {
        for j in 0..salt.len() {
            s[j] = salt[j];
        }
        w::intto_bytes(i, &mut a);
        for j in 0..4 {
            s[salt.len() + j] = a[j];
        }
        bcm::hmac(sha, &s, pass, sha, &mut f);
        for j in 0..sha {
            u[j] = f[j];
        }
        for _j in 2..=rep {
            bcm::hmac(sha, &u, pass, sha, &mut u);
            for k in 0..sha {
                f[k] ^= u[k];
            }
        }
        for j in 0..sha {
            k[opt] = f[j];
            opt += 1;
        }
    }
    for i in 0..olen {
        k[i] = k[i];
    }
}
```
This code is assuming that all the variables are usize and the HMAC function is taking same parameters as in Java. Make sure you have imported the used functions and dependencies at the top of your rust file to prevent any undefined function errors. Also, make sure to have the same crate references in your rust project.
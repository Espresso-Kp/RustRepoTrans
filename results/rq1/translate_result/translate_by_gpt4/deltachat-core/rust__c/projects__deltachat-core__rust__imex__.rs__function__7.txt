<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
int dc_continue_key_transfer(dc_context_t* context, uint32_t msg_id, const char* setup_code)
{
	int       success = 0;
	dc_msg_t* msg = NULL;
	char*     filename = NULL;
	char*     filecontent = NULL;
	size_t    filebytes = 0;
	char*     armored_key = NULL;
	char*     norm_sc = NULL;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || msg_id <= DC_MSG_ID_LAST_SPECIAL || setup_code==NULL) {
		goto cleanup;
	}

	if ((msg=dc_get_msg(context, msg_id))==NULL || !dc_msg_is_setupmessage(msg)
	 || (filename=dc_msg_get_file(msg))==NULL || filename[0]==0) {
		dc_log_error(context, 0, "Message is no Autocrypt Setup Message.");
		goto cleanup;
	}

	if (!dc_read_file(context, filename, (void**)&filecontent, &filebytes) || filecontent==NULL || filebytes <= 0) {
		dc_log_error(context, 0, "Cannot read Autocrypt Setup Message file.");
		goto cleanup;
	}

	if ((norm_sc = dc_normalize_setup_code(context, setup_code))==NULL) {
		dc_log_warning(context, 0, "Cannot normalize Setup Code.");
		goto cleanup;
	}

	if ((armored_key=dc_decrypt_setup_file(context, norm_sc, filecontent))==NULL) {
		dc_log_warning(context, 0, "Cannot decrypt Autocrypt Setup Message."); /* do not log as error - this is quite normal after entering the bad setup code */
		goto cleanup;
	}

	if (!set_self_key(context, armored_key, 1/*set default*/)) {
		goto cleanup; /* error already logged */
	}

	success = 1;

cleanup:
	free(armored_key);
	free(filecontent);
	free(filename);
	dc_msg_unref(msg);
	free(norm_sc);
	return success;
}
</c function>
<rust function signature>
pub async fn continue_key_transfer(
    context: &Context,
    msg_id: MsgId,
    setup_code: &str,
) -> Result<()> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn is_special(self) -> bool {
        self.0 <= DC_MSG_ID_LAST_SPECIAL
    }

pub async fn load_from_db(context: &Context, id: MsgId) -> Result<Message> {
        let message = Self::load_from_db_optional(context, id)
            .await?
            .with_context(|| format!("Message {id} does not exist"))?;
        Ok(message)
    }
    
fn normalize_setup_code(s: &str) -> String {
    let mut out = String::new();
    for c in s.chars() {
        if c.is_ascii_digit() {
            out.push(c);
            if let 4 | 9 | 14 | 19 | 24 | 29 | 34 | 39 = out.len() {
                out += "-"
            }
        }
    }
    out
}

pub fn open_file_std(context: &Context, path: impl AsRef<Path>) -> Result<std::fs::File> {
    let path_abs = get_abs_path(context, path.as_ref());

    match std::fs::File::open(path_abs) {
        Ok(bytes) => Ok(bytes),
        Err(err) => {
            warn!(
                context,
                "Cannot read \"{}\" or file is empty: {}",
                path.as_ref().display(),
                err
            );
            Err(err.into())
        }
    }
}

pub fn get_file(&self, context: &Context) -> Option<PathBuf> {
        self.param.get_path(Param::File, context).unwrap_or(None)
    }

async fn set_self_key(context: &Context, armored: &str, set_default: bool) -> Result<()> {
    // try hard to only modify key-state
    let (private_key, header) = SignedSecretKey::from_asc(armored)?;
    let public_key = private_key.split_public_key()?;
    if let Some(preferencrypt) = header.get("Autocrypt-Prefer-Encrypt") {
        let e2ee_enabled = match preferencrypt.as_str() {
            "nopreference" => 0,
            "mutual" => 1,
            _ => {
                bail!("invalid Autocrypt-Prefer-Encrypt header: {:?}", header);
            }
        };
        context
            .sql
            .set_raw_config_int("e2ee_enabled", e2ee_enabled)
            .await?;
    } else {
        // `Autocrypt-Prefer-Encrypt` is not included
        // in keys exported to file.
        //
        // `Autocrypt-Prefer-Encrypt` also SHOULD be sent
        // in Autocrypt Setup Message according to Autocrypt specification,
        // but K-9 6.802 does not include this header.
        //
        // We keep current setting in this case.
        info!(context, "No Autocrypt-Prefer-Encrypt header.");
    };

    let self_addr = context.get_primary_self_addr().await?;
    let addr = EmailAddress::new(&self_addr)?;
    let keypair = pgp::KeyPair {
        addr,
        public: public_key,
        secret: private_key,
    };
    key::store_self_keypair(
        context,
        &keypair,
        if set_default {
            key::KeyPairUse::Default
        } else {
            key::KeyPairUse::ReadOnly
        },
    )
    .await?;

    info!(context, "stored self key: {:?}", keypair.secret.key_id());
    Ok(())
}

async fn maybe_add_bcc_self_device_msg(context: &Context) -> Result<()> {
    if !context.sql.get_raw_config_bool("bcc_self").await? {
        let mut msg = Message::new(Viewtype::Text);
        // TODO: define this as a stockstring once the wording is settled.
        msg.text = "It seems you are using multiple devices with Delta Chat. Great!\n\n\
             If you also want to synchronize outgoing messages across all devices, \
             go to \"Settings â†’ Advanced\" and enable \"Send Copy to Self\"."
            .to_string();
        chat::add_device_msg(context, Some("bcc-self-hint"), Some(&mut msg)).await?;
    }
    Ok(())
}

async fn decrypt_setup_file<T: std::io::Read + std::io::Seek>(
    passphrase: &str,
    file: T,
) -> Result<String> {
    let plain_bytes = pgp::symm_decrypt(passphrase, file).await?;
    let plain_text = std::string::String::from_utf8(plain_bytes)?;

    Ok(plain_text)
}

pub struct MsgId(u32);

pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use std::any::Any;
use std::ffi::OsStr;
use std::path::{Path, PathBuf};
use ::pgp::types::KeyTrait;
use anyhow::{bail, ensure, format_err, Context as _, Result};
use deltachat_contact_tools::EmailAddress;
use futures::StreamExt;
use futures_lite::FutureExt;
use rand::{thread_rng, Rng};
use tokio::fs::{self, File};
use tokio_tar::Archive;
use crate::blob::{BlobDirContents, BlobObject};
use crate::chat::{self, delete_and_reset_all_device_msgs, ChatId};
use crate::config::Config;
use crate::contact::ContactId;
use crate::context::Context;
use crate::e2ee;
use crate::events::EventType;
use crate::key::{
    self, load_self_secret_key, DcKey, DcSecretKey, SignedPublicKey, SignedSecretKey,
};
use crate::log::LogExt;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::param::Param;
use crate::pgp;
use crate::sql;
use crate::stock_str;
use crate::tools::{
    create_folder, delete_file, get_filesuffix_lc, open_file_std, read_file, time, write_file,
};
use transfer::{get_backup, BackupProvider};
use std::time::Duration;
use ::pgp::armor::BlockType;
use tokio::task;
use super::*;
use crate::pgp::{split_armored_data, HEADER_AUTOCRYPT, HEADER_SETUPCODE};
use crate::receive_imf::receive_imf;
use crate::stock_str::StockMessage;
use crate::test_utils::{alice_keypair, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn continue_key_transfer(
    context: &Context,
    msg_id: MsgId,
    setup_code: &str,
) -> Result<()> {
    ensure!(!msg_id.is_special(), "wrong id");

    let msg = Message::load_from_db(context, msg_id).await?;
    ensure!(
        msg.is_setupmessage(),
        "Message is no Autocrypt Setup Message."
    );

    if let Some(filename) = msg.get_file(context) {
        let file = open_file_std(context, filename)?;
        let sc = normalize_setup_code(setup_code);
        let armored_key = decrypt_setup_file(&sc, file).await?;
        set_self_key(context, &armored_key, true).await?;
        maybe_add_bcc_self_device_msg(context).await?;

        Ok(())
    } else {
        bail!("Message is no Autocrypt Setup Message.");
    }
}
</function>
<translated function>
Below is the translated function in Rust:

```rust
pub async fn continue_key_transfer(
    context: &Context,
    msg_id: MsgId,
    setup_code: &str,
) -> Result<()> {
    let mut success = false;

    if msg_id.is_special() || context.inner.read().await.magic != DC_CONTEXT_MAGIC {
        return Err(format_err!("Invalid Context or Invalid MsgId"));
    }

    let msg = Message::load_from_db(context, msg_id).await?;

    if !msg.is_setupmessage() {
        error!(context, "Message is no Autocrypt Setup Message.");
        return Err(format_err!("Message is no Autocrypt Setup Message."));
    }

    let filename = match msg.get_file(context) {
        Some(f) => f,
        None => {
            error!(context, "Cannot get filename from message.");
            return Err(format_err!("Cannot get filename from message."));
        }
    };

    let file = open_file_std(context, &filename).await?;
    let filecontent = get_filebytes(&file)?;

    match continue_key_transfer_inner(context, setup_code, &filecontent).await {
        Ok(_) => success = true,
        Err(err) => warn!(
            context,
            "Cannot decrypt Autocrypt Setup Message."; "error" => %err
        ),
    }
    
    if success {
        maybe_add_bcc_self_device_msg(context).await?;
        Ok(())
    } else {
        Err(format_err!("Could not transfer key"))
    }
}

async fn continue_key_transfer_inner(
    context: &Context,
    setup_code: &str,
    filecontent: &[u8],
) -> Result<()> {
    let armored_key = decrypt_setup_file(context, &normalize_setup_code(setup_code), filecontent).await?;

    // set self key
    set_self_key(context, &armored_key, true).await?;
    Ok(())
}

fn get_filebytes(file: &fs::File) -> Result<Vec<u8>> {
    let mut buf = Vec::new();
    match file.read_to_end(&mut buf) {
        Ok(_) => Ok(buf),
        Err(err) => Err(format_err!("Failed to read file bytes: {:?}", err)),
    }
}
```

Please, check the Rust function parameters and replace it according to your actual program data structure and variables. The logic is the same but the Rust language syntax is quite different from C. Furthermore, Rust provides a more advanced way to handle errors, which reduces the need for explicit `null` checks (like the C code did) by using the `Result` enum for functions that may fail. If a function fails, an error is returned, else the expected result is returned. In this example, the Rust version uses the `context` and `message` types to work with the Delta Chat context and messages. Error logging is handled with the `error!` macro, which will log the error using the logging framework set up in the current context.

The `armored_key` and `filecontent` are String and Vec<u8> instead of raw pointers which in C and are automatically cleaned up when they go out of scope, so explicit deallocation (like `free` in C) is not required. We've also used the `Result<>` enum to indicate that our functions can fail, and any caller must handle the potential error. The use of `try!()` and `?` simplifies error handling code. In the cases where the C code checked if variables were null and then logged an error and immediately returned, this is replaced by the `match` construct or `?` operator, which automatically propogates errors. Please also note that the function names and specific method calls might need to be modified according to your actual structure variable or function names.</translated function>Below is the translated function in Rust:

```rust
pub async fn continue_key_transfer(
    context: &Context,
    msg_id: MsgId,
    setup_code: &str,
) -> Result<()> {
    let mut success = false;

    if msg_id.is_special() || context.inner.read().await.magic != DC_CONTEXT_MAGIC {
        return Err(format_err!("Invalid Context or Invalid MsgId"));
    }

    let msg = Message::load_from_db(context, msg_id).await?;

    if !msg.is_setupmessage() {
        error!(context, "Message is no Autocrypt Setup Message.");
        return Err(format_err!("Message is no Autocrypt Setup Message."));
    }

    let filename = match msg.get_file(context) {
        Some(f) => f,
        None => {
            error!(context, "Cannot get filename from message.");
            return Err(format_err!("Cannot get filename from message."));
        }
    };

    let file = open_file_std(context, &filename).await?;
    let filecontent = get_filebytes(&file)?;

    match continue_key_transfer_inner(context, setup_code, &filecontent).await {
        Ok(_) => success = true,
        Err(err) => warn!(
            context,
            "Cannot decrypt Autocrypt Setup Message."; "error" => %err
        ),
    }
    
    if success {
        maybe_add_bcc_self_device_msg(context).await?;
        Ok(())
    } else {
        Err(format_err!("Could not transfer key"))
    }
}

async fn continue_key_transfer_inner(
    context: &Context,
    setup_code: &str,
    filecontent: &[u8],
) -> Result<()> {
    let armored_key = decrypt_setup_file(context, &normalize_setup_code(setup_code), filecontent).await?;

    // set self key
    set_self_key(context, &armored_key, true).await?;
    Ok(())
}

fn get_filebytes(file: &fs::File) -> Result<Vec<u8>> {
    let mut buf = Vec::new();
    match file.read_to_end(&mut buf) {
        Ok(_) => Ok(buf),
        Err(err) => Err(format_err!("Failed to read file bytes: {:?}", err)),
    }
}
```

Please, check the Rust function parameters and replace it according to your actual program data structure and variables. The logic is the same but the Rust language syntax is quite different from C. Furthermore, Rust provides a more advanced way to handle errors, which reduces the need for explicit `null` checks (like the C code did) by using the `Result` enum for functions that may fail. If a function fails, an error is returned, else the expected result is returned. In this example, the Rust version uses the `context` and `message` types to work with the Delta Chat context and messages. Error logging is handled with the `error!` macro, which will log the error using the logging framework set up in the current context.

The `armored_key` and `filecontent` are String and Vec<u8> instead of raw pointers which in C and are automatically cleaned up when they go out of scope, so explicit deallocation (like `free` in C) is not required. We've also used the `Result<>` enum to indicate that our functions can fail, and any caller must handle the potential error. The use of `try!()` and `?` simplifies error handling code. In the cases where the C code checked if variables were null and then logged an error and immediately returned, this is replaced by the `match` construct or `?` operator, which automatically propogates errors. Please also note that the function names and specific method calls might need to be modified according to your actual structure variable or function names.
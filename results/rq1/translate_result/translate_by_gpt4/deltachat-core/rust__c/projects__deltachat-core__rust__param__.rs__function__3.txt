<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
dc_param_t* dc_param_new()
{
	dc_param_t* param = NULL;

	if ((param=calloc(1, sizeof(dc_param_t)))==NULL) {
		exit(28); /* cannot allocate little memory, unrecoverable error */
	}

	param->packed = calloc(1, 1);

    return param;
}
</c function>
<rust function signature>
pub fn new() -> Self 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct Params {
    inner: BTreeMap<Param, String>,
}


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use std::collections::BTreeMap;
use std::fmt;
use std::path::PathBuf;
use std::str;
use anyhow::{bail, Error, Result};
use num_traits::FromPrimitive;
use serde::{Deserialize, Serialize};
use crate::blob::BlobObject;
use crate::context::Context;
use crate::mimeparser::SystemMessage;
use std::path::Path;
use std::str::FromStr;
use tokio::fs;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub fn new() -> Self {
        Default::default()
    }
</function>
<translated function>
Here is your translated Rust function. Based on your provided information about C function and Rust dependencies, the C function seems to be a constructor for a structure, where it allocates memory for the structure. Unfortunately, the exact translations for certain parts are not provided (e.g., 'packed') in provided Rust elements. So, I had to assume that 'inner' corresponds to param and make Translation based on it:

```rust
pub struct Params {
    inner: BTreeMap<Param, String>,
}

impl Params {
    pub fn new() -> Self {
        Params {
            inner: BTreeMap::new(),
        }
    }
}
```
In this function, we are initializing a new Params instance with an empty BTreeMap instance. As Rust uses RAII (Resource Acquisition Is Initialization) principle, the memory management is handled automatically for you, unlike C where you have to manually allocate and free memory. Thus, there's no need to use any equivalent of `calloc` or check if memory allocation was successful. The Rust compiler will guarantee that the memory is properly allocated.</translated function>Here is your translated Rust function. Based on your provided information about C function and Rust dependencies, the C function seems to be a constructor for a structure, where it allocates memory for the structure. Unfortunately, the exact translations for certain parts are not provided (e.g., 'packed') in provided Rust elements. So, I had to assume that 'inner' corresponds to param and make Translation based on it:

```rust
pub struct Params {
    inner: BTreeMap<Param, String>,
}

impl Params {
    pub fn new() -> Self {
        Params {
            inner: BTreeMap::new(),
        }
    }
}
```
In this function, we are initializing a new Params instance with an empty BTreeMap instance. As Rust uses RAII (Resource Acquisition Is Initialization) principle, the memory management is handled automatically for you, unlike C where you have to manually allocate and free memory. Thus, there's no need to use any equivalent of `calloc` or check if memory allocation was successful. The Rust compiler will guarantee that the memory is properly allocated.
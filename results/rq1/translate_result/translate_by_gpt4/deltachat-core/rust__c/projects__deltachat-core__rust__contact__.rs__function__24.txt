<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
* Known and unblocked contacts will be returned by dc_get_contacts().
 *
 * To validate an e-mail address independently of the contact database
 * use dc_may_be_valid_addr().
 *
 * @memberof dc_context_t
 * @param context The context object as created by dc_context_new().
 * @param addr The e-mail-address to check.
 * @return 1=address is a contact in use, 0=address is not a contact in use.
 */
uint32_t dc_lookup_contact_id_by_addr(dc_context_t* context, const char* addr)
{
	int           contact_id = 0;
	char*         addr_normalized = NULL;
	char*         addr_self = NULL;
	sqlite3_stmt* stmt = NULL;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || addr==NULL || addr[0]==0) {
		goto cleanup;
	}

	addr_normalized = dc_addr_normalize(addr);

	addr_self = dc_sqlite3_get_config(context->sql, "configured_addr", "");
	if (strcasecmp(addr_normalized, addr_self)==0) {
		contact_id = DC_CONTACT_ID_SELF;
		goto cleanup;
	}

	stmt = dc_sqlite3_prepare(context->sql,
		"SELECT id FROM contacts"
		" WHERE addr=?1 COLLATE NOCASE"
		" AND id>?2 AND origin>=?3 AND blocked=0;");
	sqlite3_bind_text(stmt, 1, (const char*)addr_normalized, -1, SQLITE_STATIC);
	sqlite3_bind_int (stmt, 2, DC_CONTACT_ID_LAST_SPECIAL);
	sqlite3_bind_int (stmt, 3, DC_ORIGIN_MIN_CONTACT_LIST);
	if (sqlite3_step(stmt)==SQLITE_ROW) {
		contact_id = sqlite3_column_int(stmt, 0);
	}

cleanup:
	sqlite3_finalize(stmt);
	free(addr_normalized);
	free(addr_self);
	return contact_id;
}
</c function>
<rust function signature>
pub async fn lookup_id_by_addr(
        context: &Context,
        addr: &str,
        min_origin: Origin,
    ) -> Result<Option<ContactId>> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub(crate) async fn lookup_id_by_addr_ex(
        context: &Context,
        addr: &str,
        min_origin: Origin,
        blocked: Option<Blocked>,
    ) -> Result<Option<ContactId>> {
        if addr.is_empty() {
            bail!("lookup_id_by_addr: empty address");
        }

        let addr_normalized = addr_normalize(addr);

        if context.is_self_addr(&addr_normalized).await? {
            return Ok(Some(ContactId::SELF));
        }

        let id = context
            .sql
            .query_get_value(
                "SELECT id FROM contacts \
            WHERE addr=?1 COLLATE NOCASE \
            AND id>?2 AND origin>=?3 AND (? OR blocked=?)",
                (
                    &addr_normalized,
                    ContactId::LAST_SPECIAL,
                    min_origin as u32,
                    blocked.is_none(),
                    blocked.unwrap_or_default(),
                ),
            )
            .await?;
        Ok(id)
    }

pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

pub struct ContactId(u32);

pub struct Contact {
    /// The contact ID.
    pub id: ContactId,

    /// Contact name. It is recommended to use `Contact::get_name`,
    /// `Contact::get_display_name` or `Contact::get_name_n_addr` to access this field.
    /// May be empty, initially set to `authname`.
    name: String,

    /// Name authorized by the contact himself. Only this name may be spread to others,
    /// e.g. in To:-lists. May be empty. It is recommended to use `Contact::get_authname`,
    /// to access this field.
    authname: String,

    /// E-Mail-Address of the contact. It is recommended to use `Contact::get_addr` to access this field.
    addr: String,

    /// Blocked state. Use contact_is_blocked to access this field.
    pub blocked: bool,

    /// Time when the contact was seen last time, Unix time in seconds.
    last_seen: i64,

    /// The origin/source of the contact.
    pub origin: Origin,

    /// Parameters as Param::ProfileImage
    pub param: Params,

    /// Last seen message signature for this contact, to be displayed in the profile.
    status: String,

    /// If the contact is a bot.
    is_bot: bool,
}


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use std::cmp::{min, Reverse};
use std::collections::BinaryHeap;
use std::fmt;
use std::path::{Path, PathBuf};
use std::time::UNIX_EPOCH;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use base64::Engine as _;
use deltachat_contact_tools::may_be_valid_addr;
use deltachat_contact_tools::{
    self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
    ContactAddress, VcardContact,
};
use deltachat_derive::{FromSql, ToSql};
use rusqlite::OptionalExtension;
use serde::{Deserialize, Serialize};
use tokio::task;
use tokio::time::{timeout, Duration};
use crate::aheader::{Aheader, EncryptPreference};
use crate::blob::BlobObject;
use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{load_self_public_key, DcKey, SignedPublicKey};
use crate::log::LogExt;
use crate::login_param::LoginParam;
use crate::message::MessageState;
use crate::mimeparser::AvatarAction;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::sql::{self, params_iter};
use crate::sync::{self, Sync::*};
use crate::tools::{
    duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
};
use crate::{chat, chatlist_events, stock_str};
use deltachat_contact_tools::{may_be_valid_addr, normalize_name};
use super::*;
use crate::chat::{get_chat_contacts, send_text_msg, Chat};
use crate::chatlist::Chatlist;
use crate::receive_imf::receive_imf;
use crate::test_utils::{self, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn lookup_id_by_addr(
        context: &Context,
        addr: &str,
        min_origin: Origin,
    ) -> Result<Option<ContactId>> {
        Self::lookup_id_by_addr_ex(context, addr, min_origin, Some(Blocked::Not)).await
    }
</function>
<translated function>
Here is your C function translated to Rust:

<rust function>
```rust
pub async fn lookup_id_by_addr(
        context: &Context,
        addr: &str,
        min_origin: Origin,
    ) -> Result<Option<ContactId>> {
        
        // Check if context or addr are invalid
        if context.is_null() || addr.is_empty() {
            bail!("lookup_id_by_addr: context or address is invalid");
        }

        let addr_normalized = addr_normalize(addr);

        // Check if addr is addr_self
        if context.is_self_addr(&addr_normalized).await? {
            return Ok(Some(ContactId::SELF));
        }
        
        // Check in SQL database
        match context.inner.sql.query_get_value(
            "SELECT id FROM contacts 
                WHERE addr COLLATE NOCASE 
                AND id > ? 
                AND origin >= ? 
                AND blocked = 0",
            paramsv![
                &addr_normalized,
                ContactId::LAST_SPECIAL,
                min_origin as u32,
            ],
        ).await {
            Ok(id) => Ok(Some(ContactId(id))),
            Err(_) => Ok(None),
        }
    }
```
</rust function>
The function is pretty similar, the main differences are that Rust uses match for error handling instead of gotos for cleanup, and that in Rust we can return early with the Ok value, unlike in C where we have to have a single return at the end of the function. Generator semantics (like `context.inner.sql.query_get_value`) are typically used asynchronously in Rust.</translated function>Here is your C function translated to Rust:

<rust function>
```rust
pub async fn lookup_id_by_addr(
        context: &Context,
        addr: &str,
        min_origin: Origin,
    ) -> Result<Option<ContactId>> {
        
        // Check if context or addr are invalid
        if context.is_null() || addr.is_empty() {
            bail!("lookup_id_by_addr: context or address is invalid");
        }

        let addr_normalized = addr_normalize(addr);

        // Check if addr is addr_self
        if context.is_self_addr(&addr_normalized).await? {
            return Ok(Some(ContactId::SELF));
        }
        
        // Check in SQL database
        match context.inner.sql.query_get_value(
            "SELECT id FROM contacts 
                WHERE addr COLLATE NOCASE 
                AND id > ? 
                AND origin >= ? 
                AND blocked = 0",
            paramsv![
                &addr_normalized,
                ContactId::LAST_SPECIAL,
                min_origin as u32,
            ],
        ).await {
            Ok(id) => Ok(Some(ContactId(id))),
            Err(_) => Ok(None),
        }
    }
```
</rust function>
The function is pretty similar, the main differences are that Rust uses match for error handling instead of gotos for cleanup, and that in Rust we can return early with the Ok value, unlike in C where we have to have a single return at the end of the function. Generator semantics (like `context.inner.sql.query_get_value`) are typically used asynchronously in Rust.
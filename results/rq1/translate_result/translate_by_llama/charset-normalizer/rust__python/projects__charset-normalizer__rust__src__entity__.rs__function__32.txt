<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def __iter__(self) -> Iterator[CharsetMatch]:
        yield from self._results
</python function>
<rust function signature>
pub fn iter(&self) -> CharsetMatchesIter 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct CharsetMatchesIter<'a> {
    items: std::slice::Iter<'a, CharsetMatch>,
}

pub struct CharsetMatches {
    items: Vec<CharsetMatch>,
}


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use crate::cd::{encoding_languages, mb_encoding_languages};
use crate::consts::{IANA_SUPPORTED_ALIASES, TOO_BIG_SEQUENCE};
use crate::utils::{decode, iana_name, is_multi_byte_encoding, range_scan};
use clap::Parser;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use serde::Serialize;
use std::cmp::Ordering;
use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::hash::Hash;
use std::ops::Index;
use std::path::PathBuf;
use std::time::Duration;

</rust function dependency libraries>

</message>
<function>
pub fn iter(&self) -> CharsetMatchesIter {
        CharsetMatchesIter {
            items: self.items.iter(),
        }
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
impl<'a> Iterator for CharsetMatchesIter<'a> {
    type Item = CharsetMatch;

    fn next(&mut self) -> Option<Self::Item> {
        self.items.next()
    }
}

impl<'a> Iterator for CharsetMatches {
    type Item = CharsetMatch;

    fn next(&mut self) -> Option<Self::Item> {
        self.items.iter().next().cloned()
    }
}
```
Note that I've assumed that `CharsetMatchesIter` and `CharsetMatches` are implemented as iterators, and that `CharsetMatch` is a type that implements the `Iterator` trait. If this is not the case, please provide more information about the types and their relationships.

Also, I've used the `next` method to implement the `Iterator` trait, as it is the most common way to do so in Rust. If you have any specific requirements or constraints, please let me know.</translated function>Here is the translated Rust function:
```rust
impl<'a> Iterator for CharsetMatchesIter<'a> {
    type Item = CharsetMatch;

    fn next(&mut self) -> Option<Self::Item> {
        self.items.next()
    }
}

impl<'a> Iterator for CharsetMatches {
    type Item = CharsetMatch;

    fn next(&mut self) -> Option<Self::Item> {
        self.items.iter().next().cloned()
    }
}
```
Note that I've assumed that `CharsetMatchesIter` and `CharsetMatches` are implemented as iterators, and that `CharsetMatch` is a type that implements the `Iterator` trait. If this is not the case, please provide more information about the types and their relationships.

Also, I've used the `next` method to implement the `Iterator` trait, as it is the most common way to do so in Rust. If you have any specific requirements or constraints, please let me know.
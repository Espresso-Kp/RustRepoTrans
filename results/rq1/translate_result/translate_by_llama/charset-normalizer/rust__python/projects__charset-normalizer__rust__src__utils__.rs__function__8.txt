<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def is_multi_byte_encoding(name: str) -> bool:
    """
    Verify is a specific encoding is a multi byte one based on it IANA name
    """
    return name in {
        "utf_8",
        "utf_8_sig",
        "utf_16",
        "utf_16_be",
        "utf_16_le",
        "utf_32",
        "utf_32_le",
        "utf_32_be",
        "utf_7",
    } or issubclass(
        importlib.import_module("encodings.{}".format(name)).IncrementalDecoder,
        MultibyteIncrementalDecoder,
    )
</python function>
<rust function signature>
pub fn is_multi_byte_encoding(name: &str) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>

</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<function>
pub fn is_multi_byte_encoding(name: &str) -> bool {
    [
        "utf-8",
        "utf-16le",
        "utf-16be",
        "euc-jp",
        "euc-kr",
        "iso-2022-jp",
        "gbk",
        "gb18030",
        "hz",
        "big5",
        "shift_jis",
    ]
    .contains(&name)
}
</function>
<translated function>
Here is the translated Rust function:
```rust
use ahash::{HashSet, HashSetExt};
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use unicode_names2::name;

pub fn is_multi_byte_encoding(name: &str) -> bool {
    let multi_byte_encodings = HashSet::from([
        "utf_8",
        "utf_8_sig",
        "utf_16",
        "utf_16_be",
        "utf_16_le",
        "utf_32",
        "utf_32_le",
        "utf_32_be",
        "utf_7",
    ]);

    multi_byte_encodings.contains(name) || {
        let encoding = encoding_from_whatwg_label(name).unwrap_or(Encoding::default());
        let decoder = encoding.decoder(DecoderTrap::Strict).unwrap_or_else(|_| {
            panic!("Failed to create decoder for encoding {}", name)
        });
        decoder.is_multibyte()
    }
}
```
Note that I've assumed that the `encoding_from_whatwg_label` function returns an `Encoding` instance, and that the `decoder` method returns a `Decoder` instance. I've also assumed that the `is_multibyte` method is available on the `Decoder` instance.

Also, I've used the `unwrap_or` method to handle the case where `encoding_from_whatwg_label` returns an error, and `unwrap_or_else` to handle the case where `decoder` returns an error. You may want to handle these errors differently depending on your use case.</translated function>Here is the translated Rust function:
```rust
use ahash::{HashSet, HashSetExt};
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use unicode_names2::name;

pub fn is_multi_byte_encoding(name: &str) -> bool {
    let multi_byte_encodings = HashSet::from([
        "utf_8",
        "utf_8_sig",
        "utf_16",
        "utf_16_be",
        "utf_16_le",
        "utf_32",
        "utf_32_le",
        "utf_32_be",
        "utf_7",
    ]);

    multi_byte_encodings.contains(name) || {
        let encoding = encoding_from_whatwg_label(name).unwrap_or(Encoding::default());
        let decoder = encoding.decoder(DecoderTrap::Strict).unwrap_or_else(|_| {
            panic!("Failed to create decoder for encoding {}", name)
        });
        decoder.is_multibyte()
    }
}
```
Note that I've assumed that the `encoding_from_whatwg_label` function returns an `Encoding` instance, and that the `decoder` method returns a `Decoder` instance. I've also assumed that the `is_multibyte` method is available on the `Decoder` instance.

Also, I've used the `unwrap_or` method to handle the case where `encoding_from_whatwg_label` returns an error, and `unwrap_or_else` to handle the case where `decoder` returns an error. You may want to handle these errors differently depending on your use case.
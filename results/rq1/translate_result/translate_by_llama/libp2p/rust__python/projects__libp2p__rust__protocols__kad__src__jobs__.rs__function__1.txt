<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def is_running(self) -> bool:
        return self.is_started and not self.is_finished
</python function>
<rust function signature>
fn is_running(&self) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>
pub(crate) struct PutRecordJob {
    local_id: PeerId,
    next_publish: Option<Instant>,
    publish_interval: Option<Duration>,
    record_ttl: Option<Duration>,
    skipped: HashSet<record::Key>,
    inner: PeriodicJob<vec::IntoIter<Record>>,
}

pub(crate) struct AddProviderJob {
    inner: PeriodicJob<vec::IntoIter<ProviderRecord>>,
}

struct PeriodicJob<T> {
    interval: Duration,
    state: PeriodicJobState<T>,
}


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use crate::record::{self, store::RecordStore, ProviderRecord, Record};
use futures::prelude::*;
use futures_timer::Delay;
use libp2p_identity::PeerId;
use std::collections::HashSet;
use std::pin::Pin;
use std::task::{Context, Poll};
use std::time::Duration;
use std::vec;
use web_time::Instant;
use super::*;
use crate::record::store::MemoryStore;
use futures::{executor::block_on, future::poll_fn};
use quickcheck::*;
use rand::Rng;

</rust function dependency libraries>

</message>
<function>
fn is_running(&self) -> bool {
        match self.state {
            PeriodicJobState::Running(..) => true,
            PeriodicJobState::Waiting(..) => false,
        }
    }
</function>
<translated function>
```rust
fn is_running(&self) -> bool {
    self.is_started &&!self.is_finished
}
```

Note: I assume `is_started` and `is_finished` are fields of the struct that this function is a part of, similar to `self.local_id` in the provided Rust code. If that's not the case, you'll need to adjust the code accordingly.</translated function>```rust
fn is_running(&self) -> bool {
    self.is_started &&!self.is_finished
}
```

Note: I assume `is_started` and `is_finished` are fields of the struct that this function is a part of, similar to `self.local_id` in the provided Rust code. If that's not the case, you'll need to adjust the code accordingly.
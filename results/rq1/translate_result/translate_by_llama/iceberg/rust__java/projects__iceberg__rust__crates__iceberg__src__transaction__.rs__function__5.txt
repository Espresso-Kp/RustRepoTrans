<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public Builder setProperties(Map<String, String> props) {
      Preconditions.checkNotNull(props, "Invalid properties map: null");
      Preconditions.checkArgument(!props.containsKey(null), "Invalid property: null");
      Preconditions.checkArgument(
          !props.containsValue(null),
          "Invalid value for properties %s: null",
          Maps.filterValues(props, Objects::isNull).keySet());
      properties.putAll(props);
      return this;
    }
</java function>
<rust function signature>
pub fn set_properties(mut self, props: HashMap<String, String>) -> Result<Self> 
</rust function signature>
<rust function dependencies, and data type declarations>
fn append_updates(&mut self, updates: Vec<TableUpdate>) -> Result<()> {
        for update in &updates {
            for up in &self.updates {
                if discriminant(up) == discriminant(update) {
                    return Err(Error::new(
                        ErrorKind::DataInvalid,
                        format!(
                            "Cannot apply update with same type at same time: {:?}",
                            update
                        ),
                    ));
                }
            }
        }
        self.updates.extend(updates);
        Ok(())
    }

pub struct Transaction<'a> {
    table: &'a Table,
    updates: Vec<TableUpdate>,
    requirements: Vec<TableRequirement>,
}

pub enum TableUpdate {
    /// Upgrade table's format version
    #[serde(rename_all = "kebab-case")]
    UpgradeFormatVersion {
        /// Target format upgrade to.
        format_version: FormatVersion,
    },
    /// Assign a new UUID to the table
    #[serde(rename_all = "kebab-case")]
    AssignUuid {
        /// The new UUID to assign.
        uuid: Uuid,
    },
    /// Add a new schema to the table
    #[serde(rename_all = "kebab-case")]
    AddSchema {
        /// The schema to add.
        schema: Schema,
        /// The last column id of the table.
        last_column_id: Option<i32>,
    },
    /// Set table's current schema
    #[serde(rename_all = "kebab-case")]
    SetCurrentSchema {
        /// Schema ID to set as current, or -1 to set last added schema
        schema_id: i32,
    },
    /// Add a new partition spec to the table
    AddSpec {
        /// The partition spec to add.
        spec: UnboundPartitionSpec,
    },
    /// Set table's default spec
    #[serde(rename_all = "kebab-case")]
    SetDefaultSpec {
        /// Partition spec ID to set as the default, or -1 to set last added spec
        spec_id: i32,
    },
    /// Add sort order to table.
    #[serde(rename_all = "kebab-case")]
    AddSortOrder {
        /// Sort order to add.
        sort_order: SortOrder,
    },
    /// Set table's default sort order
    #[serde(rename_all = "kebab-case")]
    SetDefaultSortOrder {
        /// Sort order ID to set as the default, or -1 to set last added sort order
        sort_order_id: i64,
    },
    /// Add snapshot to table.
    #[serde(rename_all = "kebab-case")]
    AddSnapshot {
        /// Snapshot to add.
        snapshot: Snapshot,
    },
    /// Set table's snapshot ref.
    #[serde(rename_all = "kebab-case")]
    SetSnapshotRef {
        /// Name of snapshot reference to set.
        ref_name: String,
        /// Snapshot reference to set.
        #[serde(flatten)]
        reference: SnapshotReference,
    },
    /// Remove table's snapshots
    #[serde(rename_all = "kebab-case")]
    RemoveSnapshots {
        /// Snapshot ids to remove.
        snapshot_ids: Vec<i64>,
    },
    /// Remove snapshot reference
    #[serde(rename_all = "kebab-case")]
    RemoveSnapshotRef {
        /// Name of snapshot reference to remove.
        ref_name: String,
    },
    /// Update table's location
    SetLocation {
        /// New location for table.
        location: String,
    },
    /// Update table's properties
    SetProperties {
        /// Properties to update for table.
        updates: HashMap<String, String>,
    },
    /// Remove table's properties
    RemoveProperties {
        /// Properties to remove
        removals: Vec<String>,
    },
}



</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use crate::error::Result;
use crate::spec::{FormatVersion, NullOrder, SortDirection, SortField, SortOrder, Transform};
use crate::table::Table;
use crate::TableUpdate::UpgradeFormatVersion;
use crate::{Catalog, Error, ErrorKind, TableCommit, TableRequirement, TableUpdate};
use std::cmp::Ordering;
use std::collections::HashMap;
use std::mem::discriminant;
use crate::io::FileIO;
use crate::spec::{FormatVersion, TableMetadata};
use crate::table::Table;
use crate::transaction::Transaction;
use crate::{TableIdent, TableRequirement, TableUpdate};
use std::collections::HashMap;
use std::fs::File;
use std::io::BufReader;

</rust function dependency libraries>

</message>
<function>
pub fn set_properties(mut self, props: HashMap<String, String>) -> Result<Self> {
        self.append_updates(vec![TableUpdate::SetProperties { updates: props }])?;
        Ok(self)
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn set_properties(mut self, props: HashMap<String, String>) -> Result<Self> {
    if props.is_none() {
        return Err(Error::new(ErrorKind::InvalidProperties, "Invalid properties map: null"));
    }
    if props.contains_key(&String::new()) {
        return Err(Error::new(ErrorKind::InvalidProperty, "Invalid property: null"));
    }
    let null_values = props.iter().filter(|(_, v)| v.is_none()).collect::<HashMap<_, _>>();
    if!null_values.is_empty() {
        let null_keys = null_values.keys().cloned().collect::<Vec<_>>();
        return Err(Error::new(
            ErrorKind::InvalidValue,
            format!("Invalid value for properties {}: null", null_keys.join(", ")),
        ));
    }
    self.properties.extend(props);
    Ok(self)
}
```
Note that I've assumed that `properties` is a field of the struct that this function is part of, and that it's a `HashMap<String, String>`. I've also assumed that `Error` and `ErrorKind` are defined elsewhere in the codebase. If that's not the case, you'll need to modify the code accordingly.</translated function>Here is the translated Rust function:
```rust
pub fn set_properties(mut self, props: HashMap<String, String>) -> Result<Self> {
    if props.is_none() {
        return Err(Error::new(ErrorKind::InvalidProperties, "Invalid properties map: null"));
    }
    if props.contains_key(&String::new()) {
        return Err(Error::new(ErrorKind::InvalidProperty, "Invalid property: null"));
    }
    let null_values = props.iter().filter(|(_, v)| v.is_none()).collect::<HashMap<_, _>>();
    if!null_values.is_empty() {
        let null_keys = null_values.keys().cloned().collect::<Vec<_>>();
        return Err(Error::new(
            ErrorKind::InvalidValue,
            format!("Invalid value for properties {}: null", null_keys.join(", ")),
        ));
    }
    self.properties.extend(props);
    Ok(self)
}
```
Note that I've assumed that `properties` is a field of the struct that this function is part of, and that it's a `HashMap<String, String>`. I've also assumed that `Error` and `ErrorKind` are defined elsewhere in the codebase. If that's not the case, you'll need to modify the code accordingly.
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
static int is_marker(const char* txt)
{
	if (txt) {
		int len = dc_utf8_strlen(txt);
		if (len==1 && txt[0]!=' ') {
			return 1;
		}
	}
	return 0;
}
</c function>
<rust function signature>
fn is_marker(txt: &str) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>

</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use std::time::Duration;
use anyhow::{ensure, Context as _, Result};
use async_channel::Receiver;
use quick_xml::events::{BytesEnd, BytesStart, BytesText};
use tokio::time::timeout;
use crate::chat::{self, ChatId};
use crate::constants::DC_CHAT_ID_TRASH;
use crate::contact::ContactId;
use crate::context::Context;
use crate::events::EventType;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::tools::{duration_to_str, time};
use crate::{chatlist_events, stock_str};
use super::*;
use crate::config::Config;
use crate::message::MessageState;
use crate::receive_imf::receive_imf;
use crate::test_utils::{TestContext, TestContextManager};
use crate::tools::SystemTime;

</rust function dependency libraries>

</message>
<function>
fn is_marker(txt: &str) -> bool {
    let mut chars = txt.chars();
    if let Some(c) = chars.next() {
        !c.is_whitespace() && chars.next().is_none()
    } else {
        false
    }
}
</function>
<translated function>
```rust
use std::ffi::CString;

fn is_marker(txt: &str) -> bool {
    if txt.is_empty() {
        return false;
    }
    let c_txt = CString::new(txt).unwrap();
    let len = c_txt.as_ptr() as *const i8;
    if len.offset(0) as usize == 1 && *len.offset(0) as u8!= b''{
        return true;
    }
    false
}
```</translated function>```rust
use std::ffi::CString;

fn is_marker(txt: &str) -> bool {
    if txt.is_empty() {
        return false;
    }
    let c_txt = CString::new(txt).unwrap();
    let len = c_txt.as_ptr() as *const i8;
    if len.offset(0) as usize == 1 && *len.offset(0) as u8!= b''{
        return true;
    }
    false
}
```
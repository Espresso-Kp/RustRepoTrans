<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
int32_t dc_param_get_int(const dc_param_t* param, int key, int32_t def)
{
	if (param==NULL || key==0) {
		return def;
	}

    char* str = dc_param_get(param, key, NULL);
    if (str==NULL) {
		return def;
    }
    int32_t ret = atol(str);
    free(str);
    return ret;
}
</c function>
<rust function signature>
pub fn get_int(&self, key: Param) -> Option<i32> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn get(&self, key: Param) -> Option<&str> {
        self.inner.get(&key).map(|s| s.as_str())
    }

pub struct Params {
    inner: BTreeMap<Param, String>,
}


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use std::collections::BTreeMap;
use std::fmt;
use std::path::PathBuf;
use std::str;
use anyhow::{bail, Error, Result};
use num_traits::FromPrimitive;
use serde::{Deserialize, Serialize};
use crate::blob::BlobObject;
use crate::context::Context;
use crate::mimeparser::SystemMessage;
use std::path::Path;
use std::str::FromStr;
use tokio::fs;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub fn get_int(&self, key: Param) -> Option<i32> {
        self.get(key).and_then(|s| s.parse().ok())
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
use std::collections::BTreeMap;
use std::str;

pub fn get_int(&self, key: Param) -> Option<i32> {
    let str = self.get(key)?;
    str.parse::<i32>().ok()
}
```
Note that I've used the `?` operator to propagate the `Option` result from `self.get(key)` to the caller, and then used the `parse` method to convert the string to an `i32`. If the string cannot be parsed to an `i32`, the `ok` method will return `None`.</translated function>Here is the translated Rust function:
```rust
use std::collections::BTreeMap;
use std::str;

pub fn get_int(&self, key: Param) -> Option<i32> {
    let str = self.get(key)?;
    str.parse::<i32>().ok()
}
```
Note that I've used the `?` operator to propagate the `Option` result from `self.get(key)` to the caller, and then used the `parse` method to convert the string to an `i32`. If the string cannot be parsed to an `i32`, the `ok` method will return `None`.
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
dc_kml_t* dc_kml_parse(dc_context_t* context,
                       const char* content, size_t content_bytes)
{
	dc_kml_t*      kml = calloc(1, sizeof(dc_kml_t));
	char*          content_nullterminated = NULL;
	dc_saxparser_t saxparser;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC) {
		goto cleanup;
	}

	if (content_bytes > 1*1024*1024) {
		dc_log_warning(context, 0,
			"A kml-files with %i bytes is larger than reasonably expected.",
			content_bytes);
		goto cleanup;
	}

	content_nullterminated = dc_null_terminate(content, content_bytes);
	if (content_nullterminated==NULL) {
		goto cleanup;
	}

	kml->locations = dc_array_new_typed(context, DC_ARRAY_LOCATIONS, 100);

	dc_saxparser_init            (&saxparser, kml);
	dc_saxparser_set_tag_handler (&saxparser, kml_starttag_cb, kml_endtag_cb);
	dc_saxparser_set_text_handler(&saxparser, kml_text_cb);
	dc_saxparser_parse           (&saxparser, content_nullterminated);

cleanup:
	free(content_nullterminated);
	return kml;
}
</c function>
<rust function signature>
pub fn parse(to_parse: &[u8]) -> Result<Self> 
</rust function signature>
<rust function dependencies, and data type declarations>
fn endtag_cb(&mut self, event: &BytesEnd) {
        let tag = String::from_utf8_lossy(event.name().as_ref())
            .trim()
            .to_lowercase();

        match self.tag {
            KmlTag::PlacemarkTimestampWhen => {
                if tag == "when" {
                    self.tag = KmlTag::PlacemarkTimestamp
                }
            }
            KmlTag::PlacemarkTimestamp => {
                if tag == "timestamp" {
                    self.tag = KmlTag::Placemark
                }
            }
            KmlTag::PlacemarkPointCoordinates => {
                if tag == "coordinates" {
                    self.tag = KmlTag::PlacemarkPoint
                }
            }
            KmlTag::PlacemarkPoint => {
                if tag == "point" {
                    self.tag = KmlTag::Placemark
                }
            }
            KmlTag::Placemark => {
                if tag == "placemark" {
                    if 0 != self.curr.timestamp
                        && 0. != self.curr.latitude
                        && 0. != self.curr.longitude
                    {
                        self.locations
                            .push(std::mem::replace(&mut self.curr, Location::new()));
                    }
                    self.tag = KmlTag::Undefined;
                }
            }
            KmlTag::Undefined => {}
        }
    }

fn starttag_cb<B: std::io::BufRead>(
        &mut self,
        event: &BytesStart,
        reader: &quick_xml::Reader<B>,
    ) {
        let tag = String::from_utf8_lossy(event.name().as_ref())
            .trim()
            .to_lowercase();
        if tag == "document" {
            if let Some(addr) = event.attributes().filter_map(|a| a.ok()).find(|attr| {
                String::from_utf8_lossy(attr.key.as_ref())
                    .trim()
                    .to_lowercase()
                    == "addr"
            }) {
                self.addr = addr
                    .decode_and_unescape_value(reader)
                    .ok()
                    .map(|a| a.into_owned());
            }
        } else if tag == "placemark" {
            self.tag = KmlTag::Placemark;
            self.curr.timestamp = 0;
            self.curr.latitude = 0.0;
            self.curr.longitude = 0.0;
            self.curr.accuracy = 0.0
        } else if tag == "timestamp" && self.tag == KmlTag::Placemark {
            self.tag = KmlTag::PlacemarkTimestamp;
        } else if tag == "when" && self.tag == KmlTag::PlacemarkTimestamp {
            self.tag = KmlTag::PlacemarkTimestampWhen;
        } else if tag == "point" && self.tag == KmlTag::Placemark {
            self.tag = KmlTag::PlacemarkPoint;
        } else if tag == "coordinates" && self.tag == KmlTag::PlacemarkPoint {
            self.tag = KmlTag::PlacemarkPointCoordinates;
            if let Some(acc) = event.attributes().find(|attr| {
                attr.as_ref()
                    .map(|a| {
                        String::from_utf8_lossy(a.key.as_ref())
                            .trim()
                            .to_lowercase()
                            == "accuracy"
                    })
                    .unwrap_or_default()
            }) {
                let v = acc
                    .unwrap()
                    .decode_and_unescape_value(reader)
                    .unwrap_or_default();

                self.curr.accuracy = v.trim().parse().unwrap_or_default();
            }
        }
    }

fn text_cb(&mut self, event: &BytesText) {
        if self.tag == KmlTag::PlacemarkTimestampWhen
            || self.tag == KmlTag::PlacemarkPointCoordinates
        {
            let val = event.unescape().unwrap_or_default();

            let val = val.replace(['\n', '\r', '\t', ' '], "");

            if self.tag == KmlTag::PlacemarkTimestampWhen && val.len() >= 19 {
                // YYYY-MM-DDTHH:MM:SSZ
                // 0   4  7  10 13 16 19
                match chrono::NaiveDateTime::parse_from_str(&val, "%Y-%m-%dT%H:%M:%SZ") {
                    Ok(res) => {
                        self.curr.timestamp = res.and_utc().timestamp();
                        let now = time();
                        if self.curr.timestamp > now {
                            self.curr.timestamp = now;
                        }
                    }
                    Err(_err) => {
                        self.curr.timestamp = time();
                    }
                }
            } else if self.tag == KmlTag::PlacemarkPointCoordinates {
                let parts = val.splitn(2, ',').collect::<Vec<_>>();
                if let [longitude, latitude] = &parts[..] {
                    self.curr.longitude = longitude.parse().unwrap_or_default();
                    self.curr.latitude = latitude.parse().unwrap_or_default();
                }
            }
        }
    }

pub struct Kml {
    /// Nonstandard `addr` attribute of the `Document` tag storing the user email address.
    pub addr: Option<String>,

    /// Placemarks.
    pub locations: Vec<Location>,

    /// Currently parsed XML tag.
    tag: KmlTag,

    /// Currently parsed placemark.
    pub curr: Location,
}


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use std::time::Duration;
use anyhow::{ensure, Context as _, Result};
use async_channel::Receiver;
use quick_xml::events::{BytesEnd, BytesStart, BytesText};
use tokio::time::timeout;
use crate::chat::{self, ChatId};
use crate::constants::DC_CHAT_ID_TRASH;
use crate::contact::ContactId;
use crate::context::Context;
use crate::events::EventType;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::tools::{duration_to_str, time};
use crate::{chatlist_events, stock_str};
use super::*;
use crate::config::Config;
use crate::message::MessageState;
use crate::receive_imf::receive_imf;
use crate::test_utils::{TestContext, TestContextManager};
use crate::tools::SystemTime;

</rust function dependency libraries>

</message>
<function>
pub fn parse(to_parse: &[u8]) -> Result<Self> {
        ensure!(to_parse.len() <= 1024 * 1024, "kml-file is too large");

        let mut reader = quick_xml::Reader::from_reader(to_parse);
        reader.trim_text(true);

        let mut kml = Kml::new();
        kml.locations = Vec::with_capacity(100);

        let mut buf = Vec::new();

        loop {
            match reader.read_event_into(&mut buf).with_context(|| {
                format!(
                    "location parsing error at position {}",
                    reader.buffer_position()
                )
            })? {
                quick_xml::events::Event::Start(ref e) => kml.starttag_cb(e, &reader),
                quick_xml::events::Event::End(ref e) => kml.endtag_cb(e),
                quick_xml::events::Event::Text(ref e) => kml.text_cb(e),
                quick_xml::events::Event::Eof => break,
                _ => (),
            }
            buf.clear();
        }

        Ok(kml)
    }
</function>
<translated function>
Here is the translated Rust function:

```rust
use std::time::Duration;
use std::mem;
use std::io;
use std::collections::Vec;

use quick_xml::events::{BytesEnd, BytesStart, BytesText};
use quick_xml::Reader;

use chrono::NaiveDateTime;

pub fn parse(to_parse: &[u8]) -> Result<Self> {
    let kml = Kml {
        addr: None,
        locations: Vec::new(),
        tag: KmlTag::Undefined,
        curr: Location::new(),
    };

    let content_nullterminated = match dc_null_terminate(to_parse) {
        Ok(content) => content,
        Err(_) => return Err(anyhow!("Failed to null terminate content")),
    };

    if content_nullterminated.len() > 1*1024*1024 {
        dc_log_warning(0, 0,
            "A kml-files with {} bytes is larger than reasonably expected.",
            content_nullterminated.len());
        return Err(anyhow!("KML file too large"));
    }

    let mut saxparser = SaxParser::new(&kml);
    saxparser.set_tag_handler(starttag_cb);
    saxparser.set_text_handler(text_cb);
    saxparser.set_end_handler(endtag_cb);
    saxparser.parse(content_nullterminated)?;

    kml.locations = kml.locations.into_iter().filter(|loc| loc.timestamp > 0).collect();

    Ok(kml)
}

struct SaxParser<'a> {
    kml: &'a mut Kml,
}

impl<'a> SaxParser<'a> {
    fn new(kml: &'a mut Kml) -> Self {
        SaxParser { kml }
    }

    fn set_tag_handler<F: FnMut(&mut Self, &BytesStart, &Reader)>(f: F) {
        // implement set_tag_handler
    }

    fn set_text_handler<F: FnMut(&mut Self, &BytesText)> (f: F) {
        // implement set_text_handler
    }

    fn set_end_handler<F: FnMut(&mut Self, &BytesEnd)> (f: F) {
        // implement set_end_handler
    }

    fn parse(&mut self, content: &[u8]) -> Result() {
        // implement parse
    }
}

enum KmlTag {
    // implement KmlTag
}

struct Location {
    timestamp: i64,
    latitude: f64,
    longitude: f64,
    accuracy: f64,
}

impl Location {
    fn new() -> Self {
        Location {
            timestamp: 0,
            latitude: 0.0,
            longitude: 0.0,
            accuracy: 0.0,
        }
    }
}
```

Note that I've left out the implementation of `dc_null_terminate`, `dc_log_warning`, `SaxParser`, `KmlTag`, and `Location` as they are not provided in the given code. Also, the `starttag_cb`, `text_cb` and `endtag_cb` functions are not implemented here as they are already provided in the given code.</translated function>Here is the translated Rust function:

```rust
use std::time::Duration;
use std::mem;
use std::io;
use std::collections::Vec;

use quick_xml::events::{BytesEnd, BytesStart, BytesText};
use quick_xml::Reader;

use chrono::NaiveDateTime;

pub fn parse(to_parse: &[u8]) -> Result<Self> {
    let kml = Kml {
        addr: None,
        locations: Vec::new(),
        tag: KmlTag::Undefined,
        curr: Location::new(),
    };

    let content_nullterminated = match dc_null_terminate(to_parse) {
        Ok(content) => content,
        Err(_) => return Err(anyhow!("Failed to null terminate content")),
    };

    if content_nullterminated.len() > 1*1024*1024 {
        dc_log_warning(0, 0,
            "A kml-files with {} bytes is larger than reasonably expected.",
            content_nullterminated.len());
        return Err(anyhow!("KML file too large"));
    }

    let mut saxparser = SaxParser::new(&kml);
    saxparser.set_tag_handler(starttag_cb);
    saxparser.set_text_handler(text_cb);
    saxparser.set_end_handler(endtag_cb);
    saxparser.parse(content_nullterminated)?;

    kml.locations = kml.locations.into_iter().filter(|loc| loc.timestamp > 0).collect();

    Ok(kml)
}

struct SaxParser<'a> {
    kml: &'a mut Kml,
}

impl<'a> SaxParser<'a> {
    fn new(kml: &'a mut Kml) -> Self {
        SaxParser { kml }
    }

    fn set_tag_handler<F: FnMut(&mut Self, &BytesStart, &Reader)>(f: F) {
        // implement set_tag_handler
    }

    fn set_text_handler<F: FnMut(&mut Self, &BytesText)> (f: F) {
        // implement set_text_handler
    }

    fn set_end_handler<F: FnMut(&mut Self, &BytesEnd)> (f: F) {
        // implement set_end_handler
    }

    fn parse(&mut self, content: &[u8]) -> Result() {
        // implement parse
    }
}

enum KmlTag {
    // implement KmlTag
}

struct Location {
    timestamp: i64,
    latitude: f64,
    longitude: f64,
    accuracy: f64,
}

impl Location {
    fn new() -> Self {
        Location {
            timestamp: 0,
            latitude: 0.0,
            longitude: 0.0,
            accuracy: 0.0,
        }
    }
}
```

Note that I've left out the implementation of `dc_null_terminate`, `dc_log_warning`, `SaxParser`, `KmlTag`, and `Location` as they are not provided in the given code. Also, the `starttag_cb`, `text_cb` and `endtag_cb` functions are not implemented here as they are already provided in the given code.
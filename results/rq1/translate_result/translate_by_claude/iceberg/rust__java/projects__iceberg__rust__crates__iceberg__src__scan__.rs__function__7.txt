<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public ConfigBuilder snapshotId(long snapshotId) {
      conf.setLong(SNAPSHOT_ID, snapshotId);
      return this;
    }
</java function>
<rust function signature>
pub fn snapshot_id(mut self, snapshot_id: i64) -> Self 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct TableScanBuilder<'a> {
    table: &'a Table,
    // Empty column names means to select all columns
    column_names: Vec<String>,
    predicates: Option<Predicate>,
    snapshot_id: Option<i64>,
    batch_size: Option<usize>,
    case_sensitive: bool,
    filter: Option<Predicate>,
}


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use crate::arrow::ArrowReaderBuilder;
use crate::expr::visitors::expression_evaluator::ExpressionEvaluator;
use crate::expr::visitors::inclusive_metrics_evaluator::InclusiveMetricsEvaluator;
use crate::expr::visitors::inclusive_projection::InclusiveProjection;
use crate::expr::visitors::manifest_evaluator::ManifestEvaluator;
use crate::expr::{Bind, BoundPredicate, Predicate};
use crate::io::FileIO;
use crate::spec::{
    DataContentType, ManifestContentType, ManifestFile, Schema, SchemaRef, SnapshotRef,
    TableMetadataRef,
};
use crate::table::Table;
use crate::{Error, ErrorKind, Result};
use arrow_array::RecordBatch;
use async_stream::try_stream;
use futures::stream::BoxStream;
use futures::StreamExt;
use serde::{Deserialize, Serialize};
use std::collections::hash_map::Entry;
use std::collections::HashMap;
use std::sync::Arc;
use crate::expr::Reference;
use crate::io::{FileIO, OutputFile};
use crate::spec::{
        DataContentType, DataFileBuilder, DataFileFormat, Datum, FormatVersion, Literal, Manifest,
        ManifestContentType, ManifestEntry, ManifestListWriter, ManifestMetadata, ManifestStatus,
        ManifestWriter, Struct, TableMetadata, EMPTY_SNAPSHOT_ID,
    };
use crate::table::Table;
use crate::TableIdent;
use arrow_array::{ArrayRef, Int64Array, RecordBatch};
use futures::TryStreamExt;
use parquet::arrow::{ArrowWriter, PARQUET_FIELD_ID_META_KEY};
use parquet::basic::Compression;
use parquet::file::properties::WriterProperties;
use std::collections::HashMap;
use std::fs;
use std::fs::File;
use std::sync::Arc;
use tempfile::TempDir;
use tera::{Context, Tera};
use uuid::Uuid;

</rust function dependency libraries>

</message>
<function>
pub fn snapshot_id(mut self, snapshot_id: i64) -> Self {
        self.snapshot_id = Some(snapshot_id);
        self
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Java function and Rust function signature:

```rust
pub fn snapshot_id(mut self, snapshot_id: i64) -> Self {
    self.snapshot_id = Some(snapshot_id);
    self
}
```

This Rust function sets the `snapshot_id` field of the `TableScanBuilder` struct to the provided `snapshot_id` value, wrapped in `Some()`. It then returns `self` to allow for method chaining, which is equivalent to the Java function's return of `this`.</translated function>Here's the translated Rust function based on the provided Java function and Rust function signature:

```rust
pub fn snapshot_id(mut self, snapshot_id: i64) -> Self {
    self.snapshot_id = Some(snapshot_id);
    self
}
```

This Rust function sets the `snapshot_id` field of the `TableScanBuilder` struct to the provided `snapshot_id` value, wrapped in `Some()`. It then returns `self` to allow for method chaining, which is equivalent to the Java function's return of `this`.
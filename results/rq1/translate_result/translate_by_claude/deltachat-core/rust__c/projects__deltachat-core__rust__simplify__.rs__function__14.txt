<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
static int is_plain_quote(const char* buf)
{
	if (buf[0]=='>') {
		return 1;
	}
	return 0;
}
</c function>
<rust function signature>
fn is_plain_quote(buf: &str) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>

</rust function dependencies, and data type declarations>
<rust function dependency libraries>

</rust function dependency libraries>

</message>
<function>
fn is_plain_quote(buf: &str) -> bool {
    buf.starts_with('>')
}
</function>
<translated function>
Here's the translated Rust function:

```rust
fn is_plain_quote(buf: &str) -> bool {
    if let Some(first_char) = buf.chars().next() {
        first_char == '>'
    } else {
        false
    }
}
```

This Rust function takes a string slice (`&str`) as input and returns a boolean value. It checks if the first character of the input string is '>' and returns `true` if it is, otherwise it returns `false`. The function handles the case where the input string might be empty by using `if let` with `chars().next()`.</translated function>Here's the translated Rust function:

```rust
fn is_plain_quote(buf: &str) -> bool {
    if let Some(first_char) = buf.chars().next() {
        first_char == '>'
    } else {
        false
    }
}
```

This Rust function takes a string slice (`&str`) as input and returns a boolean value. It checks if the first character of the input string is '>' and returns `true` if it is, otherwise it returns `false`. The function handles the case where the input string might be empty by using `if let` with `chars().next()`.
<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def percent_chaos(self) -> float:
        return round(self.chaos * 100, ndigits=3)
</python function>
<rust function signature>
pub fn chaos_percents(&self) -> f32 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn chaos(&self) -> f32 {
        self.mean_mess_ratio
    }

pub struct CharsetMatch {
    payload: Vec<u8>,
    encoding: String,

    mean_mess_ratio: f32,
    coherence_matches: CoherenceMatches,

    has_sig_or_bom: bool,

    submatch: Vec<CharsetMatch>,
    decoded_payload: Option<String>,
}


</rust function dependencies, and data type declarations>
<rust function dependency libraries>
use crate::cd::{encoding_languages, mb_encoding_languages};
use crate::consts::{IANA_SUPPORTED_ALIASES, TOO_BIG_SEQUENCE};
use crate::utils::{decode, iana_name, is_multi_byte_encoding, range_scan};
use clap::Parser;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use serde::Serialize;
use std::cmp::Ordering;
use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::hash::Hash;
use std::ops::Index;
use std::path::PathBuf;
use std::time::Duration;

</rust function dependency libraries>

</message>
<function>
pub fn chaos_percents(&self) -> f32 {
        self.chaos() * 100.0
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function and Rust specifications:

```rust
pub fn chaos_percents(&self) -> f32 {
    (self.chaos() * 100.0).round() / 1000.0
}
```

This Rust function:
1. Calls `self.chaos()` to get the chaos value
2. Multiplies it by 100 to convert to a percentage
3. Rounds the result to the nearest integer
4. Divides by 1000.0 to get 3 decimal places of precision (equivalent to rounding to 3 decimal places)
5. Returns the result as an f32

Note that Rust doesn't have a direct equivalent to Python's `round(x, ndigits=3)`, so we achieve the same effect by multiplying by 100, rounding, and then dividing by 1000.0.</translated function>Here's the translated Rust function based on the provided Python function and Rust specifications:

```rust
pub fn chaos_percents(&self) -> f32 {
    (self.chaos() * 100.0).round() / 1000.0
}
```

This Rust function:
1. Calls `self.chaos()` to get the chaos value
2. Multiplies it by 100 to convert to a percentage
3. Rounds the result to the nearest integer
4. Divides by 1000.0 to get 3 decimal places of precision (equivalent to rounding to 3 decimal places)
5. Returns the result as an f32

Note that Rust doesn't have a direct equivalent to Python's `round(x, ndigits=3)`, so we achieve the same effect by multiplying by 100, rounding, and then dividing by 1000.0.
pub(crate) async fn image(context: &Context) -> String {
    translated(context, StockMessage::Image).await
}
pub(crate) async fn audio(context: &Context) -> String {
    translated(context, StockMessage::Audio).await
}
pub(crate) async fn file(context: &Context) -> String {
    translated(context, StockMessage::File).await
}
pub(crate) async fn gif(context: &Context) -> String {
    translated(context, StockMessage::Gif).await
}
pub(crate) async fn location(context: &Context) -> String {
    translated(context, StockMessage::Location).await
}
pub(crate) async fn contact(context: &Context) -> String {
    translated(context, StockMessage::Contact).await
}
pub fn get_cmd(&self) -> SystemMessage {
        self.get_int(Param::Cmd)
            .and_then(SystemMessage::from_i32)
            .unwrap_or_default()
    }
pub fn get_filename(&self) -> Option<String> {
        if let Some(name) = self.param.get(Param::Filename) {
            return Some(name.to_string());
        }
        self.param
            .get(Param::File)
            .and_then(|file| Path::new(file).file_name())
            .map(|name| name.to_string_lossy().to_string())
    }
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}
------


use std::borrow::Cow;
use std::fmt;
use std::str;
use crate::chat::Chat;
use crate::constants::Chattype;
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::message::{Message, MessageState, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::stock_str;
use crate::stock_str::msg_reacted;
use crate::tools::truncate;
use anyhow::Result;
use super::*;
use crate::param::Param;
use crate::test_utils as test;

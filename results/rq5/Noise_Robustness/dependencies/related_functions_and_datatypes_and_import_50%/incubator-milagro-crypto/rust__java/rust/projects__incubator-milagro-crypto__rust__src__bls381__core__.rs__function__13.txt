pub fn gety(&self) -> FP2 {
        let mut W = self.clone();
        W.affine();
        W.y.clone()
    }
pub fn to_bytes(&self, b: &mut [u8]) {
        let mut t: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];
        let mb = big::MODBYTES as usize;
        let mut W = self.clone();

        W.affine();
        W.x.geta().to_bytes(&mut t);
        for i in 0..mb {
            b[i] = t[i]
        }
        W.x.getb().to_bytes(&mut t);
        for i in 0..mb {
            b[i + mb] = t[i]
        }

        W.y.geta().to_bytes(&mut t);
        for i in 0..mb {
            b[i + 2 * mb] = t[i]
        }
        W.y.getb().to_bytes(&mut t);
        for i in 0..mb {
            b[i + 3 * mb] = t[i]
        }
    }
pub fn getb(&self) -> Big {
        return self.b.redc();
    }
pub struct ECP2 {
    x: FP2,
    y: FP2,
    z: FP2,
}
pub const MODBYTES: usize = 32;
pub const G2_BYTES: usize = MODBYTES * 2;
------


use super::super::big::Big;
use super::super::ecp::ECP;
use super::super::ecp2::ECP2;
use super::super::fp::FP;
use super::super::fp2::FP2;
use super::super::hash_to_curve::*;
use super::super::pair;
use super::super::rom::*;
use super::iso::{iso11_to_ecp, iso3_to_ecp2};
use crate::errors::AmclError;
use crate::hash256::HASH256;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

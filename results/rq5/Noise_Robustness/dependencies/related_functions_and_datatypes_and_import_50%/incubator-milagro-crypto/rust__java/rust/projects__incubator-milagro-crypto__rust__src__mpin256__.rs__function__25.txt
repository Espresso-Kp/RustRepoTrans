pub fn add(&mut self, b: &FP) {
        self.x.add(&(b.x));
        self.xes += b.xes;
        if self.xes > FEXCESS {
            self.reduce()
        }
    }
pub fn to_bytes(&self, b: &mut [u8], compress: bool) {
        let mb = big::MODBYTES as usize;
        let mut t: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];
        let mut W = self.clone();

        W.affine();
        W.x.redc().to_bytes(&mut t);
        for i in 0..mb {
            b[i + 1] = t[i]
        }

        if CURVETYPE == CurveType::Montgomery {
            b[0] = 0x06;
            return;
        }

        if compress {
            b[0] = 0x02;
            if W.y.redc().parity() == 1 {
                b[0] = 0x03
            }
            return;
        }

        b[0] = 0x04;

        W.y.redc().to_bytes(&mut t);
        for i in 0..mb {
            b[i + mb + 1] = t[i]
        }
    }
pub fn is_infinity(&self) -> bool {
        match CURVETYPE {
            CurveType::Edwards => self.x.is_zilch() && self.y.equals(&self.z),
            CurveType::Weierstrass => self.x.is_zilch() && self.z.is_zilch(),
            CurveType::Montgomery => self.z.is_zilch(),
        }
    }
pub fn from_bytes(b: &[u8]) -> Big {
        Big::from_byte_array(b, 0)
    }
pub fn ate2(P1: &ECP8, Q1: &ECP, R1: &ECP8, S1: &ECP) -> FP48 {
    let mut n = Big::new();
    let mut n3 = Big::new();

    let mut P = P1.clone();
    P.affine();
    let mut Q = Q1.clone();
    Q.affine();
    let mut R = R1.clone();
    R.affine();
    let mut S = S1.clone();
    S.affine();

    let qx = Q.getpx();
    let qy = Q.getpy();

    let sx = S.getpx();
    let sy = S.getpy();

    let mut A = P.clone();
    let mut B = R.clone();

    let mut NP = P.clone();
    NP.neg();
    let mut NR = R.clone();
    NR.neg();

    let nb = lbits(&mut n3, &mut n);

    let mut r = FP48::new_int(1);
    for i in (1..nb - 1).rev() {
        r.sqr();
        let mut lv = linedbl(&mut A, &qx, &qy);
        let lv2 = linedbl(&mut B, &sx, &sy);
        lv.smul(&lv2);
        r.ssmul(&lv);
        let bt = n3.bit(i) - n.bit(i);
        if bt == 1 {
            lv = lineadd(&mut A, &P, &qx, &qy);
            let lv2 = lineadd(&mut B, &R, &sx, &sy);
            lv.smul(&lv2);
            r.ssmul(&lv);
        }
        if bt == -1 {
            lv = lineadd(&mut A, &NP, &qx, &qy);
            let lv2 = lineadd(&mut B, &NR, &sx, &sy);
            lv.smul(&lv2);
            r.ssmul(&lv);
        }
    }

    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        r.conj();
    }

    return r;
}
pub struct ECP {
    x: FP,
    y: FP,
    z: FP,
}
pub struct FP48 {
    a: FP16,
    b: FP16,
    c: FP16,
    stype: usize,
}
------


use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp8::ECP8;
use super::fp16::FP16;
use super::fp48::FP48;
use super::pair256;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

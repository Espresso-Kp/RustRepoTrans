pub fn dbl(&mut self) {
        if CURVETYPE == CurveType::Weierstrass {
            if rom::CURVE_A == 0 {
                let mut t0 = self.y.clone();
                t0.sqr();
                let mut t1 = self.y.clone();
                t1.mul(&self.z);
                let mut t2 = self.z.clone();
                t2.sqr();

                self.z = t0.clone();
                self.z.add(&t0);
                self.z.norm();
                self.z.dbl();
                self.z.dbl();
                self.z.norm();
                t2.imul(3 * rom::CURVE_B_I);

                let mut x3 = t2.clone();
                x3.mul(&self.z);

                let mut y3 = t0.clone();
                y3.add(&t2);
                y3.norm();
                self.z.mul(&t1);
                t1 = t2.clone();
                t1.add(&t2);
                t2.add(&t1);
                t0.sub(&t2);
                t0.norm();
                y3.mul(&t0);
                y3.add(&x3);
                t1 = self.getpx();
                t1.mul(&self.y);
                self.x = t0.clone();
                self.x.norm();
                self.x.mul(&t1);
                self.x.dbl();
                self.x.norm();
                self.y = y3.clone();
                self.y.norm();
            } else {
                let mut t0 = self.x.clone();
                let mut t1 = self.y.clone();
                let mut t2 = self.z.clone();
                let mut t3 = self.x.clone();
                let mut z3 = self.z.clone();
                let mut b = FP::new();

                if rom::CURVE_B_I == 0 {
                    b = FP::new_big(Big::new_ints(&rom::CURVE_B));
                }

                t0.sqr(); //1    x^2
                t1.sqr(); //2    y^2
                t2.sqr(); //3

                t3.mul(&self.y); //4
                t3.dbl();
                t3.norm(); //5
                z3.mul(&self.x); //6
                z3.dbl();
                z3.norm(); //7
                let mut y3 = t2.clone();

                if rom::CURVE_B_I == 0 {
                    y3.mul(&b); //8
                } else {
                    y3.imul(rom::CURVE_B_I);
                }

                y3.sub(&z3); //9  ***
                let mut x3 = y3.clone();
                x3.add(&y3);
                x3.norm(); //10

                y3.add(&x3); //11
                x3 = t1.clone();
                x3.sub(&y3);
                x3.norm(); //12
                y3.add(&t1);
                y3.norm(); //13
                y3.mul(&x3); //14
                x3.mul(&t3); //15
                t3 = t2.clone();
                t3.add(&t2); //16
                t2.add(&t3); //17

                if rom::CURVE_B_I == 0 {
                    z3.mul(&b); //18
                } else {
                    z3.imul(rom::CURVE_B_I);
                }

                z3.sub(&t2); //19
                z3.sub(&t0);
                z3.norm(); //20  ***
                t3 = z3.clone();
                t3.add(&z3); //21

                z3.add(&t3);
                z3.norm(); //22
                t3 = t0.clone();
                t3.add(&t0); //23
                t0.add(&t3); //24
                t0.sub(&t2);
                t0.norm(); //25

                t0.mul(&z3); //26
                y3.add(&t0); //27
                t0 = self.getpy();
                t0.mul(&self.z); //28
                t0.dbl();
                t0.norm(); //29
                z3.mul(&t0); //30
                x3.sub(&z3); //31
                t0.dbl();
                t0.norm(); //32
                t1.dbl();
                t1.norm(); //33
                z3 = t0.clone();
                z3.mul(&t1); //34

                self.x = x3.clone();
                self.x.norm();
                self.y = y3.clone();
                self.y.norm();
                self.z = z3.clone();
                self.z.norm();
            }
        }
        if CURVETYPE == CurveType::Edwards {
            let mut c = self.x.clone();
            let mut d = self.y.clone();
            let mut h = self.z.clone();

            self.x.mul(&self.y);
            self.x.dbl();
            self.x.norm();
            c.sqr();
            d.sqr();
            if rom::CURVE_A == -1 {
                c.neg()
            }
            self.y = c.clone();
            self.y.add(&d);
            self.y.norm();
            h.sqr();
            h.dbl();
            self.z = self.getpy();
            let mut j = self.getpy();
            j.sub(&h);
            j.norm();
            self.x.mul(&j);
            c.sub(&d);
            c.norm();
            self.y.mul(&c);
            self.z.mul(&j);
        }
        if CURVETYPE == CurveType::Montgomery {
            let mut a = self.x.clone();
            let mut b = self.x.clone();

            a.add(&self.z);
            a.norm();
            let mut aa = a.clone();
            aa.sqr();
            b.sub(&self.z);
            b.norm();
            let mut bb = b.clone();
            bb.sqr();
            let mut c = aa.clone();
            c.sub(&bb);
            c.norm();

            self.x = aa.clone();
            self.x.mul(&bb);

            a = c.clone();
            a.imul((rom::CURVE_A + 2) / 4);

            bb.add(&a);
            bb.norm();
            self.z = bb;
            self.z.mul(&c);
        }
    }
pub fn shl(&mut self, k: usize) {
        let n = k % BASEBITS;
        let m = k / BASEBITS;

        self.w[NLEN - 1] = self.w[NLEN - 1 - m] << n;
        if NLEN >= m + 2 {
            self.w[NLEN - 1] |= self.w[NLEN - m - 2] >> (BASEBITS - n)
        }
        for i in (m + 1..NLEN - 1).rev() {
            self.w[i] = ((self.w[i - m] << n) & BMASK) | (self.w[i - m - 1] >> (BASEBITS - n));
        }
        self.w[m] = (self.w[0] << n) & BMASK;
        for i in 0..m {
            self.w[i] = 0
        }
    }
pub fn parity(&self) -> isize {
        (self.w[0] % 2) as isize
    }
pub fn is_infinity(&self) -> bool {
        match CURVETYPE {
            CurveType::Edwards => self.x.is_zilch() && self.y.equals(&self.z),
            CurveType::Weierstrass => self.x.is_zilch() && self.z.is_zilch(),
            CurveType::Montgomery => self.z.is_zilch(),
        }
    }
pub const INVALID_PUBLIC_KEY: isize = -2;
------



use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

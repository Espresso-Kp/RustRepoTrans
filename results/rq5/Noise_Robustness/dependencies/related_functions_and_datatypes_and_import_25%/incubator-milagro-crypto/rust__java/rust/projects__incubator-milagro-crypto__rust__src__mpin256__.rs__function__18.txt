pub fn is_infinity(&self) -> bool {
        match CURVETYPE {
            CurveType::Edwards => self.x.is_zilch() && self.y.equals(&self.z),
            CurveType::Weierstrass => self.x.is_zilch() && self.z.is_zilch(),
            CurveType::Montgomery => self.z.is_zilch(),
        }
    }
pub fn fexp(m: &FP48) -> FP48 {
    let f = FP2::new_bigs(Big::new_ints(&rom::FRA), Big::new_ints(&rom::FRB));
    let mut x = Big::new_ints(&rom::CURVE_BNX);
    let mut r = m.clone();

    /* Easy part of final exp */
    let mut lv = r.clone();
    lv.inverse();
    r.conj();

    r.mul(&lv);
    lv = r.clone();
    r.frob(&f, 8);
    r.mul(&lv);
    //    if r.is_unity() {
    //	r.zero();
    //	return r;
    //    }
    /* Hard part of final exp */
    // Ghamman & Fouotsa Method

    let mut t7 = r.clone();
    t7.usqr();
    let mut t1 = t7.pow(&mut x);

    x.fshr(1);
    let mut t2 = t1.pow(&mut x);
    x.fshl(1);

    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    let mut t3 = t1.clone();
    t3.conj();
    t2.mul(&t3);
    t2.mul(&r);

    r.mul(&t7);

    t1 = t2.pow(&mut x);

    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }
    t3 = t1.clone();
    t3.frob(&f, 14);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 13);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 12);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 11);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 10);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 9);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 8);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t2.clone();
    t3.conj();
    t1.mul(&t3);
    t3 = t1.clone();
    t3.frob(&f, 7);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 6);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 5);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 4);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 3);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 2);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 1);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    r.mul(&t1);
    t2.frob(&f, 15);
    r.mul(&t2);

    r.reduce();
    return r;
}
------



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp8::ECP8;
use super::fp16::FP16;
use super::fp48::FP48;
use super::pair256;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

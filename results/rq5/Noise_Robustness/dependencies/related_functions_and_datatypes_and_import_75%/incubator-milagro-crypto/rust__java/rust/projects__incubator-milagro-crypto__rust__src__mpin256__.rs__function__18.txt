pub fn to_bytes(&self, w: &mut [u8]) {
        let mut t: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];
        let mb = big::MODBYTES as usize;

        self.a.geta().geta().to_bytes(&mut t);
        for i in 0..mb {
            w[i] = t[i]
        }
        self.a.geta().getb().to_bytes(&mut t);
        for i in 0..mb {
            w[i + mb] = t[i]
        }
        self.a.getb().geta().to_bytes(&mut t);
        for i in 0..mb {
            w[i + 2 * mb] = t[i]
        }
        self.a.getb().getb().to_bytes(&mut t);
        for i in 0..mb {
            w[i + 3 * mb] = t[i]
        }

        self.b.geta().geta().to_bytes(&mut t);
        for i in 0..mb {
            w[i + 4 * mb] = t[i]
        }
        self.b.geta().getb().to_bytes(&mut t);
        for i in 0..mb {
            w[i + 5 * mb] = t[i]
        }
        self.b.getb().geta().to_bytes(&mut t);
        for i in 0..mb {
            w[i + 6 * mb] = t[i]
        }
        self.b.getb().getb().to_bytes(&mut t);
        for i in 0..mb {
            w[i + 7 * mb] = t[i]
        }

        self.c.geta().geta().to_bytes(&mut t);
        for i in 0..mb {
            w[i + 8 * mb] = t[i]
        }
        self.c.geta().getb().to_bytes(&mut t);
        for i in 0..mb {
            w[i + 9 * mb] = t[i]
        }
        self.c.getb().geta().to_bytes(&mut t);
        for i in 0..mb {
            w[i + 10 * mb] = t[i]
        }
        self.c.getb().getb().to_bytes(&mut t);
        for i in 0..mb {
            w[i + 11 * mb] = t[i]
        }
    }
pub fn is_infinity(&self) -> bool {
        match CURVETYPE {
            CurveType::Edwards => self.x.is_zilch() && self.y.equals(&self.z),
            CurveType::Weierstrass => self.x.is_zilch() && self.z.is_zilch(),
            CurveType::Montgomery => self.z.is_zilch(),
        }
    }
pub fn from_bytes(b: &[u8]) -> ECP {
        let mut t: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];
        let mb = big::MODBYTES as usize;
        let p = Big::new_ints(&rom::MODULUS);

        for i in 0..mb {
            t[i] = b[i + 1]
        }
        let px = Big::from_bytes(&t);
        if Big::comp(&px, &p) >= 0 {
            return ECP::new();
        }

        if CURVETYPE == CurveType::Montgomery {
            return ECP::new_big(&px);
        }

        if b[0] == 0x04 {
            for i in 0..mb {
                t[i] = b[i + mb + 1]
            }
            let py = Big::from_bytes(&t);
            if Big::comp(&py, &p) >= 0 {
                return ECP::new();
            }
            return ECP::new_bigs(&px, &py);
        }

        if b[0] == 0x02 || b[0] == 0x03 {
            return ECP::new_bigint(&px, (b[0] & 1) as isize);
        }

        return ECP::new();
    }
pub fn ate(P1: &ECP8, Q1: &ECP) -> FP48 {
    let mut n = Big::new();
    let mut n3 = Big::new();

    let mut P = P1.clone();
    P.affine();
    let mut Q = Q1.clone();
    Q.affine();

    let qx = Q.getpx();
    let qy = Q.getpy();

    let mut A = P.clone();
    let mut NP = P.clone();
    NP.neg();

    let nb = lbits(&mut n3, &mut n);

    let mut r = FP48::new_int(1);
    for i in (1..nb - 1).rev() {
        r.sqr();
        let mut lv = linedbl(&mut A, &qx, &qy);
        let bt = n3.bit(i) - n.bit(i);
        if bt == 1 {
            let lv2 = lineadd(&mut A, &P, &qx, &qy);
            lv.smul(&lv2);
        }
        if bt == -1 {
            let lv2 = lineadd(&mut A, &NP, &qx, &qy);
            lv.smul(&lv2);
        }
        r.ssmul(&lv);
    }

    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        r.conj();
    }

    return r;
}
pub fn fexp(m: &FP48) -> FP48 {
    let f = FP2::new_bigs(Big::new_ints(&rom::FRA), Big::new_ints(&rom::FRB));
    let mut x = Big::new_ints(&rom::CURVE_BNX);
    let mut r = m.clone();

    /* Easy part of final exp */
    let mut lv = r.clone();
    lv.inverse();
    r.conj();

    r.mul(&lv);
    lv = r.clone();
    r.frob(&f, 8);
    r.mul(&lv);
    //    if r.is_unity() {
    //	r.zero();
    //	return r;
    //    }
    /* Hard part of final exp */
    // Ghamman & Fouotsa Method

    let mut t7 = r.clone();
    t7.usqr();
    let mut t1 = t7.pow(&mut x);

    x.fshr(1);
    let mut t2 = t1.pow(&mut x);
    x.fshl(1);

    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    let mut t3 = t1.clone();
    t3.conj();
    t2.mul(&t3);
    t2.mul(&r);

    r.mul(&t7);

    t1 = t2.pow(&mut x);

    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }
    t3 = t1.clone();
    t3.frob(&f, 14);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 13);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 12);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 11);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 10);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 9);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 8);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t2.clone();
    t3.conj();
    t1.mul(&t3);
    t3 = t1.clone();
    t3.frob(&f, 7);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 6);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 5);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 4);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 3);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 2);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    t3 = t1.clone();
    t3.frob(&f, 1);
    r.mul(&t3);
    t1 = t1.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }

    r.mul(&t1);
    t2.frob(&f, 15);
    r.mul(&t2);

    r.reduce();
    return r;
}
pub const INVALID_POINT: isize = -14;
------

use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp8::ECP8;
use super::fp16::FP16;
use super::fp48::FP48;
use super::pair256;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

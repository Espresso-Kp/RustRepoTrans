pub fn init(&mut self) {
        /* initialise */
        for i in 0..64 {
            self.w[i] = 0
        }
        self.length[0] = 0;
        self.length[1] = 0;
        self.h[0] = HASH512_H0;
        self.h[1] = HASH512_H1;
        self.h[2] = HASH512_H2;
        self.h[3] = HASH512_H3;
        self.h[4] = HASH512_H4;
        self.h[5] = HASH512_H5;
        self.h[6] = HASH512_H6;
        self.h[7] = HASH512_H7;
    }
pub fn process(&mut self, byt: u8) {
        /* process the next message byte */
        let cnt = ((self.length[0] / 64) % 16) as usize;
        self.w[cnt] <<= 8;
        self.w[cnt] |= (byt & 0xFF) as u64;
        self.length[0] += 8;
        if self.length[0] == 0 {
            self.length[1] += 1;
            self.length[0] = 0
        }
        if (self.length[0] % 1024) == 0 {
            self.transform()
        }
    }
pub struct HASH512 {
    length: [u64; 2],
    h: [u64; 8],
    w: [u64; 80],
}
------

use super::*;

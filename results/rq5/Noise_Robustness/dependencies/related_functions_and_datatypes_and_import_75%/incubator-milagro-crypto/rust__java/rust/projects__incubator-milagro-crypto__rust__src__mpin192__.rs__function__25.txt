pub fn add(&mut self, b: &FP) {
        self.x.add(&(b.x));
        self.xes += b.xes;
        if self.xes > FEXCESS {
            self.reduce()
        }
    }
pub fn to_bytes(&self, b: &mut [u8]) {
        let mut t: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];
        let mb = big::MODBYTES as usize;

        let mut W = self.clone();

        W.affine();

        W.x.geta().geta().to_bytes(&mut t);
        for i in 0..mb {
            b[i] = t[i]
        }
        W.x.geta().getb().to_bytes(&mut t);
        for i in 0..mb {
            b[i + mb] = t[i]
        }

        W.x.getb().geta().to_bytes(&mut t);
        for i in 0..mb {
            b[i + 2 * mb] = t[i]
        }
        W.x.getb().getb().to_bytes(&mut t);
        for i in 0..mb {
            b[i + 3 * mb] = t[i]
        }

        W.y.geta().geta().to_bytes(&mut t);
        for i in 0..mb {
            b[i + 4 * mb] = t[i]
        }
        W.y.geta().getb().to_bytes(&mut t);
        for i in 0..mb {
            b[i + 5 * mb] = t[i]
        }

        W.y.getb().geta().to_bytes(&mut t);
        for i in 0..mb {
            b[i + 6 * mb] = t[i]
        }
        W.y.getb().getb().to_bytes(&mut t);
        for i in 0..mb {
            b[i + 7 * mb] = t[i]
        }
    }
pub fn is_unity(&self) -> bool {
        let one = FP4::new_int(1);
        return self.a.equals(&one) && self.b.is_zilch();
    }
pub fn generator() -> ECP4 {
        return ECP4::new_fp4s(
            &FP4::new_fp2s(
                FP2::new_bigs(
                    Big::new_ints(&rom::CURVE_PXAA),
                    Big::new_ints(&rom::CURVE_PXAB),
                ),
                FP2::new_bigs(
                    Big::new_ints(&rom::CURVE_PXBA),
                    Big::new_ints(&rom::CURVE_PXBB),
                ),
            ),
            &FP4::new_fp2s(
                FP2::new_bigs(
                    Big::new_ints(&rom::CURVE_PYAA),
                    Big::new_ints(&rom::CURVE_PYAB),
                ),
                FP2::new_bigs(
                    Big::new_ints(&rom::CURVE_PYBA),
                    Big::new_ints(&rom::CURVE_PYBB),
                ),
            ),
        );
    }
pub fn from_bytes(b: &[u8]) -> ECP4 {
        let mut t: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];
        let mb = big::MODBYTES as usize;

        for i in 0..mb {
            t[i] = b[i]
        }
        let ra = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = b[i + mb]
        }
        let rb = Big::from_bytes(&t);

        let ra4 = FP2::new_bigs(ra, rb);

        for i in 0..mb {
            t[i] = b[i + 2 * mb]
        }
        let ra = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = b[i + 3 * mb]
        }
        let rb = Big::from_bytes(&t);

        let rb4 = FP2::new_bigs(ra, rb);

        let rx = FP4::new_fp2s(ra4, rb4);

        for i in 0..mb {
            t[i] = b[i + 4 * mb]
        }
        let ra = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = b[i + 5 * mb]
        }
        let rb = Big::from_bytes(&t);

        let ra4 = FP2::new_bigs(ra, rb);

        for i in 0..mb {
            t[i] = b[i + 6 * mb]
        }
        let ra = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = b[i + 7 * mb]
        }
        let rb = Big::from_bytes(&t);

        let rb4 = FP2::new_bigs(ra, rb);

        let ry = FP4::new_fp2s(ra4, rb4);

        ECP4::new_fp4s(&rx, &ry)
    }
pub fn g1mul(P: &ECP, e: &Big) -> ECP {
    if rom::USE_GLV {
        let mut R = P.clone();
        let mut Q = P.clone();
        Q.affine();
        let q = Big::new_ints(&rom::CURVE_ORDER);
        let mut cru = FP::new_big(Big::new_ints(&rom::CURVE_CRU));
        let mut u = glv(e);
        Q.mulx(&mut cru);

        let mut np = u[0].nbits();
        let mut t: Big = Big::modneg(&u[0], &q);
        let mut nn = t.nbits();
        if nn < np {
            u[0] = t.clone();
            R.neg();
        }

        np = u[1].nbits();
        t = Big::modneg(&u[1], &q);
        nn = t.nbits();
        if nn < np {
            u[1] = t;
            Q.neg();
        }
        u[0].norm();
        u[1].norm();
        R.mul2(&u[0], &Q, &u[1])
    } else {
        P.mul(e)
    }
}
pub fn fexp(m: &FP24) -> FP24 {
    let f = FP2::new_bigs(Big::new_ints(&rom::FRA), Big::new_ints(&rom::FRB));
    let mut x = Big::new_ints(&rom::CURVE_BNX);
    let mut r = m.clone();

    /* Easy part of final exp */
    let mut lv = r.clone();
    lv.inverse();
    r.conj();

    r.mul(&lv);
    lv = r.clone();
    r.frob(&f, 4);
    r.mul(&lv);
    //    if r.is_unity() {
    //	r.zero();
    //	return r;
    //    }
    /* Hard part of final exp */
    // Ghamman & Fouotsa Method

    let mut t7 = r.clone();
    t7.usqr();
    let mut t1 = t7.pow(&mut x);

    x.fshr(1);
    let mut t2 = t1.pow(&mut x);
    x.fshl(1);

    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t1.conj();
    }
    let mut t3 = t1.clone();
    t3.conj();
    t2.mul(&t3);
    t2.mul(&r);

    t3 = t2.pow(&mut x);
    let mut t4 = t3.pow(&mut x);
    let mut t5 = t4.pow(&mut x);

    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t3.conj();
        t5.conj();
    }

    t3.frob(&f, 6);
    t4.frob(&f, 5);
    t3.mul(&t4);

    let mut t6 = t5.pow(&mut x);
    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t6.conj();
    }

    t5.frob(&f, 4);
    t3.mul(&t5);

    let mut t0 = t2.clone();
    t0.conj();
    t6.mul(&t0);

    t5 = t6.clone();
    t5.frob(&f, 3);

    t3.mul(&t5);
    t5 = t6.pow(&mut x);
    t6 = t5.pow(&mut x);

    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t5.conj();
    }

    t0 = t5.clone();
    t0.frob(&f, 2);
    t3.mul(&t0);
    t0 = t6.clone();
    t0.frob(&f, 1);

    t3.mul(&t0);
    t5 = t6.pow(&mut x);

    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        t5.conj();
    }
    t2.frob(&f, 7);

    t5.mul(&t7);
    t3.mul(&t2);
    t3.mul(&t5);

    r.mul(&t3);

    r.reduce();
    return r;
}
pub fn ate2(P1: &ECP4, Q1: &ECP, R1: &ECP4, S1: &ECP) -> FP24 {
    let mut n = Big::new();
    let mut n3 = Big::new();

    let mut P = P1.clone();
    P.affine();
    let mut Q = Q1.clone();
    Q.affine();
    let mut R = R1.clone();
    R.affine();
    let mut S = S1.clone();
    S.affine();

    let qx = Q.getpx();
    let qy = Q.getpy();

    let sx = S.getpx();
    let sy = S.getpy();

    let mut A = P.clone();
    let mut B = R.clone();

    let mut NP = P.clone();
    NP.neg();
    let mut NR = R.clone();
    NR.neg();

    let nb = lbits(&mut n3, &mut n);

    let mut r = FP24::new_int(1);
    for i in (1..nb - 1).rev() {
        r.sqr();
        let mut lv = linedbl(&mut A, &qx, &qy);
        let lv2 = linedbl(&mut B, &sx, &sy);
        lv.smul(&lv2);
        r.ssmul(&lv);
        let bt = n3.bit(i) - n.bit(i);
        if bt == 1 {
            lv = lineadd(&mut A, &P, &qx, &qy);
            let lv2 = lineadd(&mut B, &R, &sx, &sy);
            lv.smul(&lv2);
            r.ssmul(&lv);
        }
        if bt == -1 {
            lv = lineadd(&mut A, &NP, &qx, &qy);
            let lv2 = lineadd(&mut B, &NR, &sx, &sy);
            lv.smul(&lv2);
            r.ssmul(&lv);
        }
    }

    if ecp::SIGN_OF_X == SignOfX::NegativeX {
        r.conj();
    }

    return r;
}
pub const INVALID_POINT: isize = -14;
pub const BAD_PIN: isize = -19;
pub struct ECP {
    x: FP,
    y: FP,
    z: FP,
}
pub struct FP24 {
    a: FP8,
    b: FP8,
    c: FP8,
    stype: usize,
}
------

use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp4::ECP4;
use super::fp24::FP24;
use super::fp8::FP8;
use super::pair192;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

pub fn to_bytes(&self, b: &mut [u8]) {
        let mut t: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];
        let mb = big::MODBYTES as usize;
        let mut W = self.clone();

        W.affine();
        W.x.geta().to_bytes(&mut t);
        for i in 0..mb {
            b[i] = t[i]
        }
        W.x.getb().to_bytes(&mut t);
        for i in 0..mb {
            b[i + mb] = t[i]
        }

        W.y.geta().to_bytes(&mut t);
        for i in 0..mb {
            b[i + 2 * mb] = t[i]
        }
        W.y.getb().to_bytes(&mut t);
        for i in 0..mb {
            b[i + 3 * mb] = t[i]
        }
    }

pub fn from_bytes(b: &[u8]) -> Big {
        Big::from_byte_array(b, 0)
    }

pub fn g2mul(P: &ECP2, e: &Big) -> ECP2 {
    if rom::USE_GS_G2 {
        let mut Q: [ECP2; 4] = [ECP2::new(), ECP2::new(), ECP2::new(), ECP2::new()];
        let mut f = FP2::new_bigs(Big::new_ints(&rom::FRA), Big::new_ints(&rom::FRB));
        let q = Big::new_ints(&rom::CURVE_ORDER);
        let mut u = gs(e);

        if ecp::SEXTIC_TWIST == SexticTwist::MType {
            f.inverse();
            f.norm();
        }

        Q[0] = P.clone();
        for i in 1..4 {
            Q[i] = Q[i - 1].clone();
            Q[i].frob(&f);
        }
        for i in 0..4 {
            let np = u[i].nbits();
            let t = Big::modneg(&u[i], &q);
            let nn = t.nbits();
            if nn < np {
                u[i] = t;
                Q[i].neg();
            }
            u[i].norm();
        }

        ECP2::mul4(&mut Q, &u)
    } else {
        P.mul(e)
    }
}

pub fn generator() -> ECP2 {
        return ECP2::new_fp2s(
            FP2::new_bigs(
                Big::new_ints(&rom::CURVE_PXA),
                Big::new_ints(&rom::CURVE_PXB),
            ),
            FP2::new_bigs(
                Big::new_ints(&rom::CURVE_PYA),
                Big::new_ints(&rom::CURVE_PYB),
            ),
        );
    }


pub fn g2mul(P: &ECP4, e: &Big) -> ECP4 {
    if rom::USE_GS_G2 {
        let mut Q: [ECP4; 8] = [
            ECP4::new(),
            ECP4::new(),
            ECP4::new(),
            ECP4::new(),
            ECP4::new(),
            ECP4::new(),
            ECP4::new(),
            ECP4::new(),
        ];
        let q = Big::new_ints(&rom::CURVE_ORDER);
        let mut u = gs(e);

        let f = ECP4::frob_constants();

        Q[0] = P.clone();
        for i in 1..8 {
            Q[i] = Q[i - 1].clone();
            Q[i].frob(&f, 1);
        }
        for i in 0..8 {
            let np = u[i].nbits();
            let t = Big::modneg(&mut u[i], &q);
            let nn = t.nbits();
            if nn < np {
                u[i] = t.clone();
                Q[i].neg();
            }
            u[i].norm();
        }

        ECP4::mul8(&mut Q, &u)
    } else {
        P.mul(e)
    }
}
pub struct DBig {
    pub w: [Chunk; big::DNLEN],
}
------

use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp2::ECP2;
use super::fp12::FP12;
use super::fp4::FP4;
use super::pair;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

Fail
file path is :
projects/deltachat-core/rust/src/contact.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0277]: `dyn rusqlite::ToSql` cannot be shared between threads safely
    --> src/contact.rs:1266:13
     |
1264 |         .query_row(
     |          --------- required by a bound introduced by this call
1265 |             "SELECT COUNT(*) FROM chats_contacts WHERE contact_id=?;",
1266 |             params![contact_id.0],
     |             ^^^^^^^^^^^^^^^^^^^^^ `dyn rusqlite::ToSql` cannot be shared between threads safely
     |
     = help: within `[&dyn rusqlite::ToSql]`, the trait `std::marker::Sync` is not implemented for `dyn rusqlite::ToSql`, which is required by `&[&dyn rusqlite::ToSql]: std::marker::Send`
     = note: required because it appears within the type `&dyn rusqlite::ToSql`
     = note: required because it appears within the type `[&dyn rusqlite::ToSql]`
     = note: required for `&[&dyn rusqlite::ToSql]` to implement `std::marker::Send`
note: required by a bound in `Sql::query_row`
    --> src/sql.rs:462:41
     |
459  |     pub async fn query_row<T, F>(
     |                  --------- required by a bound in this associated function
...
462  |         params: impl rusqlite::Params + Send,
     |                                         ^^^^ required by this bound in `Sql::query_row`

error[E0599]: no method named `context` found for opaque type `impl futures::Future<Output = std::result::Result<_, anyhow::Error>>` in the current scope
    --> src/contact.rs:1269:10
     |
1263 |       let count: i64 = sql
     |  ______________________-
1264 | |         .query_row(
1265 | |             "SELECT COUNT(*) FROM chats_contacts WHERE contact_id=?;",
1266 | |             params![contact_id.0],
1267 | |             |row| row.get(0),
1268 | |         )
1269 | |         .context("Failed to check if contact is in use in chats")?;
     | |         -^^^^^^^ method not found in `impl Future<Output = Result<_, Error>>`
     | |_________|
     | 

error[E0277]: `dyn rusqlite::ToSql` cannot be shared between threads safely
    --> src/contact.rs:1279:13
     |
1277 |         .query_row(
     |          --------- required by a bound introduced by this call
1278 |             "SELECT COUNT(*) FROM msgs WHERE from_id=? OR to_id=?;",
1279 |             params![contact_id.0, contact_id.0],
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn rusqlite::ToSql` cannot be shared between threads safely
     |
     = help: within `[&dyn rusqlite::ToSql]`, the trait `std::marker::Sync` is not implemented for `dyn rusqlite::ToSql`, which is required by `&[&dyn rusqlite::ToSql]: std::marker::Send`
     = note: required because it appears within the type `&dyn rusqlite::ToSql`
     = note: required because it appears within the type `[&dyn rusqlite::ToSql]`
     = note: required for `&[&dyn rusqlite::ToSql]` to implement `std::marker::Send`
note: required by a bound in `Sql::query_row`
    --> src/sql.rs:462:41
     |
459  |     pub async fn query_row<T, F>(
     |                  --------- required by a bound in this associated function
...
462  |         params: impl rusqlite::Params + Send,
     |                                         ^^^^ required by this bound in `Sql::query_row`

error[E0599]: no method named `context` found for opaque type `impl futures::Future<Output = std::result::Result<_, anyhow::Error>>` in the current scope
    --> src/contact.rs:1282:10
     |
1276 |       let count: i64 = sql
     |  ______________________-
1277 | |         .query_row(
1278 | |             "SELECT COUNT(*) FROM msgs WHERE from_id=? OR to_id=?;",
1279 | |             params![contact_id.0, contact_id.0],
1280 | |             |row| row.get(0),
1281 | |         )
1282 | |         .context("Failed to check if contact is in use in messages")?;
     | |         -^^^^^^^ method not found in `impl Future<Output = Result<_, Error>>`
     | |_________|
     | 

error[E0277]: `dyn rusqlite::ToSql` cannot be shared between threads safely
    --> src/contact.rs:1291:9
     |
1289 |     sql.execute(
     |         ------- required by a bound introduced by this call
1290 |         "DELETE FROM contacts WHERE id=?;",
1291 |         params![contact_id.0],
     |         ^^^^^^^^^^^^^^^^^^^^^ `dyn rusqlite::ToSql` cannot be shared between threads safely
     |
     = help: within `[&dyn rusqlite::ToSql]`, the trait `std::marker::Sync` is not implemented for `dyn rusqlite::ToSql`, which is required by `&[&dyn rusqlite::ToSql]: std::marker::Send`
     = note: required because it appears within the type `&dyn rusqlite::ToSql`
     = note: required because it appears within the type `[&dyn rusqlite::ToSql]`
     = note: required for `&[&dyn rusqlite::ToSql]` to implement `std::marker::Send`
note: required by a bound in `Sql::execute`
    --> src/sql.rs:404:41
     |
401  |     pub async fn execute(
     |                  ------- required by a bound in this associated function
...
404  |         params: impl rusqlite::Params + Send,
     |                                         ^^^^ required by this bound in `Sql::execute`

error[E0599]: no method named `context` found for opaque type `impl futures::Future<Output = std::result::Result<usize, anyhow::Error>>` in the current scope
    --> src/contact.rs:1293:6
     |
1289 | /     sql.execute(
1290 | |         "DELETE FROM contacts WHERE id=?;",
1291 | |         params![contact_id.0],
1292 | |     )
1293 | |     .context("Failed to delete contact")?;
     | |     -^^^^^^^ method not found in `impl Future<Output = Result<usize, Error>>`
     | |_____|
     | 

error[E0308]: mismatched types
    --> src/contact.rs:1295:24
     |
1295 |     context.emit_event(EventType::ContactsChanged);
     |             ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EventType`, found enum constructor
     |             |
     |             arguments to this method are incorrect
     |
    ::: src/events/payload.rs:188:5
     |
188  |     ContactsChanged(Option<ContactId>),
     |     --------------- `ContactsChanged` defines an enum variant constructor here, which should be called
     |
     = note:          expected enum `payload::EventType`
             found enum constructor `fn(std::option::Option<ContactId>) -> payload::EventType {payload::EventType::ContactsChanged}`
note: method defined here
    --> src/context.rs:595:12
     |
595  |     pub fn emit_event(&self, event: EventType) {
     |            ^^^^^^^^^^        ----------------
help: use parentheses to construct this tuple variant
     |
1295 |     context.emit_event(EventType::ContactsChanged(/* std::option::Option<ContactId> */));
     |                                                  ++++++++++++++++++++++++++++++++++++++

Some errors have detailed explanations: E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `deltachat` (lib) due to 7 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0277]: `dyn rusqlite::ToSql` cannot be shared between threads safely
    --> src/contact.rs:1266:13
     |
1264 |         .query_row(
     |          --------- required by a bound introduced by this call
1265 |             "SELECT COUNT(*) FROM chats_contacts WHERE contact_id=?;",
1266 |             params![contact_id.0],
     |             ^^^^^^^^^^^^^^^^^^^^^ `dyn rusqlite::ToSql` cannot be shared between threads safely
     |
     = help: within `[&dyn rusqlite::ToSql]`, the trait `std::marker::Sync` is not implemented for `dyn rusqlite::ToSql`, which is required by `&[&dyn rusqlite::ToSql]: std::marker::Send`
     = note: required because it appears within the type `&dyn rusqlite::ToSql`
     = note: required because it appears within the type `[&dyn rusqlite::ToSql]`
     = note: required for `&[&dyn rusqlite::ToSql]` to implement `std::marker::Send`
note: required by a bound in `sql::Sql::query_row`
    --> src/sql.rs:462:41
     |
459  |     pub async fn query_row<T, F>(
     |                  --------- required by a bound in this associated function
...
462  |         params: impl rusqlite::Params + Send,
     |                                         ^^^^ required by this bound in `Sql::query_row`

error[E0277]: `dyn rusqlite::ToSql` cannot be shared between threads safely
    --> src/contact.rs:1279:13
     |
1277 |         .query_row(
     |          --------- required by a bound introduced by this call
1278 |             "SELECT COUNT(*) FROM msgs WHERE from_id=? OR to_id=?;",
1279 |             params![contact_id.0, contact_id.0],
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn rusqlite::ToSql` cannot be shared between threads safely
     |
     = help: within `[&dyn rusqlite::ToSql]`, the trait `std::marker::Sync` is not implemented for `dyn rusqlite::ToSql`, which is required by `&[&dyn rusqlite::ToSql]: std::marker::Send`
     = note: required because it appears within the type `&dyn rusqlite::ToSql`
     = note: required because it appears within the type `[&dyn rusqlite::ToSql]`
     = note: required for `&[&dyn rusqlite::ToSql]` to implement `std::marker::Send`
note: required by a bound in `sql::Sql::query_row`
    --> src/sql.rs:462:41
     |
459  |     pub async fn query_row<T, F>(
     |                  --------- required by a bound in this associated function
...
462  |         params: impl rusqlite::Params + Send,
     |                                         ^^^^ required by this bound in `Sql::query_row`

error[E0277]: `dyn rusqlite::ToSql` cannot be shared between threads safely
    --> src/contact.rs:1291:9
     |
1289 |     sql.execute(
     |         ------- required by a bound introduced by this call
1290 |         "DELETE FROM contacts WHERE id=?;",
1291 |         params![contact_id.0],
     |         ^^^^^^^^^^^^^^^^^^^^^ `dyn rusqlite::ToSql` cannot be shared between threads safely
     |
     = help: within `[&dyn rusqlite::ToSql]`, the trait `std::marker::Sync` is not implemented for `dyn rusqlite::ToSql`, which is required by `&[&dyn rusqlite::ToSql]: std::marker::Send`
     = note: required because it appears within the type `&dyn rusqlite::ToSql`
     = note: required because it appears within the type `[&dyn rusqlite::ToSql]`
     = note: required for `&[&dyn rusqlite::ToSql]` to implement `std::marker::Send`
note: required by a bound in `sql::Sql::execute`
    --> src/sql.rs:404:41
     |
401  |     pub async fn execute(
     |                  ------- required by a bound in this associated function
...
404  |         params: impl rusqlite::Params + Send,
     |                                         ^^^^ required by this bound in `Sql::execute`

error[E0308]: mismatched types
    --> src/contact.rs:1295:24
     |
1295 |     context.emit_event(EventType::ContactsChanged);
     |             ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EventType`, found enum constructor
     |             |
     |             arguments to this method are incorrect
     |
    ::: src/events/payload.rs:188:5
     |
188  |     ContactsChanged(Option<ContactId>),
     |     --------------- `ContactsChanged` defines an enum variant constructor here, which should be called
     |
     = note:          expected enum `payload::EventType`
             found enum constructor `fn(std::option::Option<contact::ContactId>) -> payload::EventType {payload::EventType::ContactsChanged}`
note: method defined here
    --> src/context.rs:595:12
     |
595  |     pub fn emit_event(&self, event: EventType) {
     |            ^^^^^^^^^^        ----------------
help: use parentheses to construct this tuple variant
     |
1295 |     context.emit_event(EventType::ContactsChanged(/* std::option::Option<contact::ContactId> */));
     |                                                  +++++++++++++++++++++++++++++++++++++++++++++++

error: could not compile `deltachat` (lib test) due to 7 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


Fail
file path is :
projects/iceberg/rust/crates/catalog/glue/src/catalog.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
   Compiling iceberg-catalog-hms v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/hms)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
warning: unused import: `TableMetadataBuilder`
  --> crates/catalog/glue/src/catalog.rs:21:36
   |
21 | use iceberg::spec::{TableMetadata, TableMetadataBuilder};
   |                                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `get_default_table_location`
  --> crates/catalog/glue/src/catalog.rs:34:24
   |
34 |     create_sdk_config, get_default_table_location, get_metadata_location, validate_namespace,
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `table` found for struct `TableCreation` in the current scope
   --> crates/catalog/glue/src/catalog.rs:349:78
    |
349 |         let metadata_location = create_metadata_location(namespace, creation.table());
    |                                                                              ^^^^^ method not found in `TableCreation`

error[E0277]: the trait bound `iceberg::NamespaceIdent: AsRef<str>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:349:58
    |
349 |         let metadata_location = create_metadata_location(namespace, creation.table());
    |                                 ------------------------ ^^^^^^^^^ the trait `AsRef<str>` is not implemented for `iceberg::NamespaceIdent`, which is required by `&iceberg::NamespaceIdent: AsRef<str>`
    |                                 |
    |                                 required by a bound introduced by this call
    |
    = help: the trait `AsRef<Vec<std::string::String>>` is implemented for `iceberg::NamespaceIdent`
    = help: for that trait implementation, expected `Vec<std::string::String>`, found `str`
    = note: required for `&iceberg::NamespaceIdent` to implement `AsRef<str>`
note: required by a bound in `utils::create_metadata_location`
   --> crates/catalog/glue/src/utils.rs:233:55
    |
233 | pub(crate) fn create_metadata_location(location: impl AsRef<str>, version: i32) -> Result<String> {
    |                                                       ^^^^^^^^^^ required by this bound in `create_metadata_location`

error[E0599]: no method named `prev_metadata` found for struct `TableCreation` in the current scope
   --> crates/catalog/glue/src/catalog.rs:350:70
    |
350 |         let prev_metadata_location = get_metadata_location(&creation.prev_metadata());
    |                                                                      ^^^^^^^^^^^^^ method not found in `TableCreation`

error[E0599]: no method named `metadata` found for struct `TableCreation` in the current scope
   --> crates/catalog/glue/src/catalog.rs:351:33
    |
351 |         let metadata = creation.metadata().clone();
    |                                 ^^^^^^^^ method not found in `TableCreation`

error[E0599]: no method named `table` found for struct `TableCreation` in the current scope
   --> crates/catalog/glue/src/catalog.rs:354:22
    |
354 |             creation.table(),
    |                      ^^^^^ method not found in `TableCreation`

error[E0599]: no method named `properties` found for struct `TableCreation` in the current scope
   --> crates/catalog/glue/src/catalog.rs:357:23
    |
357 |             &creation.properties(),
    |                       ^^^^^^^^^^-- help: remove the arguments
    |                       |
    |                       field, not a method

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/glue/src/catalog.rs:353:21
    |
353 |         let table = convert_to_glue_table(
    |                     ^^^^^^^^^^^^^^^^^^^^^
    |
note: expected `String`, found `Result<String, Error>`
   --> crates/catalog/glue/src/catalog.rs:355:13
    |
355 |             metadata_location,
    |             ^^^^^^^^^^^^^^^^^
    = note: expected struct `std::string::String`
                 found enum `std::result::Result<std::string::String, iceberg::Error>`
note: expected `Option<String>`, found `Result<String, Error>`
   --> crates/catalog/glue/src/catalog.rs:358:13
    |
358 |             prev_metadata_location,
    |             ^^^^^^^^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<std::string::String>`
               found enum `std::result::Result<std::string::String, iceberg::Error>`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:144:15
    |
144 | pub(crate) fn convert_to_glue_table(
    |               ^^^^^^^^^^^^^^^^^^^^^
145 |     table_name: impl Into<String>,
    |     -----------------------------
146 |     metadata_location: String,
    |     -------------------------
147 |     metadata: &TableMetadata,
    |     ------------------------
148 |     properties: &HashMap<String, String>,
    |     ------------------------------------
149 |     prev_metadata_location: Option<String>,
    |     --------------------------------------
help: consider using `Result::expect` to unwrap the `std::result::Result<std::string::String, iceberg::Error>` value, panicking if the value is a `Result::Err`
    |
355 |             metadata_location.expect("REASON"),
    |                              +++++++++++++++++

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:362:88
    |
362 |         let builder = self.client.0.create_table().database_name(&db_name).table_input(&table);
    |                                                                            ----------- ^^^^^^ expected `TableInput`, found `&TableInput`
    |                                                                            |
    |                                                                            arguments to this method are incorrect
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/operation/create_table/builders.rs:140:12
    |
140 |     pub fn table_input(mut self, input: crate::types::TableInput) -> Self {
    |            ^^^^^^^^^^^
help: consider removing the borrow
    |
362 -         let builder = self.client.0.create_table().database_name(&db_name).table_input(&table);
362 +         let builder = self.client.0.create_table().database_name(&db_name).table_input(table);
    |

error[E0599]: no method named `table` found for struct `TableCreation` in the current scope
   --> crates/catalog/glue/src/catalog.rs:367:70
    |
367 |         self.load_table(&TableIdent::new(namespace.clone(), creation.table().clone()))
    |                                                                      ^^^^^ method not found in `TableCreation`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:367:9
    |
367 |         self.load_table(&TableIdent::new(namespace.clone(), creation.table().clone()))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<Table, Error>`, found `Pin<Box<...>>`
    |
    = note: expected enum `std::result::Result<iceberg::table::Table, iceberg::Error>`
             found struct `Pin<Box<dyn std::future::Future<Output = std::result::Result<iceberg::table::Table, iceberg::Error>> + Send>>`
note: return type inferred to be `std::result::Result<iceberg::table::Table, iceberg::Error>` here
   --> crates/catalog/glue/src/catalog.rs:90:1
    |
90  | #[async_trait]
    | ^^^^^^^^^^^^^^
    = note: this error originates in the attribute macro `async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)

Some errors have detailed explanations: E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `iceberg-catalog-glue` (lib test) generated 2 warnings
error: could not compile `iceberg-catalog-glue` (lib test) due to 10 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
warning: unused import: `TableMetadataBuilder`
  --> crates/catalog/glue/src/catalog.rs:21:36
   |
21 | use iceberg::spec::{TableMetadata, TableMetadataBuilder};
   |                                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `get_default_table_location`
  --> crates/catalog/glue/src/catalog.rs:34:24
   |
34 |     create_sdk_config, get_default_table_location, get_metadata_location, validate_namespace,
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `table` found for struct `TableCreation` in the current scope
   --> crates/catalog/glue/src/catalog.rs:349:78
    |
349 |         let metadata_location = create_metadata_location(namespace, creation.table());
    |                                                                              ^^^^^ method not found in `TableCreation`

error[E0277]: the trait bound `NamespaceIdent: AsRef<str>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:349:58
    |
349 |         let metadata_location = create_metadata_location(namespace, creation.table());
    |                                 ------------------------ ^^^^^^^^^ the trait `AsRef<str>` is not implemented for `NamespaceIdent`, which is required by `&NamespaceIdent: AsRef<str>`
    |                                 |
    |                                 required by a bound introduced by this call
    |
    = help: the trait `AsRef<Vec<std::string::String>>` is implemented for `NamespaceIdent`
    = help: for that trait implementation, expected `Vec<std::string::String>`, found `str`
    = note: required for `&NamespaceIdent` to implement `AsRef<str>`
note: required by a bound in `create_metadata_location`
   --> crates/catalog/glue/src/utils.rs:233:55
    |
233 | pub(crate) fn create_metadata_location(location: impl AsRef<str>, version: i32) -> Result<String> {
    |                                                       ^^^^^^^^^^ required by this bound in `create_metadata_location`

error[E0599]: no method named `prev_metadata` found for struct `TableCreation` in the current scope
   --> crates/catalog/glue/src/catalog.rs:350:70
    |
350 |         let prev_metadata_location = get_metadata_location(&creation.prev_metadata());
    |                                                                      ^^^^^^^^^^^^^ method not found in `TableCreation`

error[E0599]: no method named `metadata` found for struct `TableCreation` in the current scope
   --> crates/catalog/glue/src/catalog.rs:351:33
    |
351 |         let metadata = creation.metadata().clone();
    |                                 ^^^^^^^^ method not found in `TableCreation`

error[E0599]: no method named `table` found for struct `TableCreation` in the current scope
   --> crates/catalog/glue/src/catalog.rs:354:22
    |
354 |             creation.table(),
    |                      ^^^^^ method not found in `TableCreation`

error[E0599]: no method named `properties` found for struct `TableCreation` in the current scope
   --> crates/catalog/glue/src/catalog.rs:357:23
    |
357 |             &creation.properties(),
    |                       ^^^^^^^^^^-- help: remove the arguments
    |                       |
    |                       field, not a method

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/glue/src/catalog.rs:353:21
    |
353 |         let table = convert_to_glue_table(
    |                     ^^^^^^^^^^^^^^^^^^^^^
    |
note: expected `String`, found `Result<String, Error>`
   --> crates/catalog/glue/src/catalog.rs:355:13
    |
355 |             metadata_location,
    |             ^^^^^^^^^^^^^^^^^
    = note: expected struct `std::string::String`
                 found enum `Result<std::string::String, iceberg::Error>`
note: expected `Option<String>`, found `Result<String, Error>`
   --> crates/catalog/glue/src/catalog.rs:358:13
    |
358 |             prev_metadata_location,
    |             ^^^^^^^^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<std::string::String>`
               found enum `Result<std::string::String, iceberg::Error>`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:144:15
    |
144 | pub(crate) fn convert_to_glue_table(
    |               ^^^^^^^^^^^^^^^^^^^^^
145 |     table_name: impl Into<String>,
    |     -----------------------------
146 |     metadata_location: String,
    |     -------------------------
147 |     metadata: &TableMetadata,
    |     ------------------------
148 |     properties: &HashMap<String, String>,
    |     ------------------------------------
149 |     prev_metadata_location: Option<String>,
    |     --------------------------------------
help: consider using `Result::expect` to unwrap the `Result<std::string::String, iceberg::Error>` value, panicking if the value is a `Result::Err`
    |
355 |             metadata_location.expect("REASON"),
    |                              +++++++++++++++++

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:362:88
    |
362 |         let builder = self.client.0.create_table().database_name(&db_name).table_input(&table);
    |                                                                            ----------- ^^^^^^ expected `TableInput`, found `&TableInput`
    |                                                                            |
    |                                                                            arguments to this method are incorrect
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/operation/create_table/builders.rs:140:12
    |
140 |     pub fn table_input(mut self, input: crate::types::TableInput) -> Self {
    |            ^^^^^^^^^^^
help: consider removing the borrow
    |
362 -         let builder = self.client.0.create_table().database_name(&db_name).table_input(&table);
362 +         let builder = self.client.0.create_table().database_name(&db_name).table_input(table);
    |

error[E0599]: no method named `table` found for struct `TableCreation` in the current scope
   --> crates/catalog/glue/src/catalog.rs:367:70
    |
367 |         self.load_table(&TableIdent::new(namespace.clone(), creation.table().clone()))
    |                                                                      ^^^^^ method not found in `TableCreation`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:367:9
    |
367 |         self.load_table(&TableIdent::new(namespace.clone(), creation.table().clone()))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<Table, Error>`, found `Pin<Box<...>>`
    |
    = note: expected enum `Result<iceberg::table::Table, iceberg::Error>`
             found struct `Pin<Box<dyn std::future::Future<Output = Result<iceberg::table::Table, iceberg::Error>> + Send>>`
note: return type inferred to be `Result<iceberg::table::Table, iceberg::Error>` here
   --> crates/catalog/glue/src/catalog.rs:90:1
    |
90  | #[async_trait]
    | ^^^^^^^^^^^^^^
    = note: this error originates in the attribute macro `async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)

Some errors have detailed explanations: E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `iceberg-catalog-glue` (lib) generated 2 warnings
error: could not compile `iceberg-catalog-glue` (lib) due to 10 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...


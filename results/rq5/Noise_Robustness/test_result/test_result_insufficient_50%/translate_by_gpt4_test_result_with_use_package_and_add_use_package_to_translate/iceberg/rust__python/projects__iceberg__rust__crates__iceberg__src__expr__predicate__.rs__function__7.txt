Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/expr/predicate.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/expr/predicate.rs:110:60
    |
110 | fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<UnaryExpression<BoundReference>, Error> {
    |                                                            ^^^^^^ expected 1 generic argument      ----- help: remove this generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0053]: method `bind` has an incompatible type for trait
   --> crates/iceberg/src/expr/predicate.rs:110:60
    |
110 | fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<UnaryExpression<BoundReference>, Error> {
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                                                            |
    |                                                            expected associated type, found `term::BoundReference`
    |                                                            help: change the output type to match the trait: `std::result::Result<predicate::UnaryExpression<<T as Bind>::Bound>, error::Error>`
    |
note: type in trait
   --> crates/iceberg/src/expr/mod.rs:158:64
    |
158 |     fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> crate::Result<Self::Bound>;
    |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected signature `fn(&predicate::UnaryExpression<_>, Arc<_>, _) -> std::result::Result<predicate::UnaryExpression<<T as Bind>::Bound>, _>`
               found signature `fn(&predicate::UnaryExpression<_>, Arc<_>, _) -> std::result::Result<predicate::UnaryExpression<term::BoundReference>, _>`

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:112:27
    |
105 | impl<T: Bind> Bind for UnaryExpression<T> {
    |      - expected this type parameter
...
112 |     Ok(Self::new(self.op, bound_term))
    |        ---------          ^^^^^^^^^^ expected type parameter `T`, found associated type
    |        |
    |        arguments to this function are incorrect
    |
    = note: expected type parameter `T`
              found associated type `<T as Bind>::Bound`
note: associated function defined here
   --> crates/iceberg/src/expr/predicate.rs:119:19
    |
119 |     pub(crate) fn new(op: PredicateOperator, term: T) -> Self {
    |                   ^^^                        -------
help: consider further restricting this bound
    |
105 | impl<T: Bind<Bound = T>> Bind for UnaryExpression<T> {
    |             +++++++++++

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:112:8
    |
105 | impl<T: Bind> Bind for UnaryExpression<T> {
    |      - found this type parameter
...
112 |     Ok(Self::new(self.op, bound_term))
    |     -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `UnaryExpression<BoundReference>`, found `UnaryExpression<T>`
    |     |
    |     arguments to this enum variant are incorrect
    |
    = note: expected struct `predicate::UnaryExpression<term::BoundReference>`
               found struct `predicate::UnaryExpression<T>`
help: the type constructed contains `predicate::UnaryExpression<T>` due to the type of the argument passed
   --> crates/iceberg/src/expr/predicate.rs:112:5
    |
112 |     Ok(Self::new(self.op, bound_term))
    |     ^^^------------------------------^
    |        |
    |        this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5

Some errors have detailed explanations: E0053, E0107, E0308.
For more information about an error, try `rustc --explain E0053`.
error: could not compile `iceberg` (lib) due to 4 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 4 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/expr/predicate.rs:110:60
    |
110 | fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<UnaryExpression<BoundReference>, Error> {
    |                                                            ^^^^^^ expected 1 generic argument      ----- help: remove this generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0053]: method `bind` has an incompatible type for trait
   --> crates/iceberg/src/expr/predicate.rs:110:60
    |
110 | fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<UnaryExpression<BoundReference>, Error> {
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                                                            |
    |                                                            expected associated type, found `term::BoundReference`
    |                                                            help: change the output type to match the trait: `std::result::Result<predicate::UnaryExpression<<T as Bind>::Bound>, error::Error>`
    |
note: type in trait
   --> crates/iceberg/src/expr/mod.rs:158:64
    |
158 |     fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> crate::Result<Self::Bound>;
    |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected signature `fn(&predicate::UnaryExpression<_>, Arc<_>, _) -> std::result::Result<predicate::UnaryExpression<<T as Bind>::Bound>, _>`
               found signature `fn(&predicate::UnaryExpression<_>, Arc<_>, _) -> std::result::Result<predicate::UnaryExpression<term::BoundReference>, _>`

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:112:27
    |
105 | impl<T: Bind> Bind for UnaryExpression<T> {
    |      - expected this type parameter
...
112 |     Ok(Self::new(self.op, bound_term))
    |        ---------          ^^^^^^^^^^ expected type parameter `T`, found associated type
    |        |
    |        arguments to this function are incorrect
    |
    = note: expected type parameter `T`
              found associated type `<T as Bind>::Bound`
note: associated function defined here
   --> crates/iceberg/src/expr/predicate.rs:119:19
    |
119 |     pub(crate) fn new(op: PredicateOperator, term: T) -> Self {
    |                   ^^^                        -------
help: consider further restricting this bound
    |
105 | impl<T: Bind<Bound = T>> Bind for UnaryExpression<T> {
    |             +++++++++++

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:112:8
    |
105 | impl<T: Bind> Bind for UnaryExpression<T> {
    |      - found this type parameter
...
112 |     Ok(Self::new(self.op, bound_term))
    |     -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `UnaryExpression<BoundReference>`, found `UnaryExpression<T>`
    |     |
    |     arguments to this enum variant are incorrect
    |
    = note: expected struct `predicate::UnaryExpression<term::BoundReference>`
               found struct `predicate::UnaryExpression<T>`
help: the type constructed contains `predicate::UnaryExpression<T>` due to the type of the argument passed
   --> crates/iceberg/src/expr/predicate.rs:112:5
    |
112 |     Ok(Self::new(self.op, bound_term))
    |     ^^^------------------------------^
    |        |
    |        this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5

Some errors have detailed explanations: E0053, E0107, E0308.
For more information about an error, try `rustc --explain E0053`.
error: could not compile `iceberg` (lib) due to 4 previous errors


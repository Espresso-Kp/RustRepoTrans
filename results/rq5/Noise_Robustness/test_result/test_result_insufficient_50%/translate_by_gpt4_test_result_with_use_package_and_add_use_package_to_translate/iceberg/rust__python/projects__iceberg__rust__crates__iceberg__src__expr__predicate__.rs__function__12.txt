Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/expr/predicate.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: expected identifier, found keyword `ref`
   --> crates/iceberg/src/expr/predicate.rs:241:94
    |
241 |     let bound_literals: FnvHashSet<Datum> = self.literals.iter().map(|lit| lit.to(bound_term.ref().field.field_type.clone())).collect::<R...
    |                                                                                              ^^^ expected identifier, found keyword
    |
help: escape `ref` to use it as an identifier
    |
241 |     let bound_literals: FnvHashSet<Datum> = self.literals.iter().map(|lit| lit.to(bound_term.r#ref().field.field_type.clone())).collect::<Result<FnvHashSet<_>, _>>()?;
    |                                                                                              ++

error[E0449]: visibility qualifiers are not permitted here
   --> crates/iceberg/src/expr/predicate.rs:239:1
    |
239 | pub fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self> {
    | ^^^
    |
    = note: trait items always share the visibility of their trait

error[E0053]: method `bind` has an incompatible type for trait
   --> crates/iceberg/src/expr/predicate.rs:239:64
    |
234 | impl<T: Bind> Bind for SetExpression<T> {
    |      - found this type parameter
...
239 | pub fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self> {
    |                                                                ^^^^^^^^^^^^ expected associated type, found type parameter `T`
    |
note: type in trait
   --> crates/iceberg/src/expr/mod.rs:158:64
    |
158 |     fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> crate::Result<Self::Bound>;
    |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected signature `fn(&predicate::SetExpression<_>, Arc<_>, _) -> std::result::Result<predicate::SetExpression<<T as Bind>::Bound>, _>`
               found signature `fn(&predicate::SetExpression<_>, Arc<_>, _) -> std::result::Result<predicate::SetExpression<T>, _>`
help: change the output type to match the trait
    |
239 | pub fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> std::result::Result<predicate::SetExpression<<T as Bind>::Bound>, error::Error> {
    |                                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: consider further restricting this bound
    |
234 | impl<T: Bind<Bound = T>> Bind for SetExpression<T> {
    |             +++++++++++

error[E0599]: no method named `r#ref` found for associated type `<T as Bind>::Bound` in the current scope
   --> crates/iceberg/src/expr/predicate.rs:241:94
    |
241 | ....literals.iter().map(|lit| lit.to(bound_term.ref().field.field_type.clone())).collect::<Result<FnvHashSet<_>, _>>()?;
    |                                                 ^^^ method not found in `<T as Bind>::Bound`

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/expr/predicate.rs:241:137
    |
241 | ....field.field_type.clone())).collect::<Result<FnvHashSet<_>, _>>()?;
    |                                          ^^^^^^                - help: remove this generic argument
    |                                          |
    |                                          expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:244:15
    |
234 | impl<T: Bind> Bind for SetExpression<T> {
    |      - expected this type parameter
...
244 |         term: bound_term,
    |               ^^^^^^^^^^ expected type parameter `T`, found associated type
    |
    = note: expected type parameter `T`
              found associated type `<T as Bind>::Bound`
help: consider further restricting this bound
    |
234 | impl<T: Bind<Bound = T>> Bind for SetExpression<T> {
    |             +++++++++++

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:246:11
    |
246 |         ..self.clone()
    |           ^^^^^^^^^^^^ expected `SetExpression<T>`, found `&SetExpression<T>`
    |
    = note: expected struct `predicate::SetExpression<_>`
            found reference `&predicate::SetExpression<_>`

Some errors have detailed explanations: E0053, E0107, E0308, E0449, E0599.
For more information about an error, try `rustc --explain E0053`.
error: could not compile `iceberg` (lib) due to 7 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 7 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: expected identifier, found keyword `ref`
   --> crates/iceberg/src/expr/predicate.rs:241:94
    |
241 |     let bound_literals: FnvHashSet<Datum> = self.literals.iter().map(|lit| lit.to(bound_term.ref().field.field_type.clone())).collect::<R...
    |                                                                                              ^^^ expected identifier, found keyword
    |
help: escape `ref` to use it as an identifier
    |
241 |     let bound_literals: FnvHashSet<Datum> = self.literals.iter().map(|lit| lit.to(bound_term.r#ref().field.field_type.clone())).collect::<Result<FnvHashSet<_>, _>>()?;
    |                                                                                              ++

error[E0449]: visibility qualifiers are not permitted here
   --> crates/iceberg/src/expr/predicate.rs:239:1
    |
239 | pub fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self> {
    | ^^^
    |
    = note: trait items always share the visibility of their trait

error[E0053]: method `bind` has an incompatible type for trait
   --> crates/iceberg/src/expr/predicate.rs:239:64
    |
234 | impl<T: Bind> Bind for SetExpression<T> {
    |      - found this type parameter
...
239 | pub fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self> {
    |                                                                ^^^^^^^^^^^^ expected associated type, found type parameter `T`
    |
note: type in trait
   --> crates/iceberg/src/expr/mod.rs:158:64
    |
158 |     fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> crate::Result<Self::Bound>;
    |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected signature `fn(&predicate::SetExpression<_>, Arc<_>, _) -> std::result::Result<predicate::SetExpression<<T as Bind>::Bound>, _>`
               found signature `fn(&predicate::SetExpression<_>, Arc<_>, _) -> std::result::Result<predicate::SetExpression<T>, _>`
help: change the output type to match the trait
    |
239 | pub fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> std::result::Result<predicate::SetExpression<<T as Bind>::Bound>, error::Error> {
    |                                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: consider further restricting this bound
    |
234 | impl<T: Bind<Bound = T>> Bind for SetExpression<T> {
    |             +++++++++++

error[E0599]: no method named `r#ref` found for associated type `<T as Bind>::Bound` in the current scope
   --> crates/iceberg/src/expr/predicate.rs:241:94
    |
241 | ....literals.iter().map(|lit| lit.to(bound_term.ref().field.field_type.clone())).collect::<Result<FnvHashSet<_>, _>>()?;
    |                                                 ^^^ method not found in `<T as Bind>::Bound`

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/expr/predicate.rs:241:137
    |
241 | ....field.field_type.clone())).collect::<Result<FnvHashSet<_>, _>>()?;
    |                                          ^^^^^^                - help: remove this generic argument
    |                                          |
    |                                          expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:244:15
    |
234 | impl<T: Bind> Bind for SetExpression<T> {
    |      - expected this type parameter
...
244 |         term: bound_term,
    |               ^^^^^^^^^^ expected type parameter `T`, found associated type
    |
    = note: expected type parameter `T`
              found associated type `<T as Bind>::Bound`
help: consider further restricting this bound
    |
234 | impl<T: Bind<Bound = T>> Bind for SetExpression<T> {
    |             +++++++++++

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/predicate.rs:246:11
    |
246 |         ..self.clone()
    |           ^^^^^^^^^^^^ expected `SetExpression<T>`, found `&SetExpression<T>`
    |
    = note: expected struct `predicate::SetExpression<_>`
            found reference `&predicate::SetExpression<_>`

Some errors have detailed explanations: E0053, E0107, E0308, E0449, E0599.
For more information about an error, try `rustc --explain E0053`.
error: could not compile `iceberg` (lib) due to 7 previous errors


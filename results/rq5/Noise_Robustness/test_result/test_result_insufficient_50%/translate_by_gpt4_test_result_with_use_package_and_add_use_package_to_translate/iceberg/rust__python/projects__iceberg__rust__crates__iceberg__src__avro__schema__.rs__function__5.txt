Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/avro/schema.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0433]: failed to resolve: use of undeclared type `HashMap`
   --> crates/iceberg/src/avro/schema.rs:175:25
    |
175 |                 lookup: HashMap::new(),
    |                         ^^^^^^^ use of undeclared type `HashMap`
    |
help: consider importing this struct
    |
19  + use std::collections::HashMap;
    |

error[E0599]: no variant or associated item named `String` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:140:28
    |
140 |         AvroSchemaOrField::String => {
    |                            ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:143:68
    |
143 |             fields.insert("key-id".to_string(), Value::Number(self.last_map_key_field_id.into()));
    |                                                                    ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:144:70
    |
144 |             fields.insert("value-id".to_string(), Value::Number(self.last_map_value_field_id.into()));
    |                                                                      ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:145:49
    |
142 |             fields.insert("type".to_string(), Value::String("map".to_string()));
    |             ------                            -------------------------------- this argument has type `serde_json::Value`...
    |             |
    |             ... which causes `fields` to have type `BTreeMap<std::string::String, serde_json::Value>`
...
145 |             fields.insert("values".to_string(), value);
    |                    ------                       ^^^^^ expected `Value`, found `Either<Schema, RecordField>`
    |                    |
    |                    arguments to this method are incorrect
    |
    = note: expected enum `serde_json::Value`
               found enum `itertools::Either<apache_avro::Schema, RecordField>`
help: the return type of this call is `itertools::Either<apache_avro::Schema, RecordField>` due to the type of the argument passed
   --> crates/iceberg/src/avro/schema.rs:145:13
    |
145 |             fields.insert("values".to_string(), value);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----^
    |                                                 |
    |                                                 this argument influences the return type of `insert`
note: method defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/collections/btree/map.rs:982:12

error[E0599]: no variant or associated item named `Map` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:147:35
    |
147 |             Ok(AvroSchemaOrField::Map(fields))
    |                                   ^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:155:28
    |
155 |                     order: None,
    |                            ^^^^ expected `RecordFieldOrder`, found `Option<_>`
    |
    = note: expected enum `RecordFieldOrder`
               found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:156:29
    |
156 |                     schema: Box::new(key_value),
    |                             ^^^^^^^^^^^^^^^^^^^ expected `Schema`, found `Box<Either<Schema, RecordField>>`
    |
    = note: expected enum `apache_avro::Schema`
             found struct `Box<itertools::Either<apache_avro::Schema, RecordField>>`

error[E0560]: struct `RecordField` has no field named `field_id`
   --> crates/iceberg/src/avro/schema.rs:157:21
    |
157 |                     field_id: Some(*self.last_map_key_field_id),
    |                     ^^^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `aliases`, `custom_attributes`

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:157:42
    |
157 |                     field_id: Some(*self.last_map_key_field_id),
    |                                          ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:164:28
    |
164 |                     order: None,
    |                            ^^^^ expected `RecordFieldOrder`, found `Option<_>`
    |
    = note: expected enum `RecordFieldOrder`
               found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:165:29
    |
165 |                     schema: Box::new(value),
    |                             ^^^^^^^^^^^^^^^ expected `Schema`, found `Box<Either<Schema, RecordField>>`
    |
    = note: expected enum `apache_avro::Schema`
             found struct `Box<itertools::Either<apache_avro::Schema, RecordField>>`

error[E0560]: struct `RecordField` has no field named `field_id`
   --> crates/iceberg/src/avro/schema.rs:166:21
    |
166 |                     field_id: Some(*self.last_map_value_field_id),
    |                     ^^^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `aliases`, `custom_attributes`

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:166:42
    |
166 |                     field_id: Some(*self.last_map_value_field_id),
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0223]: ambiguous associated type
   --> crates/iceberg/src/avro/schema.rs:171:31
    |
171 |             let logical_map = Schema::Record {
    |                               ^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `Record` implemented for `spec::schema::Schema`, you could use the fully-qualified path
    |
171 |             let logical_map = <spec::schema::Schema as Example>::Record {
    |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:172:57
    |
172 |                 name: Name::new(format!("k{}_v{}", self.last_map_key_field_id, self.last_map_value_field_id)),
    |                                                         ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:172:85
    |
172 |                 name: Name::new(format!("k{}_v{}", self.last_map_key_field_id, self.last_map_value_field_id)),
    |                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:172:33
    |
172 |                 name: Name::new(format!("k{}_v{}", self.last_map_key_field_id, self.last_map_value_field_id)),
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no variant or associated item named `Array` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:178:35
    |
178 |             Ok(AvroSchemaOrField::Array(Box::new(logical_map)))
    |                                   ^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:158:31
    |
158 |                     position: None
    |                               ^^^^ expected `usize`, found `Option<_>`
    |
    = note: expected type `usize`
               found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:167:31
    |
167 |                     position: None
    |                               ^^^^ expected `usize`, found `Option<_>`
    |
    = note: expected type `usize`
               found enum `std::option::Option<_>`

Some errors have detailed explanations: E0223, E0308, E0433, E0560, E0599, E0609.
For more information about an error, try `rustc --explain E0223`.
error: could not compile `iceberg` (lib) due to 21 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 21 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0433]: failed to resolve: use of undeclared type `HashMap`
   --> crates/iceberg/src/avro/schema.rs:175:25
    |
175 |                 lookup: HashMap::new(),
    |                         ^^^^^^^ use of undeclared type `HashMap`
    |
help: consider importing this struct
    |
19  + use std::collections::HashMap;
    |

error[E0599]: no variant or associated item named `String` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:140:28
    |
140 |         AvroSchemaOrField::String => {
    |                            ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:143:68
    |
143 |             fields.insert("key-id".to_string(), Value::Number(self.last_map_key_field_id.into()));
    |                                                                    ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:144:70
    |
144 |             fields.insert("value-id".to_string(), Value::Number(self.last_map_value_field_id.into()));
    |                                                                      ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:145:49
    |
142 |             fields.insert("type".to_string(), Value::String("map".to_string()));
    |             ------                            -------------------------------- this argument has type `serde_json::Value`...
    |             |
    |             ... which causes `fields` to have type `BTreeMap<std::string::String, serde_json::Value>`
...
145 |             fields.insert("values".to_string(), value);
    |                    ------                       ^^^^^ expected `Value`, found `Either<Schema, RecordField>`
    |                    |
    |                    arguments to this method are incorrect
    |
    = note: expected enum `serde_json::Value`
               found enum `itertools::Either<apache_avro::Schema, RecordField>`
help: the return type of this call is `itertools::Either<apache_avro::Schema, RecordField>` due to the type of the argument passed
   --> crates/iceberg/src/avro/schema.rs:145:13
    |
145 |             fields.insert("values".to_string(), value);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----^
    |                                                 |
    |                                                 this argument influences the return type of `insert`
note: method defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/collections/btree/map.rs:982:12

error[E0599]: no variant or associated item named `Map` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:147:35
    |
147 |             Ok(AvroSchemaOrField::Map(fields))
    |                                   ^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:155:28
    |
155 |                     order: None,
    |                            ^^^^ expected `RecordFieldOrder`, found `Option<_>`
    |
    = note: expected enum `RecordFieldOrder`
               found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:156:29
    |
156 |                     schema: Box::new(key_value),
    |                             ^^^^^^^^^^^^^^^^^^^ expected `Schema`, found `Box<Either<Schema, RecordField>>`
    |
    = note: expected enum `apache_avro::Schema`
             found struct `Box<itertools::Either<apache_avro::Schema, RecordField>>`

error[E0560]: struct `RecordField` has no field named `field_id`
   --> crates/iceberg/src/avro/schema.rs:157:21
    |
157 |                     field_id: Some(*self.last_map_key_field_id),
    |                     ^^^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `aliases`, `custom_attributes`

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:157:42
    |
157 |                     field_id: Some(*self.last_map_key_field_id),
    |                                          ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:164:28
    |
164 |                     order: None,
    |                            ^^^^ expected `RecordFieldOrder`, found `Option<_>`
    |
    = note: expected enum `RecordFieldOrder`
               found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:165:29
    |
165 |                     schema: Box::new(value),
    |                             ^^^^^^^^^^^^^^^ expected `Schema`, found `Box<Either<Schema, RecordField>>`
    |
    = note: expected enum `apache_avro::Schema`
             found struct `Box<itertools::Either<apache_avro::Schema, RecordField>>`

error[E0560]: struct `RecordField` has no field named `field_id`
   --> crates/iceberg/src/avro/schema.rs:166:21
    |
166 |                     field_id: Some(*self.last_map_value_field_id),
    |                     ^^^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `aliases`, `custom_attributes`

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:166:42
    |
166 |                     field_id: Some(*self.last_map_value_field_id),
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0223]: ambiguous associated type
   --> crates/iceberg/src/avro/schema.rs:171:31
    |
171 |             let logical_map = Schema::Record {
    |                               ^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `Record` implemented for `spec::schema::Schema`, you could use the fully-qualified path
    |
171 |             let logical_map = <spec::schema::Schema as Example>::Record {
    |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:172:57
    |
172 |                 name: Name::new(format!("k{}_v{}", self.last_map_key_field_id, self.last_map_value_field_id)),
    |                                                         ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:172:85
    |
172 |                 name: Name::new(format!("k{}_v{}", self.last_map_key_field_id, self.last_map_value_field_id)),
    |                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:172:33
    |
172 |                 name: Name::new(format!("k{}_v{}", self.last_map_key_field_id, self.last_map_value_field_id)),
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no variant or associated item named `Array` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:178:35
    |
178 |             Ok(AvroSchemaOrField::Array(Box::new(logical_map)))
    |                                   ^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:158:31
    |
158 |                     position: None
    |                               ^^^^ expected `usize`, found `Option<_>`
    |
    = note: expected type `usize`
               found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:167:31
    |
167 |                     position: None
    |                               ^^^^ expected `usize`, found `Option<_>`
    |
    = note: expected type `usize`
               found enum `std::option::Option<_>`

Some errors have detailed explanations: E0223, E0308, E0433, E0560, E0599, E0609.
For more information about an error, try `rustc --explain E0223`.
error: could not compile `iceberg` (lib) due to 21 previous errors


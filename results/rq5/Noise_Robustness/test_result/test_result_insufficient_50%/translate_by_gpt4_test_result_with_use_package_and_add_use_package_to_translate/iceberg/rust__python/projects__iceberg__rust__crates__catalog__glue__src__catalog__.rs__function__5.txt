Fail
file path is :
projects/iceberg/rust/crates/catalog/glue/src/catalog.rs

output is:



error is :
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
error[E0255]: the name `GlueCatalog` is defined multiple times
  --> crates/catalog/glue/src/catalog.rs:58:1
   |
20 | use crate::GlueCatalog;
   |     ------------------ previous import of the type `GlueCatalog` here
...
58 | pub struct GlueCatalog {
   | ^^^^^^^^^^^^^^^^^^^^^^ `GlueCatalog` redefined here
   |
   = note: `GlueCatalog` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
20 | use crate::GlueCatalog as OtherGlueCatalog;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0255]: the name `GlueCatalogConfig` is defined multiple times
  --> crates/catalog/glue/src/catalog.rs:45:1
   |
21 | use crate::GlueCatalogConfig;
   |     ------------------------ previous import of the type `GlueCatalogConfig` here
...
45 | pub struct GlueCatalogConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `GlueCatalogConfig` redefined here
   |
   = note: `GlueCatalogConfig` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
21 | use crate::GlueCatalogConfig as OtherGlueCatalogConfig;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0432]: unresolved import `aws_sdk_glue::client::errors`
  --> crates/catalog/glue/src/catalog.rs:19:27
   |
19 | use aws_sdk_glue::client::errors::CreateDatabaseErr;
   |                           ^^^^^^ could not find `errors` in `client`

warning: unused import: `crate::GlueCatalog`
  --> crates/catalog/glue/src/catalog.rs:20:5
   |
20 | use crate::GlueCatalog;
   |     ^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `crate::GlueCatalogConfig`
  --> crates/catalog/glue/src/catalog.rs:21:5
   |
21 | use crate::GlueCatalogConfig;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:157:29
    |
157 |         let database_name = convert_to_database(namespace);
    |                             ^^^^^^^^^^^^^^^^^^^----------- an argument of type `&std::collections::HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
157 |         let database_name = convert_to_database(namespace, /* &std::collections::HashMap<std::string::String, std::string::String> */);
    |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0639]: cannot create non-exhaustive struct using struct expression
   --> crates/catalog/glue/src/catalog.rs:158:30
    |
158 |           let database_input = TableInput {
    |  ______________________________^
159 | |             name: Some(database_name.clone()),
160 | |             parameters: Some(properties),
161 | |             ..Default::default()
162 | |         };
    | |_________^

error[E0599]: the method `clone` exists for enum `Result<DatabaseInput, Error>`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:159:38
    |
159 |             name: Some(database_name.clone()),
    |                                      ^^^^^ method cannot be called on `Result<DatabaseInput, Error>` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ---------------- doesn't satisfy `iceberg::Error: Clone`
    |
    = note: the following trait bounds were not satisfied:
            `iceberg::Error: Clone`
            which is required by `std::result::Result<DatabaseInput, iceberg::Error>: Clone`
note: the method `clone` exists on the type `DatabaseInput`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/clone.rs:160:5
help: use the `?` operator to extract the `DatabaseInput` value, propagating a `Result::Err` value to the caller
    |
159 |             name: Some(database_name?.clone()),
    |                                     +

error[E0277]: the trait bound `TableInput: Default` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:161:15
    |
161 |             ..Default::default()
    |               ^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `TableInput`

error[E0599]: no method named `create_database` found for struct `GlueClient` in the current scope
   --> crates/catalog/glue/src/catalog.rs:164:27
    |
55  | struct GlueClient(aws_sdk_glue::Client);
    | ----------------- method `create_database` not found for this struct
...
164 |         match self.client.create_database(database_input).await {
    |                           ^^^^^^^^^^^^^^^ method not found in `GlueClient`
    |
help: one of the expressions' fields has a method of the same name
    |
164 |         match self.client.0.create_database(database_input).await {
    |                           ++

error[E0599]: no associated item named `RGError` found for struct `iceberg::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:167:75
    |
167 | ...   CreateDatabaseErr::EntityAlreadyExists(err) => Err(Error::RGError(ErrorKind::AlreadyExists(format!("Database {} already exists", da...
    |                                                                 ^^^^^^^ associated item not found in `Error`
    |
note: if you're trying to build a new `iceberg::Error`, consider using `iceberg::Error::new` which returns `iceberg::Error`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:197:5
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `AlreadyExists` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:167:94
    |
167 | ... => Err(Error::RGError(ErrorKind::AlreadyExists(format!("Database {} already exists", database_name)))),
    |                                      ^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `std::result::Result<DatabaseInput, iceberg::Error>` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:167:146
    |
167 | ... exists", database_name)))),
    |              ^^^^^^^^^^^^^ `std::result::Result<DatabaseInput, iceberg::Error>` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `std::result::Result<DatabaseInput, iceberg::Error>`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

Some errors have detailed explanations: E0061, E0255, E0277, E0432, E0599, E0639.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib test) generated 2 warnings
error: could not compile `iceberg-catalog-glue` (lib test) due to 11 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
error[E0255]: the name `GlueCatalog` is defined multiple times
  --> crates/catalog/glue/src/catalog.rs:58:1
   |
20 | use crate::GlueCatalog;
   |     ------------------ previous import of the type `GlueCatalog` here
...
58 | pub struct GlueCatalog {
   | ^^^^^^^^^^^^^^^^^^^^^^ `GlueCatalog` redefined here
   |
   = note: `GlueCatalog` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
20 | use crate::GlueCatalog as OtherGlueCatalog;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0255]: the name `GlueCatalogConfig` is defined multiple times
  --> crates/catalog/glue/src/catalog.rs:45:1
   |
21 | use crate::GlueCatalogConfig;
   |     ------------------------ previous import of the type `GlueCatalogConfig` here
...
45 | pub struct GlueCatalogConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `GlueCatalogConfig` redefined here
   |
   = note: `GlueCatalogConfig` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
21 | use crate::GlueCatalogConfig as OtherGlueCatalogConfig;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0432]: unresolved import `aws_sdk_glue::client::errors`
  --> crates/catalog/glue/src/catalog.rs:19:27
   |
19 | use aws_sdk_glue::client::errors::CreateDatabaseErr;
   |                           ^^^^^^ could not find `errors` in `client`

warning: unused import: `crate::GlueCatalog`
  --> crates/catalog/glue/src/catalog.rs:20:5
   |
20 | use crate::GlueCatalog;
   |     ^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `crate::GlueCatalogConfig`
  --> crates/catalog/glue/src/catalog.rs:21:5
   |
21 | use crate::GlueCatalogConfig;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:157:29
    |
157 |         let database_name = convert_to_database(namespace);
    |                             ^^^^^^^^^^^^^^^^^^^----------- an argument of type `&HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
157 |         let database_name = convert_to_database(namespace, /* &HashMap<std::string::String, std::string::String> */);
    |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0639]: cannot create non-exhaustive struct using struct expression
   --> crates/catalog/glue/src/catalog.rs:158:30
    |
158 |           let database_input = TableInput {
    |  ______________________________^
159 | |             name: Some(database_name.clone()),
160 | |             parameters: Some(properties),
161 | |             ..Default::default()
162 | |         };
    | |_________^

error[E0599]: the method `clone` exists for enum `Result<DatabaseInput, Error>`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:159:38
    |
159 |             name: Some(database_name.clone()),
    |                                      ^^^^^ method cannot be called on `Result<DatabaseInput, Error>` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ---------------- doesn't satisfy `iceberg::Error: Clone`
    |
    = note: the following trait bounds were not satisfied:
            `iceberg::Error: Clone`
            which is required by `Result<DatabaseInput, iceberg::Error>: Clone`
note: the method `clone` exists on the type `DatabaseInput`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/clone.rs:160:5
help: use the `?` operator to extract the `DatabaseInput` value, propagating a `Result::Err` value to the caller
    |
159 |             name: Some(database_name?.clone()),
    |                                     +

error[E0277]: the trait bound `TableInput: Default` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:161:15
    |
161 |             ..Default::default()
    |               ^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `TableInput`

error[E0599]: no method named `create_database` found for struct `GlueClient` in the current scope
   --> crates/catalog/glue/src/catalog.rs:164:27
    |
55  | struct GlueClient(aws_sdk_glue::Client);
    | ----------------- method `create_database` not found for this struct
...
164 |         match self.client.create_database(database_input).await {
    |                           ^^^^^^^^^^^^^^^ method not found in `GlueClient`
    |
help: one of the expressions' fields has a method of the same name
    |
164 |         match self.client.0.create_database(database_input).await {
    |                           ++

error[E0599]: no associated item named `RGError` found for struct `iceberg::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:167:75
    |
167 | ...   CreateDatabaseErr::EntityAlreadyExists(err) => Err(Error::RGError(ErrorKind::AlreadyExists(format!("Database {} already exists", da...
    |                                                                 ^^^^^^^ associated item not found in `Error`
    |
note: if you're trying to build a new `iceberg::Error`, consider using `iceberg::Error::new` which returns `iceberg::Error`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:197:5
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `AlreadyExists` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:167:94
    |
167 | ... => Err(Error::RGError(ErrorKind::AlreadyExists(format!("Database {} already exists", database_name)))),
    |                                      ^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `Result<DatabaseInput, iceberg::Error>` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:167:146
    |
167 | ...already exists", database_name)))),
    |                     ^^^^^^^^^^^^^ `Result<DatabaseInput, iceberg::Error>` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `Result<DatabaseInput, iceberg::Error>`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

Some errors have detailed explanations: E0061, E0255, E0277, E0432, E0599, E0639.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib) generated 2 warnings
error: could not compile `iceberg-catalog-glue` (lib) due to 11 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...


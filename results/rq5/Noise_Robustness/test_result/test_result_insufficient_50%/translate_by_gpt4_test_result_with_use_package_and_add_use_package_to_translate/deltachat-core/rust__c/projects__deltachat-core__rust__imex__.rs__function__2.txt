Fail
file path is :
projects/deltachat-core/rust/src/imex.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `Path` is defined multiple times
 --> src/imex.rs:9:17
  |
5 | use std::path::Path;
  |     --------------- previous import of the type `Path` here
...
9 | use std::path::{Path, PathBuf};
  |                 ^^^^--
  |                 |
  |                 `Path` reimported here
  |                 help: remove unnecessary import
  |
  = note: `Path` must be defined only once in the type namespace of this module

error[E0252]: the name `fs` is defined multiple times
  --> src/imex.rs:17:17
   |
4  | use std::fs;
   |     ------- previous import of the module `fs` here
...
17 | use tokio::fs::{self, File};
   |                 ^^^^ `fs` reimported here
   |
   = note: `fs` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
17 | use tokio::fs::{self as other_fs, File};
   |                 ~~~~~~~~~~~~~~~~

error[E0433]: failed to resolve: could not find `DbMode` in `sql`
   --> src/imex.rs:148:64
    |
148 |             if test_sql.open(&context, &curr_path_n_file, sql::DbMode::ReadOnly).await? {
    |                                                                ^^^^^^ could not find `DbMode` in `sql`

error[E0425]: cannot find value `DC_BAK_PREFIX` in this scope
   --> src/imex.rs:125:22
    |
125 |     let prefix_len = DC_BAK_PREFIX.len();
    |                      ^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_BAK_SUFFIX` in this scope
   --> src/imex.rs:126:22
    |
126 |     let suffix_len = DC_BAK_SUFFIX.len();
    |                      ^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_BAK_PREFIX` in this scope
   --> src/imex.rs:141:54
    |
141 |         if name_len > prefix_len && name.starts_with(DC_BAK_PREFIX)
    |                                                      ^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_BAK_SUFFIX` in this scope
   --> src/imex.rs:142:93
    |
142 |             && name_len > suffix_len && name[name_len - suffix_len - 1..] == format!(".{}", DC_BAK_SUFFIX)
    |                                                                                             ^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `context` in this scope
   --> src/imex.rs:148:31
    |
148 |             if test_sql.open(&context, &curr_path_n_file, sql::DbMode::ReadOnly).await? {
    |                               ^^^^^^^
    |
help: a local variable with a similar name exists, consider changing it
    |
124 | pub async fn has_backup(context: &Context, dir_name: &Path) -> Result<String, Box<dyn std::error::Error>> {
    |                         ~~~~~~~

error[E0425]: cannot find value `context` in this scope
   --> src/imex.rs:149:64
    |
149 |                 let curr_backup_time = test_sql.get_config_int(context, "backup_time").await?;
    |                                                                ^^^^^^^
    |
help: a local variable with a similar name exists, consider changing it
    |
124 | pub async fn has_backup(context: &Context, dir_name: &Path) -> Result<String, Box<dyn std::error::Error>> {
    |                         ~~~~~~~

warning: unused import: `Path`
 --> src/imex.rs:9:17
  |
9 | use std::path::{Path, PathBuf};
  |                 ^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `self`
  --> src/imex.rs:17:17
   |
17 | use tokio::fs::{self, File};
   |                 ^^^^

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
   --> src/imex.rs:576:47
    |
576 |             fs::rename(temp_path, &dest_path).await?;
    |             ----------------------------------^^^^^
    |             |                                ||
    |             |                                |`std::result::Result<(), std::io::Error>` is not a future
    |             |                                help: remove the `.await`
    |             this call returns `std::result::Result<(), std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
   --> src/imex.rs:491:18
    |
490 |             fs::remove_file(unpacked_database)
    |             ---------------------------------- this call returns `std::result::Result<(), std::io::Error>`
491 |                 .await
    |                 -^^^^^
    |                 ||
    |                 |`std::result::Result<(), std::io::Error>` is not a future
    |                 help: remove the `.await`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
   --> src/imex.rs:499:78
    |
499 |                     fs::rename(&from_path, context.get_blobdir().join(name)).await?;
    |                     ---------------------------------------------------------^^^^^
    |                     |                                                       ||
    |                     |                                                       |`std::result::Result<(), std::io::Error>` is not a future
    |                     |                                                       help: remove the `.await`
    |                     this call returns `std::result::Result<(), std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<std::fs::ReadDir, std::io::Error>` is not a future
   --> src/imex.rs:131:38
    |
131 |     let dir = fs::read_dir(dir_name).await?;
    |               -----------------------^^^^^
    |               |                     ||
    |               |                     |`std::result::Result<std::fs::ReadDir, std::io::Error>` is not a future
    |               |                     help: remove the `.await`
    |               this call returns `std::result::Result<std::fs::ReadDir, std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<std::fs::ReadDir, std::io::Error>`, which is required by `std::result::Result<std::fs::ReadDir, std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<std::fs::ReadDir, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<std::fs::ReadDir, std::io::Error>` to implement `std::future::IntoFuture`

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> src/imex.rs:146:28
    |
146 |             let test_sql = sql::Sql::new();
    |                            ^^^^^^^^^^^^^-- an argument of type `PathBuf` is missing
    |
note: associated function defined here
   --> src/sql.rs:79:12
    |
79  |     pub fn new(dbfile: PathBuf) -> Sql {
    |            ^^^ ---------------
help: provide the argument
    |
146 |             let test_sql = sql::Sql::new(/* PathBuf */);
    |                                         ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 3 arguments were supplied
   --> src/imex.rs:148:25
    |
148 |             if test_sql.open(&context, &curr_path_n_file, sql::DbMode::ReadOnly).await? {
    |                         ^^^^           -----------------  --------------------- unexpected argument
    |                                        |
    |                                        expected `String`, found `&String`
    |
note: method defined here
   --> src/sql.rs:280:18
    |
280 |     pub async fn open(&self, context: &Context, passphrase: String) -> Result<()> {
    |                  ^^^^        -----------------  ------------------
help: consider removing the borrow
    |
148 -             if test_sql.open(&context, &curr_path_n_file, sql::DbMode::ReadOnly).await? {
148 +             if test_sql.open(&context, curr_path_n_file, sql::DbMode::ReadOnly).await? {
    |
help: remove the extra argument
    |
148 -             if test_sql.open(&context, &curr_path_n_file, sql::DbMode::ReadOnly).await? {
148 +             if test_sql.open(&context, /* std::string::String */).await? {
    |

error[E0308]: `?` operator has incompatible types
   --> src/imex.rs:148:16
    |
148 |             if test_sql.open(&context, &curr_path_n_file, sql::DbMode::ReadOnly).await? {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `()`
    |
    = note: `?` operator cannot convert from `()` to `bool`

error[E0599]: no method named `get_config_int` found for struct `Sql` in the current scope
   --> src/imex.rs:149:49
    |
149 |                 let curr_backup_time = test_sql.get_config_int(context, "backup_time").await?;
    |                                                 ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_raw_config_int`
    |
   ::: src/sql.rs:57:1
    |
57  | pub struct Sql {
    | -------------- method `get_config_int` not found for this struct

Some errors have detailed explanations: E0061, E0252, E0277, E0308, E0425, E0433, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `deltachat` (lib) generated 2 warnings
error: could not compile `deltachat` (lib) due to 17 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> src/imex.rs:146:28
    |
146 |             let test_sql = sql::Sql::new();
    |                            ^^^^^^^^^^^^^-- an argument of type `std::path::PathBuf` is missing
    |
note: associated function defined here
   --> src/sql.rs:79:12
    |
79  |     pub fn new(dbfile: PathBuf) -> Sql {
    |            ^^^ ---------------
help: provide the argument
    |
146 |             let test_sql = sql::Sql::new(/* std::path::PathBuf */);
    |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `get_config_int` found for struct `sql::Sql` in the current scope
   --> src/imex.rs:149:49
    |
149 |                 let curr_backup_time = test_sql.get_config_int(context, "backup_time").await?;
    |                                                 ^^^^^^^^^^^^^^ help: there is a method with a similar name: `get_raw_config_int`
    |
   ::: src/sql.rs:57:1
    |
57  | pub struct Sql {
    | -------------- method `get_config_int` not found for this struct

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/imex.rs:1026:72
     |
1026 |             let backup = has_backup(&context2, backup_dir.path()).await?;
     |                                                                        ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/imex.rs:1026:72
     |
1026 |             let backup = has_backup(&context2, backup_dir.path()).await?;
     |                                                                        ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/imex.rs:1026:72
     |
1026 |             let backup = has_backup(&context2, backup_dir.path()).await?;
     |                                                                        ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/imex.rs:1083:68
     |
1083 |         let backup = has_backup(&context2, backup_dir.path()).await?;
     |                                                                    ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/imex.rs:1083:68
     |
1083 |         let backup = has_backup(&context2, backup_dir.path()).await?;
     |                                                                    ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/imex.rs:1083:68
     |
1083 |         let backup = has_backup(&context2, backup_dir.path()).await?;
     |                                                                    ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

warning: `deltachat` (lib test) generated 2 warnings (2 duplicates)
error: could not compile `deltachat` (lib test) due to 23 previous errors; 2 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


Fail
file path is :
projects/deltachat-core/rust/src/aheader.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
warning: unused import: `std::collections::BTreeMap`
 --> src/aheader.rs:5:5
  |
5 | use std::collections::BTreeMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `Context as _`
 --> src/aheader.rs:9:20
  |
9 | use anyhow::{bail, Context as _, Error, Result};
  |                    ^^^^^^^^^^^^

error[E0277]: the trait bound `SignedPublicKey: std::default::Default` is not satisfied
   --> src/aheader.rs:100:40
    |
100 |         public_key: SignedPublicKey {..Default::default()},
    |                                        ^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `SignedPublicKey`

error[E0599]: no function or associated item named `from_string` found for struct `SignedPublicKey` in the current scope
   --> src/aheader.rs:121:67
    |
121 |             "public_key" => aheader.public_key = SignedPublicKey::from_string(value)?,
    |                                                                   ^^^^^^^^^^^ function or associated item not found in `SignedPublicKey`
    |
note: if you're trying to build a new `SignedPublicKey`, consider using `SignedPublicKey::new` which returns `SignedPublicKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/public.rs:39:5
    |
39  | /     pub fn new(
40  | |         primary_key: packet::PublicKey,
41  | |         details: SignedKeyDetails,
42  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
43  | |     ) -> Self {
    | |_____________^
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
5   + use pgp::Deserializable;
    |

error[E0277]: the trait bound `std::result::Result<_, anyhow::Error>: StdError` is not satisfied
   --> src/aheader.rs:122:144
    |
122 | ...).map_err(|_| bail!("invalid encryption preference"))?,
    |                                                         ^ the trait `StdError` is not implemented for `std::result::Result<_, anyhow::Error>`, which is required by `std::result::Result<Aheader, anyhow::Error>: FromResidual<std::result::Result<Infallible, std::result::Result<_, anyhow::Error>>>`
    |
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `anyhow::Error` to implement `From<std::result::Result<_, anyhow::Error>>`
    = note: required for `std::result::Result<Aheader, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, std::result::Result<_, anyhow::Error>>>`

error[E0609]: no field `binary` on type `SignedPublicKey`
   --> src/aheader.rs:127:54
    |
127 |     if aheader.addr.is_empty() || aheader.public_key.binary.is_empty() {
    |                                                      ^^^^^^ unknown field
    |
    = note: available fields are: `primary_key`, `details`, `public_subkeys`

Some errors have detailed explanations: E0277, E0599, E0609.
For more information about an error, try `rustc --explain E0277`.
warning: `deltachat` (lib) generated 2 warnings
error: could not compile `deltachat` (lib) due to 4 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0277]: the trait bound `pgp::SignedPublicKey: std::default::Default` is not satisfied
   --> src/aheader.rs:100:40
    |
100 |         public_key: SignedPublicKey {..Default::default()},
    |                                        ^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `pgp::SignedPublicKey`

error[E0599]: no function or associated item named `from_string` found for struct `pgp::SignedPublicKey` in the current scope
   --> src/aheader.rs:121:67
    |
121 |             "public_key" => aheader.public_key = SignedPublicKey::from_string(value)?,
    |                                                                   ^^^^^^^^^^^ function or associated item not found in `SignedPublicKey`
    |
note: if you're trying to build a new `pgp::SignedPublicKey`, consider using `pgp::SignedPublicKey::new` which returns `pgp::SignedPublicKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/public.rs:39:5
    |
39  | /     pub fn new(
40  | |         primary_key: packet::PublicKey,
41  | |         details: SignedKeyDetails,
42  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
43  | |     ) -> Self {
    | |_____________^
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
5   + use pgp::Deserializable;
    |

error[E0277]: the trait bound `std::result::Result<_, anyhow::Error>: StdError` is not satisfied
   --> src/aheader.rs:122:144
    |
122 | ...).map_err(|_| bail!("invalid encryption preference"))?,
    |                                                         ^ the trait `StdError` is not implemented for `std::result::Result<_, anyhow::Error>`, which is required by `std::result::Result<aheader::Aheader, anyhow::Error>: FromResidual<std::result::Result<Infallible, std::result::Result<_, anyhow::Error>>>`
    |
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `anyhow::Error` to implement `From<std::result::Result<_, anyhow::Error>>`
    = note: required for `std::result::Result<aheader::Aheader, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, std::result::Result<_, anyhow::Error>>>`

error[E0609]: no field `binary` on type `pgp::SignedPublicKey`
   --> src/aheader.rs:127:54
    |
127 |     if aheader.addr.is_empty() || aheader.public_key.binary.is_empty() {
    |                                                      ^^^^^^ unknown field
    |
    = note: available fields are: `primary_key`, `details`, `public_subkeys`

warning: `deltachat` (lib test) generated 2 warnings (2 duplicates)
error: could not compile `deltachat` (lib test) due to 4 previous errors; 2 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


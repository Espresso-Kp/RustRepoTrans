Fail
file path is :
projects/deltachat-core/rust/src/imex.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0428]: the name `set_self_key` is defined multiple times
   --> src/imex.rs:321:1
    |
311 | async fn set_self_key(context: &Context, armored_key: String, set_default: bool) -> Result<()> {
    | ---------------------------------------------------------------------------------------------- previous definition of the value `set_self_key` here
...
321 | async fn set_self_key(context: &Context, armored: &str, set_default: bool) -> Result<()> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `set_self_key` redefined here
    |
    = note: `set_self_key` must be defined only once in the value namespace of this module

error[E0428]: the name `decrypt_setup_file` is defined multiple times
   --> src/imex.rs:371:1
    |
306 |   async fn decrypt_setup_file(passphrase: &str, file: impl std::io::Read + std::io::Seek) -> Result<String> {
    |   --------------------------------------------------------------------------------------------------------- previous definition of the value `decrypt_setup_file` here
...
371 | / async fn decrypt_setup_file<T: std::io::Read + std::io::Seek>(
372 | |     passphrase: &str,
373 | |     file: T,
374 | | ) -> Result<String> {
...   |
378 | |     Ok(plain_text)
379 | | }
    | |_^ `decrypt_setup_file` redefined here
    |
    = note: `decrypt_setup_file` must be defined only once in the value namespace of this module

error[E0428]: the name `normalize_setup_code` is defined multiple times
   --> src/imex.rs:381:1
    |
302 | async fn normalize_setup_code(context: &Context, setup_code: &str) -> Result<String> {
    | ------------------------------------------------------------------------------------ previous definition of the value `normalize_setup_code` here
...
381 | fn normalize_setup_code(s: &str) -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `normalize_setup_code` redefined here
    |
    = note: `normalize_setup_code` must be defined only once in the value namespace of this module

error[E0425]: cannot find value `DC_CONTEXT_MAGIC` in this scope
   --> src/imex.rs:279:30
    |
279 |     if context.inner.magic!= DC_CONTEXT_MAGIC || msg_id <= DC_MSG_ID_LAST_SPECIAL || setup_code.is_empty() {
    |                              ^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_MSG_ID_LAST_SPECIAL` in this scope
   --> src/imex.rs:279:60
    |
279 |     if context.inner.magic!= DC_CONTEXT_MAGIC || msg_id <= DC_MSG_ID_LAST_SPECIAL || setup_code.is_empty() {
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this constant
    |
3   + use crate::constants::DC_MSG_ID_LAST_SPECIAL;
    |

error[E0425]: cannot find function `normalize_setup_code` in module `pgp`
   --> src/imex.rs:303:24
    |
303 |     let norm_sc = pgp::normalize_setup_code(setup_code).await?;
    |                        ^^^^^^^^^^^^^^^^^^^^ not found in `pgp`

error[E0425]: cannot find function `sign_key` in module `pgp`
   --> src/imex.rs:313:27
    |
313 |     let signed_key = pgp::sign_key(&key, armored_key).await?;
    |                           ^^^^^^^^ not found in `pgp`

error[E0308]: mismatched types
   --> src/imex.rs:629:27
    |
629 |     set_self_key(context, &armored, set_default).await?;
    |     ------------          ^^^^^^^^ expected `String`, found `&Cow<'_, str>`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected struct `std::string::String`
            found reference `&Cow<'_, str>`
note: function defined here
   --> src/imex.rs:311:10
    |
311 | async fn set_self_key(context: &Context, armored_key: String, set_default: bool) -> Result<()> {
    |          ^^^^^^^^^^^^                    -------------------
help: try using a conversion method
    |
629 |     set_self_key(context, (&armored).to_string(), set_default).await?;
    |                           +        +++++++++++++

error[E0609]: no field `magic` on type `Arc<InnerContext>`
   --> src/imex.rs:279:22
    |
279 |     if context.inner.magic!= DC_CONTEXT_MAGIC || msg_id <= DC_MSG_ID_LAST_SPECIAL || setup_code.is_empty() {
    |                      ^^^^^ unknown field
    |
    = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0599]: no method named `get_file` found for reference `&context::Context` in the current scope
   --> src/imex.rs:283:23
    |
283 |     let msg = context.get_file(msg_id).ok_or_else(|| format_err!("Message not found"))?;
    |                       ^^^^^^^^ help: there is a method with a similar name: `get_dbfile`

error[E0277]: `std::result::Result<std::fs::File, anyhow::Error>` is not a future
   --> src/imex.rs:291:49
    |
291 |     let file = open_file_std(context, filename).await?;
    |                -------------------------------- ^^^^^ `std::result::Result<std::fs::File, anyhow::Error>` is not a future
    |                |
    |                this call returns `std::result::Result<std::fs::File, anyhow::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<std::fs::File, anyhow::Error>`, which is required by `std::result::Result<std::fs::File, anyhow::Error>: std::future::IntoFuture`
    = note: std::result::Result<std::fs::File, anyhow::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<std::fs::File, anyhow::Error>` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
291 -     let file = open_file_std(context, filename).await?;
291 +     let file = open_file_std(context, filename)?;
    |
help: alternatively, consider making `fn open_file_std` asynchronous
   --> src/tools.rs:441:4
    |
441 | pub async fn open_file_std(context: &Context, path: impl AsRef<Path>) -> Result<std::fs::File> {
    |     +++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> src/imex.rs:292:23
    |
292 |     let filecontent = read_file(file).await?;
    |                       ^^^^^^^^^------ an argument is missing
    |
note: function defined here
   --> src/tools.rs:407:14
    |
407 | pub async fn read_file(context: &Context, path: impl AsRef<Path>) -> Result<Vec<u8>> {
    |              ^^^^^^^^^ -----------------  ----------------------
help: provide the argument
    |
292 |     let filecontent = read_file(file, /* path */).await?;
    |                                ~~~~~~~~~~~~~~~~~~

error[E0277]: the trait bound `Vec<u8>: std::io::Read` is not satisfied
   --> src/imex.rs:296:51
    |
296 |     let armored_key = decrypt_setup_file(norm_sc, filecontent).await?;
    |                       ------------------          ^^^^^^^^^^^ the trait `std::io::Read` is not implemented for `Vec<u8>`
    |                       |
    |                       required by a bound introduced by this call
    |
note: required by a bound in `imex::decrypt_setup_file`
   --> src/imex.rs:306:58
    |
306 | async fn decrypt_setup_file(passphrase: &str, file: impl std::io::Read + std::io::Seek) -> Result<String> {
    |                                                          ^^^^^^^^^^^^^ required by this bound in `decrypt_setup_file`

error[E0277]: the trait bound `Vec<u8>: std::io::Seek` is not satisfied
   --> src/imex.rs:296:51
    |
296 |     let armored_key = decrypt_setup_file(norm_sc, filecontent).await?;
    |                       ------------------          ^^^^^^^^^^^ the trait `std::io::Seek` is not implemented for `Vec<u8>`
    |                       |
    |                       required by a bound introduced by this call
    |
note: required by a bound in `imex::decrypt_setup_file`
   --> src/imex.rs:306:74
    |
306 | async fn decrypt_setup_file(passphrase: &str, file: impl std::io::Read + std::io::Seek) -> Result<String> {
    |                                                                          ^^^^^^^^^^^^^ required by this bound in `decrypt_setup_file`

error[E0308]: mismatched types
   --> src/imex.rs:296:42
    |
296 |     let armored_key = decrypt_setup_file(norm_sc, filecontent).await?;
    |                       ------------------ ^^^^^^^ expected `&str`, found `String`
    |                       |
    |                       arguments to this function are incorrect
    |
note: function defined here
   --> src/imex.rs:306:10
    |
306 | async fn decrypt_setup_file(passphrase: &str, file: impl std::io::Read + std::io::Seek) -> Result<String> {
    |          ^^^^^^^^^^^^^^^^^^ ----------------
help: consider borrowing here
    |
296 |     let armored_key = decrypt_setup_file(&norm_sc, filecontent).await?;
    |                                          +

Some errors have detailed explanations: E0061, E0277, E0308, E0425, E0428, E0599, E0609.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `deltachat` (lib) due to 15 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0061]: this function takes 2 arguments but 1 argument was supplied
    --> src/imex.rs:1109:20
     |
1109 |         let norm = normalize_setup_code("123422343234423452346234723482349234");
     |                    ^^^^^^^^^^^^^^^^^^^^ -------------------------------------- an argument of type `&context::Context` is missing
     |
note: function defined here
    --> src/imex.rs:302:10
     |
302  | async fn normalize_setup_code(context: &Context, setup_code: &str) -> Result<String> {
     |          ^^^^^^^^^^^^^^^^^^^^ -----------------  ----------------
help: provide the argument
     |
1109 |         let norm = normalize_setup_code(/* &context::Context */, "123422343234423452346234723482349234");
     |                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0369]: binary operation `==` cannot be applied to type `impl futures::Future<Output = std::result::Result<std::string::String, anyhow::Error>>`
    --> src/imex.rs:1110:9
     |
1110 |         assert_eq!(norm, "1234-2234-3234-4234-5234-6234-7234-8234-9234");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |         |
     |         impl futures::Future<Output = std::result::Result<std::string::String, anyhow::Error>>
     |         &str
     |
     = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `impl futures::Future<Output = std::result::Result<std::string::String, anyhow::Error>>` doesn't implement `Debug`
    --> src/imex.rs:1110:9
     |
1110 |         assert_eq!(norm, "1234-2234-3234-4234-5234-6234-7234-8234-9234");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `impl futures::Future<Output = std::result::Result<std::string::String, anyhow::Error>>` cannot be formatted using `{:?}` because it doesn't implement `Debug`
     |
     = help: the trait `Debug` is not implemented for `impl futures::Future<Output = std::result::Result<std::string::String, anyhow::Error>>`
     = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this function takes 2 arguments but 1 argument was supplied
    --> src/imex.rs:1113:13
     |
1113 |             normalize_setup_code("\t1 2 3422343234- foo bar-- 423-45 2 34 6234723482349234      ");
     |             ^^^^^^^^^^^^^^^^^^^^ ---------------------------------------------------------------- an argument of type `&context::Context` is missing
     |
note: function defined here
    --> src/imex.rs:302:10
     |
302  | async fn normalize_setup_code(context: &Context, setup_code: &str) -> Result<String> {
     |          ^^^^^^^^^^^^^^^^^^^^ -----------------  ----------------
help: provide the argument
     |
1113 |             normalize_setup_code(/* &context::Context */, "\t1 2 3422343234- foo bar-- 423-45 2 34 6234723482349234      ");
     |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0369]: binary operation `==` cannot be applied to type `impl futures::Future<Output = std::result::Result<std::string::String, anyhow::Error>>`
    --> src/imex.rs:1114:9
     |
1114 |         assert_eq!(norm, "1234-2234-3234-4234-5234-6234-7234-8234-9234");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |         |
     |         impl futures::Future<Output = std::result::Result<std::string::String, anyhow::Error>>
     |         &str
     |
     = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `impl futures::Future<Output = std::result::Result<std::string::String, anyhow::Error>>` doesn't implement `Debug`
    --> src/imex.rs:1114:9
     |
1114 |         assert_eq!(norm, "1234-2234-3234-4234-5234-6234-7234-8234-9234");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `impl futures::Future<Output = std::result::Result<std::string::String, anyhow::Error>>` cannot be formatted using `{:?}` because it doesn't implement `Debug`
     |
     = help: the trait `Debug` is not implemented for `impl futures::Future<Output = std::result::Result<std::string::String, anyhow::Error>>`
     = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

Some errors have detailed explanations: E0061, E0277, E0308, E0369, E0425, E0428, E0599, E0609.
error: could not compile `deltachat` (lib test) due to 21 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0201]: duplicate definitions with name `always_true`:
   --> crates/iceberg/src/arrow/reader.rs:574:1
    |
531 | /     fn always_true(&mut self) -> Result<Box<PredicateResult>> {
532 | |         self.build_always_true()
533 | |     }
    | |_____- previous definition here
...
574 | / fn always_true(&self) -> Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static> {
575 | |         Box::new(|_| Ok(BooleanArray::full(true, self.column_indices.len())))
576 | |     }
    | |_____^ duplicate definition
    |
   ::: crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:29:5
    |
29  |       fn always_true(&mut self) -> Result<Self::T>;
    |       --------------------------------------------- item in trait

error[E0201]: duplicate definitions with name `always_false`:
   --> crates/iceberg/src/arrow/reader.rs:577:1
    |
535 | /     fn always_false(&mut self) -> Result<Box<PredicateResult>> {
536 | |         self.build_always_false()
537 | |     }
    | |_____- previous definition here
...
577 | / fn always_false(&self) -> Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static> {
578 | |         Box::new(|_| Ok(BooleanArray::full(false, self.column_indices.len())))
579 | |     }
    | |_____^ duplicate definition
    |
   ::: crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:32:5
    |
32  |       fn always_false(&mut self) -> Result<Self::T>;
    |       ---------------------------------------------- item in trait

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:555:48
    |
555 |         mut lhs: Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static>,
    |                                                ^^^^^^               ---------- help: remove this generic argument
    |                                                |
    |                                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:556:48
    |
556 |         mut rhs: Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static>,
    |                                                ^^^^^^               ---------- help: remove this generic argument
    |                                                |
    |                                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:557:47
    |
557 |     ) -> Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static>> {
    |                                               ^^^^^^               ---------- help: remove this generic argument
    |                                               |
    |                                               expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:574:56
    |
574 | fn always_true(&self) -> Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static> {
    |                                                        ^^^^^^               ---------- help: remove this generic argument
    |                                                        |
    |                                                        expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:577:57
    |
577 | fn always_false(&self) -> Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static> {
    |                                                         ^^^^^^               ---------- help: remove this generic argument
    |                                                         |
    |                                                         expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0053]: method `or` has an incompatible type for trait
   --> crates/iceberg/src/arrow/reader.rs:555:18
    |
555 |         mut lhs: Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static>,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                  |
    |                  expected `arrow_schema::ArrowError`, found `error::Error`
    |                  help: change the parameter type to match the trait: `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>`
    |
note: type in trait
   --> crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:38:27
    |
38  |     fn or(&mut self, lhs: Self::T, rhs: Self::T) -> Result<Self::T>;
    |                           ^^^^^^^
    = note: expected signature `fn(&mut PredicateConverter<'_>, Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>) -> std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, _>`
               found signature `fn(&mut PredicateConverter<'_>, Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>, Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>) -> std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>, _>`

error[E0369]: binary operation `==` cannot be applied to type `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>`
   --> crates/iceberg/src/arrow/reader.rs:558:16
    |
558 |         if lhs == self.always_true() || rhs == self.always_true() {
    |            --- ^^ ------------------ std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>
    |            |
    |            Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>

error[E0369]: binary operation `==` cannot be applied to type `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>`
   --> crates/iceberg/src/arrow/reader.rs:558:45
    |
558 |         if lhs == self.always_true() || rhs == self.always_true() {
    |                                         --- ^^ ------------------ std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>
    |                                         |
    |                                         Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:559:23
    |
559 |             return Ok(self.always_true());
    |                    -- ^^^^^^^^^^^^^^^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Result<Box<...>, ...>`
    |                    |
    |                    arguments to this enum variant are incorrect
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>`
                 found enum `std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, error::Error>`
help: the type constructed contains `std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:559:20
    |
559 |             return Ok(self.always_true());
    |                    ^^^------------------^
    |                       |
    |                       this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5

error[E0369]: binary operation `==` cannot be applied to type `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>`
   --> crates/iceberg/src/arrow/reader.rs:560:23
    |
560 |         } else if lhs == self.always_false() {
    |                   --- ^^ ------------------- std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>
    |                   |
    |                   Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>

error[E0369]: binary operation `==` cannot be applied to type `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>`
   --> crates/iceberg/src/arrow/reader.rs:562:23
    |
562 |         } else if rhs == self.always_false() {
    |                   --- ^^ ------------------- std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>
    |                   |
    |                   Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>

error[E0308]: arguments to this function are incorrect
   --> crates/iceberg/src/arrow/reader.rs:569:54
    |
569 |                 (Ok(lhs_array), Ok(rhs_array)) => Ok(or(lhs_array, rhs_array)),
    |                                                      ^^ ---------  --------- expected `&BooleanArray`, found `BooleanArray`
    |                                                         |
    |                                                         expected `&BooleanArray`, found `BooleanArray`
    |
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:271:8
    |
271 | pub fn or(left: &BooleanArray, right: &BooleanArray) -> Result<BooleanArray, ArrowError> {
    |        ^^
help: consider borrowing here
    |
569 |                 (Ok(lhs_array), Ok(rhs_array)) => Ok(or(&lhs_array, rhs_array)),
    |                                                         +
help: consider borrowing here
    |
569 |                 (Ok(lhs_array), Ok(rhs_array)) => Ok(or(lhs_array, &rhs_array)),
    |                                                                    +

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:569:54
    |
569 |                 (Ok(lhs_array), Ok(rhs_array)) => Ok(or(lhs_array, rhs_array)),
    |                                                   -- ^^^^^^^^^^^^^^^^^^^^^^^^ expected `BooleanArray`, found `Result<BooleanArray, ArrowError>`
    |                                                   |
    |                                                   arguments to this enum variant are incorrect
    |
    = note: expected struct `BooleanArray`
                 found enum `std::result::Result<BooleanArray, arrow_schema::ArrowError>`
help: the type constructed contains `std::result::Result<BooleanArray, arrow_schema::ArrowError>` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:569:51
    |
569 |                 (Ok(lhs_array), Ok(rhs_array)) => Ok(or(lhs_array, rhs_array)),
    |                                                   ^^^------------------------^
    |                                                      |
    |                                                      this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: consider using `Result::expect` to unwrap the `std::result::Result<BooleanArray, arrow_schema::ArrowError>` value, panicking if the value is a `Result::Err`
    |
569 |                 (Ok(lhs_array), Ok(rhs_array)) => Ok(or(lhs_array, rhs_array).expect("REASON")),
    |                                                                              +++++++++++++++++

error[E0277]: the trait bound `arrow_schema::ArrowError: From<&str>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:570:26
    |
570 |                 _ => Err(ArrowError::from("Error evaluating predicate")),
    |                          ^^^^^^^^^^ the trait `From<&str>` is not implemented for `arrow_schema::ArrowError`
    |
    = help: the following other types implement trait `From<T>`:
              <arrow_schema::ArrowError as From<std::io::Error>>
              <arrow_schema::ArrowError as From<parquet::errors::ParquetError>>
              <arrow_schema::ArrowError as From<FromUtf8Error>>
              <arrow_schema::ArrowError as From<IntoInnerError<W>>>
              <arrow_schema::ArrowError as From<Utf8Error>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:570:26
    |
570 |                 _ => Err(ArrowError::from("Error evaluating predicate")),
    |                      --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Error`, found `ArrowError`
    |                      |
    |                      arguments to this enum variant are incorrect
    |
help: the type constructed contains `arrow_schema::ArrowError` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:570:22
    |
570 |                 _ => Err(ArrowError::from("Error evaluating predicate")),
    |                      ^^^^----------------------------------------------^
    |                          |
    |                          this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5

error[E0599]: no function or associated item named `full` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:575:39
    |
575 |         Box::new(|_| Ok(BooleanArray::full(true, self.column_indices.len())))
    |                                       ^^^^ function or associated item not found in `BooleanArray`
    |
note: if you're trying to build a new `BooleanArray` consider using one of the following associated functions:
      BooleanArray::new
      BooleanArray::new_null
      BooleanArray::from_unary
      BooleanArray::from_binary
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/boolean_array.rs:89:5
    |
89  |       pub fn new(values: BooleanBuffer, nulls: Option<NullBuffer>) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
97  |       pub fn new_null(len: usize) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
213 | /     pub fn from_unary<T: ArrayAccessor, F>(left: T, mut op: F) -> Self
214 | |     where
215 | |         F: FnMut(T::Item) -> bool,
    | |__________________________________^
...
241 | /     pub fn from_binary<T: ArrayAccessor, S: ArrayAccessor, F>(left: T, right: S, mut op: F) -> Self
242 | |     where
243 | |         F: FnMut(T::Item, S::Item) -> bool,
    | |___________________________________________^

error[E0599]: no function or associated item named `full` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:578:39
    |
578 |         Box::new(|_| Ok(BooleanArray::full(false, self.column_indices.len())))
    |                                       ^^^^ function or associated item not found in `BooleanArray`
    |
note: if you're trying to build a new `BooleanArray` consider using one of the following associated functions:
      BooleanArray::new
      BooleanArray::new_null
      BooleanArray::from_unary
      BooleanArray::from_binary
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/boolean_array.rs:89:5
    |
89  |       pub fn new(values: BooleanBuffer, nulls: Option<NullBuffer>) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
97  |       pub fn new_null(len: usize) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
213 | /     pub fn from_unary<T: ArrayAccessor, F>(left: T, mut op: F) -> Self
214 | |     where
215 | |         F: FnMut(T::Item) -> bool,
    | |__________________________________^
...
241 | /     pub fn from_binary<T: ArrayAccessor, S: ArrayAccessor, F>(left: T, right: S, mut op: F) -> Self
242 | |     where
243 | |         F: FnMut(T::Item, S::Item) -> bool,
    | |___________________________________________^

Some errors have detailed explanations: E0053, E0107, E0201, E0277, E0308, E0369, E0599.
For more information about an error, try `rustc --explain E0053`.
error: could not compile `iceberg` (lib) due to 19 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 19 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0201]: duplicate definitions with name `always_true`:
   --> crates/iceberg/src/arrow/reader.rs:574:1
    |
531 | /     fn always_true(&mut self) -> Result<Box<PredicateResult>> {
532 | |         self.build_always_true()
533 | |     }
    | |_____- previous definition here
...
574 | / fn always_true(&self) -> Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static> {
575 | |         Box::new(|_| Ok(BooleanArray::full(true, self.column_indices.len())))
576 | |     }
    | |_____^ duplicate definition
    |
   ::: crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:29:5
    |
29  |       fn always_true(&mut self) -> Result<Self::T>;
    |       --------------------------------------------- item in trait

error[E0201]: duplicate definitions with name `always_false`:
   --> crates/iceberg/src/arrow/reader.rs:577:1
    |
535 | /     fn always_false(&mut self) -> Result<Box<PredicateResult>> {
536 | |         self.build_always_false()
537 | |     }
    | |_____- previous definition here
...
577 | / fn always_false(&self) -> Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static> {
578 | |         Box::new(|_| Ok(BooleanArray::full(false, self.column_indices.len())))
579 | |     }
    | |_____^ duplicate definition
    |
   ::: crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:32:5
    |
32  |       fn always_false(&mut self) -> Result<Self::T>;
    |       ---------------------------------------------- item in trait

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:555:48
    |
555 |         mut lhs: Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static>,
    |                                                ^^^^^^               ---------- help: remove this generic argument
    |                                                |
    |                                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:556:48
    |
556 |         mut rhs: Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static>,
    |                                                ^^^^^^               ---------- help: remove this generic argument
    |                                                |
    |                                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:557:47
    |
557 |     ) -> Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static>> {
    |                                               ^^^^^^               ---------- help: remove this generic argument
    |                                               |
    |                                               expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:574:56
    |
574 | fn always_true(&self) -> Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static> {
    |                                                        ^^^^^^               ---------- help: remove this generic argument
    |                                                        |
    |                                                        expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:577:57
    |
577 | fn always_false(&self) -> Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static> {
    |                                                         ^^^^^^               ---------- help: remove this generic argument
    |                                                         |
    |                                                         expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0053]: method `or` has an incompatible type for trait
   --> crates/iceberg/src/arrow/reader.rs:555:18
    |
555 |         mut lhs: Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send +'static>,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                  |
    |                  expected `arrow_schema::ArrowError`, found `error::Error`
    |                  help: change the parameter type to match the trait: `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>`
    |
note: type in trait
   --> crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:38:27
    |
38  |     fn or(&mut self, lhs: Self::T, rhs: Self::T) -> Result<Self::T>;
    |                           ^^^^^^^
    = note: expected signature `fn(&mut PredicateConverter<'_>, Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>) -> std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, _>`
               found signature `fn(&mut PredicateConverter<'_>, Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>, Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>) -> std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send + 'static)>, _>`

error[E0369]: binary operation `==` cannot be applied to type `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>`
   --> crates/iceberg/src/arrow/reader.rs:558:16
    |
558 |         if lhs == self.always_true() || rhs == self.always_true() {
    |            --- ^^ ------------------ std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>
    |            |
    |            Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>

error[E0369]: binary operation `==` cannot be applied to type `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>`
   --> crates/iceberg/src/arrow/reader.rs:558:45
    |
558 |         if lhs == self.always_true() || rhs == self.always_true() {
    |                                         --- ^^ ------------------ std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>
    |                                         |
    |                                         Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:559:23
    |
559 |             return Ok(self.always_true());
    |                    -- ^^^^^^^^^^^^^^^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Result<Box<...>, ...>`
    |                    |
    |                    arguments to this enum variant are incorrect
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>`
                 found enum `std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, error::Error>`
help: the type constructed contains `std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:559:20
    |
559 |             return Ok(self.always_true());
    |                    ^^^------------------^
    |                       |
    |                       this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5

error[E0369]: binary operation `==` cannot be applied to type `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>`
   --> crates/iceberg/src/arrow/reader.rs:560:23
    |
560 |         } else if lhs == self.always_false() {
    |                   --- ^^ ------------------- std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>
    |                   |
    |                   Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>

error[E0369]: binary operation `==` cannot be applied to type `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>`
   --> crates/iceberg/src/arrow/reader.rs:562:23
    |
562 |         } else if rhs == self.always_false() {
    |                   --- ^^ ------------------- std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>
    |                   |
    |                   Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, error::Error> + std::marker::Send>

error[E0308]: arguments to this function are incorrect
   --> crates/iceberg/src/arrow/reader.rs:569:54
    |
569 |                 (Ok(lhs_array), Ok(rhs_array)) => Ok(or(lhs_array, rhs_array)),
    |                                                      ^^ ---------  --------- expected `&BooleanArray`, found `BooleanArray`
    |                                                         |
    |                                                         expected `&BooleanArray`, found `BooleanArray`
    |
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:271:8
    |
271 | pub fn or(left: &BooleanArray, right: &BooleanArray) -> Result<BooleanArray, ArrowError> {
    |        ^^
help: consider borrowing here
    |
569 |                 (Ok(lhs_array), Ok(rhs_array)) => Ok(or(&lhs_array, rhs_array)),
    |                                                         +
help: consider borrowing here
    |
569 |                 (Ok(lhs_array), Ok(rhs_array)) => Ok(or(lhs_array, &rhs_array)),
    |                                                                    +

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:569:54
    |
569 |                 (Ok(lhs_array), Ok(rhs_array)) => Ok(or(lhs_array, rhs_array)),
    |                                                   -- ^^^^^^^^^^^^^^^^^^^^^^^^ expected `BooleanArray`, found `Result<BooleanArray, ArrowError>`
    |                                                   |
    |                                                   arguments to this enum variant are incorrect
    |
    = note: expected struct `BooleanArray`
                 found enum `std::result::Result<BooleanArray, arrow_schema::ArrowError>`
help: the type constructed contains `std::result::Result<BooleanArray, arrow_schema::ArrowError>` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:569:51
    |
569 |                 (Ok(lhs_array), Ok(rhs_array)) => Ok(or(lhs_array, rhs_array)),
    |                                                   ^^^------------------------^
    |                                                      |
    |                                                      this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: consider using `Result::expect` to unwrap the `std::result::Result<BooleanArray, arrow_schema::ArrowError>` value, panicking if the value is a `Result::Err`
    |
569 |                 (Ok(lhs_array), Ok(rhs_array)) => Ok(or(lhs_array, rhs_array).expect("REASON")),
    |                                                                              +++++++++++++++++

error[E0277]: the trait bound `arrow_schema::ArrowError: From<&str>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:570:26
    |
570 |                 _ => Err(ArrowError::from("Error evaluating predicate")),
    |                          ^^^^^^^^^^ the trait `From<&str>` is not implemented for `arrow_schema::ArrowError`
    |
    = help: the following other types implement trait `From<T>`:
              <arrow_schema::ArrowError as From<std::io::Error>>
              <arrow_schema::ArrowError as From<parquet::errors::ParquetError>>
              <arrow_schema::ArrowError as From<FromUtf8Error>>
              <arrow_schema::ArrowError as From<IntoInnerError<W>>>
              <arrow_schema::ArrowError as From<Utf8Error>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:570:26
    |
570 |                 _ => Err(ArrowError::from("Error evaluating predicate")),
    |                      --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Error`, found `ArrowError`
    |                      |
    |                      arguments to this enum variant are incorrect
    |
help: the type constructed contains `arrow_schema::ArrowError` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:570:22
    |
570 |                 _ => Err(ArrowError::from("Error evaluating predicate")),
    |                      ^^^^----------------------------------------------^
    |                          |
    |                          this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5

error[E0599]: no function or associated item named `full` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:575:39
    |
575 |         Box::new(|_| Ok(BooleanArray::full(true, self.column_indices.len())))
    |                                       ^^^^ function or associated item not found in `BooleanArray`
    |
note: if you're trying to build a new `BooleanArray` consider using one of the following associated functions:
      BooleanArray::new
      BooleanArray::new_null
      BooleanArray::from_unary
      BooleanArray::from_binary
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/boolean_array.rs:89:5
    |
89  |       pub fn new(values: BooleanBuffer, nulls: Option<NullBuffer>) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
97  |       pub fn new_null(len: usize) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
213 | /     pub fn from_unary<T: ArrayAccessor, F>(left: T, mut op: F) -> Self
214 | |     where
215 | |         F: FnMut(T::Item) -> bool,
    | |__________________________________^
...
241 | /     pub fn from_binary<T: ArrayAccessor, S: ArrayAccessor, F>(left: T, right: S, mut op: F) -> Self
242 | |     where
243 | |         F: FnMut(T::Item, S::Item) -> bool,
    | |___________________________________________^

error[E0599]: no function or associated item named `full` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:578:39
    |
578 |         Box::new(|_| Ok(BooleanArray::full(false, self.column_indices.len())))
    |                                       ^^^^ function or associated item not found in `BooleanArray`
    |
note: if you're trying to build a new `BooleanArray` consider using one of the following associated functions:
      BooleanArray::new
      BooleanArray::new_null
      BooleanArray::from_unary
      BooleanArray::from_binary
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/boolean_array.rs:89:5
    |
89  |       pub fn new(values: BooleanBuffer, nulls: Option<NullBuffer>) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
97  |       pub fn new_null(len: usize) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
213 | /     pub fn from_unary<T: ArrayAccessor, F>(left: T, mut op: F) -> Self
214 | |     where
215 | |         F: FnMut(T::Item) -> bool,
    | |__________________________________^
...
241 | /     pub fn from_binary<T: ArrayAccessor, S: ArrayAccessor, F>(left: T, right: S, mut op: F) -> Self
242 | |     where
243 | |         F: FnMut(T::Item, S::Item) -> bool,
    | |___________________________________________^

Some errors have detailed explanations: E0053, E0107, E0201, E0277, E0308, E0369, E0599.
For more information about an error, try `rustc --explain E0053`.
error: could not compile `iceberg` (lib) due to 19 previous errors


Fail
file path is :
projects/iceberg/rust/crates/catalog/glue/src/catalog.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
   Compiling iceberg-catalog-hms v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/hms)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
error[E0422]: cannot find struct, variant or union type `GetTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:539:52
    |
539 |     let get_table_response = glue_client.get_table(GetTableRequest {
    |                                                    ^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `CreateTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:548:32
    |
548 |     let create_table_request = CreateTableRequest {
    |                                ^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `DropTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:562:30
    |
562 |     let drop_table_request = DropTableRequest {
    |                              ^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `DeleteTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:570:36
    |
570 |         let delete_table_request = DeleteTableRequest {
    |                                    ^^^^^^^^^^^^^^^^^^ not found in this scope

warning: unused import: `from_aws_build_error`
  --> crates/catalog/glue/src/catalog.rs:31:20
   |
31 | use crate::error::{from_aws_build_error, from_aws_sdk_error};
   |                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0277]: `std::result::Result<std::string::String, iceberg::Error>` is not a future
   --> crates/catalog/glue/src/catalog.rs:523:40
    |
523 |     validate_namespace(dest_namespace).await?;
    |     ---------------------------------- ^^^^^ `std::result::Result<std::string::String, iceberg::Error>` is not a future
    |     |
    |     this call returns `std::result::Result<std::string::String, iceberg::Error>`
    |
    = help: the trait `std::future::Future` is not implemented for `std::result::Result<std::string::String, iceberg::Error>`, which is required by `std::result::Result<std::string::String, iceberg::Error>: IntoFuture`
    = note: std::result::Result<std::string::String, iceberg::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<std::string::String, iceberg::Error>` to implement `IntoFuture`
help: remove the `.await`
    |
523 -     validate_namespace(dest_namespace).await?;
523 +     validate_namespace(dest_namespace)?;
    |
help: alternatively, consider making `fn validate_namespace` asynchronous
   --> crates/catalog/glue/src/utils.rs:183:11
    |
183 | pub(crate) async fn validate_namespace(namespace: &NamespaceIdent) -> Result<String> {
    |            +++++

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:526:59
    |
526 |     let src_table_db_name = convert_to_database(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                                                           ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:526:49
    |
526 |     let src_table_db_name = convert_to_database(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                             ------------------- ^^^ expected `&NamespaceIdent`, found `&TableIdent`
    |                             |
    |                             arguments to this function are incorrect
    |
    = note: expected reference `&iceberg::NamespaceIdent`
               found reference `&'life1 TableIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------

error[E0277]: `std::result::Result<DatabaseInput, iceberg::Error>` is not a future
   --> crates/catalog/glue/src/catalog.rs:526:111
    |
526 |     let src_table_db_name = convert_to_database(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                             --------------------------------------------------------------------------------- ^^^^^ `std::result::Result<DatabaseInput, iceberg::Error>` is not a future
    |                             |
    |                             this call returns `std::result::Result<DatabaseInput, iceberg::Error>`
    |
    = help: the trait `std::future::Future` is not implemented for `std::result::Result<DatabaseInput, iceberg::Error>`, which is required by `std::result::Result<DatabaseInput, iceberg::Error>: IntoFuture`
    = note: std::result::Result<DatabaseInput, iceberg::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<DatabaseInput, iceberg::Error>` to implement `IntoFuture`
help: remove the `.await`
    |
526 -     let src_table_db_name = convert_to_database(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
526 +     let src_table_db_name = convert_to_database(src, self.aws_properties.glue_catalog_skip_name_validation())?;
    |
help: alternatively, consider making `fn convert_to_database` asynchronous
   --> crates/catalog/glue/src/utils.rs:96:11
    |
96  | pub(crate) async fn convert_to_database(
    |            +++++

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:527:58
    |
527 |     let src_table_name = convert_to_glue_table(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                                                          ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0277]: the trait bound `std::string::String: From<&TableIdent>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:527:48
    |
527 |     let src_table_name = convert_to_glue_table(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                          --------------------- ^^^ the trait `From<&TableIdent>` is not implemented for `std::string::String`, which is required by `&TableIdent: Into<std::string::String>`
    |                          |
    |                          required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&TableIdent` to implement `Into<std::string::String>`
note: required by a bound in `utils::convert_to_glue_table`
   --> crates/catalog/glue/src/utils.rs:145:22
    |
144 | pub(crate) fn convert_to_glue_table(
    |               --------------------- required by a bound in this function
145 |     table_name: impl Into<String>,
    |                      ^^^^^^^^^^^^ required by this bound in `convert_to_glue_table`

error[E0061]: this function takes 5 arguments but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:527:26
    |
527 |     let src_table_name = convert_to_glue_table(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                          ^^^^^^^^^^^^^^^^^^^^^-------------------------------------------------------------- three arguments of type `&iceberg::spec::TableMetadata`, `&std::collections::HashMap<std::string::String, std::string::String>`, and `std::option::Option<std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:144:15
    |
144 | pub(crate) fn convert_to_glue_table(
    |               ^^^^^^^^^^^^^^^^^^^^^
145 |     table_name: impl Into<String>,
    |     -----------------------------
146 |     metadata_location: String,
    |     -------------------------
147 |     metadata: &TableMetadata,
    |     ------------------------
148 |     properties: &HashMap<String, String>,
    |     ------------------------------------
149 |     prev_metadata_location: Option<String>,
    |     --------------------------------------
help: provide the arguments
    |
527 |     let src_table_name = convert_to_glue_table(src, self.aws_properties.glue_catalog_skip_name_validation(), /* &iceberg::spec::TableMetadata */, /* &std::collections::HashMap<std::string::String, std::string::String> */, /* std::option::Option<std::string::String> */).await?;
    |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: `std::result::Result<TableInput, iceberg::Error>` is not a future
   --> crates/catalog/glue/src/catalog.rs:527:110
    |
527 |     let src_table_name = convert_to_glue_table(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                          ----------------------------------------------------------------------------------- ^^^^^ `std::result::Result<TableInput, iceberg::Error>` is not a future
    |                          |
    |                          this call returns `std::result::Result<TableInput, iceberg::Error>`
    |
    = help: the trait `std::future::Future` is not implemented for `std::result::Result<TableInput, iceberg::Error>`, which is required by `std::result::Result<TableInput, iceberg::Error>: IntoFuture`
    = note: std::result::Result<TableInput, iceberg::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<TableInput, iceberg::Error>` to implement `IntoFuture`
help: remove the `.await`
    |
527 -     let src_table_name = convert_to_glue_table(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
527 +     let src_table_name = convert_to_glue_table(src, self.aws_properties.glue_catalog_skip_name_validation())?;
    |
help: alternatively, consider making `fn convert_to_glue_table` asynchronous
   --> crates/catalog/glue/src/utils.rs:144:11
    |
144 | pub(crate) async fn convert_to_glue_table(
    |            +++++

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:528:61
    |
528 |     let dest_table_db_name = convert_to_database(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                                                             ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:528:50
    |
528 |     let dest_table_db_name = convert_to_database(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                              ------------------- ^^^^ expected `&NamespaceIdent`, found `&TableIdent`
    |                              |
    |                              arguments to this function are incorrect
    |
    = note: expected reference `&iceberg::NamespaceIdent`
               found reference `&'life2 TableIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------

error[E0277]: `std::result::Result<DatabaseInput, iceberg::Error>` is not a future
   --> crates/catalog/glue/src/catalog.rs:528:113
    |
528 |     let dest_table_db_name = convert_to_database(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                              ---------------------------------------------------------------------------------- ^^^^^ `std::result::Result<DatabaseInput, iceberg::Error>` is not a future
    |                              |
    |                              this call returns `std::result::Result<DatabaseInput, iceberg::Error>`
    |
    = help: the trait `std::future::Future` is not implemented for `std::result::Result<DatabaseInput, iceberg::Error>`, which is required by `std::result::Result<DatabaseInput, iceberg::Error>: IntoFuture`
    = note: std::result::Result<DatabaseInput, iceberg::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<DatabaseInput, iceberg::Error>` to implement `IntoFuture`
help: remove the `.await`
    |
528 -     let dest_table_db_name = convert_to_database(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
528 +     let dest_table_db_name = convert_to_database(dest, self.aws_properties.glue_catalog_skip_name_validation())?;
    |
help: alternatively, consider making `fn convert_to_database` asynchronous
   --> crates/catalog/glue/src/utils.rs:96:11
    |
96  | pub(crate) async fn convert_to_database(
    |            +++++

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:529:60
    |
529 |     let dest_table_name = convert_to_glue_table(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                                                            ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0277]: the trait bound `std::string::String: From<&TableIdent>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:529:49
    |
529 |     let dest_table_name = convert_to_glue_table(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                           --------------------- ^^^^ the trait `From<&TableIdent>` is not implemented for `std::string::String`, which is required by `&TableIdent: Into<std::string::String>`
    |                           |
    |                           required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&TableIdent` to implement `Into<std::string::String>`
note: required by a bound in `utils::convert_to_glue_table`
   --> crates/catalog/glue/src/utils.rs:145:22
    |
144 | pub(crate) fn convert_to_glue_table(
    |               --------------------- required by a bound in this function
145 |     table_name: impl Into<String>,
    |                      ^^^^^^^^^^^^ required by this bound in `convert_to_glue_table`

error[E0061]: this function takes 5 arguments but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:529:27
    |
529 |     let dest_table_name = convert_to_glue_table(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                           ^^^^^^^^^^^^^^^^^^^^^--------------------------------------------------------------- three arguments of type `&iceberg::spec::TableMetadata`, `&std::collections::HashMap<std::string::String, std::string::String>`, and `std::option::Option<std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:144:15
    |
144 | pub(crate) fn convert_to_glue_table(
    |               ^^^^^^^^^^^^^^^^^^^^^
145 |     table_name: impl Into<String>,
    |     -----------------------------
146 |     metadata_location: String,
    |     -------------------------
147 |     metadata: &TableMetadata,
    |     ------------------------
148 |     properties: &HashMap<String, String>,
    |     ------------------------------------
149 |     prev_metadata_location: Option<String>,
    |     --------------------------------------
help: provide the arguments
    |
529 |     let dest_table_name = convert_to_glue_table(dest, self.aws_properties.glue_catalog_skip_name_validation(), /* &iceberg::spec::TableMetadata */, /* &std::collections::HashMap<std::string::String, std::string::String> */, /* std::option::Option<std::string::String> */).await?;
    |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: `std::result::Result<TableInput, iceberg::Error>` is not a future
   --> crates/catalog/glue/src/catalog.rs:529:112
    |
529 |     let dest_table_name = convert_to_glue_table(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                           ------------------------------------------------------------------------------------ ^^^^^ `std::result::Result<TableInput, iceberg::Error>` is not a future
    |                           |
    |                           this call returns `std::result::Result<TableInput, iceberg::Error>`
    |
    = help: the trait `std::future::Future` is not implemented for `std::result::Result<TableInput, iceberg::Error>`, which is required by `std::result::Result<TableInput, iceberg::Error>: IntoFuture`
    = note: std::result::Result<TableInput, iceberg::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<TableInput, iceberg::Error>` to implement `IntoFuture`
help: remove the `.await`
    |
529 -     let dest_table_name = convert_to_glue_table(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
529 +     let dest_table_name = convert_to_glue_table(dest, self.aws_properties.glue_catalog_skip_name_validation())?;
    |
help: alternatively, consider making `fn convert_to_glue_table` asynchronous
   --> crates/catalog/glue/src/utils.rs:144:11
    |
144 | pub(crate) async fn convert_to_glue_table(
    |            +++++

error[E0609]: no field `glue_client` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:532:29
    |
532 |     let glue_client = &self.glue_client;
    |                             ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:536:9
    |
536 |        .parameters(src_table_name.clone())
    |         ^^^^^^^^^^------------------------ an argument is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:12
    |
375 |     pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>)...
    |            ^^^^^^^^^^
help: provide the argument
    |
536 |        .parameters(src_table_name.clone(), /* v */)
    |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:540:26
    |
540 |         catalog_id: self.aws_properties.glue_catalog_id(),
    |                          ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:549:26
    |
549 |         catalog_id: self.aws_properties.glue_catalog_id(),
    |                          ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:554:13
    |
554 |            .parameters(src_table.parameters())
    |             ^^^^^^^^^^------------------------ an argument is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:12
    |
375 |     pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>)...
    |            ^^^^^^^^^^
help: provide the argument
    |
554 |            .parameters(src_table.parameters(), /* v */)
    |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:563:26
    |
563 |         catalog_id: self.aws_properties.glue_catalog_id(),
    |                          ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:571:30
    |
571 |             catalog_id: self.aws_properties.glue_catalog_id(),
    |                              ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

Some errors have detailed explanations: E0061, E0277, E0308, E0422, E0609.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib test) generated 1 warning
error: could not compile `iceberg-catalog-glue` (lib test) due to 26 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
error[E0422]: cannot find struct, variant or union type `GetTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:539:52
    |
539 |     let get_table_response = glue_client.get_table(GetTableRequest {
    |                                                    ^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `CreateTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:548:32
    |
548 |     let create_table_request = CreateTableRequest {
    |                                ^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `DropTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:562:30
    |
562 |     let drop_table_request = DropTableRequest {
    |                              ^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `DeleteTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:570:36
    |
570 |         let delete_table_request = DeleteTableRequest {
    |                                    ^^^^^^^^^^^^^^^^^^ not found in this scope

warning: unused import: `from_aws_build_error`
  --> crates/catalog/glue/src/catalog.rs:31:20
   |
31 | use crate::error::{from_aws_build_error, from_aws_sdk_error};
   |                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0277]: `Result<std::string::String, iceberg::Error>` is not a future
   --> crates/catalog/glue/src/catalog.rs:523:40
    |
523 |     validate_namespace(dest_namespace).await?;
    |     ---------------------------------- ^^^^^ `Result<std::string::String, iceberg::Error>` is not a future
    |     |
    |     this call returns `Result<std::string::String, iceberg::Error>`
    |
    = help: the trait `std::future::Future` is not implemented for `Result<std::string::String, iceberg::Error>`, which is required by `Result<std::string::String, iceberg::Error>: IntoFuture`
    = note: Result<std::string::String, iceberg::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `Result<std::string::String, iceberg::Error>` to implement `IntoFuture`
help: remove the `.await`
    |
523 -     validate_namespace(dest_namespace).await?;
523 +     validate_namespace(dest_namespace)?;
    |
help: alternatively, consider making `fn validate_namespace` asynchronous
   --> crates/catalog/glue/src/utils.rs:183:11
    |
183 | pub(crate) async fn validate_namespace(namespace: &NamespaceIdent) -> Result<String> {
    |            +++++

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:526:59
    |
526 |     let src_table_db_name = convert_to_database(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                                                           ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:526:49
    |
526 |     let src_table_db_name = convert_to_database(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                             ------------------- ^^^ expected `&NamespaceIdent`, found `&TableIdent`
    |                             |
    |                             arguments to this function are incorrect
    |
    = note: expected reference `&NamespaceIdent`
               found reference `&'life1 TableIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------

error[E0277]: `Result<DatabaseInput, iceberg::Error>` is not a future
   --> crates/catalog/glue/src/catalog.rs:526:111
    |
526 |     let src_table_db_name = convert_to_database(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                             --------------------------------------------------------------------------------- ^^^^^ `Result<DatabaseInput, iceberg::Error>` is not a future
    |                             |
    |                             this call returns `Result<DatabaseInput, iceberg::Error>`
    |
    = help: the trait `std::future::Future` is not implemented for `Result<DatabaseInput, iceberg::Error>`, which is required by `Result<DatabaseInput, iceberg::Error>: IntoFuture`
    = note: Result<DatabaseInput, iceberg::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `Result<DatabaseInput, iceberg::Error>` to implement `IntoFuture`
help: remove the `.await`
    |
526 -     let src_table_db_name = convert_to_database(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
526 +     let src_table_db_name = convert_to_database(src, self.aws_properties.glue_catalog_skip_name_validation())?;
    |
help: alternatively, consider making `fn convert_to_database` asynchronous
   --> crates/catalog/glue/src/utils.rs:96:11
    |
96  | pub(crate) async fn convert_to_database(
    |            +++++

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:527:58
    |
527 |     let src_table_name = convert_to_glue_table(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                                                          ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0277]: the trait bound `std::string::String: From<&TableIdent>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:527:48
    |
527 |     let src_table_name = convert_to_glue_table(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                          --------------------- ^^^ the trait `From<&TableIdent>` is not implemented for `std::string::String`, which is required by `&TableIdent: Into<std::string::String>`
    |                          |
    |                          required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&TableIdent` to implement `Into<std::string::String>`
note: required by a bound in `convert_to_glue_table`
   --> crates/catalog/glue/src/utils.rs:145:22
    |
144 | pub(crate) fn convert_to_glue_table(
    |               --------------------- required by a bound in this function
145 |     table_name: impl Into<String>,
    |                      ^^^^^^^^^^^^ required by this bound in `convert_to_glue_table`

error[E0061]: this function takes 5 arguments but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:527:26
    |
527 |     let src_table_name = convert_to_glue_table(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                          ^^^^^^^^^^^^^^^^^^^^^-------------------------------------------------------------- three arguments of type `&TableMetadata`, `&HashMap<std::string::String, std::string::String>`, and `std::option::Option<std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:144:15
    |
144 | pub(crate) fn convert_to_glue_table(
    |               ^^^^^^^^^^^^^^^^^^^^^
145 |     table_name: impl Into<String>,
    |     -----------------------------
146 |     metadata_location: String,
    |     -------------------------
147 |     metadata: &TableMetadata,
    |     ------------------------
148 |     properties: &HashMap<String, String>,
    |     ------------------------------------
149 |     prev_metadata_location: Option<String>,
    |     --------------------------------------
help: provide the arguments
    |
527 |     let src_table_name = convert_to_glue_table(src, self.aws_properties.glue_catalog_skip_name_validation(), /* &TableMetadata */, /* &HashMap<std::string::String, std::string::String> */, /* std::option::Option<std::string::String> */).await?;
    |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: `Result<TableInput, iceberg::Error>` is not a future
   --> crates/catalog/glue/src/catalog.rs:527:110
    |
527 |     let src_table_name = convert_to_glue_table(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                          ----------------------------------------------------------------------------------- ^^^^^ `Result<TableInput, iceberg::Error>` is not a future
    |                          |
    |                          this call returns `Result<TableInput, iceberg::Error>`
    |
    = help: the trait `std::future::Future` is not implemented for `Result<TableInput, iceberg::Error>`, which is required by `Result<TableInput, iceberg::Error>: IntoFuture`
    = note: Result<TableInput, iceberg::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `Result<TableInput, iceberg::Error>` to implement `IntoFuture`
help: remove the `.await`
    |
527 -     let src_table_name = convert_to_glue_table(src, self.aws_properties.glue_catalog_skip_name_validation()).await?;
527 +     let src_table_name = convert_to_glue_table(src, self.aws_properties.glue_catalog_skip_name_validation())?;
    |
help: alternatively, consider making `fn convert_to_glue_table` asynchronous
   --> crates/catalog/glue/src/utils.rs:144:11
    |
144 | pub(crate) async fn convert_to_glue_table(
    |            +++++

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:528:61
    |
528 |     let dest_table_db_name = convert_to_database(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                                                             ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:528:50
    |
528 |     let dest_table_db_name = convert_to_database(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                              ------------------- ^^^^ expected `&NamespaceIdent`, found `&TableIdent`
    |                              |
    |                              arguments to this function are incorrect
    |
    = note: expected reference `&NamespaceIdent`
               found reference `&'life2 TableIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------

error[E0277]: `Result<DatabaseInput, iceberg::Error>` is not a future
   --> crates/catalog/glue/src/catalog.rs:528:113
    |
528 |     let dest_table_db_name = convert_to_database(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                              ---------------------------------------------------------------------------------- ^^^^^ `Result<DatabaseInput, iceberg::Error>` is not a future
    |                              |
    |                              this call returns `Result<DatabaseInput, iceberg::Error>`
    |
    = help: the trait `std::future::Future` is not implemented for `Result<DatabaseInput, iceberg::Error>`, which is required by `Result<DatabaseInput, iceberg::Error>: IntoFuture`
    = note: Result<DatabaseInput, iceberg::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `Result<DatabaseInput, iceberg::Error>` to implement `IntoFuture`
help: remove the `.await`
    |
528 -     let dest_table_db_name = convert_to_database(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
528 +     let dest_table_db_name = convert_to_database(dest, self.aws_properties.glue_catalog_skip_name_validation())?;
    |
help: alternatively, consider making `fn convert_to_database` asynchronous
   --> crates/catalog/glue/src/utils.rs:96:11
    |
96  | pub(crate) async fn convert_to_database(
    |            +++++

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:529:60
    |
529 |     let dest_table_name = convert_to_glue_table(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                                                            ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0277]: the trait bound `std::string::String: From<&TableIdent>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:529:49
    |
529 |     let dest_table_name = convert_to_glue_table(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                           --------------------- ^^^^ the trait `From<&TableIdent>` is not implemented for `std::string::String`, which is required by `&TableIdent: Into<std::string::String>`
    |                           |
    |                           required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&TableIdent` to implement `Into<std::string::String>`
note: required by a bound in `convert_to_glue_table`
   --> crates/catalog/glue/src/utils.rs:145:22
    |
144 | pub(crate) fn convert_to_glue_table(
    |               --------------------- required by a bound in this function
145 |     table_name: impl Into<String>,
    |                      ^^^^^^^^^^^^ required by this bound in `convert_to_glue_table`

error[E0061]: this function takes 5 arguments but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:529:27
    |
529 |     let dest_table_name = convert_to_glue_table(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                           ^^^^^^^^^^^^^^^^^^^^^--------------------------------------------------------------- three arguments of type `&TableMetadata`, `&HashMap<std::string::String, std::string::String>`, and `std::option::Option<std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:144:15
    |
144 | pub(crate) fn convert_to_glue_table(
    |               ^^^^^^^^^^^^^^^^^^^^^
145 |     table_name: impl Into<String>,
    |     -----------------------------
146 |     metadata_location: String,
    |     -------------------------
147 |     metadata: &TableMetadata,
    |     ------------------------
148 |     properties: &HashMap<String, String>,
    |     ------------------------------------
149 |     prev_metadata_location: Option<String>,
    |     --------------------------------------
help: provide the arguments
    |
529 |     let dest_table_name = convert_to_glue_table(dest, self.aws_properties.glue_catalog_skip_name_validation(), /* &TableMetadata */, /* &HashMap<std::string::String, std::string::String> */, /* std::option::Option<std::string::String> */).await?;
    |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: `Result<TableInput, iceberg::Error>` is not a future
   --> crates/catalog/glue/src/catalog.rs:529:112
    |
529 |     let dest_table_name = convert_to_glue_table(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
    |                           ------------------------------------------------------------------------------------ ^^^^^ `Result<TableInput, iceberg::Error>` is not a future
    |                           |
    |                           this call returns `Result<TableInput, iceberg::Error>`
    |
    = help: the trait `std::future::Future` is not implemented for `Result<TableInput, iceberg::Error>`, which is required by `Result<TableInput, iceberg::Error>: IntoFuture`
    = note: Result<TableInput, iceberg::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `Result<TableInput, iceberg::Error>` to implement `IntoFuture`
help: remove the `.await`
    |
529 -     let dest_table_name = convert_to_glue_table(dest, self.aws_properties.glue_catalog_skip_name_validation()).await?;
529 +     let dest_table_name = convert_to_glue_table(dest, self.aws_properties.glue_catalog_skip_name_validation())?;
    |
help: alternatively, consider making `fn convert_to_glue_table` asynchronous
   --> crates/catalog/glue/src/utils.rs:144:11
    |
144 | pub(crate) async fn convert_to_glue_table(
    |            +++++

error[E0609]: no field `glue_client` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:532:29
    |
532 |     let glue_client = &self.glue_client;
    |                             ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:536:9
    |
536 |        .parameters(src_table_name.clone())
    |         ^^^^^^^^^^------------------------ an argument is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:12
    |
375 |     pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>)...
    |            ^^^^^^^^^^
help: provide the argument
    |
536 |        .parameters(src_table_name.clone(), /* v */)
    |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:540:26
    |
540 |         catalog_id: self.aws_properties.glue_catalog_id(),
    |                          ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:549:26
    |
549 |         catalog_id: self.aws_properties.glue_catalog_id(),
    |                          ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:554:13
    |
554 |            .parameters(src_table.parameters())
    |             ^^^^^^^^^^------------------------ an argument is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:12
    |
375 |     pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>)...
    |            ^^^^^^^^^^
help: provide the argument
    |
554 |            .parameters(src_table.parameters(), /* v */)
    |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:563:26
    |
563 |         catalog_id: self.aws_properties.glue_catalog_id(),
    |                          ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:571:30
    |
571 |             catalog_id: self.aws_properties.glue_catalog_id(),
    |                              ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

Some errors have detailed explanations: E0061, E0277, E0308, E0422, E0609.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib) generated 1 warning
error: could not compile `iceberg-catalog-glue` (lib) due to 26 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...


Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/avro/schema.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0449]: visibility qualifiers are not permitted here
   --> crates/iceberg/src/avro/schema.rs:450:1
    |
450 | pub fn primitive(&mut self, schema: &AvroSchema) -> Result<Option<Type>> {
    | ^^^
    |
    = note: trait items always share the visibility of their trait

error[E0599]: no variant or associated item named `Time` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:474:25
    |
474 |             AvroSchema::Time => Ok(Some(Type::Primitive(PrimitiveType::Time))),
    |                         ^^^^ variant or associated item not found in `Schema`

error[E0599]: no variant or associated item named `Timestamp` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:475:25
    |
475 |             AvroSchema::Timestamp => Ok(Some(Type::Primitive(PrimitiveType::Timestamp))),
    |                         ^^^^^^^^^ variant or associated item not found in `Schema`

error[E0560]: struct `datatypes::ListType` has no field named `inner`
   --> crates/iceberg/src/avro/schema.rs:462:47
    |
462 |                 Ok(Some(Type::List(ListType { inner: inner_type })))
    |                                               ^^^^^ `datatypes::ListType` does not have this field
    |
    = note: available fields are: `element_field`

error[E0560]: struct `datatypes::MapType` has no field named `inner`
   --> crates/iceberg/src/avro/schema.rs:466:45
    |
466 |                 Ok(Some(Type::Map(MapType { inner: inner_type })))
    |                                             ^^^^^ `datatypes::MapType` does not have this field
    |
    = note: available fields are: `key_field`, `value_field`

error[E0609]: no field `byte_width` on type `&FixedSchema`
   --> crates/iceberg/src/avro/schema.rs:477:40
    |
477 |                 let byte_width = fixed.byte_width as u64;
    |                                        ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `name`, `aliases`, `doc`, `size`, `attributes`

error[E0560]: struct `datatypes::NestedField` has no field named `type_`
   --> crates/iceberg/src/avro/schema.rs:487:25
    |
487 |                         type_: self.primitive(field.type_)?,
    |                         ^^^^^ `datatypes::NestedField` does not have this field
    |
    = note: available fields are: `id`, `required`, `field_type`, `doc`, `initial_default`, `write_default`

error[E0609]: no field `type_` on type `&RecordField`
   --> crates/iceberg/src/avro/schema.rs:487:53
    |
487 |                         type_: self.primitive(field.type_)?,
    |                                                     ^^^^^ unknown field
    |
    = note: available fields are: `name`, `doc`, `aliases`, `default`, `schema` ... and 3 others

error[E0277]: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `FromResidual`)
   --> crates/iceberg/src/avro/schema.rs:487:59
    |
485 |                    .map(|field| NestedField {
    |                         ------- this function should return `Result` or `Option` to accept `?`
486 |                         name: field.name.clone(),
487 |                         type_: self.primitive(field.type_)?,
    |                                                           ^ cannot use the `?` operator in a closure that returns `datatypes::NestedField`
    |
    = help: the trait `FromResidual<std::result::Result<Infallible, error::Error>>` is not implemented for `datatypes::NestedField`

error: cannot construct `datatypes::StructType` with struct literal syntax due to private fields
   --> crates/iceberg/src/avro/schema.rs:490:38
    |
490 |                 Ok(Some(Type::Struct(StructType { fields })))
    |                                      ^^^^^^^^^^   ------ private field
    |
    = note: ...and other private fields `id_lookup` and `name_lookup` that were not provided
help: you might have meant to use the `new` associated function
    |
490 |                 Ok(Some(Type::Struct(StructType::new(_))))
    |                                                ~~~~~~~~
help: consider using the `Default` trait
    |
490 |                 Ok(Some(Type::Struct(<StructType as std::default::Default>::default())))
    |                                      +           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: a value of type `Vec<Arc<datatypes::NestedField>>` cannot be built from an iterator over elements of type `datatypes::NestedField`
   --> crates/iceberg/src/avro/schema.rs:489:21
    |
489 |                    .collect();
    |                     ^^^^^^^ value of type `Vec<Arc<datatypes::NestedField>>` cannot be built from `std::iter::Iterator<Item=datatypes::NestedField>`
    |
    = help: the trait `FromIterator<datatypes::NestedField>` is not implemented for `Vec<Arc<datatypes::NestedField>>`
    = help: the trait `FromIterator<Arc<datatypes::NestedField>>` is implemented for `Vec<Arc<datatypes::NestedField>>`
    = help: for that trait implementation, expected `Arc<datatypes::NestedField>`, found `datatypes::NestedField`
note: the method call chain might not have had the expected associated types
   --> crates/iceberg/src/avro/schema.rs:485:21
    |
482 |                   let fields = record
    |  ______________________________-
483 | |                    .fields
    | |__________________________- this expression has type `Vec<RecordField>`
484 |                      .iter()
    |                       ------ `Iterator::Item` is `&RecordField` here
485 |                      .map(|field| NestedField {
    |  _____________________^
486 | |                         name: field.name.clone(),
487 | |                         type_: self.primitive(field.type_)?,
488 | |                     })
    | |______________________^ `Iterator::Item` changed to `NestedField` here
note: required by a bound in `std::iter::Iterator::collect`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/iter/traits/iterator.rs:2050:5

Some errors have detailed explanations: E0277, E0449, E0560, E0599, E0609.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `iceberg` (lib) due to 11 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 11 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0449]: visibility qualifiers are not permitted here
   --> crates/iceberg/src/avro/schema.rs:450:1
    |
450 | pub fn primitive(&mut self, schema: &AvroSchema) -> Result<Option<Type>> {
    | ^^^
    |
    = note: trait items always share the visibility of their trait

error[E0599]: no variant or associated item named `Time` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:474:25
    |
474 |             AvroSchema::Time => Ok(Some(Type::Primitive(PrimitiveType::Time))),
    |                         ^^^^ variant or associated item not found in `Schema`

error[E0599]: no variant or associated item named `Timestamp` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:475:25
    |
475 |             AvroSchema::Timestamp => Ok(Some(Type::Primitive(PrimitiveType::Timestamp))),
    |                         ^^^^^^^^^ variant or associated item not found in `Schema`

error[E0560]: struct `datatypes::ListType` has no field named `inner`
   --> crates/iceberg/src/avro/schema.rs:462:47
    |
462 |                 Ok(Some(Type::List(ListType { inner: inner_type })))
    |                                               ^^^^^ `datatypes::ListType` does not have this field
    |
    = note: available fields are: `element_field`

error[E0560]: struct `datatypes::MapType` has no field named `inner`
   --> crates/iceberg/src/avro/schema.rs:466:45
    |
466 |                 Ok(Some(Type::Map(MapType { inner: inner_type })))
    |                                             ^^^^^ `datatypes::MapType` does not have this field
    |
    = note: available fields are: `key_field`, `value_field`

error[E0609]: no field `byte_width` on type `&FixedSchema`
   --> crates/iceberg/src/avro/schema.rs:477:40
    |
477 |                 let byte_width = fixed.byte_width as u64;
    |                                        ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `name`, `aliases`, `doc`, `size`, `attributes`

error[E0560]: struct `datatypes::NestedField` has no field named `type_`
   --> crates/iceberg/src/avro/schema.rs:487:25
    |
487 |                         type_: self.primitive(field.type_)?,
    |                         ^^^^^ `datatypes::NestedField` does not have this field
    |
    = note: available fields are: `id`, `required`, `field_type`, `doc`, `initial_default`, `write_default`

error[E0609]: no field `type_` on type `&RecordField`
   --> crates/iceberg/src/avro/schema.rs:487:53
    |
487 |                         type_: self.primitive(field.type_)?,
    |                                                     ^^^^^ unknown field
    |
    = note: available fields are: `name`, `doc`, `aliases`, `default`, `schema` ... and 3 others

error[E0277]: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `FromResidual`)
   --> crates/iceberg/src/avro/schema.rs:487:59
    |
485 |                    .map(|field| NestedField {
    |                         ------- this function should return `Result` or `Option` to accept `?`
486 |                         name: field.name.clone(),
487 |                         type_: self.primitive(field.type_)?,
    |                                                           ^ cannot use the `?` operator in a closure that returns `datatypes::NestedField`
    |
    = help: the trait `FromResidual<std::result::Result<Infallible, error::Error>>` is not implemented for `datatypes::NestedField`

error: cannot construct `datatypes::StructType` with struct literal syntax due to private fields
   --> crates/iceberg/src/avro/schema.rs:490:38
    |
490 |                 Ok(Some(Type::Struct(StructType { fields })))
    |                                      ^^^^^^^^^^   ------ private field
    |
    = note: ...and other private fields `id_lookup` and `name_lookup` that were not provided
help: you might have meant to use the `new` associated function
    |
490 |                 Ok(Some(Type::Struct(StructType::new(_))))
    |                                                ~~~~~~~~
help: consider using the `Default` trait
    |
490 |                 Ok(Some(Type::Struct(<StructType as std::default::Default>::default())))
    |                                      +           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: a value of type `Vec<Arc<datatypes::NestedField>>` cannot be built from an iterator over elements of type `datatypes::NestedField`
   --> crates/iceberg/src/avro/schema.rs:489:21
    |
489 |                    .collect();
    |                     ^^^^^^^ value of type `Vec<Arc<datatypes::NestedField>>` cannot be built from `std::iter::Iterator<Item=datatypes::NestedField>`
    |
    = help: the trait `FromIterator<datatypes::NestedField>` is not implemented for `Vec<Arc<datatypes::NestedField>>`
    = help: the trait `FromIterator<Arc<datatypes::NestedField>>` is implemented for `Vec<Arc<datatypes::NestedField>>`
    = help: for that trait implementation, expected `Arc<datatypes::NestedField>`, found `datatypes::NestedField`
note: the method call chain might not have had the expected associated types
   --> crates/iceberg/src/avro/schema.rs:485:21
    |
482 |                   let fields = record
    |  ______________________________-
483 | |                    .fields
    | |__________________________- this expression has type `Vec<RecordField>`
484 |                      .iter()
    |                       ------ `Iterator::Item` is `&RecordField` here
485 |                      .map(|field| NestedField {
    |  _____________________^
486 | |                         name: field.name.clone(),
487 | |                         type_: self.primitive(field.type_)?,
488 | |                     })
    | |______________________^ `Iterator::Item` changed to `NestedField` here
note: required by a bound in `std::iter::Iterator::collect`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/iter/traits/iterator.rs:2050:5

Some errors have detailed explanations: E0277, E0449, E0560, E0599, E0609.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `iceberg` (lib) due to 11 previous errors


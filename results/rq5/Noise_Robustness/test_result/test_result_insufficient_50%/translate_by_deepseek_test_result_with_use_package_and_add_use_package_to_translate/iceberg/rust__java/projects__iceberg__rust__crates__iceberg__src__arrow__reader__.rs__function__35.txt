Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0425]: cannot find value `always_false` in this scope
   --> crates/iceberg/src/arrow/reader.rs:547:21
    |
547 |         Ok(Box::new(always_false))
    |                     ^^^^^^^^^^^^
    |
help: you might have meant to refer to the method
    |
547 |         Ok(Box::new(self.always_false))
    |                     +++++

warning: unused import: `and`
  --> crates/iceberg/src/arrow/reader.rs:21:28
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                            ^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:546:20
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) || is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |        ----------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |        |
    |        arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:345:8
    |
345 | pub fn is_not_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:33
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) || is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-2195779209499339259.txt'

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:546:38
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) || is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |                                      ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:546:81
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) || is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |                                                                     ----------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |                                                                     |
    |                                                                     arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:345:8
    |
345 | pub fn is_not_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:94
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) || is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |                                                                                              ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-14012429888835404990.txt'

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:546:99
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) || is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |                                                                                                   ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:548:27
    |
548 |     } else if is_not_null(lhs.as_mut())? == BooleanArray::from([true]) {
    |               ----------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |               |
    |               arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:345:8
    |
345 | pub fn is_not_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:548:40
    |
548 |     } else if is_not_null(lhs.as_mut())? == BooleanArray::from([true]) {
    |                                        ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-8978183040482681442.txt'

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:548:45
    |
548 |     } else if is_not_null(lhs.as_mut())? == BooleanArray::from([true]) {
    |                                             ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:550:27
    |
550 |     } else if is_not_null(rhs.as_mut())? == BooleanArray::from([true]) {
    |               ----------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |               |
    |               arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:345:8
    |
345 | pub fn is_not_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:550:40
    |
550 |     } else if is_not_null(rhs.as_mut())? == BooleanArray::from([true]) {
    |                                        ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-15473255484961275798.txt'

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:550:45
    |
550 |     } else if is_not_null(rhs.as_mut())? == BooleanArray::from([true]) {
    |                                             ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:556:27
    |
556 |             if lhs_result.as_any().is_true() && rhs_result.as_any().is_true() {
    |                           ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:556:60
    |
556 |             if lhs_result.as_any().is_true() && rhs_result.as_any().is_true() {
    |                                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:557:20
    |
557 |                 Ok(BooleanArray::from([true]))
    |                    ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:559:20
    |
559 |                 Ok(BooleanArray::from([false]))
    |                    ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

Some errors have detailed explanations: E0277, E0308, E0425, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 17 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:33
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) || is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-5100906239018668490.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:94
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) || is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |                                                                                              ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-8001663929915600162.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:548:40
    |
548 |     } else if is_not_null(lhs.as_mut())? == BooleanArray::from([true]) {
    |                                        ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-1794113631008354196.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:550:40
    |
550 |     } else if is_not_null(rhs.as_mut())? == BooleanArray::from([true]) {
    |                                        ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-6410331487094949562.txt'

warning: `iceberg` (lib test) generated 1 warning (1 duplicate)
error: could not compile `iceberg` (lib test) due to 17 previous errors; 1 warning emitted

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0425]: cannot find value `always_false` in this scope
   --> crates/iceberg/src/arrow/reader.rs:547:21
    |
547 |         Ok(Box::new(always_false))
    |                     ^^^^^^^^^^^^
    |
help: you might have meant to refer to the method
    |
547 |         Ok(Box::new(self.always_false))
    |                     +++++

warning: unused import: `and`
  --> crates/iceberg/src/arrow/reader.rs:21:28
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                            ^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:546:20
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) || is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |        ----------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |        |
    |        arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:345:8
    |
345 | pub fn is_not_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:33
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) || is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-1085557352979364415.txt'

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:546:38
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) || is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |                                      ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:546:81
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) || is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |                                                                     ----------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |                                                                     |
    |                                                                     arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:345:8
    |
345 | pub fn is_not_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:94
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) || is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |                                                                                              ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-4705757701543468780.txt'

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:546:99
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) || is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |                                                                                                   ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:548:27
    |
548 |     } else if is_not_null(lhs.as_mut())? == BooleanArray::from([true]) {
    |               ----------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |               |
    |               arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:345:8
    |
345 | pub fn is_not_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:548:40
    |
548 |     } else if is_not_null(lhs.as_mut())? == BooleanArray::from([true]) {
    |                                        ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-2068246233810766056.txt'

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:548:45
    |
548 |     } else if is_not_null(lhs.as_mut())? == BooleanArray::from([true]) {
    |                                             ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:550:27
    |
550 |     } else if is_not_null(rhs.as_mut())? == BooleanArray::from([true]) {
    |               ----------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |               |
    |               arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:345:8
    |
345 | pub fn is_not_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:550:40
    |
550 |     } else if is_not_null(rhs.as_mut())? == BooleanArray::from([true]) {
    |                                        ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-13272654066577834814.txt'

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:550:45
    |
550 |     } else if is_not_null(rhs.as_mut())? == BooleanArray::from([true]) {
    |                                             ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:556:27
    |
556 |             if lhs_result.as_any().is_true() && rhs_result.as_any().is_true() {
    |                           ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:556:60
    |
556 |             if lhs_result.as_any().is_true() && rhs_result.as_any().is_true() {
    |                                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:557:20
    |
557 |                 Ok(BooleanArray::from([true]))
    |                    ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:559:20
    |
559 |                 Ok(BooleanArray::from([false]))
    |                    ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

Some errors have detailed explanations: E0277, E0308, E0425, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 17 previous errors; 1 warning emitted


Fail
file path is :
projects/iceberg/rust/crates/catalog/glue/src/catalog.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
   Compiling iceberg-catalog-hms v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/hms)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
warning: unused import: `from_aws_build_error`
  --> crates/catalog/glue/src/catalog.rs:31:20
   |
31 | use crate::error::{from_aws_build_error, from_aws_sdk_error};
   |                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:524:30
    |
524 |     let from_table_db_name = convert_to_database(&src);
    |                              ^^^^^^^^^^^^^^^^^^^------
    |                                                 ||
    |                                                 |expected `&NamespaceIdent`, found `&&TableIdent`
    |                                                 an argument of type `&std::collections::HashMap<std::string::String, std::string::String>` is missing
    |
    = note: expected reference `&iceberg::NamespaceIdent`
               found reference `&&'life1 TableIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
524 |     let from_table_db_name = convert_to_database(/* &iceberg::NamespaceIdent */, /* &std::collections::HashMap<std::string::String, std::string::String> */);
    |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `table_name` on type `&'life1 TableIdent`
   --> crates/catalog/glue/src/catalog.rs:525:31
    |
525 |     let from_table_name = src.table_name.clone();
    |                               ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `namespace`, `name`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:526:28
    |
526 |     let to_table_db_name = convert_to_database(&dest);
    |                            ^^^^^^^^^^^^^^^^^^^-------
    |                                               ||
    |                                               |expected `&NamespaceIdent`, found `&&TableIdent`
    |                                               an argument of type `&std::collections::HashMap<std::string::String, std::string::String>` is missing
    |
    = note: expected reference `&iceberg::NamespaceIdent`
               found reference `&&'life2 TableIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
526 |     let to_table_db_name = convert_to_database(/* &iceberg::NamespaceIdent */, /* &std::collections::HashMap<std::string::String, std::string::String> */);
    |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `table_name` on type `&'life2 TableIdent`
   --> crates/catalog/glue/src/catalog.rs:527:30
    |
527 |     let to_table_name = dest.table_name.clone();
    |                              ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `namespace`, `name`

error[E0061]: this function takes 2 arguments but 0 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:530:49
    |
530 |     let glue_client = aws_sdk_glue::Client::new(create_sdk_config());
    |                                                 ^^^^^^^^^^^^^^^^^-- two arguments of type `&std::collections::HashMap<std::string::String, std::string::String>` and `std::option::Option<&std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:58:21
    |
58  | pub(crate) async fn create_sdk_config(
    |                     ^^^^^^^^^^^^^^^^^
59  |     properties: &HashMap<String, String>,
    |     ------------------------------------
60  |     endpoint_uri: Option<&String>,
    |     -----------------------------
help: provide the arguments
    |
530 |     let glue_client = aws_sdk_glue::Client::new(create_sdk_config(/* &std::collections::HashMap<std::string::String, std::string::String> */, /* std::option::Option<&std::string::String> */));
    |                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:530:49
    |
530 |     let glue_client = aws_sdk_glue::Client::new(create_sdk_config());
    |                       ------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&SdkConfig`, found future
    |                       |
    |                       arguments to this function are incorrect
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/client.rs:134:12
    |
134 |     pub fn new(sdk_config: &::aws_types::sdk_config::SdkConfig) -> Self {
    |            ^^^

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:533:26
    |
533 |         .catalog_id(self.aws_properties.glue_catalog_id.clone())
    |                          ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0599]: the method `clone` exists for enum `Result<DatabaseInput, Error>`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:534:43
    |
534 |         .database_name(from_table_db_name.clone())
    |                                           ^^^^^ method cannot be called on `Result<DatabaseInput, Error>` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ---------------- doesn't satisfy `iceberg::Error: Clone`
    |
    = note: the following trait bounds were not satisfied:
            `iceberg::Error: Clone`
            which is required by `std::result::Result<DatabaseInput, iceberg::Error>: Clone`
note: the method `clone` exists on the type `DatabaseInput`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/clone.rs:160:5
help: use the `?` operator to extract the `DatabaseInput` value, propagating a `Result::Err` value to the caller
    |
534 |         .database_name(from_table_db_name?.clone())
    |                                          +

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:543:21
    |
543 |                     src, dest, dest.namespace
    |                     ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:543:26
    |
543 |                     src, dest, dest.namespace
    |                          ^^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `iceberg::NamespaceIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:543:32
    |
543 |                     src, dest, dest.namespace
    |                                ^^^^^^^^^^^^^^ `iceberg::NamespaceIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `iceberg::NamespaceIdent`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:551:82
    |
551 |             format!("Cannot rename {} because the table does not exist in Glue", src),
    |                                                                                  ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `&std::collections::HashMap<std::string::String, std::string::String>: Default` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:559:45
    |
559 |         .parameters(from_table.parameters().unwrap_or_default())
    |                                             ^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `&std::collections::HashMap<std::string::String, std::string::String>`
    |
    = help: the trait `Default` is implemented for `std::collections::HashMap<K, V, S>`
note: required by a bound in `std::option::Option::<T>::unwrap_or_default`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/option.rs:1001:5

error[E0277]: the trait bound `std::string::String: From<&std::collections::HashMap<std::string::String, std::string::String>>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:559:21
    |
559 |         .parameters(from_table.parameters().unwrap_or_default())
    |          ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<&std::collections::HashMap<std::string::String, std::string::String>>` is not implemented for `std::string::String`, which is required by `&std::collections::HashMap<std::string::String, std::string::String>: Into<std::string::String>`
    |          |
    |          required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&std::collections::HashMap<std::string::String, std::string::String>` to implement `Into<std::string::String>`
note: required by a bound in `TableInputBuilder::parameters`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:41
    |
375 | ...t self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `TableInputBuilder::parameters`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:559:10
    |
559 |         .parameters(from_table.parameters().unwrap_or_default())
    |          ^^^^^^^^^^--------------------------------------------- an argument is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:12
    |
375 |     pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>)...
    |            ^^^^^^^^^^
help: provide the argument
    |
559 |         .parameters(from_table.parameters().unwrap_or_default(), /* v */)
    |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the trait bound `&aws_sdk_glue::types::StorageDescriptor: Default` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:560:61
    |
560 |         .storage_descriptor(from_table.storage_descriptor().unwrap_or_default());
    |                                                             ^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `&aws_sdk_glue::types::StorageDescriptor`
    |
note: required by a bound in `std::option::Option::<T>::unwrap_or_default`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/option.rs:1001:5

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:560:29
    |
560 |         .storage_descriptor(from_table.storage_descriptor().unwrap_or_default());
    |          ------------------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `StorageDescriptor`, found `&StorageDescriptor`
    |          |
    |          arguments to this method are incorrect
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:244:12
    |
244 |     pub fn storage_descriptor(mut self, input: crate::types::StorageDescriptor) -> Self {
    |            ^^^^^^^^^^^^^^^^^^
help: consider using clone here
    |
560 |         .storage_descriptor(from_table.storage_descriptor().unwrap_or_default().clone());
    |                                                                                ++++++++

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:564:26
    |
564 |         .catalog_id(self.aws_properties.glue_catalog_id.clone())
    |                          ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0599]: the method `clone` exists for enum `Result<DatabaseInput, Error>`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:565:41
    |
565 |         .database_name(to_table_db_name.clone())
    |                                         ^^^^^ method cannot be called on `Result<DatabaseInput, Error>` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ---------------- doesn't satisfy `iceberg::Error: Clone`
    |
    = note: the following trait bounds were not satisfied:
            `iceberg::Error: Clone`
            which is required by `std::result::Result<DatabaseInput, iceberg::Error>: Clone`
note: the method `clone` exists on the type `DatabaseInput`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/clone.rs:160:5
help: use the `?` operator to extract the `DatabaseInput` value, propagating a `Result::Err` value to the caller
    |
565 |         .database_name(to_table_db_name?.clone())
    |                                        +

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:566:22
    |
566 |         .table_input(table_input_builder.name(to_table_name.clone()).build())
    |          ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `TableInput`, found `Result<TableInput, BuildError>`
    |          |
    |          arguments to this method are incorrect
    |
    = note: expected struct `TableInput`
                 found enum `std::result::Result<TableInput, aws_sdk_glue::error::BuildError>`
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/operation/create_table/builders.rs:140:12
    |
140 |     pub fn table_input(mut self, input: crate::types::TableInput) -> Self {
    |            ^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `std::result::Result<TableInput, aws_sdk_glue::error::BuildError>` value, panicking if the value is a `Result::Err`
    |
566 |         .table_input(table_input_builder.name(to_table_name.clone()).build().expect("REASON"))
    |                                                                             +++++++++++++++++

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:577:10
    |
577 |     self.drop_table(src, false).await?;
    |          ^^^^^^^^^^    -------
    |                        | |
    |                        | unexpected argument of type `bool`
    |                        help: remove the extra argument
    |
note: method defined here
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:84:14
    |
84  |     async fn drop_table(&self, table: &TableIdent) -> Result<()>;
    |              ^^^^^^^^^^

Some errors have detailed explanations: E0061, E0277, E0308, E0599, E0609.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib test) generated 1 warning
error: could not compile `iceberg-catalog-glue` (lib test) due to 21 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
warning: unused import: `from_aws_build_error`
  --> crates/catalog/glue/src/catalog.rs:31:20
   |
31 | use crate::error::{from_aws_build_error, from_aws_sdk_error};
   |                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:524:30
    |
524 |     let from_table_db_name = convert_to_database(&src);
    |                              ^^^^^^^^^^^^^^^^^^^------
    |                                                 ||
    |                                                 |expected `&NamespaceIdent`, found `&&TableIdent`
    |                                                 an argument of type `&HashMap<std::string::String, std::string::String>` is missing
    |
    = note: expected reference `&NamespaceIdent`
               found reference `&&'life1 TableIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
524 |     let from_table_db_name = convert_to_database(/* &NamespaceIdent */, /* &HashMap<std::string::String, std::string::String> */);
    |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `table_name` on type `&'life1 TableIdent`
   --> crates/catalog/glue/src/catalog.rs:525:31
    |
525 |     let from_table_name = src.table_name.clone();
    |                               ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `namespace`, `name`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:526:28
    |
526 |     let to_table_db_name = convert_to_database(&dest);
    |                            ^^^^^^^^^^^^^^^^^^^-------
    |                                               ||
    |                                               |expected `&NamespaceIdent`, found `&&TableIdent`
    |                                               an argument of type `&HashMap<std::string::String, std::string::String>` is missing
    |
    = note: expected reference `&NamespaceIdent`
               found reference `&&'life2 TableIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
526 |     let to_table_db_name = convert_to_database(/* &NamespaceIdent */, /* &HashMap<std::string::String, std::string::String> */);
    |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `table_name` on type `&'life2 TableIdent`
   --> crates/catalog/glue/src/catalog.rs:527:30
    |
527 |     let to_table_name = dest.table_name.clone();
    |                              ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `namespace`, `name`

error[E0061]: this function takes 2 arguments but 0 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:530:49
    |
530 |     let glue_client = aws_sdk_glue::Client::new(create_sdk_config());
    |                                                 ^^^^^^^^^^^^^^^^^-- two arguments of type `&HashMap<std::string::String, std::string::String>` and `std::option::Option<&std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:58:21
    |
58  | pub(crate) async fn create_sdk_config(
    |                     ^^^^^^^^^^^^^^^^^
59  |     properties: &HashMap<String, String>,
    |     ------------------------------------
60  |     endpoint_uri: Option<&String>,
    |     -----------------------------
help: provide the arguments
    |
530 |     let glue_client = aws_sdk_glue::Client::new(create_sdk_config(/* &HashMap<std::string::String, std::string::String> */, /* std::option::Option<&std::string::String> */));
    |                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:530:49
    |
530 |     let glue_client = aws_sdk_glue::Client::new(create_sdk_config());
    |                       ------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&SdkConfig`, found future
    |                       |
    |                       arguments to this function are incorrect
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/client.rs:134:12
    |
134 |     pub fn new(sdk_config: &::aws_types::sdk_config::SdkConfig) -> Self {
    |            ^^^

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:533:26
    |
533 |         .catalog_id(self.aws_properties.glue_catalog_id.clone())
    |                          ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0599]: the method `clone` exists for enum `Result<DatabaseInput, Error>`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:534:43
    |
534 |         .database_name(from_table_db_name.clone())
    |                                           ^^^^^ method cannot be called on `Result<DatabaseInput, Error>` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ---------------- doesn't satisfy `iceberg::Error: Clone`
    |
    = note: the following trait bounds were not satisfied:
            `iceberg::Error: Clone`
            which is required by `Result<DatabaseInput, iceberg::Error>: Clone`
note: the method `clone` exists on the type `DatabaseInput`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/clone.rs:160:5
help: use the `?` operator to extract the `DatabaseInput` value, propagating a `Result::Err` value to the caller
    |
534 |         .database_name(from_table_db_name?.clone())
    |                                          +

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:543:21
    |
543 |                     src, dest, dest.namespace
    |                     ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:543:26
    |
543 |                     src, dest, dest.namespace
    |                          ^^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `NamespaceIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:543:32
    |
543 |                     src, dest, dest.namespace
    |                                ^^^^^^^^^^^^^^ `NamespaceIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `NamespaceIdent`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:551:82
    |
551 |             format!("Cannot rename {} because the table does not exist in Glue", src),
    |                                                                                  ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `&HashMap<std::string::String, std::string::String>: Default` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:559:45
    |
559 |         .parameters(from_table.parameters().unwrap_or_default())
    |                                             ^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `&HashMap<std::string::String, std::string::String>`
    |
    = help: the trait `Default` is implemented for `HashMap<K, V, S>`
note: required by a bound in `std::option::Option::<T>::unwrap_or_default`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/option.rs:1001:5

error[E0277]: the trait bound `std::string::String: From<&HashMap<std::string::String, std::string::String>>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:559:21
    |
559 |         .parameters(from_table.parameters().unwrap_or_default())
    |          ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<&HashMap<std::string::String, std::string::String>>` is not implemented for `std::string::String`, which is required by `&HashMap<std::string::String, std::string::String>: Into<std::string::String>`
    |          |
    |          required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&HashMap<std::string::String, std::string::String>` to implement `Into<std::string::String>`
note: required by a bound in `TableInputBuilder::parameters`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:41
    |
375 | ...t self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `TableInputBuilder::parameters`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:559:10
    |
559 |         .parameters(from_table.parameters().unwrap_or_default())
    |          ^^^^^^^^^^--------------------------------------------- an argument is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:12
    |
375 |     pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>)...
    |            ^^^^^^^^^^
help: provide the argument
    |
559 |         .parameters(from_table.parameters().unwrap_or_default(), /* v */)
    |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the trait bound `&StorageDescriptor: Default` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:560:61
    |
560 |         .storage_descriptor(from_table.storage_descriptor().unwrap_or_default());
    |                                                             ^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `&StorageDescriptor`
    |
note: required by a bound in `std::option::Option::<T>::unwrap_or_default`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/option.rs:1001:5

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:560:29
    |
560 |         .storage_descriptor(from_table.storage_descriptor().unwrap_or_default());
    |          ------------------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `StorageDescriptor`, found `&StorageDescriptor`
    |          |
    |          arguments to this method are incorrect
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:244:12
    |
244 |     pub fn storage_descriptor(mut self, input: crate::types::StorageDescriptor) -> Self {
    |            ^^^^^^^^^^^^^^^^^^
help: consider using clone here
    |
560 |         .storage_descriptor(from_table.storage_descriptor().unwrap_or_default().clone());
    |                                                                                ++++++++

error[E0609]: no field `aws_properties` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:564:26
    |
564 |         .catalog_id(self.aws_properties.glue_catalog_id.clone())
    |                          ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0599]: the method `clone` exists for enum `Result<DatabaseInput, Error>`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:565:41
    |
565 |         .database_name(to_table_db_name.clone())
    |                                         ^^^^^ method cannot be called on `Result<DatabaseInput, Error>` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ---------------- doesn't satisfy `iceberg::Error: Clone`
    |
    = note: the following trait bounds were not satisfied:
            `iceberg::Error: Clone`
            which is required by `Result<DatabaseInput, iceberg::Error>: Clone`
note: the method `clone` exists on the type `DatabaseInput`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/clone.rs:160:5
help: use the `?` operator to extract the `DatabaseInput` value, propagating a `Result::Err` value to the caller
    |
565 |         .database_name(to_table_db_name?.clone())
    |                                        +

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:566:22
    |
566 |         .table_input(table_input_builder.name(to_table_name.clone()).build())
    |          ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `TableInput`, found `Result<TableInput, BuildError>`
    |          |
    |          arguments to this method are incorrect
    |
    = note: expected struct `TableInput`
                 found enum `Result<TableInput, aws_sdk_glue::error::BuildError>`
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/operation/create_table/builders.rs:140:12
    |
140 |     pub fn table_input(mut self, input: crate::types::TableInput) -> Self {
    |            ^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `Result<TableInput, aws_sdk_glue::error::BuildError>` value, panicking if the value is a `Result::Err`
    |
566 |         .table_input(table_input_builder.name(to_table_name.clone()).build().expect("REASON"))
    |                                                                             +++++++++++++++++

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:577:10
    |
577 |     self.drop_table(src, false).await?;
    |          ^^^^^^^^^^    -------
    |                        | |
    |                        | unexpected argument of type `bool`
    |                        help: remove the extra argument
    |
note: method defined here
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:84:14
    |
84  |     async fn drop_table(&self, table: &TableIdent) -> Result<()>;
    |              ^^^^^^^^^^

Some errors have detailed explanations: E0061, E0277, E0308, E0599, E0609.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib) generated 1 warning
error: could not compile `iceberg-catalog-glue` (lib) due to 21 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...


Fail
file path is :
projects/incubator-milagro-crypto/rust/src/ecdh.rs

output is:


error is :
   Compiling amcl v0.3.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/incubator-milagro-crypto/rust)
error[E0428]: the name `key_pair_generate` is defined multiple times
   --> src/./ecdh.rs:662:1
    |
397 | pub fn key_pair_generate(rng: Option<&mut RAND>, s: &mut [u8], w: &mut [u8]) -> isize {
    | ------------------------------------------------------------------------------------- previous definition of the value `key_pair_generate` here
...
662 | fn key_pair_generate(rng: &mut RAND, u: &mut [u8], v: &mut [u8]) -> i32 {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `key_pair_generate` redefined here
    |
    = note: `key_pair_generate` must be defined only once in the value namespace of this module

error[E0428]: the name `kdf2` is defined multiple times
   --> src/./ecdh.rs:670:1
    |
153 | pub fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize, k: &mut [u8]) {
    | ------------------------------------------------------------------------------ previous definition of the value `kdf2` here
...
670 | fn kdf2(sha: usize, vz: &[u8], p1: &[u8], key_len: usize) -> Vec<u8> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `kdf2` redefined here
    |
    = note: `kdf2` must be defined only once in the value namespace of this module

error[E0428]: the name `hmac` is defined multiple times
   --> src/./ecdh.rs:674:1
    |
227 | pub fn hmac(sha: usize, m: &[u8], k: &[u8], olen: usize, tag: &mut [u8]) -> bool {
    | -------------------------------------------------------------------------------- previous definition of the value `hmac` here
...
674 | fn hmac(sha: usize, ac: &[u8], k2: &[u8], t: &mut [u8]) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `hmac` redefined here
    |
    = note: `hmac` must be defined only once in the value namespace of this module

error[E0428]: the name `cbc_iv0_encrypt` is defined multiple times
   --> src/./ecdh.rs:677:1
    |
272 | pub fn cbc_iv0_encrypt(k: &[u8], m: &[u8]) -> Vec<u8> {
    | ----------------------------------------------------- previous definition of the value `cbc_iv0_encrypt` here
...
677 | fn cbc_iv0_encrypt(k: &[u8], m: &[u8]) -> Vec<u8> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `cbc_iv0_encrypt` redefined here
    |
    = note: `cbc_iv0_encrypt` must be defined only once in the value namespace of this module

error[E0425]: cannot find value `AESKEY` in this scope
   --> src/./ecdh.rs:612:18
    |
612 |     let aeskey = AESKEY;
    |                  ^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
20  + use crate::anssi::ecp::AESKEY;
    |
20  + use crate::bls24::ecp::AESKEY;
    |
20  + use crate::bls381::ecp::AESKEY;
    |
20  + use crate::bls383::ecp::AESKEY;
    |
      and 22 other candidates

error[E0308]: mismatched types
   --> src/./ecdh.rs:621:26
    |
621 |     if key_pair_generate(rng, &mut u, v) != 0 {
    |        ----------------- ^^^ expected `Option<&mut RAND>`, found `&mut RAND`
    |        |
    |        arguments to this function are incorrect
    |
    = note:           expected enum `Option<&mut RAND>`
            found mutable reference `&mut RAND`
note: function defined here
   --> src/./ecdh.rs:397:8
    |
397 | pub fn key_pair_generate(rng: Option<&mut RAND>, s: &mut [u8], w: &mut [u8]) -> isize {
    |        ^^^^^^^^^^^^^^^^^ ----------------------
help: try wrapping the expression in `Some`
    |
621 |     if key_pair_generate(Some(rng), &mut u, v) != 0 {
    |                          +++++   +

error[E0061]: this function takes 5 arguments but 4 arguments were supplied
   --> src/./ecdh.rs:635:13
    |
635 |     let k = kdf2(sha, &vz, p1, 2 * aeskey);
    |             ^^^^-------------------------- an argument of type `&mut [u8]` is missing
    |
note: expected `Option<&[u8]>`, found `&[u8]`
   --> src/./ecdh.rs:635:28
    |
635 |     let k = kdf2(sha, &vz, p1, 2 * aeskey);
    |                            ^^
    = note:   expected enum `Option<&[u8]>`
            found reference `&[u8]`
note: function defined here
   --> src/./ecdh.rs:153:8
    |
153 | pub fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize, k: &mut [u8]) {
    |        ^^^^ ----------  --------  ----------------  -----------  ------------
help: try wrapping the expression in `Some`
    |
635 |     let k = kdf2(sha, &vz, Some(p1), 2 * aeskey);
    |                            +++++  +
help: provide the argument
    |
635 |     let k = kdf2(sha, &vz, /* Option<&[u8]> */, 2 * aeskey, /* &mut [u8] */);
    |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0608]: cannot index into a value of type `()`
   --> src/./ecdh.rs:638:17
    |
638 |         k1[i] = k[i];
    |                 ^^-^
    |                   |
    |                   cannot access tuple elements at a variable index
    |
    = help: to access tuple elements, use tuple indexing syntax (e.g., `tuple.0`)

error[E0061]: this function takes 5 arguments but 4 arguments were supplied
   --> src/./ecdh.rs:658:5
    |
658 |     hmac(sha, &ac, &k2, t);
    |     ^^^^                - an argument of type `usize` is missing
    |
note: function defined here
   --> src/./ecdh.rs:227:8
    |
227 | pub fn hmac(sha: usize, m: &[u8], k: &[u8], olen: usize, tag: &mut [u8]) -> bool {
    |        ^^^^ ----------  --------  --------  -----------  --------------
help: provide the argument
    |
658 |     hmac(sha, &ac, &k2, /* usize */, t);
    |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> src/./ecdh.rs:621:26
    |
621 |     if key_pair_generate(rng, &mut u, v) != 0 {
    |        ----------------- ^^^ expected `Option<&mut RAND>`, found `&mut RAND`
    |        |
    |        arguments to this function are incorrect
    |
    = note:           expected enum `std::option::Option<&mut rand::RAND>`
            found mutable reference `&mut rand::RAND`
note: function defined here
   --> src/./ecdh.rs:397:8
    |
397 | pub fn key_pair_generate(rng: Option<&mut RAND>, s: &mut [u8], w: &mut [u8]) -> isize {
    |        ^^^^^^^^^^^^^^^^^ ----------------------
help: try wrapping the expression in `Some`
    |
621 |     if key_pair_generate(Some(rng), &mut u, v) != 0 {
    |                          +++++   +

error[E0061]: this function takes 5 arguments but 4 arguments were supplied
   --> src/./ecdh.rs:635:13
    |
635 |     let k = kdf2(sha, &vz, p1, 2 * aeskey);
    |             ^^^^-------------------------- an argument of type `&mut [u8]` is missing
    |
note: expected `Option<&[u8]>`, found `&[u8]`
   --> src/./ecdh.rs:635:28
    |
635 |     let k = kdf2(sha, &vz, p1, 2 * aeskey);
    |                            ^^
    = note:   expected enum `std::option::Option<&[u8]>`
            found reference `&[u8]`
note: function defined here
   --> src/./ecdh.rs:153:8
    |
153 | pub fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize, k: &mut [u8]) {
    |        ^^^^ ----------  --------  ----------------  -----------  ------------
help: try wrapping the expression in `Some`
    |
635 |     let k = kdf2(sha, &vz, Some(p1), 2 * aeskey);
    |                            +++++  +
help: provide the argument
    |
635 |     let k = kdf2(sha, &vz, /* std::option::Option<&[u8]> */, 2 * aeskey, /* &mut [u8] */);
    |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0061, E0308, E0425, E0428, E0608.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `amcl` (lib) due to 9 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `amcl` (lib test) due to 9 previous errors


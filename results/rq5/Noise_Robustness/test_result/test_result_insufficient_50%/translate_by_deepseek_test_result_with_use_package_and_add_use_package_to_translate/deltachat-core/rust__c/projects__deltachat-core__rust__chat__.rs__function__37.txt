Fail
file path is :
projects/deltachat-core/rust/src/chat.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `Result` is defined multiple times
  --> src/chat.rs:15:50
   |
4  | use rusqlite::{params, Result};
   |                        ------ previous import of the type `Result` here
...
15 | use anyhow::{anyhow, bail, ensure, Context as _, Result};
   |                                                  ^^^^^^ `Result` reimported here
   |
   = note: `Result` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
15 | use anyhow::{anyhow, bail, ensure, Context as _, Result as OtherResult};
   |                                                  ~~~~~~~~~~~~~~~~~~~~~

error[E0425]: cannot find value `DC_STATE_IN_FRESH` in this scope
    --> src/chat.rs:1000:13
     |
1000 |             DC_STATE_IN_FRESH
     |             ^^^^^^^^^^^^^^^^^ not found in this scope

warning: unused import: `params`
 --> src/chat.rs:4:16
  |
4 | use rusqlite::{params, Result};
  |                ^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `std::sync::Arc`
 --> src/chat.rs:5:5
  |
5 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `Result`
  --> src/chat.rs:15:50
   |
15 | use anyhow::{anyhow, bail, ensure, Context as _, Result};
   |                                                  ^^^^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:293:73
    |
293 |                 if Contact::real_exists_by_id(context, contact_id).await?
    |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:300:96
    |
300 |                     ContactId::scaleup_origin(context, &[contact_id], Origin::CreateChat).await?;
    |                                                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/chat.rs:307:21
    |
307 |                     bail!("Can not create chat for non-existing contact");
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2790:44
     |
2790 |             msg.update_param(context).await?;
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2798:40
     |
2798 |         msg.update_param(context).await?;
     |                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2322:86
     |
2322 |         let blob = BlobObject::create(context, "icon-saved-messages.png", icon).await?;
     |                                                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2337:78
     |
2337 |         let blob = BlobObject::create(context, "icon-device.png", icon).await?;
     |                                                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2344:79
     |
2344 |         let mut contact = Contact::get_by_id(context, ContactId::DEVICE).await?;
     |                                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2346:44
     |
2346 |         contact.update_param(context).await?;
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4283:5
     |
4283 | /     ensure!(
4284 | |         label.is_some() || msg.is_some(),
4285 | |         "device-messages need label, msg or both"
4286 | |     );
     | |_____^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4314:19
     |
4314 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4351:19
     |
4351 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4354:50
     |
4354 |         msg_id = MsgId::new(u32::try_from(row_id)?);
     |                                                  ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4364:19
     |
4364 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2420:63
     |
2420 |     let Some(bobstate) = BobState::from_db(&context.sql).await? else {
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:2461:9
     |
2461 |         ensure!(context.sql.is_open().await, "Database not available");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:2462:9
     |
2462 | /         ensure!(
2463 | |             contact_id != ContactId::UNDEFINED,
2464 | |             "Invalid contact id requested"
2465 | |         );
     | |_________^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `rusqlite::Error: From<anyhow::Error>` is not satisfied
    --> src/chat.rs:2467:9
     |
2467 | /         context
2468 | |             .sql
2469 | |             .query_row_optional(
2470 | |                 "SELECT c.id, c.blocked
...    |
2484 | |             .await
2485 | |             .map_err(Into::into)
     | |________________________________^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `anyhow::Error: Into<_>`
     |
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `anyhow::Error` to implement `Into<rusqlite::Error>`

error[E0277]: the trait bound `rusqlite::Error: From<anyhow::Error>` is not satisfied
    --> src/chat.rs:2485:22
     |
2485 |             .map_err(Into::into)
     |                      ^^^^^^^^^^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `anyhow::Error: Into<_>`
     |
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `anyhow::Error` to implement `Into<rusqlite::Error>`

error[E0308]: mismatched types
    --> src/chat.rs:2497:9
     |
2497 |         ensure!(context.sql.is_open().await, "Database not available");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:2498:9
     |
2498 | /         ensure!(
2499 | |             contact_id != ContactId::UNDEFINED,
2500 | |             "Invalid contact id requested"
2501 | |         );
     | |_________^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2508:68
     |
2508 |         let contact = Contact::get_by_id(context, contact_id).await?;
     |                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatIdBlocked, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatIdBlocked, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2521:80
     |
2521 |         let peerstate = Peerstate::from_addr(context, contact.get_addr()).await?;
     |                                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatIdBlocked, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatIdBlocked, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2563:19
     |
2563 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatIdBlocked, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatIdBlocked, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:344:20
    |
344 |             ).await?;
    |                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:346:56
    |
346 |         let chat_id = ChatId::new(u32::try_from(row_id)?);
    |                                                        ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:375:19
    |
375 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/chat.rs:384:13
    |
384 |             bail!("ignoring setting of Block-status for {}", self);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |             |
    |             expected `rusqlite::Error`, found `anyhow::Error`
    |             arguments to this enum variant are incorrect
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
   --> src/chat.rs:384:13
    |
384 |             bail!("ignoring setting of Block-status for {}", self);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this argument influences the type of `$crate`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
    |
511 |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
    |     ^^^
    = note: this error originates in the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:392:19
    |
392 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/chat.rs:407:17
    |
407 |                 bail!("Can't block chat of type {:?}", chat.typ)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                 |
    |                 expected `rusqlite::Error`, found `anyhow::Error`
    |                 arguments to this enum variant are incorrect
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
   --> src/chat.rs:407:17
    |
407 |                 bail!("Can't block chat of type {:?}", chat.typ)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this argument influences the type of `$crate`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
    |
511 |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
    |     ^^^
    = note: this error originates in the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:416:86
    |
416 |                         contact::set_blocked(context, Nosync, contact_id, true).await?;
    |                                                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1526:77
     |
1526 |             .context(format!("Failed loading chat {chat_id} from database"))?;
     |                                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Chat, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Chat, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2167:80
     |
2167 |                     let contact = Contact::get_by_id(context, contact_id).await?;
     |                                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::option::Option<SyncId>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::option::Option<SyncId>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2209:15
     |
2209 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2210:34
     |
2210 |     context.send_sync_msg().await?;
     |                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:498:35
    |
498 | ...                   .await?;
    |                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/chat.rs:529:9
    |
529 |         ensure!(!self.is_special(), "Invalid chat-id {self}.");
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> src/chat.rs:541:42
    |
541 |                 Chattype::Mailinglist => bail!("Cannot protect mailing lists"),
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:549:19
    |
549 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4441:69
     |
4441 |     let ephemeral_timer = chat_id.get_ephemeral_timer(context).await?;
     |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4467:12
     |
4467 |     ).await?;
     |            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4470:46
     |
4470 |     let msg_id = MsgId::new(row_id.try_into()?);
     |                                              ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, _>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1376:23
     |
1376 |                 .await?
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<i64, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<i64, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1392:23
     |
1392 |                 .await?
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<i64, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<i64, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:644:78
    |
644 |             .with_context(|| format!("can't create chat for {}", contact_id))?;
    |                                                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/chat.rs:667:9
    |
667 | /         ensure!(
668 | |             !self.is_special(),
669 | |             "bad chat_id, can not be special chat: {}",
670 | |             self
671 | |         );
    | |         ^
    | |         |
    | |_________expected `rusqlite::Error`, found `anyhow::Error`
    |           arguments to this enum variant are incorrect
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
   --> src/chat.rs:667:9
    |
667 | /         ensure!(
668 | |             !self.is_special(),
669 | |             "bad chat_id, can not be special chat: {}",
670 | |             self
671 | |         );
    | |_________^ this argument influences the type of `$crate`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
    |
511 |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
    |     ^^^
    = note: this error originates in the macro `$crate::__fallback_ensure` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:688:19
    |
688 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:724:23
    |
724 |                 .await?;
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:742:23
    |
742 |                 .await?;
    |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:752:19
    |
752 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/chat.rs:768:9
    |
768 | /         ensure!(
769 | |             !self.is_special(),
770 | |             "bad chat_id, can not be a special chat: {}",
771 | |             self
772 | |         );
    | |         ^
    | |         |
    | |_________expected `rusqlite::Error`, found `anyhow::Error`
    |           arguments to this enum variant are incorrect
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
   --> src/chat.rs:768:9
    |
768 | /         ensure!(
769 | |             !self.is_special(),
770 | |             "bad chat_id, can not be a special chat: {}",
771 | |             self
772 | |         );
    | |_________^ this argument influences the type of `$crate`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
    |
511 |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
    |     ^^^
    = note: this error originates in the macro `$crate::__fallback_ensure` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:781:19
    |
781 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:786:19
    |
786 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:791:19
    |
791 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:796:19
    |
796 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:803:19
    |
803 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:878:53
    |
878 |                 msg_id.delete_from_db(context).await?;
    |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/chat.rs:889:34
    |
889 |             Viewtype::Unknown => bail!("Can not set draft of unknown type."),
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> src/chat.rs:892:21
    |
892 |                     bail!("No text and no quote in draft");
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:899:27
    |
899 |                     .await?
    |                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:900:57
    |
900 |                     .context("no file stored in params")?;
    |                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:935:31
    |
935 |                         .await?;
    |                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:969:19
    |
969 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:970:46
    |
970 |         msg.id = MsgId::new(row_id.try_into()?);
    |                                              ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, _>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:854:19
    |
854 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::option::Option<MsgId>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<std::option::Option<MsgId>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:865:77
    |
865 |                 let msg = Message::load_from_db(context, draft_msg_id).await?;
    |                                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::option::Option<message::Message>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<std::option::Option<message::Message>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:982:19
    |
982 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<usize, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<usize, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: can't compare `u32` with `ChatId`
   --> src/chat.rs:991:27
    |
991 |     let stmt = if chat_id == DC_CHAT_ID_ARCHIVED_LINK {
    |                           ^^ no implementation for `u32 == ChatId`
    |
    = help: the trait `PartialEq<ChatId>` is not implemented for `u32`
    = help: the following other types implement trait `PartialEq<Rhs>`:
              <u32 as PartialEq>
              <u32 as PartialEq<precis_core::Codepoints>>
              <u32 as PartialEq<stun_rs::types::Cookie>>
              <u32 as PartialEq<serde_json::Value>>

error[E0599]: `&ChatId` is not an iterator
   --> src/chat.rs:992:14
    |
171 | pub struct ChatId(u32);
    | ----------------- doesn't satisfy `ChatId: Iterator`
...
992 |         self.count(
    |         -----^^^^^ `&ChatId` is not an iterator
    |
    = note: the following trait bounds were not satisfied:
            `&ChatId: Iterator`
            which is required by `&mut &ChatId: Iterator`
            `ChatId: Iterator`
            which is required by `&mut ChatId: Iterator`
note: the trait `Iterator` must be implemented
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:75:1
    |
75  | pub trait Iterator {
    | ^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `count`, perhaps you need to implement it:
            candidate #1: `Iterator`

error[E0599]: `&ChatId` is not an iterator
    --> src/chat.rs:1002:14
     |
171  | pub struct ChatId(u32);
     | ----------------- doesn't satisfy `ChatId: Iterator`
...
1002 |         self.count(query.as_str(), &[chat_id]).await?
     |              ^^^^^ `&ChatId` is not an iterator
     |
     = note: the following trait bounds were not satisfied:
             `&ChatId: Iterator`
             which is required by `&mut &ChatId: Iterator`
             `ChatId: Iterator`
             which is required by `&mut ChatId: Iterator`
note: the trait `Iterator` must be implemented
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:75:1
     |
75   | pub trait Iterator {
     | ^^^^^^^^^^^^^^^^^^
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `count`, perhaps you need to implement it:
             candidate #1: `Iterator`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1015:19
     |
1015 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::option::Option<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::option::Option<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1050:69
     |
1050 |             .context("failed to calculate member set intersections")?;
     |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<(ChatId, f64)>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<(ChatId, f64)>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1071:58
     |
1071 |             .context("failed to count chat member sizes")?;
     |                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<(ChatId, f64)>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<(ChatId, f64)>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1131:55
     |
1131 |             .context("failed to get similar chat IDs")?
     |                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Chatlist, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Chatlist, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1135:73
     |
1135 |         let chatlist = Chatlist::from_chat_ids(context, &chat_ids).await?;
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Chatlist, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Chatlist, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1143:19
     |
1143 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<param::Params, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<param::Params, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:1209:9
     |
1209 |         sql.query_row_optional(&query, (self,), f).await
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1248:73
     |
1248 |             let contact = Contact::get_by_id(context, *contact_id).await?;
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1250:70
     |
1250 |             let peerstate = Peerstate::from_addr(context, addr).await?;
     |                                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:1318:9
     |
1318 | /         ensure!(
1319 | |             !self.is_special(),
1320 | |             "can not set gossiped timestamp for special chats"
1321 | |         );
     | |_________^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1333:19
     |
1333 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1309:19
     |
1309 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<i64, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<i64, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1343:19
     |
1343 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ProtectionStatus, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ProtectionStatus, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2765:15
     |
2765 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1644:19
     |
1644 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<u64, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<u64, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1655:51
     |
1655 |                 .saturating_add(timeout.try_into()?)
     |                                                   ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<u64, rusqlite::Error>: FromResidual<std::result::Result<Infallible, _>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<u64, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1695:19
     |
1695 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:1733:28
     |
1733 |                     return contact.get_profile_image(context).await;
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3459:15
     |
3459 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<ContactId>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<ContactId>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1790:72
     |
1790 |             ephemeral_timer: self.id.get_ephemeral_timer(context).await?,
     |                                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatInfo, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatInfo, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1891:23
     |
1891 |                 .await?
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:1899:17
     |
1899 |                 bail!("Cannot set message, contact for {} not found.", self.id);
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |                 |
     |                 expected `rusqlite::Error`, found `anyhow::Error`
     |                 arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:1899:17
     |
1899 |                 bail!("Cannot set message, contact for {} not found.", self.id);
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1920:64
     |
1920 |         let is_bot = context.get_config_bool(Config::Bot).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2017:55
     |
2017 |             self.id.get_ephemeral_timer(context).await?
     |                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2026:53
     |
2026 |                 msg.get_id().get_html(context).await?
     |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2033:19
     |
2033 |                 })?),
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2079:23
     |
2079 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2127:23
     |
2127 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2129:54
     |
2129 |             msg.id = MsgId::new(u32::try_from(raw_id)?);
     |                                                      ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2131:63
     |
2131 |             maybe_set_logging_xdc(context, msg, self.id).await?;
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2132:66
     |
2132 |             context.update_webxdc_integration_database(msg).await?;
     |                                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2151:19
     |
2151 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2352:75
     |
2352 |     if let Some(icon) = context.sql.get_raw_config("icon-broadcast").await? {
     |                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2357:77
     |
2357 |     let blob = BlobObject::create(context, "icon-broadcast.png", icon).await?;
     |                                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2362:15
     |
2362 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:293:73
    |
293 |                 if Contact::real_exists_by_id(context, contact_id).await?
    |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2367:73
     |
2367 |     if let Some(icon) = context.sql.get_raw_config("icon-archive").await? {
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:300:96
    |
300 |                     ContactId::scaleup_origin(context, &[contact_id], Origin::CreateChat).await?;
    |                                                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2372:75
     |
2372 |     let blob = BlobObject::create(context, "icon-archive.png", icon).await?;
     |                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2377:15
     |
2377 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2396:19
     |
2396 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:2591:5
     |
2591 | /     ensure!(
2592 | |         !chat_id.is_special(),
2593 | |         "Cannot prepare message for special chat"
2594 | |     );
     | |_____^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2609:19
     |
2609 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2610:98
     |
2610 |             .with_context(|| format!("attachment missing for message of type #{}", msg.viewtype))?;
     |                                                                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2634:23
     |
2634 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2643:23
     |
2643 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2665:55
     |
2665 |         msg.try_calc_and_set_dimensions(context).await?;
     |                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:2674:9
     |
2674 |         bail!("Cannot send messages of type #{}.", msg.viewtype);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |         |
     |         expected `rusqlite::Error`, found `anyhow::Error`
     |         arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:2674:9
     |
2674 |         bail!("Cannot send messages of type #{}.", msg.viewtype);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:2700:13
     |
2700 |             bail!("cannot send to {chat_id}: {reason}");
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2790:44
     |
2790 |             msg.update_param(context).await?;
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2708:83
     |
2708 |     if chat.typ != Chattype::Single && !context.get_config_bool(Config::Bot).await? {
     |                                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2798:40
     |
2798 |         msg.update_param(context).await?;
     |                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2709:72
     |
2709 |         if let Some(quoted_message) = msg.quoted_message(context).await? {
     |                                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:2711:17
     |
2711 |                 bail!("Bad quote reply");
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2816:73
     |
2816 |             .context("failed to send message, queued for later sending")?;
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2834:71
     |
2834 |             context.emit_location_changed(Some(ContactId::SELF)).await?;
     |                                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:2858:9
     |
2858 | /         ensure!(
2859 | |             chat_id.is_unset() || chat_id == msg.chat_id,
2860 | |             "Inconsistent chat ID"
2861 | |         );
     | |_________^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2862:83
     |
2862 |         message::update_msg_state(context, msg.id, MessageState::OutPending).await?;
     |                                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2875:64
     |
2875 |     let mimefactory = MimeFactory::from_msg(context, msg).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2879:53
     |
2879 |     let from = context.get_primary_self_addr().await?;
     |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2893:54
     |
2893 |     if context.get_config_bool(Config::BccSelf).await?
     |                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2912:44
     |
2912 |         msg.id.set_delivered(context).await?;
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2920:74
     |
2920 |             message::set_msg_failed(context, msg, &err.to_string()).await?;
     |                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2923:6
     |
2923 |     }?;
     |      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2932:15
     |
2932 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4314:19
     |
4314 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:2933:9
     |
2933 | /         bail!(
2934 | |             "e2e encryption unavailable {} - {:?}",
2935 | |             msg.id,
2936 | |             needs_encryption
2937 | |         );
     | |         ^
     | |         |
     | |_________expected `rusqlite::Error`, found `anyhow::Error`
     |           arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:2933:9
     |
2933 | /         bail!(
2934 | |             "e2e encryption unavailable {} - {:?}",
2935 | |             msg.id,
2936 | |             needs_encryption
2937 | |         );
     | |_________^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4351:19
     |
4351 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2955:19
     |
2955 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4354:50
     |
4354 |         msg_id = MsgId::new(u32::try_from(row_id)?);
     |                                                  ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2978:40
     |
2978 |         msg.update_param(context).await?;
     |                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4364:19
     |
4364 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2982:38
     |
2982 |     msg.update_subject(context).await?;
     |                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2983:58
     |
2983 |     let chunk_size = context.get_max_smtp_rcpt_to().await?;
     |                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3002:5
     |
3002 |     context.sql.transaction(trans_fn).await
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^

error[E0308]: mismatched types
    --> src/chat.rs:3013:5
     |
3013 | /     ensure!(
3014 | |         !chat_id.is_special(),
3015 | |         "bad chat_id, can not be a special chat: {}",
3016 | |         chat_id
3017 | |     );
     | |     ^
     | |     |
     | |_____expected `rusqlite::Error`, found `anyhow::Error`
     |       arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:3013:5
     |
3013 | /     ensure!(
3014 | |         !chat_id.is_special(),
3015 | |         "bad chat_id, can not be a special chat: {}",
3016 | |         chat_id
3017 | |     );
     | |_____^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `$crate::__fallback_ensure` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:3026:5
     |
3026 | /     ensure!(
3027 | |         !chat_id.is_special(),
3028 | |         "video chat invitation cannot be sent to special chat: {}",
3029 | |         chat_id
3030 | |     );
     | |     ^
     | |     |
     | |_____expected `rusqlite::Error`, found `anyhow::Error`
     |       arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:3026:5
     |
3026 | /     ensure!(
3027 | |         !chat_id.is_special(),
3028 | |         "video chat invitation cannot be sent to special chat: {}",
3029 | |         chat_id
3030 | |     );
     | |_____^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `$crate::__fallback_ensure` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3032:92
     |
3032 |     let instance = if let Some(instance) = context.get_config(Config::WebrtcInstance).await? {
     |                                                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3036:13
     |
3036 |             bail!("webrtc_instance is empty");
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:3039:9
     |
3039 |         bail!("webrtc_instance not set");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3168:19
     |
3168 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<ChatItem>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<ChatItem>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3181:19
     |
3181 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<ChatItem>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<ChatItem>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3215:19
     |
3215 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3229:19
     |
3229 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3242:19
     |
3242 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3257:19
     |
3257 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3318:15
     |
3318 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3378:15
     |
3378 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<MsgId>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<MsgId>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3471:5
     |
3471 |     ensure!(!chat_name.is_empty(), "Invalid chat name");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3484:15
     |
3484 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3486:52
     |
3486 |     let chat_id = ChatId::new(u32::try_from(row_id)?);
     |                                                    ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3501:51
     |
3501 |     if !context.get_config_bool(Config::Bot).await?
     |                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3502:69
     |
3502 |         && !context.get_config_bool(Config::SkipStartMessages).await?
     |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3526:19
     |
3526 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::string::String, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<std::string::String, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3576:48
     |
3576 |         context.sql.transaction(trans_fn).await?
     |                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3578:52
     |
3578 |     let chat_id = ChatId::new(u32::try_from(row_id)?);
     |                                                    ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3610:15
     |
3610 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3631:15
     |
3631 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3648:15
     |
3648 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3670:5
     |
3670 |     ensure!(!chat_id.is_special(), "can not add member to special chats");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3671:64
     |
3671 |     let contact = Contact::get_by_id(context, contact_id).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3678:5
     |
3678 | /     ensure!(
3679 | |         chat.typ == Chattype::Group || chat.typ == Chattype::Broadcast,
3680 | |         "{} is not a group/broadcast where one can add members",
3681 | |         chat_id
3682 | |     );
     | |     ^
     | |     |
     | |_____expected `rusqlite::Error`, found `anyhow::Error`
     |       arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:3678:5
     |
3678 | /     ensure!(
3679 | |         chat.typ == Chattype::Group || chat.typ == Chattype::Broadcast,
3680 | |         "{} is not a group/broadcast where one can add members",
3681 | |         chat_id
3682 | |     );
     | |_____^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `$crate::__fallback_ensure` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3684:62
     |
3684 |         Contact::real_exists_by_id(context, contact_id).await? || contact_id == ContactId::SELF,
     |                                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3683:5
     |
3683 | /     ensure!(
3684 | |         Contact::real_exists_by_id(context, contact_id).await? || contact_id == ContactId::SELF,
3685 | |         "invalid contact_id {} for adding to group",
3686 | |         contact_id
3687 | |     );
     | |     ^
     | |     |
     | |_____expected `rusqlite::Error`, found `anyhow::Error`
     |       arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:3683:5
     |
3683 | /     ensure!(
3684 | |         Contact::real_exists_by_id(context, contact_id).await? || contact_id == ContactId::SELF,
3685 | |         "invalid contact_id {} for adding to group",
3686 | |         contact_id
3687 | |     );
     | |_____^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `$crate::__fallback_ensure` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:3688:5
     |
3688 |     ensure!(!chat.is_mailing_list(), "Mailing lists can't be changed");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:3689:5
     |
3689 | /     ensure!(
3690 | |         chat.typ != Chattype::Broadcast || contact_id != ContactId::SELF,
3691 | |         "Cannot add SELF to broadcast."
3692 | |     );
     | |_____^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:3698:9
     |
3698 |         bail!("can not add contact because the account is not part of the group/broadcast");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3712:54
     |
3712 |     if context.is_self_addr(contact.get_addr()).await? {
     |                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3728:70
     |
3728 |         if chat.is_protected() && !contact.is_verified(context).await? {
     |                                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3786:15
     |
3786 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3849:5
     |
3849 |     ensure!(!chat_id.is_special(), "Invalid chat ID");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3857:71
     |
3857 |         .context(format!("Failed to set mute duration for {chat_id}"))?;
     |                                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3876:5
     |
3876 | /     ensure!(
3877 | |         !chat_id.is_special(),
3878 | |         "bad chat_id, can not be special chat: {}",
3879 | |         chat_id
3880 | |     );
     | |     ^
     | |     |
     | |_____expected `rusqlite::Error`, found `anyhow::Error`
     |       arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:3876:5
     |
3876 | /     ensure!(
3877 | |         !chat_id.is_special(),
3878 | |         "bad chat_id, can not be special chat: {}",
3879 | |         chat_id
3880 | |     );
     | |_____^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `$crate::__fallback_ensure` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:3881:5
     |
3881 | /     ensure!(
3882 | |         !contact_id.is_special() || contact_id == ContactId::SELF,
3883 | |         "Cannot remove special contact"
3884 | |     );
     | |_____^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:3895:13
     |
3895 |             bail!("{}", err_msg);
     |             ^^^^^^^^^^^^^^^^^^^^
     |             |
     |             expected `rusqlite::Error`, found `anyhow::Error`
     |             arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:3895:13
     |
3895 |             bail!("{}", err_msg);
     |             ^^^^^^^^^^^^^^^^^^^^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3901:90
     |
3901 |             if let Some(contact) = Contact::get_by_id_optional(context, contact_id).await? {
     |                                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3939:9
     |
3939 |         bail!("Cannot remove members from non-group chats.");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3950:19
     |
3950 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3960:15
     |
3960 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:3979:5
     |
3979 |     ensure!(!new_name.is_empty(), "Invalid name");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:3980:5
     |
3980 |     ensure!(!chat_id.is_special(), "Invalid chat ID");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4002:23
     |
4002 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4026:9
     |
4026 |         bail!("Failed to set name");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:4048:5
     |
4048 |     ensure!(!chat_id.is_special(), "Invalid chat ID");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:4050:5
     |
4050 | /     ensure!(
4051 | |         chat.typ == Chattype::Group || chat.typ == Chattype::Mailinglist,
4052 | |         "Failed to set profile image; group does not exist"
4053 | |     );
     | |_____^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:4059:9
     |
4059 |         bail!("Failed to set profile image");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4069:92
     |
4069 |         let mut image_blob = BlobObject::new_from_path(context, Path::new(new_image)).await?;
     |                                                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4070:56
     |
4070 |         image_blob.recode_to_avatar_size(context).await?;
     |                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4087:5
     |
4087 |     ensure!(!msg_ids.is_empty(), "empty msgs_ids: nothing to forward");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:4088:5
     |
4088 |     ensure!(!chat_id.is_special(), "can not forward to special chat");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:4099:9
     |
4099 |         bail!("cannot send to {}: {}", chat_id, reason);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |         |
     |         expected `rusqlite::Error`, found `anyhow::Error`
     |         arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:4099:9
     |
4099 |         bail!("cannot send to {}: {}", chat_id, reason);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this argument influences the type of `$crate`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^
     = note: this error originates in the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4113:15
     |
4113 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4117:71
     |
4117 |         let mut msg = Message::load_from_db(context, src_msg_id).await?;
     |                                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4119:13
     |
4119 |             bail!("cannot forward drafts.");
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4163:44
     |
4163 |             msg.update_param(context).await?;
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4190:64
     |
4190 |         let msg = Message::load_from_db(context, *msg_id).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4192:13
     |
4192 | /             ensure!(
4193 | |                 chat_id == msg.chat_id,
4194 | |                 "messages to resend needs to be in the same chat"
4195 | |             );
     | |_____________^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:4199:9
     |
4199 | /         ensure!(
4200 | |             msg.from_id == ContactId::SELF,
4201 | |             "can resend only own messages"
4202 | |         );
     | |_________^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/chat.rs:4203:9
     |
4203 |         ensure!(!msg.is_info(), "cannot resend info messages");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4215:44
     |
4215 |             msg.update_param(context).await?;
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4219:91
     |
4219 |                 message::update_msg_state(context, msg.id, MessageState::OutPending).await?
     |                                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4221:18
     |
4221 |             _ => bail!("unexpected message state"),
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4243:19
     |
4243 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<usize, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<usize, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4255:5
     |
4255 | /     context
4256 | |         .sql
4257 | |         .query_row_optional(
4258 | |             "SELECT id, blocked, protected FROM chats WHERE grpid=?;",
...    |
4269 | |         )
4270 | |         .await
     | |______________^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^

error[E0308]: mismatched types
    --> src/chat.rs:4385:5
     |
4385 |     ensure!(!label.is_empty(), "empty label");
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4392:15
     |
4392 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4408:15
     |
4408 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4409:63
     |
4409 |     context.sql.execute("DELETE FROM devmsglabels;", ()).await?;
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4418:15
     |
4418 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4421:15
     |
4421 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4509:15
     |
4509 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4517:5
     |
4517 | /     ensure!(
4518 | |         chat.typ == Chattype::Group || chat.typ == Chattype::Broadcast,
4519 | |         "{id} is not a group/broadcast",
4520 | |     );
     | |_____^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `ensure` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4523:53
     |
4523 |         let contact_addr = ContactAddress::new(addr)?;
     |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4525:19
     |
4525 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4568:69
     |
4568 |                     Contact::create_ex(self, Nosync, to, addr).await?;
     |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4572:27
     |
4572 |                     .await?
     |                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4573:78
     |
4573 |                     .with_context(|| format!("No contact for addr '{addr}'"))?;
     |                                                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4576:32
     |
4576 |                         return contact::set_blocked(self, Nosync, contact_id, true).await
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^

error[E0308]: mismatched types
    --> src/chat.rs:4579:32
     |
4579 |                         return contact::set_blocked(self, Nosync, contact_id, false).await
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^

error[E0308]: mismatched types
    --> src/chat.rs:4613:21
     |
4613 |                 Err(anyhow!("sync_alter_chat({id:?}, {action:?}): Bad request."))
     |                 --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
     |                 |
     |                 arguments to this enum variant are incorrect
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
    --> src/chat.rs:4613:17
     |
4613 |                 Err(anyhow!("sync_alter_chat({id:?}, {action:?}): Bad request."))
     |                 ^^^^------------------------------------------------------------^
     |                     |
     |                     this argument influences the type of `Err`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
     |
511  |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
     |     ^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1526:77
     |
1526 |             .context(format!("Failed loading chat {chat_id} from database"))?;
     |                                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::Chat, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::Chat, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4441:69
     |
4441 |     let ephemeral_timer = chat_id.get_ephemeral_timer(context).await?;
     |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4467:12
     |
4467 |     ).await?;
     |            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4470:46
     |
4470 |     let msg_id = MsgId::new(row_id.try_into()?);
     |                                              ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, _>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2508:68
     |
2508 |         let contact = Contact::get_by_id(context, contact_id).await?;
     |                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatIdBlocked, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatIdBlocked, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2521:80
     |
2521 |         let peerstate = Peerstate::from_addr(context, contact.get_addr()).await?;
     |                                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatIdBlocked, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatIdBlocked, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2563:19
     |
2563 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatIdBlocked, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatIdBlocked, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:344:20
    |
344 |             ).await?;
    |                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:346:56
    |
346 |         let chat_id = ChatId::new(u32::try_from(row_id)?);
    |                                                        ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3459:15
     |
3459 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<contact::ContactId>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<contact::ContactId>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3576:48
     |
3576 |         context.sql.transaction(trans_fn).await?
     |                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3578:52
     |
3578 |     let chat_id = ChatId::new(u32::try_from(row_id)?);
     |                                                    ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0308]: `match` arms have incompatible types
   --> src/sync.rs:277:49
    |
274 |                   SyncDataOrUnknown::SyncData(data) => match data {
    |  ______________________________________________________-
275 | |                     AddQrToken(token) => self.add_qr_token(token).await,
    | |                                          ------------------------------ this is found to be of type `std::result::Result<(), anyhow::Error>`
276 | |                     DeleteQrToken(token) => self.delete_qr_token(token).await,
    | |                                             --------------------------------- this is found to be of type `std::result::Result<(), anyhow::Error>`
277 | |                     AlterChat { id, action } => self.sync_alter_chat(id, action).await,
    | |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `anyhow::Error`, found `rusqlite::Error`
278 | |                     SyncData::Config { key, val } => self.sync_config(key, val).await,
279 | |                 },
    | |_________________- `match` arms have incompatible types
    |
    = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/chat.rs:854:19
    |
854 |             .await?;
    |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::option::Option<message::MsgId>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<std::option::Option<message::MsgId>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: can't compare `u32` with `chat::ChatId`
   --> src/chat.rs:991:27
    |
991 |     let stmt = if chat_id == DC_CHAT_ID_ARCHIVED_LINK {
    |                           ^^ no implementation for `u32 == chat::ChatId`
    |
    = help: the trait `PartialEq<chat::ChatId>` is not implemented for `u32`
    = help: the following other types implement trait `PartialEq<Rhs>`:
              <u32 as PartialEq>
              <u32 as PartialEq<precis_core::Codepoints>>
              <u32 as PartialEq<stun_rs::types::Cookie>>
              <u32 as PartialEq<serde_json::Value>>

error[E0599]: `&chat::ChatId` is not an iterator
   --> src/chat.rs:992:14
    |
171 | pub struct ChatId(u32);
    | ----------------- doesn't satisfy `chat::ChatId: Iterator`
...
992 |         self.count(
    |         -----^^^^^ `&chat::ChatId` is not an iterator
    |
    = note: the following trait bounds were not satisfied:
            `&chat::ChatId: Iterator`
            which is required by `&mut &chat::ChatId: Iterator`
            `chat::ChatId: Iterator`
            which is required by `&mut chat::ChatId: Iterator`
note: the trait `Iterator` must be implemented
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:75:1
    |
75  | pub trait Iterator {
    | ^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `count`, perhaps you need to implement it:
            candidate #1: `Iterator`

error[E0599]: `&chat::ChatId` is not an iterator
    --> src/chat.rs:1002:14
     |
171  | pub struct ChatId(u32);
     | ----------------- doesn't satisfy `chat::ChatId: Iterator`
...
1002 |         self.count(query.as_str(), &[chat_id]).await?
     |              ^^^^^ `&chat::ChatId` is not an iterator
     |
     = note: the following trait bounds were not satisfied:
             `&chat::ChatId: Iterator`
             which is required by `&mut &chat::ChatId: Iterator`
             `chat::ChatId: Iterator`
             which is required by `&mut chat::ChatId: Iterator`
note: the trait `Iterator` must be implemented
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:75:1
     |
75   | pub trait Iterator {
     | ^^^^^^^^^^^^^^^^^^
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `count`, perhaps you need to implement it:
             candidate #1: `Iterator`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1050:69
     |
1050 |             .context("failed to calculate member set intersections")?;
     |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<(chat::ChatId, f64)>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<(chat::ChatId, f64)>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1071:58
     |
1071 |             .context("failed to count chat member sizes")?;
     |                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<(chat::ChatId, f64)>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<(chat::ChatId, f64)>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1131:55
     |
1131 |             .context("failed to get similar chat IDs")?
     |                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chatlist::Chatlist, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chatlist::Chatlist, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1135:73
     |
1135 |         let chatlist = Chatlist::from_chat_ids(context, &chat_ids).await?;
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chatlist::Chatlist, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chatlist::Chatlist, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1343:19
     |
1343 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ProtectionStatus, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ProtectionStatus, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1790:72
     |
1790 |             ephemeral_timer: self.id.get_ephemeral_timer(context).await?,
     |                                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatInfo, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatInfo, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1891:23
     |
1891 |                 .await?
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:1920:64
     |
1920 |         let is_bot = context.get_config_bool(Config::Bot).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2017:55
     |
2017 |             self.id.get_ephemeral_timer(context).await?
     |                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2026:53
     |
2026 |                 msg.get_id().get_html(context).await?
     |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2033:19
     |
2033 |                 })?),
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2079:23
     |
2079 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2127:23
     |
2127 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2129:54
     |
2129 |             msg.id = MsgId::new(u32::try_from(raw_id)?);
     |                                                      ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2131:63
     |
2131 |             maybe_set_logging_xdc(context, msg, self.id).await?;
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2132:66
     |
2132 |             context.update_webxdc_integration_database(msg).await?;
     |                                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2708:83
     |
2708 |     if chat.typ != Chattype::Single && !context.get_config_bool(Config::Bot).await? {
     |                                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2709:72
     |
2709 |         if let Some(quoted_message) = msg.quoted_message(context).await? {
     |                                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2816:73
     |
2816 |             .context("failed to send message, queued for later sending")?;
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2834:71
     |
2834 |             context.emit_location_changed(Some(ContactId::SELF)).await?;
     |                                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3032:92
     |
3032 |     let instance = if let Some(instance) = context.get_config(Config::WebrtcInstance).await? {
     |                                                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3168:19
     |
3168 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<chat::ChatItem>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<chat::ChatItem>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3181:19
     |
3181 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<chat::ChatItem>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<chat::ChatItem>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3378:15
     |
3378 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<message::MsgId>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<message::MsgId>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3484:15
     |
3484 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3486:52
     |
3486 |     let chat_id = ChatId::new(u32::try_from(row_id)?);
     |                                                    ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3501:51
     |
3501 |     if !context.get_config_bool(Config::Bot).await?
     |                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3502:69
     |
3502 |         && !context.get_config_bool(Config::SkipStartMessages).await?
     |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<chat::ChatId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<chat::ChatId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5671:19
     |
5671 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5753:19
     |
5753 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6407:45
     |
6407 |         tokio::fs::write(&file, bytes).await?;
     |                                             ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6429:46
     |
6429 |         assert!(msg.get_filebytes(&bob).await?.unwrap() > 250);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7104:49
     |
7104 |             tokio::fs::write(&file, bytes).await?;
     |                                                 ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<message::MsgId, rusqlite::Error>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<message::MsgId, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

warning: unused import: `crate::log::LogExt`
  --> src/sync.rs:12:5
   |
12 | use crate::log::LogExt;
   |     ^^^^^^^^^^^^^^^^^^

Some errors have detailed explanations: E0252, E0277, E0308, E0425, E0599.
For more information about an error, try `rustc --explain E0252`.
warning: `deltachat` (lib) generated 4 warnings
error: could not compile `deltachat` (lib) due to 225 previous errors; 4 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> src/events/chatlist_events.rs:486:33
    |
486 |         assert!(chat_id_for_bob.get_fresh_msg_cnt(&bob).await? >= 1);
    |                                 ^^^^^^^^^^^^^^^^^------ an argument of type `u32` is missing
    |
note: method defined here
   --> src/chat.rs:989:14
    |
989 | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
    |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
    |
486 |         assert!(chat_id_for_bob.get_fresh_msg_cnt(&bob, /* u32 */).await? >= 1);
    |                                                  ~~~~~~~~~~~~~~~~~

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4771:69
     |
4771 |         let test = Message::load_from_db(&t, id_after_prepare).await?;
     |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4787:23
     |
4787 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4790:23
     |
4790 |                 .await?;
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4797:61
     |
4797 |         let test = Message::load_from_db(&t, draft.id).await?;
     |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4800:46
     |
4800 |         assert!(test.quoted_message(&t).await?.is_none());
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4803:49
     |
4803 |         draft.set_quote(&t, Some(&quote1)).await?;
     |                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4806:61
     |
4806 |         let test = Message::load_from_db(&t, draft.id).await?;
     |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4809:49
     |
4809 |         assert_eq!(test.quoted_message(&t).await?.unwrap().id, quote1.id);
     |                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4813:49
     |
4813 |         draft.set_quote(&t, Some(&quote2)).await?;
     |                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4816:61
     |
4816 |         let test = Message::load_from_db(&t, draft.id).await?;
     |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4819:49
     |
4819 |         assert_eq!(test.quoted_message(&t).await?.unwrap().id, quote2.id);
     |                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4822:40
     |
4822 |         draft.set_quote(&t, None).await?;
     |                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4825:61
     |
4825 |         let test = Message::load_from_db(&t, draft.id).await?;
     |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4828:46
     |
4828 |         assert!(test.quoted_message(&t).await?.is_none());
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4840:70
     |
4840 |         let grp_msg = Message::load_from_db(&alice, grp_msg_id).await?;
     |                                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4844:78
     |
4844 |         let one2one_msg = Message::load_from_db(&alice, one2one_msg_id).await?;
     |                                                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4849:52
     |
4849 |         msg.set_quote(&alice, Some(&grp_msg)).await?;
     |                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4855:56
     |
4855 |         msg.set_quote(&alice, Some(&one2one_msg)).await?;
     |                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4863:52
     |
4863 |         msg.set_quote(&alice, Some(&grp_msg)).await?;
     |                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4870:56
     |
4870 |         msg.set_quote(&alice, Some(&one2one_msg)).await?;
     |                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4879:55
     |
4879 |         alice.set_config(Config::Bot, Some("1")).await?;
     |                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4911:63
     |
4911 |         alice.set_config(Config::E2eeEnabled, Some("0")).await?;
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4912:61
     |
4912 |         bob.set_config(Config::E2eeEnabled, Some("0")).await?;
     |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4915:94
     |
4915 |         let alice_bob_contact_id = Contact::create(&alice, "robert", "bob@example.net").await?;
     |                                                                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4918:63
     |
4918 |         bob.set_config(Config::Displayname, Some("Bob")).await?;
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4923:91
     |
4923 |             let alice_bob_contact = Contact::get_by_id(&alice, alice_bob_contact_id).await?;
     |                                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4935:97
     |
4935 |         let alice_fiona_contact_id = Contact::create(&alice, "Fiona", "fiona@example.net").await?;
     |                                                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4984:63
     |
4984 |         alice.set_config(Config::E2eeEnabled, Some("0")).await?;
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4985:61
     |
4985 |         bob.set_config(Config::E2eeEnabled, Some("0")).await?;
     |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4987:91
     |
4987 |         let alice_bob_contact_id = Contact::create(&alice, "Bob", "bob@example.net").await?;
     |                                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4988:97
     |
4988 |         let alice_fiona_contact_id = Contact::create(&alice, "Fiona", "fiona@example.net").await?;
     |                                                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:4990:74
     |
4990 |             Contact::create(&alice, "Claire", "claire@example.net").await?;
     |                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5047:79
     |
5047 |             Contact::create(&alice, "Bob", &bob.get_config(Config::Addr).await?.unwrap()).await?;
     |                                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5047:96
     |
5047 |             Contact::create(&alice, "Bob", &bob.get_config(Config::Addr).await?.unwrap()).await?;
     |                                                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5049:88
     |
5049 |         let alice_fiona_contact_id = Contact::create(&alice, "Fiona", fiona_addr).await?;
     |                                                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5050:84
     |
5050 |         let bob_fiona_contact_id = Contact::create(&bob, "Fiona", fiona_addr).await?;
     |                                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5080:56
     |
5080 |         a1.set_config_bool(Config::BccSelf, true).await?;
     |                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5103:68
     |
5103 |         let bob = Contact::create(&a1, "", "bob@example.org").await?;
     |                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5157:74
     |
5157 |         let bob_id = Contact::create(&alice, "", "bob@example.net").await?;
     |                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5158:75
     |
5158 |         let claire_id = Contact::create(&alice, "", "claire@foo.de").await?;
     |                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5159:73
     |
5159 |         let daisy_id = Contact::create(&alice, "", "daisy@bar.de").await?;
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5215:74
     |
5215 |         let claire_id = Contact::create(alice, "", "claire@foo.de").await?;
     |                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5231:74
     |
5231 |         let bob_id = Contact::create(&alice, "", "bob@example.net").await?;
     |                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5232:75
     |
5232 |         let claire_id = Contact::create(&alice, "", "claire@foo.de").await?;
     |                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5233:73
     |
5233 |         let daisy_id = Contact::create(&alice, "", "daisy@bar.de").await?;
     |                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5276:79
     |
5276 |         let bob_contact = Contact::create(&alice, "", "bob@example.net").await?;
     |                                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5336:58
     |
5336 |         let msg = Message::load_from_db(&t, msg_id).await?;
     |                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5407:88
     |
5407 |         let msg1 = message::Message::load_from_db(&t, *msg1_id.as_ref().unwrap()).await?;
     |                                                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5431:70
     |
5431 |         message::delete_msgs(&t, &[*msg1_id.as_ref().unwrap()]).await?;
     |                                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5679:46
     |
5679 |         assert_eq!(get_archived_cnt(&t).await?, 1);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5683:46
     |
5683 |         assert_eq!(get_archived_cnt(&t).await?, 0);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5689:46
     |
5689 |         assert_eq!(get_archived_cnt(&t).await?, 1);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5703:46
     |
5703 |         assert_eq!(get_archived_cnt(&t).await?, 1);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5717:46
     |
5717 |         assert_eq!(get_archived_cnt(&t).await?, 0);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5724:46
     |
5724 |         assert_eq!(get_archived_cnt(&t).await?, 1);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5729:46
     |
5729 |         assert_eq!(get_archived_cnt(&t).await?, 0);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5765:45
     |
5765 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 0);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5765 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5768:45
     |
5768 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 1);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5768 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5771:45
     |
5771 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 1);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5771 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5783:32
     |
5783 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t).await?, 2);
     |                                ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5783 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                 ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5784:35
     |
5784 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t).await?, 3);
     |                                   ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5784 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 3);
     |                                                    ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5785:45
     |
5785 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 2);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5785 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5789:32
     |
5789 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t).await?, 2);
     |                                ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5789 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                 ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5790:35
     |
5790 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t).await?, 0);
     |                                   ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5790 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                                    ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5791:45
     |
5791 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 1);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5791 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5795:32
     |
5795 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t).await?, 2);
     |                                ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5795 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                 ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5796:35
     |
5796 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t).await?, 1);
     |                                   ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5796 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                    ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5797:45
     |
5797 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 2);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5797 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5803:33
     |
5803 |         assert_eq!(dave_chat_id.get_fresh_msg_cnt(&t).await?, 1);
     |                                 ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5803 |         assert_eq!(dave_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                  ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5804:45
     |
5804 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 2);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5804 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 2);
     |                                                              ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5809:32
     |
5809 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t).await?, 0);
     |                                ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5809 |         assert_eq!(bob_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                                 ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5810:35
     |
5810 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t).await?, 0);
     |                                   ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5810 |         assert_eq!(claire_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                                    ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5811:33
     |
5811 |         assert_eq!(dave_chat_id.get_fresh_msg_cnt(&t).await?, 1);
     |                                 ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5811 |         assert_eq!(dave_chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                                  ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5812:45
     |
5812 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t).await?, 0);
     |                                             ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
5812 |         assert_eq!(DC_CHAT_ID_ARCHIVED_LINK.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                                              ~~~~~~~~~~~~~~~

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5798:44
     |
5798 |         assert_eq!(t.get_fresh_msgs().await?.len(), 0);
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5805:44
     |
5805 |         assert_eq!(t.get_fresh_msgs().await?.len(), 1);
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5813:44
     |
5813 |         assert_eq!(t.get_fresh_msgs().await?.len(), 1);
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5976:48
     |
5976 |             &ContactAddress::new("foo@bar.org")?,
     |                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5979:15
     |
5979 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:5986:53
     |
5986 |         t.set_config(Config::Selfavatar, None).await?; // setting to None also forces re-sending
     |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6054:37
     |
6054 |         assert!(msg.parent(&t).await?.is_none());
     |                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6055:45
     |
6055 |         assert!(msg.quoted_message(&t).await?.is_none());
     |                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6075:58
     |
6075 |         let msg = Message::load_from_db(&t, msg_id).await?;
     |                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6081:37
     |
6081 |         assert!(msg.parent(&t).await?.is_none());
     |                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6082:45
     |
6082 |         assert!(msg.quoted_message(&t).await?.is_none());
     |                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6225:28
     |
6225 |         assert_eq!(chat.id.get_fresh_msg_cnt(&t).await?, 1);
     |                            ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
6225 |         assert_eq!(chat.id.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6243:28
     |
6243 |         assert_eq!(chat.id.get_fresh_msg_cnt(&t).await?, 0);
     |                            ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
6243 |         assert_eq!(chat.id.get_fresh_msg_cnt(&t, /* u32 */).await?, 0);
     |                                             ~~~~~~~~~~~~~~~

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6220:15
     |
6220 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6222:64
     |
6222 |         let chats = Chatlist::try_load(&t, 0, None, None).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6224:40
     |
6224 |         assert_eq!(chats.get_chat_id(0)?, chat.id);
     |                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6226:44
     |
6226 |         assert_eq!(t.get_fresh_msgs().await?.len(), 1);
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6234:67
     |
6234 |         let msg = message::Message::load_from_db(&t, msg_id).await?;
     |                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6239:64
     |
6239 |         let chats = Chatlist::try_load(&t, 0, None, None).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6241:67
     |
6241 |         let msg = message::Message::load_from_db(&t, msg_id).await?;
     |                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6244:44
     |
6244 |         assert_eq!(t.get_fresh_msgs().await?.len(), 0);
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6277:28
     |
6277 |         assert_eq!(chat_id.get_fresh_msg_cnt(&t).await?, 1);
     |                            ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
6277 |         assert_eq!(chat_id.get_fresh_msg_cnt(&t, /* u32 */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6253:64
     |
6253 |         let chats = Chatlist::try_load(&t, 0, None, None).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6267:15
     |
6267 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6269:64
     |
6269 |         let chats = Chatlist::try_load(&t, 0, None, None).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6284:67
     |
6284 |         let msg = message::Message::load_from_db(&t, msg_id).await?;
     |                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6288:44
     |
6288 |         assert_eq!(t.get_fresh_msgs().await?.len(), 0);
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6290:64
     |
6290 |         let chats = Chatlist::try_load(&t, 0, None, None).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6292:67
     |
6292 |         let msg = message::Message::load_from_db(&t, msg_id).await?;
     |                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6294:44
     |
6294 |         assert_eq!(t.get_fresh_msgs().await?.len(), 0);
     |                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6314:15
     |
6314 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6316:64
     |
6316 |         let chats = Chatlist::try_load(&t, 0, None, None).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6318:43
     |
6318 |         let chat_id = chats.get_chat_id(0)?;
     |                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6320:46
     |
6320 |         assert_eq!(get_archived_cnt(&t).await?, 0);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6325:64
     |
6325 |         let chats = Chatlist::try_load(&t, 0, None, None).await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6327:43
     |
6327 |         let chat_id = chats.get_chat_id(0)?;
     |                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6329:46
     |
6329 |         assert_eq!(get_archived_cnt(&t).await?, 1);
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6331:83
     |
6331 |         let chats = Chatlist::try_load(&t, DC_GCL_ARCHIVED_ONLY, None, None).await?;
     |                                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6333:43
     |
6333 |         let chat_id = chats.get_chat_id(0)?;
     |                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6358:28
     |
6358 |         assert_eq!(chat_id.get_fresh_msg_cnt(&alice).await?, 1);
     |                            ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
6358 |         assert_eq!(chat_id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6370:28
     |
6370 |         assert_eq!(chat_id.get_fresh_msg_cnt(&alice).await?, 1);
     |                            ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
6370 |         assert_eq!(chat_id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~~~~~

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6354:15
     |
6354 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6527:45
     |
6527 |         tokio::fs::write(&file, bytes).await?;
     |                                             ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6573:70
     |
6573 |         let bob_id = Contact::create(&t, "", "bob@example.net").await?;
     |                                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6607:57
     |
6607 |         reply.set_quote(&bob, Some(&received_msg)).await?;
     |                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6615:65
     |
6615 |         assert!(alice_forwarded_msg.quoted_message(&alice).await?.is_none());
     |                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6622:61
     |
6622 |         assert!(bob_forwarded_msg.quoted_message(&bob).await?.is_none());
     |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6639:77
     |
6639 |         let bob_id = Contact::create(&alice, "Bob", "bob@example.net").await?;
     |                                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6640:86
     |
6640 |         let claire_id = Contact::create(&alice, "Claire", "claire@example.net").await?;
     |                                                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6652:76
     |
6652 |         message::delete_msgs(&alice, &[sent_group_msg.sender_msg_id]).await?;
     |                                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6684:19
     |
6684 |             .await?;
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6685:77
     |
6685 |         let bob_id = Contact::create(&alice, "bob", "bob@example.net").await?;
     |                                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6700:76
     |
6700 |         let claire_id = Contact::create(&bob, "claire", "claire@foo").await?;
     |                                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6728:65
     |
6728 |             Contact::create(&alice, "", "bob@example.net").await?,
     |                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6737:68
     |
6737 |             Contact::create(&alice, "", "claire@example.org").await?,
     |                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6768:76
     |
6768 |         let msg_from = Contact::get_by_id(&claire, msg.get_from_id()).await?;
     |                                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6782:65
     |
6782 |             Contact::create(&alice, "", "bob@example.net").await?,
     |                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6802:65
     |
6802 |             Contact::create(&alice, "", "bob@example.net").await?,
     |                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6821:66
     |
6821 |             Contact::create(&bob, "", "claire@example.org").await?,
     |                                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6838:65
     |
6838 |             Contact::create(&alice, "", "bob@example.net").await?,
     |                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6846:68
     |
6846 |             Contact::create(&alice, "", "claire@example.org").await?,
     |                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6858:64
     |
6858 |         let bob = Contact::create(&alice, "", "bob@f.br").await?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6989:48
     |
6989 |             &ContactAddress::new("foo@bar.org")?,
     |                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:6992:15
     |
6992 |         .await?;
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7027:82
     |
7027 |         let contact_bob = Contact::create(&alice, "Bob", "bob@example.net").await?;
     |                                                                                  ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7028:83
     |
7028 |         let contact_fiona = Contact::create(&alice, "", "fiona@example.net").await?;
     |                                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7061:61
     |
7061 |         bob.set_config(Config::E2eeEnabled, Some("0")).await?;
     |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7229:54
     |
7229 |         delete_msgs(&t, &[second_image_msg_id]).await?;
     |                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7254:68
     |
7254 |             Contact::create(&alice, "bob", "bob@example.net").await?,
     |                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7257:38
     |
7257 |         let dir = tempfile::tempdir()?;
     |                                      ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7259:38
     |
7259 |         fs::write(&file, "aaa").await?;
     |                                      ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7277:60
     |
7277 |             a.set_config_bool(Config::SyncMsgs, true).await?;
     |                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7299:55
     |
7299 |         Contact::unblock(alice0, a0b_contact_id).await?;
     |                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7302:53
     |
7302 |         Contact::block(alice0, a0b_contact_id).await?;
     |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7305:55
     |
7305 |         Contact::unblock(alice0, a0b_contact_id).await?;
     |                                                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7332:23
     |
7332 |                 .await?
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7343:60
     |
7343 |             a.set_config_bool(Config::SyncMsgs, true).await?;
     |                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7360:19
     |
7360 |             .await?
     |                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7377:23
     |
7377 |                 .await?
     |                       ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7391:60
     |
7391 |             a.set_config_bool(Config::SyncMsgs, true).await?;
     |                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7417:60
     |
7417 |             a.set_config_bool(Config::SyncMsgs, true).await?;
     |                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7439:72
     |
7439 | ...                   time.duration_since(SystemTime::UNIX_EPOCH)?.as_secs(),
     |                                                                  ^ the trait `From<SystemTimeError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, SystemTimeError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, SystemTimeError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7454:60
     |
7454 |             a.set_config_bool(Config::SyncMsgs, true).await?;
     |                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7474:48
     |
7474 |             &bob.get_config(Config::Addr).await?.unwrap(),
     |                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7477:15
     |
7477 |         .await?
     |               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:7500:60
     |
7500 |             a.set_config_bool(Config::SyncMsgs, true).await?;
     |                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1461:27
     |
1461 |         assert_eq!(bob.id.get_fresh_msg_cnt(&t).await.unwrap(), 1);
     |                           ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1461 |         assert_eq!(bob.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 1);
     |                                            ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1467:30
     |
1467 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t).await.unwrap(), 2);
     |                              ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1467 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 2);
     |                                               ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1474:28
     |
1474 |         assert_eq!(dave.id.get_fresh_msg_cnt(&t).await.unwrap(), 3);
     |                            ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1474 |         assert_eq!(dave.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 3);
     |                                             ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1481:30
     |
1481 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t).await.unwrap(), 2);
     |                              ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1481 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 2);
     |                                               ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1489:30
     |
1489 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t).await.unwrap(), 3);
     |                              ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1489 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 3);
     |                                               ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/context.rs:1496:30
     |
1496 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t).await.unwrap(), 3);
     |                              ^^^^^^^^^^^^^^^^^---- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
1496 |         assert_eq!(claire.id.get_fresh_msg_cnt(&t, /* u32 */).await.unwrap(), 3);
     |                                               ~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/message.rs:2398:34
     |
2398 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice).await?, 2);
     |                                  ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
2398 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 2);
     |                                                   ~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/message.rs:2407:34
     |
2407 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice).await?, 2);
     |                                  ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
2407 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 2);
     |                                                   ~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/message.rs:2413:34
     |
2413 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice).await?, 1);
     |                                  ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
2413 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 1);
     |                                                   ~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/message.rs:2419:34
     |
2419 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice).await?, 0);
     |                                  ^^^^^^^^^^^^^^^^^-------- an argument of type `u32` is missing
     |
note: method defined here
    --> src/chat.rs:989:14
     |
989  | pub async fn get_fresh_msg_cnt(&self, context: &Context, chat_id: u32) -> Result<usize> {
     |              ^^^^^^^^^^^^^^^^^        -----------------  ------------
help: provide the argument
     |
2419 |         assert_eq!(alice_chat.id.get_fresh_msg_cnt(&alice, /* u32 */).await?, 0);
     |                                                   ~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0061, E0252, E0277, E0308, E0425, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `deltachat` (lib test) generated 4 warnings (4 duplicates)
error: could not compile `deltachat` (lib test) due to 401 previous errors; 4 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


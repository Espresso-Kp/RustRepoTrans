Fail
file path is :
projects/deltachat-core/rust/src/pgp.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
warning: unused `#[macro_use]` import
  --> src/lib.rs:31:1
   |
31 | #[macro_use]
   | ^^^^^^^^^^^^
   |
note: the lint level is defined here
  --> src/lib.rs:6:5
   |
6  |     unused,
   |     ^^^^^^
   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `SecretKeyTrait`
  --> src/pgp.rs:17:58
   |
17 |     CompressionAlgorithm, KeyTrait, Mpi, PublicKeyTrait, SecretKeyTrait, StringToKey,
   |                                                          ^^^^^^^^^^^^^^

error[E0599]: no method named `can_create_certificates` found for mutable reference `&mut SecretKeyParamsBuilder` in the current scope
   --> src/pgp.rs:154:14
    |
152 |               let key_params = SecretKeyParamsBuilder::default()
    |  ______________________________-
153 | |             .key_type(PgpKeyType::Rsa(2048))
154 | |             .can_create_certificates(false)
    | |             -^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut SecretKeyParamsBuilder`
    | |_____________|
    | 

error[E0599]: no variant or associated item named `Zlib` found for enum `CompressionAlgorithm` in the current scope
   --> src/pgp.rs:169:39
    |
169 |                 CompressionAlgorithm::Zlib,
    |                                       ^^^^
    |                                       |
    |                                       variant or associated item not found in `CompressionAlgorithm`
    |                                       help: there is a variant with a similar name: `ZLIB`

error[E0277]: the trait bound `&Vec<u8>: std::io::Read` is not satisfied
   --> src/pgp.rs:193:53
    |
193 |                 public: SignedPublicKey::from_bytes(&public_bytes)?,
    |                         --------------------------- ^^^^^^^^^^^^^ the trait `std::io::Read` is not implemented for `&Vec<u8>`
    |                         |
    |                         required by a bound introduced by this call
    |
note: required by a bound in `pgp::Deserializable::from_bytes`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/shared.rs:10:31
    |
10  |     fn from_bytes(bytes: impl Read) -> Result<Self> {
    |                               ^^^^ required by this bound in `Deserializable::from_bytes`
help: consider dereferencing here
    |
193 |                 public: SignedPublicKey::from_bytes(&*public_bytes)?,
    |                                                      +

error[E0277]: the trait bound `&Vec<u8>: std::io::Read` is not satisfied
   --> src/pgp.rs:194:53
    |
194 |                 secret: SignedSecretKey::from_bytes(&secret_bytes)?,
    |                         --------------------------- ^^^^^^^^^^^^^ the trait `std::io::Read` is not implemented for `&Vec<u8>`
    |                         |
    |                         required by a bound introduced by this call
    |
note: required by a bound in `pgp::Deserializable::from_bytes`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/shared.rs:10:31
    |
10  |     fn from_bytes(bytes: impl Read) -> Result<Self> {
    |                               ^^^^ required by this bound in `Deserializable::from_bytes`
help: consider dereferencing here
    |
194 |                 secret: SignedSecretKey::from_bytes(&*secret_bytes)?,
    |                                                      +

error[E0308]: mismatched types
   --> src/pgp.rs:197:32
    |
197 |           KeyGenType::Ed25519 => {
    |  ________________________________^
198 | |             /* The Ed25519 key generation is similar to RSA, but you replace 
199 | |             'PgpKeyType::Rsa(2048)' with 'PgpKeyType::EdDSA' and then you can 
200 | |             remove the 'can_create_certificates' and 'subkey' options as they are 
201 | |             not applicable to Ed25519 keys. */
202 | |         }
    | |_________^ expected `Result<KeyPair, Error>`, found `()`
    |
    = note:   expected enum `std::result::Result<KeyPair, anyhow::Error>`
            found unit type `()`

error[E0308]: mismatched types
   --> src/pgp.rs:203:32
    |
203 |           KeyGenType::Rsa4096 => {
    |  ________________________________^
204 | |             /* The Rsa4096 key generation is just like the Rsa2048, but the key 
205 | |             type is 'PgpKeyType::Rsa(4096)' */
206 | |         }
    | |_________^ expected `Result<KeyPair, Error>`, found `()`
    |
    = note:   expected enum `std::result::Result<KeyPair, anyhow::Error>`
            found unit type `()`

Some errors have detailed explanations: E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `deltachat` (lib) generated 2 warnings
error: could not compile `deltachat` (lib) due to 6 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
   --> src/pgp.rs:197:32
    |
197 |           KeyGenType::Ed25519 => {
    |  ________________________________^
198 | |             /* The Ed25519 key generation is similar to RSA, but you replace 
199 | |             'PgpKeyType::Rsa(2048)' with 'PgpKeyType::EdDSA' and then you can 
200 | |             remove the 'can_create_certificates' and 'subkey' options as they are 
201 | |             not applicable to Ed25519 keys. */
202 | |         }
    | |_________^ expected `Result<KeyPair, Error>`, found `()`
    |
    = note:   expected enum `std::result::Result<pgp::KeyPair, anyhow::Error>`
            found unit type `()`

error[E0308]: mismatched types
   --> src/pgp.rs:203:32
    |
203 |           KeyGenType::Rsa4096 => {
    |  ________________________________^
204 | |             /* The Rsa4096 key generation is just like the Rsa2048, but the key 
205 | |             type is 'PgpKeyType::Rsa(4096)' */
206 | |         }
    | |_________^ expected `Result<KeyPair, Error>`, found `()`
    |
    = note:   expected enum `std::result::Result<pgp::KeyPair, anyhow::Error>`
            found unit type `()`

warning: `deltachat` (lib test) generated 2 warnings (2 duplicates)
error: could not compile `deltachat` (lib test) due to 6 previous errors; 2 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


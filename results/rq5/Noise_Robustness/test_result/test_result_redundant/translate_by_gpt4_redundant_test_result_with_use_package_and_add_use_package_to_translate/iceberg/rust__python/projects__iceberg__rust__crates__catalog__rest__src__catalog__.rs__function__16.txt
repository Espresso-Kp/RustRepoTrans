Fail
file path is :
projects/iceberg/rust/crates/catalog/rest/src/catalog.rs

output is:



error is :
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
error[E0252]: the name `StatusCode` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:33:42
   |
21 | use reqwest::StatusCode;
   |     ------------------- previous import of the type `StatusCode` here
...
33 | use reqwest::{Client, Request, Response, StatusCode, Url};
   |                                          ^^^^^^^^^^--
   |                                          |
   |                                          `StatusCode` reimported here
   |                                          help: remove unnecessary import
   |
   = note: `StatusCode` must be defined only once in the type namespace of this module

error[E0252]: the name `Error` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:45:14
   |
24 | use std::error::Error;
   |     ----------------- previous import of the trait `Error` here
...
45 |     Catalog, Error, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ^^^^^ `Error` reimported here
   |
   = note: `Error` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
45 |     Catalog, Error as OtherError, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ~~~~~~~~~~~~~~~~~~~

error: cannot find macro `json` in this scope
   --> crates/catalog/rest/src/catalog.rs:333:15
    |
333 |         .body(json!(payload).to_string())
    |               ^^^^
    |
help: consider importing this macro
    |
21  + use serde_json::json;
    |

error[E0425]: cannot find value `NamespaceAlreadyExistsError` in this scope
   --> crates/catalog/rest/src/catalog.rs:342:54
    |
342 |             Ok(StatusCode::CONFLICT) => Err(Box::new(NamespaceAlreadyExistsError)),
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `HTTPError` in this scope
   --> crates/catalog/rest/src/catalog.rs:343:31
    |
343 |             _ => Err(Box::new(HTTPError)),
    |                               ^^^^^^^^^ not found in this scope

warning: unused import: `std::convert::identity`
  --> crates/catalog/rest/src/catalog.rs:25:5
   |
25 | use std::convert::identity;
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `StatusCode`
  --> crates/catalog/rest/src/catalog.rs:33:42
   |
33 | use reqwest::{Client, Request, Response, StatusCode, Url};
   |                                          ^^^^^^^^^^

warning: unused import: `Error`
  --> crates/catalog/rest/src/catalog.rs:45:14
   |
45 |     Catalog, Error, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ^^^^^

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/catalog/rest/src/catalog.rs:323:10
    |
323 |     ) -> Result<Namespace, Box<dyn Error>> {
    |          ^^^^^^            -------------- help: remove this generic argument
    |          |
    |          expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0599]: no function or associated item named `new` found for trait `StdError`
   --> crates/catalog/rest/src/catalog.rs:212:24
    |
212 |                 Error::new(
    |                        ^^^ function or associated item not found in `StdError`

error[E0599]: no function or associated item named `new` found for trait `StdError`
   --> crates/catalog/rest/src/catalog.rs:223:24
    |
223 |                 Error::new(
    |                        ^^^ function or associated item not found in `StdError`

error[E0599]: no function or associated item named `new` found for trait `StdError`
   --> crates/catalog/rest/src/catalog.rs:247:24
    |
247 |                 Error::new(
    |                        ^^^ function or associated item not found in `StdError`

error[E0599]: no function or associated item named `new` found for trait `StdError`
   --> crates/catalog/rest/src/catalog.rs:273:24
    |
273 |                 Error::new(
    |                        ^^^ function or associated item not found in `StdError`

error[E0277]: the trait bound `(dyn StdError + 'static): From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:620:41
    |
620 |                 .query::<TokenResponse, ErrorResponse, OK>(req)
    |                  -----                  ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `(dyn StdError + 'static)`, which is required by `ErrorResponse: Into<(dyn StdError + 'static)>`
    |                  |
    |                  required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<(dyn StdError + 'static)>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:201:31
    |
199 |     async fn query<
    |              ----- required by a bound in this associated function
200 |         R: DeserializeOwned,
201 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0599]: no function or associated item named `new` found for trait `StdError`
   --> crates/catalog/rest/src/catalog.rs:623:28
    |
623 |                     Error::new(
    |                            ^^^ function or associated item not found in `StdError`

error[E0277]: the trait bound `(dyn StdError + 'static): From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:645:37
    |
645 |             .query::<CatalogConfig, ErrorResponse, OK>(request.build()?)
    |              -----                  ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `(dyn StdError + 'static)`, which is required by `ErrorResponse: Into<(dyn StdError + 'static)>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<(dyn StdError + 'static)>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:201:31
    |
199 |     async fn query<
    |              ----- required by a bound in this associated function
200 |         R: DeserializeOwned,
201 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0277]: the size for values of type `(dyn StdError + 'static)` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:201:31
    |
201 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `(dyn StdError + 'static)`
note: required by a bound in `Into`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/convert/mod.rs:445:1

error[E0277]: the size for values of type `(dyn StdError + 'static)` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:235:44
    |
235 |     async fn execute<E: DeserializeOwned + Into<Error>, const SUCCESS_CODE: u16>(
    |                                            ^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `(dyn StdError + 'static)`
note: required by a bound in `Into`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/convert/mod.rs:445:1

error[E0277]: the size for values of type `(dyn StdError + 'static)` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:260:50
    |
260 |     async fn do_execute<R, E: DeserializeOwned + Into<Error>>(
    |                                                  ^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `(dyn StdError + 'static)`
note: required by a bound in `Into`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/convert/mod.rs:445:1

error[E0782]: trait objects must include the `dyn` keyword
   --> crates/catalog/rest/src/catalog.rs:201:36
    |
201 |         E: DeserializeOwned + Into<Error>,
    |                                    ^^^^^
    |
help: add `dyn` keyword before this trait
    |
201 |         E: DeserializeOwned + Into<dyn Error>,
    |                                    +++

error[E0782]: trait objects must include the `dyn` keyword
   --> crates/catalog/rest/src/catalog.rs:235:49
    |
235 |     async fn execute<E: DeserializeOwned + Into<Error>, const SUCCESS_CODE: u16>(
    |                                                 ^^^^^
    |
help: add `dyn` keyword before this trait
    |
235 |     async fn execute<E: DeserializeOwned + Into<dyn Error>, const SUCCESS_CODE: u16>(
    |                                                 +++

error[E0782]: trait objects must include the `dyn` keyword
   --> crates/catalog/rest/src/catalog.rs:260:55
    |
260 |     async fn do_execute<R, E: DeserializeOwned + Into<Error>>(
    |                                                       ^^^^^
    |
help: add `dyn` keyword before this trait
    |
260 |     async fn do_execute<R, E: DeserializeOwned + Into<dyn Error>>(
    |                                                       +++

Some errors have detailed explanations: E0107, E0252, E0277, E0425, E0599, E0782.
For more information about an error, try `rustc --explain E0107`.
warning: `iceberg-catalog-rest` (lib test) generated 3 warnings
error: could not compile `iceberg-catalog-rest` (lib test) due to 19 previous errors; 3 warnings emitted
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
error[E0252]: the name `StatusCode` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:33:42
   |
21 | use reqwest::StatusCode;
   |     ------------------- previous import of the type `StatusCode` here
...
33 | use reqwest::{Client, Request, Response, StatusCode, Url};
   |                                          ^^^^^^^^^^--
   |                                          |
   |                                          `StatusCode` reimported here
   |                                          help: remove unnecessary import
   |
   = note: `StatusCode` must be defined only once in the type namespace of this module

error[E0252]: the name `Error` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:45:14
   |
24 | use std::error::Error;
   |     ----------------- previous import of the trait `Error` here
...
45 |     Catalog, Error, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ^^^^^ `Error` reimported here
   |
   = note: `Error` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
45 |     Catalog, Error as OtherError, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ~~~~~~~~~~~~~~~~~~~

error[E0433]: failed to resolve: use of undeclared crate or module `tokio`
  --> crates/catalog/rest/src/catalog.rs:23:5
   |
23 | use tokio::runtime::Runtime;
   |     ^^^^^ use of undeclared crate or module `tokio`

error: cannot find macro `json` in this scope
   --> crates/catalog/rest/src/catalog.rs:333:15
    |
333 |         .body(json!(payload).to_string())
    |               ^^^^
    |
help: consider importing this macro
    |
21  + use serde_json::json;
    |

error[E0425]: cannot find value `NamespaceAlreadyExistsError` in this scope
   --> crates/catalog/rest/src/catalog.rs:342:54
    |
342 |             Ok(StatusCode::CONFLICT) => Err(Box::new(NamespaceAlreadyExistsError)),
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `HTTPError` in this scope
   --> crates/catalog/rest/src/catalog.rs:343:31
    |
343 |             _ => Err(Box::new(HTTPError)),
    |                               ^^^^^^^^^ not found in this scope

warning: unused import: `std::convert::identity`
  --> crates/catalog/rest/src/catalog.rs:25:5
   |
25 | use std::convert::identity;
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `StatusCode`
  --> crates/catalog/rest/src/catalog.rs:33:42
   |
33 | use reqwest::{Client, Request, Response, StatusCode, Url};
   |                                          ^^^^^^^^^^

warning: unused import: `Error`
  --> crates/catalog/rest/src/catalog.rs:45:14
   |
45 |     Catalog, Error, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ^^^^^

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/catalog/rest/src/catalog.rs:323:10
    |
323 |     ) -> Result<Namespace, Box<dyn Error>> {
    |          ^^^^^^            -------------- help: remove this generic argument
    |          |
    |          expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0599]: no function or associated item named `new` found for trait `StdError`
   --> crates/catalog/rest/src/catalog.rs:212:24
    |
212 |                 Error::new(
    |                        ^^^ function or associated item not found in `StdError`

error[E0599]: no function or associated item named `new` found for trait `StdError`
   --> crates/catalog/rest/src/catalog.rs:223:24
    |
223 |                 Error::new(
    |                        ^^^ function or associated item not found in `StdError`

error[E0599]: no function or associated item named `new` found for trait `StdError`
   --> crates/catalog/rest/src/catalog.rs:247:24
    |
247 |                 Error::new(
    |                        ^^^ function or associated item not found in `StdError`

error[E0599]: no function or associated item named `new` found for trait `StdError`
   --> crates/catalog/rest/src/catalog.rs:273:24
    |
273 |                 Error::new(
    |                        ^^^ function or associated item not found in `StdError`

error[E0277]: the trait bound `(dyn StdError + 'static): From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:620:41
    |
620 |                 .query::<TokenResponse, ErrorResponse, OK>(req)
    |                  -----                  ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `(dyn StdError + 'static)`, which is required by `ErrorResponse: Into<(dyn StdError + 'static)>`
    |                  |
    |                  required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<(dyn StdError + 'static)>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:201:31
    |
199 |     async fn query<
    |              ----- required by a bound in this associated function
200 |         R: DeserializeOwned,
201 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0599]: no function or associated item named `new` found for trait `StdError`
   --> crates/catalog/rest/src/catalog.rs:623:28
    |
623 |                     Error::new(
    |                            ^^^ function or associated item not found in `StdError`

error[E0277]: the trait bound `(dyn StdError + 'static): From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:645:37
    |
645 |             .query::<CatalogConfig, ErrorResponse, OK>(request.build()?)
    |              -----                  ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `(dyn StdError + 'static)`, which is required by `ErrorResponse: Into<(dyn StdError + 'static)>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<(dyn StdError + 'static)>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:201:31
    |
199 |     async fn query<
    |              ----- required by a bound in this associated function
200 |         R: DeserializeOwned,
201 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0277]: the size for values of type `(dyn StdError + 'static)` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:201:31
    |
201 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `(dyn StdError + 'static)`
note: required by a bound in `Into`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/convert/mod.rs:445:1

error[E0277]: the size for values of type `(dyn StdError + 'static)` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:235:44
    |
235 |     async fn execute<E: DeserializeOwned + Into<Error>, const SUCCESS_CODE: u16>(
    |                                            ^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `(dyn StdError + 'static)`
note: required by a bound in `Into`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/convert/mod.rs:445:1

error[E0277]: the size for values of type `(dyn StdError + 'static)` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:260:50
    |
260 |     async fn do_execute<R, E: DeserializeOwned + Into<Error>>(
    |                                                  ^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `(dyn StdError + 'static)`
note: required by a bound in `Into`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/convert/mod.rs:445:1

error[E0782]: trait objects must include the `dyn` keyword
   --> crates/catalog/rest/src/catalog.rs:201:36
    |
201 |         E: DeserializeOwned + Into<Error>,
    |                                    ^^^^^
    |
help: add `dyn` keyword before this trait
    |
201 |         E: DeserializeOwned + Into<dyn Error>,
    |                                    +++

error[E0782]: trait objects must include the `dyn` keyword
   --> crates/catalog/rest/src/catalog.rs:235:49
    |
235 |     async fn execute<E: DeserializeOwned + Into<Error>, const SUCCESS_CODE: u16>(
    |                                                 ^^^^^
    |
help: add `dyn` keyword before this trait
    |
235 |     async fn execute<E: DeserializeOwned + Into<dyn Error>, const SUCCESS_CODE: u16>(
    |                                                 +++

error[E0782]: trait objects must include the `dyn` keyword
   --> crates/catalog/rest/src/catalog.rs:260:55
    |
260 |     async fn do_execute<R, E: DeserializeOwned + Into<Error>>(
    |                                                       ^^^^^
    |
help: add `dyn` keyword before this trait
    |
260 |     async fn do_execute<R, E: DeserializeOwned + Into<dyn Error>>(
    |                                                       +++

Some errors have detailed explanations: E0107, E0252, E0277, E0425, E0433, E0599, E0782.
For more information about an error, try `rustc --explain E0107`.
warning: `iceberg-catalog-rest` (lib) generated 3 warnings
error: could not compile `iceberg-catalog-rest` (lib) due to 20 previous errors; 3 warnings emitted
warning: build failed, waiting for other jobs to finish...


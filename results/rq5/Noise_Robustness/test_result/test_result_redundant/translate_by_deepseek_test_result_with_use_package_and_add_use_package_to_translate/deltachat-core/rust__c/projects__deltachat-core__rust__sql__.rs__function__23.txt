Fail
file path is :
projects/deltachat-core/rust/src/sql.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `HashMap` is defined multiple times
  --> src/sql.rs:10:24
   |
4  | use std::collections::HashMap;
   |     ------------------------- previous import of the type `HashMap` here
...
10 | use std::collections::{HashMap, HashSet};
   |                        ^^^^^^^--
   |                        |
   |                        `HashMap` reimported here
   |                        help: remove unnecessary import
   |
   = note: `HashMap` must be defined only once in the type namespace of this module

error[E0252]: the name `PathBuf` is defined multiple times
  --> src/sql.rs:11:23
   |
5  | use std::path::PathBuf;
   |     ------------------ previous import of the type `PathBuf` here
...
11 | use std::path::{Path, PathBuf};
   |                       ^^^^^^^ `PathBuf` reimported here
   |
   = note: `PathBuf` must be defined only once in the type namespace of this module

error[E0252]: the name `bail` is defined multiple times
  --> src/sql.rs:13:14
   |
6  | use anyhow::{bail, Context, Result};
   |              ---- previous import of the macro `bail` here
...
13 | use anyhow::{bail, Context as _, Result};
   |              ^^^^--
   |              |
   |              `bail` reimported here
   |              help: remove unnecessary import
   |
   = note: `bail` must be defined only once in the macro namespace of this module

error[E0252]: the name `Result` is defined multiple times
  --> src/sql.rs:13:34
   |
6  | use anyhow::{bail, Context, Result};
   |                             ------ previous import of the type `Result` here
...
13 | use anyhow::{bail, Context as _, Result};
   |                                  ^^^^^^ `Result` reimported here
   |
   = note: `Result` must be defined only once in the type namespace of this module

error[E0252]: the name `Connection` is defined multiple times
  --> src/sql.rs:14:51
   |
7  | use rusqlite::{Connection, OpenFlags, Row};
   |                ---------- previous import of the type `Connection` here
...
14 | use rusqlite::{config::DbConfig, types::ValueRef, Connection, OpenFlags, Row};
   |                                                   ^^^^^^^^^^--
   |                                                   |
   |                                                   `Connection` reimported here
   |                                                   help: remove unnecessary import
   |
   = note: `Connection` must be defined only once in the type namespace of this module

error[E0252]: the name `OpenFlags` is defined multiple times
  --> src/sql.rs:14:63
   |
7  | use rusqlite::{Connection, OpenFlags, Row};
   |                            --------- previous import of the type `OpenFlags` here
...
14 | use rusqlite::{config::DbConfig, types::ValueRef, Connection, OpenFlags, Row};
   |                                                               ^^^^^^^^^--
   |                                                               |
   |                                                               `OpenFlags` reimported here
   |                                                               help: remove unnecessary import
   |
   = note: `OpenFlags` must be defined only once in the type namespace of this module

error[E0252]: the name `Row` is defined multiple times
  --> src/sql.rs:14:74
   |
7  | use rusqlite::{Connection, OpenFlags, Row};
   |                                       --- previous import of the type `Row` here
...
14 | use rusqlite::{config::DbConfig, types::ValueRef, Connection, OpenFlags, Row};
   |                                                                          ^^^ `Row` reimported here
   |
   = note: `Row` must be defined only once in the type namespace of this module

error[E0252]: the name `Mutex` is defined multiple times
  --> src/sql.rs:15:19
   |
8  | use tokio::sync::{Mutex, RwLock};
   |                   ----- previous import of the type `Mutex` here
...
15 | use tokio::sync::{Mutex, MutexGuard, RwLock};
   |                   ^^^^^--
   |                   |
   |                   `Mutex` reimported here
   |                   help: remove unnecessary import
   |
   = note: `Mutex` must be defined only once in the type namespace of this module

error[E0252]: the name `RwLock` is defined multiple times
  --> src/sql.rs:15:38
   |
8  | use tokio::sync::{Mutex, RwLock};
   |                          ------ previous import of the type `RwLock` here
...
15 | use tokio::sync::{Mutex, MutexGuard, RwLock};
   |                                      ^^^^^^ `RwLock` reimported here
   |
   = note: `RwLock` must be defined only once in the type namespace of this module

error[E0252]: the name `Context` is defined multiple times
  --> src/sql.rs:21:5
   |
6  | use anyhow::{bail, Context, Result};
   |                    ------- previous import of the trait `Context` here
...
21 | use crate::context::Context;
   |     ^^^^^^^^^^^^^^^^^^^^^^^ `Context` reimported here
   |
   = note: `Context` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
21 | use crate::context::Context as OtherContext;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0425]: cannot find value `SQLITE_ROW` in this scope
   --> src/sql.rs:519:20
    |
519 |     if sqlState == SQLITE_ROW {
    |                    ^^^^^^^^^^ not found in this scope

warning: unused import: `HashMap`
  --> src/sql.rs:10:24
   |
10 | use std::collections::{HashMap, HashSet};
   |                        ^^^^^^^
   |
note: the lint level is defined here
  --> src/lib.rs:6:5
   |
6  |     unused,
   |     ^^^^^^
   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `PathBuf`
  --> src/sql.rs:11:23
   |
11 | use std::path::{Path, PathBuf};
   |                       ^^^^^^^

warning: unused imports: `Result`, `bail`
  --> src/sql.rs:13:14
   |
13 | use anyhow::{bail, Context as _, Result};
   |              ^^^^                ^^^^^^

warning: unused imports: `Connection`, `OpenFlags`, `Row`
  --> src/sql.rs:14:51
   |
14 | use rusqlite::{config::DbConfig, types::ValueRef, Connection, OpenFlags, Row};
   |                                                   ^^^^^^^^^^  ^^^^^^^^^  ^^^

warning: unused imports: `Mutex`, `RwLock`
  --> src/sql.rs:15:19
   |
15 | use tokio::sync::{Mutex, MutexGuard, RwLock};
   |                   ^^^^^              ^^^^^^

warning: unused import: `crate::context::Context`
  --> src/sql.rs:21:5
   |
21 | use crate::context::Context;
   |     ^^^^^^^^^^^^^^^^^^^^^^^

error[E0107]: missing generics for trait `anyhow::Context`
   --> src/sql.rs:724:37
    |
724 | pub async fn housekeeping(context: &Context) -> Result<()> {
    |                                     ^^^^^^^ expected 2 generic arguments
    |
note: trait defined here, with 2 generic parameters: `T`, `E`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:614:11
    |
614 | pub trait Context<T, E>: context::private::Sealed {
    |           ^^^^^^^ -  -
help: add missing generic arguments
    |
724 | pub async fn housekeeping(context: &Context<T, E>) -> Result<()> {
    |                                            ++++++

error[E0107]: missing generics for trait `anyhow::Context`
   --> src/sql.rs:820:44
    |
820 | pub async fn remove_unused_files(context: &Context) -> Result<()> {
    |                                            ^^^^^^^ expected 2 generic arguments
    |
note: trait defined here, with 2 generic parameters: `T`, `E`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:614:11
    |
614 | pub trait Context<T, E>: context::private::Sealed {
    |           ^^^^^^^ -  -
help: add missing generic arguments
    |
820 | pub async fn remove_unused_files(context: &Context<T, E>) -> Result<()> {
    |                                                   ++++++

error[E0107]: missing generics for trait `anyhow::Context`
   --> src/sql.rs:201:40
    |
201 |     async fn try_open(&self, context: &Context, dbfile: &Path, passphrase: String) -> Result<()> {
    |                                        ^^^^^^^ expected 2 generic arguments
    |
note: trait defined here, with 2 generic parameters: `T`, `E`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:614:11
    |
614 | pub trait Context<T, E>: context::private::Sealed {
    |           ^^^^^^^ -  -
help: add missing generic arguments
    |
201 |     async fn try_open(&self, context: &Context<T, E>, dbfile: &Path, passphrase: String) -> Result<()> {
    |                                               ++++++

error[E0107]: missing generics for trait `anyhow::Context`
   --> src/sql.rs:210:50
    |
210 |     pub async fn run_migrations(&self, context: &Context) -> Result<()> {
    |                                                  ^^^^^^^ expected 2 generic arguments
    |
note: trait defined here, with 2 generic parameters: `T`, `E`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:614:11
    |
614 | pub trait Context<T, E>: context::private::Sealed {
    |           ^^^^^^^ -  -
help: add missing generic arguments
    |
210 |     pub async fn run_migrations(&self, context: &Context<T, E>) -> Result<()> {
    |                                                         ++++++

error[E0107]: missing generics for trait `anyhow::Context`
   --> src/sql.rs:287:40
    |
287 |     pub async fn open(&self, context: &Context, passphrase: String) -> Result<()> {
    |                                        ^^^^^^^ expected 2 generic arguments
    |
note: trait defined here, with 2 generic parameters: `T`, `E`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:614:11
    |
614 | pub trait Context<T, E>: context::private::Sealed {
    |           ^^^^^^^ -  -
help: add missing generic arguments
    |
287 |     pub async fn open(&self, context: &Context<T, E>, passphrase: String) -> Result<()> {
    |                                               ++++++

error[E0038]: the trait `anyhow::Context` cannot be made into an object
   --> src/sql.rs:204:14
    |
204 |         self.run_migrations(context).await?;
    |              ^^^^^^^^^^^^^^ `anyhow::Context` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:616:8
    |
616 |     fn context<C>(self, context: C) -> Result<T, Error>
    |        ^^^^^^^ the trait cannot be made into an object because method `context` has generic type parameters
...
622 |     fn with_context<C, F>(self, f: F) -> Result<T, Error>
    |        ^^^^^^^^^^^^ the trait cannot be made into an object because method `with_context` has generic type parameters
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `anyhow::Context` for this new enum and using it instead:
              std::option::Option<T>
              std::result::Result<T, E>

error[E0038]: the trait `anyhow::Context` cannot be made into an object
   --> src/sql.rs:297:32
    |
297 |         if let Err(err) = self.try_open(context, &self.dbfile, passphrase).await {
    |                                ^^^^^^^^ `anyhow::Context` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:616:8
    |
616 |     fn context<C>(self, context: C) -> Result<T, Error>
    |        ^^^^^^^ the trait cannot be made into an object because method `context` has generic type parameters
...
622 |     fn with_context<C, F>(self, f: F) -> Result<T, Error>
    |        ^^^^^^^^^^^^ the trait cannot be made into an object because method `with_context` has generic type parameters
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `anyhow::Context` for this new enum and using it instead:
              std::option::Option<T>
              std::result::Result<T, E>

error[E0425]: cannot find function `sqlite3_mprintf` in this scope
   --> src/sql.rs:515:20
    |
515 |     let querystr = sqlite3_mprintf("PRAGMA table_info(%s)", name)?;
    |                    ^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `dc_sqlite3_prepare` in this scope
   --> src/sql.rs:516:16
    |
516 |     let stmt = dc_sqlite3_prepare(&self, querystr)?;
    |                ^^^^^^^^^^^^^^^^^^-----------------
    |                |
    |                help: try calling `dc_sqlite3_prepare` as a method: `self.dc_sqlite3_prepare(querystr)`

error[E0425]: cannot find function `sqlite3_step` in this scope
   --> src/sql.rs:518:20
    |
518 |     let sqlState = sqlite3_step(stmt)?;
    |                    ^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `sqlite3_finalize` in this scope
   --> src/sql.rs:523:5
    |
523 |     sqlite3_finalize(stmt)?;
    |     ^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `sqlite3_free` in this scope
   --> src/sql.rs:524:5
    |
524 |     sqlite3_free(querystr);
    |     ^^^^^^^^^^^^ not found in this scope

error[E0038]: the trait `anyhow::Context` cannot be made into an object
   --> src/sql.rs:724:37
    |
724 | pub async fn housekeeping(context: &Context) -> Result<()> {
    |                                     ^^^^^^^ `anyhow::Context` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:616:8
    |
616 |     fn context<C>(self, context: C) -> Result<T, Error>
    |        ^^^^^^^ the trait cannot be made into an object because method `context` has generic type parameters
...
622 |     fn with_context<C, F>(self, f: F) -> Result<T, Error>
    |        ^^^^^^^^^^^^ the trait cannot be made into an object because method `with_context` has generic type parameters
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `anyhow::Context` for this new enum and using it instead:
              std::option::Option<T>
              std::result::Result<T, E>

error[E0038]: the trait `anyhow::Context` cannot be made into an object
   --> src/sql.rs:734:43
    |
734 |     if let Err(err) = remove_unused_files(context).await {
    |                                           ^^^^^^^ `anyhow::Context` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:616:8
    |
616 |     fn context<C>(self, context: C) -> Result<T, Error>
    |        ^^^^^^^ the trait cannot be made into an object because method `context` has generic type parameters
...
622 |     fn with_context<C, F>(self, f: F) -> Result<T, Error>
    |        ^^^^^^^^^^^^ the trait cannot be made into an object because method `with_context` has generic type parameters
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `anyhow::Context` for this new enum and using it instead:
              std::option::Option<T>
              std::result::Result<T, E>

error[E0038]: the trait `anyhow::Context` cannot be made into an object
   --> src/sql.rs:820:44
    |
820 | pub async fn remove_unused_files(context: &Context) -> Result<()> {
    |                                            ^^^^^^^ `anyhow::Context` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:616:8
    |
616 |     fn context<C>(self, context: C) -> Result<T, Error>
    |        ^^^^^^^ the trait cannot be made into an object because method `context` has generic type parameters
...
622 |     fn with_context<C, F>(self, f: F) -> Result<T, Error>
    |        ^^^^^^^^^^^^ the trait cannot be made into an object because method `with_context` has generic type parameters
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `anyhow::Context` for this new enum and using it instead:
              std::option::Option<T>
              std::result::Result<T, E>

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/sql.rs:855:56
    |
855 |                     maybe_add_file(&mut files_in_use, &row?);
    |                                                        ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/sql.rs:855:56
    |
855 |                     maybe_add_file(&mut files_in_use, &row?);
    |                                                        ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `ControlFlow`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
    |
85  | pub enum ControlFlow<B, C = ()> {
    |                         ^^^^^^ required by this bound in `ControlFlow`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/sql.rs:855:59
    |
855 |                     maybe_add_file(&mut files_in_use, &row?);
    |                                                           ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `Break`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
    |
85  | pub enum ControlFlow<B, C = ()> {
    |                         ^^^^^^ required by this bound in `Break`
...
93  |     Break(B),
    |     ----- required by a bound in this variant

error[E0038]: the trait `anyhow::Context` cannot be made into an object
   --> src/sql.rs:201:40
    |
201 |     async fn try_open(&self, context: &Context, dbfile: &Path, passphrase: String) -> Result<()> {
    |                                        ^^^^^^^ `anyhow::Context` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:616:8
    |
616 |     fn context<C>(self, context: C) -> Result<T, Error>
    |        ^^^^^^^ the trait cannot be made into an object because method `context` has generic type parameters
...
622 |     fn with_context<C, F>(self, f: F) -> Result<T, Error>
    |        ^^^^^^^^^^^^ the trait cannot be made into an object because method `with_context` has generic type parameters
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `anyhow::Context` for this new enum and using it instead:
              std::option::Option<T>
              std::result::Result<T, E>

error[E0038]: the trait `anyhow::Context` cannot be made into an object
   --> src/sql.rs:210:50
    |
210 |     pub async fn run_migrations(&self, context: &Context) -> Result<()> {
    |                                                  ^^^^^^^ `anyhow::Context` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:616:8
    |
616 |     fn context<C>(self, context: C) -> Result<T, Error>
    |        ^^^^^^^ the trait cannot be made into an object because method `context` has generic type parameters
...
622 |     fn with_context<C, F>(self, f: F) -> Result<T, Error>
    |        ^^^^^^^^^^^^ the trait cannot be made into an object because method `with_context` has generic type parameters
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `anyhow::Context` for this new enum and using it instead:
              std::option::Option<T>
              std::result::Result<T, E>

error[E0038]: the trait `anyhow::Context` cannot be made into an object
   --> src/sql.rs:287:40
    |
287 |     pub async fn open(&self, context: &Context, passphrase: String) -> Result<()> {
    |                                        ^^^^^^^ `anyhow::Context` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:616:8
    |
616 |     fn context<C>(self, context: C) -> Result<T, Error>
    |        ^^^^^^^ the trait cannot be made into an object because method `context` has generic type parameters
...
622 |     fn with_context<C, F>(self, f: F) -> Result<T, Error>
    |        ^^^^^^^^^^^^ the trait cannot be made into an object because method `with_context` has generic type parameters
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `anyhow::Context` for this new enum and using it instead:
              std::option::Option<T>
              std::result::Result<T, E>

error[E0038]: the trait `anyhow::Context` cannot be made into an object
   --> src/context.rs:345:25
    |
345 |             context.sql.open(&context, "".to_string()).await?;
    |                         ^^^^ `anyhow::Context` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:616:8
    |
616 |     fn context<C>(self, context: C) -> Result<T, Error>
    |        ^^^^^^^ the trait cannot be made into an object because method `context` has generic type parameters
...
622 |     fn with_context<C, F>(self, f: F) -> Result<T, Error>
    |        ^^^^^^^^^^^^ the trait cannot be made into an object because method `with_context` has generic type parameters
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `anyhow::Context` for this new enum and using it instead:
              std::option::Option<T>
              std::result::Result<T, E>

error[E0038]: the trait `anyhow::Context` cannot be made into an object
   --> src/scheduler.rs:503:35
    |
503 |                 sql::housekeeping(ctx).await.log_err(ctx).ok();
    |                                   ^^^ `anyhow::Context` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:616:8
    |
616 |     fn context<C>(self, context: C) -> Result<T, Error>
    |        ^^^^^^^ the trait cannot be made into an object because method `context` has generic type parameters
...
622 |     fn with_context<C, F>(self, f: F) -> Result<T, Error>
    |        ^^^^^^^^^^^^ the trait cannot be made into an object because method `with_context` has generic type parameters
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `anyhow::Context` for this new enum and using it instead:
              std::option::Option<T>
              std::result::Result<T, E>

error[E0038]: the trait `anyhow::Context` cannot be made into an object
   --> src/context.rs:382:22
    |
382 |             self.sql.open(self, passphrase).await?;
    |                      ^^^^ `anyhow::Context` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:616:8
    |
616 |     fn context<C>(self, context: C) -> Result<T, Error>
    |        ^^^^^^^ the trait cannot be made into an object because method `context` has generic type parameters
...
622 |     fn with_context<C, F>(self, f: F) -> Result<T, Error>
    |        ^^^^^^^^^^^^ the trait cannot be made into an object because method `with_context` has generic type parameters
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `anyhow::Context` for this new enum and using it instead:
              std::option::Option<T>
              std::result::Result<T, E>

error[E0038]: the trait `anyhow::Context` cannot be made into an object
   --> src/imex.rs:793:23
    |
793 |     sql::housekeeping(context).await.log_err(context).ok();
    |                       ^^^^^^^ `anyhow::Context` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:616:8
    |
616 |     fn context<C>(self, context: C) -> Result<T, Error>
    |        ^^^^^^^ the trait cannot be made into an object because method `context` has generic type parameters
...
622 |     fn with_context<C, F>(self, f: F) -> Result<T, Error>
    |        ^^^^^^^^^^^^ the trait cannot be made into an object because method `with_context` has generic type parameters
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `anyhow::Context` for this new enum and using it instead:
              std::option::Option<T>
              std::result::Result<T, E>

error[E0038]: the trait `anyhow::Context` cannot be made into an object
   --> src/imex.rs:482:17
    |
482 |     context.sql.run_migrations(context).await?;
    |                 ^^^^^^^^^^^^^^ `anyhow::Context` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:616:8
    |
616 |     fn context<C>(self, context: C) -> Result<T, Error>
    |        ^^^^^^^ the trait cannot be made into an object because method `context` has generic type parameters
...
622 |     fn with_context<C, F>(self, f: F) -> Result<T, Error>
    |        ^^^^^^^^^^^^ the trait cannot be made into an object because method `with_context` has generic type parameters
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `anyhow::Context` for this new enum and using it instead:
              std::option::Option<T>
              std::result::Result<T, E>

error[E0038]: the trait `anyhow::Context` cannot be made into an object
   --> src/imex/transfer.rs:423:25
    |
423 |             context.sql.run_migrations(context).await?;
    |                         ^^^^^^^^^^^^^^ `anyhow::Context` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:616:8
    |
616 |     fn context<C>(self, context: C) -> Result<T, Error>
    |        ^^^^^^^ the trait cannot be made into an object because method `context` has generic type parameters
...
622 |     fn with_context<C, F>(self, f: F) -> Result<T, Error>
    |        ^^^^^^^^^^^^ the trait cannot be made into an object because method `with_context` has generic type parameters
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `anyhow::Context` for this new enum and using it instead:
              std::option::Option<T>
              std::result::Result<T, E>

error[E0782]: trait objects must include the `dyn` keyword
   --> src/sql.rs:287:40
    |
287 |     pub async fn open(&self, context: &Context, passphrase: String) -> Result<()> {
    |                                        ^^^^^^^
    |
help: add `dyn` keyword before this trait
    |
287 |     pub async fn open(&self, context: &dyn Context, passphrase: String) -> Result<()> {
    |                                        +++

error[E0782]: trait objects must include the `dyn` keyword
   --> src/sql.rs:210:50
    |
210 |     pub async fn run_migrations(&self, context: &Context) -> Result<()> {
    |                                                  ^^^^^^^
    |
help: add `dyn` keyword before this trait
    |
210 |     pub async fn run_migrations(&self, context: &dyn Context) -> Result<()> {
    |                                                  +++

error[E0782]: trait objects must include the `dyn` keyword
   --> src/sql.rs:201:40
    |
201 |     async fn try_open(&self, context: &Context, dbfile: &Path, passphrase: String) -> Result<()> {
    |                                        ^^^^^^^
    |
help: add `dyn` keyword before this trait
    |
201 |     async fn try_open(&self, context: &dyn Context, dbfile: &Path, passphrase: String) -> Result<()> {
    |                                        +++

error[E0782]: trait objects must include the `dyn` keyword
   --> src/sql.rs:820:44
    |
820 | pub async fn remove_unused_files(context: &Context) -> Result<()> {
    |                                            ^^^^^^^
    |
help: add `dyn` keyword before this trait
    |
820 | pub async fn remove_unused_files(context: &dyn Context) -> Result<()> {
    |                                            +++

error[E0782]: trait objects must include the `dyn` keyword
   --> src/sql.rs:724:37
    |
724 | pub async fn housekeeping(context: &Context) -> Result<()> {
    |                                     ^^^^^^^
    |
help: add `dyn` keyword before this trait
    |
724 | pub async fn housekeeping(context: &dyn Context) -> Result<()> {
    |                                     +++

Some errors have detailed explanations: E0038, E0107, E0252, E0277, E0425, E0782.
For more information about an error, try `rustc --explain E0038`.
warning: `deltachat` (lib) generated 6 warnings
error: could not compile `deltachat` (lib) due to 43 previous errors; 6 warnings emitted
warning: build failed, waiting for other jobs to finish...
warning: `deltachat` (lib test) generated 6 warnings (6 duplicates)
error: could not compile `deltachat` (lib test) due to 43 previous errors; 6 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


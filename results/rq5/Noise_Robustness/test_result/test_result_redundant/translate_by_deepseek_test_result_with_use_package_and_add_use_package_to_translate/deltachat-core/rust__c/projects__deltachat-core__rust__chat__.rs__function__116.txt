Fail
file path is :
projects/deltachat-core/rust/src/chat.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `HashMap` is defined multiple times
  --> src/chat.rs:17:24
   |
7  | use std::collections::HashMap;
   |     ------------------------- previous import of the type `HashMap` here
...
17 | use std::collections::{HashMap, HashSet};
   |                        ^^^^^^^--
   |                        |
   |                        `HashMap` reimported here
   |                        help: remove unnecessary import
   |
   = note: `HashMap` must be defined only once in the type namespace of this module

error[E0432]: unresolved import `crate::Context`
  --> src/chat.rs:11:5
   |
11 | use crate::Context;
   |     ^^^^^^^^^^^^^^ no `Context` in the root
   |
help: a similar name exists in the module
   |
11 | use crate::context;
   |            ~~~~~~~
help: consider importing one of these items instead
   |
11 | use anyhow::Context;
   |     ~~~~~~~~~~~~~~~
11 | use core::task::Context;
   |     ~~~~~~~~~~~~~~~~~~~
11 | use crate::context::Context;
   |     ~~~~~~~~~~~~~~~~~~~~~~~
11 | use exif::Context;
   |     ~~~~~~~~~~~~~
     and 2 other candidates

error[E0432]: unresolved import `crate::Viewtype`
  --> src/chat.rs:12:5
   |
12 | use crate::Viewtype;
   |     ^^^^^^^^^^^^^^^ no `Viewtype` in the root
   |
help: consider importing this enum instead
   |
12 | use crate::message::Viewtype;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0432]: unresolved import `crate::MsgId`
  --> src/chat.rs:13:5
   |
13 | use crate::MsgId;
   |     ^^^^^^^^^^^^ no `MsgId` in the root
   |
help: consider importing this struct instead
   |
13 | use crate::message::MsgId;
   |     ~~~~~~~~~~~~~~~~~~~~~

error[E0432]: unresolved import `crate::ChatId`
  --> src/chat.rs:14:5
   |
14 | use crate::ChatId;
   |     ^^^^^^^^^^^^^ no `ChatId` in the root

error[E0425]: cannot find value `DC_CONTEXT_MAGIC` in this scope
    --> src/chat.rs:3378:58
     |
3378 |     if context.inner.is_null() || context.inner.magic != DC_CONTEXT_MAGIC {
     |                                                          ^^^^^^^^^^^^^^^^ not found in this scope

error[E0603]: module `params` is private
   --> src/chat.rs:6:22
    |
6   | use rusqlite::{self, params::Params};
    |                      ^^^^^^ private module
    |
note: the module `params` is defined here
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/lib.rs:124:1
    |
124 | mod params;
    | ^^^^^^^^^^
help: consider importing one of these items instead
    |
6   | use rusqlite::{self, crate::chat::rusqlite::Params};
    |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
6   | use rusqlite::{self, rusqlite::Params};
    |                      ~~~~~~~~~~~~~~~~

warning: unused import: `std::sync::Arc`
 --> src/chat.rs:4:5
  |
4 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `tokio::sync::RwLock`
 --> src/chat.rs:5:5
  |
5 | use tokio::sync::RwLock;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::atomic::AtomicBool`
 --> src/chat.rs:8:5
  |
8 | use std::sync::atomic::AtomicBool;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `tokio::sync::Notify`
 --> src/chat.rs:9:5
  |
9 | use tokio::sync::Notify;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `once_cell::sync::OnceCell`
  --> src/chat.rs:10:5
   |
10 | use once_cell::sync::OnceCell;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `HashMap`
  --> src/chat.rs:17:24
   |
17 | use std::collections::{HashMap, HashSet};
   |                        ^^^^^^^

error[E0599]: no method named `is_null` found for struct `Arc<InnerContext>` in the current scope
    --> src/chat.rs:3378:22
     |
3378 |     if context.inner.is_null() || context.inner.magic != DC_CONTEXT_MAGIC {
     |                      ^^^^^^^ method not found in `Arc<InnerContext>`

error[E0609]: no field `magic` on type `Arc<InnerContext>`
    --> src/chat.rs:3378:49
     |
3378 |     if context.inner.is_null() || context.inner.magic != DC_CONTEXT_MAGIC {
     |                                                 ^^^^^ unknown field
     |
     = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0425]: cannot find function `dc_array_new` in this scope
    --> src/chat.rs:3382:15
     |
3382 |     let ret = dc_array_new(context, 100).await?;
     |               ^^^^^^^^^^^^ not found in this scope

error[E0599]: no function or associated item named `from_iter` found for struct `param::Params` in the current scope
    --> src/chat.rs:3385:26
     |
3385 |     let params = Params::from_iter([chat_id.unwrap().0, DC_CHAT_ID_TRASH.0, msg_type.0, msg_type2.0, msg_type3.0]);
     |                          ^^^^^^^^^ function or associated item not found in `Params`
     |
    ::: src/param.rs:212:1
     |
212  | pub struct Params {
     | ----------------- function or associated item `from_iter` not found for this struct
     |
note: if you're trying to build a new `param::Params`, consider using `param::Params::new` which returns `param::Params`
    --> src/param.rs:272:5
     |
272  |     pub fn new() -> Self {
     |     ^^^^^^^^^^^^^^^^^^^^
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following trait defines an item `from_iter`, perhaps you need to implement it:
             candidate #1: `FromIterator`

error[E0609]: no field `0` on type `Viewtype`
    --> src/chat.rs:3385:86
     |
3385 |     let params = Params::from_iter([chat_id.unwrap().0, DC_CHAT_ID_TRASH.0, msg_type.0, msg_type2.0, msg_type3.0]);
     |                                                                                      ^ unknown field

error[E0609]: no field `0` on type `Viewtype`
    --> src/chat.rs:3385:99
     |
3385 |     let params = Params::from_iter([chat_id.unwrap().0, DC_CHAT_ID_TRASH.0, msg_type.0, msg_type2.0, msg_type3.0]);
     |                                                                                                   ^ unknown field

error[E0609]: no field `0` on type `Viewtype`
    --> src/chat.rs:3385:112
     |
3385 |     let params = Params::from_iter([chat_id.unwrap().0, DC_CHAT_ID_TRASH.0, msg_type.0, msg_type2.0, msg_type3.0]);
     |                                                                                                                ^ unknown field

error[E0599]: no method named `query_map` found for reference `&context::Context` in the current scope
    --> src/chat.rs:3387:24
     |
3387 |     let rows = context.query_map(sql, params, |row| {
     |                --------^^^^^^^^^ method not found in `&Context`
     |
help: one of the expressions' fields has a method of the same name
     |
3387 |     let rows = context.inner.sql.query_map(sql, params, |row| {
     |                        ++++++++++
help: one of the expressions' fields has a method of the same name
     |
3387 |     let rows = context.sql.query_map(sql, params, |row| {
     |                        ++++

error[E0425]: cannot find function `dc_array_add_id` in this scope
    --> src/chat.rs:3388:12
     |
3388 |         Ok(dc_array_add_id(ret, row.get(0)?).unwrap())
     |            ^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `dc_array_unref` in this scope
    --> src/chat.rs:3391:5
     |
3391 |     dc_array_unref(ret).await?;
     |     ^^^^^^^^^^^^^^ not found in this scope

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/chat.rs:3435:15
     |
3435 |         .await?;
     |               ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<std::option::Option<MsgId>, anyhow::Error>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<std::option::Option<MsgId>, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/chat.rs:3435:15
     |
3435 |         .await?;
     |               ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<std::option::Option<MsgId>, anyhow::Error>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<std::option::Option<MsgId>, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/chat.rs:3435:15
     |
3435 |         .await?;
     |               ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<std::option::Option<MsgId>, anyhow::Error>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<std::option::Option<MsgId>, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0609]: no field `0` on type `message::Viewtype`
    --> src/chat.rs:3385:86
     |
3385 |     let params = Params::from_iter([chat_id.unwrap().0, DC_CHAT_ID_TRASH.0, msg_type.0, msg_type2.0, msg_type3.0]);
     |                                                                                      ^ unknown field

error[E0609]: no field `0` on type `message::Viewtype`
    --> src/chat.rs:3385:99
     |
3385 |     let params = Params::from_iter([chat_id.unwrap().0, DC_CHAT_ID_TRASH.0, msg_type.0, msg_type2.0, msg_type3.0]);
     |                                                                                                   ^ unknown field

error[E0609]: no field `0` on type `message::Viewtype`
    --> src/chat.rs:3385:112
     |
3385 |     let params = Params::from_iter([chat_id.unwrap().0, DC_CHAT_ID_TRASH.0, msg_type.0, msg_type2.0, msg_type3.0]);
     |                                                                                                                ^ unknown field

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/chat.rs:3435:15
     |
3435 |         .await?;
     |               ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<std::option::Option<message::MsgId>, anyhow::Error>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<std::option::Option<message::MsgId>, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/chat.rs:3435:15
     |
3435 |         .await?;
     |               ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<std::option::Option<message::MsgId>, anyhow::Error>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<std::option::Option<message::MsgId>, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/chat.rs:3435:15
     |
3435 |         .await?;
     |               ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<std::option::Option<message::MsgId>, anyhow::Error>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<std::option::Option<message::MsgId>, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

Some errors have detailed explanations: E0252, E0277, E0425, E0432, E0599, E0603, E0609.
For more information about an error, try `rustc --explain E0252`.
warning: `deltachat` (lib) generated 6 warnings
error: could not compile `deltachat` (lib) due to 20 previous errors; 6 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/chat.rs:7107:19
     |
7107 |             .await?
     |                   ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/chat.rs:7107:19
     |
7107 |             .await?
     |                   ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/chat.rs:7167:19
     |
7167 |             .await?
     |                   ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/chat.rs:7167:19
     |
7167 |             .await?
     |                   ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/chat.rs:7179:19
     |
7179 |             .await?
     |                   ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/chat.rs:7179:19
     |
7179 |             .await?
     |                   ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/chat.rs:7191:19
     |
7191 |             .await?
     |                   ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/chat.rs:7191:19
     |
7191 |             .await?
     |                   ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/chat.rs:7203:19
     |
7203 |             .await?
     |                   ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/chat.rs:7203:19
     |
7203 |             .await?
     |                   ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/chat.rs:7215:19
     |
7215 |             .await?
     |                   ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/chat.rs:7215:19
     |
7215 |             .await?
     |                   ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/chat.rs:7227:19
     |
7227 |             .await?
     |                   ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/chat.rs:7227:19
     |
7227 |             .await?
     |                   ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/chat.rs:7239:19
     |
7239 |             .await?
     |                   ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/chat.rs:7239:19
     |
7239 |             .await?
     |                   ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/chat.rs:7254:19
     |
7254 |             .await?
     |                   ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/chat.rs:7254:19
     |
7254 |             .await?
     |                   ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/chat.rs:7107:19
     |
7107 |             .await?
     |                   ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/chat.rs:7167:19
     |
7167 |             .await?
     |                   ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/chat.rs:7179:19
     |
7179 |             .await?
     |                   ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/chat.rs:7191:19
     |
7191 |             .await?
     |                   ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/chat.rs:7203:19
     |
7203 |             .await?
     |                   ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/chat.rs:7215:19
     |
7215 |             .await?
     |                   ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/chat.rs:7227:19
     |
7227 |             .await?
     |                   ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/chat.rs:7239:19
     |
7239 |             .await?
     |                   ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/chat.rs:7254:19
     |
7254 |             .await?
     |                   ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

warning: `deltachat` (lib test) generated 6 warnings (6 duplicates)
error: could not compile `deltachat` (lib test) due to 47 previous errors; 6 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


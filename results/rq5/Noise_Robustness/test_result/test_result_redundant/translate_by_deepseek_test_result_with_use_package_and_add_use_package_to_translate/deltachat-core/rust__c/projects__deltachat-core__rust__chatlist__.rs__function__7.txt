Fail
file path is :
projects/deltachat-core/rust/src/chatlist.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0061]: this function takes 4 arguments but 0 arguments were supplied
   --> src/chatlist.rs:370:15
    |
370 |     let ret = Summary::new();
    |               ^^^^^^^^^^^^-- multiple arguments are missing
    |
note: associated function defined here
   --> src/summary.rs:90:18
    |
90  |     pub async fn new(
    |                  ^^^
91  |         context: &Context,
    |         -----------------
92  |         msg: &Message,
    |         -------------
93  |         chat: &Chat,
    |         -----------
94  |         contact: Option<&Contact>,
    |         -------------------------
help: provide the arguments
    |
370 |     let ret = Summary::new(/* &context::Context */, /* &message::Message */, /* &Chat */, /* std::option::Option<&Contact> */);
    |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `get` found for reference `&Chatlist` in the current scope
   --> src/chatlist.rs:371:51
    |
371 |     let lastmsg_id = if let Some(chatlist) = self.get("chatlist") {
    |                                                   ^^^ method not found in `&Chatlist`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `get`, perhaps you need to implement one of them:
            candidate #1: `SliceIndex`
            candidate #2: `fallible_streaming_iterator::FallibleStreamingIterator`
            candidate #3: `quinn_proto::coding::BufExt`
            candidate #4: `rustls::server::server_conn::StoresServerSessions`
            candidate #5: `prometheus_client::metrics::counter::Atomic`
            candidate #6: `prometheus_client::metrics::gauge::Atomic`
            candidate #7: `rustls::server::server_conn::StoresServerSessions`
            candidate #8: `bitvec::slice::api::BitSliceIndex`
            candidate #9: `iroh_quinn_proto::coding::BufExt`
            candidate #10: `nonzero_ext::NonZero`
            candidate #11: `toml_edit::table::TableLike`
help: one of the expressions' fields has a method of the same name
    |
371 |     let lastmsg_id = if let Some(chatlist) = self.ids.get("chatlist") {
    |                                                   ++++

error[E0308]: mismatched types
   --> src/chatlist.rs:374:23
    |
374 |             return Ok(ret);
    |                    -- ^^^ expected `Summary`, found future
    |                    |
    |                    arguments to this enum variant are incorrect
    |
help: the type constructed contains `impl futures::Future<Output = std::result::Result<Summary, anyhow::Error>>` due to the type of the argument passed
   --> src/chatlist.rs:374:20
    |
374 |             return Ok(ret);
    |                    ^^^---^
    |                       |
    |                       this argument influences the type of `Ok`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
    |
506 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

error[E0308]: mismatched types
   --> src/chatlist.rs:378:19
    |
378 |         return Ok(ret);
    |                -- ^^^ expected `Summary`, found future
    |                |
    |                arguments to this enum variant are incorrect
    |
help: the type constructed contains `impl futures::Future<Output = std::result::Result<Summary, anyhow::Error>>` due to the type of the argument passed
   --> src/chatlist.rs:378:16
    |
378 |         return Ok(ret);
    |                ^^^---^
    |                   |
    |                   this argument influences the type of `Ok`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
    |
506 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

error[E0609]: no field `id` on type `std::option::Option<&Chat>`
   --> src/chatlist.rs:399:13
    |
399 |     if chat.id.is_archived_link() {
    |             ^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
399 |     if chat.unwrap().id.is_archived_link() {
    |             +++++++++

error[E0609]: no field `text` on type `impl futures::Future<Output = std::result::Result<Summary, anyhow::Error>>`
   --> src/chatlist.rs:400:13
    |
400 |         ret.text = dc_strdup(None).await;
    |             ^^^^ unknown field

error[E0425]: cannot find function `dc_strdup` in this scope
   --> src/chatlist.rs:400:20
    |
400 |         ret.text = dc_strdup(None).await;
    |                    ^^^^^^^^^ not found in this scope

error[E0609]: no field `text` on type `impl futures::Future<Output = std::result::Result<Summary, anyhow::Error>>`
   --> src/chatlist.rs:402:13
    |
402 |         ret.text = stock_str::no_messages(context).await;
    |             ^^^^ unknown field

error[E0308]: mismatched types
   --> src/chatlist.rs:407:8
    |
407 |     Ok(ret)
    |     -- ^^^ expected `Summary`, found future
    |     |
    |     arguments to this enum variant are incorrect
    |
help: the type constructed contains `impl futures::Future<Output = std::result::Result<Summary, anyhow::Error>>` due to the type of the argument passed
   --> src/chatlist.rs:407:5
    |
407 |     Ok(ret)
    |     ^^^---^
    |        |
    |        this argument influences the type of `Ok`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
    |
506 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

error[E0061]: this function takes 4 arguments but 0 arguments were supplied
   --> src/chatlist.rs:370:15
    |
370 |     let ret = Summary::new();
    |               ^^^^^^^^^^^^-- multiple arguments are missing
    |
note: associated function defined here
   --> src/summary.rs:90:18
    |
90  |     pub async fn new(
    |                  ^^^
91  |         context: &Context,
    |         -----------------
92  |         msg: &Message,
    |         -------------
93  |         chat: &Chat,
    |         -----------
94  |         contact: Option<&Contact>,
    |         -------------------------
help: provide the arguments
    |
370 |     let ret = Summary::new(/* &context::Context */, /* &message::Message */, /* &chat::Chat */, /* std::option::Option<&contact::Contact> */);
    |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `get` found for reference `&chatlist::Chatlist` in the current scope
   --> src/chatlist.rs:371:51
    |
371 |     let lastmsg_id = if let Some(chatlist) = self.get("chatlist") {
    |                                                   ^^^ method not found in `&Chatlist`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `get`, perhaps you need to implement one of them:
            candidate #1: `SliceIndex`
            candidate #2: `fallible_streaming_iterator::FallibleStreamingIterator`
            candidate #3: `quinn_proto::coding::BufExt`
            candidate #4: `rustls::server::server_conn::StoresServerSessions`
            candidate #5: `ResultCache`
            candidate #6: `prometheus_client::metrics::counter::Atomic`
            candidate #7: `prometheus_client::metrics::gauge::Atomic`
            candidate #8: `rustls::server::server_conn::StoresServerSessions`
            candidate #9: `bitvec::slice::api::BitSliceIndex`
            candidate #10: `iroh_quinn_proto::coding::BufExt`
            candidate #11: `nonzero_ext::NonZero`
            candidate #12: `toml_edit::table::TableLike`
help: one of the expressions' fields has a method of the same name
    |
371 |     let lastmsg_id = if let Some(chatlist) = self.ids.get("chatlist") {
    |                                                   ++++

error[E0308]: mismatched types
   --> src/chatlist.rs:374:23
    |
374 |             return Ok(ret);
    |                    -- ^^^ expected `Summary`, found future
    |                    |
    |                    arguments to this enum variant are incorrect
    |
help: the type constructed contains `impl futures::Future<Output = std::result::Result<summary::Summary, anyhow::Error>>` due to the type of the argument passed
   --> src/chatlist.rs:374:20
    |
374 |             return Ok(ret);
    |                    ^^^---^
    |                       |
    |                       this argument influences the type of `Ok`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
    |
506 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

error[E0308]: mismatched types
   --> src/chatlist.rs:378:19
    |
378 |         return Ok(ret);
    |                -- ^^^ expected `Summary`, found future
    |                |
    |                arguments to this enum variant are incorrect
    |
help: the type constructed contains `impl futures::Future<Output = std::result::Result<summary::Summary, anyhow::Error>>` due to the type of the argument passed
   --> src/chatlist.rs:378:16
    |
378 |         return Ok(ret);
    |                ^^^---^
    |                   |
    |                   this argument influences the type of `Ok`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
    |
506 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

error[E0609]: no field `id` on type `std::option::Option<&chat::Chat>`
   --> src/chatlist.rs:399:13
    |
399 |     if chat.id.is_archived_link() {
    |             ^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
399 |     if chat.unwrap().id.is_archived_link() {
    |             +++++++++

error[E0609]: no field `text` on type `impl futures::Future<Output = std::result::Result<summary::Summary, anyhow::Error>>`
   --> src/chatlist.rs:400:13
    |
400 |         ret.text = dc_strdup(None).await;
    |             ^^^^ unknown field

error[E0609]: no field `text` on type `impl futures::Future<Output = std::result::Result<summary::Summary, anyhow::Error>>`
   --> src/chatlist.rs:402:13
    |
402 |         ret.text = stock_str::no_messages(context).await;
    |             ^^^^ unknown field

error[E0308]: mismatched types
   --> src/chatlist.rs:407:8
    |
407 |     Ok(ret)
    |     -- ^^^ expected `Summary`, found future
    |     |
    |     arguments to this enum variant are incorrect
    |
help: the type constructed contains `impl futures::Future<Output = std::result::Result<summary::Summary, anyhow::Error>>` due to the type of the argument passed
   --> src/chatlist.rs:407:5
    |
407 |     Ok(ret)
    |     ^^^---^
    |        |
    |        this argument influences the type of `Ok`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
    |
506 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

Some errors have detailed explanations: E0061, E0308, E0425, E0599, E0609.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `deltachat` (lib) due to 9 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 9 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


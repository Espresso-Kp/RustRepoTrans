Fail
file path is :
projects/deltachat-core/rust/src/aheader.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0449]: visibility qualifiers are not permitted here
  --> src/aheader.rs:97:1
   |
97 | pub fn from_str(s: &str) -> Result<Aheader> {
   | ^^^
   |
   = note: trait items always share the visibility of their trait

error[E0407]: method `add_attribute` is not a member of trait `FromStr`
   --> src/aheader.rs:155:1
    |
155 | / fn add_attribute(aheader: &mut Aheader, attr_name: &str, attr_value: &str) -> bool {
156 | |     // Implementation of add_attribute function
157 | |     true
158 | | }
    | |_^ not a member of trait `FromStr`

error[E0407]: method `default` is not a member of trait `FromStr`
   --> src/aheader.rs:159:1
    |
159 | / fn default() -> Self {
160 | |         EncryptPreference::NoPreference
161 | |     }
    | |_____^ not a member of trait `FromStr`

warning: unused import: `std::collections::BTreeMap`
 --> src/aheader.rs:5:5
  |
5 | use std::collections::BTreeMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `Context as _`
 --> src/aheader.rs:9:20
  |
9 | use anyhow::{bail, Context as _, Error, Result};
  |                    ^^^^^^^^^^^^

error[E0599]: no function or associated item named `default` found for struct `SignedPublicKey` in the current scope
   --> src/aheader.rs:100:38
    |
100 |         public_key: SignedPublicKey::default(),
    |                                      ^^^^^^^ function or associated item not found in `SignedPublicKey`
    |
note: if you're trying to build a new `SignedPublicKey`, consider using `SignedPublicKey::new` which returns `SignedPublicKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/public.rs:39:5
    |
39  | /     pub fn new(
40  | |         primary_key: packet::PublicKey,
41  | |         details: SignedKeyDetails,
42  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
43  | |     ) -> Self {
    | |_____________^

error[E0308]: mismatched types
   --> src/aheader.rs:121:81
    |
121 |         p = p.find(|c: char| !ws.contains(c) && c != '=' && c != ';').unwrap_or(p);
    |                                                                       --------- ^ expected `usize`, found `&str`
    |                                                                       |
    |                                                                       arguments to this method are incorrect
    |
help: the return type of this call is `&str` due to the type of the argument passed
   --> src/aheader.rs:121:13
    |
121 |         p = p.find(|c: char| !ws.contains(c) && c != '=' && c != ';').unwrap_or(p);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^
    |                                                                                 |
    |                                                                                 this argument influences the return type of `unwrap_or`
note: method defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:951:12
    |
951 |     pub fn unwrap_or(self, default: T) -> T {
    |            ^^^^^^^^^

error[E0308]: mismatched types
   --> src/aheader.rs:121:13
    |
113 |     let mut p = &header_str[..];
    |                 --------------- expected due to this value
...
121 |         p = p.find(|c: char| !ws.contains(c) && c != '=' && c != ';').unwrap_or(p);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `usize`

error[E0425]: cannot find function `add_attribute` in this scope
   --> src/aheader.rs:137:25
    |
137 |                     if !add_attribute(&mut aheader, attr_name, attr_value) {
    |                         ^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `add_attribute` in this scope
   --> src/aheader.rs:141:25
    |
141 |                     if !add_attribute(&mut aheader, attr_name, "") {
    |                         ^^^^^^^^^^^^^ not found in this scope

error[E0609]: no field `binary` on type `SignedPublicKey`
   --> src/aheader.rs:149:55
    |
149 |     if !aheader.addr.is_empty() && aheader.public_key.binary.is_some() {
    |                                                       ^^^^^^ unknown field
    |
    = note: available fields are: `primary_key`, `details`, `public_subkeys`

error[E0308]: mismatched types
   --> src/aheader.rs:160:9
    |
159 | fn default() -> Self {
    |                 ---- expected `Aheader` because of return type
160 |         EncryptPreference::NoPreference
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Aheader`, found `EncryptPreference`

Some errors have detailed explanations: E0308, E0407, E0425, E0449, E0599, E0609.
For more information about an error, try `rustc --explain E0308`.
warning: `deltachat` (lib) generated 2 warnings
error: could not compile `deltachat` (lib) due to 10 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0599]: no function or associated item named `default` found for struct `pgp::SignedPublicKey` in the current scope
   --> src/aheader.rs:100:38
    |
100 |         public_key: SignedPublicKey::default(),
    |                                      ^^^^^^^ function or associated item not found in `SignedPublicKey`
    |
note: if you're trying to build a new `pgp::SignedPublicKey`, consider using `pgp::SignedPublicKey::new` which returns `pgp::SignedPublicKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/public.rs:39:5
    |
39  | /     pub fn new(
40  | |         primary_key: packet::PublicKey,
41  | |         details: SignedKeyDetails,
42  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
43  | |     ) -> Self {
    | |_____________^

error[E0609]: no field `binary` on type `pgp::SignedPublicKey`
   --> src/aheader.rs:149:55
    |
149 |     if !aheader.addr.is_empty() && aheader.public_key.binary.is_some() {
    |                                                       ^^^^^^ unknown field
    |
    = note: available fields are: `primary_key`, `details`, `public_subkeys`

error[E0308]: mismatched types
   --> src/aheader.rs:160:9
    |
159 | fn default() -> Self {
    |                 ---- expected `aheader::Aheader` because of return type
160 |         EncryptPreference::NoPreference
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Aheader`, found `EncryptPreference`

warning: `deltachat` (lib test) generated 2 warnings (2 duplicates)
error: could not compile `deltachat` (lib test) due to 10 previous errors; 2 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


Fail
file path is :
projects/deltachat-core/rust/src/blob.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `io` is defined multiple times
 --> src/blob.rs:6:23
  |
4 | use std::io::{self, Cursor};
  |               ---- previous import of the module `io` here
5 | use std::fs;
6 | use tokio::{fs::File, io};
  |                       ^^ `io` reimported here
  |
  = note: `io` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
  |
6 | use tokio::{fs::File, io as other_io};
  |                       ~~~~~~~~~~~~~~

error[E0252]: the name `Cursor` is defined multiple times
  --> src/blob.rs:11:5
   |
4  | use std::io::{self, Cursor};
   |                     ------ previous import of the type `Cursor` here
...
11 | use std::io::Cursor;
   |     ^^^^^^^^^^^^^^^ `Cursor` reimported here
   |
   = note: `Cursor` must be defined only once in the type namespace of this module

error[E0252]: the name `fs` is defined multiple times
  --> src/blob.rs:23:13
   |
5  | use std::fs;
   |     ------- previous import of the module `fs` here
...
23 | use tokio::{fs, io};
   |             ^^ `fs` reimported here
   |
   = note: `fs` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
23 | use tokio::{fs as other_fs, io};
   |             ~~~~~~~~~~~~~~

error[E0252]: the name `io` is defined multiple times
  --> src/blob.rs:23:17
   |
4  | use std::io::{self, Cursor};
   |               ---- previous import of the module `io` here
...
23 | use tokio::{fs, io};
   |                 ^^ `io` reimported here
   |
   = note: `io` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
23 | use tokio::{fs, io as other_io};
   |                 ~~~~~~~~~~~~~~

warning: unused imports: `fs::File`, `io`
 --> src/blob.rs:6:13
  |
6 | use tokio::{fs::File, io};
  |             ^^^^^^^^  ^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `std::io::Cursor`
  --> src/blob.rs:11:5
   |
11 | use std::io::Cursor;
   |     ^^^^^^^^^^^^^^^

warning: unused imports: `fs`, `io`
  --> src/blob.rs:23:13
   |
23 | use tokio::{fs, io};
   |             ^^  ^^

error[E0277]: the trait bound `std::result::Result<PathBuf, anyhow::Error>: AsRef<Path>` is not satisfied
   --> src/config.rs:619:48
    |
619 | ...                   let buf = fs::read(blob.to_abs_path()).await?;
    |                                 -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `std::result::Result<PathBuf, anyhow::Error>`
    |                                 |
    |                                 required by a bound introduced by this call
    |
note: required by a bound in `tokio::fs::read`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
    |
46  | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
    |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0599]: the method `write_all` exists for struct `File`, but its trait bounds were not satisfied
   --> src/blob.rs:66:14
    |
66  |         file.write_all(data).await.context("file write failure")?;
    |              ^^^^^^^^^ method cannot be called on `File` due to unsatisfied trait bounds
    |
   ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:106:1
    |
106 | pub struct File {
    | --------------- doesn't satisfy `std::fs::File: tokio::io::AsyncWriteExt` or `std::fs::File: tokio::io::AsyncWrite`
    |
    = note: the following trait bounds were not satisfied:
            `std::fs::File: tokio::io::AsyncWrite`
            which is required by `std::fs::File: tokio::io::AsyncWriteExt`
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
4   + use std::io::Write;
    |

error[E0599]: the method `flush` exists for struct `File`, but its trait bounds were not satisfied
   --> src/blob.rs:71:22
    |
71  |         let _ = file.flush().await;
    |                      ^^^^^ method cannot be called on `File` due to unsatisfied trait bounds
    |
   ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:106:1
    |
106 | pub struct File {
    | --------------- doesn't satisfy `std::fs::File: tokio::io::AsyncWriteExt` or `std::fs::File: tokio::io::AsyncWrite`
    |
    = note: the following trait bounds were not satisfied:
            `std::fs::File: tokio::io::AsyncWrite`
            which is required by `std::fs::File: tokio::io::AsyncWriteExt`
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
4   + use std::io::Write;
    |

error[E0308]: mismatched types
    --> src/chat.rs:2635:80
     |
2635 |             if let Some((better_type, _)) = message::guess_msgtype_from_suffix(&blob.to_abs_path())
     |                                             ---------------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `&Result<PathBuf, Error>`
     |                                             |
     |                                             arguments to this function are incorrect
     |
     = note: expected reference `&Path`
                found reference `&std::result::Result<PathBuf, anyhow::Error>`
note: function defined here
    --> src/message.rs:1375:15
     |
1375 | pub(crate) fn guess_msgtype_from_suffix(path: &Path) -> Option<(Viewtype, &str)> {
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ -----------

error[E0308]: mismatched types
    --> src/chat.rs:2639:54
     |
2639 |                         .ensure_sendable_webxdc_file(&blob.to_abs_path())
     |                          --------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `&Result<PathBuf, Error>`
     |                          |
     |                          arguments to this method are incorrect
     |
     = note: expected reference `&Path`
                found reference `&std::result::Result<PathBuf, anyhow::Error>`
note: method defined here
    --> src/webxdc.rs:223:25
     |
223  |     pub(crate) async fn ensure_sendable_webxdc_file(&self, path: &Path) -> Result<()> {
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^        -----------

error[E0308]: mismatched types
    --> src/chat.rs:2648:46
     |
2648 |                 .ensure_sendable_webxdc_file(&blob.to_abs_path())
     |                  --------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `&Result<PathBuf, Error>`
     |                  |
     |                  arguments to this method are incorrect
     |
     = note: expected reference `&Path`
                found reference `&std::result::Result<PathBuf, anyhow::Error>`
note: method defined here
    --> src/webxdc.rs:223:25
     |
223  |     pub(crate) async fn ensure_sendable_webxdc_file(&self, path: &Path) -> Result<()> {
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^        -----------

error[E0308]: mismatched types
    --> src/chat.rs:2675:73
     |
2675 |             if let Some((_, mime)) = message::guess_msgtype_from_suffix(&blob.to_abs_path()) {
     |                                      ---------------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `&Result<PathBuf, Error>`
     |                                      |
     |                                      arguments to this function are incorrect
     |
     = note: expected reference `&Path`
                found reference `&std::result::Result<PathBuf, anyhow::Error>`
note: function defined here
    --> src/message.rs:1375:15
     |
1375 | pub(crate) fn guess_msgtype_from_suffix(path: &Path) -> Option<(Viewtype, &str)> {
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ -----------

error[E0599]: no method named `display` found for enum `std::result::Result` in the current scope
    --> src/chat.rs:2685:32
     |
2685 |             blob.to_abs_path().display(),
     |                                ^^^^^^^ method not found in `Result<PathBuf, Error>`
     |
note: the method `display` exists on the type `PathBuf`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:2727:5
     |
2727 |     pub fn display(&self) -> Display<'_> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: use the `?` operator to extract the `PathBuf` value, propagating a `Result::Err` value to the caller
     |
2685 |             blob.to_abs_path()?.display(),
     |                               +

error[E0277]: `std::result::Result<std::fs::File, std::io::Error>` is not a future
   --> src/blob.rs:122:14
    |
121 |         let mut src_file = fs::File::open(src)
    |                            ------------------- this call returns `std::result::Result<std::fs::File, std::io::Error>`
122 |             .await
    |             -^^^^^
    |             ||
    |             |`std::result::Result<std::fs::File, std::io::Error>` is not a future
    |             help: remove the `.await`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<std::fs::File, std::io::Error>`, which is required by `std::result::Result<std::fs::File, std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<std::fs::File, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<std::fs::File, std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<u64, std::io::Error>` is not a future
   --> src/blob.rs:128:66
    |
128 |         if let Err(err) = io::copy(&mut src_file, &mut dst_file).await {
    |                           ---------------------------------------^^^^^
    |                           |                                     ||
    |                           |                                     |`std::result::Result<u64, std::io::Error>` is not a future
    |                           |                                     help: remove the `.await`
    |                           this call returns `std::result::Result<u64, std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<u64, std::io::Error>`, which is required by `std::result::Result<u64, std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<u64, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<u64, std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
   --> src/blob.rs:131:35
    |
131 |             fs::remove_file(path).await.ok();
    |             ----------------------^^^^^
    |             |                    ||
    |             |                    |`std::result::Result<(), std::io::Error>` is not a future
    |             |                    help: remove the `.await`
    |             this call returns `std::result::Result<(), std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0599]: the method `flush` exists for struct `File`, but its trait bounds were not satisfied
   --> src/blob.rs:136:26
    |
136 |         let _ = dst_file.flush().await;
    |                          ^^^^^ method cannot be called on `File` due to unsatisfied trait bounds
    |
   ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:106:1
    |
106 | pub struct File {
    | --------------- doesn't satisfy `std::fs::File: tokio::io::AsyncWriteExt` or `std::fs::File: tokio::io::AsyncWrite`
    |
    = note: the following trait bounds were not satisfied:
            `std::fs::File: tokio::io::AsyncWrite`
            which is required by `std::fs::File: tokio::io::AsyncWriteExt`
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
4   + use std::io::Write;
    |

error[E0308]: mismatched types
   --> src/blob.rs:395:13
    |
393 |         if let Some(new_name) = self.recode_to_size(
    |                                      -------------- arguments to this method are incorrect
394 |             context,
395 |             blob_abs,
    |             ^^^^^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
    |
    = note: expected struct `PathBuf`
                 found enum `std::result::Result<PathBuf, anyhow::Error>`
note: method defined here
   --> src/blob.rs:445:8
    |
445 |     fn recode_to_size(
    |        ^^^^^^^^^^^^^^
...
448 |         mut blob_abs: PathBuf,
    |         ---------------------
help: use the `?` operator to extract the `std::result::Result<PathBuf, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
395 |             blob_abs?,
    |                     +

error[E0277]: `std::result::Result<std::fs::File, std::io::Error>` is not a future
  --> src/blob.rs:98:18
   |
98 |                 .await
   |                 -^^^^^
   |                 ||
   |                 |`std::result::Result<std::fs::File, std::io::Error>` is not a future
   |                 help: remove the `.await`
   |
   = help: the trait `futures::Future` is not implemented for `std::result::Result<std::fs::File, std::io::Error>`, which is required by `std::result::Result<std::fs::File, std::io::Error>: std::future::IntoFuture`
   = note: std::result::Result<std::fs::File, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
   = note: required for `std::result::Result<std::fs::File, std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
   --> src/blob.rs:105:49
    |
105 |                         fs::create_dir_all(dir).await.log_err(context).ok();
    |                         ------------------------^^^^^
    |                         |                      ||
    |                         |                      |`std::result::Result<(), std::io::Error>` is not a future
    |                         |                      help: remove the `.await`
    |                         this call returns `std::result::Result<(), std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0308]: mismatched types
   --> src/blob.rs:432:13
    |
430 |         if let Some(new_name) = self.recode_to_size(
    |                                      -------------- arguments to this method are incorrect
431 |             context,
432 |             blob_abs,
    |             ^^^^^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
    |
    = note: expected struct `PathBuf`
                 found enum `std::result::Result<PathBuf, anyhow::Error>`
note: method defined here
   --> src/blob.rs:445:8
    |
445 |     fn recode_to_size(
    |        ^^^^^^^^^^^^^^
...
448 |         mut blob_abs: PathBuf,
    |         ---------------------
help: use the `?` operator to extract the `std::result::Result<PathBuf, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
432 |             blob_abs?,
    |                     +

error[E0277]: `std::result::Result<std::fs::ReadDir, std::io::Error>` is not a future
   --> src/blob.rs:652:59
    |
652 |         let readdir = fs::read_dir(context.get_blobdir()).await?;
    |                       ------------------------------------^^^^^
    |                       |                                  ||
    |                       |                                  |`std::result::Result<std::fs::ReadDir, std::io::Error>` is not a future
    |                       |                                  help: remove the `.await`
    |                       this call returns `std::result::Result<std::fs::ReadDir, std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<std::fs::ReadDir, std::io::Error>`, which is required by `std::result::Result<std::fs::ReadDir, std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<std::fs::ReadDir, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<std::fs::ReadDir, std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: the trait bound `std::result::Result<PathBuf, anyhow::Error>: AsRef<Path>` is not satisfied
    --> src/mimefactory.rs:1564:25
     |
1564 |     let body = fs::read(blob.to_abs_path()).await?;
     |                -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `std::result::Result<PathBuf, anyhow::Error>`
     |                |
     |                required by a bound introduced by this call
     |
note: required by a bound in `tokio::fs::read`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
     |
46   | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
     |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: the trait bound `std::result::Result<PathBuf, anyhow::Error>: AsRef<Path>` is not satisfied
    --> src/mimefactory.rs:1547:25
     |
1547 |     let body = fs::read(blob.to_abs_path()).await?;
     |                -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `std::result::Result<PathBuf, anyhow::Error>`
     |                |
     |                required by a bound introduced by this call
     |
note: required by a bound in `tokio::fs::read`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
     |
46   | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
     |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: the trait bound `std::result::Result<PathBuf, anyhow::Error>: AsRef<Path>` is not satisfied
   --> src/imex.rs:588:35
    |
588 |         let mut file = File::open(blob.to_abs_path()).await?;
    |                        ---------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `std::result::Result<PathBuf, anyhow::Error>`
    |                        |
    |                        required by a bound introduced by this call
    |
note: required by a bound in `tokio::fs::File::open`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/file.rs:152:34
    |
152 |     pub async fn open(path: impl AsRef<Path>) -> io::Result<File> {
    |                                  ^^^^^^^^^^^ required by this bound in `File::open`

error[E0308]: mismatched types
   --> src/imex/transfer.rs:177:46
    |
177 |             files.push(DataSource::with_name(path, name));
    |                        --------------------- ^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
    |                        |
    |                        arguments to this function are incorrect
    |
    = note: expected struct `PathBuf`
                 found enum `std::result::Result<PathBuf, anyhow::Error>`
note: associated function defined here
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/iroh-0.4.2/src/provider/mod.rs:950:12
    |
950 |     pub fn with_name(path: PathBuf, name: String) -> Self {
    |            ^^^^^^^^^
help: use the `?` operator to extract the `std::result::Result<PathBuf, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
177 |             files.push(DataSource::with_name(path?, name));
    |                                                  +

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
   --> src/config.rs:619:48
    |
619 | ...                   let buf = fs::read(blob.to_abs_path()).await?;
    |                                 -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
    |                                 |
    |                                 required by a bound introduced by this call
    |
note: required by a bound in `tokio::fs::read`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
    |
46  | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
    |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: the trait bound `std::result::Result<PathBuf, anyhow::Error>: AsRef<Path>` is not satisfied
  --> src/qr_code_generator.rs:35:34
   |
35 |             Some(tokio::fs::read(avatar_blob.to_abs_path()).await?)
   |                  --------------- ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `std::result::Result<PathBuf, anyhow::Error>`
   |                  |
   |                  required by a bound introduced by this call
   |
note: required by a bound in `tokio::fs::read`
  --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
   |
46 | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
   |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: the trait bound `std::result::Result<PathBuf, anyhow::Error>: AsRef<Path>` is not satisfied
  --> src/qr_code_generator.rs:83:34
   |
83 |             Some(tokio::fs::read(avatar_blob.to_abs_path()).await?)
   |                  --------------- ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `std::result::Result<PathBuf, anyhow::Error>`
   |                  |
   |                  required by a bound introduced by this call
   |
note: required by a bound in `tokio::fs::read`
  --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
   |
46 | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
   |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0282]: type annotations needed
   --> src/blob.rs:208:32
    |
208 |     let context = self.blobdir.as_ref().context("Context is None")?;
    |                                ^^^^^^   ------- type must be known at this point
    |
help: try using a fully qualified path to specify the expected types
    |
208 |     let context = <Path as AsRef<T>>::as_ref(self.blobdir).context("Context is None")?;
    |                   +++++++++++++++++++++++++++            ~

error[E0599]: no method named `is_none` found for reference `&str` in the current scope
   --> src/blob.rs:211:45
    |
211 |     if context.is_none() || path_n_filename.is_none() {
    |                                             ^^^^^^^ method not found in `&str`

error[E0308]: mismatched types
    --> src/chat.rs:2635:80
     |
2635 |             if let Some((better_type, _)) = message::guess_msgtype_from_suffix(&blob.to_abs_path())
     |                                             ---------------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `&Result<PathBuf, Error>`
     |                                             |
     |                                             arguments to this function are incorrect
     |
     = note: expected reference `&std::path::Path`
                found reference `&std::result::Result<std::path::PathBuf, anyhow::Error>`
note: function defined here
    --> src/message.rs:1375:15
     |
1375 | pub(crate) fn guess_msgtype_from_suffix(path: &Path) -> Option<(Viewtype, &str)> {
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ -----------

error[E0308]: mismatched types
    --> src/chat.rs:2639:54
     |
2639 |                         .ensure_sendable_webxdc_file(&blob.to_abs_path())
     |                          --------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `&Result<PathBuf, Error>`
     |                          |
     |                          arguments to this method are incorrect
     |
     = note: expected reference `&std::path::Path`
                found reference `&std::result::Result<std::path::PathBuf, anyhow::Error>`
note: method defined here
    --> src/webxdc.rs:223:25
     |
223  |     pub(crate) async fn ensure_sendable_webxdc_file(&self, path: &Path) -> Result<()> {
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^        -----------

error[E0308]: mismatched types
    --> src/chat.rs:2648:46
     |
2648 |                 .ensure_sendable_webxdc_file(&blob.to_abs_path())
     |                  --------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `&Result<PathBuf, Error>`
     |                  |
     |                  arguments to this method are incorrect
     |
     = note: expected reference `&std::path::Path`
                found reference `&std::result::Result<std::path::PathBuf, anyhow::Error>`
note: method defined here
    --> src/webxdc.rs:223:25
     |
223  |     pub(crate) async fn ensure_sendable_webxdc_file(&self, path: &Path) -> Result<()> {
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^        -----------

error[E0599]: no method named `unwrap` found for reference `&str` in the current scope
   --> src/blob.rs:215:51
    |
215 |     let mut path_n_filename_abs = path_n_filename.unwrap().to_string();
    |                                                   ^^^^^^ method not found in `&str`

error[E0308]: mismatched types
    --> src/chat.rs:2675:73
     |
2675 |             if let Some((_, mime)) = message::guess_msgtype_from_suffix(&blob.to_abs_path()) {
     |                                      ---------------------------------- ^^^^^^^^^^^^^^^^^^^ expected `&Path`, found `&Result<PathBuf, Error>`
     |                                      |
     |                                      arguments to this function are incorrect
     |
     = note: expected reference `&std::path::Path`
                found reference `&std::result::Result<std::path::PathBuf, anyhow::Error>`
note: function defined here
    --> src/message.rs:1375:15
     |
1375 | pub(crate) fn guess_msgtype_from_suffix(path: &Path) -> Option<(Viewtype, &str)> {
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ -----------

error[E0277]: the trait bound `std::result::Result<PathBuf, anyhow::Error>: AsRef<Path>` is not satisfied
   --> src/blob.rs:611:40
    |
611 |         let file = std::fs::File::open(self.to_abs_path())?;
    |                    ------------------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `std::result::Result<PathBuf, anyhow::Error>`
    |                    |
    |                    required by a bound introduced by this call
    |
note: required by a bound in `std::fs::File::open`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:374:20
    |
374 |     pub fn open<P: AsRef<Path>>(path: P) -> io::Result<File> {
    |                    ^^^^^^^^^^^ required by this bound in `File::open`

error[E0308]: `match` arms have incompatible types
   --> src/param.rs:408:39
    |
406 |           let path = match file {
    |  ____________________-
407 | |             ParamsFile::FsPath(path) => path,
    | |                                         ---- this is found to be of type `PathBuf`
408 | |             ParamsFile::Blob(blob) => blob.to_abs_path(),
    | |                                       ^^^^^^^^^^^^^^^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
409 | |         };
    | |_________- `match` arms have incompatible types
    |
    = note: expected struct `PathBuf`
                 found enum `std::result::Result<PathBuf, anyhow::Error>`
help: use the `?` operator to extract the `std::result::Result<PathBuf, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
408 |             ParamsFile::Blob(blob) => blob.to_abs_path()?,
    |                                                         +

warning: unused import: `tokio::io::AsyncWriteExt`
  --> src/blob.rs:22:5
   |
22 | use tokio::io::AsyncWriteExt;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::log::LogExt`
  --> src/blob.rs:30:5
   |
30 | use crate::log::LogExt;
   |     ^^^^^^^^^^^^^^^^^^

Some errors have detailed explanations: E0252, E0277, E0282, E0308, E0599.
For more information about an error, try `rustc --explain E0252`.
warning: `deltachat` (lib) generated 5 warnings
error: could not compile `deltachat` (lib) due to 32 previous errors; 5 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0599]: no method named `display` found for enum `std::result::Result` in the current scope
    --> src/chat.rs:2685:32
     |
2685 |             blob.to_abs_path().display(),
     |                                ^^^^^^^ method not found in `Result<PathBuf, Error>`
     |
note: the method `display` exists on the type `std::path::PathBuf`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:2727:5
     |
2727 |     pub fn display(&self) -> Display<'_> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: use the `?` operator to extract the `std::path::PathBuf` value, propagating a `Result::Err` value to the caller
     |
2685 |             blob.to_abs_path()?.display(),
     |                               +

error[E0308]: mismatched types
   --> src/blob.rs:395:13
    |
393 |         if let Some(new_name) = self.recode_to_size(
    |                                      -------------- arguments to this method are incorrect
394 |             context,
395 |             blob_abs,
    |             ^^^^^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
    |
    = note: expected struct `std::path::PathBuf`
                 found enum `std::result::Result<std::path::PathBuf, anyhow::Error>`
note: method defined here
   --> src/blob.rs:445:8
    |
445 |     fn recode_to_size(
    |        ^^^^^^^^^^^^^^
...
448 |         mut blob_abs: PathBuf,
    |         ---------------------
help: use the `?` operator to extract the `std::result::Result<std::path::PathBuf, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
395 |             blob_abs?,
    |                     +

error[E0308]: mismatched types
   --> src/blob.rs:432:13
    |
430 |         if let Some(new_name) = self.recode_to_size(
    |                                      -------------- arguments to this method are incorrect
431 |             context,
432 |             blob_abs,
    |             ^^^^^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
    |
    = note: expected struct `std::path::PathBuf`
                 found enum `std::result::Result<std::path::PathBuf, anyhow::Error>`
note: method defined here
   --> src/blob.rs:445:8
    |
445 |     fn recode_to_size(
    |        ^^^^^^^^^^^^^^
...
448 |         mut blob_abs: PathBuf,
    |         ---------------------
help: use the `?` operator to extract the `std::result::Result<std::path::PathBuf, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
432 |             blob_abs?,
    |                     +

error[E0277]: `std::result::Result<std::fs::File, std::io::Error>` is not a future
    --> src/blob.rs:1045:45
     |
1045 |             let file = File::open(path_buf).await.unwrap();
     |                        ---------------------^^^^^
     |                        |                   ||
     |                        |                   |`std::result::Result<std::fs::File, std::io::Error>` is not a future
     |                        |                   help: remove the `.await`
     |                        this call returns `std::result::Result<std::fs::File, std::io::Error>`
     |
     = help: the trait `futures::Future` is not implemented for `std::result::Result<std::fs::File, std::io::Error>`, which is required by `std::result::Result<std::fs::File, std::io::Error>: std::future::IntoFuture`
     = note: std::result::Result<std::fs::File, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
     = note: required for `std::result::Result<std::fs::File, std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
    --> src/blob.rs:1335:14
     |
1334 |         fs::write(&file, &bytes)
     |         ------------------------ this call returns `std::result::Result<(), std::io::Error>`
1335 |             .await
     |             -^^^^^
     |             ||
     |             |`std::result::Result<(), std::io::Error>` is not a future
     |             help: remove the `.await`
     |
     = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
     = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
     = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<Vec<u8>, std::io::Error>` is not a future
    --> src/blob.rs:1371:48
     |
1371 |             let bytes1 = fs::read(&file_saved).await?;
     |                          ----------------------^^^^^
     |                          |                    ||
     |                          |                    |`std::result::Result<Vec<u8>, std::io::Error>` is not a future
     |                          |                    help: remove the `.await`
     |                          this call returns `std::result::Result<Vec<u8>, std::io::Error>`
     |
     = help: the trait `futures::Future` is not implemented for `std::result::Result<Vec<u8>, std::io::Error>`, which is required by `std::result::Result<Vec<u8>, std::io::Error>: std::future::IntoFuture`
     = note: std::result::Result<Vec<u8>, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
     = note: required for `std::result::Result<Vec<u8>, std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
    --> src/mimefactory.rs:1564:25
     |
1564 |     let body = fs::read(blob.to_abs_path()).await?;
     |                -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
     |                |
     |                required by a bound introduced by this call
     |
note: required by a bound in `tokio::fs::read`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
     |
46   | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
     |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
    --> src/mimefactory.rs:1547:25
     |
1547 |     let body = fs::read(blob.to_abs_path()).await?;
     |                -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
     |                |
     |                required by a bound introduced by this call
     |
note: required by a bound in `tokio::fs::read`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
     |
46   | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
     |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
   --> src/imex.rs:588:35
    |
588 |         let mut file = File::open(blob.to_abs_path()).await?;
    |                        ---------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
    |                        |
    |                        required by a bound introduced by this call
    |
note: required by a bound in `tokio::fs::File::open`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/file.rs:152:34
    |
152 |     pub async fn open(path: impl AsRef<Path>) -> io::Result<File> {
    |                                  ^^^^^^^^^^^ required by this bound in `File::open`

error[E0308]: mismatched types
   --> src/imex/transfer.rs:177:46
    |
177 |             files.push(DataSource::with_name(path, name));
    |                        --------------------- ^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
    |                        |
    |                        arguments to this function are incorrect
    |
    = note: expected struct `std::path::PathBuf`
                 found enum `std::result::Result<std::path::PathBuf, anyhow::Error>`
note: associated function defined here
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/iroh-0.4.2/src/provider/mod.rs:950:12
    |
950 |     pub fn with_name(path: PathBuf, name: String) -> Self {
    |            ^^^^^^^^^
help: use the `?` operator to extract the `std::result::Result<std::path::PathBuf, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
177 |             files.push(DataSource::with_name(path?, name));
    |                                                  +

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
  --> src/qr_code_generator.rs:35:34
   |
35 |             Some(tokio::fs::read(avatar_blob.to_abs_path()).await?)
   |                  --------------- ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
   |                  |
   |                  required by a bound introduced by this call
   |
note: required by a bound in `tokio::fs::read`
  --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
   |
46 | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
   |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
  --> src/qr_code_generator.rs:83:34
   |
83 |             Some(tokio::fs::read(avatar_blob.to_abs_path()).await?)
   |                  --------------- ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
   |                  |
   |                  required by a bound introduced by this call
   |
note: required by a bound in `tokio::fs::read`
  --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/read.rs:46:30
   |
46 | pub async fn read(path: impl AsRef<Path>) -> io::Result<Vec<u8>> {
   |                              ^^^^^^^^^^^ required by this bound in `read`

error[E0282]: type annotations needed
   --> src/blob.rs:208:32
    |
208 |     let context = self.blobdir.as_ref().context("Context is None")?;
    |                                ^^^^^^   ------- type must be known at this point
    |
help: try using a fully qualified path to specify the expected types
    |
208 |     let context = <std::path::Path as AsRef<T>>::as_ref(self.blobdir).context("Context is None")?;
    |                   ++++++++++++++++++++++++++++++++++++++            ~

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
   --> src/blob.rs:611:40
    |
611 |         let file = std::fs::File::open(self.to_abs_path())?;
    |                    ------------------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
    |                    |
    |                    required by a bound introduced by this call
    |
note: required by a bound in `std::fs::File::open`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:374:20
    |
374 |     pub fn open<P: AsRef<Path>>(path: P) -> io::Result<File> {
    |                    ^^^^^^^^^^^ required by this bound in `File::open`

error[E0277]: `std::result::Result<Vec<u8>, std::io::Error>` is not a future
   --> src/blob.rs:796:36
    |
796 |         let data = fs::read(fname).await.unwrap();
    |                    ----------------^^^^^
    |                    |              ||
    |                    |              |`std::result::Result<Vec<u8>, std::io::Error>` is not a future
    |                    |              help: remove the `.await`
    |                    this call returns `std::result::Result<Vec<u8>, std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<Vec<u8>, std::io::Error>`, which is required by `std::result::Result<Vec<u8>, std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<Vec<u8>, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<Vec<u8>, std::io::Error>` to implement `std::future::IntoFuture`

error[E0369]: binary operation `==` cannot be applied to type `std::result::Result<std::path::PathBuf, anyhow::Error>`
   --> src/blob.rs:799:9
    |
799 |         assert_eq!(blob.to_abs_path(), t.get_blobdir().join("foo"));
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |         |
    |         std::result::Result<std::path::PathBuf, anyhow::Error>
    |         std::path::PathBuf
    |
    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `std::result::Result<std::fs::ReadDir, std::io::Error>` is not a future
   --> src/blob.rs:839:53
    |
839 |         let mut dir = fs::read_dir(t.get_blobdir()).await.unwrap();
    |                       ------------------------------^^^^^
    |                       |                            ||
    |                       |                            |`std::result::Result<std::fs::ReadDir, std::io::Error>` is not a future
    |                       |                            help: remove the `.await`
    |                       this call returns `std::result::Result<std::fs::ReadDir, std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<std::fs::ReadDir, std::io::Error>`, which is required by `std::result::Result<std::fs::ReadDir, std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<std::fs::ReadDir, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<std::fs::ReadDir, std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<Vec<u8>, std::io::Error>` is not a future
   --> src/blob.rs:843:48
    |
843 |                 assert_eq!(fs::read(&foo_path).await.unwrap(), b"hello");
    |                            --------------------^^^^^
    |                            |                  ||
    |                            |                  |`std::result::Result<Vec<u8>, std::io::Error>` is not a future
    |                            |                  help: remove the `.await`
    |                            this call returns `std::result::Result<Vec<u8>, std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<Vec<u8>, std::io::Error>`, which is required by `std::result::Result<Vec<u8>, std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<Vec<u8>, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<Vec<u8>, std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<std::fs::ReadDir, std::io::Error>` is not a future
   --> src/blob.rs:863:53
    |
863 |         let mut dir = fs::read_dir(t.get_blobdir()).await.unwrap();
    |                       ------------------------------^^^^^
    |                       |                            ||
    |                       |                            |`std::result::Result<std::fs::ReadDir, std::io::Error>` is not a future
    |                       |                            help: remove the `.await`
    |                       this call returns `std::result::Result<std::fs::ReadDir, std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<std::fs::ReadDir, std::io::Error>`, which is required by `std::result::Result<std::fs::ReadDir, std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<std::fs::ReadDir, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<std::fs::ReadDir, std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<Vec<u8>, std::io::Error>` is not a future
   --> src/blob.rs:867:48
    |
867 |                 assert_eq!(fs::read(&foo_path).await.unwrap(), b"hello");
    |                            --------------------^^^^^
    |                            |                  ||
    |                            |                  |`std::result::Result<Vec<u8>, std::io::Error>` is not a future
    |                            |                  help: remove the `.await`
    |                            this call returns `std::result::Result<Vec<u8>, std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<Vec<u8>, std::io::Error>`, which is required by `std::result::Result<Vec<u8>, std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<Vec<u8>, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<Vec<u8>, std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
   --> src/blob.rs:890:33
    |
890 |         fs::write(&src, b"boo").await.unwrap();
    |         ------------------------^^^^^
    |         |                      ||
    |         |                      |`std::result::Result<(), std::io::Error>` is not a future
    |         |                      help: remove the `.await`
    |         this call returns `std::result::Result<(), std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
   --> src/blob.rs:893:29
    |
893 |         let data = fs::read(blob.to_abs_path()).await.unwrap();
    |                    -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
    |                    |
    |                    required by a bound introduced by this call
    |
note: required by a bound in `std::fs::read`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:259:16
    |
259 | pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {
    |                ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: `std::result::Result<Vec<u8>, std::io::Error>` is not a future
   --> src/blob.rs:893:49
    |
893 |         let data = fs::read(blob.to_abs_path()).await.unwrap();
    |                    -----------------------------^^^^^
    |                    |                           ||
    |                    |                           |`std::result::Result<Vec<u8>, std::io::Error>` is not a future
    |                    |                           help: remove the `.await`
    |                    this call returns `std::result::Result<Vec<u8>, std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<Vec<u8>, std::io::Error>`, which is required by `std::result::Result<Vec<u8>, std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<Vec<u8>, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<Vec<u8>, std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
   --> src/blob.rs:909:37
    |
909 |         fs::write(&src_ext, b"boo").await.unwrap();
    |         ----------------------------^^^^^
    |         |                          ||
    |         |                          |`std::result::Result<(), std::io::Error>` is not a future
    |         |                          help: remove the `.await`
    |         this call returns `std::result::Result<(), std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
   --> src/blob.rs:914:29
    |
914 |         let data = fs::read(blob.to_abs_path()).await.unwrap();
    |                    -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
    |                    |
    |                    required by a bound introduced by this call
    |
note: required by a bound in `std::fs::read`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:259:16
    |
259 | pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {
    |                ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: `std::result::Result<Vec<u8>, std::io::Error>` is not a future
   --> src/blob.rs:914:49
    |
914 |         let data = fs::read(blob.to_abs_path()).await.unwrap();
    |                    -----------------------------^^^^^
    |                    |                           ||
    |                    |                           |`std::result::Result<Vec<u8>, std::io::Error>` is not a future
    |                    |                           help: remove the `.await`
    |                    this call returns `std::result::Result<Vec<u8>, std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<Vec<u8>, std::io::Error>`, which is required by `std::result::Result<Vec<u8>, std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<Vec<u8>, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<Vec<u8>, std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
   --> src/blob.rs:918:37
    |
918 |         fs::write(&src_int, b"boo").await.unwrap();
    |         ----------------------------^^^^^
    |         |                          ||
    |         |                          |`std::result::Result<(), std::io::Error>` is not a future
    |         |                          help: remove the `.await`
    |         this call returns `std::result::Result<(), std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
   --> src/blob.rs:921:29
    |
921 |         let data = fs::read(blob.to_abs_path()).await.unwrap();
    |                    -------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
    |                    |
    |                    required by a bound introduced by this call
    |
note: required by a bound in `std::fs::read`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:259:16
    |
259 | pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {
    |                ^^^^^^^^^^^ required by this bound in `read`

error[E0277]: `std::result::Result<Vec<u8>, std::io::Error>` is not a future
   --> src/blob.rs:921:49
    |
921 |         let data = fs::read(blob.to_abs_path()).await.unwrap();
    |                    -----------------------------^^^^^
    |                    |                           ||
    |                    |                           |`std::result::Result<Vec<u8>, std::io::Error>` is not a future
    |                    |                           help: remove the `.await`
    |                    this call returns `std::result::Result<Vec<u8>, std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<Vec<u8>, std::io::Error>`, which is required by `std::result::Result<Vec<u8>, std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<Vec<u8>, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<Vec<u8>, std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
   --> src/blob.rs:928:37
    |
928 |         fs::write(&src_ext, b"boo").await.unwrap();
    |         ----------------------------^^^^^
    |         |                          ||
    |         |                          |`std::result::Result<(), std::io::Error>` is not a future
    |         |                          help: remove the `.await`
    |         this call returns `std::result::Result<(), std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
   --> src/blob.rs:997:43
    |
997 |             fs::write(&avatar_src, bytes).await.unwrap();
    |             ------------------------------^^^^^
    |             |                            ||
    |             |                            |`std::result::Result<(), std::io::Error>` is not a future
    |             |                            help: remove the `.await`
    |             this call returns `std::result::Result<(), std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0308]: mismatched types
    --> src/blob.rs:1005:17
     |
1003 |             blob.recode_to_size(
     |                  -------------- arguments to this method are incorrect
1004 |                 &t,
1005 |                 blob.to_abs_path(),
     |                 ^^^^^^^^^^^^^^^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
     |
     = note: expected struct `std::path::PathBuf`
                  found enum `std::result::Result<std::path::PathBuf, anyhow::Error>`
note: method defined here
    --> src/blob.rs:445:8
     |
445  |     fn recode_to_size(
     |        ^^^^^^^^^^^^^^
...
448  |         mut blob_abs: PathBuf,
     |         ---------------------
help: consider using `Result::expect` to unwrap the `std::result::Result<std::path::PathBuf, anyhow::Error>` value, panicking if the value is a `Result::Err`
     |
1005 |                 blob.to_abs_path().expect("REASON"),
     |                                   +++++++++++++++++

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
    --> src/blob.rs:1013:39
     |
1013 |                 let img = image::open(blob.to_abs_path()).unwrap();
     |                           ----------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
     |                           |
     |                           required by a bound introduced by this call
     |
note: required by a bound in `open`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/image-0.25.1/src/dynimage.rs:1085:8
     |
1083 | pub fn open<P>(path: P) -> ImageResult<DynamicImage>
     |        ---- required by a bound in this function
1084 | where
1085 |     P: AsRef<Path>,
     |        ^^^^^^^^^^^ required by this bound in `open`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
    --> src/blob.rs:1026:46
     |
1026 |         fs::write(&avatar_src, avatar_bytes).await.unwrap();
     |         -------------------------------------^^^^^
     |         |                                   ||
     |         |                                   |`std::result::Result<(), std::io::Error>` is not a future
     |         |                                   help: remove the `.await`
     |         this call returns `std::result::Result<(), std::io::Error>`
     |
     = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
     = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
     = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<std::fs::Metadata, std::io::Error>` is not a future
    --> src/blob.rs:1033:44
     |
1033 |         assert!(fs::metadata(&avatar_blob).await.unwrap().len() < avatar_bytes.len() as u64);
     |                 ---------------------------^^^^^
     |                 |                         ||
     |                 |                         |`std::result::Result<std::fs::Metadata, std::io::Error>` is not a future
     |                 |                         help: remove the `.await`
     |                 this call returns `std::result::Result<std::fs::Metadata, std::io::Error>`
     |
     = help: the trait `futures::Future` is not implemented for `std::result::Result<std::fs::Metadata, std::io::Error>`, which is required by `std::result::Result<std::fs::Metadata, std::io::Error>: std::future::IntoFuture`
     = note: std::result::Result<std::fs::Metadata, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
     = note: required for `std::result::Result<std::fs::Metadata, std::io::Error>` to implement `std::future::IntoFuture`

error[E0308]: mismatched types
    --> src/blob.rs:1054:13
     |
1052 |         blob.recode_to_size(
     |              -------------- arguments to this method are incorrect
1053 |             &t,
1054 |             blob.to_abs_path(),
     |             ^^^^^^^^^^^^^^^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
     |
     = note: expected struct `std::path::PathBuf`
                  found enum `std::result::Result<std::path::PathBuf, anyhow::Error>`
note: method defined here
    --> src/blob.rs:445:8
     |
445  |     fn recode_to_size(
     |        ^^^^^^^^^^^^^^
...
448  |         mut blob_abs: PathBuf,
     |         ---------------------
help: consider using `Result::expect` to unwrap the `std::result::Result<std::path::PathBuf, anyhow::Error>` value, panicking if the value is a `Result::Err`
     |
1054 |             blob.to_abs_path().expect("REASON"),
     |                               +++++++++++++++++

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
    --> src/blob.rs:1075:14
     |
1074 |         fs::write(&avatar_src, test_utils::AVATAR_900x900_BYTES)
     |         -------------------------------------------------------- this call returns `std::result::Result<(), std::io::Error>`
1075 |             .await
     |             -^^^^^
     |             ||
     |             |`std::result::Result<(), std::io::Error>` is not a future
     |             help: remove the `.await`
     |
     = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
     = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
     = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
    --> src/blob.rs:1101:46
     |
1101 |         fs::write(&avatar_src, avatar_bytes).await.unwrap();
     |         -------------------------------------^^^^^
     |         |                                   ||
     |         |                                   |`std::result::Result<(), std::io::Error>` is not a future
     |         |                                   help: remove the `.await`
     |         this call returns `std::result::Result<(), std::io::Error>`
     |
     = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
     = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
     = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<std::fs::Metadata, std::io::Error>` is not a future
    --> src/blob.rs:1109:40
     |
1109 |             fs::metadata(&avatar_blob).await.unwrap().len(),
     |             ---------------------------^^^^^
     |             |                         ||
     |             |                         |`std::result::Result<std::fs::Metadata, std::io::Error>` is not a future
     |             |                         help: remove the `.await`
     |             this call returns `std::result::Result<std::fs::Metadata, std::io::Error>`
     |
     = help: the trait `futures::Future` is not implemented for `std::result::Result<std::fs::Metadata, std::io::Error>`, which is required by `std::result::Result<std::fs::Metadata, std::io::Error>: std::future::IntoFuture`
     = note: std::result::Result<std::fs::Metadata, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
     = note: required for `std::result::Result<std::fs::Metadata, std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
    --> src/blob.rs:1397:14
     |
1396 |         fs::write(&file, &bytes)
     |         ------------------------ this call returns `std::result::Result<(), std::io::Error>`
1397 |             .await
     |             -^^^^^
     |             ||
     |             |`std::result::Result<(), std::io::Error>` is not a future
     |             help: remove the `.await`
     |
     = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
     = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
     = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
    --> src/blob.rs:1425:34
     |
1425 |         fs::write(&file, b"bla").await?;
     |         -------------------------^^^^^
     |         |                       ||
     |         |                       |`std::result::Result<(), std::io::Error>` is not a future
     |         |                       help: remove the `.await`
     |         this call returns `std::result::Result<(), std::io::Error>`
     |
     = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
     = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
     = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
    --> src/blob.rs:1445:34
     |
1445 |         fs::write(&file, b"bla").await?;
     |         -------------------------^^^^^
     |         |                       ||
     |         |                       |`std::result::Result<(), std::io::Error>` is not a future
     |         |                       help: remove the `.await`
     |         this call returns `std::result::Result<(), std::io::Error>`
     |
     = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
     = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
     = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: the trait bound `std::result::Result<std::path::PathBuf, anyhow::Error>: AsRef<std::path::Path>` is not satisfied
    --> src/mimeparser.rs:3085:39
     |
3085 |         let f = tokio::fs::File::open(blob.to_abs_path()).await.unwrap();
     |                 --------------------- ^^^^^^^^^^^^^^^^^^ the trait `AsRef<std::path::Path>` is not implemented for `std::result::Result<std::path::PathBuf, anyhow::Error>`
     |                 |
     |                 required by a bound introduced by this call
     |
note: required by a bound in `tokio::fs::File::open`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/fs/file.rs:152:34
     |
152  |     pub async fn open(path: impl AsRef<Path>) -> io::Result<File> {
     |                                  ^^^^^^^^^^^ required by this bound in `File::open`

error[E0308]: `match` arms have incompatible types
   --> src/param.rs:408:39
    |
406 |           let path = match file {
    |  ____________________-
407 | |             ParamsFile::FsPath(path) => path,
    | |                                         ---- this is found to be of type `std::path::PathBuf`
408 | |             ParamsFile::Blob(blob) => blob.to_abs_path(),
    | |                                       ^^^^^^^^^^^^^^^^^^ expected `PathBuf`, found `Result<PathBuf, Error>`
409 | |         };
    | |_________- `match` arms have incompatible types
    |
    = note: expected struct `std::path::PathBuf`
                 found enum `std::result::Result<std::path::PathBuf, anyhow::Error>`
help: use the `?` operator to extract the `std::result::Result<std::path::PathBuf, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
408 |             ParamsFile::Blob(blob) => blob.to_abs_path()?,
    |                                                         +

Some errors have detailed explanations: E0252, E0277, E0282, E0308, E0369, E0599.
warning: `deltachat` (lib test) generated 5 warnings (5 duplicates)
error: could not compile `deltachat` (lib test) due to 64 previous errors; 5 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


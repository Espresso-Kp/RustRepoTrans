Fail
file path is :
projects/iceberg/rust/crates/catalog/rest/src/catalog.rs

output is:



error is :
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
warning: unused import: `RenameTableRequest`
  --> crates/catalog/rest/src/catalog.rs:43:5
   |
43 |     RenameTableRequest, TokenResponse, NO_CONTENT, OK,
   |     ^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0599]: no method named `identifier_to_tuple_without_catalog` found for reference `&catalog::RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:520:26
    |
520 |     let src_tuple = self.identifier_to_tuple_without_catalog(src).await?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&RestCatalog`

error[E0599]: no method named `_split_identifier_for_json` found for reference `&catalog::RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:522:25
    |
522 |         ("source", self._split_identifier_for_json(&src_tuple)),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&RestCatalog`

error[E0599]: no method named `_split_identifier_for_json` found for reference `&catalog::RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:523:30
    |
523 |         ("destination", self._split_identifier_for_json(dest)),
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&RestCatalog`

error[E0599]: no function or associated item named `post` found for struct `reqwest::Request` in the current scope
   --> crates/catalog/rest/src/catalog.rs:525:28
    |
525 |     let request = Request::post(&self.rename_table_endpoint())
    |                            ^^^^ function or associated item not found in `Request`
    |
note: if you're trying to build a new `reqwest::Request`, consider using `reqwest::Request::new` which returns `reqwest::Request`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/async_impl/request.rs:43:5
    |
43  |     pub fn new(method: Method, url: Url) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `rename_table_endpoint` found for reference `&catalog::RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:525:39
    |
525 |     let request = Request::post(&self.rename_table_endpoint())
    |                                       ^^^^^^^^^^^^^^^^^^^^^ method not found in `&RestCatalog`
    |
help: one of the expressions' fields has a method of the same name
    |
525 |     let request = Request::post(&self.config.rename_table_endpoint())
    |                                       +++++++

error[E0609]: no field `0` on type `&catalog::RestCatalog`
   --> crates/catalog/rest/src/catalog.rs:530:25
    |
530 |     let response = self.0.execute(request).await?;
    |                         ^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
530 |     let response = self.client.0.execute(request).await?;
    |                         +++++++

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:532:12
    |
532 |         Ok(self.load_table(dest).await?)
    |         -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Table`
    |         |
    |         arguments to this enum variant are incorrect
    |
help: the type constructed contains `iceberg::table::Table` due to the type of the argument passed
   --> crates/catalog/rest/src/catalog.rs:532:9
    |
532 |         Ok(self.load_table(dest).await?)
    |         ^^^----------------------------^
    |            |
    |            this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:534:69
    |
534 |         let error_response: ErrorResponse = serde_json::from_slice(&response.bytes().await?)?;
    |                                                                     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[u8]`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:534:69
    |
534 |         let error_response: ErrorResponse = serde_json::from_slice(&response.bytes().await?)?;
    |                                                                     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `ControlFlow`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/ops/control_flow.rs:85:1

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:534:91
    |
534 |         let error_response: ErrorResponse = serde_json::from_slice(&response.bytes().await?)?;
    |                                                                                           ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `Break`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/ops/control_flow.rs:93:5

error[E0599]: no method named `_handle_non_200_response` found for reference `&catalog::RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:535:14
    |
535 |         self._handle_non_200_response(response.status(), error_response.error)?;
    |              ^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&RestCatalog`

error[E0616]: field `error` of struct `ErrorResponse` is private
   --> crates/catalog/rest/src/catalog.rs:535:73
    |
535 |         self._handle_non_200_response(response.status(), error_response.error)?;
    |                                                                         ^^^^^ private field

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:533:12
    |
533 |       } else {
    |  ____________^
534 | |         let error_response: ErrorResponse = serde_json::from_slice(&response.bytes().await?)?;
535 | |         self._handle_non_200_response(response.status(), error_response.error)?;
536 | |     }
    | |_____^ expected `Result<(), Error>`, found `()`
    |
    = note:   expected enum `Result<(), iceberg::Error>`
            found unit type `()`

Some errors have detailed explanations: E0277, E0308, E0599, E0609, E0616.
For more information about an error, try `rustc --explain E0277`.
warning: `iceberg-catalog-rest` (lib test) generated 1 warning
error: could not compile `iceberg-catalog-rest` (lib test) due to 13 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
warning: unused import: `RenameTableRequest`
  --> crates/catalog/rest/src/catalog.rs:43:5
   |
43 |     RenameTableRequest, TokenResponse, NO_CONTENT, OK,
   |     ^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0599]: no method named `identifier_to_tuple_without_catalog` found for reference `&RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:520:26
    |
520 |     let src_tuple = self.identifier_to_tuple_without_catalog(src).await?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&RestCatalog`

error[E0599]: no method named `_split_identifier_for_json` found for reference `&RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:522:25
    |
522 |         ("source", self._split_identifier_for_json(&src_tuple)),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&RestCatalog`

error[E0599]: no method named `_split_identifier_for_json` found for reference `&RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:523:30
    |
523 |         ("destination", self._split_identifier_for_json(dest)),
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&RestCatalog`

error[E0599]: no function or associated item named `post` found for struct `reqwest::Request` in the current scope
   --> crates/catalog/rest/src/catalog.rs:525:28
    |
525 |     let request = Request::post(&self.rename_table_endpoint())
    |                            ^^^^ function or associated item not found in `Request`
    |
note: if you're trying to build a new `reqwest::Request`, consider using `reqwest::Request::new` which returns `reqwest::Request`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/async_impl/request.rs:43:5
    |
43  |     pub fn new(method: Method, url: Url) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `rename_table_endpoint` found for reference `&RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:525:39
    |
525 |     let request = Request::post(&self.rename_table_endpoint())
    |                                       ^^^^^^^^^^^^^^^^^^^^^ method not found in `&RestCatalog`
    |
help: one of the expressions' fields has a method of the same name
    |
525 |     let request = Request::post(&self.config.rename_table_endpoint())
    |                                       +++++++

error[E0609]: no field `0` on type `&RestCatalog`
   --> crates/catalog/rest/src/catalog.rs:530:25
    |
530 |     let response = self.0.execute(request).await?;
    |                         ^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
530 |     let response = self.client.0.execute(request).await?;
    |                         +++++++

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:532:12
    |
532 |         Ok(self.load_table(dest).await?)
    |         -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Table`
    |         |
    |         arguments to this enum variant are incorrect
    |
help: the type constructed contains `Table` due to the type of the argument passed
   --> crates/catalog/rest/src/catalog.rs:532:9
    |
532 |         Ok(self.load_table(dest).await?)
    |         ^^^----------------------------^
    |            |
    |            this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:534:69
    |
534 |         let error_response: ErrorResponse = serde_json::from_slice(&response.bytes().await?)?;
    |                                                                     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[u8]`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:534:69
    |
534 |         let error_response: ErrorResponse = serde_json::from_slice(&response.bytes().await?)?;
    |                                                                     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `ControlFlow`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/ops/control_flow.rs:85:1

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:534:91
    |
534 |         let error_response: ErrorResponse = serde_json::from_slice(&response.bytes().await?)?;
    |                                                                                           ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `Break`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/ops/control_flow.rs:93:5

error[E0599]: no method named `_handle_non_200_response` found for reference `&RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:535:14
    |
535 |         self._handle_non_200_response(response.status(), error_response.error)?;
    |              ^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&RestCatalog`

error[E0616]: field `error` of struct `ErrorResponse` is private
   --> crates/catalog/rest/src/catalog.rs:535:73
    |
535 |         self._handle_non_200_response(response.status(), error_response.error)?;
    |                                                                         ^^^^^ private field

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:533:12
    |
533 |       } else {
    |  ____________^
534 | |         let error_response: ErrorResponse = serde_json::from_slice(&response.bytes().await?)?;
535 | |         self._handle_non_200_response(response.status(), error_response.error)?;
536 | |     }
    | |_____^ expected `Result<(), Error>`, found `()`
    |
    = note:   expected enum `Result<(), iceberg::Error>`
            found unit type `()`

Some errors have detailed explanations: E0277, E0308, E0599, E0609, E0616.
For more information about an error, try `rustc --explain E0277`.
warning: `iceberg-catalog-rest` (lib) generated 1 warning
error: could not compile `iceberg-catalog-rest` (lib) due to 13 previous errors; 1 warning emitted


Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0425]: cannot find value `always_false` in this scope
   --> crates/iceberg/src/arrow/reader.rs:547:28
    |
547 |         return Ok(Box::new(always_false));
    |                            ^^^^^^^^^^^^
    |
help: you might have meant to refer to the method
    |
547 |         return Ok(Box::new(self.always_false));
    |                            +++++

error[E0425]: cannot find value `always_false` in this scope
   --> crates/iceberg/src/arrow/reader.rs:550:28
    |
550 |         return Ok(Box::new(always_false));
    |                            ^^^^^^^^^^^^
    |
help: you might have meant to refer to the method
    |
550 |         return Ok(Box::new(self.always_false));
    |                            +++++

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:546:20
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) {
    |        ----------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |        |
    |        arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:345:8
    |
345 | pub fn is_not_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:33
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) {
    |                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-9244849461654217777.txt'

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:546:38
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) {
    |                                      ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:549:20
    |
549 |     if is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |        ----------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |        |
    |        arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:345:8
    |
345 | pub fn is_not_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:549:33
    |
549 |     if is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-6091116468420732080.txt'

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:549:38
    |
549 |     if is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |                                      ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:552:16
    |
552 |     if is_null(lhs.as_mut())? == BooleanArray::from([true]) {
    |        ------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |        |
    |        arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:325:8
    |
325 | pub fn is_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:552:29
    |
552 |     if is_null(lhs.as_mut())? == BooleanArray::from([true]) {
    |                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-14773588752213732540.txt'

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:552:34
    |
552 |     if is_null(lhs.as_mut())? == BooleanArray::from([true]) {
    |                                  ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:555:16
    |
555 |     if is_null(rhs.as_mut())? == BooleanArray::from([true]) {
    |        ------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |        |
    |        arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:325:8
    |
325 | pub fn is_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:555:29
    |
555 |     if is_null(rhs.as_mut())? == BooleanArray::from([true]) {
    |                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-2283754862245689913.txt'

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:555:34
    |
555 |     if is_null(rhs.as_mut())? == BooleanArray::from([true]) {
    |                                  ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0425]: cannot find function `is_true` in this scope
   --> crates/iceberg/src/arrow/reader.rs:558:8
    |
558 |     if is_true(lhs.as_mut())? {
    |        ^^^^^^^ not found in this scope

error[E0425]: cannot find function `is_true` in this scope
   --> crates/iceberg/src/arrow/reader.rs:561:8
    |
561 |     if is_true(rhs.as_mut())? {
    |        ^^^^^^^ not found in this scope

error[E0599]: no method named `as_ref` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:567:36
    |
567 |         let lhs_array = lhs_result.as_ref()?;
    |                                    ^^^^^^ method not found in `BooleanArray`

error[E0599]: no method named `as_ref` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:568:36
    |
568 |         let rhs_array = rhs_result.as_ref()?;
    |                                    ^^^^^^ method not found in `BooleanArray`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:570:12
    |
570 |         Ok(Box::new(combined_array) as Box<PredicateResult>)
    |         -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `BooleanArray`, found `Box<dyn FnMut(...) -> ... + Send>`
    |         |
    |         arguments to this enum variant are incorrect
    |
    = note: expected struct `BooleanArray`
               found struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>`
help: the type constructed contains `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:570:9
    |
570 |         Ok(Box::new(combined_array) as Box<PredicateResult>)
    |         ^^^------------------------------------------------^
    |            |
    |            this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5

error[E0277]: expected a `FnMut(RecordBatch)` closure, found `BooleanArray`
   --> crates/iceberg/src/arrow/reader.rs:570:12
    |
570 |         Ok(Box::new(combined_array) as Box<PredicateResult>)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnMut(RecordBatch)` closure, found `BooleanArray`
    |
    = help: the trait `FnMut<(RecordBatch,)>` is not implemented for `BooleanArray`
    = note: required for the cast from `Box<BooleanArray>` to `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>`

Some errors have detailed explanations: E0277, E0308, E0425, E0599.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `iceberg` (lib) due to 20 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:33
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) {
    |                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-419453200092726410.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:549:33
    |
549 |     if is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-11156474763582769039.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:552:29
    |
552 |     if is_null(lhs.as_mut())? == BooleanArray::from([true]) {
    |                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-4320492034604318749.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:555:29
    |
555 |     if is_null(rhs.as_mut())? == BooleanArray::from([true]) {
    |                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-16170096501133870363.txt'

error: could not compile `iceberg` (lib test) due to 20 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0425]: cannot find value `always_false` in this scope
   --> crates/iceberg/src/arrow/reader.rs:547:28
    |
547 |         return Ok(Box::new(always_false));
    |                            ^^^^^^^^^^^^
    |
help: you might have meant to refer to the method
    |
547 |         return Ok(Box::new(self.always_false));
    |                            +++++

error[E0425]: cannot find value `always_false` in this scope
   --> crates/iceberg/src/arrow/reader.rs:550:28
    |
550 |         return Ok(Box::new(always_false));
    |                            ^^^^^^^^^^^^
    |
help: you might have meant to refer to the method
    |
550 |         return Ok(Box::new(self.always_false));
    |                            +++++

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:546:20
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) {
    |        ----------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |        |
    |        arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:345:8
    |
345 | pub fn is_not_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:33
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) {
    |                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-1443519334166957712.txt'

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:546:38
    |
546 |     if is_not_null(lhs.as_mut())? == BooleanArray::from([false]) {
    |                                      ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:549:20
    |
549 |     if is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |        ----------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |        |
    |        arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:345:8
    |
345 | pub fn is_not_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:549:33
    |
549 |     if is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-15398468922725489378.txt'

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:549:38
    |
549 |     if is_not_null(rhs.as_mut())? == BooleanArray::from([false]) {
    |                                      ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:552:16
    |
552 |     if is_null(lhs.as_mut())? == BooleanArray::from([true]) {
    |        ------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |        |
    |        arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:325:8
    |
325 | pub fn is_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:552:29
    |
552 |     if is_null(lhs.as_mut())? == BooleanArray::from([true]) {
    |                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-542222906832644313.txt'

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:552:34
    |
552 |     if is_null(lhs.as_mut())? == BooleanArray::from([true]) {
    |                                  ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:555:16
    |
555 |     if is_null(rhs.as_mut())? == BooleanArray::from([true]) {
    |        ------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |        |
    |        arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:325:8
    |
325 | pub fn is_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:555:29
    |
555 |     if is_null(rhs.as_mut())? == BooleanArray::from([true]) {
    |                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-61909712949238799.txt'

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:555:34
    |
555 |     if is_null(rhs.as_mut())? == BooleanArray::from([true]) {
    |                                  ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0425]: cannot find function `is_true` in this scope
   --> crates/iceberg/src/arrow/reader.rs:558:8
    |
558 |     if is_true(lhs.as_mut())? {
    |        ^^^^^^^ not found in this scope

error[E0425]: cannot find function `is_true` in this scope
   --> crates/iceberg/src/arrow/reader.rs:561:8
    |
561 |     if is_true(rhs.as_mut())? {
    |        ^^^^^^^ not found in this scope

error[E0599]: no method named `as_ref` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:567:36
    |
567 |         let lhs_array = lhs_result.as_ref()?;
    |                                    ^^^^^^ method not found in `BooleanArray`

error[E0599]: no method named `as_ref` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:568:36
    |
568 |         let rhs_array = rhs_result.as_ref()?;
    |                                    ^^^^^^ method not found in `BooleanArray`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:570:12
    |
570 |         Ok(Box::new(combined_array) as Box<PredicateResult>)
    |         -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `BooleanArray`, found `Box<dyn FnMut(...) -> ... + Send>`
    |         |
    |         arguments to this enum variant are incorrect
    |
    = note: expected struct `BooleanArray`
               found struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>`
help: the type constructed contains `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:570:9
    |
570 |         Ok(Box::new(combined_array) as Box<PredicateResult>)
    |         ^^^------------------------------------------------^
    |            |
    |            this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5

error[E0277]: expected a `FnMut(RecordBatch)` closure, found `BooleanArray`
   --> crates/iceberg/src/arrow/reader.rs:570:12
    |
570 |         Ok(Box::new(combined_array) as Box<PredicateResult>)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnMut(RecordBatch)` closure, found `BooleanArray`
    |
    = help: the trait `FnMut<(RecordBatch,)>` is not implemented for `BooleanArray`
    = note: required for the cast from `Box<BooleanArray>` to `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>`

Some errors have detailed explanations: E0277, E0308, E0425, E0599.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `iceberg` (lib) due to 20 previous errors


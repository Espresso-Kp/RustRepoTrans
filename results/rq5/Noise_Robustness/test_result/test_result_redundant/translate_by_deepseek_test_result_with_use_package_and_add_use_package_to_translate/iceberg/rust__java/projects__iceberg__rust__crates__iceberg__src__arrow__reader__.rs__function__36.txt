Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0433]: failed to resolve: use of undeclared type `Schema`
   --> crates/iceberg/src/arrow/reader.rs:558:44
    |
558 |     if lhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_true() {
    |                                            ^^^^^^ use of undeclared type `Schema`
    |
help: consider importing one of these items
    |
20  + use apache_avro::Schema;
    |
20  + use arrow_schema::Schema;
    |
20  + use crate::spec::Schema;
    |

error[E0433]: failed to resolve: use of undeclared type `Schema`
   --> crates/iceberg/src/arrow/reader.rs:561:44
    |
561 |     if rhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_true() {
    |                                            ^^^^^^ use of undeclared type `Schema`
    |
help: consider importing one of these items
    |
20  + use apache_avro::Schema;
    |
20  + use arrow_schema::Schema;
    |
20  + use crate::spec::Schema;
    |

error[E0433]: failed to resolve: use of undeclared type `Schema`
   --> crates/iceberg/src/arrow/reader.rs:564:44
    |
564 |     if lhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_false() {
    |                                            ^^^^^^ use of undeclared type `Schema`
    |
help: consider importing one of these items
    |
20  + use apache_avro::Schema;
    |
20  + use arrow_schema::Schema;
    |
20  + use crate::spec::Schema;
    |

error[E0433]: failed to resolve: use of undeclared type `Schema`
   --> crates/iceberg/src/arrow/reader.rs:567:44
    |
567 |     if rhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_false() {
    |                                            ^^^^^^ use of undeclared type `Schema`
    |
help: consider importing one of these items
    |
20  + use apache_avro::Schema;
    |
20  + use arrow_schema::Schema;
    |
20  + use crate::spec::Schema;
    |

warning: unused import: `or`
  --> crates/iceberg/src/arrow/reader.rs:21:60
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                                                            ^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:558:66
    |
558 |     if lhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_true() {
    |                                                                  ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-16058895345637577951.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:68
    |
558 |     if lhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_true() {
    |                                                                    ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:561:66
    |
561 |     if rhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_true() {
    |                                                                  ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-15758027287551064543.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:561:68
    |
561 |     if rhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_true() {
    |                                                                    ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:564:66
    |
564 |     if lhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_false() {
    |                                                                  ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-915084238578920451.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:564:68
    |
564 |     if lhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_false() {
    |                                                                    ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:567:66
    |
567 |     if rhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_false() {
    |                                                                  ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-2365279535182872436.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:567:68
    |
567 |     if rhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_false() {
    |                                                                    ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:573:36
    |
573 |         let lhs_array = lhs_result.as_any().to_boolean_array()?;
    |                                    ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:574:36
    |
574 |         let rhs_array = rhs_result.as_any().to_boolean_array()?;
    |                                    ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:580:12
    |
580 |         Ok(Box::new(result_array) as Box<PredicateResult>)
    |         -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `BooleanArray`, found `Box<dyn FnMut(...) -> ... + Send>`
    |         |
    |         arguments to this enum variant are incorrect
    |
    = note: expected struct `BooleanArray`
               found struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>`
help: the type constructed contains `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:580:9
    |
580 |         Ok(Box::new(result_array) as Box<PredicateResult>)
    |         ^^^----------------------------------------------^
    |            |
    |            this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5

error[E0277]: expected a `FnMut(RecordBatch)` closure, found `BooleanArray`
   --> crates/iceberg/src/arrow/reader.rs:580:12
    |
580 |         Ok(Box::new(result_array) as Box<PredicateResult>)
    |            ^^^^^^^^^^^^^^^^^^^^^^ expected an `FnMut(RecordBatch)` closure, found `BooleanArray`
    |
    = help: the trait `FnMut<(RecordBatch,)>` is not implemented for `BooleanArray`
    = note: required for the cast from `Box<BooleanArray>` to `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>`

Some errors have detailed explanations: E0277, E0308, E0433, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 16 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:558:66
    |
558 |     if lhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_true() {
    |                                                                  ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-15857190855393790415.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:561:66
    |
561 |     if rhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_true() {
    |                                                                  ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-10512537584810416111.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:564:66
    |
564 |     if lhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_false() {
    |                                                                  ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-9156038711918364007.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:567:66
    |
567 |     if rhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_false() {
    |                                                                  ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-11170570369653559306.txt'

warning: `iceberg` (lib test) generated 1 warning (1 duplicate)
error: could not compile `iceberg` (lib test) due to 16 previous errors; 1 warning emitted

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0433]: failed to resolve: use of undeclared type `Schema`
   --> crates/iceberg/src/arrow/reader.rs:558:44
    |
558 |     if lhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_true() {
    |                                            ^^^^^^ use of undeclared type `Schema`
    |
help: consider importing one of these items
    |
20  + use apache_avro::Schema;
    |
20  + use arrow_schema::Schema;
    |
20  + use crate::spec::Schema;
    |

error[E0433]: failed to resolve: use of undeclared type `Schema`
   --> crates/iceberg/src/arrow/reader.rs:561:44
    |
561 |     if rhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_true() {
    |                                            ^^^^^^ use of undeclared type `Schema`
    |
help: consider importing one of these items
    |
20  + use apache_avro::Schema;
    |
20  + use arrow_schema::Schema;
    |
20  + use crate::spec::Schema;
    |

error[E0433]: failed to resolve: use of undeclared type `Schema`
   --> crates/iceberg/src/arrow/reader.rs:564:44
    |
564 |     if lhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_false() {
    |                                            ^^^^^^ use of undeclared type `Schema`
    |
help: consider importing one of these items
    |
20  + use apache_avro::Schema;
    |
20  + use arrow_schema::Schema;
    |
20  + use crate::spec::Schema;
    |

error[E0433]: failed to resolve: use of undeclared type `Schema`
   --> crates/iceberg/src/arrow/reader.rs:567:44
    |
567 |     if rhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_false() {
    |                                            ^^^^^^ use of undeclared type `Schema`
    |
help: consider importing one of these items
    |
20  + use apache_avro::Schema;
    |
20  + use arrow_schema::Schema;
    |
20  + use crate::spec::Schema;
    |

warning: unused import: `or`
  --> crates/iceberg/src/arrow/reader.rs:21:60
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                                                            ^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:558:66
    |
558 |     if lhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_true() {
    |                                                                  ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-9841106294379597065.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:68
    |
558 |     if lhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_true() {
    |                                                                    ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:561:66
    |
561 |     if rhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_true() {
    |                                                                  ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-17843490671806891596.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:561:68
    |
561 |     if rhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_true() {
    |                                                                    ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:564:66
    |
564 |     if lhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_false() {
    |                                                                  ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-1456784424768259209.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:564:68
    |
564 |     if lhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_false() {
    |                                                                    ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:567:66
    |
567 |     if rhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_false() {
    |                                                                  ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-18435466145090962678.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:567:68
    |
567 |     if rhs(RecordBatch::new_empty(Arc::new(Schema::new(vec![]))))?.as_any().is_false() {
    |                                                                    ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:573:36
    |
573 |         let lhs_array = lhs_result.as_any().to_boolean_array()?;
    |                                    ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:574:36
    |
574 |         let rhs_array = rhs_result.as_any().to_boolean_array()?;
    |                                    ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:580:12
    |
580 |         Ok(Box::new(result_array) as Box<PredicateResult>)
    |         -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `BooleanArray`, found `Box<dyn FnMut(...) -> ... + Send>`
    |         |
    |         arguments to this enum variant are incorrect
    |
    = note: expected struct `BooleanArray`
               found struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>`
help: the type constructed contains `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:580:9
    |
580 |         Ok(Box::new(result_array) as Box<PredicateResult>)
    |         ^^^----------------------------------------------^
    |            |
    |            this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5

error[E0277]: expected a `FnMut(RecordBatch)` closure, found `BooleanArray`
   --> crates/iceberg/src/arrow/reader.rs:580:12
    |
580 |         Ok(Box::new(result_array) as Box<PredicateResult>)
    |            ^^^^^^^^^^^^^^^^^^^^^^ expected an `FnMut(RecordBatch)` closure, found `BooleanArray`
    |
    = help: the trait `FnMut<(RecordBatch,)>` is not implemented for `BooleanArray`
    = note: required for the cast from `Box<BooleanArray>` to `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>`

Some errors have detailed explanations: E0277, E0308, E0433, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 16 previous errors; 1 warning emitted


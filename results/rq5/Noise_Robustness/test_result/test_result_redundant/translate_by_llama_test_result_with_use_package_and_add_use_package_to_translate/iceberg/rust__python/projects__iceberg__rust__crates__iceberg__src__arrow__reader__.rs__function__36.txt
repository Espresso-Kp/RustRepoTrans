Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
warning: unused import: `or`
  --> crates/iceberg/src/arrow/reader.rs:21:60
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                                                            ^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0599]: no method named `is_null` found for struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:16
    |
558 |         if lhs.is_null() || rhs.is_null() {
    |                ^^^^^^^ method not found in `Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `BoundPredicateVisitor` defines an item `is_null`, perhaps you need to implement it
   --> crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:24:1
    |
24  | pub trait BoundPredicateVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `is_null` found for struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:33
    |
558 |         if lhs.is_null() || rhs.is_null() {
    |                                 ^^^^^^^ method not found in `Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `BoundPredicateVisitor` defines an item `is_null`, perhaps you need to implement it
   --> crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:24:1
    |
24  | pub trait BoundPredicateVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:559:39
    |
559 |             return Ok(Box::new(|_| Ok(BooleanArray::from([true]))));
    |                                       ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0599]: no method named `is_null` found for struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:560:23
    |
560 |         } else if lhs.is_null() {
    |                       ^^^^^^^ method not found in `Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `BoundPredicateVisitor` defines an item `is_null`, perhaps you need to implement it
   --> crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:24:1
    |
24  | pub trait BoundPredicateVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `is_null` found for struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:562:23
    |
562 |         } else if rhs.is_null() {
    |                       ^^^^^^^ method not found in `Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `BoundPredicateVisitor` defines an item `is_null`, perhaps you need to implement it
   --> crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:24:1
    |
24  | pub trait BoundPredicateVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:566:45
    |
566 |                 let left = lhs(record_batch)?;
    |                                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<BooleanArray, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `std::result::Result<BooleanArray, error::Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:567:46
    |
567 |                 let right = rhs(record_batch)?;
    |                                              ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<BooleanArray, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `std::result::Result<BooleanArray, error::Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:568:40
    |
568 |                 Ok(BooleanArray::from([left && right]))
    |                                        ^^^^ expected `bool`, found `BooleanArray`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:568:48
    |
568 |                 Ok(BooleanArray::from([left && right]))
    |                                                ^^^^^ expected `bool`, found `BooleanArray`

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:568:20
    |
568 |                 Ok(BooleanArray::from([left && right]))
    |                    ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0271]: expected `{closure@reader.rs:565:32}` to be a closure that returns `Result<BooleanArray, ArrowError>`, but it returns `Result<BooleanArray, Error>`
   --> crates/iceberg/src/arrow/reader.rs:570:16
    |
570 |             Ok(obj)
    |                ^^^ expected `Result<BooleanArray, ArrowError>`, found `Result<BooleanArray, Error>`
    |
    = note: expected enum `std::result::Result<_, arrow_schema::ArrowError>`
               found enum `std::result::Result<_, error::Error>`
    = note: required for the cast from `Box<{closure@crates/iceberg/src/arrow/reader.rs:565:32: 565:83}>` to `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`

Some errors have detailed explanations: E0271, E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0271`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 11 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
warning: `iceberg` (lib test) generated 1 warning (1 duplicate)
error: could not compile `iceberg` (lib test) due to 11 previous errors; 1 warning emitted

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
warning: unused import: `or`
  --> crates/iceberg/src/arrow/reader.rs:21:60
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                                                            ^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0599]: no method named `is_null` found for struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:16
    |
558 |         if lhs.is_null() || rhs.is_null() {
    |                ^^^^^^^ method not found in `Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `BoundPredicateVisitor` defines an item `is_null`, perhaps you need to implement it
   --> crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:24:1
    |
24  | pub trait BoundPredicateVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `is_null` found for struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:33
    |
558 |         if lhs.is_null() || rhs.is_null() {
    |                                 ^^^^^^^ method not found in `Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `BoundPredicateVisitor` defines an item `is_null`, perhaps you need to implement it
   --> crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:24:1
    |
24  | pub trait BoundPredicateVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:559:39
    |
559 |             return Ok(Box::new(|_| Ok(BooleanArray::from([true]))));
    |                                       ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0599]: no method named `is_null` found for struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:560:23
    |
560 |         } else if lhs.is_null() {
    |                       ^^^^^^^ method not found in `Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `BoundPredicateVisitor` defines an item `is_null`, perhaps you need to implement it
   --> crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:24:1
    |
24  | pub trait BoundPredicateVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `is_null` found for struct `Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:562:23
    |
562 |         } else if rhs.is_null() {
    |                       ^^^^^^^ method not found in `Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `BoundPredicateVisitor` defines an item `is_null`, perhaps you need to implement it
   --> crates/iceberg/src/expr/visitors/bound_predicate_visitor.rs:24:1
    |
24  | pub trait BoundPredicateVisitor {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:566:45
    |
566 |                 let left = lhs(record_batch)?;
    |                                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<BooleanArray, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `std::result::Result<BooleanArray, error::Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:567:46
    |
567 |                 let right = rhs(record_batch)?;
    |                                              ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<BooleanArray, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `std::result::Result<BooleanArray, error::Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:568:40
    |
568 |                 Ok(BooleanArray::from([left && right]))
    |                                        ^^^^ expected `bool`, found `BooleanArray`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:568:48
    |
568 |                 Ok(BooleanArray::from([left && right]))
    |                                                ^^^^^ expected `bool`, found `BooleanArray`

error[E0277]: the trait bound `BooleanArray: From<[bool; 1]>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:568:20
    |
568 |                 Ok(BooleanArray::from([left && right]))
    |                    ^^^^^^^^^^^^ the trait `From<[bool; 1]>` is not implemented for `BooleanArray`
    |
    = help: the following other types implement trait `From<T>`:
              <BooleanArray as From<arrow_data::data::ArrayData>>
              <BooleanArray as From<arrow_buffer::buffer::boolean::BooleanBuffer>>
              <BooleanArray as From<Vec<bool>>>
              <BooleanArray as From<Vec<std::option::Option<bool>>>>

error[E0271]: expected `{closure@reader.rs:565:32}` to be a closure that returns `Result<BooleanArray, ArrowError>`, but it returns `Result<BooleanArray, Error>`
   --> crates/iceberg/src/arrow/reader.rs:570:16
    |
570 |             Ok(obj)
    |                ^^^ expected `Result<BooleanArray, ArrowError>`, found `Result<BooleanArray, Error>`
    |
    = note: expected enum `std::result::Result<_, arrow_schema::ArrowError>`
               found enum `std::result::Result<_, error::Error>`
    = note: required for the cast from `Box<{closure@crates/iceberg/src/arrow/reader.rs:565:32: 565:83}>` to `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`

Some errors have detailed explanations: E0271, E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0271`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 11 previous errors; 1 warning emitted


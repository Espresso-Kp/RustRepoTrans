Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/avro/schema.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0422]: cannot find struct, variant or union type `MapSchema` in this scope
   --> crates/iceberg/src/avro/schema.rs:144:32
    |
144 |             Ok(AvroSchema::Map(MapSchema {
    |                                ^^^^^^^^^ help: a struct with a similar name exists: `Schema`
    |
   ::: crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ----------------- similarly named struct `Schema` defined here

error[E0599]: no variant or associated item named `String` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:138:35
    |
138 |         if let AvroSchemaOrField::String(key_result) = key_value {
    |                                   ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:141:46
    |
141 |             let last_map_key_field_id = self.next_id;
    |                                              ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:142:48
    |
142 |             let last_map_value_field_id = self.next_id;
    |                                                ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:143:18
    |
143 |             self.next_id += 1;
    |                  ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:144:16
    |
144 |               Ok(AvroSchema::Map(MapSchema {
    |  _____________--_^
    | |             |
    | |             arguments to this enum variant are incorrect
145 | |                 values: value_result,
146 | |                 key_id: last_map_key_field_id,
147 | |                 value_id: last_map_value_field_id,
148 | |             }))
    | |______________^ expected `Either<Schema, RecordField>`, found `Schema`
    |
    = note: expected enum `itertools::Either<apache_avro::Schema, RecordField>`
               found enum `apache_avro::Schema`
help: the type constructed contains `apache_avro::Schema` due to the type of the argument passed
   --> crates/iceberg/src/avro/schema.rs:144:13
    |
144 |                Ok(AvroSchema::Map(MapSchema {
    |  ______________^__-
    | | _____________|
    | ||
145 | ||                 values: value_result,
146 | ||                 key_id: last_map_key_field_id,
147 | ||                 value_id: last_map_value_field_id,
148 | ||             }))
    | ||______________-^
    | |_______________|
    |                 this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: try wrapping the expression in `itertools::Either::Left`
    |
144 ~             Ok(itertools::Either::Left(AvroSchema::Map(MapSchema {
145 |                 values: value_result,
146 |                 key_id: last_map_key_field_id,
147 |                 value_id: last_map_value_field_id,
148 ~             })))
    |

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:154:46
    |
154 |             let last_map_key_field_id = self.next_id;
    |                                              ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:155:48
    |
155 |             let last_map_value_field_id = self.next_id;
    |                                                ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:156:18
    |
156 |             self.next_id += 1;
    |                  ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:158:17
    |
158 |                 format!("k{}_v{}", last_map_key_field_id, last_map_value_field_id),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0560]: struct `RecordField` has no field named `type_`
   --> crates/iceberg/src/avro/schema.rs:162:25
    |
162 |                         type_: key_result,
    |                         ^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0560]: struct `RecordField` has no field named `field_id`
   --> crates/iceberg/src/avro/schema.rs:163:25
    |
163 |                         field_id: last_map_key_field_id,
    |                         ^^^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0560]: struct `RecordField` has no field named `type_`
   --> crates/iceberg/src/avro/schema.rs:167:25
    |
167 |                         type_: value_result,
    |                         ^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0560]: struct `RecordField` has no field named `field_id`
   --> crates/iceberg/src/avro/schema.rs:168:25
    |
168 |                         field_id: last_map_value_field_id,
    |                         ^^^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:172:62
    |
172 |             Ok(AvroSchema::Array(Box::new(AvroSchema::Record(record_schema))))
    |                                           ------------------ ^^^^^^^^^^^^^ expected `RecordSchema`, found `Schema`
    |                                           |
    |                                           arguments to this enum variant are incorrect
    |
note: tuple variant defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:107:5
    |
107 |     Record(RecordSchema),
    |     ^^^^^^

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:172:16
    |
172 |             Ok(AvroSchema::Array(Box::new(AvroSchema::Record(record_schema))))
    |             -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Either<Schema, RecordField>`, found `Schema`
    |             |
    |             arguments to this enum variant are incorrect
    |
    = note: expected enum `itertools::Either<apache_avro::Schema, RecordField>`
               found enum `apache_avro::Schema`
help: the type constructed contains `apache_avro::Schema` due to the type of the argument passed
   --> crates/iceberg/src/avro/schema.rs:172:13
    |
172 |             Ok(AvroSchema::Array(Box::new(AvroSchema::Record(record_schema))))
    |             ^^^--------------------------------------------------------------^
    |                |
    |                this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: try wrapping the expression in `itertools::Either::Left`
    |
172 |             Ok(itertools::Either::Left(AvroSchema::Array(Box::new(AvroSchema::Record(record_schema)))))
    |                ++++++++++++++++++++++++                                                              +

Some errors have detailed explanations: E0308, E0422, E0560, E0599, E0609.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `iceberg` (lib) due to 16 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 16 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0422]: cannot find struct, variant or union type `MapSchema` in this scope
   --> crates/iceberg/src/avro/schema.rs:144:32
    |
144 |             Ok(AvroSchema::Map(MapSchema {
    |                                ^^^^^^^^^ help: a struct with a similar name exists: `Schema`
    |
   ::: crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ----------------- similarly named struct `Schema` defined here

error[E0599]: no variant or associated item named `String` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:138:35
    |
138 |         if let AvroSchemaOrField::String(key_result) = key_value {
    |                                   ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:141:46
    |
141 |             let last_map_key_field_id = self.next_id;
    |                                              ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:142:48
    |
142 |             let last_map_value_field_id = self.next_id;
    |                                                ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:143:18
    |
143 |             self.next_id += 1;
    |                  ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:144:16
    |
144 |               Ok(AvroSchema::Map(MapSchema {
    |  _____________--_^
    | |             |
    | |             arguments to this enum variant are incorrect
145 | |                 values: value_result,
146 | |                 key_id: last_map_key_field_id,
147 | |                 value_id: last_map_value_field_id,
148 | |             }))
    | |______________^ expected `Either<Schema, RecordField>`, found `Schema`
    |
    = note: expected enum `itertools::Either<apache_avro::Schema, RecordField>`
               found enum `apache_avro::Schema`
help: the type constructed contains `apache_avro::Schema` due to the type of the argument passed
   --> crates/iceberg/src/avro/schema.rs:144:13
    |
144 |                Ok(AvroSchema::Map(MapSchema {
    |  ______________^__-
    | | _____________|
    | ||
145 | ||                 values: value_result,
146 | ||                 key_id: last_map_key_field_id,
147 | ||                 value_id: last_map_value_field_id,
148 | ||             }))
    | ||______________-^
    | |_______________|
    |                 this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: try wrapping the expression in `itertools::Either::Left`
    |
144 ~             Ok(itertools::Either::Left(AvroSchema::Map(MapSchema {
145 |                 values: value_result,
146 |                 key_id: last_map_key_field_id,
147 |                 value_id: last_map_value_field_id,
148 ~             })))
    |

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:154:46
    |
154 |             let last_map_key_field_id = self.next_id;
    |                                              ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:155:48
    |
155 |             let last_map_value_field_id = self.next_id;
    |                                                ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `next_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:156:18
    |
156 |             self.next_id += 1;
    |                  ^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:158:17
    |
158 |                 format!("k{}_v{}", last_map_key_field_id, last_map_value_field_id),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0560]: struct `RecordField` has no field named `type_`
   --> crates/iceberg/src/avro/schema.rs:162:25
    |
162 |                         type_: key_result,
    |                         ^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0560]: struct `RecordField` has no field named `field_id`
   --> crates/iceberg/src/avro/schema.rs:163:25
    |
163 |                         field_id: last_map_key_field_id,
    |                         ^^^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0560]: struct `RecordField` has no field named `type_`
   --> crates/iceberg/src/avro/schema.rs:167:25
    |
167 |                         type_: value_result,
    |                         ^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0560]: struct `RecordField` has no field named `field_id`
   --> crates/iceberg/src/avro/schema.rs:168:25
    |
168 |                         field_id: last_map_value_field_id,
    |                         ^^^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `doc`, `aliases`, `default`, `schema`, `order` ... and 2 others

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:172:62
    |
172 |             Ok(AvroSchema::Array(Box::new(AvroSchema::Record(record_schema))))
    |                                           ------------------ ^^^^^^^^^^^^^ expected `RecordSchema`, found `Schema`
    |                                           |
    |                                           arguments to this enum variant are incorrect
    |
note: tuple variant defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:107:5
    |
107 |     Record(RecordSchema),
    |     ^^^^^^

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:172:16
    |
172 |             Ok(AvroSchema::Array(Box::new(AvroSchema::Record(record_schema))))
    |             -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Either<Schema, RecordField>`, found `Schema`
    |             |
    |             arguments to this enum variant are incorrect
    |
    = note: expected enum `itertools::Either<apache_avro::Schema, RecordField>`
               found enum `apache_avro::Schema`
help: the type constructed contains `apache_avro::Schema` due to the type of the argument passed
   --> crates/iceberg/src/avro/schema.rs:172:13
    |
172 |             Ok(AvroSchema::Array(Box::new(AvroSchema::Record(record_schema))))
    |             ^^^--------------------------------------------------------------^
    |                |
    |                this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: try wrapping the expression in `itertools::Either::Left`
    |
172 |             Ok(itertools::Either::Left(AvroSchema::Array(Box::new(AvroSchema::Record(record_schema)))))
    |                ++++++++++++++++++++++++                                                              +

Some errors have detailed explanations: E0308, E0422, E0560, E0599, E0609.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `iceberg` (lib) due to 16 previous errors


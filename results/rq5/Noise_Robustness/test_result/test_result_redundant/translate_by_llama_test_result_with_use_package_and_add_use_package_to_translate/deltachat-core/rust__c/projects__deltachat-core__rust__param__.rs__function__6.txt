Fail
file path is :
projects/deltachat-core/rust/src/param.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0308]: mismatched types
   --> src/param.rs:290:44
    |
290 |         if self.inner.is_empty() || key == 0 {
    |                                     ---    ^ expected `Param`, found integer
    |                                     |
    |                                     expected because this is `Param`

error[E0425]: cannot find function `find_param` in this scope
   --> src/param.rs:298:28
    |
298 |             let (p1, p2) = find_param(&old1, key);
    |                            ^^^^^^^^^^ not found in this scope

error[E0599]: no method named `is_none` found for type parameter `impl ToString` in the current scope
   --> src/param.rs:302:29
    |
289 | pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
    |                                          ------------- method `is_none` not found for this type parameter
...
302 |             } else if value.is_none() {
    |                             ^^^^^^^ method not found in `impl ToString`

error[E0599]: no method named `trim` found for enum `std::option::Option` in the current scope
    --> src/param.rs:307:25
     |
307  |         let old1 = old1.trim();
     |                         ^^^^ method not found in `Option<String>`
     |
note: the method `trim` exists on the type `std::string::String`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/str/mod.rs:1932:5
     |
1932 |     pub fn trim(&self) -> &str {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `std::string::String` value, panicking if the value is an `Option::None`
     |
307  |         let old1 = old1.expect("REASON").trim();
     |                        +++++++++++++++++

error[E0599]: no method named `trim` found for enum `std::option::Option` in the current scope
    --> src/param.rs:308:25
     |
308  |         let old2 = old2.trim();
     |                         ^^^^ method not found in `Option<String>`
     |
note: the method `trim` exists on the type `std::string::String`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/str/mod.rs:1932:5
     |
1932 |     pub fn trim(&self) -> &str {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `std::string::String` value, panicking if the value is an `Option::None`
     |
308  |         let old2 = old2.expect("REASON").trim();
     |                        +++++++++++++++++

error[E0308]: mismatched types
   --> src/param.rs:310:27
    |
289 | pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
    |                                          ------------- expected this type parameter
...
310 |         let new1 = if let Some(value) = value {
    |                           ^^^^^^^^^^^   ----- this expression has type `impl ToString`
    |                           |
    |                           expected type parameter `impl ToString`, found `Option<_>`
    |
    = note: expected type parameter `impl ToString`
                         found enum `std::option::Option<_>`

error[E0277]: `Param` doesn't implement `std::fmt::Display`
   --> src/param.rs:311:61
    |
311 |             format!("{}{}{}={}\n{}", old1, old1.is_empty(), key, value, old2)
    |                                                             ^^^ `Param` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `Param`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

Some errors have detailed explanations: E0277, E0308, E0425, E0599.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `deltachat` (lib) due to 7 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
   --> src/param.rs:290:44
    |
290 |         if self.inner.is_empty() || key == 0 {
    |                                     ---    ^ expected `Param`, found integer
    |                                     |
    |                                     expected because this is `param::Param`

error[E0277]: `param::Param` doesn't implement `std::fmt::Display`
   --> src/param.rs:311:61
    |
311 |             format!("{}{}{}={}\n{}", old1, old1.is_empty(), key, value, old2)
    |                                                             ^^^ `param::Param` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `param::Param`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error: could not compile `deltachat` (lib test) due to 7 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


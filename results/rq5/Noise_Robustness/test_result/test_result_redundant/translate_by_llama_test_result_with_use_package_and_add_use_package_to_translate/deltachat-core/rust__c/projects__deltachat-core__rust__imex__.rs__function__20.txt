Fail
file path is :
projects/deltachat-core/rust/src/imex.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error: expected one of `:`, `;`, `=`, or `|`, found `.`
   --> src/imex.rs:741:40
    |
741 |     let delete_file(context, file_name).await?;
    |                                        ^ expected one of `:`, `;`, `=`, or `|`

error: expected identifier, found keyword `type`
   --> src/imex.rs:736:65
    |
736 |         format!("{}/{}-{}.asc", dir.display(), id.unwrap(), key.type() == DcKeyType::Public() "public" "private")
    |                                                                 ^^^^ expected identifier, found keyword
    |
help: escape `type` to use it as an identifier
    |
736 |         format!("{}/{}-{}.asc", dir.display(), id.unwrap(), key.r#type() == DcKeyType::Public() "public" "private")
    |                                                                 ++

error: expected one of `,`, `.`, `?`, or an operator, found `"public"`
   --> src/imex.rs:736:95
    |
736 |         format!("{}/{}-{}.asc", dir.display(), id.unwrap(), key.type() == DcKeyType::Public() "public" "private")
    |                                                                                               ^^^^^^^^ expected one of `,`, `.`, `?`, or an operator

error: expected identifier, found keyword `type`
   --> src/imex.rs:738:53
    |
738 |         format!("{}/{}-key-default.asc", dir(), key.type() == DcKey::Type::Public() "public" "public" "private")
    |                                                     ^^^^ expected identifier, found keyword
    |
help: escape `type` to use it as an identifier
    |
738 |         format!("{}/{}-key-default.asc", dir(), key.r#type() == DcKey::Type::Public() "public" "public" "private")
    |                                                     ++

error: expected one of `,`, `.`, `?`, or an operator, found `"public"`
   --> src/imex.rs:738:85
    |
738 |         format!("{}/{}-key-default.asc", dir(), key.type() == DcKey::Type::Public() "public" "public" "private")
    |                                                                                     ^^^^^^^^ expected one of `,`, `.`, `?`, or an operator

warning: unused import: `std::any::Any`
 --> src/imex.rs:3:5
  |
3 | use std::any::Any;
  |     ^^^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused imports: `delete_file`, `write_file`
  --> src/imex.rs:34:20
   |
34 |     create_folder, delete_file, get_filesuffix_lc, open_file_std, read_file, time, write_file,
   |                    ^^^^^^^^^^^                                                     ^^^^^^^^^^

error[E0038]: the trait `DcKey` cannot be made into an object
   --> src/imex.rs:703:72
    |
703 |             if let Err(err) = export_key_to_asc_file(context, dir, id, &key).await {
    |                                                                        ^^^^ `DcKey` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> src/key.rs:29:37
    |
29  | pub(crate) trait DcKey: Serialize + Deserializable + KeyTrait + Clone {
    |                  -----              ^^^^^^^^^^^^^^              ^^^^^ ...because it requires `Self: Sized`
    |                  |                  |
    |                  |                  ...because it requires `Self: Sized`
    |                  this trait cannot be made into an object...
    |
   ::: /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/ser.rs:8:8
    |
8   |     fn to_writer<W: io::Write>(&self, _: &mut W) -> Result<()>;
    |        ^^^^^^^^^ ...because method `to_writer` has generic type parameters
    = help: consider moving `to_writer` to another trait
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `DcKey` for this new enum and using it instead:
              pgp::SignedPublicKey
              pgp::SignedSecretKey

error[E0038]: the trait `DcKey` cannot be made into an object
   --> src/imex.rs:703:72
    |
703 |             if let Err(err) = export_key_to_asc_file(context, dir, id, &key).await {
    |                                                                        ^^^^ `DcKey` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> src/key.rs:29:37
    |
29  | pub(crate) trait DcKey: Serialize + Deserializable + KeyTrait + Clone {
    |                  -----              ^^^^^^^^^^^^^^              ^^^^^ ...because it requires `Self: Sized`
    |                  |                  |
    |                  |                  ...because it requires `Self: Sized`
    |                  this trait cannot be made into an object...
    |
   ::: /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/ser.rs:8:8
    |
8   |     fn to_writer<W: io::Write>(&self, _: &mut W) -> Result<()>;
    |        ^^^^^^^^^ ...because method `to_writer` has generic type parameters
    = help: consider moving `to_writer` to another trait
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `DcKey` for this new enum and using it instead:
              pgp::SignedPublicKey
              pgp::SignedSecretKey
    = note: required for the cast from `&SignedPublicKey` to `&dyn DcKey`

error[E0038]: the trait `DcKey` cannot be made into an object
   --> src/imex.rs:711:72
    |
711 |             if let Err(err) = export_key_to_asc_file(context, dir, id, &key).await {
    |                                                                        ^^^^ `DcKey` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> src/key.rs:29:37
    |
29  | pub(crate) trait DcKey: Serialize + Deserializable + KeyTrait + Clone {
    |                  -----              ^^^^^^^^^^^^^^              ^^^^^ ...because it requires `Self: Sized`
    |                  |                  |
    |                  |                  ...because it requires `Self: Sized`
    |                  this trait cannot be made into an object...
    |
   ::: /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/ser.rs:8:8
    |
8   |     fn to_writer<W: io::Write>(&self, _: &mut W) -> Result<()>;
    |        ^^^^^^^^^ ...because method `to_writer` has generic type parameters
    = help: consider moving `to_writer` to another trait
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `DcKey` for this new enum and using it instead:
              pgp::SignedPublicKey
              pgp::SignedSecretKey
    = note: required for the cast from `&SignedSecretKey` to `&dyn DcKey`

error[E0038]: the trait `DcKey` cannot be made into an object
   --> src/imex.rs:711:72
    |
711 |             if let Err(err) = export_key_to_asc_file(context, dir, id, &key).await {
    |                                                                        ^^^^ `DcKey` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> src/key.rs:29:37
    |
29  | pub(crate) trait DcKey: Serialize + Deserializable + KeyTrait + Clone {
    |                  -----              ^^^^^^^^^^^^^^              ^^^^^ ...because it requires `Self: Sized`
    |                  |                  |
    |                  |                  ...because it requires `Self: Sized`
    |                  this trait cannot be made into an object...
    |
   ::: /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/ser.rs:8:8
    |
8   |     fn to_writer<W: io::Write>(&self, _: &mut W) -> Result<()>;
    |        ^^^^^^^^^ ...because method `to_writer` has generic type parameters
    = help: consider moving `to_writer` to another trait
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `DcKey` for this new enum and using it instead:
              pgp::SignedPublicKey
              pgp::SignedSecretKey

error[E0038]: the trait `DcKey` cannot be made into an object
   --> src/imex.rs:733:11
    |
733 |     key: &DcKey,
    |           ^^^^^ `DcKey` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> src/key.rs:29:37
    |
29  | pub(crate) trait DcKey: Serialize + Deserializable + KeyTrait + Clone {
    |                  -----              ^^^^^^^^^^^^^^              ^^^^^ ...because it requires `Self: Sized`
    |                  |                  |
    |                  |                  ...because it requires `Self: Sized`
    |                  this trait cannot be made into an object...
    |
   ::: /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/ser.rs:8:8
    |
8   |     fn to_writer<W: io::Write>(&self, _: &mut W) -> Result<()>;
    |        ^^^^^^^^^ ...because method `to_writer` has generic type parameters
    = help: consider moving `to_writer` to another trait
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `DcKey` for this new enum and using it instead:
              pgp::SignedPublicKey
              pgp::SignedSecretKey

error[E0599]: no method named `display` found for struct `std::string::String` in the current scope
   --> src/imex.rs:740:66
    |
740 |     let log = info!(context, "Exporting key {} to {}", file_name.display(), file_name());
    |                                                                  ^^^^^^^ method not found in `String`

error[E0618]: expected function, found `std::string::String`
   --> src/imex.rs:740:77
    |
735 |     let file_name = if id.is_some() {
    |         --------- `file_name` has type `std::string::String`
...
740 |     let log = info!(context, "Exporting key {} to {}", file_name.display(), file_name());
    |                                                                             ^^^^^^^^^--
    |                                                                             |
    |                                                                             call expression requires function

error[E0038]: the trait `key::DcKey` cannot be made into an object
   --> src/imex.rs:703:72
    |
703 |             if let Err(err) = export_key_to_asc_file(context, dir, id, &key).await {
    |                                                                        ^^^^ `key::DcKey` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> src/key.rs:29:37
    |
29  | pub(crate) trait DcKey: Serialize + Deserializable + KeyTrait + Clone {
    |                  -----              ^^^^^^^^^^^^^^              ^^^^^ ...because it requires `Self: Sized`
    |                  |                  |
    |                  |                  ...because it requires `Self: Sized`
    |                  this trait cannot be made into an object...
    |
   ::: /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/ser.rs:8:8
    |
8   |     fn to_writer<W: io::Write>(&self, _: &mut W) -> Result<()>;
    |        ^^^^^^^^^ ...because method `to_writer` has generic type parameters
    = help: consider moving `to_writer` to another trait
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `key::DcKey` for this new enum and using it instead:
              pgp::SignedPublicKey
              pgp::SignedSecretKey

error[E0038]: the trait `key::DcKey` cannot be made into an object
   --> src/imex.rs:703:72
    |
703 |             if let Err(err) = export_key_to_asc_file(context, dir, id, &key).await {
    |                                                                        ^^^^ `key::DcKey` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> src/key.rs:29:37
    |
29  | pub(crate) trait DcKey: Serialize + Deserializable + KeyTrait + Clone {
    |                  -----              ^^^^^^^^^^^^^^              ^^^^^ ...because it requires `Self: Sized`
    |                  |                  |
    |                  |                  ...because it requires `Self: Sized`
    |                  this trait cannot be made into an object...
    |
   ::: /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/ser.rs:8:8
    |
8   |     fn to_writer<W: io::Write>(&self, _: &mut W) -> Result<()>;
    |        ^^^^^^^^^ ...because method `to_writer` has generic type parameters
    = help: consider moving `to_writer` to another trait
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `key::DcKey` for this new enum and using it instead:
              pgp::SignedPublicKey
              pgp::SignedSecretKey
    = note: required for the cast from `&pgp::SignedPublicKey` to `&dyn key::DcKey`

error[E0038]: the trait `key::DcKey` cannot be made into an object
   --> src/imex.rs:711:72
    |
711 |             if let Err(err) = export_key_to_asc_file(context, dir, id, &key).await {
    |                                                                        ^^^^ `key::DcKey` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> src/key.rs:29:37
    |
29  | pub(crate) trait DcKey: Serialize + Deserializable + KeyTrait + Clone {
    |                  -----              ^^^^^^^^^^^^^^              ^^^^^ ...because it requires `Self: Sized`
    |                  |                  |
    |                  |                  ...because it requires `Self: Sized`
    |                  this trait cannot be made into an object...
    |
   ::: /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/ser.rs:8:8
    |
8   |     fn to_writer<W: io::Write>(&self, _: &mut W) -> Result<()>;
    |        ^^^^^^^^^ ...because method `to_writer` has generic type parameters
    = help: consider moving `to_writer` to another trait
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `key::DcKey` for this new enum and using it instead:
              pgp::SignedPublicKey
              pgp::SignedSecretKey
    = note: required for the cast from `&pgp::SignedSecretKey` to `&dyn key::DcKey`

error[E0038]: the trait `key::DcKey` cannot be made into an object
   --> src/imex.rs:711:72
    |
711 |             if let Err(err) = export_key_to_asc_file(context, dir, id, &key).await {
    |                                                                        ^^^^ `key::DcKey` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> src/key.rs:29:37
    |
29  | pub(crate) trait DcKey: Serialize + Deserializable + KeyTrait + Clone {
    |                  -----              ^^^^^^^^^^^^^^              ^^^^^ ...because it requires `Self: Sized`
    |                  |                  |
    |                  |                  ...because it requires `Self: Sized`
    |                  this trait cannot be made into an object...
    |
   ::: /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/ser.rs:8:8
    |
8   |     fn to_writer<W: io::Write>(&self, _: &mut W) -> Result<()>;
    |        ^^^^^^^^^ ...because method `to_writer` has generic type parameters
    = help: consider moving `to_writer` to another trait
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `key::DcKey` for this new enum and using it instead:
              pgp::SignedPublicKey
              pgp::SignedSecretKey

error[E0038]: the trait `key::DcKey` cannot be made into an object
   --> src/imex.rs:733:11
    |
733 |     key: &DcKey,
    |           ^^^^^ `key::DcKey` cannot be made into an object
    |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
   --> src/key.rs:29:37
    |
29  | pub(crate) trait DcKey: Serialize + Deserializable + KeyTrait + Clone {
    |                  -----              ^^^^^^^^^^^^^^              ^^^^^ ...because it requires `Self: Sized`
    |                  |                  |
    |                  |                  ...because it requires `Self: Sized`
    |                  this trait cannot be made into an object...
    |
   ::: /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/ser.rs:8:8
    |
8   |     fn to_writer<W: io::Write>(&self, _: &mut W) -> Result<()>;
    |        ^^^^^^^^^ ...because method `to_writer` has generic type parameters
    = help: consider moving `to_writer` to another trait
    = help: the following types implement the trait, consider defining an enum where each variant holds one of these types, implementing `key::DcKey` for this new enum and using it instead:
              pgp::SignedPublicKey
              pgp::SignedSecretKey

error[E0782]: trait objects must include the `dyn` keyword
   --> src/imex.rs:733:11
    |
733 |     key: &DcKey,
    |           ^^^^^
    |
help: add `dyn` keyword before this trait
    |
733 |     key: &dyn DcKey,
    |           +++

Some errors have detailed explanations: E0038, E0599, E0618, E0782.
For more information about an error, try `rustc --explain E0038`.
warning: `deltachat` (lib) generated 2 warnings
error: could not compile `deltachat` (lib) due to 13 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
warning: `deltachat` (lib test) generated 2 warnings (2 duplicates)
error: could not compile `deltachat` (lib test) due to 13 previous errors; 2 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


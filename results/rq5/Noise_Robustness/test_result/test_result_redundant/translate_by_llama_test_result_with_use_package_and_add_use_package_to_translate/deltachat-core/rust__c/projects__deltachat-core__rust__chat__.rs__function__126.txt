Fail
file path is :
projects/deltachat-core/rust/src/chat.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error: no rules expected the token `"Invalid attempt to add self e-mail address to group."`
    --> src/chat.rs:3678:88
     |
3678 | ...d).await?).await? "Invalid attempt to add self e-mail address to group.");
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no rules expected this token in macro call
     |
     = note: while trying to match sequence start

error[E0425]: cannot find value `chat` in this scope
    --> src/chat.rs:3679:64
     |
3679 |     ensure!(context.is_verified(context, contact_id).await? || chat.typ == Chattype::Group, "Cannot add non-bidirectionally verified cont...
     |                                                                ^^^^ not found in this scope

error[E0425]: cannot find value `from_handshake` in this scope
    --> src/chat.rs:3686:36
     |
3686 |     msg.param.set_int(Param::Arg2, from_handshake.into());
     |                                    ^^^^^^^^^^^^^^ not found in this scope

error[E0599]: no method named `is_verified` found for reference `&context::Context` in the current scope
    --> src/chat.rs:3679:21
     |
3679 |     ensure!(context.is_verified(context, contact_id).await? || chat.typ == Chattype::Group, "Cannot add non-bidirectionally verified cont...
     |                     ^^^^^^^^^^^ method not found in `&Context`

error[E0061]: this function takes 1 argument but 2 arguments were supplied
    --> src/chat.rs:3683:57
     |
3683 |     msg.text = stock_str::msg_add_member_local(context, Contact::get_addr(context, contact_id).await.to_lowercase(), ContactId::SELF).await;
     |                                                         ^^^^^^^^^^^^^^^^^ -------  ---------- unexpected argument of type `ContactId`
     |                                                                           |
     |                                                                           expected `&Contact`, found `&Context`
     |
     = note: expected reference `&Contact`
                found reference `&context::Context`
note: method defined here
    --> src/contact.rs:1310:12
     |
1310 |     pub fn get_addr(&self) -> &str {
     |            ^^^^^^^^ -----
help: remove the extra argument
     |
3683 -     msg.text = stock_str::msg_add_member_local(context, Contact::get_addr(context, contact_id).await.to_lowercase(), ContactId::SELF).await;
3683 +     msg.text = stock_str::msg_add_member_local(context, Contact::get_addr(/* &Contact */).await.to_lowercase(), ContactId::SELF).await;
     |

error[E0277]: `&str` is not a future
    --> src/chat.rs:3683:96
     |
3683 |     msg.text = stock_str::msg_add_member_local(context, Contact::get_addr(context, contact_id).await.to_lowercase(), ContactId::SELF).await;
     |                                                         ---------------------------------------^^^^^
     |                                                         |                                     ||
     |                                                         |                                     |`&str` is not a future
     |                                                         |                                     help: remove the `.await`
     |                                                         this call returns `&str`
     |
     = help: the trait `futures::Future` is not implemented for `&str`, which is required by `&str: std::future::IntoFuture`
     = note: &str must be a future or must implement `IntoFuture` to be awaited
     = note: required for `&str` to implement `std::future::IntoFuture`

error[E0061]: this function takes 1 argument but 2 arguments were supplied
    --> src/chat.rs:3685:31
     |
3685 |     msg.param.set(Param::Arg, Contact::get_addr(context, contact_id).to_lowercase());
     |                               ^^^^^^^^^^^^^^^^^ -------  ---------- unexpected argument of type `ContactId`
     |                                                 |
     |                                                 expected `&Contact`, found `&Context`
     |
     = note: expected reference `&Contact`
                found reference `&context::Context`
note: method defined here
    --> src/contact.rs:1310:12
     |
1310 |     pub fn get_addr(&self) -> &str {
     |            ^^^^^^^^ -----
help: remove the extra argument
     |
3685 -     msg.param.set(Param::Arg, Contact::get_addr(context, contact_id).to_lowercase());
3685 +     msg.param.set(Param::Arg, Contact::get_addr(/* &Contact */).to_lowercase());
     |

error[E0061]: this function takes 1 argument but 2 arguments were supplied
    --> src/chat.rs:3683:57
     |
3683 |     msg.text = stock_str::msg_add_member_local(context, Contact::get_addr(context, contact_id).await.to_lowercase(), ContactId::SELF).await;
     |                                                         ^^^^^^^^^^^^^^^^^ -------  ---------- unexpected argument of type `contact::ContactId`
     |                                                                           |
     |                                                                           expected `&Contact`, found `&Context`
     |
     = note: expected reference `&contact::Contact`
                found reference `&context::Context`
note: method defined here
    --> src/contact.rs:1310:12
     |
1310 |     pub fn get_addr(&self) -> &str {
     |            ^^^^^^^^ -----
help: remove the extra argument
     |
3683 -     msg.text = stock_str::msg_add_member_local(context, Contact::get_addr(context, contact_id).await.to_lowercase(), ContactId::SELF).await;
3683 +     msg.text = stock_str::msg_add_member_local(context, Contact::get_addr(/* &contact::Contact */).await.to_lowercase(), ContactId::SELF).await;
     |

error[E0061]: this function takes 1 argument but 2 arguments were supplied
    --> src/chat.rs:3685:31
     |
3685 |     msg.param.set(Param::Arg, Contact::get_addr(context, contact_id).to_lowercase());
     |                               ^^^^^^^^^^^^^^^^^ -------  ---------- unexpected argument of type `contact::ContactId`
     |                                                 |
     |                                                 expected `&Contact`, found `&Context`
     |
     = note: expected reference `&contact::Contact`
                found reference `&context::Context`
note: method defined here
    --> src/contact.rs:1310:12
     |
1310 |     pub fn get_addr(&self) -> &str {
     |            ^^^^^^^^ -----
help: remove the extra argument
     |
3685 -     msg.param.set(Param::Arg, Contact::get_addr(context, contact_id).to_lowercase());
3685 +     msg.param.set(Param::Arg, Contact::get_addr(/* &contact::Contact */).to_lowercase());
     |

Some errors have detailed explanations: E0061, E0277, E0425, E0599.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `deltachat` (lib) due to 7 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 7 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


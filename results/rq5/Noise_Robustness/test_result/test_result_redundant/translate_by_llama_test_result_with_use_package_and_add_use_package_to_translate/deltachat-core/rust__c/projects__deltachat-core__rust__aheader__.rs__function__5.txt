Fail
file path is :
projects/deltachat-core/rust/src/aheader.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0449]: visibility qualifiers are not permitted here
  --> src/aheader.rs:97:1
   |
97 | pub fn from_str(s: &str) -> Result<Self> {
   | ^^^
   |
   = note: trait items always share the visibility of their trait

warning: unused import: `std::collections::BTreeMap`
 --> src/aheader.rs:5:5
  |
5 | use std::collections::BTreeMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `Context as _`
 --> src/aheader.rs:9:20
  |
9 | use anyhow::{bail, Context as _, Error, Result};
  |                    ^^^^^^^^^^^^

error[E0599]: no function or associated item named `default` found for struct `SignedPublicKey` in the current scope
   --> src/aheader.rs:100:42
    |
100 |             public_key: SignedPublicKey::default(),
    |                                          ^^^^^^^ function or associated item not found in `SignedPublicKey`
    |
note: if you're trying to build a new `SignedPublicKey`, consider using `SignedPublicKey::new` which returns `SignedPublicKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/public.rs:39:5
    |
39  | /     pub fn new(
40  | |         primary_key: packet::PublicKey,
41  | |         details: SignedKeyDetails,
42  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
43  | |     ) -> Self {
    | |_____________^

error[E0308]: mismatched types
   --> src/aheader.rs:116:49
    |
116 |             if c.is_ascii_whitespace() || *c == '=' || *c == ';' {
    |                                                 ^^^ expected `u8`, found `char`
    |
help: if you meant to write a byte literal, prefix with `b`
    |
116 |             if c.is_ascii_whitespace() || *c == b'=' || *c == ';' {
    |                                                 ~~~~

error[E0277]: can't compare `u8` with `char`
   --> src/aheader.rs:116:46
    |
116 |             if c.is_ascii_whitespace() || *c == '=' || *c == ';' {
    |                                              ^^ no implementation for `u8 == char`
    |
    = help: the trait `PartialEq<char>` is not implemented for `u8`
    = help: the following other types implement trait `PartialEq<Rhs>`:
              <u8 as PartialEq>
              <u8 as PartialEq<serde_json::Value>>

error[E0308]: mismatched types
   --> src/aheader.rs:116:62
    |
116 |             if c.is_ascii_whitespace() || *c == '=' || *c == ';' {
    |                                                              ^^^ expected `u8`, found `char`
    |
help: if you meant to write a byte literal, prefix with `b`
    |
116 |             if c.is_ascii_whitespace() || *c == '=' || *c == b';' {
    |                                                              ~~~~

error[E0277]: can't compare `u8` with `char`
   --> src/aheader.rs:116:59
    |
116 |             if c.is_ascii_whitespace() || *c == '=' || *c == ';' {
    |                                                           ^^ no implementation for `u8 == char`
    |
    = help: the trait `PartialEq<char>` is not implemented for `u8`
    = help: the following other types implement trait `PartialEq<Rhs>`:
              <u8 as PartialEq>
              <u8 as PartialEq<serde_json::Value>>

error[E0308]: mismatched types
   --> src/aheader.rs:121:45
    |
121 |             p = p.iter().position(|c| *c == '=' || *c == ';').map(|i| &p[..i]).unwrap_or(p);
    |                                             ^^^ expected `u8`, found `char`
    |
help: if you meant to write a byte literal, prefix with `b`
    |
121 |             p = p.iter().position(|c| *c == b'=' || *c == ';').map(|i| &p[..i]).unwrap_or(p);
    |                                             ~~~~

error[E0277]: can't compare `u8` with `char`
   --> src/aheader.rs:121:42
    |
121 |             p = p.iter().position(|c| *c == '=' || *c == ';').map(|i| &p[..i]).unwrap_or(p);
    |                                          ^^ no implementation for `u8 == char`
    |
    = help: the trait `PartialEq<char>` is not implemented for `u8`
    = help: the following other types implement trait `PartialEq<Rhs>`:
              <u8 as PartialEq>
              <u8 as PartialEq<serde_json::Value>>

error[E0308]: mismatched types
   --> src/aheader.rs:121:58
    |
121 |             p = p.iter().position(|c| *c == '=' || *c == ';').map(|i| &p[..i]).unwrap_or(p);
    |                                                          ^^^ expected `u8`, found `char`
    |
help: if you meant to write a byte literal, prefix with `b`
    |
121 |             p = p.iter().position(|c| *c == '=' || *c == b';').map(|i| &p[..i]).unwrap_or(p);
    |                                                          ~~~~

error[E0277]: can't compare `u8` with `char`
   --> src/aheader.rs:121:55
    |
121 |             p = p.iter().position(|c| *c == '=' || *c == ';').map(|i| &p[..i]).unwrap_or(p);
    |                                                       ^^ no implementation for `u8 == char`
    |
    = help: the trait `PartialEq<char>` is not implemented for `u8`
    = help: the following other types implement trait `PartialEq<Rhs>`:
              <u8 as PartialEq>
              <u8 as PartialEq<serde_json::Value>>

error[E0614]: type `bool` cannot be dereferenced
   --> src/aheader.rs:124:43
    |
124 |                 p = p.iter().position(|c| *c.is_ascii_whitespace()).map(|i| &p[..i]).unwrap_or(p);
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: can't compare `[u8]` with `char`
   --> src/aheader.rs:125:23
    |
125 |                 if *p == '=' {
    |                       ^^ no implementation for `[u8] == char`
    |
    = help: the trait `PartialEq<char>` is not implemented for `[u8]`
    = help: the following other types implement trait `PartialEq<Rhs>`:
              <[u8] as PartialEq<untrusted::Input<'_>>>
              <[u8] as PartialEq<tokio_util::bytes::Bytes>>
              <[u8] as PartialEq<BytesMut>>
              <[u8] as PartialEq<bstr::bstr::BStr>>
              <[u8] as PartialEq<bstr::bstring::BString>>
              <[u8] as PartialEq<http::header::value::HeaderValue>>
              <[u8] as PartialEq<HeaderValue>>
              <[u8] as PartialEq<winnow::stream::Bytes>>
            and 7 others

error[E0308]: mismatched types
   --> src/aheader.rs:126:53
    |
126 |                     p = p.iter().position(|c| *c == '=' || *c.is_ascii_whitespace()).map(|i| &p[..i]).unwrap_or(p);
    |                                                     ^^^ expected `u8`, found `char`
    |
help: if you meant to write a byte literal, prefix with `b`
    |
126 |                     p = p.iter().position(|c| *c == b'=' || *c.is_ascii_whitespace()).map(|i| &p[..i]).unwrap_or(p);
    |                                                     ~~~~

error[E0277]: can't compare `u8` with `char`
   --> src/aheader.rs:126:50
    |
126 |                     p = p.iter().position(|c| *c == '=' || *c.is_ascii_whitespace()).map(|i| &p[..i]).unwrap_or(p);
    |                                                  ^^ no implementation for `u8 == char`
    |
    = help: the trait `PartialEq<char>` is not implemented for `u8`
    = help: the following other types implement trait `PartialEq<Rhs>`:
              <u8 as PartialEq>
              <u8 as PartialEq<serde_json::Value>>

error[E0614]: type `bool` cannot be dereferenced
   --> src/aheader.rs:126:60
    |
126 |                     p = p.iter().position(|c| *c == '=' || *c.is_ascii_whitespace()).map(|i| &p[..i]).unwrap_or(p);
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/aheader.rs:128:53
    |
128 |                     p = p.iter().position(|c| *c == ';').map(|i| &p[..i]).unwrap_or(p);
    |                                                     ^^^ expected `u8`, found `char`
    |
help: if you meant to write a byte literal, prefix with `b`
    |
128 |                     p = p.iter().position(|c| *c == b';').map(|i| &p[..i]).unwrap_or(p);
    |                                                     ~~~~

error[E0277]: can't compare `u8` with `char`
   --> src/aheader.rs:128:50
    |
128 |                     p = p.iter().position(|c| *c == ';').map(|i| &p[..i]).unwrap_or(p);
    |                                                  ^^ no implementation for `u8 == char`
    |
    = help: the trait `PartialEq<char>` is not implemented for `u8`
    = help: the following other types implement trait `PartialEq<Rhs>`:
              <u8 as PartialEq>
              <u8 as PartialEq<serde_json::Value>>

error[E0308]: mismatched types
   --> src/aheader.rs:130:30
    |
130 |                         *p = b'\0';
    |                         --   ^^^^^ expected `[u8]`, found `u8`
    |                         |
    |                         expected due to the type of this binding

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
   --> src/aheader.rs:130:25
    |
130 |                         *p = b'\0';
    |                         ^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[u8]`
    = note: the left-hand-side of an assignment must have a statically known size

error[E0614]: type `bool` cannot be dereferenced
   --> src/aheader.rs:134:47
    |
134 |                     p = p.iter().position(|c| *c.is_ascii_whitespace() || *c == ';').map(|i| &p[..i]).unwrap_or(p);
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/aheader.rs:134:81
    |
134 |                     p = p.iter().position(|c| *c.is_ascii_whitespace() || *c == ';').map(|i| &p[..i]).unwrap_or(p);
    |                                                                                 ^^^ expected `u8`, found `char`
    |
help: if you meant to write a byte literal, prefix with `b`
    |
134 |                     p = p.iter().position(|c| *c.is_ascii_whitespace() || *c == b';').map(|i| &p[..i]).unwrap_or(p);
    |                                                                                 ~~~~

error[E0277]: can't compare `u8` with `char`
   --> src/aheader.rs:134:78
    |
134 |                     p = p.iter().position(|c| *c.is_ascii_whitespace() || *c == ';').map(|i| &p[..i]).unwrap_or(p);
    |                                                                              ^^ no implementation for `u8 == char`
    |
    = help: the trait `PartialEq<char>` is not implemented for `u8`
    = help: the following other types implement trait `PartialEq<Rhs>`:
              <u8 as PartialEq>
              <u8 as PartialEq<serde_json::Value>>

error[E0308]: mismatched types
   --> src/aheader.rs:136:45
    |
136 |                 *after_attr_name.unwrap() = b'\0';
    |                 -------------------------   ^^^^^ expected `[u8]`, found `u8`
    |                 |
    |                 expected due to the type of this binding

error[E0599]: no method named `add_attribute` found for struct `Aheader` in the current scope
   --> src/aheader.rs:137:28
    |
47  | pub struct Aheader {
    | ------------------ method `add_attribute` not found for this struct
...
137 |                 if!aheader.add_attribute(beg_attr_name.unwrap(), beg_attr_value.unwrap()) {
    |                            ^^^^^^^^^^^^^ method not found in `Aheader`

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
   --> src/aheader.rs:136:17
    |
136 |                 *after_attr_name.unwrap() = b'\0';
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[u8]`
    = note: the left-hand-side of an assignment must have a statically known size

error[E0609]: no field `binary` on type `SignedPublicKey`
   --> src/aheader.rs:143:58
    |
143 |         if!aheader.addr.is_empty() &&!aheader.public_key.binary.is_empty() {
    |                                                          ^^^^^^ unknown field
    |
    = note: available fields are: `primary_key`, `details`, `public_subkeys`

Some errors have detailed explanations: E0277, E0308, E0449, E0599, E0609, E0614.
For more information about an error, try `rustc --explain E0277`.
warning: `deltachat` (lib) generated 2 warnings
error: could not compile `deltachat` (lib) due to 26 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0599]: no function or associated item named `default` found for struct `pgp::SignedPublicKey` in the current scope
   --> src/aheader.rs:100:42
    |
100 |             public_key: SignedPublicKey::default(),
    |                                          ^^^^^^^ function or associated item not found in `SignedPublicKey`
    |
note: if you're trying to build a new `pgp::SignedPublicKey`, consider using `pgp::SignedPublicKey::new` which returns `pgp::SignedPublicKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/public.rs:39:5
    |
39  | /     pub fn new(
40  | |         primary_key: packet::PublicKey,
41  | |         details: SignedKeyDetails,
42  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
43  | |     ) -> Self {
    | |_____________^

error[E0599]: no method named `add_attribute` found for struct `aheader::Aheader` in the current scope
   --> src/aheader.rs:137:28
    |
47  | pub struct Aheader {
    | ------------------ method `add_attribute` not found for this struct
...
137 |                 if!aheader.add_attribute(beg_attr_name.unwrap(), beg_attr_value.unwrap()) {
    |                            ^^^^^^^^^^^^^ method not found in `Aheader`

error[E0609]: no field `binary` on type `pgp::SignedPublicKey`
   --> src/aheader.rs:143:58
    |
143 |         if!aheader.addr.is_empty() &&!aheader.public_key.binary.is_empty() {
    |                                                          ^^^^^^ unknown field
    |
    = note: available fields are: `primary_key`, `details`, `public_subkeys`

warning: `deltachat` (lib test) generated 2 warnings (2 duplicates)
error: could not compile `deltachat` (lib test) due to 26 previous errors; 2 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


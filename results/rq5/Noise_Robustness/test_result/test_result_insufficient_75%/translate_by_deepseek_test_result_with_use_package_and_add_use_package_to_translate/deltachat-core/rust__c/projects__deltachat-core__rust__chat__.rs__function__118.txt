Fail
file path is :
projects/deltachat-core/rust/src/chat.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `HashMap` is defined multiple times
  --> src/chat.rs:14:24
   |
8  | use std::collections::HashMap;
   |     ------------------------- previous import of the type `HashMap` here
...
14 | use std::collections::{HashMap, HashSet};
   |                        ^^^^^^^--
   |                        |
   |                        `HashMap` reimported here
   |                        help: remove unnecessary import
   |
   = note: `HashMap` must be defined only once in the type namespace of this module

error[E0252]: the name `PathBuf` is defined multiple times
  --> src/chat.rs:16:23
   |
9  | use std::path::PathBuf;
   |     ------------------ previous import of the type `PathBuf` here
...
16 | use std::path::{Path, PathBuf};
   |                       ^^^^^^^ `PathBuf` reimported here
   |
   = note: `PathBuf` must be defined only once in the type namespace of this module

error[E0252]: the name `Result` is defined multiple times
  --> src/chat.rs:20:50
   |
10 | use anyhow::Result;
   |     -------------- previous import of the type `Result` here
...
20 | use anyhow::{anyhow, bail, ensure, Context as _, Result};
   |                                                  ^^^^^^ `Result` reimported here
   |
   = note: `Result` must be defined only once in the type namespace of this module

error[E0252]: the name `ContactId` is defined multiple times
  --> src/chat.rs:37:37
   |
11 | use crate::contact::ContactId;
   |     ------------------------- previous import of the type `ContactId` here
...
37 | use crate::contact::{self, Contact, ContactId, Origin};
   |                                     ^^^^^^^^^--
   |                                     |
   |                                     `ContactId` reimported here
   |                                     help: remove unnecessary import
   |
   = note: `ContactId` must be defined only once in the type namespace of this module

warning: unused import: `Row`
 --> src/chat.rs:5:24
  |
5 | use rusqlite::{params, Row};
  |                        ^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `tokio::sync::Notify`
 --> src/chat.rs:6:5
  |
6 | use tokio::sync::Notify;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::atomic::AtomicBool`
 --> src/chat.rs:7:5
  |
7 | use std::sync::atomic::AtomicBool;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `anyhow::Result`
  --> src/chat.rs:10:5
   |
10 | use anyhow::Result;
   |     ^^^^^^^^^^^^^^

warning: unused import: `HashMap`
  --> src/chat.rs:14:24
   |
14 | use std::collections::{HashMap, HashSet};
   |                        ^^^^^^^

warning: unused import: `PathBuf`
  --> src/chat.rs:16:23
   |
16 | use std::path::{Path, PathBuf};
   |                       ^^^^^^^

warning: unused import: `ContactId`
  --> src/chat.rs:37:37
   |
37 | use crate::contact::{self, Contact, ContactId, Origin};
   |                                     ^^^^^^^^^

error[E0308]: mismatched types
    --> src/chat.rs:1560:50
     |
1560 |                 match get_chat_contacts(context, chat.id).await {
     |                       -----------------          ^^^^^^^ expected `u32`, found `ChatId`
     |                       |
     |                       arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:415:62
     |
415  |                 for contact_id in get_chat_contacts(context, self).await? {
     |                                   -----------------          ^^^^ expected `u32`, found `ChatId`
     |                                   |
     |                                   arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:2185:62
     |
2185 |                 for contact_id in get_chat_contacts(context, self.id).await? {
     |                                   -----------------          ^^^^^^^ expected `u32`, found `ChatId`
     |                                   |
     |                                   arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:500:62
     |
500  |                 for contact_id in get_chat_contacts(context, self).await? {
     |                                   -----------------          ^^^^ expected `u32`, found `ChatId`
     |                                   |
     |                                   arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:1268:54
     |
1268 |         for contact_id in get_chat_contacts(context, self)
     |                           -----------------          ^^^^ expected `u32`, found `ChatId`
     |                           |
     |                           arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:1755:55
     |
1755 |             let contacts = get_chat_contacts(context, self.id).await?;
     |                            -----------------          ^^^^^^^ expected `u32`, found `ChatId`
     |                            |
     |                            arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:1777:55
     |
1777 |             let contacts = get_chat_contacts(context, self.id).await?;
     |                            -----------------          ^^^^^^^ expected `u32`, found `ChatId`
     |                            |
     |                            arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0599]: no method named `as_str` found for struct `Sql` in the current scope
    --> src/chat.rs:3471:27
     |
3471 |     let sql = context.sql.as_str();
     |                           ^^^^^^ method not found in `Sql`
     |
    ::: src/sql.rs:57:1
     |
57   | pub struct Sql {
     | -------------- method `as_str` not found for this struct
     |
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following traits define an item `as_str`, perhaps you need to implement one of them:
             candidate #1: `rustix::path::arg::Arg`
             candidate #2: `http::header::map::as_header_name::Sealed`
             candidate #3: `reqwest::into_url::IntoUrlSealed`
             candidate #4: `reqwest::into_url::IntoUrlSealed`
             candidate #5: `reqwest::header::map::as_header_name::Sealed`

error[E0599]: no method named `query_map` found for reference `&context::Context` in the current scope
    --> src/chat.rs:3473:13
     |
3473 |     context.query_map(
     |     --------^^^^^^^^^ method not found in `&Context`
     |
help: one of the expressions' fields has a method of the same name
     |
3473 |     context.inner.sql.query_map(
     |             ++++++++++
help: one of the expressions' fields has a method of the same name
     |
3473 |     context.sql.query_map(
     |             ++++

error[E0423]: cannot initialize a tuple struct which contains private fields
    --> src/chat.rs:3478:16
     |
3478 |             Ok(ContactId(contact_id))
     |                ^^^^^^^^^
     |
note: constructor is not visible here due to private fields
    --> src/contact.rs:55:22
     |
55   | pub struct ContactId(u32);
     |                      ^^^ private field
help: consider making the field publicly accessible
    -->  src/contact.rs:55:22
     |
55   | pub struct ContactId(pub u32);
     |                      +++
help: a local variable with a similar name exists
     |
3478 |             Ok(contact_id(contact_id))
     |                ~~~~~~~~~~

error[E0308]: mismatched types
    --> src/chat.rs:4559:83
     |
4559 |     let contacts_old = HashSet::<ContactId>::from_iter(get_chat_contacts(context, id).await?);
     |                                                        -----------------          ^^ expected `u32`, found `ChatId`
     |                                                        |
     |                                                        arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0599]: no method named `as_str` found for struct `sql::Sql` in the current scope
    --> src/chat.rs:3471:27
     |
3471 |     let sql = context.sql.as_str();
     |                           ^^^^^^ method not found in `sql::Sql`
     |
    ::: src/sql.rs:57:1
     |
57   | pub struct Sql {
     | -------------- method `as_str` not found for this struct
     |
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following traits define an item `as_str`, perhaps you need to implement one of them:
             candidate #1: `rustix::path::arg::Arg`
             candidate #2: `http::header::map::as_header_name::Sealed`
             candidate #3: `reqwest::into_url::IntoUrlSealed`
             candidate #4: `reqwest::into_url::IntoUrlSealed`
             candidate #5: `reqwest::header::map::as_header_name::Sealed`

error[E0308]: mismatched types
    --> src/receive_imf.rs:1769:66
     |
1769 |         let mut chat_contacts = chat::get_chat_contacts(context, parent_chat.id).await?;
     |                                 -----------------------          ^^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                                 |
     |                                 arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf.rs:1811:62
     |
1811 |         let chat_contacts = chat::get_chat_contacts(context, parent_chat_id).await?;
     |                             -----------------------          ^^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                             |
     |                             arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf.rs:1999:74
     |
1999 |         HashSet::<ContactId>::from_iter(chat::get_chat_contacts(context, chat_id).await?);
     |                                         -----------------------          ^^^^^^^ expected `u32`, found `ChatId`
     |                                         |
     |                                         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/context.rs:1431:44
     |
1431 |         let members = get_chat_contacts(t, chat.id).await.unwrap();
     |                       -----------------    ^^^^^^^ expected `u32`, found `ChatId`
     |                       |
     |                       arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

Some errors have detailed explanations: E0252, E0308, E0423, E0599.
For more information about an error, try `rustc --explain E0252`.
warning: `deltachat` (lib) generated 7 warnings
error: could not compile `deltachat` (lib) due to 18 previous errors; 7 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:1879:46
     |
1879 |         assert_eq!(get_chat_contacts(&alice, chat.id).await.unwrap().len(), 4);
     |                    -----------------         ^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:1881:46
     |
1881 |         assert_eq!(get_chat_contacts(&alice, chat.id).await.unwrap().len(), 3);
     |                    -----------------         ^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:1922:51
     |
1922 |     let chat_contacts = get_chat_contacts(&alice, answer.chat_id)
     |                         -----------------         ^^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                         |
     |                         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/test_utils.rs:706:53
     |
706  |         let members = chat::get_chat_contacts(self, sel_chat.id).await.unwrap();
     |                       -----------------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                       |
     |                       arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/tests/aeap.rs:273:52
     |
273  |         let members = chat::get_chat_contacts(bob, *group).await.unwrap();
     |                       -----------------------      ^^^^^^ expected `u32`, found `ChatId`
     |                       |
     |                       arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/tests/aeap.rs:311:52
     |
311  |         let members = chat::get_chat_contacts(bob, *group).await.unwrap();
     |                       -----------------------      ^^^^^^ expected `u32`, found `ChatId`
     |                       |
     |                       arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5129:43
     |
5129 |         assert_eq!(get_chat_contacts(&a1, a1_chat_id).await?.len(), 1);
     |                    -----------------      ^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5130:43
     |
5130 |         assert_eq!(get_chat_contacts(&a2, a2_chat_id).await?.len(), 1);
     |                    -----------------      ^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5143:43
     |
5143 |         assert_eq!(get_chat_contacts(&a1, a1_chat_id).await?.len(), 2);
     |                    -----------------      ^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5144:43
     |
5144 |         assert_eq!(get_chat_contacts(&a2, a2_chat_id).await?.len(), 2);
     |                    -----------------      ^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5175:43
     |
5175 |         assert_eq!(get_chat_contacts(&a1, a1_chat_id).await?.len(), 1);
     |                    -----------------      ^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5176:43
     |
5176 |         assert_eq!(get_chat_contacts(&a2, a2_chat_id).await?.len(), 1);
     |                    -----------------      ^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5205:46
     |
5205 |         assert_eq!(get_chat_contacts(&alice, alice_chat_id).await?.len(), 4);
     |                    -----------------         ^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5214:46
     |
5214 |         assert_eq!(get_chat_contacts(&alice, alice_chat_id).await?.len(), 2);
     |                    -----------------         ^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5221:44
     |
5221 |         assert_eq!(get_chat_contacts(&bob, bob_chat_id).await?.len(), 4);
     |                    -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5225:44
     |
5225 |         assert_eq!(get_chat_contacts(&bob, bob_chat_id).await?.len(), 2);
     |                    -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5242:43
     |
5242 |         assert_eq!(get_chat_contacts(bob, bob_chat_id).await?.len(), 2);
     |                    -----------------      ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5251:43
     |
5251 |         assert_eq!(get_chat_contacts(bob, bob_chat_id).await?.len(), 3);
     |                    -----------------      ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5285:44
     |
5285 |         assert_eq!(get_chat_contacts(&bob, bob_chat_id).await?.len(), 4);
     |                    -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5290:44
     |
5290 |         assert_eq!(get_chat_contacts(&bob, bob_chat_id).await?.len(), 2);
     |                    -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5295:44
     |
5295 |         assert_eq!(get_chat_contacts(&bob, bob_chat_id).await?.len(), 2);
     |                    -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5313:46
     |
5313 |         assert_eq!(get_chat_contacts(&alice, alice_chat_id).await?.len(), 2);
     |                    -----------------         ^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5323:46
     |
5323 |         assert_eq!(get_chat_contacts(&alice, alice_chat_id).await?.len(), 1);
     |                    -----------------         ^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5336:44
     |
5336 |         assert_eq!(get_chat_contacts(&ctx, chat.id).await.unwrap().len(), 1);
     |                    -----------------       ^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5342:44
     |
5342 |         assert_eq!(get_chat_contacts(&ctx, chat.id).await.unwrap().len(), 1);
     |                    -----------------       ^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5346:44
     |
5346 |         assert_eq!(get_chat_contacts(&ctx, chat.id).await.unwrap().len(), 1);
     |                    -----------------       ^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:5350:44
     |
5350 |         assert_eq!(get_chat_contacts(&ctx, chat.id).await.unwrap().len(), 1);
     |                    -----------------       ^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:6193:46
     |
6193 |         assert_eq!(get_chat_contacts(&alice, alice_chat_id).await?.len(), 2);
     |                    -----------------         ^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:6779:44
     |
6779 |         assert_eq!(get_chat_contacts(&bob, msg.chat_id).await?.len(), 2);
     |                    -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:6782:44
     |
6782 |         assert_eq!(get_chat_contacts(&bob, msg.chat_id).await?.len(), 3);
     |                    -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:6787:44
     |
6787 |         assert_eq!(get_chat_contacts(&bob, msg.chat_id).await?.len(), 3);
     |                    -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:6796:47
     |
6796 |         assert_eq!(get_chat_contacts(&claire, msg.chat_id).await?.len(), 3);
     |                    -----------------          ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:6931:39
     |
6931 |             get_chat_contacts(&alice, chat_bob.id).await?.pop().unwrap(),
     |             -----------------         ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |             |
     |             arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:6994:47
     |
6994 |         assert!(get_chat_contacts(&alices[1], a1_broadcast_id)
     |                 -----------------             ^^^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                 |
     |                 arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:7006:47
     |
7006 |         assert!(get_chat_contacts(&alices[0], a0_broadcast_id)
     |                 -----------------             ^^^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                 |
     |                 arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:7499:43
     |
7499 |         assert!(get_chat_contacts(alice1, a1_broadcast_id).await?.is_empty());
     |                 -----------------         ^^^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                 |
     |                 arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:7510:39
     |
7510 |             get_chat_contacts(alice1, a1_broadcast_id).await?,
     |             -----------------         ^^^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |             |
     |             arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chat.rs:7521:43
     |
7521 |         assert!(get_chat_contacts(alice1, a1_broadcast_id).await?.is_empty());
     |                 -----------------         ^^^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                 |
     |                 arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chatlist.rs:654:46
     |
654  |         let contacts = get_chat_contacts(&t, chat_id).await?;
     |                        -----------------     ^^^^^^^ expected `u32`, found `ChatId`
     |                        |
     |                        arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/chatlist.rs:709:46
     |
709  |         let contacts = get_chat_contacts(&t, chat_id).await?;
     |                        -----------------     ^^^^^^^ expected `u32`, found `ChatId`
     |                        |
     |                        arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/contact.rs:2212:46
     |
2212 |         let contacts = get_chat_contacts(&t, chat_id).await?;
     |                        -----------------     ^^^^^^^ expected `u32`, found `ChatId`
     |                        |
     |                        arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/contact.rs:2877:54
     |
2877 |         let contacts = chat::get_chat_contacts(&bob, chat.id).await?;
     |                        -----------------------       ^^^^^^^ expected `u32`, found `ChatId`
     |                        |
     |                        arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/contact.rs:2910:54
     |
2910 |         let contacts = chat::get_chat_contacts(&bob, chat.id).await?;
     |                        -----------------------       ^^^^^^^ expected `u32`, found `ChatId`
     |                        |
     |                        arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/context.rs:1789:49
     |
1789 |         let contact_ids = get_chat_contacts(&t, chat_id).await?;
     |                           -----------------     ^^^^^^^ expected `u32`, found `ChatId`
     |                           |
     |                           arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/message.rs:2302:59
     |
2302 |         let contact_id = *chat::get_chat_contacts(&alice, chat.id)
     |                           -----------------------         ^^^^^^^ expected `u32`, found `ChatId`
     |                           |
     |                           arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/message.rs:2323:57
     |
2323 |         let contact_id = *chat::get_chat_contacts(&bob, chat.id)
     |                           -----------------------       ^^^^^^^ expected `u32`, found `ChatId`
     |                           |
     |                           arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:167:44
     |
167  |     assert_eq!(chat::get_chat_contacts(&t, chat_id).await.unwrap().len(), 1);
     |                -----------------------     ^^^^^^^ expected `u32`, found `ChatId`
     |                |
     |                arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:183:44
     |
183  |     assert_eq!(chat::get_chat_contacts(&t, chat_id).await.unwrap().len(), 3);
     |                -----------------------     ^^^^^^^ expected `u32`, found `ChatId`
     |                |
     |                arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:202:44
     |
202  |     assert_eq!(chat::get_chat_contacts(&t, chat_id).await.unwrap().len(), 3);
     |                -----------------------     ^^^^^^^ expected `u32`, found `ChatId`
     |                |
     |                arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:883:48
     |
883  |     assert_eq!(chat::get_chat_contacts(&t.ctx, chat_id).await?.len(), 1);
     |                -----------------------         ^^^^^^^ expected `u32`, found `ChatId`
     |                |
     |                arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3561:64
     |
3561 |     let mut actual_chat_contacts = chat::get_chat_contacts(&t, chat_id).await?;
     |                                    -----------------------     ^^^^^^^ expected `u32`, found `ChatId`
     |                                    |
     |                                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3633:41
     |
3633 |         chat::get_chat_contacts(&alice, group_chat.id).await?.len(),
     |         -----------------------         ^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |         |
     |         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3655:41
     |
3655 |         chat::get_chat_contacts(&alice, group_chat.id).await?.len(),
     |         -----------------------         ^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |         |
     |         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3688:41
     |
3688 |     assert_eq!(get_chat_contacts(alice, alice_chat_id).await?.len(), 2);
     |                -----------------        ^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                |
     |                arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3709:40
     |
3709 |     assert_eq!(get_chat_contacts(&bob, bob_chat_id).await?.len(), 3);
     |                -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                |
     |                arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3726:40
     |
3726 |     assert_eq!(get_chat_contacts(&bob, bob_chat_id).await?.len(), 2);
     |                -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                |
     |                arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3811:42
     |
3811 |     assert_eq!(get_chat_contacts(&alice, alice_chat_id).await?.len(), 4);
     |                -----------------         ^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                |
     |                arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3816:42
     |
3816 |     assert_eq!(get_chat_contacts(&alice, alice_chat_id).await?.len(), 3);
     |                -----------------         ^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                |
     |                arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3826:40
     |
3826 |     assert_eq!(get_chat_contacts(&bob, bob_chat_id).await?.len(), 3);
     |                -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                |
     |                arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3867:42
     |
3867 |     assert_eq!(get_chat_contacts(&alice, chat_id).await?.len(), 3);
     |                -----------------         ^^^^^^^ expected `u32`, found `ChatId`
     |                |
     |                arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3875:42
     |
3875 |     assert_eq!(get_chat_contacts(&alice, chat_id).await?.len(), 4);
     |                -----------------         ^^^^^^^ expected `u32`, found `ChatId`
     |                |
     |                arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3899:40
     |
3899 |     assert_eq!(get_chat_contacts(&bob, bob_chat_id).await?.len(), 1);
     |                -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                |
     |                arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3960:41
     |
3960 |         chat::get_chat_contacts(&alice, group_chat.id).await?.len(),
     |         -----------------------         ^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |         |
     |         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3983:41
     |
3983 |         chat::get_chat_contacts(&alice, group_chat.id).await?.len(),
     |         -----------------------         ^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |         |
     |         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4030:41
     |
4030 |         chat::get_chat_contacts(&alice, group_chat.id).await?.len(),
     |         -----------------------         ^^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |         |
     |         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4129:40
     |
4129 |     assert_eq!(get_chat_contacts(&bob, bob_chat_id).await?.len(), 2);
     |                -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                |
     |                arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4176:40
     |
4176 |     assert_eq!(get_chat_contacts(&bob, bob_chat_id).await?.len(), 2);
     |                -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                |
     |                arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4275:41
     |
4275 |         chat::get_chat_contacts(&alice, alice_grp.id).await?.len(),
     |         -----------------------         ^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |         |
     |         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4289:41
     |
4289 |         chat::get_chat_contacts(&alice, alice_grp.id).await?.len(),
     |         -----------------------         ^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |         |
     |         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4320:41
     |
4320 |         chat::get_chat_contacts(&alice, alice_grp.id).await?.len(),
     |         -----------------------         ^^^^^^^^^^^^ expected `u32`, found `ChatId`
     |         |
     |         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4343:44
     |
4343 |     let contacts = get_chat_contacts(&bob, bob_chat_id).await?;
     |                    -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4382:40
     |
4382 |     assert_eq!(get_chat_contacts(&bob, bob_chat_id).await?, contacts);
     |                -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                |
     |                arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4403:44
     |
4403 |     let contacts = get_chat_contacts(&bob, bob_chat_id).await?;
     |                    -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                    |
     |                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4435:40
     |
4435 |     assert_eq!(get_chat_contacts(&bob, bob_chat_id).await?, contacts);
     |                -----------------       ^^^^^^^^^^^ expected `u32`, found `ChatId`
     |                |
     |                arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

error[E0308]: mismatched types
    --> src/tests/verified_chats.rs:808:41
     |
808  |         chat::get_chat_contacts(alice1, group1.id).await?,
     |         -----------------------         ^^^^^^^^^ expected `u32`, found `ChatId`
     |         |
     |         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3469:14
     |
3469 | pub async fn get_chat_contacts(context: &Context, chat_id: u32) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ------------

warning: `deltachat` (lib test) generated 7 warnings (7 duplicates)
error: could not compile `deltachat` (lib test) due to 94 previous errors; 7 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


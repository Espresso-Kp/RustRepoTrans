Fail
file path is :
projects/deltachat-core/rust/src/sql.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0277]: `*mut sqlite3_stmt` cannot be sent between threads safely
   --> src/sql.rs:509:21
    |
509 |     let stmt = self.call(|conn| {
    |                     ^^^^ `*mut sqlite3_stmt` cannot be sent between threads safely
    |
    = help: within `Statement<'_>`, the trait `std::marker::Send` is not implemented for `*mut sqlite3_stmt`, which is required by `Statement<'_>: std::marker::Send`
note: required because it appears within the type `rusqlite::raw_statement::RawStatement`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/raw_statement.rs:12:12
    |
12  | pub struct RawStatement {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `Statement<'_>`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/statement.rs:18:12
    |
18  | pub struct Statement<'conn> {
    |            ^^^^^^^^^
note: required by a bound in `Sql::call`
   --> src/sql.rs:378:12
    |
375 |     async fn call<'a, F, R>(&'a self, function: F) -> Result<R>
    |              ---- required by a bound in this associated function
...
378 |         R: Send + 'static,
    |            ^^^^ required by this bound in `Sql::call`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src/sql.rs:509:21
    |
509 |     let stmt = self.call(|conn| {
    |                     ^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `rusqlite::Connection`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`, which is required by `Statement<'_>: std::marker::Send`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::Connection`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required for `&rusqlite::Connection` to implement `std::marker::Send`
note: required because it appears within the type `Statement<'_>`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/statement.rs:18:12
    |
18  | pub struct Statement<'conn> {
    |            ^^^^^^^^^
note: required by a bound in `Sql::call`
   --> src/sql.rs:378:12
    |
375 |     async fn call<'a, F, R>(&'a self, function: F) -> Result<R>
    |              ---- required by a bound in this associated function
...
378 |         R: Send + 'static,
    |            ^^^^ required by this bound in `Sql::call`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src/sql.rs:509:21
    |
509 |     let stmt = self.call(|conn| {
    |                     ^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `rusqlite::Connection`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`, which is required by `Statement<'_>: std::marker::Send`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `rusqlite::Connection`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required for `&rusqlite::Connection` to implement `std::marker::Send`
note: required because it appears within the type `Statement<'_>`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/statement.rs:18:12
    |
18  | pub struct Statement<'conn> {
    |            ^^^^^^^^^
note: required by a bound in `Sql::call`
   --> src/sql.rs:378:12
    |
375 |     async fn call<'a, F, R>(&'a self, function: F) -> Result<R>
    |              ---- required by a bound in this associated function
...
378 |         R: Send + 'static,
    |            ^^^^ required by this bound in `Sql::call`

For more information about this error, try `rustc --explain E0277`.
error: could not compile `deltachat` (lib) due to 3 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0277]: `*mut sqlite3_stmt` cannot be sent between threads safely
   --> src/sql.rs:509:21
    |
509 |     let stmt = self.call(|conn| {
    |                     ^^^^ `*mut sqlite3_stmt` cannot be sent between threads safely
    |
    = help: within `Statement<'_>`, the trait `std::marker::Send` is not implemented for `*mut sqlite3_stmt`, which is required by `Statement<'_>: std::marker::Send`
note: required because it appears within the type `rusqlite::raw_statement::RawStatement`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/raw_statement.rs:12:12
    |
12  | pub struct RawStatement {
    |            ^^^^^^^^^^^^
note: required because it appears within the type `Statement<'_>`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/statement.rs:18:12
    |
18  | pub struct Statement<'conn> {
    |            ^^^^^^^^^
note: required by a bound in `sql::Sql::call`
   --> src/sql.rs:378:12
    |
375 |     async fn call<'a, F, R>(&'a self, function: F) -> Result<R>
    |              ---- required by a bound in this associated function
...
378 |         R: Send + 'static,
    |            ^^^^ required by this bound in `Sql::call`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src/sql.rs:509:21
    |
509 |     let stmt = self.call(|conn| {
    |                     ^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `rusqlite::Connection`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`, which is required by `Statement<'_>: std::marker::Send`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::Connection`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required for `&rusqlite::Connection` to implement `std::marker::Send`
note: required because it appears within the type `Statement<'_>`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/statement.rs:18:12
    |
18  | pub struct Statement<'conn> {
    |            ^^^^^^^^^
note: required by a bound in `sql::Sql::call`
   --> src/sql.rs:378:12
    |
375 |     async fn call<'a, F, R>(&'a self, function: F) -> Result<R>
    |              ---- required by a bound in this associated function
...
378 |         R: Send + 'static,
    |            ^^^^ required by this bound in `Sql::call`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src/sql.rs:509:21
    |
509 |     let stmt = self.call(|conn| {
    |                     ^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `rusqlite::Connection`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`, which is required by `Statement<'_>: std::marker::Send`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `rusqlite::Connection`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required for `&rusqlite::Connection` to implement `std::marker::Send`
note: required because it appears within the type `Statement<'_>`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/statement.rs:18:12
    |
18  | pub struct Statement<'conn> {
    |            ^^^^^^^^^
note: required by a bound in `sql::Sql::call`
   --> src/sql.rs:378:12
    |
375 |     async fn call<'a, F, R>(&'a self, function: F) -> Result<R>
    |              ---- required by a bound in this associated function
...
378 |         R: Send + 'static,
    |            ^^^^ required by this bound in `Sql::call`

error: could not compile `deltachat` (lib test) due to 3 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


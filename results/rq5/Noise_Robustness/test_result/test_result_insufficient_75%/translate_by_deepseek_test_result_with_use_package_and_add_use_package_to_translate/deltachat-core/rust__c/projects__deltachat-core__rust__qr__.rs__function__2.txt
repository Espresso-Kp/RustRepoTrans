Fail
file path is :
projects/deltachat-core/rust/src/qr.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0428]: the name `decode_openpgp` is defined multiple times
   --> src/qr.rs:510:1
    |
309 | async fn decode_openpgp(context: &Context, qr: &str) -> Result<Qr> {
    | ------------------------------------------------------------------ previous definition of the value `decode_openpgp` here
...
510 | async fn decode_openpgp(context: &Context, qr: &str) -> Result<Qr> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `decode_openpgp` redefined here
    |
    = note: `decode_openpgp` must be defined only once in the value namespace of this module

error[E0428]: the name `decode_webrtc_instance` is defined multiple times
   --> src/qr.rs:703:1
    |
470 | fn decode_webrtc_instance(_context: &Context, qr: &str) -> Result<Qr> {
    | --------------------------------------------------------------------- previous definition of the value `decode_webrtc_instance` here
...
703 | fn decode_webrtc_instance(_context: &Context, qr: &str) -> Result<Qr> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `decode_webrtc_instance` redefined here
    |
    = note: `decode_webrtc_instance` must be defined only once in the value namespace of this module

error[E0428]: the name `decode_smtp` is defined multiple times
   --> src/qr.rs:930:1
    |
277 | async fn decode_smtp(context: &Context, qr: &str) -> Result<Qr> {
    | --------------------------------------------------------------- previous definition of the value `decode_smtp` here
...
930 | async fn decode_smtp(context: &Context, qr: &str) -> Result<Qr> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `decode_smtp` redefined here
    |
    = note: `decode_smtp` must be defined only once in the value namespace of this module

error[E0428]: the name `decode_matmsg` is defined multiple times
   --> src/qr.rs:950:1
    |
261 | async fn decode_matmsg(context: &Context, qr: &str) -> Result<Qr> {
    | ----------------------------------------------------------------- previous definition of the value `decode_matmsg` here
...
950 | async fn decode_matmsg(context: &Context, qr: &str) -> Result<Qr> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `decode_matmsg` redefined here
    |
    = note: `decode_matmsg` must be defined only once in the value namespace of this module

error[E0428]: the name `decode_vcard` is defined multiple times
   --> src/qr.rs:978:1
    |
290 | async fn decode_vcard(context: &Context, qr: &str) -> Result<Qr> {
    | ---------------------------------------------------------------- previous definition of the value `decode_vcard` here
...
978 | async fn decode_vcard(context: &Context, qr: &str) -> Result<Qr> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `decode_vcard` redefined here
    |
    = note: `decode_vcard` must be defined only once in the value namespace of this module

error[E0423]: expected function, found macro `format`
   --> src/qr.rs:297:18
    |
297 |             Some(format("{first_name} {last_name}"))
    |                  ^^^^^^ not a function
    |
help: use `!` to invoke the macro
    |
297 |             Some(format!("{first_name} {last_name}"))
    |                        +
help: consider importing one of these items instead
    |
4   + use chrono::format::format;
    |
4   + use std::fmt::format;
    |

error[E0423]: expected function, found macro `format`
   --> src/qr.rs:386:34
    |
386 |                 .with_context(|| format("failed to add or lookup contact for address {addr:?}"))?;
    |                                  ^^^^^^ not a function
    |
help: use `!` to invoke the macro
    |
386 |                 .with_context(|| format!("failed to add or lookup contact for address {addr:?}"))?;
    |                                        +
help: consider importing one of these items instead
    |
4   + use chrono::format::format;
    |
4   + use std::fmt::format;
    |

error[E0423]: expected function, found macro `format`
   --> src/qr.rs:392:34
    |
392 |                 .with_context(|| format("can't check if address {addr:?} is our address"))?
    |                                  ^^^^^^ not a function
    |
help: use `!` to invoke the macro
    |
392 |                 .with_context(|| format!("can't check if address {addr:?} is our address"))?
    |                                        +
help: consider importing one of these items instead
    |
4   + use chrono::format::format;
    |
4   + use std::fmt::format;
    |

error[E0423]: expected function, found macro `format`
   --> src/qr.rs:461:34
    |
461 |                 .with_context(|| format("Error looking up contact {addr:?}"))?;
    |                                  ^^^^^^ not a function
    |
help: use `!` to invoke the macro
    |
461 |                 .with_context(|| format!("Error looking up contact {addr:?}"))?;
    |                                        +
help: consider importing one of these items instead
    |
4   + use chrono::format::format;
    |
4   + use std::fmt::format;
    |

error[E0423]: expected function, found crate `anyhow`
   --> src/qr.rs:257:24
    |
257 |         .ok_or_else(|| anyhow("invalid DCBACKUP scheme"))?;
    |                        ^^^^^^ not a function

error[E0423]: expected function, found macro `bail`
   --> src/qr.rs:270:9
    |
270 |         bail("Invalid MATMSG found");
    |         ^^^^ not a function
    |
help: use `!` to invoke the macro
    |
270 |         bail!("Invalid MATMSG found");
    |             +

error[E0308]: `if` and `else` have incompatible types
   --> src/qr.rs:270:9
    |
262 |        let addr = if let Some(to_index) = qr.find("TO:") {
    |  _________________-
263 | |          let addr = qr[to_index + 3..].trim();
264 | |/         if let Some(semi_index) = addr.find(';') {
265 | ||             addr[..semi_index].trim()
266 | ||         } else {
267 | ||             addr
268 | ||         }
    | ||_________- expected because of this
269 | |      } else {
270 | |          bail("Invalid MATMSG found");
    | |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `()`
271 | |      };
    | |______- `if` and `else` have incompatible types

error[E0423]: expected function, found macro `bail`
   --> src/qr.rs:283:9
    |
283 |         bail("Invalid SMTP found");
    |         ^^^^ not a function
    |
help: use `!` to invoke the macro
    |
283 |         bail!("Invalid SMTP found");
    |             +

error[E0308]: `if` and `else` have incompatible types
   --> src/qr.rs:283:9
    |
280 |       let addr = if let Some(query_index) = payload.find(':') {
    |  ________________-
281 | |         &payload[..query_index]
    | |         ----------------------- expected because of this
282 | |     } else {
283 | |         bail("Invalid SMTP found");
    | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `()`
284 | |     };
    | |_____- `if` and `else` have incompatible types

error[E0423]: expected function, found macro `bail`
   --> src/qr.rs:304:9
    |
304 |         bail("Bad e-mail address");
    |         ^^^^ not a function
    |
help: use `!` to invoke the macro
    |
304 |         bail!("Bad e-mail address");
    |             +

error[E0308]: `if` and `else` have incompatible types
   --> src/qr.rs:304:9
    |
301 |       let addr = if let Some(caps) = VCARD_EMAIL_RE.captures(qr) {
    |  ________________-
302 | |         normalize_address(caps[2].trim())?
    | |         ---------------------------------- expected because of this
303 | |     } else {
304 | |         bail("Bad e-mail address");
    | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `String`, found `()`
305 | |     };
    | |_____- `if` and `else` have incompatible types

error[E0277]: the trait bound `str: std::default::Default` is not satisfied
    --> src/qr.rs:299:10
     |
299  |         .unwrap_or_default();
     |          ^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `str`
     |
note: required by a bound in `std::option::Option::<T>::unwrap_or_default`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:1003:12
     |
1001 |     pub fn unwrap_or_default(self) -> T
     |            ----------------- required by a bound in this associated function
1002 |     where
1003 |         T: Default,
     |            ^^^^^^^ required by this bound in `Option::<T>::unwrap_or_default`
help: consider borrowing here
     |
291  |     let name = &VCARD_NAME_RE
     |                +
291  |     let name = &mut VCARD_NAME_RE
     |                ++++

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/qr.rs:291:9
    |
291 |     let name = VCARD_NAME_RE
    |         ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/qr.rs:293:10
     |
293  |         .and_then(|caps| {
     |          ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::option::Option::<T>::and_then`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:1401:21
     |
1401 |     pub fn and_then<U, F>(self, f: F) -> Option<U>
     |                     ^ required by this bound in `Option::<T>::and_then`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/qr.rs:294:40
    |
294 |             let last_name = caps.get(1)?.as_str().trim();
    |                                        ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`, which is required by `std::option::Option<_>: FromResidual<std::option::Option<Infallible>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::option::Option<T> as FromResidual<Yeet<()>>>
              <std::option::Option<T> as FromResidual>
    = note: required for `std::option::Option<str>` to implement `FromResidual<std::option::Option<Infallible>>`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/qr.rs:294:29
    |
294 |             let last_name = caps.get(1)?.as_str().trim();
    |                             ^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::option::Option`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `Option`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/qr.rs:295:41
    |
295 |             let first_name = caps.get(2)?.as_str().trim();
    |                                         ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`, which is required by `std::option::Option<_>: FromResidual<std::option::Option<Infallible>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::option::Option<T> as FromResidual<Yeet<()>>>
              <std::option::Option<T> as FromResidual>
    = note: required for `std::option::Option<str>` to implement `FromResidual<std::option::Option<Infallible>>`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/qr.rs:295:30
    |
295 |             let first_name = caps.get(2)?.as_str().trim();
    |                              ^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::option::Option`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `Option`

error[E0423]: expected function, found macro `bail`
   --> src/qr.rs:344:25
    |
344 |             Err(err) => bail("Invalid name: {}", err),
    |                         ^^^^ not a function
    |
help: use `!` to invoke the macro
    |
344 |             Err(err) => bail!("Invalid name: {}", err),
    |                             +

error[E0423]: expected function, found macro `bail`
   --> src/qr.rs:368:29
    |
368 |                 Err(err) => bail("Invalid group name: {}", err),
    |                             ^^^^ not a function
    |
help: use `!` to invoke the macro
    |
368 |                 Err(err) => bail!("Invalid group name: {}", err),
    |                                 +

error[E0423]: expected function, found macro `bail`
   --> src/qr.rs:487:9
    |
487 |         bail("Bad URL scheme for WebRTC instance: {:?}", url.scheme());
    |         ^^^^ not a function
    |
help: use `!` to invoke the macro
    |
487 |         bail!("Bad URL scheme for WebRTC instance: {:?}", url.scheme());
    |             +

error[E0308]: mismatched types
   --> src/qr.rs:486:12
    |
486 |       } else {
    |  ____________^
487 | |         bail("Bad URL scheme for WebRTC instance: {:?}", url.scheme());
488 | |     }
    | |_____^ expected `Result<Qr, Error>`, found `()`
    |
    = note:   expected enum `std::result::Result<Qr, anyhow::Error>`
            found unit type `()`

Some errors have detailed explanations: E0277, E0308, E0423, E0428.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `deltachat` (lib) due to 27 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
   --> src/qr.rs:486:12
    |
486 |       } else {
    |  ____________^
487 | |         bail("Bad URL scheme for WebRTC instance: {:?}", url.scheme());
488 | |     }
    | |_____^ expected `Result<Qr, Error>`, found `()`
    |
    = note:   expected enum `std::result::Result<qr::Qr, anyhow::Error>`
            found unit type `()`

error: could not compile `deltachat` (lib test) due to 27 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


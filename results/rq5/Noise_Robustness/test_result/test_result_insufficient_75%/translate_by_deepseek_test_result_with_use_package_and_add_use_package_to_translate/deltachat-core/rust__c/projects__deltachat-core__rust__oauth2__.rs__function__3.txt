Fail
file path is :
projects/deltachat-core/rust/src/oauth2.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0425]: cannot find function `get_info` in this scope
   --> src/oauth2.rs:240:18
    |
240 |     let oauth2 = get_info(addr).ok()?;
    |                  ^^^^^^^^ not found in this scope
    |
help: consider importing this function
    |
3   + use crate::context::get_info;
    |

error[E0412]: cannot find type `oauth2_t` in this scope
   --> src/oauth2.rs:256:14
    |
256 |     oauth2: &oauth2_t,
    |              ^^^^^^^^ not found in this scope

error[E0425]: cannot find function `from_address` in module `provider`
   --> src/oauth2.rs:299:37
    |
299 |     if let Some(oauth2) = provider::from_address(context, addr, false).await {
    |                                     ^^^^^^^^^^^^ not found in `provider`

error[E0411]: cannot find type `Self` in this scope
   --> src/oauth2.rs:420:79
    |
420 | async fn from_address(context: &Context, addr: &str, skip_mx: bool) -> Option<Self> {
    |          ------------ `Self` not allowed in a function                        ^^^^ `Self` is only available in impls, traits, and type definitions

error[E0599]: the method `as_deref` exists for enum `Option<Option<String>>`, but its trait bounds were not satisfied
    --> src/oauth2.rs:246:67
     |
246  |     addr_out = get_oauth2_addr_impl(context, oauth2, access_token.as_deref()).await;
     |                                                                   ^^^^^^^^
     |
    ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:1
     |
570  | pub enum Option<T> {
     | ------------------ doesn't satisfy `std::option::Option<std::string::String>: Deref`
     |
     = note: the following trait bounds were not satisfied:
             `std::option::Option<std::string::String>: Deref`
note: the method `as_deref` exists on the type `std::option::Option<std::string::String>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:1251:5
     |
1251 | /     pub fn as_deref(&self) -> Option<&T::Target>
1252 | |     where
1253 | |         T: Deref,
     | |_________________^
help: consider using `Option::expect` to unwrap the `std::option::Option<std::string::String>` value, panicking if the value is an `Option::None`
     |
246  |     addr_out = get_oauth2_addr_impl(context, oauth2, access_token.expect("REASON").as_deref()).await;
     |                                                                  +++++++++++++++++

error[E0599]: the method `as_deref` exists for enum `Option<Option<String>>`, but its trait bounds were not satisfied
    --> src/oauth2.rs:249:75
     |
249  |         addr_out = get_oauth2_addr_impl(context, oauth2, regenerate_token.as_deref()).await;
     |                                                                           ^^^^^^^^
     |
    ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:1
     |
570  | pub enum Option<T> {
     | ------------------ doesn't satisfy `std::option::Option<std::string::String>: Deref`
     |
     = note: the following trait bounds were not satisfied:
             `std::option::Option<std::string::String>: Deref`
note: the method `as_deref` exists on the type `std::option::Option<std::string::String>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:1251:5
     |
1251 | /     pub fn as_deref(&self) -> Option<&T::Target>
1252 | |     where
1253 | |         T: Deref,
     | |_________________^
help: consider using `Option::expect` to unwrap the `std::option::Option<std::string::String>` value, panicking if the value is an `Option::None`
     |
249  |         addr_out = get_oauth2_addr_impl(context, oauth2, regenerate_token.expect("REASON").as_deref()).await;
     |                                                                          +++++++++++++++++

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> src/oauth2.rs:260:24
    |
260 |     let userinfo_url = replace_in_uri(userinfo_url, "$ACCESS_TOKEN", access_token?)?;
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `std::string::String`
    |
    = help: the trait `Try` is not implemented for `std::string::String`

error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in an async function that returns `Option`
   --> src/oauth2.rs:266:7
    |
258 |   ) -> Option<String> {
    |  _____________________-
259 | |     let userinfo_url = oauth2.get_userinfo.as_deref()?;
260 | |     let userinfo_url = replace_in_uri(userinfo_url, "$ACCESS_TOKEN", access_token?)?;
261 | |
...   |
266 | |     })?;
    | |       ^ use `.ok()?` if you want to discard the `std::result::Result<Infallible, anyhow::Error>` error information
...   |
290 | |     }
291 | | }
    | |_- this function returns an `Option`
    |
    = help: the trait `FromResidual<std::result::Result<Infallible, anyhow::Error>>` is not implemented for `std::option::Option<std::string::String>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::option::Option<T> as FromResidual<Yeet<()>>>
              <std::option::Option<T> as FromResidual>

error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in an async function that returns `Option`
   --> src/oauth2.rs:270:7
    |
258 |   ) -> Option<String> {
    |  _____________________-
259 | |     let userinfo_url = oauth2.get_userinfo.as_deref()?;
260 | |     let userinfo_url = replace_in_uri(userinfo_url, "$ACCESS_TOKEN", access_token?)?;
261 | |
...   |
270 | |     })?;
    | |       ^ use `.ok()?` if you want to discard the `std::result::Result<Infallible, reqwest::Error>` error information
...   |
290 | |     }
291 | | }
    | |_- this function returns an `Option`
    |
    = help: the trait `FromResidual<std::result::Result<Infallible, reqwest::Error>>` is not implemented for `std::option::Option<std::string::String>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::option::Option<T> as FromResidual<Yeet<()>>>
              <std::option::Option<T> as FromResidual>

error[E0599]: no method named `get_config_bool` found for struct `Arc<InnerContext>` in the current scope
   --> src/oauth2.rs:298:40
    |
298 |     let socks5_enabled = context.inner.get_config_bool(Config::Socks5Enabled).await?;
    |                                        ^^^^^^^^^^^^^^^ method not found in `Arc<InnerContext>`

error[E0308]: `?` operator has incompatible types
   --> src/oauth2.rs:368:34
    |
368 |           let response: Response = client.post(token_url).form(&post_param).send().await.map_err(|err| {
    |  __________________________________^
369 | |             warn!(
370 | |                 context,
371 | |                 "Error calling OAuth2 at {}: {:?}", token_url, err
372 | |             );
373 | |             err
374 | |         })?;
    | |___________^ expected `oauth2::Response`, found `reqwest::Response`
    |
    = note: `?` operator cannot convert from `reqwest::Response` to `oauth2::Response`
    = note: `reqwest::Response` and `oauth2::Response` have similar names, but are actually distinct types
note: `reqwest::Response` is defined in crate `reqwest`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.11.27/src/async_impl/response.rs:25:1
    |
25  | pub struct Response {
    | ^^^^^^^^^^^^^^^^^^^
note: `oauth2::Response` is defined in the current crate
   --> src/oauth2.rs:46:1
    |
46  | struct Response {
    | ^^^^^^^^^^^^^^^

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/oauth2.rs:376:16
    |
376 |         if let Some(ref token) = response.refresh_token {
    |                ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::Some`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `std::prelude::v1::Some`
...
578 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ---- required by a bound in this tuple variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/oauth2.rs:387:16
    |
387 |         if let Some(ref token) = response.access_token {
    |                ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::Some`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `std::prelude::v1::Some`
...
578 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ---- required by a bound in this tuple variant

Some errors have detailed explanations: E0277, E0308, E0411, E0412, E0425, E0599.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `deltachat` (lib) due to 13 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 13 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


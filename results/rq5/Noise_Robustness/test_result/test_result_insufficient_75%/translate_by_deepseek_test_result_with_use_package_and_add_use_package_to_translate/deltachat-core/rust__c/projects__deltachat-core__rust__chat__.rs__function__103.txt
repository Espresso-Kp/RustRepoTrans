Fail
file path is :
projects/deltachat-core/rust/src/chat.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `Result` is defined multiple times
  --> src/chat.rs:19:50
   |
10 | use anyhow::Result;
   |     -------------- previous import of the type `Result` here
...
19 | use anyhow::{anyhow, bail, ensure, Context as _, Result};
   |                                                  ^^^^^^ `Result` reimported here
   |
   = note: `Result` must be defined only once in the type namespace of this module

error[E0252]: the name `Params` is defined multiple times
  --> src/chat.rs:48:27
   |
6  | use rusqlite::{params, Params};
   |                        ------ previous import of the trait `Params` here
...
48 | use crate::param::{Param, Params};
   |                           ^^^^^^ `Params` reimported here
   |
   = note: `Params` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
48 | use crate::param::{Param, Params as OtherParams};
   |                           ~~~~~~~~~~~~~~~~~~~~~

error[E0432]: unresolved import `crate::Context`
 --> src/chat.rs:7:5
  |
7 | use crate::Context;
  |     ^^^^^^^^^^^^^^ no `Context` in the root
  |
help: a similar name exists in the module
  |
7 | use crate::context;
  |            ~~~~~~~
help: consider importing one of these items instead
  |
7 | use anyhow::Context;
  |     ~~~~~~~~~~~~~~~
7 | use core::task::Context;
  |     ~~~~~~~~~~~~~~~~~~~
7 | use crate::context::Context;
  |     ~~~~~~~~~~~~~~~~~~~~~~~
7 | use exif::Context;
  |     ~~~~~~~~~~~~~
    and 2 other candidates

error[E0432]: unresolved import `crate::ChatId`
 --> src/chat.rs:8:5
  |
8 | use crate::ChatId;
  |     ^^^^^^^^^^^^^ no `ChatId` in the root

error[E0432]: unresolved import `crate::ContactId`
 --> src/chat.rs:9:5
  |
9 | use crate::ContactId;
  |     ^^^^^^^^^^^^^^^^ no `ContactId` in the root
  |
help: a similar name exists in the module
  |
9 | use crate::contact;
  |            ~~~~~~~
help: consider importing this struct instead
  |
9 | use crate::contact::ContactId;
  |     ~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0425]: cannot find value `DC_CONTEXT_MAGIC` in this scope
    --> src/chat.rs:2780:31
     |
2780 |     if context.inner.magic != DC_CONTEXT_MAGIC {
     |                               ^^^^^^^^^^^^^^^^ not found in this scope

warning: unused import: `std::sync::Arc`
 --> src/chat.rs:4:5
  |
4 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `std::sync::Mutex`
 --> src/chat.rs:5:5
  |
5 | use std::sync::Mutex;
  |     ^^^^^^^^^^^^^^^^

warning: unused import: `anyhow::Result`
  --> src/chat.rs:10:5
   |
10 | use anyhow::Result;
   |     ^^^^^^^^^^^^^^

warning: unused import: `Params`
  --> src/chat.rs:48:27
   |
48 | use crate::param::{Param, Params};
   |                           ^^^^^^

error[E0599]: no function or associated item named `new` found for trait `rusqlite::Params`
    --> src/chat.rs:2534:34
     |
2534 |         let mut params = Params::new();
     |                                  ^^^ function or associated item not found in `Params`

error[E0277]: the trait bound `dyn rusqlite::Params: std::default::Default` is not satisfied
    --> src/chat.rs:1539:65
     |
1539 |                         param: row.get::<_, String>(3)?.parse().unwrap_or_default(),
     |                                                                 ^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `dyn rusqlite::Params`
     |
note: required by a bound in `std::result::Result::<T, E>::unwrap_or_default`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:1106:12
     |
1104 |     pub fn unwrap_or_default(self) -> T
     |            ----------------- required by a bound in this associated function
1105 |     where
1106 |         T: Default,
     |            ^^^^^^^ required by this bound in `Result::<T, E>::unwrap_or_default`

error[E0277]: the trait bound `dyn rusqlite::Params: FromStr` is not satisfied
    --> src/chat.rs:1539:57
     |
1539 |                         param: row.get::<_, String>(3)?.parse().unwrap_or_default(),
     |                                                         ^^^^^ the trait `FromStr` is not implemented for `dyn rusqlite::Params`
     |
     = help: the following other types implement trait `FromStr`:
               bool
               char
               isize
               i8
               i16
               i32
               i64
               i128
             and 232 others
note: required by a bound in `core::str::<impl str>::parse`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/str/mod.rs:2413:21
     |
2413 |     pub fn parse<F: FromStr>(&self) -> Result<F, F::Err> {
     |                     ^^^^^^^ required by this bound in `core::str::<impl str>::parse`

error[E0277]: `(dyn rusqlite::Params + 'static)` cannot be sent between threads safely
    --> src/chat.rs:1527:14
     |
1527 |             .query_row(
     |              ^^^^^^^^^ `(dyn rusqlite::Params + 'static)` cannot be sent between threads safely
     |
     = help: within `Chat`, the trait `std::marker::Send` is not implemented for `(dyn rusqlite::Params + 'static)`, which is required by `Chat: std::marker::Send`
note: required because it appears within the type `Chat`
    --> src/chat.rs:1489:12
     |
1489 | pub struct Chat {
     |            ^^^^
note: required by a bound in `Sql::query_row`
    --> src/sql.rs:467:12
     |
459  |     pub async fn query_row<T, F>(
     |                  --------- required by a bound in this associated function
...
467  |         T: Send + 'static,
     |            ^^^^ required by this bound in `Sql::query_row`

error[E0599]: no method named `exists` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/chat.rs:1576:27
     |
1576 |             if chat.param.exists(Param::Selftalk) {
     |                           ^^^^^^ method not found in `dyn Params`

error[E0599]: no method named `exists` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/chat.rs:1578:34
     |
1578 |             } else if chat.param.exists(Param::Devicetalk) {
     |                                  ^^^^^^ method not found in `dyn Params`

error[E0609]: no field `magic` on type `Arc<InnerContext>`
    --> src/chat.rs:2780:22
     |
2780 |     if context.inner.magic != DC_CONTEXT_MAGIC {
     |                      ^^^^^ unknown field
     |
     = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0599]: no method named `exists` found for reference `&context::Context` in the current scope
    --> src/chat.rs:2785:25
     |
2785 |     let count = context.exists(sql, params![chat_id.0, contact_id.0]).await?;
     |                         ^^^^^^ method not found in `&Context`
     |
help: one of the expressions' fields has a method of the same name
     |
2785 |     let count = context.inner.blobdir.exists(sql, params![chat_id.0, contact_id.0]).await?;
     |                         ++++++++++++++
help: some of the expressions' fields have a method of the same name
     |
2785 |     let count = context.blobdir.exists(sql, params![chat_id.0, contact_id.0]).await?;
     |                         ++++++++
2785 |     let count = context.sql.exists(sql, params![chat_id.0, contact_id.0]).await?;
     |                         ++++

error[E0616]: field `0` of struct `ContactId` is private
    --> src/chat.rs:2785:67
     |
2785 |     let count = context.exists(sql, params![chat_id.0, contact_id.0]).await?;
     |                                                                   ^ private field

error[E0599]: no function or associated item named `new` found for trait `rusqlite::Params`
    --> src/chat.rs:1651:49
     |
1651 |         let (mut param0, mut param1) = (Params::new(), Params::new());
     |                                                 ^^^ function or associated item not found in `Params`

error[E0599]: no function or associated item named `new` found for trait `rusqlite::Params`
    --> src/chat.rs:1651:64
     |
1651 |         let (mut param0, mut param1) = (Params::new(), Params::new());
     |                                                                ^^^ function or associated item not found in `Params`

error[E0599]: no method named `get_int` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/chat.rs:1926:27
     |
1926 |             && self.param.get_int(Param::Unpromoted).unwrap_or_default() == 1
     |                           ^^^^^^^ method not found in `dyn Params`

error[E0599]: no method named `remove` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/chat.rs:1929:24
     |
1929 |             self.param.remove(Param::Unpromoted);
     |                        ^^^^^^ method not found in `dyn Params`

error[E0599]: no method named `get` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
   --> src/mimefactory.rs:166:18
    |
164 |               let list_post = chat
    |  _____________________________-
165 | |                 .param
166 | |                 .get(Param::ListPost)
    | |                 -^^^ method not found in `dyn Params`
    | |_________________|
    | 

error[E0599]: no method named `get` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
   --> src/mimefactory.rs:474:32
    |
474 |                     chat.param.get(Param::LastSubject)
    |                                ^^^ method not found in `dyn Params`

error[E0599]: no function or associated item named `new` found for trait `rusqlite::Params`
    --> src/chat.rs:4465:29
     |
4465 |     let mut param = Params::new();
     |                             ^^^ function or associated item not found in `Params`

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
    --> src/chat.rs:1167:19
     |
1167 |             .await?;
     |                   ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`, which is required by `std::result::Result<dyn rusqlite::Params, anyhow::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `std::result::Result<dyn rusqlite::Params, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: the trait bound `dyn rusqlite::Params: std::default::Default` is not satisfied
    --> src/chat.rs:1170:14
     |
1170 |             .unwrap_or_default())
     |              ^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `dyn rusqlite::Params`
     |
note: required by a bound in `std::option::Option::<T>::unwrap_or_default`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:1003:12
     |
1001 |     pub fn unwrap_or_default(self) -> T
     |            ----------------- required by a bound in this associated function
1002 |     where
1003 |         T: Default,
     |            ^^^^^^^ required by this bound in `Option::<T>::unwrap_or_default`

error[E0277]: the trait bound `dyn rusqlite::Params: std::default::Default` is not satisfied
    --> src/chat.rs:1169:32
     |
1169 |             .map(|s| s.parse().unwrap_or_default())
     |                                ^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `dyn rusqlite::Params`
     |
note: required by a bound in `std::result::Result::<T, E>::unwrap_or_default`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:1106:12
     |
1104 |     pub fn unwrap_or_default(self) -> T
     |            ----------------- required by a bound in this associated function
1105 |     where
1106 |         T: Default,
     |            ^^^^^^^ required by this bound in `Result::<T, E>::unwrap_or_default`

error[E0277]: the trait bound `dyn rusqlite::Params: FromStr` is not satisfied
    --> src/chat.rs:1169:24
     |
1169 |             .map(|s| s.parse().unwrap_or_default())
     |                        ^^^^^ the trait `FromStr` is not implemented for `dyn rusqlite::Params`
     |
     = help: the following other types implement trait `FromStr`:
               bool
               char
               isize
               i8
               i16
               i32
               i64
               i128
             and 232 others
note: required by a bound in `core::str::<impl str>::parse`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/str/mod.rs:2413:21
     |
2413 |     pub fn parse<F: FromStr>(&self) -> Result<F, F::Err> {
     |                     ^^^^^^^ required by this bound in `core::str::<impl str>::parse`

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
    --> src/chat.rs:1168:12
     |
1168 |           Ok(res
     |  _________--_^
     | |         |
     | |         required by a bound introduced by this call
1169 | |             .map(|s| s.parse().unwrap_or_default())
1170 | |             .unwrap_or_default())
     | |________________________________^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`
note: required by a bound in `std::prelude::v1::Ok`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:17
     |
502  | pub enum Result<T, E> {
     |                 ^ required by this bound in `std::prelude::v1::Ok`
...
506  |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     -- required by a bound in this tuple variant

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
    --> src/chat.rs:1169:14
     |
1169 |             .map(|s| s.parse().unwrap_or_default())
     |              ^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`
note: required by a bound in `std::option::Option::<T>::map`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:1067:16
     |
1067 |     pub fn map<U, F>(self, f: F) -> Option<U>
     |                ^ required by this bound in `Option::<T>::map`

error[E0746]: return type cannot have an unboxed trait object
    --> src/chat.rs:1169:22
     |
1169 |             .map(|s| s.parse().unwrap_or_default())
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
help: box the return type, and wrap all of the returned values in `Box::new`
     |
1169 |             .map(|s| Box::new(Box<s.parse().unwrap_or_default())>)
     |                      +++++++++                                 +

error[E0277]: the size for values of type `(dyn rusqlite::Params + 'static)` cannot be known at compilation time
    --> src/chat.rs:1175:45
     |
1175 |         let param = self.get_param(context).await?;
     |                                             ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `(dyn rusqlite::Params + 'static)`
note: required by a bound in `std::result::Result`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:17
     |
502  | pub enum Result<T, E> {
     |                 ^ required by this bound in `Result`

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
    --> src/chat.rs:1175:21
     |
1175 |         let param = self.get_param(context).await?;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`, which is required by `std::result::Result<dyn rusqlite::Params, anyhow::Error>: Try`
     = note: required for `std::result::Result<dyn rusqlite::Params, anyhow::Error>` to implement `Try`

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
    --> src/chat.rs:1175:21
     |
1175 |         let param = self.get_param(context).await?;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
    --> src/chat.rs:1175:50
     |
1175 |         let param = self.get_param(context).await?;
     |                                                  ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`
note: required by a bound in `Break`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
     |
85   | pub enum ControlFlow<B, C = ()> {
     |                         ^^^^^^ required by this bound in `Break`
...
93   |     Break(B),
     |     ----- required by a bound in this variant

error[E0599]: no method named `get_bool` found for trait object `dyn rusqlite::Params` in the current scope
    --> src/chat.rs:1176:32
     |
1176 |         let unpromoted = param.get_bool(Param::Unpromoted).unwrap_or_default();
     |                                ^^^^^^^^ method not found in `dyn Params`

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
    --> src/chat.rs:1175:13
     |
1175 |         let param = self.get_param(context).await?;
     |             ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `(dyn rusqlite::Params + 'static)` cannot be known at compilation time
    --> src/chat.rs:1188:36
     |
1188 |         Ok(self.get_param(context).await?.exists(Param::Selftalk))
     |                                    ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `(dyn rusqlite::Params + 'static)`
note: required by a bound in `std::result::Result`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:17
     |
502  | pub enum Result<T, E> {
     |                 ^ required by this bound in `Result`

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
    --> src/chat.rs:1188:12
     |
1188 |         Ok(self.get_param(context).await?.exists(Param::Selftalk))
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`, which is required by `std::result::Result<dyn rusqlite::Params, anyhow::Error>: Try`
     = note: required for `std::result::Result<dyn rusqlite::Params, anyhow::Error>` to implement `Try`

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
    --> src/chat.rs:1188:12
     |
1188 |         Ok(self.get_param(context).await?.exists(Param::Selftalk))
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the trait bound `dyn rusqlite::Params: std::str::FromStr` is not satisfied
    --> src/chat.rs:1539:57
     |
1539 |                         param: row.get::<_, String>(3)?.parse().unwrap_or_default(),
     |                                                         ^^^^^ the trait `std::str::FromStr` is not implemented for `dyn rusqlite::Params`
     |
     = help: the following other types implement trait `std::str::FromStr`:
               bool
               char
               isize
               i8
               i16
               i32
               i64
               i128
             and 248 others
note: required by a bound in `core::str::<impl str>::parse`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/str/mod.rs:2413:21
     |
2413 |     pub fn parse<F: FromStr>(&self) -> Result<F, F::Err> {
     |                     ^^^^^^^ required by this bound in `core::str::<impl str>::parse`

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
    --> src/chat.rs:1188:41
     |
1188 |         Ok(self.get_param(context).await?.exists(Param::Selftalk))
     |                                         ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`
note: required by a bound in `Break`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
     |
85   | pub enum ControlFlow<B, C = ()> {
     |                         ^^^^^^ required by this bound in `Break`
...
93   |     Break(B),
     |     ----- required by a bound in this variant

error[E0277]: `(dyn rusqlite::Params + 'static)` cannot be sent between threads safely
    --> src/chat.rs:1527:14
     |
1527 |             .query_row(
     |              ^^^^^^^^^ `(dyn rusqlite::Params + 'static)` cannot be sent between threads safely
     |
     = help: within `chat::Chat`, the trait `std::marker::Send` is not implemented for `(dyn rusqlite::Params + 'static)`, which is required by `chat::Chat: std::marker::Send`
note: required because it appears within the type `chat::Chat`
    --> src/chat.rs:1489:12
     |
1489 | pub struct Chat {
     |            ^^^^
note: required by a bound in `sql::Sql::query_row`
    --> src/sql.rs:467:12
     |
459  |     pub async fn query_row<T, F>(
     |                  --------- required by a bound in this associated function
...
467  |         T: Send + 'static,
     |            ^^^^ required by this bound in `Sql::query_row`

error[E0599]: no method named `exists` found for trait object `dyn rusqlite::Params` in the current scope
    --> src/chat.rs:1188:43
     |
1188 |         Ok(self.get_param(context).await?.exists(Param::Selftalk))
     |                                           ^^^^^^ method not found in `dyn Params`

error[E0277]: the size for values of type `(dyn rusqlite::Params + 'static)` cannot be known at compilation time
    --> src/chat.rs:1193:36
     |
1193 |         Ok(self.get_param(context).await?.exists(Param::Devicetalk))
     |                                    ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `(dyn rusqlite::Params + 'static)`
note: required by a bound in `std::result::Result`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:17
     |
502  | pub enum Result<T, E> {
     |                 ^ required by this bound in `Result`

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
    --> src/chat.rs:1193:12
     |
1193 |         Ok(self.get_param(context).await?.exists(Param::Devicetalk))
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`, which is required by `std::result::Result<dyn rusqlite::Params, anyhow::Error>: Try`
     = note: required for `std::result::Result<dyn rusqlite::Params, anyhow::Error>` to implement `Try`

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
    --> src/chat.rs:1193:12
     |
1193 |         Ok(self.get_param(context).await?.exists(Param::Devicetalk))
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
    --> src/chat.rs:1193:41
     |
1193 |         Ok(self.get_param(context).await?.exists(Param::Devicetalk))
     |                                         ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`
note: required by a bound in `Break`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
     |
85   | pub enum ControlFlow<B, C = ()> {
     |                         ^^^^^^ required by this bound in `Break`
...
93   |     Break(B),
     |     ----- required by a bound in this variant

error[E0599]: no method named `exists` found for trait object `dyn rusqlite::Params` in the current scope
    --> src/chat.rs:1193:43
     |
1193 |         Ok(self.get_param(context).await?.exists(Param::Devicetalk))
     |                                           ^^^^^^ method not found in `dyn Params`

error[E0277]: the size for values of type `(dyn rusqlite::Params + 'static)` cannot be known at compilation time
    --> src/chat.rs:1200:14
     |
1200 |             .await?
     |              ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `(dyn rusqlite::Params + 'static)`
note: required by a bound in `std::result::Result`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:17
     |
502  | pub enum Result<T, E> {
     |                 ^ required by this bound in `Result`

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
    --> src/chat.rs:1198:12
     |
1198 |           Ok(self
     |  ____________^
1199 | |             .get_param(context)
1200 | |             .await?
     | |___________________^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`, which is required by `std::result::Result<dyn rusqlite::Params, anyhow::Error>: Try`
     = note: required for `std::result::Result<dyn rusqlite::Params, anyhow::Error>` to implement `Try`

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
    --> src/chat.rs:1198:12
     |
1198 |           Ok(self
     |  ____________^
1199 | |             .get_param(context)
1200 | |             .await?
     | |___________________^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`
     = note: all local variables must have a statically known size
     = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
    --> src/chat.rs:1200:19
     |
1200 |             .await?
     |                   ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`
note: required by a bound in `Break`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
     |
85   | pub enum ControlFlow<B, C = ()> {
     |                         ^^^^^^ required by this bound in `Break`
...
93   |     Break(B),
     |     ----- required by a bound in this variant

error[E0599]: no method named `get_i64` found for trait object `dyn rusqlite::Params` in the current scope
    --> src/chat.rs:1201:14
     |
1198 |           Ok(self
     |  ____________-
1199 | |             .get_param(context)
1200 | |             .await?
1201 | |             .get_i64(Param::MemberListTimestamp)
     | |             -^^^^^^^ method not found in `dyn Params`
     | |_____________|
     | 

error[E0277]: the size for values of type `(dyn rusqlite::Params + 'static)` cannot be known at compilation time
    --> src/chat.rs:1510:16
     |
1510 |     pub param: Params,
     |                ^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `(dyn rusqlite::Params + 'static)`
     = note: only the last field of a struct may have a dynamically sized type
     = help: change the field's type to have a statically known size
help: borrowed types always have a statically known size
     |
1510 |     pub param: &Params,
     |                +
help: the `Box` type always has a statically known size and allocates its contents in the heap
     |
1510 |     pub param: Box<Params>,
     |                ++++      +

error[E0599]: the method `to_string` exists for trait object `dyn Params`, but its trait bounds were not satisfied
    --> src/chat.rs:1717:29
     |
1717 |                 (self.param.to_string(), self.id),
     |                             ^^^^^^^^^ method cannot be called on `dyn Params` due to unsatisfied trait bounds
     |
    ::: /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/params.rs:180:1
     |
180  | pub trait Params: Sealed {
     | ------------------------ doesn't satisfy `dyn rusqlite::Params: ToString` or `dyn rusqlite::Params: std::fmt::Display`
     |
     = note: the following trait bounds were not satisfied:
             `dyn rusqlite::Params: std::fmt::Display`
             which is required by `dyn rusqlite::Params: ToString`

error[E0616]: field `0` of struct `contact::ContactId` is private
    --> src/chat.rs:2785:67
     |
2785 |     let count = context.exists(sql, params![chat_id.0, contact_id.0]).await?;
     |                                                                   ^ private field

error[E0599]: no method named `get` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/chat.rs:1745:45
     |
1745 |         if let Some(image_rel) = self.param.get(Param::ProfileImage) {
     |                                             ^^^ method not found in `dyn Params`

error[E0599]: the method `to_string` exists for trait object `dyn Params`, but its trait bounds were not satisfied
    --> src/chat.rs:1803:31
     |
1803 |             param: self.param.to_string(),
     |                               ^^^^^^^^^ method cannot be called on `dyn Params` due to unsatisfied trait bounds
     |
    ::: /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/params.rs:180:1
     |
180  | pub trait Params: Sealed {
     | ------------------------ doesn't satisfy `dyn rusqlite::Params: ToString` or `dyn rusqlite::Params: std::fmt::Display`
     |
     = note: the following trait bounds were not satisfied:
             `dyn rusqlite::Params: std::fmt::Display`
             which is required by `dyn rusqlite::Params: ToString`

error[E0599]: no method named `set` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/chat.rs:2350:20
     |
2350 |         chat.param.set(Param::ProfileImage, icon);
     |                    ^^^ method not found in `dyn Params`

error[E0599]: no method named `set` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/chat.rs:2365:20
     |
2365 |         chat.param.set(Param::ProfileImage, &icon);
     |                    ^^^ method not found in `dyn Params`

error[E0599]: no function or associated item named `from_str` found for trait `rusqlite::Params`
    --> src/chat.rs:3117:34
     |
3117 |                 || match Params::from_str(&params) {
     |                                  ^^^^^^^^ function or associated item not found in `Params`

error[E0599]: no method named `get_int` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/chat.rs:3723:37
     |
3723 |     if from_handshake && chat.param.get_int(Param::Unpromoted).unwrap_or_default() == 1 {
     |                                     ^^^^^^^ method not found in `dyn Params`

error[E0599]: no method named `remove` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/chat.rs:3724:20
     |
3724 |         chat.param.remove(Param::Unpromoted);
     |                    ^^^^^^ method not found in `dyn Params`

error[E0599]: no method named `remove` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/chat.rs:4087:20
     |
4087 |         chat.param.remove(Param::ProfileImage);
     |                    ^^^^^^ method not found in `dyn Params`

error[E0599]: no method named `set` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/chat.rs:4093:20
     |
4093 |         chat.param.set(Param::ProfileImage, image_blob.as_name());
     |                    ^^^ method not found in `dyn Params`

error[E0599]: no method named `get_i64` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
   --> src/reaction.rs:345:14
    |
343 |           if self
    |  ____________-
344 | |             .param
345 | |             .get_i64(Param::LastReactionTimestamp)
    | |             -^^^^^^^ method not found in `dyn Params`
    | |_____________|
    | 

error[E0599]: no method named `get_int` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
   --> src/reaction.rs:353:18
    |
352 | /             self.param
353 | |                 .get_int(Param::LastReactionMsgId)
    | |                 -^^^^^^^ method not found in `dyn Params`
    | |_________________|
    | 

error[E0599]: no method named `get_int` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
   --> src/reaction.rs:365:18
    |
364 | /             self.param
365 | |                 .get_int(Param::LastReactionContactId)
    | |                 -^^^^^^^ method not found in `dyn Params`
    | |_________________|
    | 

error[E0277]: the trait bound `dyn rusqlite::Params: std::str::FromStr` is not satisfied
    --> src/chat.rs:1169:24
     |
1169 |             .map(|s| s.parse().unwrap_or_default())
     |                        ^^^^^ the trait `std::str::FromStr` is not implemented for `dyn rusqlite::Params`
     |
     = help: the following other types implement trait `std::str::FromStr`:
               bool
               char
               isize
               i8
               i16
               i32
               i64
               i128
             and 248 others
note: required by a bound in `core::str::<impl str>::parse`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/str/mod.rs:2413:21
     |
2413 |     pub fn parse<F: FromStr>(&self) -> Result<F, F::Err> {
     |                     ^^^^^^^ required by this bound in `core::str::<impl str>::parse`

error[E0599]: no method named `update_timestamp` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/receive_imf.rs:1661:14
     |
1659 |           if chat
     |  ____________-
1660 | |             .param
1661 | |             .update_timestamp(Param::SubjectTimestamp, sort_timestamp)?
     | |             -^^^^^^^^^^^^^^^^ method not found in `dyn Params`
     | |_____________|
     | 

error[E0599]: no method named `set` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/receive_imf.rs:1667:24
     |
1667 |             chat.param.set(Param::LastSubject, subject);
     |                        ^^^ method not found in `dyn Params`

error: future cannot be sent between threads safely
   --> src/scheduler.rs:848:25
    |
848 |             task::spawn(inbox_loop(ctx, inbox_start_send, inbox_handlers))
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `inbox_loop` is not `Send`
    |
    = help: within `impl futures::Future<Output = ()>`, the trait `std::marker::Send` is not implemented for `(dyn rusqlite::Params + 'static)`, which is required by `impl futures::Future<Output = ()>: std::marker::Send`
note: future is not `Send` as this value is used across an await
   --> src/chat.rs:746:18
    |
731 |         let chat = Chat::load_from_db(context, self).await?;
    |             ---- has type `Chat` which is not `Send`
...
746 |                 .await?;
    |                  ^^^^^ await occurs here, with `chat` maybe used later
note: required by a bound in `tokio::spawn`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/task/spawn.rs:166:21
    |
164 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
    |            ----- required by a bound in this function
165 |     where
166 |         F: Future + Send + 'static,
    |                     ^^^^ required by this bound in `spawn`

error: future cannot be sent between threads safely
    --> src/scheduler.rs:848:25
     |
848  |             task::spawn(inbox_loop(ctx, inbox_start_send, inbox_handlers))
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `inbox_loop` is not `Send`
     |
     = help: within `Chat`, the trait `std::marker::Sync` is not implemented for `(dyn rusqlite::Params + 'static)`, which is required by `impl futures::Future<Output = ()>: std::marker::Send`
note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`
    --> src/chat.rs:2222:30
     |
2222 |     pub(crate) async fn sync(&self, context: &Context, action: SyncAction) -> Result<()> {
     |                              ^^^^^ has type `&Chat` which is not `Send`, because `Chat` is not `Sync`
note: required by a bound in `tokio::spawn`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/task/spawn.rs:166:21
     |
164  |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
     |            ----- required by a bound in this function
165  |     where
166  |         F: Future + Send + 'static,
     |                     ^^^^ required by this bound in `spawn`

error: future cannot be sent between threads safely
   --> src/scheduler.rs:865:42
    |
865 |                 let handle = task::spawn(simple_imap_loop(ctx, start_send, handlers, meaning));
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `simple_imap_loop` is not `Send`
    |
    = help: within `impl futures::Future<Output = ()>`, the trait `std::marker::Send` is not implemented for `(dyn rusqlite::Params + 'static)`, which is required by `impl futures::Future<Output = ()>: std::marker::Send`
note: future is not `Send` as this value is used across an await
   --> src/chat.rs:746:18
    |
731 |         let chat = Chat::load_from_db(context, self).await?;
    |             ---- has type `Chat` which is not `Send`
...
746 |                 .await?;
    |                  ^^^^^ await occurs here, with `chat` maybe used later
note: required by a bound in `tokio::spawn`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/task/spawn.rs:166:21
    |
164 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
    |            ----- required by a bound in this function
165 |     where
166 |         F: Future + Send + 'static,
    |                     ^^^^ required by this bound in `spawn`

error: future cannot be sent between threads safely
    --> src/scheduler.rs:865:42
     |
865  |                 let handle = task::spawn(simple_imap_loop(ctx, start_send, handlers, meaning));
     |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `simple_imap_loop` is not `Send`
     |
     = help: within `Chat`, the trait `std::marker::Sync` is not implemented for `(dyn rusqlite::Params + 'static)`, which is required by `impl futures::Future<Output = ()>: std::marker::Send`
note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`
    --> src/chat.rs:2222:30
     |
2222 |     pub(crate) async fn sync(&self, context: &Context, action: SyncAction) -> Result<()> {
     |                              ^^^^^ has type `&Chat` which is not `Send`, because `Chat` is not `Sync`
note: required by a bound in `tokio::spawn`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/task/spawn.rs:166:21
     |
164  |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
     |            ----- required by a bound in this function
165  |     where
166  |         F: Future + Send + 'static,
     |                     ^^^^ required by this bound in `spawn`

error: future cannot be sent between threads safely
   --> src/scheduler.rs:877:25
    |
877 |             task::spawn(smtp_loop(ctx, smtp_start_send, smtp_handlers))
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `smtp_loop` is not `Send`
    |
    = help: within `impl futures::Future<Output = ()>`, the trait `std::marker::Send` is not implemented for `(dyn rusqlite::Params + 'static)`, which is required by `impl futures::Future<Output = ()>: std::marker::Send`
note: future is not `Send` as this value is used across an await
   --> src/message.rs:851:68
    |
839 |         let chat_loaded: Chat;
    |             ----------- has type `Chat` which is not `Send`
...
851 |                     Some(Contact::get_by_id(context, self.from_id).await?)
    |                                                                    ^^^^^ await occurs here, with `chat_loaded` maybe used later
note: required by a bound in `tokio::spawn`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/task/spawn.rs:166:21
    |
164 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
    |            ----- required by a bound in this function
165 |     where
166 |         F: Future + Send + 'static,
    |                     ^^^^ required by this bound in `spawn`

error: future cannot be sent between threads safely
   --> src/scheduler.rs:877:25
    |
877 |             task::spawn(smtp_loop(ctx, smtp_start_send, smtp_handlers))
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `smtp_loop` is not `Send`
    |
    = help: within `Chat`, the trait `std::marker::Sync` is not implemented for `(dyn rusqlite::Params + 'static)`, which is required by `impl futures::Future<Output = ()>: std::marker::Send`
note: future is not `Send` as this value is used across an await
   --> src/message.rs:851:68
    |
840 |         let chat = if let Some(chat) = chat {
    |             ---- has type `&Chat` which is not `Send`
...
851 |                     Some(Contact::get_by_id(context, self.from_id).await?)
    |                                                                    ^^^^^ await occurs here, with `chat` maybe used later
note: required by a bound in `tokio::spawn`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/task/spawn.rs:166:21
    |
164 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
    |            ----- required by a bound in this function
165 |     where
166 |         F: Future + Send + 'static,
    |                     ^^^^ required by this bound in `spawn`

error: future cannot be sent between threads safely
   --> src/scheduler.rs:848:25
    |
848 |             task::spawn(inbox_loop(ctx, inbox_start_send, inbox_handlers))
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `inbox_loop` is not `Send`
    |
    = help: within `impl futures::Future<Output = ()>`, the trait `std::marker::Send` is not implemented for `(dyn rusqlite::Params + 'static)`, which is required by `impl futures::Future<Output = ()>: std::marker::Send`
note: future is not `Send` as this value is used across an await
   --> src/chat.rs:746:18
    |
731 |         let chat = Chat::load_from_db(context, self).await?;
    |             ---- has type `chat::Chat` which is not `Send`
...
746 |                 .await?;
    |                  ^^^^^ await occurs here, with `chat` maybe used later
note: required by a bound in `tokio::spawn`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/task/spawn.rs:166:21
    |
164 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
    |            ----- required by a bound in this function
165 |     where
166 |         F: Future + Send + 'static,
    |                     ^^^^ required by this bound in `spawn`

error: future cannot be sent between threads safely
    --> src/scheduler.rs:848:25
     |
848  |             task::spawn(inbox_loop(ctx, inbox_start_send, inbox_handlers))
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `inbox_loop` is not `Send`
     |
     = help: within `chat::Chat`, the trait `std::marker::Sync` is not implemented for `(dyn rusqlite::Params + 'static)`, which is required by `impl futures::Future<Output = ()>: std::marker::Send`
note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`
    --> src/chat.rs:2222:30
     |
2222 |     pub(crate) async fn sync(&self, context: &Context, action: SyncAction) -> Result<()> {
     |                              ^^^^^ has type `&chat::Chat` which is not `Send`, because `chat::Chat` is not `Sync`
note: required by a bound in `tokio::spawn`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/task/spawn.rs:166:21
     |
164  |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
     |            ----- required by a bound in this function
165  |     where
166  |         F: Future + Send + 'static,
     |                     ^^^^ required by this bound in `spawn`

error: future cannot be sent between threads safely
   --> src/scheduler.rs:865:42
    |
865 |                 let handle = task::spawn(simple_imap_loop(ctx, start_send, handlers, meaning));
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `simple_imap_loop` is not `Send`
    |
    = help: within `impl futures::Future<Output = ()>`, the trait `std::marker::Send` is not implemented for `(dyn rusqlite::Params + 'static)`, which is required by `impl futures::Future<Output = ()>: std::marker::Send`
note: future is not `Send` as this value is used across an await
   --> src/chat.rs:746:18
    |
731 |         let chat = Chat::load_from_db(context, self).await?;
    |             ---- has type `chat::Chat` which is not `Send`
...
746 |                 .await?;
    |                  ^^^^^ await occurs here, with `chat` maybe used later
note: required by a bound in `tokio::spawn`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/task/spawn.rs:166:21
    |
164 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
    |            ----- required by a bound in this function
165 |     where
166 |         F: Future + Send + 'static,
    |                     ^^^^ required by this bound in `spawn`

error: future cannot be sent between threads safely
    --> src/scheduler.rs:865:42
     |
865  |                 let handle = task::spawn(simple_imap_loop(ctx, start_send, handlers, meaning));
     |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `simple_imap_loop` is not `Send`
     |
     = help: within `chat::Chat`, the trait `std::marker::Sync` is not implemented for `(dyn rusqlite::Params + 'static)`, which is required by `impl futures::Future<Output = ()>: std::marker::Send`
note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`
    --> src/chat.rs:2222:30
     |
2222 |     pub(crate) async fn sync(&self, context: &Context, action: SyncAction) -> Result<()> {
     |                              ^^^^^ has type `&chat::Chat` which is not `Send`, because `chat::Chat` is not `Sync`
note: required by a bound in `tokio::spawn`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/task/spawn.rs:166:21
     |
164  |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
     |            ----- required by a bound in this function
165  |     where
166  |         F: Future + Send + 'static,
     |                     ^^^^ required by this bound in `spawn`

error: future cannot be sent between threads safely
   --> src/scheduler.rs:877:25
    |
877 |             task::spawn(smtp_loop(ctx, smtp_start_send, smtp_handlers))
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `smtp_loop` is not `Send`
    |
    = help: within `impl futures::Future<Output = ()>`, the trait `std::marker::Send` is not implemented for `(dyn rusqlite::Params + 'static)`, which is required by `impl futures::Future<Output = ()>: std::marker::Send`
note: future is not `Send` as this value is used across an await
   --> src/message.rs:851:68
    |
839 |         let chat_loaded: Chat;
    |             ----------- has type `chat::Chat` which is not `Send`
...
851 |                     Some(Contact::get_by_id(context, self.from_id).await?)
    |                                                                    ^^^^^ await occurs here, with `chat_loaded` maybe used later
note: required by a bound in `tokio::spawn`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/task/spawn.rs:166:21
    |
164 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
    |            ----- required by a bound in this function
165 |     where
166 |         F: Future + Send + 'static,
    |                     ^^^^ required by this bound in `spawn`

error: future cannot be sent between threads safely
   --> src/scheduler.rs:877:25
    |
877 |             task::spawn(smtp_loop(ctx, smtp_start_send, smtp_handlers))
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `smtp_loop` is not `Send`
    |
    = help: within `chat::Chat`, the trait `std::marker::Sync` is not implemented for `(dyn rusqlite::Params + 'static)`, which is required by `impl futures::Future<Output = ()>: std::marker::Send`
note: future is not `Send` as this value is used across an await
   --> src/message.rs:851:68
    |
840 |         let chat = if let Some(chat) = chat {
    |             ---- has type `&chat::Chat` which is not `Send`
...
851 |                     Some(Contact::get_by_id(context, self.from_id).await?)
    |                                                                    ^^^^^ await occurs here, with `chat` maybe used later
note: required by a bound in `tokio::spawn`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.37.0/src/task/spawn.rs:166:21
    |
164 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
    |            ----- required by a bound in this function
165 |     where
166 |         F: Future + Send + 'static,
    |                     ^^^^ required by this bound in `spawn`

error[E0599]: no method named `update_timestamp` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/receive_imf.rs:2237:18
     |
2235 |               if chat
     |  ________________-
2236 | |                 .param
2237 | |                 .update_timestamp(Param::AvatarTimestamp, mime_parser.timestamp_sent)?
     | |                 -^^^^^^^^^^^^^^^^ method not found in `dyn Params`
     | |_________________|
     | 

error[E0599]: no method named `set` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/receive_imf.rs:2241:36
     |
2241 |                         chat.param.set(Param::ProfileImage, profile_image);
     |                                    ^^^ method not found in `dyn Params`

error[E0599]: no method named `remove` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/receive_imf.rs:2244:36
     |
2244 |                         chat.param.remove(Param::ProfileImage);
     |                                    ^^^^^^ method not found in `dyn Params`

error[E0599]: no method named `get` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/receive_imf.rs:2454:45
     |
2454 |     if let Some(old_list_post) = chat.param.get(Param::ListPost) {
     |                                             ^^^ method not found in `dyn Params`

error[E0599]: no method named `remove` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/receive_imf.rs:2458:24
     |
2458 |             chat.param.remove(Param::ListPost);
     |                        ^^^^^^ method not found in `dyn Params`

error[E0599]: no method named `set` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
    --> src/receive_imf.rs:2462:20
     |
2462 |         chat.param.set(Param::ListPost, list_post);
     |                    ^^^ method not found in `dyn Params`

error[E0599]: no method named `update_timestamp` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
   --> src/reaction.rs:203:14
    |
201 |           if chat
    |  ____________-
202 | |             .param
203 | |             .update_timestamp(Param::LastReactionTimestamp, timestamp)?
    | |             -^^^^^^^^^^^^^^^^ method not found in `dyn Params`
    | |_____________|
    | 

error[E0599]: no method named `set_i64` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
   --> src/reaction.rs:206:18
    |
205 | /             chat.param
206 | |                 .set_i64(Param::LastReactionMsgId, i64::from(msg_id.to_u32()));
    | |                 -^^^^^^^ method not found in `dyn Params`
    | |_________________|
    | 

error[E0599]: no method named `set_i64` found for trait object `(dyn rusqlite::Params + 'static)` in the current scope
   --> src/reaction.rs:208:18
    |
207 | /             chat.param
208 | |                 .set_i64(Param::LastReactionContactId, i64::from(contact_id.to_u32()));
    | |                 -^^^^^^^ method not found in `dyn Params`
    | |_________________|
    | 

error[E0782]: trait objects must include the `dyn` keyword
    --> src/chat.rs:1510:16
     |
1510 |     pub param: Params,
     |                ^^^^^^
     |
help: add `dyn` keyword before this trait
     |
1510 |     pub param: dyn Params,
     |                +++

error[E0782]: trait objects must include the `dyn` keyword
    --> src/chat.rs:1163:70
     |
1163 |     pub(crate) async fn get_param(self, context: &Context) -> Result<Params> {
     |                                                                      ^^^^^^
     |
help: add `dyn` keyword before this trait
     |
1163 |     pub(crate) async fn get_param(self, context: &Context) -> Result<dyn Params> {
     |                                                                      +++

Some errors have detailed explanations: E0252, E0277, E0425, E0432, E0599, E0609, E0616, E0746, E0782.
For more information about an error, try `rustc --explain E0252`.
warning: `deltachat` (lib) generated 4 warnings
error: could not compile `deltachat` (lib) due to 83 previous errors; 4 warnings emitted
warning: build failed, waiting for other jobs to finish...
warning: `deltachat` (lib test) generated 4 warnings (4 duplicates)
error: could not compile `deltachat` (lib test) due to 83 previous errors; 4 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


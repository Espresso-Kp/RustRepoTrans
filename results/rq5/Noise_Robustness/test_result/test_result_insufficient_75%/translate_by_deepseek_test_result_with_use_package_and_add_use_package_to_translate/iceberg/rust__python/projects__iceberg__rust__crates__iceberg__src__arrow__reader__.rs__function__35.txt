Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0412]: cannot find type `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:556:58
    |
556 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                                                          ^^^^^^^^^^^ not found in this scope
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::AlwaysFalse` and 1 other; try using the variant's enum
    |
556 |         if lhs(self.record_batch.clone())?.as_any().is::<crate::arrow::reader::BoundPredicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
556 |         if lhs(self.record_batch.clone())?.as_any().is::<crate::expr::Predicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~
help: you might be missing a type parameter
    |
528 | impl<'a, AlwaysFalse> BoundPredicateVisitor for PredicateConverter<'a> {
    |        +++++++++++++

error[E0425]: cannot find function, tuple struct or tuple variant `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:558:20
    |
558 |                 Ok(AlwaysFalse().into_array(record_batch.num_rows()))
    |                    ^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
20  + use crate::arrow::reader::BoundPredicate::AlwaysFalse;
    |
20  + use crate::expr::Predicate::AlwaysFalse;
    |

error[E0425]: cannot find value `record_batch` in this scope
   --> crates/iceberg/src/arrow/reader.rs:558:45
    |
558 |                 Ok(AlwaysFalse().into_array(record_batch.num_rows()))
    |                                             ^^^^^^^^^^^^
    |
help: a local variable with a similar name exists, consider changing it
    |
557 |             return Ok(Box::new(move |record_batch: RecordBatch| {
    |                                      ~~~~~~~~~~~~

error[E0412]: cannot find type `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:561:58
    |
561 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                                                          ^^^^^^^^^^^ not found in this scope
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::AlwaysFalse` and 1 other; try using the variant's enum
    |
561 |         if rhs(self.record_batch.clone())?.as_any().is::<crate::arrow::reader::BoundPredicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
561 |         if rhs(self.record_batch.clone())?.as_any().is::<crate::expr::Predicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~
help: you might be missing a type parameter
    |
528 | impl<'a, AlwaysFalse> BoundPredicateVisitor for PredicateConverter<'a> {
    |        +++++++++++++

error[E0425]: cannot find function, tuple struct or tuple variant `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:563:20
    |
563 |                 Ok(AlwaysFalse().into_array(record_batch.num_rows()))
    |                    ^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
20  + use crate::arrow::reader::BoundPredicate::AlwaysFalse;
    |
20  + use crate::expr::Predicate::AlwaysFalse;
    |

error[E0425]: cannot find value `record_batch` in this scope
   --> crates/iceberg/src/arrow/reader.rs:563:45
    |
563 |                 Ok(AlwaysFalse().into_array(record_batch.num_rows()))
    |                                             ^^^^^^^^^^^^
    |
help: a local variable with a similar name exists, consider changing it
    |
562 |             return Ok(Box::new(move |record_batch: RecordBatch| {
    |                                      ~~~~~~~~~~~~

error[E0412]: cannot find type `AlwaysTrue` in this scope
   --> crates/iceberg/src/arrow/reader.rs:566:58
    |
566 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                                                          ^^^^^^^^^^ not found in this scope
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::AlwaysTrue` and 1 other; try using the variant's enum
    |
566 |         if lhs(self.record_batch.clone())?.as_any().is::<crate::arrow::reader::BoundPredicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
566 |         if lhs(self.record_batch.clone())?.as_any().is::<crate::expr::Predicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~
help: you might be missing a type parameter
    |
528 | impl<'a, AlwaysTrue> BoundPredicateVisitor for PredicateConverter<'a> {
    |        ++++++++++++

error[E0412]: cannot find type `AlwaysTrue` in this scope
   --> crates/iceberg/src/arrow/reader.rs:569:58
    |
569 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                                                          ^^^^^^^^^^ not found in this scope
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::AlwaysTrue` and 1 other; try using the variant's enum
    |
569 |         if rhs(self.record_batch.clone())?.as_any().is::<crate::arrow::reader::BoundPredicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
569 |         if rhs(self.record_batch.clone())?.as_any().is::<crate::expr::Predicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~
help: you might be missing a type parameter
    |
528 | impl<'a, AlwaysTrue> BoundPredicateVisitor for PredicateConverter<'a> {
    |        ++++++++++++

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:546:21
    |
546 |         if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>() {
    |                     ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:42
    |
546 |         if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-7042241127218295739.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:546:44
    |
546 |         if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>() {
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:547:25
    |
547 |             if rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>() {
    |                         ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:547:46
    |
547 |             if rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>() {
    |                                              ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-9787769866299235877.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:547:48
    |
547 |             if rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>() {
    |                                                ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:548:42
    |
548 |                 let lhs_array = lhs(self.record_batch.clone())?.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                          ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:548:63
    |
548 |                 let lhs_array = lhs(self.record_batch.clone())?.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                                               ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-7579646342861156502.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:548:65
    |
548 |                 let lhs_array = lhs(self.record_batch.clone())?.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                                                 ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:549:42
    |
549 |                 let rhs_array = rhs(self.record_batch.clone())?.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                          ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:549:63
    |
549 |                 let rhs_array = rhs(self.record_batch.clone())?.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                                               ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-11648595332242735377.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:549:65
    |
549 |                 let rhs_array = rhs(self.record_batch.clone())?.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                                                 ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:550:63
    |
550 |                 let result_array = and(&lhs_array, &rhs_array)?;
    |                                                               ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-3705922560902789556.txt'

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:556:21
    |
556 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                     ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:556:42
    |
556 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-2052310795042240053.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:556:44
    |
556 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:561:21
    |
561 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                     ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:561:42
    |
561 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-3763989104015144245.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:561:44
    |
561 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:566:21
    |
566 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                     ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:566:42
    |
566 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-4863946937301246563.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:566:44
    |
566 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:569:21
    |
569 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                     ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:569:42
    |
569 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-11451074408894669527.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:569:44
    |
569 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `clone` found for mutable reference `&mut PredicateConverter<'a>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:572:24
    |
572 |         let obj = self.clone();
    |                        ^^^^^ method not found in `&mut PredicateConverter<'a>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the trait `Clone` defines an item `clone`, but is explicitly unimplemented

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:578:27
    |
578 |             if lhs_result.as_any().is::<BooleanArray>() && rhs_result.as_any().is::<BooleanArray>() {
    |                           ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:578:71
    |
578 |             if lhs_result.as_any().is::<BooleanArray>() && rhs_result.as_any().is::<BooleanArray>() {
    |                                                                       ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:579:44
    |
579 |                 let lhs_array = lhs_result.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:580:44
    |
580 |                 let rhs_array = rhs_result.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

Some errors have detailed explanations: E0277, E0412, E0425, E0599, E0609.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `iceberg` (lib) due to 38 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:42
    |
546 |         if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-9491482445775720256.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:547:46
    |
547 |             if rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>() {
    |                                              ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-10899596741103775531.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:548:63
    |
548 |                 let lhs_array = lhs(self.record_batch.clone())?.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                                               ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-12861196884908195953.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:549:63
    |
549 |                 let rhs_array = rhs(self.record_batch.clone())?.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                                               ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-6695433564953509978.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:550:63
    |
550 |                 let result_array = and(&lhs_array, &rhs_array)?;
    |                                                               ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-17471390635420022579.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:556:42
    |
556 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-11776102110733092195.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:561:42
    |
561 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-12926270769637124279.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:566:42
    |
566 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-1061405547317305612.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:569:42
    |
569 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-16966310191796045062.txt'

error: could not compile `iceberg` (lib test) due to 38 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0412]: cannot find type `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:556:58
    |
556 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                                                          ^^^^^^^^^^^ not found in this scope
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::AlwaysFalse` and 1 other; try using the variant's enum
    |
556 |         if lhs(self.record_batch.clone())?.as_any().is::<crate::arrow::reader::BoundPredicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
556 |         if lhs(self.record_batch.clone())?.as_any().is::<crate::expr::Predicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~
help: you might be missing a type parameter
    |
528 | impl<'a, AlwaysFalse> BoundPredicateVisitor for PredicateConverter<'a> {
    |        +++++++++++++

error[E0425]: cannot find function, tuple struct or tuple variant `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:558:20
    |
558 |                 Ok(AlwaysFalse().into_array(record_batch.num_rows()))
    |                    ^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
20  + use crate::arrow::reader::BoundPredicate::AlwaysFalse;
    |
20  + use crate::expr::Predicate::AlwaysFalse;
    |

error[E0425]: cannot find value `record_batch` in this scope
   --> crates/iceberg/src/arrow/reader.rs:558:45
    |
558 |                 Ok(AlwaysFalse().into_array(record_batch.num_rows()))
    |                                             ^^^^^^^^^^^^
    |
help: a local variable with a similar name exists, consider changing it
    |
557 |             return Ok(Box::new(move |record_batch: RecordBatch| {
    |                                      ~~~~~~~~~~~~

error[E0412]: cannot find type `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:561:58
    |
561 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                                                          ^^^^^^^^^^^ not found in this scope
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::AlwaysFalse` and 1 other; try using the variant's enum
    |
561 |         if rhs(self.record_batch.clone())?.as_any().is::<crate::arrow::reader::BoundPredicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
561 |         if rhs(self.record_batch.clone())?.as_any().is::<crate::expr::Predicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~
help: you might be missing a type parameter
    |
528 | impl<'a, AlwaysFalse> BoundPredicateVisitor for PredicateConverter<'a> {
    |        +++++++++++++

error[E0425]: cannot find function, tuple struct or tuple variant `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:563:20
    |
563 |                 Ok(AlwaysFalse().into_array(record_batch.num_rows()))
    |                    ^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
20  + use crate::arrow::reader::BoundPredicate::AlwaysFalse;
    |
20  + use crate::expr::Predicate::AlwaysFalse;
    |

error[E0425]: cannot find value `record_batch` in this scope
   --> crates/iceberg/src/arrow/reader.rs:563:45
    |
563 |                 Ok(AlwaysFalse().into_array(record_batch.num_rows()))
    |                                             ^^^^^^^^^^^^
    |
help: a local variable with a similar name exists, consider changing it
    |
562 |             return Ok(Box::new(move |record_batch: RecordBatch| {
    |                                      ~~~~~~~~~~~~

error[E0412]: cannot find type `AlwaysTrue` in this scope
   --> crates/iceberg/src/arrow/reader.rs:566:58
    |
566 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                                                          ^^^^^^^^^^ not found in this scope
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::AlwaysTrue` and 1 other; try using the variant's enum
    |
566 |         if lhs(self.record_batch.clone())?.as_any().is::<crate::arrow::reader::BoundPredicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
566 |         if lhs(self.record_batch.clone())?.as_any().is::<crate::expr::Predicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~
help: you might be missing a type parameter
    |
528 | impl<'a, AlwaysTrue> BoundPredicateVisitor for PredicateConverter<'a> {
    |        ++++++++++++

error[E0412]: cannot find type `AlwaysTrue` in this scope
   --> crates/iceberg/src/arrow/reader.rs:569:58
    |
569 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                                                          ^^^^^^^^^^ not found in this scope
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::AlwaysTrue` and 1 other; try using the variant's enum
    |
569 |         if rhs(self.record_batch.clone())?.as_any().is::<crate::arrow::reader::BoundPredicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
569 |         if rhs(self.record_batch.clone())?.as_any().is::<crate::expr::Predicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~
help: you might be missing a type parameter
    |
528 | impl<'a, AlwaysTrue> BoundPredicateVisitor for PredicateConverter<'a> {
    |        ++++++++++++

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:546:21
    |
546 |         if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>() {
    |                     ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:42
    |
546 |         if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-12578273745867525714.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:546:44
    |
546 |         if lhs(self.record_batch.clone())?.as_any().is::<BooleanArray>() {
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:547:25
    |
547 |             if rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>() {
    |                         ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:547:46
    |
547 |             if rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>() {
    |                                              ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-12679572239123817508.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:547:48
    |
547 |             if rhs(self.record_batch.clone())?.as_any().is::<BooleanArray>() {
    |                                                ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:548:42
    |
548 |                 let lhs_array = lhs(self.record_batch.clone())?.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                          ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:548:63
    |
548 |                 let lhs_array = lhs(self.record_batch.clone())?.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                                               ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-11368207590941286392.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:548:65
    |
548 |                 let lhs_array = lhs(self.record_batch.clone())?.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                                                 ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:549:42
    |
549 |                 let rhs_array = rhs(self.record_batch.clone())?.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                          ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:549:63
    |
549 |                 let rhs_array = rhs(self.record_batch.clone())?.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                                               ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-10640100537574633653.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:549:65
    |
549 |                 let rhs_array = rhs(self.record_batch.clone())?.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                                                 ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:550:63
    |
550 |                 let result_array = and(&lhs_array, &rhs_array)?;
    |                                                               ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-5853658653167121525.txt'

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:556:21
    |
556 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                     ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:556:42
    |
556 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-4437354822351995380.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:556:44
    |
556 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:561:21
    |
561 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                     ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:561:42
    |
561 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-15973606787994353263.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:561:44
    |
561 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysFalse>() {
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:566:21
    |
566 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                     ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:566:42
    |
566 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-2865197411211494478.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:566:44
    |
566 |         if lhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0609]: no field `record_batch` on type `&mut PredicateConverter<'a>`
   --> crates/iceberg/src/arrow/reader.rs:569:21
    |
569 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                     ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `parquet_schema`, `column_map`, `column_indices`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:569:42
    |
569 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-4431218407185197180.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:569:44
    |
569 |         if rhs(self.record_batch.clone())?.as_any().is::<AlwaysTrue>() {
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `clone` found for mutable reference `&mut PredicateConverter<'a>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:572:24
    |
572 |         let obj = self.clone();
    |                        ^^^^^ method not found in `&mut PredicateConverter<'a>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the trait `Clone` defines an item `clone`, but is explicitly unimplemented

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:578:27
    |
578 |             if lhs_result.as_any().is::<BooleanArray>() && rhs_result.as_any().is::<BooleanArray>() {
    |                           ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:578:71
    |
578 |             if lhs_result.as_any().is::<BooleanArray>() && rhs_result.as_any().is::<BooleanArray>() {
    |                                                                       ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:579:44
    |
579 |                 let lhs_array = lhs_result.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:580:44
    |
580 |                 let rhs_array = rhs_result.as_any().downcast_ref::<BooleanArray>().unwrap().clone();
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

Some errors have detailed explanations: E0277, E0412, E0425, E0599, E0609.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `iceberg` (lib) due to 38 previous errors


Fail
file path is :
projects/deltachat-core/rust/src/contact.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `Result` is defined multiple times
  --> src/contact.rs:16:42
   |
4  | use anyhow::Result;
   |     -------------- previous import of the type `Result` here
...
16 | use anyhow::{bail, ensure, Context as _, Result};
   |                                          ^^^^^^ `Result` reimported here
   |
   = note: `Result` must be defined only once in the type namespace of this module

error[E0432]: unresolved import `crate::constants::Event`
 --> src/contact.rs:6:23
  |
6 | use crate::constants::Event::CONTACTS_CHANGED;
  |                       ^^^^^ could not find `Event` in `constants`

error[E0432]: unresolved imports `crate::context::dc_add_or_lookup_contact`, `crate::context::dc_block_contact`, `crate::context::dc_is_contact_blocked`, `crate::context::dc_context_new`
 --> src/contact.rs:7:22
  |
7 | use crate::context::{dc_add_or_lookup_contact, dc_block_contact, dc_is_contact_blocked, dc_context_new};
  |                      ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^ no `dc_context_new` in `context`
  |                      |                         |                 |
  |                      |                         |                 no `dc_is_contact_blocked` in `context`
  |                      |                         no `dc_block_contact` in `context`
  |                      no `dc_add_or_lookup_contact` in `context`

error[E0433]: failed to resolve: use of undeclared crate or module `async_std`
 --> src/contact.rs:5:5
  |
5 | use async_std::prelude::*;
  |     ^^^^^^^^^ use of undeclared crate or module `async_std`
  |
help: there is a crate or module with a similar name
  |
5 | use async_smtp::prelude::*;
  |     ~~~~~~~~~~

error[E0432]: unresolved import `crate::types`
 --> src/contact.rs:8:12
  |
8 | use crate::types::*;
  |            ^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `async_imap::types`

error[E0433]: failed to resolve: use of undeclared type `Error`
   --> src/contact.rs:634:20
    |
634 |         return Err(Error::InvalidAddress);
    |                    ^^^^^ use of undeclared type `Error`
    |
help: consider importing one of these items
    |
4   + use anyhow::Error;
    |
4   + use async_imap::error::Error;
    |
4   + use async_native_tls::Error;
    |
4   + use async_smtp::error::Error;
    |
      and 31 other candidates

warning: unused import: `Result`
  --> src/contact.rs:16:42
   |
16 | use anyhow::{bail, ensure, Context as _, Result};
   |                                          ^^^^^^
   |
note: the lint level is defined here
  --> src/lib.rs:6:5
   |
6  |     unused,
   |     ^^^^^^
   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

error[E0369]: binary operation `==` cannot be applied to type `&context::Context`
   --> src/contact.rs:633:16
    |
633 |     if context == None || addr.is_empty() {
    |        ------- ^^ ---- std::option::Option<_>
    |        |
    |        &context::Context

error[E0599]: no method named `unwrap` found for reference `&context::Context` in the current scope
   --> src/contact.rs:637:55
    |
637 |     let contact_id = dc_add_or_lookup_contact(context.unwrap(), name, addr, Origin::ManuallyCreated, &mut sth_modified).await;
    |                                                       ^^^^^^ method not found in `&Context`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `unwrap`, perhaps you need to implement one of them:
            candidate #1: `fallible_iterator::FallibleIterator`
            candidate #2: `OwnedRetriever`

error[E0433]: failed to resolve: use of undeclared type `ContactEvent`
   --> src/contact.rs:641:24
    |
641 |     context.emit_event(ContactEvent::CONTACTS_CHANGED, match sth_modified {
    |                        ^^^^^^^^^^^^ use of undeclared type `ContactEvent`

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> src/contact.rs:641:13
    |
641 |        context.emit_event(ContactEvent::CONTACTS_CHANGED, match sth_modified {
    |  ______________^^^^^^^^^^_______________________________-_-
    | | ______________________________________________________|
    | ||
642 | ||         ModifiedContact::Created => contact_id,
643 | ||         _ => ContactId::default(),
644 | ||     }).await;
    | ||     -
    | ||_____|
    |  |_____unexpected argument of type `ContactId`
    |        help: remove the extra argument
    |
note: method defined here
   --> src/context.rs:595:12
    |
595 |     pub fn emit_event(&self, event: EventType) {
    |            ^^^^^^^^^^        ----------------

error[E0277]: `()` is not a future
   --> src/contact.rs:644:8
    |
644 |     }).await;
    |       -^^^^^
    |       ||
    |       |`()` is not a future
    |       help: remove the `.await`
    |
    = help: the trait `futures::Future` is not implemented for `()`, which is required by `(): std::future::IntoFuture`
    = note: () must be a future or must implement `IntoFuture` to be awaited
    = note: required for `()` to implement `std::future::IntoFuture`

error[E0308]: mismatched types
    --> src/context.rs:1106:48
     |
1106 |         let contact_id = Contact::create(self, "Statistics bot", SELF_REPORTING_BOT).await?;
     |                          ---------------       ^^^^^^^^^^^^^^^^ expected `Option<&str>`, found `&str`
     |                          |
     |                          arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
1106 |         let contact_id = Contact::create(self, Some("Statistics bot"), SELF_REPORTING_BOT).await?;
     |                                                +++++                +

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> src/contact.rs:641:13
    |
641 |        context.emit_event(ContactEvent::CONTACTS_CHANGED, match sth_modified {
    |  ______________^^^^^^^^^^_______________________________-_-
    | | ______________________________________________________|
    | ||
642 | ||         ModifiedContact::Created => contact_id,
643 | ||         _ => ContactId::default(),
644 | ||     }).await;
    | ||     -
    | ||_____|
    |  |_____unexpected argument of type `contact::ContactId`
    |        help: remove the extra argument
    |
note: method defined here
   --> src/context.rs:595:12
    |
595 |     pub fn emit_event(&self, event: EventType) {
    |            ^^^^^^^^^^        ----------------

error[E0308]: mismatched types
    --> src/imap.rs:2592:54
     |
2592 |             let contact_id = Contact::create(&t.ctx, "", "bob@example.net").await?;
     |                              ---------------         ^^ expected `Option<&str>`, found `&str`
     |                              |
     |                              arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2592 |             let contact_id = Contact::create(&t.ctx, Some(""), "bob@example.net").await?;
     |                                                      +++++  +

error[E0433]: failed to resolve: use of undeclared type `ModifiedContact`
   --> src/contact.rs:642:9
    |
642 |         ModifiedContact::Created => contact_id,
    |         ^^^^^^^^^^^^^^^ use of undeclared type `ModifiedContact`

Some errors have detailed explanations: E0061, E0252, E0277, E0308, E0369, E0432, E0433, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `deltachat` (lib) generated 1 warning
error: could not compile `deltachat` (lib) due to 13 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
   --> src/test_utils.rs:615:45
    |
615 |         let contact = Contact::create(self, name, addr)
    |                       ---------------       ^^^^ expected `Option<&str>`, found `&str`
    |                       |
    |                       arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
615 |         let contact = Contact::create(self, Some(name), addr)
    |                                             +++++    +

error[E0308]: mismatched types
   --> src/tests/aeap.rs:169:45
    |
169 |     let old_contact = Contact::create(&bob, "Alice", "alice@example.org")
    |                       ---------------       ^^^^^^^ expected `Option<&str>`, found `&str`
    |                       |
    |                       arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
169 |     let old_contact = Contact::create(&bob, Some("Alice"), "alice@example.org")
    |                                             +++++       +

error[E0308]: mismatched types
   --> src/tests/aeap.rs:180:53
    |
180 |     let already_new_contact = Contact::create(&bob, "Alice", ALICE_NEW_ADDR)
    |                               ---------------       ^^^^^^^ expected `Option<&str>`, found `&str`
    |                               |
    |                               arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
180 |     let already_new_contact = Contact::create(&bob, Some("Alice"), ALICE_NEW_ADDR)
    |                                                     +++++       +

error[E0308]: mismatched types
   --> src/events/chatlist_events.rs:251:31
    |
251 |         Contact::create(&bob, "Alice2", addr).await?;
    |         ---------------       ^^^^^^^^ expected `Option<&str>`, found `&str`
    |         |
    |         arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
251 |         Contact::create(&bob, Some("Alice2"), addr).await?;
    |                               +++++        +

error[E0308]: mismatched types
   --> src/events/chatlist_events.rs:500:50
    |
500 |         let contact_id = Contact::create(&alice, "example", "example@example.com").await?;
    |                          ---------------         ^^^^^^^^^ expected `Option<&str>`, found `&str`
    |                          |
    |                          arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
500 |         let contact_id = Contact::create(&alice, Some("example"), "example@example.com").await?;
    |                                                  +++++         +

error[E0308]: mismatched types
    --> src/chat.rs:4930:60
     |
4930 |         let alice_bob_contact_id = Contact::create(&alice, "robert", "bob@example.net").await?;
     |                                    ---------------         ^^^^^^^^ expected `Option<&str>`, found `&str`
     |                                    |
     |                                    arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
4930 |         let alice_bob_contact_id = Contact::create(&alice, Some("robert"), "bob@example.net").await?;
     |                                                            +++++        +

error[E0308]: mismatched types
    --> src/chat.rs:4950:62
     |
4950 |         let alice_fiona_contact_id = Contact::create(&alice, "Fiona", "fiona@example.net").await?;
     |                                      ---------------         ^^^^^^^ expected `Option<&str>`, found `&str`
     |                                      |
     |                                      arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
4950 |         let alice_fiona_contact_id = Contact::create(&alice, Some("Fiona"), "fiona@example.net").await?;
     |                                                              +++++       +

error[E0308]: mismatched types
    --> src/chat.rs:5002:60
     |
5002 |         let alice_bob_contact_id = Contact::create(&alice, "Bob", "bob@example.net").await?;
     |                                    ---------------         ^^^^^ expected `Option<&str>`, found `&str`
     |                                    |
     |                                    arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5002 |         let alice_bob_contact_id = Contact::create(&alice, Some("Bob"), "bob@example.net").await?;
     |                                                            +++++     +

error[E0308]: mismatched types
    --> src/chat.rs:5003:62
     |
5003 |         let alice_fiona_contact_id = Contact::create(&alice, "Fiona", "fiona@example.net").await?;
     |                                      ---------------         ^^^^^^^ expected `Option<&str>`, found `&str`
     |                                      |
     |                                      arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5003 |         let alice_fiona_contact_id = Contact::create(&alice, Some("Fiona"), "fiona@example.net").await?;
     |                                                              +++++       +

error[E0308]: mismatched types
    --> src/chat.rs:5005:37
     |
5005 |             Contact::create(&alice, "Claire", "claire@example.net").await?;
     |             ---------------         ^^^^^^^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5005 |             Contact::create(&alice, Some("Claire"), "claire@example.net").await?;
     |                                     +++++        +

error[E0308]: mismatched types
    --> src/chat.rs:5062:37
     |
5062 |             Contact::create(&alice, "Bob", &bob.get_config(Config::Addr).await?.unwrap()).await?;
     |             ---------------         ^^^^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5062 |             Contact::create(&alice, Some("Bob"), &bob.get_config(Config::Addr).await?.unwrap()).await?;
     |                                     +++++     +

error[E0308]: mismatched types
    --> src/chat.rs:5064:62
     |
5064 |         let alice_fiona_contact_id = Contact::create(&alice, "Fiona", fiona_addr).await?;
     |                                      ---------------         ^^^^^^^ expected `Option<&str>`, found `&str`
     |                                      |
     |                                      arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5064 |         let alice_fiona_contact_id = Contact::create(&alice, Some("Fiona"), fiona_addr).await?;
     |                                                              +++++       +

error[E0308]: mismatched types
    --> src/chat.rs:5065:58
     |
5065 |         let bob_fiona_contact_id = Contact::create(&bob, "Fiona", fiona_addr).await?;
     |                                    ---------------       ^^^^^^^ expected `Option<&str>`, found `&str`
     |                                    |
     |                                    arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5065 |         let bob_fiona_contact_id = Contact::create(&bob, Some("Fiona"), fiona_addr).await?;
     |                                                          +++++       +

error[E0308]: mismatched types
    --> src/chat.rs:5118:40
     |
5118 |         let bob = Contact::create(&a1, "", "bob@example.org").await?;
     |                   ---------------      ^^ expected `Option<&str>`, found `&str`
     |                   |
     |                   arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5118 |         let bob = Contact::create(&a1, Some(""), "bob@example.org").await?;
     |                                        +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:5172:46
     |
5172 |         let bob_id = Contact::create(&alice, "", "bob@example.net").await?;
     |                      ---------------         ^^ expected `Option<&str>`, found `&str`
     |                      |
     |                      arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5172 |         let bob_id = Contact::create(&alice, Some(""), "bob@example.net").await?;
     |                                              +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:5173:49
     |
5173 |         let claire_id = Contact::create(&alice, "", "claire@foo.de").await?;
     |                         ---------------         ^^ expected `Option<&str>`, found `&str`
     |                         |
     |                         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5173 |         let claire_id = Contact::create(&alice, Some(""), "claire@foo.de").await?;
     |                                                 +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:5174:48
     |
5174 |         let daisy_id = Contact::create(&alice, "", "daisy@bar.de").await?;
     |                        ---------------         ^^ expected `Option<&str>`, found `&str`
     |                        |
     |                        arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5174 |         let daisy_id = Contact::create(&alice, Some(""), "daisy@bar.de").await?;
     |                                                +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:5230:48
     |
5230 |         let claire_id = Contact::create(alice, "", "claire@foo.de").await?;
     |                         ---------------        ^^ expected `Option<&str>`, found `&str`
     |                         |
     |                         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5230 |         let claire_id = Contact::create(alice, Some(""), "claire@foo.de").await?;
     |                                                +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:5246:46
     |
5246 |         let bob_id = Contact::create(&alice, "", "bob@example.net").await?;
     |                      ---------------         ^^ expected `Option<&str>`, found `&str`
     |                      |
     |                      arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5246 |         let bob_id = Contact::create(&alice, Some(""), "bob@example.net").await?;
     |                                              +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:5247:49
     |
5247 |         let claire_id = Contact::create(&alice, "", "claire@foo.de").await?;
     |                         ---------------         ^^ expected `Option<&str>`, found `&str`
     |                         |
     |                         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5247 |         let claire_id = Contact::create(&alice, Some(""), "claire@foo.de").await?;
     |                                                 +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:5248:48
     |
5248 |         let daisy_id = Contact::create(&alice, "", "daisy@bar.de").await?;
     |                        ---------------         ^^ expected `Option<&str>`, found `&str`
     |                        |
     |                        arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5248 |         let daisy_id = Contact::create(&alice, Some(""), "daisy@bar.de").await?;
     |                                                +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:5291:51
     |
5291 |         let bob_contact = Contact::create(&alice, "", "bob@example.net").await?;
     |                           ---------------         ^^ expected `Option<&str>`, found `&str`
     |                           |
     |                           arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5291 |         let bob_contact = Contact::create(&alice, Some(""), "bob@example.net").await?;
     |                                                   +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:5317:41
     |
5317 |         let bob = Contact::create(&ctx, "", "bob@f.br").await.unwrap();
     |                   ---------------       ^^ expected `Option<&str>`, found `&str`
     |                   |
     |                   arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5317 |         let bob = Contact::create(&ctx, Some(""), "bob@f.br").await.unwrap();
     |                                         +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:5324:44
     |
5324 |         let claire = Contact::create(&ctx, "", "claire@foo.de").await.unwrap();
     |                      ---------------       ^^ expected `Option<&str>`, found `&str`
     |                      |
     |                      arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5324 |         let claire = Contact::create(&ctx, Some(""), "claire@foo.de").await.unwrap();
     |                                            +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:5962:54
     |
5962 |         let contact1 = Contact::create(&context.ctx, "bob", "bob@mail.de")
     |                        ---------------               ^^^^^ expected `Option<&str>`, found `&str`
     |                        |
     |                        arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
5962 |         let contact1 = Contact::create(&context.ctx, Some("bob"), "bob@mail.de")
     |                                                      +++++     +

error[E0308]: mismatched types
    --> src/chat.rs:6109:48
     |
6109 |         let contact_id = Contact::create(&ctx, "", "bob@foo.de").await.unwrap();
     |                          ---------------       ^^ expected `Option<&str>`, found `&str`
     |                          |
     |                          arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
6109 |         let contact_id = Contact::create(&ctx, Some(""), "bob@foo.de").await.unwrap();
     |                                                +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:6123:48
     |
6123 |         let contact_id = Contact::create(&ctx, "", "claire@foo.de").await.unwrap();
     |                          ---------------       ^^ expected `Option<&str>`, found `&str`
     |                          |
     |                          arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
6123 |         let contact_id = Contact::create(&ctx, Some(""), "claire@foo.de").await.unwrap();
     |                                                +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:6588:42
     |
6588 |         let bob_id = Contact::create(&t, "", "bob@example.net").await?;
     |                      ---------------     ^^ expected `Option<&str>`, found `&str`
     |                      |
     |                      arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
6588 |         let bob_id = Contact::create(&t, Some(""), "bob@example.net").await?;
     |                                          +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:6654:46
     |
6654 |         let bob_id = Contact::create(&alice, "Bob", "bob@example.net").await?;
     |                      ---------------         ^^^^^ expected `Option<&str>`, found `&str`
     |                      |
     |                      arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
6654 |         let bob_id = Contact::create(&alice, Some("Bob"), "bob@example.net").await?;
     |                                              +++++     +

error[E0308]: mismatched types
    --> src/chat.rs:6655:49
     |
6655 |         let claire_id = Contact::create(&alice, "Claire", "claire@example.net").await?;
     |                         ---------------         ^^^^^^^^ expected `Option<&str>`, found `&str`
     |                         |
     |                         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
6655 |         let claire_id = Contact::create(&alice, Some("Claire"), "claire@example.net").await?;
     |                                                 +++++        +

error[E0308]: mismatched types
    --> src/chat.rs:6700:46
     |
6700 |         let bob_id = Contact::create(&alice, "bob", "bob@example.net").await?;
     |                      ---------------         ^^^^^ expected `Option<&str>`, found `&str`
     |                      |
     |                      arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
6700 |         let bob_id = Contact::create(&alice, Some("bob"), "bob@example.net").await?;
     |                                              +++++     +

error[E0308]: mismatched types
    --> src/chat.rs:6715:47
     |
6715 |         let claire_id = Contact::create(&bob, "claire", "claire@foo").await?;
     |                         ---------------       ^^^^^^^^ expected `Option<&str>`, found `&str`
     |                         |
     |                         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
6715 |         let claire_id = Contact::create(&bob, Some("claire"), "claire@foo").await?;
     |                                               +++++        +

error[E0308]: mismatched types
    --> src/chat.rs:6743:37
     |
6743 |             Contact::create(&alice, "", "bob@example.net").await?,
     |             ---------------         ^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
6743 |             Contact::create(&alice, Some(""), "bob@example.net").await?,
     |                                     +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:6752:37
     |
6752 |             Contact::create(&alice, "", "claire@example.org").await?,
     |             ---------------         ^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
6752 |             Contact::create(&alice, Some(""), "claire@example.org").await?,
     |                                     +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:6797:37
     |
6797 |             Contact::create(&alice, "", "bob@example.net").await?,
     |             ---------------         ^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
6797 |             Contact::create(&alice, Some(""), "bob@example.net").await?,
     |                                     +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:6817:37
     |
6817 |             Contact::create(&alice, "", "bob@example.net").await?,
     |             ---------------         ^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
6817 |             Contact::create(&alice, Some(""), "bob@example.net").await?,
     |                                     +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:6836:35
     |
6836 |             Contact::create(&bob, "", "claire@example.org").await?,
     |             ---------------       ^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
6836 |             Contact::create(&bob, Some(""), "claire@example.org").await?,
     |                                   +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:6853:37
     |
6853 |             Contact::create(&alice, "", "bob@example.net").await?,
     |             ---------------         ^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
6853 |             Contact::create(&alice, Some(""), "bob@example.net").await?,
     |                                     +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:6861:37
     |
6861 |             Contact::create(&alice, "", "claire@example.org").await?,
     |             ---------------         ^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
6861 |             Contact::create(&alice, Some(""), "claire@example.org").await?,
     |                                     +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:6873:43
     |
6873 |         let bob = Contact::create(&alice, "", "bob@f.br").await?;
     |                   ---------------         ^^ expected `Option<&str>`, found `&str`
     |                   |
     |                   arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
6873 |         let bob = Contact::create(&alice, Some(""), "bob@f.br").await?;
     |                                           +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:7042:51
     |
7042 |         let contact_bob = Contact::create(&alice, "Bob", "bob@example.net").await?;
     |                           ---------------         ^^^^^ expected `Option<&str>`, found `&str`
     |                           |
     |                           arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
7042 |         let contact_bob = Contact::create(&alice, Some("Bob"), "bob@example.net").await?;
     |                                                   +++++     +

error[E0308]: mismatched types
    --> src/chat.rs:7043:53
     |
7043 |         let contact_fiona = Contact::create(&alice, "", "fiona@example.net").await?;
     |                             ---------------         ^^ expected `Option<&str>`, found `&str`
     |                             |
     |                             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
7043 |         let contact_fiona = Contact::create(&alice, Some(""), "fiona@example.net").await?;
     |                                                     +++++  +

error[E0308]: mismatched types
    --> src/chat.rs:7269:37
     |
7269 |             Contact::create(&alice, "bob", "bob@example.net").await?,
     |             ---------------         ^^^^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
7269 |             Contact::create(&alice, Some("bob"), "bob@example.net").await?,
     |                                     +++++     +

error[E0308]: mismatched types
   --> src/chatlist.rs:531:37
    |
531 |             Contact::create(&alice, "bob", "bob@example.net")
    |             ---------------         ^^^^^ expected `Option<&str>`, found `&str`
    |             |
    |             arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
531 |             Contact::create(&alice, Some("bob"), "bob@example.net")
    |                                     +++++     +

error[E0308]: mismatched types
   --> src/chatlist.rs:665:43
    |
665 |         let test_id = Contact::create(&t, "Bob Nickname", "bob@example.org").await?;
    |                       ---------------     ^^^^^^^^^^^^^^ expected `Option<&str>`, found `&str`
    |                       |
    |                       arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
665 |         let test_id = Contact::create(&t, Some("Bob Nickname"), "bob@example.org").await?;
    |                                           +++++              +

error[E0308]: mismatched types
   --> src/chatlist.rs:675:43
    |
675 |         let test_id = Contact::create(&t, "", "bob@example.org").await?;
    |                       ---------------     ^^ expected `Option<&str>`, found `&str`
    |                       |
    |                       arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
675 |         let test_id = Contact::create(&t, Some(""), "bob@example.org").await?;
    |                                           +++++  +

error[E0308]: mismatched types
   --> src/chatlist.rs:720:43
    |
720 |         let test_id = Contact::create(&t, "Bob Nickname", "bob@example.org").await?;
    |                       ---------------     ^^^^^^^^^^^^^^ expected `Option<&str>`, found `&str`
    |                       |
    |                       arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
720 |         let test_id = Contact::create(&t, Some("Bob Nickname"), "bob@example.org").await?;
    |                                           +++++              +

error[E0308]: mismatched types
   --> src/chatlist.rs:731:43
    |
731 |         let test_id = Contact::create(&t, "", "bob@example.org").await?;
    |                       ---------------     ^^ expected `Option<&str>`, found `&str`
    |                       |
    |                       arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
731 |         let test_id = Contact::create(&t, Some(""), "bob@example.org").await?;
    |                                           +++++  +

error[E0308]: mismatched types
    --> src/contact.rs:2315:43
     |
2315 |         let test_id = Contact::create(&t, "Falk", "f@example.org").await?;
     |                       ---------------     ^^^^^^ expected `Option<&str>`, found `&str`
     |                       |
     |                       arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2315 |         let test_id = Contact::create(&t, Some("Falk"), "f@example.org").await?;
     |                                           +++++      +

error[E0308]: mismatched types
    --> src/contact.rs:2389:47
     |
2389 |         let contact_id1 = Contact::create(&t, "Foo", "foo@bar.de").await?;
     |                           ---------------     ^^^^^ expected `Option<&str>`, found `&str`
     |                           |
     |                           arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2389 |         let contact_id1 = Contact::create(&t, Some("Foo"), "foo@bar.de").await?;
     |                                               +++++     +

error[E0308]: mismatched types
    --> src/contact.rs:2394:47
     |
2394 |         let contact_id2 = Contact::create(&t, "Foo", "foo@bar.de").await?;
     |                           ---------------     ^^^^^ expected `Option<&str>`, found `&str`
     |                           |
     |                           arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2394 |         let contact_id2 = Contact::create(&t, Some("Foo"), "foo@bar.de").await?;
     |                                               +++++     +

error[E0308]: mismatched types
    --> src/contact.rs:2405:47
     |
2405 |         let contact_id3 = Contact::create(&t, "Foo", "foo@bar.de").await?;
     |                           ---------------     ^^^^^ expected `Option<&str>`, found `&str`
     |                           |
     |                           arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2405 |         let contact_id3 = Contact::create(&t, Some("Foo"), "foo@bar.de").await?;
     |                                               +++++     +

error[E0308]: mismatched types
    --> src/contact.rs:2451:46
     |
2451 |         let contact_id = Contact::create(&t, "bob3", "bob@example.org")
     |                          ---------------     ^^^^^^ expected `Option<&str>`, found `&str`
     |                          |
     |                          arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2451 |         let contact_id = Contact::create(&t, Some("bob3"), "bob@example.org")
     |                                              +++++      +

error[E0308]: mismatched types
    --> src/contact.rs:2482:46
     |
2482 |         let contact_id = Contact::create(&t, "", "claire@example.org").await.unwrap();
     |                          ---------------     ^^ expected `Option<&str>`, found `&str`
     |                          |
     |                          arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2482 |         let contact_id = Contact::create(&t, Some(""), "claire@example.org").await.unwrap();
     |                                              +++++  +

error[E0308]: mismatched types
    --> src/contact.rs:2576:46
     |
2576 |         let contact_id = Contact::create(&t, "dave1", "dave@example.org")
     |                          ---------------     ^^^^^^^ expected `Option<&str>`, found `&str`
     |                          |
     |                          arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2576 |         let contact_id = Contact::create(&t, Some("dave1"), "dave@example.org")
     |                                              +++++       +

error[E0308]: mismatched types
    --> src/contact.rs:2599:29
     |
2599 |         Contact::create(&t, "", "dave@example.org").await.unwrap();
     |         ---------------     ^^ expected `Option<&str>`, found `&str`
     |         |
     |         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2599 |         Contact::create(&t, Some(""), "dave@example.org").await.unwrap();
     |                             +++++  +

error[E0308]: mismatched types
    --> src/contact.rs:2617:46
     |
2617 |         let contact_id = Contact::create(&t, "", "<dave@example.org>").await.unwrap();
     |                          ---------------     ^^ expected `Option<&str>`, found `&str`
     |                          |
     |                          arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2617 |         let contact_id = Contact::create(&t, Some(""), "<dave@example.org>").await.unwrap();
     |                                              +++++  +

error[E0308]: mismatched types
    --> src/contact.rs:2622:46
     |
2622 |         let contact_id = Contact::create(&t, "", "Mueller, Dave <dave@example.org>")
     |                          ---------------     ^^ expected `Option<&str>`, found `&str`
     |                          |
     |                          arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2622 |         let contact_id = Contact::create(&t, Some(""), "Mueller, Dave <dave@example.org>")
     |                                              +++++  +

error[E0308]: mismatched types
    --> src/contact.rs:2629:46
     |
2629 |         let contact_id = Contact::create(&t, "name1", "name2 <dave@example.org>")
     |                          ---------------     ^^^^^^^ expected `Option<&str>`, found `&str`
     |                          |
     |                          arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2629 |         let contact_id = Contact::create(&t, Some("name1"), "name2 <dave@example.org>")
     |                                              +++++       +

error[E0308]: mismatched types
    --> src/contact.rs:2636:37
     |
2636 |         assert!(Contact::create(&t, "", "<dskjfdslk@sadklj.dk")
     |                 ---------------     ^^ expected `Option<&str>`, found `&str`
     |                 |
     |                 arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2636 |         assert!(Contact::create(&t, Some(""), "<dskjfdslk@sadklj.dk")
     |                                     +++++  +

error[E0308]: mismatched types
    --> src/contact.rs:2639:37
     |
2639 |         assert!(Contact::create(&t, "", "<dskjf>dslk@sadklj.dk>")
     |                 ---------------     ^^ expected `Option<&str>`, found `&str`
     |                 |
     |                 arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2639 |         assert!(Contact::create(&t, Some(""), "<dskjf>dslk@sadklj.dk>")
     |                                     +++++  +

error[E0308]: mismatched types
    --> src/contact.rs:2642:37
     |
2642 |         assert!(Contact::create(&t, "", "dskjfdslksadklj.dk").await.is_err());
     |                 ---------------     ^^ expected `Option<&str>`, found `&str`
     |                 |
     |                 arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2642 |         assert!(Contact::create(&t, Some(""), "dskjfdslksadklj.dk").await.is_err());
     |                                     +++++  +

error[E0308]: mismatched types
    --> src/contact.rs:2643:37
     |
2643 |         assert!(Contact::create(&t, "", "dskjfdslk@sadklj.dk>")
     |                 ---------------     ^^ expected `Option<&str>`, found `&str`
     |                 |
     |                 arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2643 |         assert!(Contact::create(&t, Some(""), "dskjfdslk@sadklj.dk>")
     |                                     +++++  +

error[E0308]: mismatched types
    --> src/contact.rs:2646:37
     |
2646 |         assert!(Contact::create(&t, "", "dskjf dslk@d.e").await.is_err());
     |                 ---------------     ^^ expected `Option<&str>`, found `&str`
     |                 |
     |                 arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2646 |         assert!(Contact::create(&t, Some(""), "dskjf dslk@d.e").await.is_err());
     |                                     +++++  +

error[E0308]: mismatched types
    --> src/contact.rs:2647:37
     |
2647 |         assert!(Contact::create(&t, "", "<dskjf dslk@sadklj.dk")
     |                 ---------------     ^^ expected `Option<&str>`, found `&str`
     |                 |
     |                 arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2647 |         assert!(Contact::create(&t, Some(""), "<dskjf dslk@sadklj.dk")
     |                                     +++++  +

error[E0308]: mismatched types
    --> src/contact.rs:2661:48
     |
2661 |         let other_id = Contact::create(&t.ctx, "The Other", "the.other@example.net")
     |                        ---------------         ^^^^^^^^^^^ expected `Option<&str>`, found `&str`
     |                        |
     |                        arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2661 |         let other_id = Contact::create(&t.ctx, Some("The Other"), "the.other@example.net")
     |                                                +++++           +

error[E0308]: mismatched types
    --> src/contact.rs:2680:46
     |
2680 |         let contact_id = Contact::create(&t, "name", "name@example.net").await?;
     |                          ---------------     ^^^^^^ expected `Option<&str>`, found `&str`
     |                          |
     |                          arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2680 |         let contact_id = Contact::create(&t, Some("name"), "name@example.net").await?;
     |                                              +++++      +

error[E0308]: mismatched types
    --> src/contact.rs:2685:46
     |
2685 |         let contact_id = Contact::create(&t, "prename name", "name@example.net").await?;
     |                          ---------------     ^^^^^^^^^^^^^^ expected `Option<&str>`, found `&str`
     |                          |
     |                          arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2685 |         let contact_id = Contact::create(&t, Some("prename name"), "name@example.net").await?;
     |                                              +++++              +

error[E0308]: mismatched types
    --> src/contact.rs:2690:46
     |
2690 |         let contact_id = Contact::create(&t, "Name", "nAme@exAmple.NET").await?;
     |                          ---------------     ^^^^^^ expected `Option<&str>`, found `&str`
     |                          |
     |                          arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2690 |         let contact_id = Contact::create(&t, Some("Name"), "nAme@exAmple.NET").await?;
     |                                              +++++      +

error[E0308]: mismatched types
    --> src/contact.rs:2979:50
     |
2979 |         let contact_id = Contact::create(&alice, "Bob", "bob@example.net").await?;
     |                          ---------------         ^^^^^ expected `Option<&str>`, found `&str`
     |                          |
     |                          arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2979 |         let contact_id = Contact::create(&alice, Some("Bob"), "bob@example.net").await?;
     |                                                  +++++     +

error[E0308]: mismatched types
    --> src/contact.rs:3002:33
     |
3002 |         Contact::create(alice0, "Bob", "bob@example.net").await?;
     |         ---------------         ^^^^^ expected `Option<&str>`, found `&str`
     |         |
     |         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3002 |         Contact::create(alice0, Some("Bob"), "bob@example.net").await?;
     |                                 +++++     +

error[E0308]: mismatched types
    --> src/contact.rs:3011:33
     |
3011 |         Contact::create(alice0, "Bob Renamed", "bob@example.net").await?;
     |         ---------------         ^^^^^^^^^^^^^ expected `Option<&str>`, found `&str`
     |         |
     |         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3011 |         Contact::create(alice0, Some("Bob Renamed"), "bob@example.net").await?;
     |                                 +++++             +

error[E0308]: mismatched types
    --> src/contact.rs:3038:45
     |
3038 |         let bob_id = Contact::create(alice, "Some Bob", &bob_addr).await?;
     |                      ---------------        ^^^^^^^^^^ expected `Option<&str>`, found `&str`
     |                      |
     |                      arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3038 |         let bob_id = Contact::create(alice, Some("Some Bob"), &bob_addr).await?;
     |                                             +++++          +

error[E0308]: mismatched types
    --> src/contact.rs:3045:47
     |
3045 |         let fiona_id = Contact::create(alice, "Fiona", "fiona@example.net").await?;
     |                        ---------------        ^^^^^^^ expected `Option<&str>`, found `&str`
     |                        |
     |                        arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3045 |         let fiona_id = Contact::create(alice, Some("Fiona"), "fiona@example.net").await?;
     |                                               +++++       +

error[E0308]: mismatched types
    --> src/message.rs:2256:36
     |
2256 |             Contact::create(alice, "Flubby", "flubby@example.org").await?;
     |             ---------------        ^^^^^^^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2256 |             Contact::create(alice, Some("Flubby"), "flubby@example.org").await?;
     |                                    +++++        +

error[E0308]: mismatched types
    --> src/mimefactory.rs:1954:39
     |
1954 |         let bob = Contact::create(&t, "", "bob@example.org").await?;
     |                   ---------------     ^^ expected `Option<&str>`, found `&str`
     |                   |
     |                   arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
1954 |         let bob = Contact::create(&t, Some(""), "bob@example.org").await?;
     |                                       +++++  +

error[E0308]: mismatched types
    --> src/mimefactory.rs:2407:46
     |
2407 |         let bob_id = Contact::create(&alice, "Bob", "bob@example.net").await?;
     |                      ---------------         ^^^^^ expected `Option<&str>`, found `&str`
     |                      |
     |                      arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2407 |         let bob_id = Contact::create(&alice, Some("Bob"), "bob@example.net").await?;
     |                                              +++++     +

error[E0308]: mismatched types
    --> src/mimefactory.rs:2408:49
     |
2408 |         let claire_id = Contact::create(&alice, "Claire", "claire@foo.de").await?;
     |                         ---------------         ^^^^^^^^ expected `Option<&str>`, found `&str`
     |                         |
     |                         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2408 |         let claire_id = Contact::create(&alice, Some("Claire"), "claire@foo.de").await?;
     |                                                 +++++        +

error[E0308]: mismatched types
    --> src/qr.rs:1112:54
     |
1112 |         let alice_contact_id = Contact::create(&ctx, "Alice", "alice@example.org")
     |                                ---------------       ^^^^^^^ expected `Option<&str>`, found `&str`
     |                                |
     |                                arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
1112 |         let alice_contact_id = Contact::create(&ctx, Some("Alice"), "alice@example.org")
     |                                                      +++++       +

error[E0308]: mismatched types
    --> src/securejoin.rs:1404:60
     |
1404 |         let alice_bob_contact_id = Contact::create(&alice, "Bob", "bob@example.net").await?;
     |                                    ---------------         ^^^^^ expected `Option<&str>`, found `&str`
     |                                    |
     |                                    arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
1404 |         let alice_bob_contact_id = Contact::create(&alice, Some("Bob"), "bob@example.net").await?;
     |                                                            +++++     +

error[E0308]: mismatched types
    --> src/stock_str.rs:1524:50
     |
1524 |         let contact_id = Contact::create(&t.ctx, "Someone", "someone@example.org")
     |                          ---------------         ^^^^^^^^^ expected `Option<&str>`, found `&str`
     |                          |
     |                          arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
1524 |         let contact_id = Contact::create(&t.ctx, Some("Someone"), "someone@example.org")
     |                                                  +++++         +

error[E0308]: mismatched types
    --> src/stock_str.rs:1561:29
     |
1561 |         Contact::create(&t, "Alice", "alice@example.org")
     |         ---------------     ^^^^^^^ expected `Option<&str>`, found `&str`
     |         |
     |         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
1561 |         Contact::create(&t, Some("Alice"), "alice@example.org")
     |                             +++++       +

error[E0308]: mismatched types
    --> src/stock_str.rs:1578:33
     |
1578 |             Contact::create(&t, "Alice", "alice@example.org")
     |             ---------------     ^^^^^^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
1578 |             Contact::create(&t, Some("Alice"), "alice@example.org")
     |                                 +++++       +

error[E0308]: mismatched types
    --> src/stock_str.rs:1581:33
     |
1581 |             Contact::create(&t, "Bob", "bob@example.com")
     |             ---------------     ^^^^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
1581 |             Contact::create(&t, Some("Bob"), "bob@example.com")
     |                                 +++++     +

error[E0308]: mismatched types
   --> src/webxdc/maps_integration.rs:194:42
    |
194 |         let bob_id = Contact::create(&t, "", "bob@example.net").await?;
    |                      ---------------     ^^ expected `Option<&str>`, found `&str`
    |                      |
    |                      arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
194 |         let bob_id = Contact::create(&t, Some(""), "bob@example.net").await?;
    |                                          +++++  +

error[E0308]: mismatched types
    --> src/webxdc.rs:1086:37
     |
1086 |             Contact::create(&alice, "", "bob@example.net").await?,
     |             ---------------         ^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
1086 |             Contact::create(&alice, Some(""), "bob@example.net").await?,
     |                                     +++++  +

error[E0308]: mismatched types
    --> src/webxdc.rs:2409:35
     |
2409 |             Contact::create(&bob, "", "alice@example.org").await?,
     |             ---------------       ^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2409 |             Contact::create(&bob, Some(""), "alice@example.org").await?,
     |                                   +++++  +

error[E0308]: mismatched types
    --> src/webxdc.rs:2438:35
     |
2438 |             Contact::create(&bob, "", "claire@example.org").await?,
     |             ---------------       ^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2438 |             Contact::create(&bob, Some(""), "claire@example.org").await?,
     |                                   +++++  +

error[E0308]: mismatched types
    --> src/webxdc.rs:2571:51
     |
2571 |         let contact_bob = Contact::create(&alice, "Bob", "bob@example.net").await?;
     |                           ---------------         ^^^^^ expected `Option<&str>`, found `&str`
     |                           |
     |                           arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
2571 |         let contact_bob = Contact::create(&alice, Some("Bob"), "bob@example.net").await?;
     |                                                   +++++     +

error[E0308]: mismatched types
   --> src/receive_imf/tests.rs:141:25
    |
141 |     Contact::create(&t, "Bob", "bob@example.com").await.unwrap();
    |     ---------------     ^^^^^ expected `Option<&str>`, found `&str`
    |     |
    |     arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
141 |     Contact::create(&t, Some("Bob"), "bob@example.com").await.unwrap();
    |                         +++++     +

error[E0308]: mismatched types
   --> src/receive_imf/tests.rs:210:38
    |
210 |     let bob_id = Contact::create(&t, "bob", "bob@example.com").await?;
    |                  ---------------     ^^^^^ expected `Option<&str>`, found `&str`
    |                  |
    |                  arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
210 |     let bob_id = Contact::create(&t, Some("bob"), "bob@example.com").await?;
    |                                      +++++     +

error[E0308]: mismatched types
   --> src/receive_imf/tests.rs:455:42
    |
455 |     let contact_id = Contact::create(&t, "foobar", "foobar@example.com")
    |                      ---------------     ^^^^^^^^ expected `Option<&str>`, found `&str`
    |                      |
    |                      arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
455 |     let contact_id = Contact::create(&t, Some("foobar"), "foobar@example.com")
    |                                          +++++        +

error[E0308]: mismatched types
   --> src/receive_imf/tests.rs:488:25
    |
488 |     Contact::create(&t, "foobar", "foobar@example.com")
    |     ---------------     ^^^^^^^^ expected `Option<&str>`, found `&str`
    |     |
    |     arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
488 |     Contact::create(&t, Some("foobar"), "foobar@example.com")
    |                         +++++        +

error[E0308]: mismatched types
   --> src/receive_imf/tests.rs:534:25
    |
534 |     Contact::create(&t, "foobar", "foobar@example.com")
    |     ---------------     ^^^^^^^^ expected `Option<&str>`, found `&str`
    |     |
    |     arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
534 |     Contact::create(&t, Some("foobar"), "foobar@example.com")
    |                         +++++        +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3134:35
     |
3134 |             Contact::create(&bob, "", "charlie@example.org").await?,
     |             ---------------       ^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3134 |             Contact::create(&bob, Some(""), "charlie@example.org").await?,
     |                                   +++++  +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3223:47
     |
3223 |     let alice_bob_id = Contact::create(alice, "", &bob_addr).await?;
     |                        ---------------        ^^ expected `Option<&str>`, found `&str`
     |                        |
     |                        arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3223 |     let alice_bob_id = Contact::create(alice, Some(""), &bob_addr).await?;
     |                                               +++++  +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3564:29
     |
3564 |         Contact::create(&t, "", "bob@example.com").await?,
     |         ---------------     ^^ expected `Option<&str>`, found `&str`
     |         |
     |         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3564 |         Contact::create(&t, Some(""), "bob@example.com").await?,
     |                             +++++  +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3565:29
     |
3565 |         Contact::create(&t, "", "fiona@example.net").await?,
     |         ---------------     ^^ expected `Option<&str>`, found `&str`
     |         |
     |         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3565 |         Contact::create(&t, Some(""), "fiona@example.net").await?,
     |                             +++++  +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3673:41
     |
3673 |     let bob_id = Contact::create(alice, "Bob", &bob_addr).await?;
     |                  ---------------        ^^^^^ expected `Option<&str>`, found `&str`
     |                  |
     |                  arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3673 |     let bob_id = Contact::create(alice, Some("Bob"), &bob_addr).await?;
     |                                         +++++     +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3697:42
     |
3697 |     let bob_id = Contact::create(&alice, "", "bob@example.net").await?;
     |                  ---------------         ^^ expected `Option<&str>`, found `&str`
     |                  |
     |                  arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3697 |     let bob_id = Contact::create(&alice, Some(""), "bob@example.net").await?;
     |                                          +++++  +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3698:45
     |
3698 |     let claire_id = Contact::create(&alice, "", "claire@example.de").await?;
     |                     ---------------         ^^ expected `Option<&str>`, found `&str`
     |                     |
     |                     arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3698 |     let claire_id = Contact::create(&alice, Some(""), "claire@example.de").await?;
     |                                             +++++  +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3739:32
     |
3739 |         Contact::create(alice, "", &bob.get_config(Config::Addr).await?.unwrap()).await?;
     |         ---------------        ^^ expected `Option<&str>`, found `&str`
     |         |
     |         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3739 |         Contact::create(alice, Some(""), &bob.get_config(Config::Addr).await?.unwrap()).await?;
     |                                +++++  +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3786:33
     |
3786 |         Contact::create(&alice, "bob", "bob@example.net").await?,
     |         ---------------         ^^^^^ expected `Option<&str>`, found `&str`
     |         |
     |         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3786 |         Contact::create(&alice, Some("bob"), "bob@example.net").await?,
     |                                 +++++     +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3798:33
     |
3798 |         Contact::create(&alice, "fiona", "fiona@example.net").await?,
     |         ---------------         ^^^^^^^ expected `Option<&str>`, found `&str`
     |         |
     |         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3798 |         Contact::create(&alice, Some("fiona"), "fiona@example.net").await?,
     |                                 +++++       +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3803:42
     |
3803 |     let bob_blue = Contact::create(&bob, "blue", "blue@example.net").await?;
     |                    ---------------       ^^^^^^ expected `Option<&str>`, found `&str`
     |                    |
     |                    arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3803 |     let bob_blue = Contact::create(&bob, Some("blue"), "blue@example.net").await?;
     |                                          +++++      +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3836:47
     |
3836 |     let alice_fiona = Contact::create(&alice, "fiona", "fiona@example.net").await?;
     |                       ---------------         ^^^^^^^ expected `Option<&str>`, found `&str`
     |                       |
     |                       arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3836 |     let alice_fiona = Contact::create(&alice, Some("fiona"), "fiona@example.net").await?;
     |                                               +++++       +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3842:37
     |
3842 |             Contact::create(&alice, "bob", "bob@example.net").await?,
     |             ---------------         ^^^^^ expected `Option<&str>`, found `&str`
     |             |
     |             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3842 |             Contact::create(&alice, Some("bob"), "bob@example.net").await?,
     |                                     +++++     +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3853:51
     |
3853 |     let bob_contact_fiona = Contact::create(&bob, "fiona", "fiona@example.net").await?;
     |                             ---------------       ^^^^^^^ expected `Option<&str>`, found `&str`
     |                             |
     |                             arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3853 |     let bob_contact_fiona = Contact::create(&bob, Some("fiona"), "fiona@example.net").await?;
     |                                                   +++++       +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3858:42
     |
3858 |     let bob_blue = Contact::create(&bob, "blue", "blue@example.net").await?;
     |                    ---------------       ^^^^^^ expected `Option<&str>`, found `&str`
     |                    |
     |                    arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3858 |     let bob_blue = Contact::create(&bob, Some("blue"), "blue@example.net").await?;
     |                                          +++++      +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3890:33
     |
3890 |         Contact::create(&alice, "bob", "bob@example.net").await?,
     |         ---------------         ^^^^^ expected `Option<&str>`, found `&str`
     |         |
     |         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3890 |         Contact::create(&alice, Some("bob"), "bob@example.net").await?,
     |                                 +++++     +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3905:33
     |
3905 |         Contact::create(&alice, "fiora", "fiora@example.net").await?,
     |         ---------------         ^^^^^^^ expected `Option<&str>`, found `&str`
     |         |
     |         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
3905 |         Contact::create(&alice, Some("fiora"), "fiora@example.net").await?,
     |                                 +++++       +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4090:33
     |
4090 |         Contact::create(&alice, "bob", &bob.get_config(Config::Addr).await?.unwrap()).await?,
     |         ---------------         ^^^^^ expected `Option<&str>`, found `&str`
     |         |
     |         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
4090 |         Contact::create(&alice, Some("bob"), &bob.get_config(Config::Addr).await?.unwrap()).await?,
     |                                 +++++     +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4117:33
     |
4117 |         Contact::create(&alice, "bob", &bob.get_config(Config::Addr).await?.unwrap()).await?,
     |         ---------------         ^^^^^ expected `Option<&str>`, found `&str`
     |         |
     |         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
4117 |         Contact::create(&alice, Some("bob"), &bob.get_config(Config::Addr).await?.unwrap()).await?,
     |                                 +++++     +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4151:33
     |
4151 |         Contact::create(&alice, "bob", &bob.get_config(Config::Addr).await?.unwrap()).await?,
     |         ---------------         ^^^^^ expected `Option<&str>`, found `&str`
     |         |
     |         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
4151 |         Contact::create(&alice, Some("bob"), &bob.get_config(Config::Addr).await?.unwrap()).await?,
     |                                 +++++     +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4163:13
     |
4161 |         Contact::create(
     |         --------------- arguments to this function are incorrect
4162 |             &alice,
4163 |             "fiona",
     |             ^^^^^^^ expected `Option<&str>`, found `&str`
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
4163 |             Some("fiona"),
     |             +++++       +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4180:9
     |
4178 |     let bob_alice_contact = Contact::create(
     |                             --------------- arguments to this function are incorrect
4179 |         &bob,
4180 |         "alice",
     |         ^^^^^^^ expected `Option<&str>`, found `&str`
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
4180 |         Some("alice"),
     |         +++++       +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4253:9
     |
4251 |     let ba_contact = Contact::create(
     |                      --------------- arguments to this function are incorrect
4252 |         &bob,
4253 |         "alice",
     |         ^^^^^^^ expected `Option<&str>`, found `&str`
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
4253 |         Some("alice"),
     |         +++++       +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4334:42
     |
4334 |     let bob_id = Contact::create(&alice, "", "bob@example.net").await?;
     |                  ---------------         ^^ expected `Option<&str>`, found `&str`
     |                  |
     |                  arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
4334 |     let bob_id = Contact::create(&alice, Some(""), "bob@example.net").await?;
     |                                          +++++  +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4388:33
     |
4388 |         Contact::create(&alice, "fiona", "fiona@example.net").await?,
     |         ---------------         ^^^^^^^ expected `Option<&str>`, found `&str`
     |         |
     |         arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
4388 |         Contact::create(&alice, Some("fiona"), "fiona@example.net").await?,
     |                                 +++++       +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:4493:55
     |
4493 |     let alice_bob_contact_id = Contact::create(alice, "Bob", "bob@example.net").await?;
     |                                ---------------        ^^^^^ expected `Option<&str>`, found `&str`
     |                                |
     |                                arguments to this function are incorrect
     |
     = note:   expected enum `std::option::Option<&str>`
             found reference `&'static str`
note: associated function defined here
    --> src/contact.rs:628:14
     |
628  | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
     |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
     |
4493 |     let alice_bob_contact_id = Contact::create(alice, Some("Bob"), "bob@example.net").await?;
     |                                                       +++++     +

error[E0308]: mismatched types
   --> src/reaction.rs:728:46
    |
728 |         let bob_id = Contact::create(&alice, "", "bob@example.net").await?;
    |                      ---------------         ^^ expected `Option<&str>`, found `&str`
    |                      |
    |                      arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
728 |         let bob_id = Contact::create(&alice, Some(""), "bob@example.net").await?;
    |                                              +++++  +

error[E0308]: mismatched types
   --> src/reaction.rs:877:47
    |
877 |         let bob_id = Contact::create(&alice0, "", "bob@example.net").await?;
    |                      ---------------          ^^ expected `Option<&str>`, found `&str`
    |                      |
    |                      arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
877 |         let bob_id = Contact::create(&alice0, Some(""), "bob@example.net").await?;
    |                                               +++++  +

error[E0308]: mismatched types
   --> src/tests/aeap.rs:372:51
    |
372 |     let bob_alice_contact = Contact::create(&bob, "Alice", "alice@example.org").await?;
    |                             ---------------       ^^^^^^^ expected `Option<&str>`, found `&str`
    |                             |
    |                             arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
372 |     let bob_alice_contact = Contact::create(&bob, Some("Alice"), "alice@example.org").await?;
    |                                                   +++++       +

error[E0308]: mismatched types
   --> src/tests/aeap.rs:394:51
    |
394 |     let bob_fiona_contact = Contact::create(&bob, "", "fiona@example.net").await?;
    |                             ---------------       ^^ expected `Option<&str>`, found `&str`
    |                             |
    |                             arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
394 |     let bob_fiona_contact = Contact::create(&bob, Some(""), "fiona@example.net").await?;
    |                                                   +++++  +

error[E0308]: mismatched types
   --> src/tests/verified_chats.rs:828:57
    |
828 |     let alice_fiona_contact_id = Contact::create(alice, "Fiona", "fiona@example.net").await?;
    |                                  ---------------        ^^^^^^^ expected `Option<&str>`, found `&str`
    |                                  |
    |                                  arguments to this function are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&'static str`
note: associated function defined here
   --> src/contact.rs:628:14
    |
628 | pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    |              ^^^^^^                    ------------------
help: try wrapping the expression in `Some`
    |
828 |     let alice_fiona_contact_id = Contact::create(alice, Some("Fiona"), "fiona@example.net").await?;
    |                                                         +++++       +

warning: `deltachat` (lib test) generated 1 warning (1 duplicate)
error: could not compile `deltachat` (lib test) due to 139 previous errors; 1 warning emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


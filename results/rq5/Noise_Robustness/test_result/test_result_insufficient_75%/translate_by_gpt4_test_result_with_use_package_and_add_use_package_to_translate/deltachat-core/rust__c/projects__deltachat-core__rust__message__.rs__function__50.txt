Fail
file path is :
projects/deltachat-core/rust/src/message.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
warning: unused import: `Chattype`
  --> src/message.rs:17:14
   |
17 |     Blocked, Chattype, VideochatType, DC_CHAT_ID_TRASH, DC_DESIRED_TEXT_LEN, DC_MSG_ID_LAST_SPECIAL,
   |              ^^^^^^^^
   |
note: the lint level is defined here
  --> src/lib.rs:6:5
   |
6  |     unused,
   |     ^^^^^^
   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

error[E0061]: this function takes 4 arguments but 0 arguments were supplied
   --> src/message.rs:841:19
    |
841 |     let summary = Summary::new();
    |                   ^^^^^^^^^^^^-- multiple arguments are missing
    |
note: associated function defined here
   --> src/summary.rs:90:18
    |
90  |     pub async fn new(
    |                  ^^^
91  |         context: &Context,
    |         -----------------
92  |         msg: &Message,
    |         -------------
93  |         chat: &Chat,
    |         -----------
94  |         contact: Option<&Contact>,
    |         -------------------------
help: provide the arguments
    |
841 |     let summary = Summary::new(/* &context::Context */, /* &message::Message */, /* &Chat */, /* std::option::Option<&Contact> */);
    |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `is_none` found for reference `&message::Message` in the current scope
   --> src/message.rs:846:13
    |
846 |     if self.is_none() {
    |             ^^^^^^^ method not found in `&Message`
    |
help: some of the expressions' fields have a method of the same name
    |
846 |     if self.error.is_none() {
    |             ++++++
846 |     if self.in_reply_to.is_none() {
    |             ++++++++++++

error[E0599]: no method named `get_chat` found for reference `&context::Context` in the current scope
   --> src/message.rs:851:38
    |
851 |         let chat_to_delete = context.get_chat(self.chat_id);
    |                                      ^^^^^^^^ method not found in `&Context`

error[E0599]: no method named `is_multi` found for enum `std::option::Option` in the current scope
   --> src/message.rs:858:46
    |
858 |     if self.from_id!=ContactId::SELF && chat.is_multi() {  
    |                                              ^^^^^^^^ help: there is a method with a similar name: `as_mut`

error[E0599]: no method named `get_contact` found for reference `&context::Context` in the current scope
   --> src/message.rs:859:27
    |
859 |         contact = context.get_contact(self.from_id);
    |                           ^^^^^^^^^^^ method not found in `&Context`

error[E0599]: no method named `fill` found for opaque type `impl futures::Future<Output = std::result::Result<Summary, anyhow::Error>>` in the current scope
   --> src/message.rs:862:13
    |
862 |     summary.fill(self, chat, contact, context).await?;
    |             ^^^^ method not found in `impl Future<Output = Result<Summary, Error>>`

error[E0308]: mismatched types
   --> src/message.rs:866:15
    |
866 |     return Ok(summary);
    |            -- ^^^^^^^ expected `Summary`, found future
    |            |
    |            arguments to this enum variant are incorrect
    |
help: the type constructed contains `impl futures::Future<Output = std::result::Result<Summary, anyhow::Error>>` due to the type of the argument passed
   --> src/message.rs:866:12
    |
866 |     return Ok(summary);
    |            ^^^-------^
    |               |
    |               this argument influences the type of `Ok`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
    |
506 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

Some errors have detailed explanations: E0061, E0308, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `deltachat` (lib) generated 1 warning
error: could not compile `deltachat` (lib) due to 7 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
error[E0061]: this function takes 4 arguments but 0 arguments were supplied
   --> src/message.rs:841:19
    |
841 |     let summary = Summary::new();
    |                   ^^^^^^^^^^^^-- multiple arguments are missing
    |
note: associated function defined here
   --> src/summary.rs:90:18
    |
90  |     pub async fn new(
    |                  ^^^
91  |         context: &Context,
    |         -----------------
92  |         msg: &Message,
    |         -------------
93  |         chat: &Chat,
    |         -----------
94  |         contact: Option<&Contact>,
    |         -------------------------
help: provide the arguments
    |
841 |     let summary = Summary::new(/* &context::Context */, /* &message::Message */, /* &chat::Chat */, /* std::option::Option<&contact::Contact> */);
    |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `fill` found for opaque type `impl futures::Future<Output = std::result::Result<summary::Summary, anyhow::Error>>` in the current scope
   --> src/message.rs:862:13
    |
862 |     summary.fill(self, chat, contact, context).await?;
    |             ^^^^ method not found in `impl Future<Output = Result<Summary, Error>>`

error[E0308]: mismatched types
   --> src/message.rs:866:15
    |
866 |     return Ok(summary);
    |            -- ^^^^^^^ expected `Summary`, found future
    |            |
    |            arguments to this enum variant are incorrect
    |
help: the type constructed contains `impl futures::Future<Output = std::result::Result<summary::Summary, anyhow::Error>>` due to the type of the argument passed
   --> src/message.rs:866:12
    |
866 |     return Ok(summary);
    |            ^^^-------^
    |               |
    |               this argument influences the type of `Ok`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
    |
506 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

error: could not compile `deltachat` (lib test) due to 7 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


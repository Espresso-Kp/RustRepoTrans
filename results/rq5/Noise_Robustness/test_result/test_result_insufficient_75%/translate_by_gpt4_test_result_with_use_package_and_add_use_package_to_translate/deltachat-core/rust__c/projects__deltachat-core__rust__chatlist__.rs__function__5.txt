Fail
file path is :
projects/deltachat-core/rust/src/chatlist.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/chat.rs:6239:40
     |
6239 |         assert_eq!(chats.get_chat_id(0)?, chat.id);
     |                                        ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/chat.rs:6239:40
     |
6239 |         assert_eq!(chats.get_chat_id(0)?, chat.id);
     |                                        ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/chat.rs:6239:40
     |
6239 |         assert_eq!(chats.get_chat_id(0)?, chat.id);
     |                                        ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/chat.rs:6333:43
     |
6333 |         let chat_id = chats.get_chat_id(0)?;
     |                                           ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/chat.rs:6333:43
     |
6333 |         let chat_id = chats.get_chat_id(0)?;
     |                                           ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/chat.rs:6342:43
     |
6342 |         let chat_id = chats.get_chat_id(0)?;
     |                                           ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/chat.rs:6342:43
     |
6342 |         let chat_id = chats.get_chat_id(0)?;
     |                                           ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/chat.rs:6348:43
     |
6348 |         let chat_id = chats.get_chat_id(0)?;
     |                                           ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/chat.rs:6348:43
     |
6348 |         let chat_id = chats.get_chat_id(0)?;
     |                                           ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/chat.rs:6333:43
     |
6333 |         let chat_id = chats.get_chat_id(0)?;
     |                                           ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/chat.rs:6342:43
     |
6342 |         let chat_id = chats.get_chat_id(0)?;
     |                                           ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/chat.rs:6348:43
     |
6348 |         let chat_id = chats.get_chat_id(0)?;
     |                                           ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
   --> src/chatlist.rs:735:40
    |
735 |         assert_eq!(chats.get_chat_id(0)?, chat_id);
    |                                        ^ `dyn StdError` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
    |
195 | pub struct Box<
    |            ^^^
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
   --> src/chatlist.rs:735:40
    |
735 |         assert_eq!(chats.get_chat_id(0)?, chat_id);
    |                                        ^ `dyn StdError` cannot be shared between threads safely
    |
    = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
    |
195 | pub struct Box<
    |            ^^^
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
   --> src/chatlist.rs:746:40
    |
746 |         assert_eq!(chats.get_chat_id(0)?, chat_id);
    |                                        ^ `dyn StdError` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
    |
195 | pub struct Box<
    |            ^^^
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
   --> src/chatlist.rs:746:40
    |
746 |         assert_eq!(chats.get_chat_id(0)?, chat_id);
    |                                        ^ `dyn StdError` cannot be shared between threads safely
    |
    = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
    |
195 | pub struct Box<
    |            ^^^
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
   --> src/chatlist.rs:735:40
    |
735 |         assert_eq!(chats.get_chat_id(0)?, chat_id);
    |                                        ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Box<dyn StdError>` to implement `StdError`
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
   --> src/chatlist.rs:746:40
    |
746 |         assert_eq!(chats.get_chat_id(0)?, chat_id);
    |                                        ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Box<dyn StdError>` to implement `StdError`
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/message.rs:2395:40
     |
2395 |         assert_eq!(chats.get_chat_id(0)?, alice_chat.id);
     |                                        ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/message.rs:2395:40
     |
2395 |         assert_eq!(chats.get_chat_id(0)?, alice_chat.id);
     |                                        ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/message.rs:2396:40
     |
2396 |         assert_eq!(chats.get_chat_id(0)?, msg1.chat_id);
     |                                        ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/message.rs:2396:40
     |
2396 |         assert_eq!(chats.get_chat_id(0)?, msg1.chat_id);
     |                                        ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/message.rs:2397:40
     |
2397 |         assert_eq!(chats.get_chat_id(0)?, msg2.chat_id);
     |                                        ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/message.rs:2397:40
     |
2397 |         assert_eq!(chats.get_chat_id(0)?, msg2.chat_id);
     |                                        ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/message.rs:2395:40
     |
2395 |         assert_eq!(chats.get_chat_id(0)?, alice_chat.id);
     |                                        ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/message.rs:2396:40
     |
2396 |         assert_eq!(chats.get_chat_id(0)?, msg1.chat_id);
     |                                        ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/message.rs:2397:40
     |
2397 |         assert_eq!(chats.get_chat_id(0)?, msg2.chat_id);
     |                                        ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
   --> src/receive_imf/tests.rs:132:39
    |
132 |     let chat_id = chats.get_chat_id(0)?;
    |                                       ^ `dyn StdError` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
    |
195 | pub struct Box<
    |            ^^^
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
   --> src/receive_imf/tests.rs:132:39
    |
132 |     let chat_id = chats.get_chat_id(0)?;
    |                                       ^ `dyn StdError` cannot be shared between threads safely
    |
    = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
    |
195 | pub struct Box<
    |            ^^^
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
   --> src/receive_imf/tests.rs:132:39
    |
132 |     let chat_id = chats.get_chat_id(0)?;
    |                                       ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Box<dyn StdError>` to implement `StdError`
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

For more information about this error, try `rustc --explain E0277`.
error: could not compile `deltachat` (lib test) due to 30 previous errors
warning: build failed, waiting for other jobs to finish...
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


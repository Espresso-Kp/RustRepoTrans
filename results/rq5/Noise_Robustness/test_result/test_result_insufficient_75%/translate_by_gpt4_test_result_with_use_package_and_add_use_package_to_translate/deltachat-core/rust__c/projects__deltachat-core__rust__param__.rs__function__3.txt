Fail
file path is :
projects/deltachat-core/rust/src/param.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0599]: no method named `set_int` found for enum `std::result::Result` in the current scope
    --> src/chat.rs:2528:24
     |
2528 |                 params.set_int(Param::Selftalk, 1);
     |                        ^^^^^^^ method not found in `Result<Params, Error>`
     |
note: the method `set_int` exists on the type `param::Params`
    --> src/param.rs:419:5
     |
419  |     pub fn set_int(&mut self, key: Param, value: i32) -> &mut Self {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: use the `?` operator to extract the `param::Params` value, propagating a `Result::Err` value to the caller
     |
2528 |                 params?.set_int(Param::Selftalk, 1);
     |                       +

error[E0599]: no method named `set_int` found for enum `std::result::Result` in the current scope
    --> src/chat.rs:2531:24
     |
2531 |                 params.set_int(Param::Devicetalk, 1);
     |                        ^^^^^^^ method not found in `Result<Params, Error>`
     |
note: the method `set_int` exists on the type `param::Params`
    --> src/param.rs:419:5
     |
419  |     pub fn set_int(&mut self, key: Param, value: i32) -> &mut Self {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: use the `?` operator to extract the `param::Params` value, propagating a `Result::Err` value to the caller
     |
2531 |                 params?.set_int(Param::Devicetalk, 1);
     |                       +

error[E0599]: `std::result::Result<param::Params, std::io::Error>` doesn't implement `std::fmt::Display`
    --> src/chat.rs:2552:32
     |
2552 |                         params.to_string(),
     |                                ^^^^^^^^^ `std::result::Result<param::Params, std::io::Error>` cannot be formatted with the default formatter
     |
    ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
     |
502  | pub enum Result<T, E> {
     | --------------------- doesn't satisfy `_: Display` or `_: ToString`
     |
     = note: the following trait bounds were not satisfied:
             `std::result::Result<param::Params, std::io::Error>: std::fmt::Display`
             which is required by `std::result::Result<param::Params, std::io::Error>: ToString`

error[E0599]: no method named `set_cmd` found for enum `std::result::Result` in the current scope
    --> src/chat.rs:1643:16
     |
1643 |         param0.set_cmd(SystemMessage::SecurejoinWait);
     |                ^^^^^^^ method not found in `Result<Params, Error>`
     |
note: the method `set_cmd` exists on the type `param::Params`
    --> src/param.rs:346:5
     |
346  |     pub fn set_cmd(&mut self, value: SystemMessage) {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: use the `?` operator to extract the `param::Params` value, propagating a `Result::Err` value to the caller
     |
1643 |         param0?.set_cmd(SystemMessage::SecurejoinWait);
     |               +

error[E0599]: no method named `set_cmd` found for enum `std::result::Result` in the current scope
    --> src/chat.rs:1644:16
     |
1644 |         param1.set_cmd(SystemMessage::SecurejoinWaitTimeout);
     |                ^^^^^^^ method not found in `Result<Params, Error>`
     |
note: the method `set_cmd` exists on the type `param::Params`
    --> src/param.rs:346:5
     |
346  |     pub fn set_cmd(&mut self, value: SystemMessage) {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: use the `?` operator to extract the `param::Params` value, propagating a `Result::Err` value to the caller
     |
1644 |         param1?.set_cmd(SystemMessage::SecurejoinWaitTimeout);
     |               +

error[E0599]: `std::result::Result<param::Params, std::io::Error>` doesn't implement `std::fmt::Display`
    --> src/chat.rs:1645:40
     |
1645 |         let (param0, param1) = (param0.to_string(), param1.to_string());
     |                                        ^^^^^^^^^ `std::result::Result<param::Params, std::io::Error>` cannot be formatted with the default formatter
     |
    ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
     |
502  | pub enum Result<T, E> {
     | --------------------- doesn't satisfy `_: Display` or `_: ToString`
     |
     = note: the following trait bounds were not satisfied:
             `std::result::Result<param::Params, std::io::Error>: std::fmt::Display`
             which is required by `std::result::Result<param::Params, std::io::Error>: ToString`

error[E0599]: `std::result::Result<param::Params, std::io::Error>` doesn't implement `std::fmt::Display`
    --> src/chat.rs:1645:60
     |
1645 |         let (param0, param1) = (param0.to_string(), param1.to_string());
     |                                                            ^^^^^^^^^ `std::result::Result<param::Params, std::io::Error>` cannot be formatted with the default formatter
     |
    ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
     |
502  | pub enum Result<T, E> {
     | --------------------- doesn't satisfy `_: Display` or `_: ToString`
     |
     = note: the following trait bounds were not satisfied:
             `std::result::Result<param::Params, std::io::Error>: std::fmt::Display`
             which is required by `std::result::Result<param::Params, std::io::Error>: ToString`

error[E0599]: no method named `set_cmd` found for enum `std::result::Result` in the current scope
    --> src/chat.rs:4460:15
     |
4460 |         param.set_cmd(cmd)
     |               ^^^^^^^ method not found in `Result<Params, Error>`
     |
note: the method `set_cmd` exists on the type `param::Params`
    --> src/param.rs:346:5
     |
346  |     pub fn set_cmd(&mut self, value: SystemMessage) {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: use the `?` operator to extract the `param::Params` value, propagating a `Result::Err` value to the caller
     |
4460 |         param?.set_cmd(cmd)
     |              +

error[E0599]: `std::result::Result<param::Params, std::io::Error>` doesn't implement `std::fmt::Display`
    --> src/chat.rs:4479:19
     |
4479 |             param.to_string(),
     |                   ^^^^^^^^^ `std::result::Result<param::Params, std::io::Error>` cannot be formatted with the default formatter
     |
    ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
     |
502  | pub enum Result<T, E> {
     | --------------------- doesn't satisfy `_: Display` or `_: ToString`
     |
     = note: the following trait bounds were not satisfied:
             `std::result::Result<param::Params, std::io::Error>: std::fmt::Display`
             which is required by `std::result::Result<param::Params, std::io::Error>: ToString`

error[E0599]: no method named `set` found for enum `std::result::Result` in the current scope
    --> src/receive_imf.rs:2300:15
     |
2300 |             p.set(Param::ListPost, list_post);
     |               ^^^ method not found in `Result<Params, Error>`
     |
note: the method `set` exists on the type `param::Params`
    --> src/param.rs:292:5
     |
292  |     pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
     |
2300 |             p.expect("REASON").set(Param::ListPost, list_post);
     |              +++++++++++++++++

error[E0599]: `std::result::Result<param::Params, std::io::Error>` doesn't implement `std::fmt::Display`
    --> src/receive_imf.rs:2301:15
     |
2301 |             p.to_string()
     |               ^^^^^^^^^ `std::result::Result<param::Params, std::io::Error>` cannot be formatted with the default formatter
     |
    ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
     |
502  | pub enum Result<T, E> {
     | --------------------- doesn't satisfy `_: Display` or `_: ToString`
     |
     = note: the following trait bounds were not satisfied:
             `std::result::Result<param::Params, std::io::Error>: std::fmt::Display`
             which is required by `std::result::Result<param::Params, std::io::Error>: ToString`

For more information about this error, try `rustc --explain E0599`.
error: could not compile `deltachat` (lib) due to 11 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0599]: no method named `set` found for enum `std::result::Result` in the current scope
   --> src/param.rs:488:12
    |
488 |         p1.set(Param::Forwarded, "foo")
    |            ^^^ method not found in `Result<Params, Error>`
    |
note: the method `set` exists on the type `param::Params`
   --> src/param.rs:292:5
    |
292 |     pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
488 |         p1.expect("REASON").set(Param::Forwarded, "foo")
    |           +++++++++++++++++

error[E0599]: `std::result::Result<param::Params, std::io::Error>` doesn't implement `std::fmt::Display`
   --> src/param.rs:493:23
    |
493 |         assert_eq!(p1.to_string(), "a=foo\nd=4\nf=2");
    |                       ^^^^^^^^^ `std::result::Result<param::Params, std::io::Error>` cannot be formatted with the default formatter
    |
   ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
    |
502 | pub enum Result<T, E> {
    | --------------------- doesn't satisfy `_: Display` or `_: ToString`
    |
    = note: the following trait bounds were not satisfied:
            `std::result::Result<param::Params, std::io::Error>: std::fmt::Display`
            which is required by `std::result::Result<param::Params, std::io::Error>: ToString`

error[E0599]: no method named `remove` found for enum `std::result::Result` in the current scope
   --> src/param.rs:495:12
    |
495 |         p1.remove(Param::File);
    |            ^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `remove` exists on the type `param::Params`
   --> src/param.rs:298:5
    |
298 |     pub fn remove(&mut self, key: Param) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
495 |         p1.expect("REASON").remove(Param::File);
    |           +++++++++++++++++

error[E0599]: `std::result::Result<param::Params, std::io::Error>` doesn't implement `std::fmt::Display`
   --> src/param.rs:497:23
    |
497 |         assert_eq!(p1.to_string(), "a=foo\nd=4",);
    |                       ^^^^^^^^^ `std::result::Result<param::Params, std::io::Error>` cannot be formatted with the default formatter
    |
   ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
    |
502 | pub enum Result<T, E> {
    | --------------------- doesn't satisfy `_: Display` or `_: ToString`
    |
    = note: the following trait bounds were not satisfied:
            `std::result::Result<param::Params, std::io::Error>: std::fmt::Display`
            which is required by `std::result::Result<param::Params, std::io::Error>: ToString`

error[E0599]: no method named `len` found for enum `std::result::Result` in the current scope
   --> src/param.rs:498:23
    |
498 |         assert_eq!(p1.len(), 2);
    |                       ^^^ method not found in `Result<Params, Error>`
    |
note: the method `len` exists on the type `param::Params`
   --> src/param.rs:319:5
    |
319 |     pub fn len(&self) -> usize {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
498 |         assert_eq!(p1.expect("REASON").len(), 2);
    |                      +++++++++++++++++

error[E0599]: no method named `remove` found for enum `std::result::Result` in the current scope
   --> src/param.rs:500:12
    |
500 |         p1.remove(Param::Forwarded);
    |            ^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `remove` exists on the type `param::Params`
   --> src/param.rs:298:5
    |
298 |     pub fn remove(&mut self, key: Param) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
500 |         p1.expect("REASON").remove(Param::Forwarded);
    |           +++++++++++++++++

error[E0599]: no method named `remove` found for enum `std::result::Result` in the current scope
   --> src/param.rs:501:12
    |
501 |         p1.remove(Param::Duration);
    |            ^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `remove` exists on the type `param::Params`
   --> src/param.rs:298:5
    |
298 |     pub fn remove(&mut self, key: Param) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
501 |         p1.expect("REASON").remove(Param::Duration);
    |           +++++++++++++++++

error[E0599]: `std::result::Result<param::Params, std::io::Error>` doesn't implement `std::fmt::Display`
   --> src/param.rs:503:23
    |
503 |         assert_eq!(p1.to_string(), "",);
    |                       ^^^^^^^^^ `std::result::Result<param::Params, std::io::Error>` cannot be formatted with the default formatter
    |
   ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
    |
502 | pub enum Result<T, E> {
    | --------------------- doesn't satisfy `_: Display` or `_: ToString`
    |
    = note: the following trait bounds were not satisfied:
            `std::result::Result<param::Params, std::io::Error>: std::fmt::Display`
            which is required by `std::result::Result<param::Params, std::io::Error>: ToString`

error[E0599]: no method named `is_empty` found for enum `std::result::Result` in the current scope
   --> src/param.rs:505:20
    |
505 |         assert!(p1.is_empty());
    |                    ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `is_empty` exists on the type `param::Params`
   --> src/param.rs:314:5
    |
314 |     pub fn is_empty(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
505 |         assert!(p1.expect("REASON").is_empty());
    |                   +++++++++++++++++

error[E0599]: no method named `len` found for enum `std::result::Result` in the current scope
   --> src/param.rs:506:23
    |
506 |         assert_eq!(p1.len(), 0)
    |                       ^^^ method not found in `Result<Params, Error>`
    |
note: the method `len` exists on the type `param::Params`
   --> src/param.rs:319:5
    |
319 |     pub fn len(&self) -> usize {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
506 |         assert_eq!(p1.expect("REASON").len(), 0)
    |                      +++++++++++++++++

error[E0599]: no method named `set` found for enum `std::result::Result` in the current scope
   --> src/param.rs:512:16
    |
512 |         params.set(Param::Height, "foo\nbar=baz\nquux");
    |                ^^^ method not found in `Result<Params, Error>`
    |
note: the method `set` exists on the type `param::Params`
   --> src/param.rs:292:5
    |
292 |     pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
512 |         params.expect("REASON").set(Param::Height, "foo\nbar=baz\nquux");
    |               +++++++++++++++++

error[E0599]: no method named `set` found for enum `std::result::Result` in the current scope
   --> src/param.rs:513:16
    |
513 |         params.set(Param::Width, "\n\n\na=\n=");
    |                ^^^ method not found in `Result<Params, Error>`
    |
note: the method `set` exists on the type `param::Params`
   --> src/param.rs:292:5
    |
292 |     pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
513 |         params.expect("REASON").set(Param::Width, "\n\n\na=\n=");
    |               +++++++++++++++++

error[E0599]: `std::result::Result<param::Params, std::io::Error>` doesn't implement `std::fmt::Display`
   --> src/param.rs:514:27
    |
514 |         assert_eq!(params.to_string().parse::<Params>().unwrap(), params);
    |                           ^^^^^^^^^ `std::result::Result<param::Params, std::io::Error>` cannot be formatted with the default formatter
    |
   ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
    |
502 | pub enum Result<T, E> {
    | --------------------- doesn't satisfy `_: Display` or `_: ToString`
    |
    = note: the following trait bounds were not satisfied:
            `std::result::Result<param::Params, std::io::Error>: std::fmt::Display`
            which is required by `std::result::Result<param::Params, std::io::Error>: ToString`

error[E0599]: no method named `set` found for enum `std::result::Result` in the current scope
   --> src/param.rs:543:11
    |
543 |         p.set(Param::File, fname.to_str().unwrap());
    |           ^^^ method not found in `Result<Params, Error>`
    |
note: the method `set` exists on the type `param::Params`
   --> src/param.rs:292:5
    |
292 |     pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
543 |         p.expect("REASON").set(Param::File, fname.to_str().unwrap());
    |          +++++++++++++++++

error[E0599]: no method named `get_file` found for enum `std::result::Result` in the current scope
   --> src/param.rs:545:22
    |
545 |         let file = p.get_file(Param::File, &t).unwrap().unwrap();
    |                      ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_file` exists on the type `param::Params`
   --> src/param.rs:359:5
    |
359 |     pub fn get_file<'a>(&self, key: Param, context: &'a Context) -> Result<Option<ParamsFile<'a>>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
545 |         let file = p.expect("REASON").get_file(Param::File, &t).unwrap().unwrap();
    |                     +++++++++++++++++

error[E0599]: no method named `get_path` found for enum `std::result::Result` in the current scope
   --> src/param.rs:548:31
    |
548 |         let path: PathBuf = p.get_path(Param::File, &t).unwrap().unwrap();
    |                               ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_path` exists on the type `param::Params`
   --> src/param.rs:405:5
    |
405 |     pub fn get_path(&self, key: Param, context: &Context) -> Result<Option<PathBuf>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
548 |         let path: PathBuf = p.expect("REASON").get_path(Param::File, &t).unwrap().unwrap();
    |                              +++++++++++++++++

error[E0599]: no method named `get_blob` found for enum `std::result::Result` in the current scope
   --> src/param.rs:552:19
    |
552 |         assert!(p.get_blob(Param::File, &t, false).await.is_err());
    |                   ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_blob` exists on the type `param::Params`
   --> src/param.rs:380:5
    |
380 | /     pub async fn get_blob<'a>(
381 | |         &self,
382 | |         key: Param,
383 | |         context: &'a Context,
384 | |         create: bool,
385 | |     ) -> Result<Option<BlobObject<'a>>> {
    | |_______________________________________^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
552 |         assert!(p.expect("REASON").get_blob(Param::File, &t, false).await.is_err());
    |                  +++++++++++++++++

error[E0599]: no method named `get_blob` found for enum `std::result::Result` in the current scope
   --> src/param.rs:555:22
    |
555 |         let blob = p.get_blob(Param::File, &t, true).await.unwrap().unwrap();
    |                      ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_blob` exists on the type `param::Params`
   --> src/param.rs:380:5
    |
380 | /     pub async fn get_blob<'a>(
381 | |         &self,
382 | |         key: Param,
383 | |         context: &'a Context,
384 | |         create: bool,
385 | |     ) -> Result<Option<BlobObject<'a>>> {
    | |_______________________________________^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
555 |         let blob = p.expect("REASON").get_blob(Param::File, &t, true).await.unwrap().unwrap();
    |                     +++++++++++++++++

error[E0599]: no method named `set` found for enum `std::result::Result` in the current scope
   --> src/param.rs:560:11
    |
560 |         p.set(Param::File, bar_path.to_str().unwrap());
    |           ^^^ method not found in `Result<Params, Error>`
    |
note: the method `set` exists on the type `param::Params`
   --> src/param.rs:292:5
    |
292 |     pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
560 |         p.expect("REASON").set(Param::File, bar_path.to_str().unwrap());
    |          +++++++++++++++++

error[E0599]: no method named `get_blob` found for enum `std::result::Result` in the current scope
   --> src/param.rs:561:22
    |
561 |         let blob = p.get_blob(Param::File, &t, false).await.unwrap().unwrap();
    |                      ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_blob` exists on the type `param::Params`
   --> src/param.rs:380:5
    |
380 | /     pub async fn get_blob<'a>(
381 | |         &self,
382 | |         key: Param,
383 | |         context: &'a Context,
384 | |         create: bool,
385 | |     ) -> Result<Option<BlobObject<'a>>> {
    | |_______________________________________^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
561 |         let blob = p.expect("REASON").get_blob(Param::File, &t, false).await.unwrap().unwrap();
    |                     +++++++++++++++++

error[E0599]: no method named `remove` found for enum `std::result::Result` in the current scope
   --> src/param.rs:564:11
    |
564 |         p.remove(Param::File);
    |           ^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `remove` exists on the type `param::Params`
   --> src/param.rs:298:5
    |
298 |     pub fn remove(&mut self, key: Param) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
564 |         p.expect("REASON").remove(Param::File);
    |          +++++++++++++++++

error[E0599]: no method named `get_file` found for enum `std::result::Result` in the current scope
   --> src/param.rs:565:19
    |
565 |         assert!(p.get_file(Param::File, &t).unwrap().is_none());
    |                   ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_file` exists on the type `param::Params`
   --> src/param.rs:359:5
    |
359 |     pub fn get_file<'a>(&self, key: Param, context: &'a Context) -> Result<Option<ParamsFile<'a>>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
565 |         assert!(p.expect("REASON").get_file(Param::File, &t).unwrap().is_none());
    |                  +++++++++++++++++

error[E0599]: no method named `get_path` found for enum `std::result::Result` in the current scope
   --> src/param.rs:566:19
    |
566 |         assert!(p.get_path(Param::File, &t).unwrap().is_none());
    |                   ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_path` exists on the type `param::Params`
   --> src/param.rs:405:5
    |
405 |     pub fn get_path(&self, key: Param, context: &Context) -> Result<Option<PathBuf>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
566 |         assert!(p.expect("REASON").get_path(Param::File, &t).unwrap().is_none());
    |                  +++++++++++++++++

error[E0599]: no method named `get_blob` found for enum `std::result::Result` in the current scope
   --> src/param.rs:567:19
    |
567 |         assert!(p.get_blob(Param::File, &t, false).await.unwrap().is_none());
    |                   ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_blob` exists on the type `param::Params`
   --> src/param.rs:380:5
    |
380 | /     pub async fn get_blob<'a>(
381 | |         &self,
382 | |         key: Param,
383 | |         context: &'a Context,
384 | |         create: bool,
385 | |     ) -> Result<Option<BlobObject<'a>>> {
    | |_______________________________________^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
567 |         assert!(p.expect("REASON").get_blob(Param::File, &t, false).await.unwrap().is_none());
    |                  +++++++++++++++++

error[E0599]: no method named `update_timestamp` found for enum `std::result::Result` in the current scope
  --> src/update_helper.rs:99:24
   |
99 |         assert!(params.update_timestamp(Param::LastSubject, ts)?);
   |                        ^^^^^^^^^^^^^^^^ method not found in `Result<Params, Error>`
   |
note: the method `update_timestamp` exists on the type `param::Params`
  --> src/update_helper.rs:76:5
   |
76 |     pub(crate) fn update_timestamp(&mut self, scope: Param, new_timestamp: i64) -> Result<bool> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
   |
99 |         assert!(params.expect("REASON").update_timestamp(Param::LastSubject, ts)?);
   |                       +++++++++++++++++

error[E0599]: no method named `update_timestamp` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:100:24
    |
100 |         assert!(params.update_timestamp(Param::LastSubject, ts)?); // same timestamp -> update
    |                        ^^^^^^^^^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `update_timestamp` exists on the type `param::Params`
   --> src/update_helper.rs:76:5
    |
76  |     pub(crate) fn update_timestamp(&mut self, scope: Param, new_timestamp: i64) -> Result<bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
100 |         assert!(params.expect("REASON").update_timestamp(Param::LastSubject, ts)?); // same timestamp -> update
    |                       +++++++++++++++++

error[E0599]: no method named `update_timestamp` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:101:24
    |
101 |         assert!(params.update_timestamp(Param::LastSubject, ts + 10)?);
    |                        ^^^^^^^^^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `update_timestamp` exists on the type `param::Params`
   --> src/update_helper.rs:76:5
    |
76  |     pub(crate) fn update_timestamp(&mut self, scope: Param, new_timestamp: i64) -> Result<bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
101 |         assert!(params.expect("REASON").update_timestamp(Param::LastSubject, ts + 10)?);
    |                       +++++++++++++++++

error[E0599]: no method named `update_timestamp` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:102:25
    |
102 |         assert!(!params.update_timestamp(Param::LastSubject, ts)?); // `ts` is now too old
    |                         ^^^^^^^^^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `update_timestamp` exists on the type `param::Params`
   --> src/update_helper.rs:76:5
    |
76  |     pub(crate) fn update_timestamp(&mut self, scope: Param, new_timestamp: i64) -> Result<bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
102 |         assert!(!params.expect("REASON").update_timestamp(Param::LastSubject, ts)?); // `ts` is now too old
    |                        +++++++++++++++++

error[E0599]: no method named `update_timestamp` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:103:25
    |
103 |         assert!(!params.update_timestamp(Param::LastSubject, 0)?);
    |                         ^^^^^^^^^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `update_timestamp` exists on the type `param::Params`
   --> src/update_helper.rs:76:5
    |
76  |     pub(crate) fn update_timestamp(&mut self, scope: Param, new_timestamp: i64) -> Result<bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
103 |         assert!(!params.expect("REASON").update_timestamp(Param::LastSubject, 0)?);
    |                        +++++++++++++++++

error[E0599]: no method named `get_i64` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:104:27
    |
104 |         assert_eq!(params.get_i64(Param::LastSubject).unwrap(), ts + 10);
    |                           ^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_i64` exists on the type `param::Params`
   --> src/param.rs:329:5
    |
329 |     pub fn get_i64(&self, key: Param) -> Option<i64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
104 |         assert_eq!(params.expect("REASON").get_i64(Param::LastSubject).unwrap(), ts + 10);
    |                          +++++++++++++++++

error[E0599]: no method named `update_timestamp` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:106:24
    |
106 |         assert!(params.update_timestamp(Param::GroupNameTimestamp, 0)?); // stay unset -> update ...
    |                        ^^^^^^^^^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `update_timestamp` exists on the type `param::Params`
   --> src/update_helper.rs:76:5
    |
76  |     pub(crate) fn update_timestamp(&mut self, scope: Param, new_timestamp: i64) -> Result<bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
106 |         assert!(params.expect("REASON").update_timestamp(Param::GroupNameTimestamp, 0)?); // stay unset -> update ...
    |                       +++++++++++++++++

error[E0599]: no method named `update_timestamp` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:107:24
    |
107 |         assert!(params.update_timestamp(Param::GroupNameTimestamp, 0)?); // ... also on multiple calls
    |                        ^^^^^^^^^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `update_timestamp` exists on the type `param::Params`
   --> src/update_helper.rs:76:5
    |
76  |     pub(crate) fn update_timestamp(&mut self, scope: Param, new_timestamp: i64) -> Result<bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
107 |         assert!(params.expect("REASON").update_timestamp(Param::GroupNameTimestamp, 0)?); // ... also on multiple calls
    |                       +++++++++++++++++

error[E0599]: no method named `get_i64` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:108:27
    |
108 |         assert_eq!(params.get_i64(Param::GroupNameTimestamp).unwrap(), 0);
    |                           ^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_i64` exists on the type `param::Params`
   --> src/param.rs:329:5
    |
329 |     pub fn get_i64(&self, key: Param) -> Option<i64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
108 |         assert_eq!(params.expect("REASON").get_i64(Param::GroupNameTimestamp).unwrap(), 0);
    |                          +++++++++++++++++

error[E0599]: no method named `update_timestamp` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:110:25
    |
110 |         assert!(!params.update_timestamp(Param::AvatarTimestamp, -1)?);
    |                         ^^^^^^^^^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `update_timestamp` exists on the type `param::Params`
   --> src/update_helper.rs:76:5
    |
76  |     pub(crate) fn update_timestamp(&mut self, scope: Param, new_timestamp: i64) -> Result<bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
110 |         assert!(!params.expect("REASON").update_timestamp(Param::AvatarTimestamp, -1)?);
    |                        +++++++++++++++++

error[E0599]: no method named `get_i64` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:111:27
    |
111 |         assert_eq!(params.get_i64(Param::AvatarTimestamp), None);
    |                           ^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_i64` exists on the type `param::Params`
   --> src/param.rs:329:5
    |
329 |     pub fn get_i64(&self, key: Param) -> Option<i64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
111 |         assert_eq!(params.expect("REASON").get_i64(Param::AvatarTimestamp), None);
    |                          +++++++++++++++++

error: could not compile `deltachat` (lib test) due to 46 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


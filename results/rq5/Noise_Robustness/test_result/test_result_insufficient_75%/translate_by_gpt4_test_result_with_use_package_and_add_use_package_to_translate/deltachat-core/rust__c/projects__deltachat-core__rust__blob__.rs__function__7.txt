Fail
file path is :
projects/deltachat-core/rust/src/blob.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `PathBuf` is defined multiple times
  --> src/blob.rs:14:23
   |
5  | use std::path::PathBuf;
   |     ------------------ previous import of the type `PathBuf` here
...
14 | use std::path::{Path, PathBuf};
   |                       ^^^^^^^ `PathBuf` reimported here
   |
   = note: `PathBuf` must be defined only once in the type namespace of this module

error[E0433]: failed to resolve: use of undeclared type `CStr`
   --> src/blob.rs:220:44
    |
220 |                 let blobdir_str = unsafe { CStr::from_ptr(self.blobdir).to_str().unwrap() };
    |                                            ^^^^ use of undeclared type `CStr`
    |
help: consider importing one of these items
    |
4   + use core::ffi::CStr;
    |
4   + use std::ffi::CStr;
    |

warning: unused import: `std::ffi::OsString`
 --> src/blob.rs:4:5
  |
4 | use std::ffi::OsString;
  |     ^^^^^^^^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `std::ptr::null`
 --> src/blob.rs:6:5
  |
6 | use std::ptr::null;
  |     ^^^^^^^^^^^^^^

warning: unused import: `PathBuf`
  --> src/blob.rs:14:23
   |
14 | use std::path::{Path, PathBuf};
   |                       ^^^^^^^

error: usage of an `unsafe` block
   --> src/blob.rs:220:35
    |
220 |                 let blobdir_str = unsafe { CStr::from_ptr(self.blobdir).to_str().unwrap() };
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: the lint level is defined here
   --> src/lib.rs:4:11
    |
4   | #![forbid(unsafe_code)]
    |           ^^^^^^^^^^^

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/config.rs:619:53
    |
619 | ...                   let buf = fs::read(blob.to_abs_path()).await?;
    |                                               ^^^^^^^^^^^-- an argument of type `&str` is missing
    |
note: method defined here
   --> src/blob.rs:207:8
    |
207 | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
619 |                             let buf = fs::read(blob.to_abs_path(/* &str */)).await?;
    |                                                                ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/chat.rs:2635:86
     |
2635 |             if let Some((better_type, _)) = message::guess_msgtype_from_suffix(&blob.to_abs_path())
     |                                                                                      ^^^^^^^^^^^-- an argument of type `&str` is missing
     |
note: method defined here
    --> src/blob.rs:207:8
     |
207  | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
2635 |             if let Some((better_type, _)) = message::guess_msgtype_from_suffix(&blob.to_abs_path(/* &str */))
     |                                                                                                 ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/chat.rs:2639:60
     |
2639 |                         .ensure_sendable_webxdc_file(&blob.to_abs_path())
     |                                                            ^^^^^^^^^^^-- an argument of type `&str` is missing
     |
note: method defined here
    --> src/blob.rs:207:8
     |
207  | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
2639 |                         .ensure_sendable_webxdc_file(&blob.to_abs_path(/* &str */))
     |                                                                       ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/chat.rs:2648:52
     |
2648 |                 .ensure_sendable_webxdc_file(&blob.to_abs_path())
     |                                                    ^^^^^^^^^^^-- an argument of type `&str` is missing
     |
note: method defined here
    --> src/blob.rs:207:8
     |
207  | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
2648 |                 .ensure_sendable_webxdc_file(&blob.to_abs_path(/* &str */))
     |                                                               ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/chat.rs:2675:79
     |
2675 |             if let Some((_, mime)) = message::guess_msgtype_from_suffix(&blob.to_abs_path()) {
     |                                                                               ^^^^^^^^^^^-- an argument of type `&str` is missing
     |
note: method defined here
    --> src/blob.rs:207:8
     |
207  | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
2675 |             if let Some((_, mime)) = message::guess_msgtype_from_suffix(&blob.to_abs_path(/* &str */)) {
     |                                                                                          ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/chat.rs:2685:18
     |
2685 |             blob.to_abs_path().display(),
     |                  ^^^^^^^^^^^-- an argument of type `&str` is missing
     |
note: method defined here
    --> src/blob.rs:207:8
     |
207  | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
2685 |             blob.to_abs_path(/* &str */).display(),
     |                             ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/blob.rs:383:29
    |
383 |         let blob_abs = self.to_abs_path();
    |                             ^^^^^^^^^^^-- an argument of type `&str` is missing
    |
note: method defined here
   --> src/blob.rs:207:8
    |
207 | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
383 |         let blob_abs = self.to_abs_path(/* &str */);
    |                                        ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/blob.rs:422:29
    |
422 |         let blob_abs = self.to_abs_path();
    |                             ^^^^^^^^^^^-- an argument of type `&str` is missing
    |
note: method defined here
   --> src/blob.rs:207:8
    |
207 | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
422 |         let blob_abs = self.to_abs_path(/* &str */);
    |                                        ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/mimefactory.rs:1564:30
     |
1564 |     let body = fs::read(blob.to_abs_path()).await?;
     |                              ^^^^^^^^^^^-- an argument of type `&str` is missing
     |
note: method defined here
    --> src/blob.rs:207:8
     |
207  | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
1564 |     let body = fs::read(blob.to_abs_path(/* &str */)).await?;
     |                                         ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/mimefactory.rs:1547:30
     |
1547 |     let body = fs::read(blob.to_abs_path()).await?;
     |                              ^^^^^^^^^^^-- an argument of type `&str` is missing
     |
note: method defined here
    --> src/blob.rs:207:8
     |
207  | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
1547 |     let body = fs::read(blob.to_abs_path(/* &str */)).await?;
     |                                         ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/imex.rs:588:40
    |
588 |         let mut file = File::open(blob.to_abs_path()).await?;
    |                                        ^^^^^^^^^^^-- an argument of type `&str` is missing
    |
note: method defined here
   --> src/blob.rs:207:8
    |
207 | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
588 |         let mut file = File::open(blob.to_abs_path(/* &str */)).await?;
    |                                                   ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/imex/transfer.rs:175:29
    |
175 |             let path = blob.to_abs_path();
    |                             ^^^^^^^^^^^-- an argument of type `&str` is missing
    |
note: method defined here
   --> src/blob.rs:207:8
    |
207 | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
175 |             let path = blob.to_abs_path(/* &str */);
    |                                        ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/qr_code_generator.rs:35:46
    |
35  |             Some(tokio::fs::read(avatar_blob.to_abs_path()).await?)
    |                                              ^^^^^^^^^^^-- an argument of type `&str` is missing
    |
note: method defined here
   --> src/blob.rs:207:8
    |
207 | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
35  |             Some(tokio::fs::read(avatar_blob.to_abs_path(/* &str */)).await?)
    |                                                         ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/qr_code_generator.rs:83:46
    |
83  |             Some(tokio::fs::read(avatar_blob.to_abs_path()).await?)
    |                                              ^^^^^^^^^^^-- an argument of type `&str` is missing
    |
note: method defined here
   --> src/blob.rs:207:8
    |
207 | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
83  |             Some(tokio::fs::read(avatar_blob.to_abs_path(/* &str */)).await?)
    |                                                         ~~~~~~~~~~~~

error[E0599]: no method named `is_null` found for reference `&'a Path` in the current scope
   --> src/blob.rs:211:25
    |
211 |     match (self.blobdir.is_null(), path_n_filename.is_empty()) {
    |                         ^^^^^^^ method not found in `&'a Path`

error[E0599]: no method named `is_null` found for reference `&'a Path` in the current scope
   --> src/blob.rs:217:33
    |
217 |                 if self.blobdir.is_null() {
    |                                 ^^^^^^^ method not found in `&'a Path`

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/blob.rs:615:45
    |
615 |         let file = std::fs::File::open(self.to_abs_path())?;
    |                                             ^^^^^^^^^^^-- an argument of type `&str` is missing
    |
note: method defined here
   --> src/blob.rs:207:8
    |
207 | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
615 |         let file = std::fs::File::open(self.to_abs_path(/* &str */))?;
    |                                                        ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/param.rs:408:44
    |
408 |             ParamsFile::Blob(blob) => blob.to_abs_path(),
    |                                            ^^^^^^^^^^^-- an argument of type `&str` is missing
    |
note: method defined here
   --> src/blob.rs:207:8
    |
207 | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
408 |             ParamsFile::Blob(blob) => blob.to_abs_path(/* &str */),
    |                                                       ~~~~~~~~~~~~

Some errors have detailed explanations: E0061, E0252, E0433, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `deltachat` (lib) generated 3 warnings
error: could not compile `deltachat` (lib) due to 21 previous errors; 3 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0599]: no method named `is_null` found for reference `&'a std::path::Path` in the current scope
   --> src/blob.rs:211:25
    |
211 |     match (self.blobdir.is_null(), path_n_filename.is_empty()) {
    |                         ^^^^^^^ method not found in `&Path`

error[E0599]: no method named `is_null` found for reference `&'a std::path::Path` in the current scope
   --> src/blob.rs:217:33
    |
217 |                 if self.blobdir.is_null() {
    |                                 ^^^^^^^ method not found in `&Path`

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/blob.rs:803:25
    |
803 |         assert_eq!(blob.to_abs_path(), t.get_blobdir().join("foo"));
    |                         ^^^^^^^^^^^-- an argument of type `&str` is missing
    |
note: method defined here
   --> src/blob.rs:207:8
    |
207 | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
803 |         assert_eq!(blob.to_abs_path(/* &str */), t.get_blobdir().join("foo"));
    |                                    ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/blob.rs:897:34
    |
897 |         let data = fs::read(blob.to_abs_path()).await.unwrap();
    |                                  ^^^^^^^^^^^-- an argument of type `&str` is missing
    |
note: method defined here
   --> src/blob.rs:207:8
    |
207 | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
897 |         let data = fs::read(blob.to_abs_path(/* &str */)).await.unwrap();
    |                                             ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/blob.rs:918:34
    |
918 |         let data = fs::read(blob.to_abs_path()).await.unwrap();
    |                                  ^^^^^^^^^^^-- an argument of type `&str` is missing
    |
note: method defined here
   --> src/blob.rs:207:8
    |
207 | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
918 |         let data = fs::read(blob.to_abs_path(/* &str */)).await.unwrap();
    |                                             ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/blob.rs:925:34
    |
925 |         let data = fs::read(blob.to_abs_path()).await.unwrap();
    |                                  ^^^^^^^^^^^-- an argument of type `&str` is missing
    |
note: method defined here
   --> src/blob.rs:207:8
    |
207 | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
925 |         let data = fs::read(blob.to_abs_path(/* &str */)).await.unwrap();
    |                                             ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/blob.rs:1009:22
     |
1009 |                 blob.to_abs_path(),
     |                      ^^^^^^^^^^^-- an argument of type `&str` is missing
     |
note: method defined here
    --> src/blob.rs:207:8
     |
207  | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
1009 |                 blob.to_abs_path(/* &str */),
     |                                 ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/blob.rs:1017:44
     |
1017 |                 let img = image::open(blob.to_abs_path()).unwrap();
     |                                            ^^^^^^^^^^^-- an argument of type `&str` is missing
     |
note: method defined here
    --> src/blob.rs:207:8
     |
207  | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
1017 |                 let img = image::open(blob.to_abs_path(/* &str */)).unwrap();
     |                                                       ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/blob.rs:1058:18
     |
1058 |             blob.to_abs_path(),
     |                  ^^^^^^^^^^^-- an argument of type `&str` is missing
     |
note: method defined here
    --> src/blob.rs:207:8
     |
207  | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
1058 |             blob.to_abs_path(/* &str */),
     |                             ~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/mimeparser.rs:3085:44
     |
3085 |         let f = tokio::fs::File::open(blob.to_abs_path()).await.unwrap();
     |                                            ^^^^^^^^^^^-- an argument of type `&str` is missing
     |
note: method defined here
    --> src/blob.rs:207:8
     |
207  | pub fn to_abs_path(&self, path_n_filename: &str) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
3085 |         let f = tokio::fs::File::open(blob.to_abs_path(/* &str */)).await.unwrap();
     |                                                       ~~~~~~~~~~~~

warning: `deltachat` (lib test) generated 3 warnings (3 duplicates)
error: could not compile `deltachat` (lib test) due to 29 previous errors; 3 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


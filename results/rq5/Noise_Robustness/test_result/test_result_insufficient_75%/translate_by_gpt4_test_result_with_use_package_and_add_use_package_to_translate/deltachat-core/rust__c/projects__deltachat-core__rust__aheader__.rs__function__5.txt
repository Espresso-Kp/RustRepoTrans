Fail
file path is :
projects/deltachat-core/rust/src/aheader.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
warning: unused import: `std::collections::BTreeMap`
 --> src/aheader.rs:5:5
  |
5 | use std::collections::BTreeMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `Context as _`
 --> src/aheader.rs:9:20
  |
9 | use anyhow::{bail, Context as _, Error, Result};
  |                    ^^^^^^^^^^^^

error[E0599]: no function or associated item named `default` found for struct `SignedPublicKey` in the current scope
   --> src/aheader.rs:110:38
    |
110 |         public_key: SignedPublicKey::default(), 
    |                                      ^^^^^^^ function or associated item not found in `SignedPublicKey`
    |
note: if you're trying to build a new `SignedPublicKey`, consider using `SignedPublicKey::new` which returns `SignedPublicKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/public.rs:39:5
    |
39  | /     pub fn new(
40  | |         primary_key: packet::PublicKey,
41  | |         details: SignedKeyDetails,
42  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
43  | |     ) -> Self {
    | |_____________^

error[E0277]: expected a `Fn(char)` closure, found `[char]`
    --> src/aheader.rs:115:49
     |
115  |         let (skip_ws, rest) = p.split_at(p.find(&AHEADER_WS).unwrap_or(p.len()));
     |                                            ---- ^^^^^^^^^^^ expected an `Fn(char)` closure, found `[char]`
     |                                            |
     |                                            required by a bound introduced by this call
     |
     = help: the trait `Fn<(char,)>` is not implemented for `[char]`, which is required by `&&[char]: Pattern<'_>`
     = note: required for `&[char]` to implement `FnOnce<(char,)>`
     = note: required for `&&[char]` to implement `Pattern<'_>`
note: required by a bound in `core::str::<impl str>::find`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/str/mod.rs:1250:24
     |
1250 |     pub fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {
     |                        ^^^^^^^^^^^ required by this bound in `core::str::<impl str>::find`
help: consider dereferencing here
     |
115  |         let (skip_ws, rest) = p.split_at(p.find(&*AHEADER_WS).unwrap_or(p.len()));
     |                                                  +

error[E0425]: cannot find function `add_attribute` in this scope
   --> src/aheader.rs:136:17
    |
136 |             if !add_attribute(&mut aheader, beg_attr_name, beg_attr_value) {
    |                 ^^^^^^^^^^^^^ not found in this scope

error[E0599]: no function or associated item named `from_str` found for struct `anyhow::Error` in the current scope
   --> src/aheader.rs:137:35
    |
137 |                 return Err(Error::from_str("An invalid attribute makes the entire header invalid"));
    |                                   ^^^^^^^^ function or associated item not found in `Error`
    |
note: if you're trying to build a new `anyhow::Error` consider using one of the following associated functions:
      anyhow::error::<impl anyhow::Error>::new
      anyhow::error::<impl anyhow::Error>::msg
      anyhow::error::<impl anyhow::Error>::from_std
      anyhow::error::<impl anyhow::Error>::from_adhoc
      and 4 others
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/error.rs:32:5
    |
32  | /     pub fn new<E>(error: E) -> Self
33  | |     where
34  | |         E: StdError + Send + Sync + 'static,
    | |____________________________________________^
...
79  | /     pub fn msg<M>(message: M) -> Self
80  | |     where
81  | |         M: Display + Debug + Send + Sync + 'static,
    | |___________________________________________________^
...
88  | /     pub(crate) fn from_std<E>(error: E, backtrace: Option<Backtrace>) -> Self
89  | |     where
90  | |         E: StdError + Send + Sync + 'static,
    | |____________________________________________^
...
114 | /     pub(crate) fn from_adhoc<M>(message: M, backtrace: Option<Backtrace>) -> Self
115 | |     where
116 | |         M: Display + Debug + Send + Sync + 'static,
    | |___________________________________________________^

error[E0599]: no method named `is_some` found for struct `std::string::String` in the current scope
   --> src/aheader.rs:143:21
    |
143 |     if aheader.addr.is_some() && aheader.public_key.binary.is_some() {
    |                     ^^^^^^^ method not found in `String`

error[E0609]: no field `binary` on type `SignedPublicKey`
   --> src/aheader.rs:143:53
    |
143 |     if aheader.addr.is_some() && aheader.public_key.binary.is_some() {
    |                                                     ^^^^^^ unknown field
    |
    = note: available fields are: `primary_key`, `details`, `public_subkeys`

Some errors have detailed explanations: E0277, E0425, E0599, E0609.
For more information about an error, try `rustc --explain E0277`.
warning: `deltachat` (lib) generated 2 warnings
error: could not compile `deltachat` (lib) due to 6 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0599]: no function or associated item named `default` found for struct `pgp::SignedPublicKey` in the current scope
   --> src/aheader.rs:110:38
    |
110 |         public_key: SignedPublicKey::default(), 
    |                                      ^^^^^^^ function or associated item not found in `SignedPublicKey`
    |
note: if you're trying to build a new `pgp::SignedPublicKey`, consider using `pgp::SignedPublicKey::new` which returns `pgp::SignedPublicKey`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pgp-0.11.0/src/composed/signed_key/public.rs:39:5
    |
39  | /     pub fn new(
40  | |         primary_key: packet::PublicKey,
41  | |         details: SignedKeyDetails,
42  | |         mut public_subkeys: Vec<SignedPublicSubKey>,
43  | |     ) -> Self {
    | |_____________^

error[E0609]: no field `binary` on type `pgp::SignedPublicKey`
   --> src/aheader.rs:143:53
    |
143 |     if aheader.addr.is_some() && aheader.public_key.binary.is_some() {
    |                                                     ^^^^^^ unknown field
    |
    = note: available fields are: `primary_key`, `details`, `public_subkeys`

warning: `deltachat` (lib test) generated 2 warnings (2 duplicates)
error: could not compile `deltachat` (lib test) due to 6 previous errors; 2 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


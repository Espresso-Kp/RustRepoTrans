Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:553:13
    |
553 |     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |             ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
553 |     if lhs(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? == always_false(&RecordBatch::new_empty())? 
    |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:553:12
    |
553 |     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |        --- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |        |
    |        arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
553 -     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
553 +     if lhs(RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:553:38
    |
553 |     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                      ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-10937336113424455174.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:553:57
    |
553 |     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
553 |     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? 
    |                                                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:553:56
    |
553 |     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                           ------------ ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                                           |
    |                                           arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2027:1
help: consider removing the borrow
    |
553 -     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
553 +     if lhs(&RecordBatch::new_empty())? == always_false(RecordBatch::new_empty())? 
    |

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:554:17
    |
554 |         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                 ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
554 |         || rhs(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? == always_false(&RecordBatch::new_empty())? 
    |                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:554:16
    |
554 |         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |            --- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |            |
    |            arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
554 -         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
554 +         || rhs(RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:554:42
    |
554 |         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-15171788529007326706.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:554:61
    |
554 |         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
554 |         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? 
    |                                                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:554:60
    |
554 |         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                               ------------ ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                                               |
    |                                               arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2027:1
help: consider removing the borrow
    |
554 -         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
554 +         || rhs(&RecordBatch::new_empty())? == always_false(RecordBatch::new_empty())? 
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:553:82
    |
553 |     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                                                                  ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, _>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-11711570611917193303.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:554:86
    |
554 |         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                                                                      ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, _>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-3904286834885317250.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:557:20
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                    ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
557 |     } else if lhs(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? == always_true(&RecordBatch::new_empty())? {
    |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:557:19
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |               --- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |               |
    |               arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
557 -     } else if lhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
557 +     } else if lhs(RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:557:45
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-14336361436496577638.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:557:63
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                                                               ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? {
    |                                                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:557:62
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                                                  ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                                                  |
    |                                                  arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2027:1
help: consider removing the borrow
    |
557 -     } else if lhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
557 +     } else if lhs(&RecordBatch::new_empty())? == always_true(RecordBatch::new_empty())? {
    |

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:559:20
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                    ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
559 |     } else if rhs(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? == always_true(&RecordBatch::new_empty())? {
    |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:559:19
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |               --- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |               |
    |               arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
559 -     } else if rhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
559 +     } else if rhs(RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:559:45
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-6433846336372730680.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:559:63
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                                                               ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? {
    |                                                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:559:62
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                                                  ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                                                  |
    |                                                  arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2027:1
help: consider removing the borrow
    |
559 -     } else if rhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
559 +     } else if rhs(&RecordBatch::new_empty())? == always_true(RecordBatch::new_empty())? {
    |

error[E0308]: arguments to this function are incorrect
   --> crates/iceberg/src/arrow/reader.rs:565:13
    |
565 |             and(lhs_array, rhs_array)
    |             ^^^ ---------  --------- expected `&BooleanArray`, found `BooleanArray`
    |                 |
    |                 expected `&BooleanArray`, found `BooleanArray`
    |
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:254:8
    |
254 | pub fn and(left: &BooleanArray, right: &BooleanArray) -> Result<BooleanArray, ArrowError> {
    |        ^^^
help: consider borrowing here
    |
565 |             and(&lhs_array, rhs_array)
    |                 +
help: consider borrowing here
    |
565 |             and(lhs_array, &rhs_array)
    |                            +

Some errors have detailed explanations: E0061, E0277, E0308.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `iceberg` (lib) due to 23 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:553:38
    |
553 |     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                      ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-10543388347113024517.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:554:42
    |
554 |         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-6226028210324603429.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:553:82
    |
553 |     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                                                                  ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, _>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-11330213028952081892.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:554:86
    |
554 |         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                                                                      ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, _>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-15741999294000829925.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:557:45
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-6233786594370696215.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:559:45
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-15216580349787846728.txt'

error: could not compile `iceberg` (lib test) due to 23 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:553:13
    |
553 |     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |             ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
553 |     if lhs(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? == always_false(&RecordBatch::new_empty())? 
    |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:553:12
    |
553 |     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |        --- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |        |
    |        arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
553 -     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
553 +     if lhs(RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:553:38
    |
553 |     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                      ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-6204698591101402428.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:553:57
    |
553 |     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
553 |     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? 
    |                                                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:553:56
    |
553 |     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                           ------------ ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                                           |
    |                                           arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2027:1
help: consider removing the borrow
    |
553 -     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
553 +     if lhs(&RecordBatch::new_empty())? == always_false(RecordBatch::new_empty())? 
    |

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:554:17
    |
554 |         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                 ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
554 |         || rhs(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? == always_false(&RecordBatch::new_empty())? 
    |                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:554:16
    |
554 |         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |            --- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |            |
    |            arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
554 -         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
554 +         || rhs(RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:554:42
    |
554 |         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-1751941389747051514.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:554:61
    |
554 |         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
554 |         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? 
    |                                                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:554:60
    |
554 |         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                               ------------ ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                                               |
    |                                               arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2027:1
help: consider removing the borrow
    |
554 -         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
554 +         || rhs(&RecordBatch::new_empty())? == always_false(RecordBatch::new_empty())? 
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:553:82
    |
553 |     if lhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                                                                  ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, _>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-15059922412785073482.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:554:86
    |
554 |         || rhs(&RecordBatch::new_empty())? == always_false(&RecordBatch::new_empty())? 
    |                                                                                      ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, _>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-98584807300719759.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:557:20
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                    ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
557 |     } else if lhs(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? == always_true(&RecordBatch::new_empty())? {
    |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:557:19
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |               --- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |               |
    |               arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
557 -     } else if lhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
557 +     } else if lhs(RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:557:45
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-5107082725835945928.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:557:63
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                                                               ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? {
    |                                                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:557:62
    |
557 |     } else if lhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                                                  ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                                                  |
    |                                                  arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2027:1
help: consider removing the borrow
    |
557 -     } else if lhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
557 +     } else if lhs(&RecordBatch::new_empty())? == always_true(RecordBatch::new_empty())? {
    |

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:559:20
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                    ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
559 |     } else if rhs(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? == always_true(&RecordBatch::new_empty())? {
    |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:559:19
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |               --- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |               |
    |               arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2020:1
help: consider removing the borrow
    |
559 -     } else if rhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
559 +     } else if rhs(RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:559:45
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                                             ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-8340093905161207775.txt'

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> crates/iceberg/src/arrow/reader.rs:559:63
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                                                               ^^^^^^^^^^^^^^^^^^^^^^-- an argument of type `Arc<arrow_schema::Schema>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:128:12
    |
128 |     pub fn new_empty(schema: SchemaRef) -> Self {
    |            ^^^^^^^^^
help: provide the argument
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty(/* Arc<arrow_schema::Schema> */))? {
    |                                                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:559:62
    |
559 |     } else if rhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
    |                                                  ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RecordBatch`, found `&RecordBatch`
    |                                                  |
    |                                                  arguments to this function are incorrect
    |
note: implementation defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/boxed.rs:2027:1
help: consider removing the borrow
    |
559 -     } else if rhs(&RecordBatch::new_empty())? == always_true(&RecordBatch::new_empty())? {
559 +     } else if rhs(&RecordBatch::new_empty())? == always_true(RecordBatch::new_empty())? {
    |

error[E0308]: arguments to this function are incorrect
   --> crates/iceberg/src/arrow/reader.rs:565:13
    |
565 |             and(lhs_array, rhs_array)
    |             ^^^ ---------  --------- expected `&BooleanArray`, found `BooleanArray`
    |                 |
    |                 expected `&BooleanArray`, found `BooleanArray`
    |
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:254:8
    |
254 | pub fn and(left: &BooleanArray, right: &BooleanArray) -> Result<BooleanArray, ArrowError> {
    |        ^^^
help: consider borrowing here
    |
565 |             and(&lhs_array, rhs_array)
    |                 +
help: consider borrowing here
    |
565 |             and(lhs_array, &rhs_array)
    |                            +

Some errors have detailed explanations: E0061, E0277, E0308.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `iceberg` (lib) due to 23 previous errors


Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/schema.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0252]: the name `Result` is defined multiple times
  --> crates/iceberg/src/arrow/schema.rs:24:5
   |
22 | use std::result::Result;
   |     ------------------- previous import of the type `Result` here
23 |
24 | use crate::error::Result;
   |     ^^^^^^^^^^^^^^^^^^^^ `Result` reimported here
   |
   = note: `Result` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
24 | use crate::error::Result as OtherResult;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0412]: cannot find type `NameMapping` in this scope
   --> crates/iceberg/src/arrow/schema.rs:211:74
    |
211 | pub fn arrow_schema_to_schema(schema: &ArrowSchema, name_mapping: Option<NameMapping>) -> Result<Schema, &'static str> {
    |                                                                          ^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
211 | pub fn arrow_schema_to_schema<NameMapping>(schema: &ArrowSchema, name_mapping: Option<NameMapping>) -> Result<Schema, &'static str> {
    |                              +++++++++++++

warning: unused import: `crate::error::Result`
  --> crates/iceberg/src/arrow/schema.rs:24:5
   |
24 | use crate::error::Result;
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:108:77
    |
108 | fn visit_type<V: ArrowSchemaVisitor>(r#type: &DataType, visitor: &mut V) -> Result<V::T> {
    |                                                                             ^^^^^^ ---- supplied 1 generic argument
    |                                                                             |
    |                                                                             expected 2 generic arguments
    |
help: add missing generic argument
    |
108 | fn visit_type<V: ArrowSchemaVisitor>(r#type: &DataType, visitor: &mut V) -> Result<V::T, E> {
    |                                                                                        +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:173:6
    |
173 | ) -> Result<V::T> {
    |      ^^^^^^ ---- supplied 1 generic argument
    |      |
    |      expected 2 generic arguments
    |
help: add missing generic argument
    |
173 | ) -> Result<V::T, E> {
    |                 +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:182:77
    |
182 | fn visit_struct<V: ArrowSchemaVisitor>(fields: &Fields, visitor: &mut V) -> Result<V::T> {
    |                                                                             ^^^^^^ ---- supplied 1 generic argument
    |                                                                             |
    |                                                                             expected 2 generic arguments
    |
help: add missing generic argument
    |
182 | fn visit_struct<V: ArrowSchemaVisitor>(fields: &Fields, visitor: &mut V) -> Result<V::T, E> {
    |                                                                                        +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:196:82
    |
196 | fn visit_schema<V: ArrowSchemaVisitor>(schema: &ArrowSchema, visitor: &mut V) -> Result<V::U> {
    |                                                                                  ^^^^^^ ---- supplied 1 generic argument
    |                                                                                  |
    |                                                                                  expected 2 generic arguments
    |
help: add missing generic argument
    |
196 | fn visit_schema<V: ArrowSchemaVisitor>(schema: &ArrowSchema, visitor: &mut V) -> Result<V::U, E> {
    |                                                                                             +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:232:35
    |
232 | fn get_field_id(field: &Field) -> Result<i32> {
    |                                   ^^^^^^ --- supplied 1 generic argument
    |                                   |
    |                                   expected 2 generic arguments
    |
help: add missing generic argument
    |
232 | fn get_field_id(field: &Field) -> Result<i32, E> {
    |                                             +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:621:49
    |
621 | pub(crate) fn get_arrow_datum(datum: &Datum) -> Result<Box<dyn ArrowDatum + Send>> {
    |                                                 ^^^^^^ -------------------------- supplied 1 generic argument
    |                                                 |
    |                                                 expected 2 generic arguments
    |
help: add missing generic argument
    |
621 | pub(crate) fn get_arrow_datum(datum: &Datum) -> Result<Box<dyn ArrowDatum + Send>, E> {
    |                                                                                  +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:52:51
   |
52 |     fn before_field(&mut self, _field: &Field) -> Result<()> {
   |                                                   ^^^^^^ -- supplied 1 generic argument
   |                                                   |
   |                                                   expected 2 generic arguments
   |
help: add missing generic argument
   |
52 |     fn before_field(&mut self, _field: &Field) -> Result<(), E> {
   |                                                            +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:57:50
   |
57 |     fn after_field(&mut self, _field: &Field) -> Result<()> {
   |                                                  ^^^^^^ -- supplied 1 generic argument
   |                                                  |
   |                                                  expected 2 generic arguments
   |
help: add missing generic argument
   |
57 |     fn after_field(&mut self, _field: &Field) -> Result<(), E> {
   |                                                           +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:62:58
   |
62 |     fn before_list_element(&mut self, _field: &Field) -> Result<()> {
   |                                                          ^^^^^^ -- supplied 1 generic argument
   |                                                          |
   |                                                          expected 2 generic arguments
   |
help: add missing generic argument
   |
62 |     fn before_list_element(&mut self, _field: &Field) -> Result<(), E> {
   |                                                                   +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:67:57
   |
67 |     fn after_list_element(&mut self, _field: &Field) -> Result<()> {
   |                                                         ^^^^^^ -- supplied 1 generic argument
   |                                                         |
   |                                                         expected 2 generic arguments
   |
help: add missing generic argument
   |
67 |     fn after_list_element(&mut self, _field: &Field) -> Result<(), E> {
   |                                                                  +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:72:53
   |
72 |     fn before_map_key(&mut self, _field: &Field) -> Result<()> {
   |                                                     ^^^^^^ -- supplied 1 generic argument
   |                                                     |
   |                                                     expected 2 generic arguments
   |
help: add missing generic argument
   |
72 |     fn before_map_key(&mut self, _field: &Field) -> Result<(), E> {
   |                                                              +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:77:52
   |
77 |     fn after_map_key(&mut self, _field: &Field) -> Result<()> {
   |                                                    ^^^^^^ -- supplied 1 generic argument
   |                                                    |
   |                                                    expected 2 generic arguments
   |
help: add missing generic argument
   |
77 |     fn after_map_key(&mut self, _field: &Field) -> Result<(), E> {
   |                                                             +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:82:55
   |
82 |     fn before_map_value(&mut self, _field: &Field) -> Result<()> {
   |                                                       ^^^^^^ -- supplied 1 generic argument
   |                                                       |
   |                                                       expected 2 generic arguments
   |
help: add missing generic argument
   |
82 |     fn before_map_value(&mut self, _field: &Field) -> Result<(), E> {
   |                                                                +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:87:54
   |
87 |     fn after_map_value(&mut self, _field: &Field) -> Result<()> {
   |                                                      ^^^^^^ -- supplied 1 generic argument
   |                                                      |
   |                                                      expected 2 generic arguments
   |
help: add missing generic argument
   |
87 |     fn after_map_value(&mut self, _field: &Field) -> Result<(), E> {
   |                                                               +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:92:73
   |
92 |     fn schema(&mut self, schema: &ArrowSchema, values: Vec<Self::T>) -> Result<Self::U>;
   |                                                                         ^^^^^^ ------- supplied 1 generic argument
   |                                                                         |
   |                                                                         expected 2 generic arguments
   |
help: add missing generic argument
   |
92 |     fn schema(&mut self, schema: &ArrowSchema, values: Vec<Self::T>) -> Result<Self::U, E>;
   |                                                                                       +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:95:71
   |
95 |     fn r#struct(&mut self, fields: &Fields, results: Vec<Self::T>) -> Result<Self::T>;
   |                                                                       ^^^^^^ ------- supplied 1 generic argument
   |                                                                       |
   |                                                                       expected 2 generic arguments
   |
help: add missing generic argument
   |
95 |     fn r#struct(&mut self, fields: &Fields, results: Vec<Self::T>) -> Result<Self::T, E>;
   |                                                                                     +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:98:60
   |
98 |     fn list(&mut self, list: &DataType, value: Self::T) -> Result<Self::T>;
   |                                                            ^^^^^^ ------- supplied 1 generic argument
   |                                                            |
   |                                                            expected 2 generic arguments
   |
help: add missing generic argument
   |
98 |     fn list(&mut self, list: &DataType, value: Self::T) -> Result<Self::T, E>;
   |                                                                          +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:101:78
    |
101 |     fn map(&mut self, map: &DataType, key_value: Self::T, value: Self::T) -> Result<Self::T>;
    |                                                                              ^^^^^^ ------- supplied 1 generic argument
    |                                                                              |
    |                                                                              expected 2 generic arguments
    |
help: add missing generic argument
    |
101 |     fn map(&mut self, map: &DataType, key_value: Self::T, value: Self::T) -> Result<Self::T, E>;
    |                                                                                            +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:104:46
    |
104 |     fn primitive(&mut self, p: &DataType) -> Result<Self::T>;
    |                                              ^^^^^^ ------- supplied 1 generic argument
    |                                              |
    |                                              expected 2 generic arguments
    |
help: add missing generic argument
    |
104 |     fn primitive(&mut self, p: &DataType) -> Result<Self::T, E>;
    |                                                            +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:264:67
    |
264 |     fn convert_fields(fields: &Fields, field_results: &[Type]) -> Result<Vec<NestedFieldRef>> {
    |                                                                   ^^^^^^ ------------------- supplied 1 generic argument
    |                                                                   |
    |                                                                   expected 2 generic arguments
    |
help: add missing generic argument
    |
264 |     fn convert_fields(fields: &Fields, field_results: &[Type]) -> Result<Vec<NestedFieldRef>, E> {
    |                                                                                             +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:290:73
    |
290 |     fn schema(&mut self, schema: &ArrowSchema, values: Vec<Self::T>) -> Result<Self::U> {
    |                                                                         ^^^^^^ ------- supplied 1 generic argument
    |                                                                         |
    |                                                                         expected 2 generic arguments
    |
help: add missing generic argument
    |
290 |     fn schema(&mut self, schema: &ArrowSchema, values: Vec<Self::T>) -> Result<Self::U, E> {
    |                                                                                       +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:296:71
    |
296 |     fn r#struct(&mut self, fields: &Fields, results: Vec<Self::T>) -> Result<Self::T> {
    |                                                                       ^^^^^^ ------- supplied 1 generic argument
    |                                                                       |
    |                                                                       expected 2 generic arguments
    |
help: add missing generic argument
    |
296 |     fn r#struct(&mut self, fields: &Fields, results: Vec<Self::T>) -> Result<Self::T, E> {
    |                                                                                     +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:301:60
    |
301 |     fn list(&mut self, list: &DataType, value: Self::T) -> Result<Self::T> {
    |                                                            ^^^^^^ ------- supplied 1 generic argument
    |                                                            |
    |                                                            expected 2 generic arguments
    |
help: add missing generic argument
    |
301 |     fn list(&mut self, list: &DataType, value: Self::T) -> Result<Self::T, E> {
    |                                                                          +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:325:78
    |
325 |     fn map(&mut self, map: &DataType, key_value: Self::T, value: Self::T) -> Result<Self::T> {
    |                                                                              ^^^^^^ ------- supplied 1 generic argument
    |                                                                              |
    |                                                                              expected 2 generic arguments
    |
help: add missing generic argument
    |
325 |     fn map(&mut self, map: &DataType, key_value: Self::T, value: Self::T) -> Result<Self::T, E> {
    |                                                                                            +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:376:46
    |
376 |     fn primitive(&mut self, p: &DataType) -> Result<Self::T> {
    |                                              ^^^^^^ ------- supplied 1 generic argument
    |                                              |
    |                                              expected 2 generic arguments
    |
help: add missing generic argument
    |
376 |     fn primitive(&mut self, p: &DataType) -> Result<Self::T, E> {
    |                                                            +++

error[E0191]: the value of the associated type `T` in `ArrowSchemaVisitor` must be specified
   --> crates/iceberg/src/arrow/schema.rs:213:30
    |
46  |     type T;
    |     ------ `T` defined here
...
213 |     let mut visitor: Box<dyn ArrowSchemaVisitor<U=Schema>> = match has_ids {
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: specify the associated type: `ArrowSchemaVisitor<U=Schema, T = Type>`

error[E0433]: failed to resolve: use of undeclared type `HasIds`
   --> crates/iceberg/src/arrow/schema.rs:212:45
    |
212 |     let has_ids = visit_schema(schema, &mut HasIds::new());
    |                                             ^^^^^^ use of undeclared type `HasIds`

error[E0433]: failed to resolve: use of undeclared type `ConvertToIceberg`
   --> crates/iceberg/src/arrow/schema.rs:214:30
    |
214 |         Ok(true) => Box::new(ConvertToIceberg::new()),
    |                              ^^^^^^^^^^^^^^^^ use of undeclared type `ConvertToIceberg`

error[E0433]: failed to resolve: use of undeclared type `ConvertToIceberg`
   --> crates/iceberg/src/arrow/schema.rs:217:43
    |
217 |                 Some(mapping) => Box::new(ConvertToIceberg::new_with_mapping(mapping)),
    |                                           ^^^^^^^^^^^^^^^^ use of undeclared type `ConvertToIceberg`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:642:9
    |
642 |         arrow_schema_to_schema(schema)
    |         ^^^^^^^^^^^^^^^^^^^^^^-------- an argument is missing
    |
note: function defined here
   --> crates/iceberg/src/arrow/schema.rs:211:8
    |
211 | pub fn arrow_schema_to_schema(schema: &ArrowSchema, name_mapping: Option<NameMapping>) -> Result<Schema, &'static str> {
    |        ^^^^^^^^^^^^^^^^^^^^^^ --------------------  ---------------------------------
help: provide the argument
    |
642 |         arrow_schema_to_schema(schema, /* name_mapping */)
    |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/schema.rs:642:9
    |
641 |     fn try_from(schema: &ArrowSchema) -> crate::Result<Self> {
    |                                          ------------------- expected `std::result::Result<spec::schema::Schema, error::Error>` because of return type
642 |         arrow_schema_to_schema(schema)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<Schema, Error>`, found `Result<Schema, &str>`
    |
    = note: expected enum `std::result::Result<_, error::Error>`
               found enum `std::result::Result<_, &'static str>`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/arrow/reader.rs:173:34
    |
173 |             let iceberg_schema = arrow_schema_to_schema(arrow_schema)?;
    |                                  ^^^^^^^^^^^^^^^^^^^^^^-------------- an argument is missing
    |
note: function defined here
   --> crates/iceberg/src/arrow/schema.rs:211:8
    |
211 | pub fn arrow_schema_to_schema(schema: &ArrowSchema, name_mapping: Option<NameMapping>) -> Result<Schema, &'static str> {
    |        ^^^^^^^^^^^^^^^^^^^^^^ --------------------  ---------------------------------
help: provide the argument
    |
173 |             let iceberg_schema = arrow_schema_to_schema(arrow_schema, /* name_mapping */)?;
    |                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:173:70
    |
173 |             let iceberg_schema = arrow_schema_to_schema(arrow_schema)?;
    |                                                                      ^ the trait `From<&str>` is not implemented for `error::Error`, which is required by `std::result::Result<ProjectionMask, error::Error>: FromResidual<std::result::Result<Infallible, &str>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `std::result::Result<ProjectionMask, error::Error>` to implement `FromResidual<std::result::Result<Infallible, &str>>`

Some errors have detailed explanations: E0061, E0107, E0191, E0252, E0277, E0308, E0412, E0433.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 35 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
error[E0061]: this function takes 2 arguments but 1 argument was supplied
    --> crates/iceberg/src/arrow/schema.rs:1028:32
     |
1028 |         let converted_schema = arrow_schema_to_schema(&arrow_schema).unwrap();
     |                                ^^^^^^^^^^^^^^^^^^^^^^--------------- an argument is missing
     |
note: function defined here
    --> crates/iceberg/src/arrow/schema.rs:211:8
     |
211  | pub fn arrow_schema_to_schema(schema: &ArrowSchema, name_mapping: Option<NameMapping>) -> Result<Schema, &'static str> {
     |        ^^^^^^^^^^^^^^^^^^^^^^ --------------------  ---------------------------------
help: provide the argument
     |
1028 |         let converted_schema = arrow_schema_to_schema(&arrow_schema, /* name_mapping */).unwrap();
     |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: `iceberg` (lib test) generated 1 warning (1 duplicate)
error: could not compile `iceberg` (lib test) due to 36 previous errors; 1 warning emitted

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0252]: the name `Result` is defined multiple times
  --> crates/iceberg/src/arrow/schema.rs:24:5
   |
22 | use std::result::Result;
   |     ------------------- previous import of the type `Result` here
23 |
24 | use crate::error::Result;
   |     ^^^^^^^^^^^^^^^^^^^^ `Result` reimported here
   |
   = note: `Result` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
24 | use crate::error::Result as OtherResult;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0412]: cannot find type `NameMapping` in this scope
   --> crates/iceberg/src/arrow/schema.rs:211:74
    |
211 | pub fn arrow_schema_to_schema(schema: &ArrowSchema, name_mapping: Option<NameMapping>) -> Result<Schema, &'static str> {
    |                                                                          ^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
211 | pub fn arrow_schema_to_schema<NameMapping>(schema: &ArrowSchema, name_mapping: Option<NameMapping>) -> Result<Schema, &'static str> {
    |                              +++++++++++++

warning: unused import: `crate::error::Result`
  --> crates/iceberg/src/arrow/schema.rs:24:5
   |
24 | use crate::error::Result;
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:108:77
    |
108 | fn visit_type<V: ArrowSchemaVisitor>(r#type: &DataType, visitor: &mut V) -> Result<V::T> {
    |                                                                             ^^^^^^ ---- supplied 1 generic argument
    |                                                                             |
    |                                                                             expected 2 generic arguments
    |
help: add missing generic argument
    |
108 | fn visit_type<V: ArrowSchemaVisitor>(r#type: &DataType, visitor: &mut V) -> Result<V::T, E> {
    |                                                                                        +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:173:6
    |
173 | ) -> Result<V::T> {
    |      ^^^^^^ ---- supplied 1 generic argument
    |      |
    |      expected 2 generic arguments
    |
help: add missing generic argument
    |
173 | ) -> Result<V::T, E> {
    |                 +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:182:77
    |
182 | fn visit_struct<V: ArrowSchemaVisitor>(fields: &Fields, visitor: &mut V) -> Result<V::T> {
    |                                                                             ^^^^^^ ---- supplied 1 generic argument
    |                                                                             |
    |                                                                             expected 2 generic arguments
    |
help: add missing generic argument
    |
182 | fn visit_struct<V: ArrowSchemaVisitor>(fields: &Fields, visitor: &mut V) -> Result<V::T, E> {
    |                                                                                        +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:196:82
    |
196 | fn visit_schema<V: ArrowSchemaVisitor>(schema: &ArrowSchema, visitor: &mut V) -> Result<V::U> {
    |                                                                                  ^^^^^^ ---- supplied 1 generic argument
    |                                                                                  |
    |                                                                                  expected 2 generic arguments
    |
help: add missing generic argument
    |
196 | fn visit_schema<V: ArrowSchemaVisitor>(schema: &ArrowSchema, visitor: &mut V) -> Result<V::U, E> {
    |                                                                                             +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:232:35
    |
232 | fn get_field_id(field: &Field) -> Result<i32> {
    |                                   ^^^^^^ --- supplied 1 generic argument
    |                                   |
    |                                   expected 2 generic arguments
    |
help: add missing generic argument
    |
232 | fn get_field_id(field: &Field) -> Result<i32, E> {
    |                                             +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:621:49
    |
621 | pub(crate) fn get_arrow_datum(datum: &Datum) -> Result<Box<dyn ArrowDatum + Send>> {
    |                                                 ^^^^^^ -------------------------- supplied 1 generic argument
    |                                                 |
    |                                                 expected 2 generic arguments
    |
help: add missing generic argument
    |
621 | pub(crate) fn get_arrow_datum(datum: &Datum) -> Result<Box<dyn ArrowDatum + Send>, E> {
    |                                                                                  +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:52:51
   |
52 |     fn before_field(&mut self, _field: &Field) -> Result<()> {
   |                                                   ^^^^^^ -- supplied 1 generic argument
   |                                                   |
   |                                                   expected 2 generic arguments
   |
help: add missing generic argument
   |
52 |     fn before_field(&mut self, _field: &Field) -> Result<(), E> {
   |                                                            +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:57:50
   |
57 |     fn after_field(&mut self, _field: &Field) -> Result<()> {
   |                                                  ^^^^^^ -- supplied 1 generic argument
   |                                                  |
   |                                                  expected 2 generic arguments
   |
help: add missing generic argument
   |
57 |     fn after_field(&mut self, _field: &Field) -> Result<(), E> {
   |                                                           +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:62:58
   |
62 |     fn before_list_element(&mut self, _field: &Field) -> Result<()> {
   |                                                          ^^^^^^ -- supplied 1 generic argument
   |                                                          |
   |                                                          expected 2 generic arguments
   |
help: add missing generic argument
   |
62 |     fn before_list_element(&mut self, _field: &Field) -> Result<(), E> {
   |                                                                   +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:67:57
   |
67 |     fn after_list_element(&mut self, _field: &Field) -> Result<()> {
   |                                                         ^^^^^^ -- supplied 1 generic argument
   |                                                         |
   |                                                         expected 2 generic arguments
   |
help: add missing generic argument
   |
67 |     fn after_list_element(&mut self, _field: &Field) -> Result<(), E> {
   |                                                                  +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:72:53
   |
72 |     fn before_map_key(&mut self, _field: &Field) -> Result<()> {
   |                                                     ^^^^^^ -- supplied 1 generic argument
   |                                                     |
   |                                                     expected 2 generic arguments
   |
help: add missing generic argument
   |
72 |     fn before_map_key(&mut self, _field: &Field) -> Result<(), E> {
   |                                                              +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:77:52
   |
77 |     fn after_map_key(&mut self, _field: &Field) -> Result<()> {
   |                                                    ^^^^^^ -- supplied 1 generic argument
   |                                                    |
   |                                                    expected 2 generic arguments
   |
help: add missing generic argument
   |
77 |     fn after_map_key(&mut self, _field: &Field) -> Result<(), E> {
   |                                                             +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:82:55
   |
82 |     fn before_map_value(&mut self, _field: &Field) -> Result<()> {
   |                                                       ^^^^^^ -- supplied 1 generic argument
   |                                                       |
   |                                                       expected 2 generic arguments
   |
help: add missing generic argument
   |
82 |     fn before_map_value(&mut self, _field: &Field) -> Result<(), E> {
   |                                                                +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:87:54
   |
87 |     fn after_map_value(&mut self, _field: &Field) -> Result<()> {
   |                                                      ^^^^^^ -- supplied 1 generic argument
   |                                                      |
   |                                                      expected 2 generic arguments
   |
help: add missing generic argument
   |
87 |     fn after_map_value(&mut self, _field: &Field) -> Result<(), E> {
   |                                                               +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:92:73
   |
92 |     fn schema(&mut self, schema: &ArrowSchema, values: Vec<Self::T>) -> Result<Self::U>;
   |                                                                         ^^^^^^ ------- supplied 1 generic argument
   |                                                                         |
   |                                                                         expected 2 generic arguments
   |
help: add missing generic argument
   |
92 |     fn schema(&mut self, schema: &ArrowSchema, values: Vec<Self::T>) -> Result<Self::U, E>;
   |                                                                                       +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:95:71
   |
95 |     fn r#struct(&mut self, fields: &Fields, results: Vec<Self::T>) -> Result<Self::T>;
   |                                                                       ^^^^^^ ------- supplied 1 generic argument
   |                                                                       |
   |                                                                       expected 2 generic arguments
   |
help: add missing generic argument
   |
95 |     fn r#struct(&mut self, fields: &Fields, results: Vec<Self::T>) -> Result<Self::T, E>;
   |                                                                                     +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
  --> crates/iceberg/src/arrow/schema.rs:98:60
   |
98 |     fn list(&mut self, list: &DataType, value: Self::T) -> Result<Self::T>;
   |                                                            ^^^^^^ ------- supplied 1 generic argument
   |                                                            |
   |                                                            expected 2 generic arguments
   |
help: add missing generic argument
   |
98 |     fn list(&mut self, list: &DataType, value: Self::T) -> Result<Self::T, E>;
   |                                                                          +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:101:78
    |
101 |     fn map(&mut self, map: &DataType, key_value: Self::T, value: Self::T) -> Result<Self::T>;
    |                                                                              ^^^^^^ ------- supplied 1 generic argument
    |                                                                              |
    |                                                                              expected 2 generic arguments
    |
help: add missing generic argument
    |
101 |     fn map(&mut self, map: &DataType, key_value: Self::T, value: Self::T) -> Result<Self::T, E>;
    |                                                                                            +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:104:46
    |
104 |     fn primitive(&mut self, p: &DataType) -> Result<Self::T>;
    |                                              ^^^^^^ ------- supplied 1 generic argument
    |                                              |
    |                                              expected 2 generic arguments
    |
help: add missing generic argument
    |
104 |     fn primitive(&mut self, p: &DataType) -> Result<Self::T, E>;
    |                                                            +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:264:67
    |
264 |     fn convert_fields(fields: &Fields, field_results: &[Type]) -> Result<Vec<NestedFieldRef>> {
    |                                                                   ^^^^^^ ------------------- supplied 1 generic argument
    |                                                                   |
    |                                                                   expected 2 generic arguments
    |
help: add missing generic argument
    |
264 |     fn convert_fields(fields: &Fields, field_results: &[Type]) -> Result<Vec<NestedFieldRef>, E> {
    |                                                                                             +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:290:73
    |
290 |     fn schema(&mut self, schema: &ArrowSchema, values: Vec<Self::T>) -> Result<Self::U> {
    |                                                                         ^^^^^^ ------- supplied 1 generic argument
    |                                                                         |
    |                                                                         expected 2 generic arguments
    |
help: add missing generic argument
    |
290 |     fn schema(&mut self, schema: &ArrowSchema, values: Vec<Self::T>) -> Result<Self::U, E> {
    |                                                                                       +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:296:71
    |
296 |     fn r#struct(&mut self, fields: &Fields, results: Vec<Self::T>) -> Result<Self::T> {
    |                                                                       ^^^^^^ ------- supplied 1 generic argument
    |                                                                       |
    |                                                                       expected 2 generic arguments
    |
help: add missing generic argument
    |
296 |     fn r#struct(&mut self, fields: &Fields, results: Vec<Self::T>) -> Result<Self::T, E> {
    |                                                                                     +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:301:60
    |
301 |     fn list(&mut self, list: &DataType, value: Self::T) -> Result<Self::T> {
    |                                                            ^^^^^^ ------- supplied 1 generic argument
    |                                                            |
    |                                                            expected 2 generic arguments
    |
help: add missing generic argument
    |
301 |     fn list(&mut self, list: &DataType, value: Self::T) -> Result<Self::T, E> {
    |                                                                          +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:325:78
    |
325 |     fn map(&mut self, map: &DataType, key_value: Self::T, value: Self::T) -> Result<Self::T> {
    |                                                                              ^^^^^^ ------- supplied 1 generic argument
    |                                                                              |
    |                                                                              expected 2 generic arguments
    |
help: add missing generic argument
    |
325 |     fn map(&mut self, map: &DataType, key_value: Self::T, value: Self::T) -> Result<Self::T, E> {
    |                                                                                            +++

error[E0107]: enum takes 2 generic arguments but 1 generic argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:376:46
    |
376 |     fn primitive(&mut self, p: &DataType) -> Result<Self::T> {
    |                                              ^^^^^^ ------- supplied 1 generic argument
    |                                              |
    |                                              expected 2 generic arguments
    |
help: add missing generic argument
    |
376 |     fn primitive(&mut self, p: &DataType) -> Result<Self::T, E> {
    |                                                            +++

error[E0191]: the value of the associated type `T` in `ArrowSchemaVisitor` must be specified
   --> crates/iceberg/src/arrow/schema.rs:213:30
    |
46  |     type T;
    |     ------ `T` defined here
...
213 |     let mut visitor: Box<dyn ArrowSchemaVisitor<U=Schema>> = match has_ids {
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: specify the associated type: `ArrowSchemaVisitor<U=Schema, T = Type>`

error[E0433]: failed to resolve: use of undeclared type `HasIds`
   --> crates/iceberg/src/arrow/schema.rs:212:45
    |
212 |     let has_ids = visit_schema(schema, &mut HasIds::new());
    |                                             ^^^^^^ use of undeclared type `HasIds`

error[E0433]: failed to resolve: use of undeclared type `ConvertToIceberg`
   --> crates/iceberg/src/arrow/schema.rs:214:30
    |
214 |         Ok(true) => Box::new(ConvertToIceberg::new()),
    |                              ^^^^^^^^^^^^^^^^ use of undeclared type `ConvertToIceberg`

error[E0433]: failed to resolve: use of undeclared type `ConvertToIceberg`
   --> crates/iceberg/src/arrow/schema.rs:217:43
    |
217 |                 Some(mapping) => Box::new(ConvertToIceberg::new_with_mapping(mapping)),
    |                                           ^^^^^^^^^^^^^^^^ use of undeclared type `ConvertToIceberg`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/arrow/schema.rs:642:9
    |
642 |         arrow_schema_to_schema(schema)
    |         ^^^^^^^^^^^^^^^^^^^^^^-------- an argument is missing
    |
note: function defined here
   --> crates/iceberg/src/arrow/schema.rs:211:8
    |
211 | pub fn arrow_schema_to_schema(schema: &ArrowSchema, name_mapping: Option<NameMapping>) -> Result<Schema, &'static str> {
    |        ^^^^^^^^^^^^^^^^^^^^^^ --------------------  ---------------------------------
help: provide the argument
    |
642 |         arrow_schema_to_schema(schema, /* name_mapping */)
    |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/schema.rs:642:9
    |
641 |     fn try_from(schema: &ArrowSchema) -> crate::Result<Self> {
    |                                          ------------------- expected `std::result::Result<spec::schema::Schema, error::Error>` because of return type
642 |         arrow_schema_to_schema(schema)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<Schema, Error>`, found `Result<Schema, &str>`
    |
    = note: expected enum `std::result::Result<_, error::Error>`
               found enum `std::result::Result<_, &'static str>`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/arrow/reader.rs:173:34
    |
173 |             let iceberg_schema = arrow_schema_to_schema(arrow_schema)?;
    |                                  ^^^^^^^^^^^^^^^^^^^^^^-------------- an argument is missing
    |
note: function defined here
   --> crates/iceberg/src/arrow/schema.rs:211:8
    |
211 | pub fn arrow_schema_to_schema(schema: &ArrowSchema, name_mapping: Option<NameMapping>) -> Result<Schema, &'static str> {
    |        ^^^^^^^^^^^^^^^^^^^^^^ --------------------  ---------------------------------
help: provide the argument
    |
173 |             let iceberg_schema = arrow_schema_to_schema(arrow_schema, /* name_mapping */)?;
    |                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:173:70
    |
173 |             let iceberg_schema = arrow_schema_to_schema(arrow_schema)?;
    |                                                                      ^ the trait `From<&str>` is not implemented for `error::Error`, which is required by `std::result::Result<ProjectionMask, error::Error>: FromResidual<std::result::Result<Infallible, &str>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `std::result::Result<ProjectionMask, error::Error>` to implement `FromResidual<std::result::Result<Infallible, &str>>`

Some errors have detailed explanations: E0061, E0107, E0191, E0252, E0277, E0308, E0412, E0433.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 35 previous errors; 1 warning emitted


Fail
file path is :
projects/iceberg/rust/crates/catalog/glue/src/catalog.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
   Compiling iceberg-catalog-hms v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/hms)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
warning: unused import: `from_aws_build_error`
  --> crates/catalog/glue/src/catalog.rs:31:20
   |
31 | use crate::error::{from_aws_build_error, from_aws_sdk_error};
   |                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0728]: `await` is only allowed inside `async` functions and blocks
   --> crates/catalog/glue/src/catalog.rs:578:48
    |
573 |             .unwrap_or_else(|_| {
    |                             --- this is not `async`
...
578 |                 self.delete_table(dest, false).await?;
    |                                                ^^^^^ only allowed inside `async` functions and blocks

error[E0599]: the method `as_ref` exists for reference `&TableIdent`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:522:55
    |
522 |         let dest_namespace = validate_namespace(&dest.as_ref())?;
    |                                                       ^^^^^^ method cannot be called on `&TableIdent` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:182:1
    |
182 | pub struct TableIdent {
    | --------------------- doesn't satisfy `TableIdent: AsRef<_>`
    |
    = note: the following trait bounds were not satisfied:
            `TableIdent: AsRef<_>`
            which is required by `&TableIdent: AsRef<_>`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:523:35
    |
523 |         if !self.namespace_exists(dest_namespace).await {
    |                  ---------------- ^^^^^^^^^^^^^^ expected `&NamespaceIdent`, found `String`
    |                  |
    |                  arguments to this method are incorrect
    |
note: method defined here
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:54:14
    |
54  |     async fn namespace_exists(&self, namespace: &NamespaceIdent) -> Result<bool>;
    |              ^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:523:13
    |
523 |         if !self.namespace_exists(dest_namespace).await {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |
    = note: expected type `bool`
               found enum `std::result::Result<bool, iceberg::Error>`
help: consider using `Result::expect` to unwrap the `std::result::Result<bool, iceberg::Error>` value, panicking if the value is a `Result::Err`
    |
523 |         if !self.namespace_exists(dest_namespace).await.expect("REASON") {
    |                                                        +++++++++++++++++

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:528:21
    |
528 |                     src, dest, dest_namespace
    |                     ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:528:26
    |
528 |                     src, dest, dest_namespace
    |                          ^^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `get_table` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:534:30
    |
534 |         let src_table = self.get_table(src).await?;
    |                              ^^^^^^^^^ method not found in `&GlueCatalog`
    |
help: one of the expressions' fields has a method of the same name
    |
534 |         let src_table = self.client.0.get_table(src).await?;
    |                              +++++++++

error[E0599]: the method `as_ref` exists for reference `&TableIdent`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:535:51
    |
535 |         let src_db_name = validate_namespace(&src.as_ref())?;
    |                                                   ^^^^^^ method cannot be called on `&TableIdent` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:182:1
    |
182 | pub struct TableIdent {
    | --------------------- doesn't satisfy `TableIdent: AsRef<_>`
    |
    = note: the following trait bounds were not satisfied:
            `TableIdent: AsRef<_>`
            which is required by `&TableIdent: AsRef<_>`

error[E0599]: the method `as_ref` exists for reference `&TableIdent`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:536:34
    |
536 |         let src_table_name = src.as_ref()[1].clone();
    |                                  ^^^^^^ method cannot be called on `&TableIdent` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:182:1
    |
182 | pub struct TableIdent {
    | --------------------- doesn't satisfy `TableIdent: AsRef<_>`
    |
    = note: the following trait bounds were not satisfied:
            `TableIdent: AsRef<_>`
            which is required by `&TableIdent: AsRef<_>`

error[E0599]: the method `as_ref` exists for reference `&TableIdent`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:537:39
    |
537 |         let dest_db_name = match dest.as_ref() {
    |                                       ^^^^^^ method cannot be called on `&TableIdent` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:182:1
    |
182 | pub struct TableIdent {
    | --------------------- doesn't satisfy `TableIdent: AsRef<_>`
    |
    = note: the following trait bounds were not satisfied:
            `TableIdent: AsRef<_>`
            which is required by `&TableIdent: AsRef<_>`

error[E0599]: the method `as_ref` exists for reference `&TableIdent`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:544:42
    |
544 |         let dest_table_name = match dest.as_ref() {
    |                                          ^^^^^^ method cannot be called on `&TableIdent` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:182:1
    |
182 | pub struct TableIdent {
    | --------------------- doesn't satisfy `TableIdent: AsRef<_>`
    |
    = note: the following trait bounds were not satisfied:
            `TableIdent: AsRef<_>`
            which is required by `&TableIdent: AsRef<_>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:555:14
    |
555 |             .parameters(src_table.parameters())
    |              ^^^^^^^^^^------------------------ an argument is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:12
    |
375 |     pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>)...
    |            ^^^^^^^^^^
help: provide the argument
    |
555 |             .parameters(src_table.parameters(), /* v */)
    |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `storageDescriptor` found for struct `TableInputBuilder` in the current scope
   --> crates/catalog/glue/src/catalog.rs:556:14
    |
553 |           let table_input = TableInput::builder()
    |  ___________________________-
554 | |             .owner(src_table.tableType)
555 | |             .parameters(src_table.parameters())
556 | |             .storageDescriptor(src_table.storageDescriptor())
    | |             -^^^^^^^^^^^^^^^^^ help: there is a method with a similar name: `storage_descriptor`
    | |_____________|
    | 

error[E0599]: no method named `create_table` found for struct `GlueClient` in the current scope
   --> crates/catalog/glue/src/catalog.rs:561:21
    |
50  | struct GlueClient(aws_sdk_glue::Client);
    | ----------------- method `create_table` not found for this struct
...
561 |         self.client.create_table()
    |                     ^^^^^^^^^^^^ method not found in `GlueClient`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `create_table`, perhaps you need to implement it:
            candidate #1: `Catalog`
help: one of the expressions' fields has a method of the same name
    |
561 |         self.client.0.create_table()
    |                     ++

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:568:57
    |
568 |         println!("created rename destination table {}", dest);
    |                                                         ^^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:571:14
    |
571 |         self.drop_table(src, false)
    |              ^^^^^^^^^^    -------
    |                            | |
    |                            | unexpected argument of type `bool`
    |                            help: remove the extra argument
    |
note: method defined here
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:84:14
    |
84  |     async fn drop_table(&self, table: &TableIdent) -> Result<()>;
    |              ^^^^^^^^^^

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:576:21
    |
576 |                     src, dest
    |                     ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:576:26
    |
576 |                     src, dest
    |                          ^^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:580:17
    |
580 | /                 Err(Error::new(
581 | |                     ErrorKind::Unexpected,
582 | |                     "Error dropping table"
583 | |                 ))
    | |                  ^- help: consider using a semicolon here: `;`
    | |__________________|
    |                    expected `()`, found `Result<_, Error>`
    |
    = note: expected unit type `()`
                    found enum `std::result::Result<_, iceberg::Error>`
note: return type inferred to be `()` here
   --> crates/catalog/glue/src/catalog.rs:578:17
    |
578 |                 self.delete_table(dest, false).await?;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:586:62
    |
586 |         println!("Successfully renamed table from {} to {}", src, dest);
    |                                                              ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:586:67
    |
586 |         println!("Successfully renamed table from {} to {}", src, dest);
    |                                                                   ^^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)

Some errors have detailed explanations: E0061, E0277, E0308, E0599, E0728.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib test) generated 1 warning
error: could not compile `iceberg-catalog-glue` (lib test) due to 21 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
warning: unused import: `from_aws_build_error`
  --> crates/catalog/glue/src/catalog.rs:31:20
   |
31 | use crate::error::{from_aws_build_error, from_aws_sdk_error};
   |                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0728]: `await` is only allowed inside `async` functions and blocks
   --> crates/catalog/glue/src/catalog.rs:578:48
    |
573 |             .unwrap_or_else(|_| {
    |                             --- this is not `async`
...
578 |                 self.delete_table(dest, false).await?;
    |                                                ^^^^^ only allowed inside `async` functions and blocks

error[E0599]: the method `as_ref` exists for reference `&TableIdent`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:522:55
    |
522 |         let dest_namespace = validate_namespace(&dest.as_ref())?;
    |                                                       ^^^^^^ method cannot be called on `&TableIdent` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:182:1
    |
182 | pub struct TableIdent {
    | --------------------- doesn't satisfy `TableIdent: AsRef<_>`
    |
    = note: the following trait bounds were not satisfied:
            `TableIdent: AsRef<_>`
            which is required by `&TableIdent: AsRef<_>`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:523:35
    |
523 |         if !self.namespace_exists(dest_namespace).await {
    |                  ---------------- ^^^^^^^^^^^^^^ expected `&NamespaceIdent`, found `String`
    |                  |
    |                  arguments to this method are incorrect
    |
note: method defined here
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:54:14
    |
54  |     async fn namespace_exists(&self, namespace: &NamespaceIdent) -> Result<bool>;
    |              ^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:523:13
    |
523 |         if !self.namespace_exists(dest_namespace).await {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |
    = note: expected type `bool`
               found enum `Result<bool, iceberg::Error>`
help: consider using `Result::expect` to unwrap the `Result<bool, iceberg::Error>` value, panicking if the value is a `Result::Err`
    |
523 |         if !self.namespace_exists(dest_namespace).await.expect("REASON") {
    |                                                        +++++++++++++++++

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:528:21
    |
528 |                     src, dest, dest_namespace
    |                     ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:528:26
    |
528 |                     src, dest, dest_namespace
    |                          ^^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `get_table` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:534:30
    |
534 |         let src_table = self.get_table(src).await?;
    |                              ^^^^^^^^^ method not found in `&GlueCatalog`
    |
help: one of the expressions' fields has a method of the same name
    |
534 |         let src_table = self.client.0.get_table(src).await?;
    |                              +++++++++

error[E0599]: the method `as_ref` exists for reference `&TableIdent`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:535:51
    |
535 |         let src_db_name = validate_namespace(&src.as_ref())?;
    |                                                   ^^^^^^ method cannot be called on `&TableIdent` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:182:1
    |
182 | pub struct TableIdent {
    | --------------------- doesn't satisfy `TableIdent: AsRef<_>`
    |
    = note: the following trait bounds were not satisfied:
            `TableIdent: AsRef<_>`
            which is required by `&TableIdent: AsRef<_>`

error[E0599]: the method `as_ref` exists for reference `&TableIdent`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:536:34
    |
536 |         let src_table_name = src.as_ref()[1].clone();
    |                                  ^^^^^^ method cannot be called on `&TableIdent` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:182:1
    |
182 | pub struct TableIdent {
    | --------------------- doesn't satisfy `TableIdent: AsRef<_>`
    |
    = note: the following trait bounds were not satisfied:
            `TableIdent: AsRef<_>`
            which is required by `&TableIdent: AsRef<_>`

error[E0599]: the method `as_ref` exists for reference `&TableIdent`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:537:39
    |
537 |         let dest_db_name = match dest.as_ref() {
    |                                       ^^^^^^ method cannot be called on `&TableIdent` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:182:1
    |
182 | pub struct TableIdent {
    | --------------------- doesn't satisfy `TableIdent: AsRef<_>`
    |
    = note: the following trait bounds were not satisfied:
            `TableIdent: AsRef<_>`
            which is required by `&TableIdent: AsRef<_>`

error[E0599]: the method `as_ref` exists for reference `&TableIdent`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:544:42
    |
544 |         let dest_table_name = match dest.as_ref() {
    |                                          ^^^^^^ method cannot be called on `&TableIdent` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:182:1
    |
182 | pub struct TableIdent {
    | --------------------- doesn't satisfy `TableIdent: AsRef<_>`
    |
    = note: the following trait bounds were not satisfied:
            `TableIdent: AsRef<_>`
            which is required by `&TableIdent: AsRef<_>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:555:14
    |
555 |             .parameters(src_table.parameters())
    |              ^^^^^^^^^^------------------------ an argument is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:12
    |
375 |     pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>)...
    |            ^^^^^^^^^^
help: provide the argument
    |
555 |             .parameters(src_table.parameters(), /* v */)
    |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `storageDescriptor` found for struct `TableInputBuilder` in the current scope
   --> crates/catalog/glue/src/catalog.rs:556:14
    |
553 |           let table_input = TableInput::builder()
    |  ___________________________-
554 | |             .owner(src_table.tableType)
555 | |             .parameters(src_table.parameters())
556 | |             .storageDescriptor(src_table.storageDescriptor())
    | |             -^^^^^^^^^^^^^^^^^ help: there is a method with a similar name: `storage_descriptor`
    | |_____________|
    | 

error[E0599]: no method named `create_table` found for struct `GlueClient` in the current scope
   --> crates/catalog/glue/src/catalog.rs:561:21
    |
50  | struct GlueClient(aws_sdk_glue::Client);
    | ----------------- method `create_table` not found for this struct
...
561 |         self.client.create_table()
    |                     ^^^^^^^^^^^^ method not found in `GlueClient`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `create_table`, perhaps you need to implement it:
            candidate #1: `Catalog`
help: one of the expressions' fields has a method of the same name
    |
561 |         self.client.0.create_table()
    |                     ++

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:568:57
    |
568 |         println!("created rename destination table {}", dest);
    |                                                         ^^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:571:14
    |
571 |         self.drop_table(src, false)
    |              ^^^^^^^^^^    -------
    |                            | |
    |                            | unexpected argument of type `bool`
    |                            help: remove the extra argument
    |
note: method defined here
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:84:14
    |
84  |     async fn drop_table(&self, table: &TableIdent) -> Result<()>;
    |              ^^^^^^^^^^

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:576:21
    |
576 |                     src, dest
    |                     ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:576:26
    |
576 |                     src, dest
    |                          ^^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:580:17
    |
580 | /                 Err(Error::new(
581 | |                     ErrorKind::Unexpected,
582 | |                     "Error dropping table"
583 | |                 ))
    | |                  ^- help: consider using a semicolon here: `;`
    | |__________________|
    |                    expected `()`, found `Result<_, Error>`
    |
    = note: expected unit type `()`
                    found enum `Result<_, iceberg::Error>`
note: return type inferred to be `()` here
   --> crates/catalog/glue/src/catalog.rs:578:17
    |
578 |                 self.delete_table(dest, false).await?;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:586:62
    |
586 |         println!("Successfully renamed table from {} to {}", src, dest);
    |                                                              ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:586:67
    |
586 |         println!("Successfully renamed table from {} to {}", src, dest);
    |                                                                   ^^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)

Some errors have detailed explanations: E0061, E0277, E0308, E0599, E0728.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib) generated 1 warning
error: could not compile `iceberg-catalog-glue` (lib) due to 21 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...


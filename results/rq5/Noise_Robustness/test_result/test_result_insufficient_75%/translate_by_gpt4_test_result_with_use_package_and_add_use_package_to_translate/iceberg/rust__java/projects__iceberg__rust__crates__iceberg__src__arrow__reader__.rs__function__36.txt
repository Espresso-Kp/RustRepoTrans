Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: expected `;`, found keyword `if`
   --> crates/iceberg/src/arrow/reader.rs:570:120
    |
570 |     let always_true: Box<PredicateResult> = Box::new(move |_| { Ok(BooleanArray::from(vec![true; batch.num_rows()])) })
    |                                                                                                                        ^ help: add `;` here
571 |
572 |     if *left == *always_true || *right == *always_true {
    |     -- unexpected token

error[E0425]: cannot find value `batch` in this scope
   --> crates/iceberg/src/arrow/reader.rs:570:98
    |
570 |     let always_true: Box<PredicateResult> = Box::new(move |_| { Ok(BooleanArray::from(vec![true; batch.num_rows()])) })
    |                                                                                                  ^^^^^ not found in this scope

error[E0425]: cannot find value `always_false` in this scope
   --> crates/iceberg/src/arrow/reader.rs:574:25
    |
574 |     } else if *left == *always_false {
    |                         ^^^^^^^^^^^^
    |
help: you might have meant to refer to the method
    |
574 |     } else if *left == *self.always_false {
    |                         +++++
help: a local variable with a similar name exists
    |
574 |     } else if *left == *always_true {
    |                         ~~~~~~~~~~~

error[E0425]: cannot find value `always_false` in this scope
   --> crates/iceberg/src/arrow/reader.rs:576:26
    |
576 |     } else if *right == *always_false {
    |                          ^^^^^^^^^^^^
    |
help: you might have meant to refer to the method
    |
576 |     } else if *right == *self.always_false {
    |                          +++++
help: a local variable with a similar name exists
    |
576 |     } else if *right == *always_true {
    |                          ~~~~~~~~~~~

warning: unused import: `or`
  --> crates/iceberg/src/arrow/reader.rs:21:60
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                                                            ^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:559:9
    |
558 |     match left {
    |           ---- this expression has type `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
559 |         None => return Err(Err("Left expression cannot be null.").into()),
    |         ^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Option<_>`
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::option::Option<_>`

error[E0277]: the trait bound `error::Error: From<std::result::Result<_, &str>>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:559:67
    |
559 |         None => return Err(Err("Left expression cannot be null.").into()),
    |                                                                   ^^^^ the trait `From<std::result::Result<_, &str>>` is not implemented for `error::Error`, which is required by `std::result::Result<_, &str>: Into<_>`
    |
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `std::result::Result<_, &str>` to implement `Into<error::Error>`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:565:9
    |
564 |     match right {
    |           ----- this expression has type `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
565 |         None => return Err(Err("Right expression cannot be null.").into()),
    |         ^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Option<_>`
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::option::Option<_>`

error[E0277]: the trait bound `error::Error: From<std::result::Result<_, &str>>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:565:68
    |
565 |         None => return Err(Err("Right expression cannot be null.").into()),
    |                                                                    ^^^^ the trait `From<std::result::Result<_, &str>>` is not implemented for `error::Error`, which is required by `std::result::Result<_, &str>: Into<_>`
    |
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `std::result::Result<_, &str>` to implement `Into<error::Error>`

error[E0369]: binary operation `==` cannot be applied to type `dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
   --> crates/iceberg/src/arrow/reader.rs:572:14
    |
572 |     if *left == *always_true || *right == *always_true {
    |        ----- ^^ ------------ dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send
    |        |
    |        dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send
    |
help: use parentheses to call these
    |
572 |     if (*left)(/* RecordBatch */) == (*always_true)(/* RecordBatch */) || *right == *always_true {
    |        +     ++++++++++++++++++++    +            ++++++++++++++++++++

error[E0369]: binary operation `==` cannot be applied to type `dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
   --> crates/iceberg/src/arrow/reader.rs:572:40
    |
572 |     if *left == *always_true || *right == *always_true {
    |                                 ------ ^^ ------------ dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send
    |                                 |
    |                                 dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send
    |
help: use parentheses to call these
    |
572 |     if *left == *always_true || (*right)(/* RecordBatch */) == (*always_true)(/* RecordBatch */) {
    |                                 +      ++++++++++++++++++++    +            ++++++++++++++++++++

error[E0599]: no method named `into_no_null_iter` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:582:41
    |
582 |             let left_arr = left(batch)?.into_no_null_iter();
    |                                         ^^^^^^^^^^^^^^^^^ method not found in `BooleanArray`

error[E0599]: no method named `into_no_null_iter` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:583:43
    |
583 |             let right_arr = right(batch)?.into_no_null_iter();
    |                                           ^^^^^^^^^^^^^^^^^ method not found in `BooleanArray`

Some errors have detailed explanations: E0277, E0308, E0369, E0425, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 12 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
warning: `iceberg` (lib test) generated 1 warning (1 duplicate)
error: could not compile `iceberg` (lib test) due to 12 previous errors; 1 warning emitted

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: expected `;`, found keyword `if`
   --> crates/iceberg/src/arrow/reader.rs:570:120
    |
570 |     let always_true: Box<PredicateResult> = Box::new(move |_| { Ok(BooleanArray::from(vec![true; batch.num_rows()])) })
    |                                                                                                                        ^ help: add `;` here
571 |
572 |     if *left == *always_true || *right == *always_true {
    |     -- unexpected token

error[E0425]: cannot find value `batch` in this scope
   --> crates/iceberg/src/arrow/reader.rs:570:98
    |
570 |     let always_true: Box<PredicateResult> = Box::new(move |_| { Ok(BooleanArray::from(vec![true; batch.num_rows()])) })
    |                                                                                                  ^^^^^ not found in this scope

error[E0425]: cannot find value `always_false` in this scope
   --> crates/iceberg/src/arrow/reader.rs:574:25
    |
574 |     } else if *left == *always_false {
    |                         ^^^^^^^^^^^^
    |
help: you might have meant to refer to the method
    |
574 |     } else if *left == *self.always_false {
    |                         +++++
help: a local variable with a similar name exists
    |
574 |     } else if *left == *always_true {
    |                         ~~~~~~~~~~~

error[E0425]: cannot find value `always_false` in this scope
   --> crates/iceberg/src/arrow/reader.rs:576:26
    |
576 |     } else if *right == *always_false {
    |                          ^^^^^^^^^^^^
    |
help: you might have meant to refer to the method
    |
576 |     } else if *right == *self.always_false {
    |                          +++++
help: a local variable with a similar name exists
    |
576 |     } else if *right == *always_true {
    |                          ~~~~~~~~~~~

warning: unused import: `or`
  --> crates/iceberg/src/arrow/reader.rs:21:60
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                                                            ^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:559:9
    |
558 |     match left {
    |           ---- this expression has type `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
559 |         None => return Err(Err("Left expression cannot be null.").into()),
    |         ^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Option<_>`
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::option::Option<_>`

error[E0277]: the trait bound `error::Error: From<std::result::Result<_, &str>>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:559:67
    |
559 |         None => return Err(Err("Left expression cannot be null.").into()),
    |                                                                   ^^^^ the trait `From<std::result::Result<_, &str>>` is not implemented for `error::Error`, which is required by `std::result::Result<_, &str>: Into<_>`
    |
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `std::result::Result<_, &str>` to implement `Into<error::Error>`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:565:9
    |
564 |     match right {
    |           ----- this expression has type `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
565 |         None => return Err(Err("Right expression cannot be null.").into()),
    |         ^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Option<_>`
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::option::Option<_>`

error[E0277]: the trait bound `error::Error: From<std::result::Result<_, &str>>` is not satisfied
   --> crates/iceberg/src/arrow/reader.rs:565:68
    |
565 |         None => return Err(Err("Right expression cannot be null.").into()),
    |                                                                    ^^^^ the trait `From<std::result::Result<_, &str>>` is not implemented for `error::Error`, which is required by `std::result::Result<_, &str>: Into<_>`
    |
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `std::result::Result<_, &str>` to implement `Into<error::Error>`

error[E0369]: binary operation `==` cannot be applied to type `dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
   --> crates/iceberg/src/arrow/reader.rs:572:14
    |
572 |     if *left == *always_true || *right == *always_true {
    |        ----- ^^ ------------ dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send
    |        |
    |        dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send
    |
help: use parentheses to call these
    |
572 |     if (*left)(/* RecordBatch */) == (*always_true)(/* RecordBatch */) || *right == *always_true {
    |        +     ++++++++++++++++++++    +            ++++++++++++++++++++

error[E0369]: binary operation `==` cannot be applied to type `dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
   --> crates/iceberg/src/arrow/reader.rs:572:40
    |
572 |     if *left == *always_true || *right == *always_true {
    |                                 ------ ^^ ------------ dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send
    |                                 |
    |                                 dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send
    |
help: use parentheses to call these
    |
572 |     if *left == *always_true || (*right)(/* RecordBatch */) == (*always_true)(/* RecordBatch */) {
    |                                 +      ++++++++++++++++++++    +            ++++++++++++++++++++

error[E0599]: no method named `into_no_null_iter` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:582:41
    |
582 |             let left_arr = left(batch)?.into_no_null_iter();
    |                                         ^^^^^^^^^^^^^^^^^ method not found in `BooleanArray`

error[E0599]: no method named `into_no_null_iter` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:583:43
    |
583 |             let right_arr = right(batch)?.into_no_null_iter();
    |                                           ^^^^^^^^^^^^^^^^^ method not found in `BooleanArray`

Some errors have detailed explanations: E0277, E0308, E0369, E0425, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 12 previous errors; 1 warning emitted


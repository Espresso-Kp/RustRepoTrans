Fail
file path is :
projects/deltachat-core/rust/src/chat.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0425]: cannot find value `DC_CONTEXT_MAGIC` in this scope
   --> src/chat.rs:973:45
    |
973 |     if context.is_none() || context.magic!= DC_CONTEXT_MAGIC {
    |                                             ^^^^^^^^^^^^^^^^ not found in this scope

error[E0599]: no method named `is_none` found for reference `&context::Context` in the current scope
   --> src/chat.rs:973:16
    |
973 |     if context.is_none() || context.magic!= DC_CONTEXT_MAGIC {
    |                ^^^^^^^ method not found in `&Context`

error[E0609]: no field `magic` on type `&context::Context`
   --> src/chat.rs:973:37
    |
973 |     if context.is_none() || context.magic!= DC_CONTEXT_MAGIC {
    |                                     ^^^^^ unknown field
    |
    = note: available field is: `inner`
    = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0599]: `&ChatId` is not an iterator
   --> src/chat.rs:977:22
    |
166 | pub struct ChatId(u32);
    | ----------------- doesn't satisfy `ChatId: Iterator`
...
977 |     let count = self.count(
    |                 -----^^^^^ `&ChatId` is not an iterator
    |
    = note: the following trait bounds were not satisfied:
            `&ChatId: Iterator`
            which is required by `&mut &ChatId: Iterator`
            `ChatId: Iterator`
            which is required by `&mut ChatId: Iterator`
note: the trait `Iterator` must be implemented
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:75:1
    |
75  | pub trait Iterator {
    | ^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `count`, perhaps you need to implement it:
            candidate #1: `Iterator`

error[E0782]: trait objects must include the `dyn` keyword
   --> src/chat.rs:979:9
    |
979 |         rusqlite::Params::try_from(vec![chat_id.0 as i32])?,
    |         ^^^^^^^^^^^^^^^^
    |
help: add `dyn` keyword before this trait
    |
979 |         <dyn rusqlite::Params>::try_from(vec![chat_id.0 as i32])?,
    |         ++++                 +

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
   --> src/chat.rs:979:9
    |
979 |         rusqlite::Params::try_from(vec![chat_id.0 as i32])?,
    |         ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`
note: required by a bound in `try_from`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:678:23
    |
678 | pub trait TryFrom<T>: Sized {
    |                       ^^^^^ required by this bound in `TryFrom::try_from`
...
686 |     fn try_from(value: T) -> Result<Self, Self::Error>;
    |        -------- required by a bound in this associated function

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
   --> src/chat.rs:979:9
    |
979 |         rusqlite::Params::try_from(vec![chat_id.0 as i32])?,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`, which is required by `dyn rusqlite::Params: TryFrom<_>`
    = note: required for `dyn rusqlite::Params` to implement `TryFrom<_>`

error[E0277]: the trait bound `dyn rusqlite::Params: From<Vec<i32>>` is not satisfied
   --> src/chat.rs:979:9
    |
979 |         rusqlite::Params::try_from(vec![chat_id.0 as i32])?,
    |         ^^^^^^^^^^^^^^^^ the trait `From<Vec<i32>>` is not implemented for `dyn rusqlite::Params`, which is required by `dyn rusqlite::Params: TryFrom<_>`
    |
    = note: required for `Vec<i32>` to implement `Into<dyn rusqlite::Params>`
    = note: required for `dyn rusqlite::Params` to implement `TryFrom<Vec<i32>>`

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
   --> src/chat.rs:979:9
    |
979 |         rusqlite::Params::try_from(vec![chat_id.0 as i32])?,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`, which is required by `std::result::Result<dyn rusqlite::Params, Infallible>: Try`
    = note: required for `std::result::Result<dyn rusqlite::Params, Infallible>` to implement `Try`

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
   --> src/chat.rs:979:9
    |
979 |         rusqlite::Params::try_from(vec![chat_id.0 as i32])?,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `dyn rusqlite::Params` cannot be known at compilation time
   --> src/chat.rs:979:59
    |
979 |         rusqlite::Params::try_from(vec![chat_id.0 as i32])?,
    |                                                           ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn rusqlite::Params`
note: required by a bound in `Break`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:85:25
    |
85  | pub enum ControlFlow<B, C = ()> {
    |                         ^^^^^^ required by this bound in `Break`
...
93  |     Break(B),
    |     ----- required by a bound in this variant

error[E0277]: the trait bound `dyn rusqlite::Params: From<Vec<i32>>` is not satisfied
   --> src/chat.rs:979:9
    |
979 |         rusqlite::Params::try_from(vec![chat_id.0 as i32])?,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<Vec<i32>>` is not implemented for `dyn rusqlite::Params`, which is required by `dyn rusqlite::Params: TryFrom<Vec<i32>>`
    |
    = note: required for `Vec<i32>` to implement `Into<dyn rusqlite::Params>`
    = note: required for `dyn rusqlite::Params` to implement `TryFrom<Vec<i32>>`

error[E0599]: `&chat::ChatId` is not an iterator
   --> src/chat.rs:977:22
    |
166 | pub struct ChatId(u32);
    | ----------------- doesn't satisfy `chat::ChatId: Iterator`
...
977 |     let count = self.count(
    |                 -----^^^^^ `&chat::ChatId` is not an iterator
    |
    = note: the following trait bounds were not satisfied:
            `&chat::ChatId: Iterator`
            which is required by `&mut &chat::ChatId: Iterator`
            `chat::ChatId: Iterator`
            which is required by `&mut chat::ChatId: Iterator`
note: the trait `Iterator` must be implemented
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:75:1
    |
75  | pub trait Iterator {
    | ^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `count`, perhaps you need to implement it:
            candidate #1: `Iterator`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5408:33
     |
5408 |         assert_eq!(msg2.chat_id.get_msg_cnt(&t).await.unwrap(), 2);
     |                                 ^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5408 |         assert_eq!(msg2.chat_id.get_msg_cnt(&t, /* chat::ChatId */).await.unwrap(), 2);
     |                                            ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:5440:28
     |
5440 |         assert_eq!(chat_id.get_msg_cnt(&t).await?, 1);
     |                            ^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
5440 |         assert_eq!(chat_id.get_msg_cnt(&t, /* chat::ChatId */).await?, 1);
     |                                       ~~~~~~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0277, E0425, E0599, E0609, E0782.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `deltachat` (lib) due to 12 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/chat.rs:6298:28
     |
6298 |         assert_eq!(chat_id.get_msg_cnt(&t).await?, 1);
     |                            ^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
6298 |         assert_eq!(chat_id.get_msg_cnt(&t, /* chat::ChatId */).await?, 1);
     |                                       ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:1034:28
     |
1034 |         assert_eq!(chat_id.get_msg_cnt(&t).await?, 2); // instance and info
     |                            ^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
1034 |         assert_eq!(chat_id.get_msg_cnt(&t, /* chat::ChatId */).await?, 2); // instance and info
     |                                       ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:1051:28
     |
1051 |         assert_eq!(chat_id.get_msg_cnt(&t).await?, 3); // two instances, only one info
     |                            ^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
1051 |         assert_eq!(chat_id.get_msg_cnt(&t, /* chat::ChatId */).await?, 3); // two instances, only one info
     |                                       ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:1071:30
     |
1071 |         assert_eq!(alice_grp.get_msg_cnt(&alice).await?, 1);
     |                              ^^^^^^^^^^^-------- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
1071 |         assert_eq!(alice_grp.get_msg_cnt(&alice, /* chat::ChatId */).await?, 1);
     |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:1079:30
     |
1079 |         assert_eq!(alice_grp.get_msg_cnt(&alice).await?, 2);
     |                              ^^^^^^^^^^^-------- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
1079 |         assert_eq!(alice_grp.get_msg_cnt(&alice, /* chat::ChatId */).await?, 2);
     |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:1089:30
     |
1089 |         assert_eq!(alice_grp.get_msg_cnt(&alice).await?, 3);
     |                              ^^^^^^^^^^^-------- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
1089 |         assert_eq!(alice_grp.get_msg_cnt(&alice, /* chat::ChatId */).await?, 3);
     |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:1105:28
     |
1105 |         assert_eq!(bob_grp.get_msg_cnt(&bob).await?, 1);
     |                            ^^^^^^^^^^^------ an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
1105 |         assert_eq!(bob_grp.get_msg_cnt(&bob, /* chat::ChatId */).await?, 1);
     |                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:1619:34
     |
1619 |         assert_eq!(alice_chat.id.get_msg_cnt(&alice).await?, 1);
     |                                  ^^^^^^^^^^^-------- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
1619 |         assert_eq!(alice_chat.id.get_msg_cnt(&alice, /* chat::ChatId */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:1649:32
     |
1649 |         assert_eq!(bob_chat_id.get_msg_cnt(&bob).await?, 1);
     |                                ^^^^^^^^^^^------ an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
1649 |         assert_eq!(bob_chat_id.get_msg_cnt(&bob, /* chat::ChatId */).await?, 1);
     |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:1654:32
     |
1654 |         assert_eq!(bob_chat_id.get_msg_cnt(&bob).await?, 1);
     |                                ^^^^^^^^^^^------ an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
1654 |         assert_eq!(bob_chat_id.get_msg_cnt(&bob, /* chat::ChatId */).await?, 1);
     |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:1669:35
     |
1669 |         assert_eq!(alice2_chat_id.get_msg_cnt(&alice2).await?, 1);
     |                                   ^^^^^^^^^^^--------- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
1669 |         assert_eq!(alice2_chat_id.get_msg_cnt(&alice2, /* chat::ChatId */).await?, 1);
     |                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:1675:34
     |
1675 |         assert_eq!(alice_chat.id.get_msg_cnt(&alice).await?, 1);
     |                                  ^^^^^^^^^^^-------- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
1675 |         assert_eq!(alice_chat.id.get_msg_cnt(&alice, /* chat::ChatId */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:2270:34
     |
2270 |         assert_eq!(alice_chat.id.get_msg_cnt(&alice).await?, 1);
     |                                  ^^^^^^^^^^^-------- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
2270 |         assert_eq!(alice_chat.id.get_msg_cnt(&alice, /* chat::ChatId */).await?, 1);
     |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:2281:34
     |
2281 |         assert_eq!(alice_chat.id.get_msg_cnt(&alice).await?, 2);
     |                                  ^^^^^^^^^^^-------- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
2281 |         assert_eq!(alice_chat.id.get_msg_cnt(&alice, /* chat::ChatId */).await?, 2);
     |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:2303:32
     |
2303 |         assert_eq!(bob_chat_id.get_msg_cnt(&bob).await?, 2);
     |                                ^^^^^^^^^^^------ an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
2303 |         assert_eq!(bob_chat_id.get_msg_cnt(&bob, /* chat::ChatId */).await?, 2);
     |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:2322:35
     |
2322 |         assert_eq!(alice2_chat_id.get_msg_cnt(&alice2).await?, 2);
     |                                   ^^^^^^^^^^^--------- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
2322 |         assert_eq!(alice2_chat_id.get_msg_cnt(&alice2, /* chat::ChatId */).await?, 2);
     |                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:2358:34
     |
2358 |         assert_eq!(alice_chat.id.get_msg_cnt(&alice).await?, 2);
     |                                  ^^^^^^^^^^^-------- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
2358 |         assert_eq!(alice_chat.id.get_msg_cnt(&alice, /* chat::ChatId */).await?, 2);
     |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:2364:34
     |
2364 |         assert_eq!(alice_chat.id.get_msg_cnt(&alice).await?, 2);
     |                                  ^^^^^^^^^^^-------- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
2364 |         assert_eq!(alice_chat.id.get_msg_cnt(&alice, /* chat::ChatId */).await?, 2);
     |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:2372:32
     |
2372 |         assert_eq!(bob_chat_id.get_msg_cnt(&bob).await?, 2);
     |                                ^^^^^^^^^^^------ an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
2372 |         assert_eq!(bob_chat_id.get_msg_cnt(&bob, /* chat::ChatId */).await?, 2);
     |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:2374:32
     |
2374 |         assert_eq!(bob_chat_id.get_msg_cnt(&bob).await?, 2);
     |                                ^^^^^^^^^^^------ an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
2374 |         assert_eq!(bob_chat_id.get_msg_cnt(&bob, /* chat::ChatId */).await?, 2);
     |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:2389:28
     |
2389 |         assert_eq!(chat_id.get_msg_cnt(&t).await?, 2);
     |                            ^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
2389 |         assert_eq!(chat_id.get_msg_cnt(&t, /* chat::ChatId */).await?, 2);
     |                                       ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:2391:28
     |
2391 |         assert_eq!(chat_id.get_msg_cnt(&t).await?, 3);
     |                            ^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
2391 |         assert_eq!(chat_id.get_msg_cnt(&t, /* chat::ChatId */).await?, 3);
     |                                       ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/webxdc.rs:2394:28
     |
2394 |         assert_eq!(chat_id.get_msg_cnt(&t).await?, 4);
     |                            ^^^^^^^^^^^---- an argument of type `chat::ChatId` is missing
     |
note: method defined here
    --> src/chat.rs:972:14
     |
972  | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
     |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
     |
2394 |         assert_eq!(chat_id.get_msg_cnt(&t, /* chat::ChatId */).await?, 4);
     |                                       ~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> src/receive_imf/tests.rs:133:24
    |
133 |     assert_eq!(chat_id.get_msg_cnt(bob).await?, 1);
    |                        ^^^^^^^^^^^----- an argument of type `chat::ChatId` is missing
    |
note: method defined here
   --> src/chat.rs:972:14
    |
972 | pub async fn get_msg_cnt(&self, context: &Context, chat_id: ChatId) -> Result<usize> {
    |              ^^^^^^^^^^^        -----------------  ---------------
help: provide the argument
    |
133 |     assert_eq!(chat_id.get_msg_cnt(bob, /* chat::ChatId */).await?, 1);
    |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0061, E0277, E0425, E0599, E0609, E0782.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `deltachat` (lib test) due to 38 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


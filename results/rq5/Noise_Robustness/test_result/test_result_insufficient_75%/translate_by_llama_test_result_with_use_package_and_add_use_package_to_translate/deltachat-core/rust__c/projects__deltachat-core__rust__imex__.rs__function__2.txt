Fail
file path is :
projects/deltachat-core/rust/src/imex.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `fs` is defined multiple times
  --> src/imex.rs:16:17
   |
4  | use std::fs;
   |     ------- previous import of the module `fs` here
...
16 | use tokio::fs::{self, File};
   |                 ^^^^ `fs` reimported here
   |
   = note: `fs` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
16 | use tokio::fs::{self as other_fs, File};
   |                 ~~~~~~~~~~~~~~~~

error[E0425]: cannot find value `DC_BAK_PREFIX` in this scope
   --> src/imex.rs:131:23
    |
131 |         if name_len > DC_BAK_PREFIX.len() && name.starts_with(DC_BAK_PREFIX)
    |                       ^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_BAK_PREFIX` in this scope
   --> src/imex.rs:131:63
    |
131 |         if name_len > DC_BAK_PREFIX.len() && name.starts_with(DC_BAK_PREFIX)
    |                                                               ^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_BAK_SUFFIX` in this scope
   --> src/imex.rs:132:27
    |
132 |             && name_len > DC_BAK_SUFFIX.len() && name.ends_with(DC_BAK_SUFFIX)
    |                           ^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_BAK_SUFFIX` in this scope
   --> src/imex.rs:132:65
    |
132 |             && name_len > DC_BAK_SUFFIX.len() && name.ends_with(DC_BAK_SUFFIX)
    |                                                                 ^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `new` in module `sql`
   --> src/imex.rs:135:33
    |
135 |             let test_sql = sql::new(_context).await?;
    |                                 ^^^ not found in `sql`
    |
help: consider importing this function
    |
4   + use tagger::new;
    |
help: if you import `new`, refer to it directly
    |
135 -             let test_sql = sql::new(_context).await?;
135 +             let test_sql = new(_context).await?;
    |

error[E0425]: cannot find value `OPEN_READONLY` in module `sql`
   --> src/imex.rs:136:55
    |
136 |             if test_sql.open(curr_pathNfilename, sql::OPEN_READONLY).await? {
    |                                                       ^^^^^^^^^^^^^ not found in `sql`

warning: unused import: `self`
  --> src/imex.rs:16:17
   |
16 | use tokio::fs::{self, File};
   |                 ^^^^
   |
note: the lint level is defined here
  --> src/lib.rs:6:5
   |
6  |     unused,
   |     ^^^^^^
   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
   --> src/imex.rs:557:47
    |
557 |             fs::rename(temp_path, &dest_path).await?;
    |             ----------------------------------^^^^^
    |             |                                ||
    |             |                                |`std::result::Result<(), std::io::Error>` is not a future
    |             |                                help: remove the `.await`
    |             this call returns `std::result::Result<(), std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
   --> src/imex.rs:472:18
    |
471 |             fs::remove_file(unpacked_database)
    |             ---------------------------------- this call returns `std::result::Result<(), std::io::Error>`
472 |                 .await
    |                 -^^^^^
    |                 ||
    |                 |`std::result::Result<(), std::io::Error>` is not a future
    |                 help: remove the `.await`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<(), std::io::Error>` is not a future
   --> src/imex.rs:480:78
    |
480 |                     fs::rename(&from_path, context.get_blobdir().join(name)).await?;
    |                     ---------------------------------------------------------^^^^^
    |                     |                                                       ||
    |                     |                                                       |`std::result::Result<(), std::io::Error>` is not a future
    |                     |                                                       help: remove the `.await`
    |                     this call returns `std::result::Result<(), std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<(), std::io::Error>`, which is required by `std::result::Result<(), std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<(), std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: `std::result::Result<std::fs::ReadDir, std::io::Error>` is not a future
   --> src/imex.rs:126:45
    |
126 |     let dir_handle = fs::read_dir(dir_name).await?;
    |                      -----------------------^^^^^
    |                      |                     ||
    |                      |                     |`std::result::Result<std::fs::ReadDir, std::io::Error>` is not a future
    |                      |                     help: remove the `.await`
    |                      this call returns `std::result::Result<std::fs::ReadDir, std::io::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<std::fs::ReadDir, std::io::Error>`, which is required by `std::result::Result<std::fs::ReadDir, std::io::Error>: std::future::IntoFuture`
    = note: std::result::Result<std::fs::ReadDir, std::io::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<std::fs::ReadDir, std::io::Error>` to implement `std::future::IntoFuture`

error[E0277]: the trait bound `std::string::String: StdError` is not satisfied
   --> src/imex.rs:145:79
    |
145 |     Ok(ret.ok_or_else(|| format!("No backup found in {}", dir_name.display()))?)
    |                                                                               ^ the trait `StdError` is not implemented for `std::string::String`, which is required by `std::result::Result<std::string::String, anyhow::Error>: FromResidual<std::result::Result<Infallible, std::string::String>>`
    |
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `anyhow::Error` to implement `From<std::string::String>`
    = note: required for `std::result::Result<std::string::String, anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, std::string::String>>`

Some errors have detailed explanations: E0252, E0277, E0425.
For more information about an error, try `rustc --explain E0252`.
warning: `deltachat` (lib) generated 1 warning
error: could not compile `deltachat` (lib) due to 12 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
warning: `deltachat` (lib test) generated 1 warning (1 duplicate)
error: could not compile `deltachat` (lib test) due to 12 previous errors; 1 warning emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


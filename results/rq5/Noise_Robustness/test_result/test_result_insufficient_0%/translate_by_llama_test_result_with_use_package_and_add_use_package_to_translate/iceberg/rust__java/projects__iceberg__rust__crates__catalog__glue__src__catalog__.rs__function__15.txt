Fail
file path is :
projects/iceberg/rust/crates/catalog/glue/src/catalog.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
   Compiling iceberg-catalog-hms v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/hms)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
error[E0407]: method `get_table` is not a member of trait `Catalog`
   --> crates/catalog/glue/src/catalog.rs:562:1
    |
562 | / async fn get_table(table_ident: &TableIdent) -> Result<Table> {
563 | |     let catalog_id = with_catalog_id()?;
564 | |     let glue = create_sdk_config()?;
565 | |     let table = glue.get_table(GetTableRequest {
...   |
571 | |     Ok(table.table())
572 | | }
    | |_^ not a member of trait `Catalog`

error[E0201]: duplicate definitions with name `create_table`:
   --> crates/catalog/glue/src/catalog.rs:573:1
    |
341 | /     async fn create_table(
342 | |         &self,
343 | |         namespace: &NamespaceIdent,
344 | |         creation: TableCreation,
...   |
390 | |         Ok(table)
391 | |     }
    | |_____- previous definition here
...
573 | / async fn create_table(table_ident: &TableIdent, table_input: TableInput) -> Result<()> {
574 | |     let catalog_id = with_catalog_id()?;
575 | |     let glue = create_sdk_config()?;
576 | |     glue.create_table(CreateTableRequest {
...   |
582 | |     Ok(())
583 | | }
    | |_^ duplicate definition
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:74:5
    |
74  | /     async fn create_table(
75  | |         &self,
76  | |         namespace: &NamespaceIdent,
77  | |         creation: TableCreation,
78  | |     ) -> Result<Table>;
    | |_______________________- item in trait

error[E0201]: duplicate definitions with name `drop_table`:
   --> crates/catalog/glue/src/catalog.rs:584:1
    |
459 | /     async fn drop_table(&self, table: &TableIdent) -> Result<()> {
460 | |         let db_name = validate_namespace(table.namespace())?;
461 | |         let table_name = table.name();
462 | |
...   |
473 | |         Ok(())
474 | |     }
    | |_____- previous definition here
...
584 | / async fn drop_table(table_ident: &TableIdent, force: bool) -> Result<()> {
585 | |     let catalog_id = with_catalog_id()?;
586 | |     let glue = create_sdk_config()?;
587 | |     if force {
...   |
602 | |     Ok(())
603 | | }
    | |_^ duplicate definition
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:84:5
    |
84  |       async fn drop_table(&self, table: &TableIdent) -> Result<()>;
    |       ------------------------------------------------------------- item in trait

error[E0407]: method `delete_table` is not a member of trait `Catalog`
   --> crates/catalog/glue/src/catalog.rs:604:1
    |
604 |   async fn delete_table(table_ident: &TableIdent) -> Result<()> {
    |   ^        ------------ help: there is an associated function with a similar name: `create_table`
    |  _|
    | |
605 | |     let catalog_id = with_catalog_id()?;
606 | |     let glue = create_sdk_config()?;
607 | |     glue.delete_table(DeleteTableRequest {
...   |
613 | |     Ok(())
614 | | }
    | |_^ not a member of trait `Catalog`

error[E0422]: cannot find struct, variant or union type `GetTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:565:32
    |
565 |     let table = glue.get_table(GetTableRequest {
    |                                ^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `CreateTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:576:23
    |
576 |     glue.create_table(CreateTableRequest {
    |                       ^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `DeleteTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:588:27
    |
588 |         glue.delete_table(DeleteTableRequest {
    |                           ^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `DropTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:595:25
    |
595 |         glue.drop_table(DropTableRequest {
    |                         ^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `DeleteTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:607:23
    |
607 |     glue.delete_table(DeleteTableRequest {
    |                       ^^^^^^^^^^^^^^^^^^ not found in this scope

warning: unused import: `from_aws_build_error`
  --> crates/catalog/glue/src/catalog.rs:31:20
   |
31 | use crate::error::{from_aws_build_error, from_aws_sdk_error};
   |                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:522:42
    |
522 |     let namespace = convert_to_namespace(dest.namespace())?;
    |                     -------------------- ^^^^^^^^^^^^^^^^ expected `&Database`, found `&NamespaceIdent`
    |                     |
    |                     arguments to this function are incorrect
    |
    = note: expected reference `&aws_sdk_glue::types::Database`
               found reference `&iceberg::NamespaceIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:121:15
    |
121 | pub(crate) fn convert_to_namespace(database: &Database) -> Namespace {
    |               ^^^^^^^^^^^^^^^^^^^^ -------------------

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> crates/catalog/glue/src/catalog.rs:522:21
    |
522 |     let namespace = convert_to_namespace(dest.namespace())?;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `Namespace`
    |
    = help: the trait `Try` is not implemented for `Namespace`

error[E0599]: no variant or associated item named `NamespaceNotFound` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:525:24
    |
525 |             ErrorKind::NamespaceNotFound,
    |                        ^^^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:526:83
    |
526 |             format!("Cannot rename {} to {} because namespace {} does not exist", src, dest, dest.namespace()),
    |                                                                                   ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:526:88
    |
526 |             format!("Cannot rename {} to {} because namespace {} does not exist", src, dest, dest.namespace()),
    |                                                                                        ^^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `iceberg::NamespaceIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:526:94
    |
526 |             format!("Cannot rename {} to {} because namespace {} does not exist", src, dest, dest.namespace()),
    |                                                                                              ^^^^^^^^^^^^^^^^ `iceberg::NamespaceIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `iceberg::NamespaceIdent`, which is required by `&iceberg::NamespaceIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0425]: cannot find function `get_table` in this scope
   --> crates/catalog/glue/src/catalog.rs:531:28
    |
531 |     let from_table = match get_table(src).await {
    |                            ^^^^^^^^^ not found in this scope

error[E0599]: no variant or associated item named `TableNotFound` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:534:24
    |
534 |             ErrorKind::TableNotFound,
    |                        ^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:535:82
    |
535 |             format!("Cannot rename {} because the table does not exist in Glue", src),
    |                                                                                  ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:542:9
    |
542 |        .parameters(from_table.parameters())
    |         ^^^^^^^^^^------------------------- an argument is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:12
    |
375 |     pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>)...
    |            ^^^^^^^^^^
help: provide the argument
    |
542 |        .parameters(from_table.parameters(), /* v */)
    |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0425]: cannot find function `create_table` in this scope
   --> crates/catalog/glue/src/catalog.rs:547:5
    |
547 |     create_table(dest, table_input).await?;
    |     ^^^^^^^^^^^^
    |
help: you might have meant to call the method
    |
547 |     self.create_table(dest, table_input).await?;
    |     +++++

error[E0277]: the trait bound `iceberg::NamespaceIdent: AsRef<str>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:549:54
    |
549 |     let metadata_location = create_metadata_location(dest.namespace(), dest.name())?;
    |                             ------------------------ ^^^^^^^^^^^^^^^^ the trait `AsRef<str>` is not implemented for `iceberg::NamespaceIdent`, which is required by `&iceberg::NamespaceIdent: AsRef<str>`
    |                             |
    |                             required by a bound introduced by this call
    |
    = help: the trait `AsRef<Vec<std::string::String>>` is implemented for `iceberg::NamespaceIdent`
    = help: for that trait implementation, expected `Vec<std::string::String>`, found `str`
    = note: required for `&iceberg::NamespaceIdent` to implement `AsRef<str>`
note: required by a bound in `utils::create_metadata_location`
   --> crates/catalog/glue/src/utils.rs:233:55
    |
233 | pub(crate) fn create_metadata_location(location: impl AsRef<str>, version: i32) -> Result<String> {
    |                                                       ^^^^^^^^^^ required by this bound in `create_metadata_location`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:549:72
    |
549 |     let metadata_location = create_metadata_location(dest.namespace(), dest.name())?;
    |                             ------------------------                   ^^^^^^^^^^^ expected `i32`, found `&str`
    |                             |
    |                             arguments to this function are incorrect
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:233:15
    |
233 | pub(crate) fn create_metadata_location(location: impl AsRef<str>, version: i32) -> Result<String> {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^                            ------------

error[E0599]: no function or associated item named `new` found for struct `TableCommit` in the current scope
   --> crates/catalog/glue/src/catalog.rs:550:37
    |
550 |     let table_commit = TableCommit::new(metadata_location, from_table.metadata());
    |                                     ^^^ function or associated item not found in `TableCommit`

error[E0425]: cannot find function `drop_table` in this scope
   --> crates/catalog/glue/src/catalog.rs:552:5
    |
552 |     drop_table(src, false).await?;
    |     ^^^^^^^^^^
    |
help: you might have meant to call the method
    |
552 |     self.drop_table(src, false).await?;
    |     +++++
help: a local variable with a similar name exists
    |
552 |     from_table(src, false).await?;
    |     ~~~~~~~~~~

error[E0425]: cannot find function `drop_table` in this scope
   --> crates/catalog/glue/src/catalog.rs:555:21
    |
555 |     if let Err(e) = drop_table(dest, false).await {
    |                     ^^^^^^^^^^
    |
help: you might have meant to call the method
    |
555 |     if let Err(e) = self.drop_table(dest, false).await {
    |                     +++++
help: a local variable with a similar name exists
    |
555 |     if let Err(e) = from_table(dest, false).await {
    |                     ~~~~~~~~~~

error[E0425]: cannot find function `delete_table` in this scope
   --> crates/catalog/glue/src/catalog.rs:556:9
    |
556 |         delete_table(dest).await?;
    |         ^^^^^^^^^^^^ not found in this scope

error[E0423]: expected function, found macro `with_catalog_id`
   --> crates/catalog/glue/src/catalog.rs:563:22
    |
563 |     let catalog_id = with_catalog_id()?;
    |                      ^^^^^^^^^^^^^^^ not a function
    |
help: use `!` to invoke the macro
    |
563 |     let catalog_id = with_catalog_id!()?;
    |                                     +

error[E0061]: this function takes 2 arguments but 0 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:564:16
    |
564 |     let glue = create_sdk_config()?;
    |                ^^^^^^^^^^^^^^^^^-- two arguments of type `&std::collections::HashMap<std::string::String, std::string::String>` and `std::option::Option<&std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:58:21
    |
58  | pub(crate) async fn create_sdk_config(
    |                     ^^^^^^^^^^^^^^^^^
59  |     properties: &HashMap<String, String>,
    |     ------------------------------------
60  |     endpoint_uri: Option<&String>,
    |     -----------------------------
help: provide the arguments
    |
564 |     let glue = create_sdk_config(/* &std::collections::HashMap<std::string::String, std::string::String> */, /* std::option::Option<&std::string::String> */)?;
    |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> crates/catalog/glue/src/catalog.rs:564:16
    |
564 |     let glue = create_sdk_config()?;
    |                ^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl std::future::Future<Output = SdkConfig>`
    |
    = help: the trait `Try` is not implemented for `impl std::future::Future<Output = SdkConfig>`

error[E0599]: no method named `database` found for reference `&'life0 TableIdent` in the current scope
   --> crates/catalog/glue/src/catalog.rs:567:56
    |
567 |         database_name: convert_to_database(table_ident.database())?,
    |                                                        ^^^^^^^^ method not found in `&TableIdent`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:567:24
    |
567 |         database_name: convert_to_database(table_ident.database())?,
    |                        ^^^^^^^^^^^^^^^^^^^------------------------ an argument of type `&std::collections::HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
567 |         database_name: convert_to_database(table_ident.database(), /* &std::collections::HashMap<std::string::String, std::string::String> */)?,
    |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0423]: expected function, found macro `with_catalog_id`
   --> crates/catalog/glue/src/catalog.rs:574:22
    |
574 |     let catalog_id = with_catalog_id()?;
    |                      ^^^^^^^^^^^^^^^ not a function
    |
help: use `!` to invoke the macro
    |
574 |     let catalog_id = with_catalog_id!()?;
    |                                     +

error[E0061]: this function takes 2 arguments but 0 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:575:16
    |
575 |     let glue = create_sdk_config()?;
    |                ^^^^^^^^^^^^^^^^^-- two arguments of type `&std::collections::HashMap<std::string::String, std::string::String>` and `std::option::Option<&std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:58:21
    |
58  | pub(crate) async fn create_sdk_config(
    |                     ^^^^^^^^^^^^^^^^^
59  |     properties: &HashMap<String, String>,
    |     ------------------------------------
60  |     endpoint_uri: Option<&String>,
    |     -----------------------------
help: provide the arguments
    |
575 |     let glue = create_sdk_config(/* &std::collections::HashMap<std::string::String, std::string::String> */, /* std::option::Option<&std::string::String> */)?;
    |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> crates/catalog/glue/src/catalog.rs:575:16
    |
575 |     let glue = create_sdk_config()?;
    |                ^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl std::future::Future<Output = SdkConfig>`
    |
    = help: the trait `Try` is not implemented for `impl std::future::Future<Output = SdkConfig>`

error[E0599]: no method named `database` found for reference `&'life0 TableIdent` in the current scope
   --> crates/catalog/glue/src/catalog.rs:578:56
    |
578 |         database_name: convert_to_database(table_ident.database())?,
    |                                                        ^^^^^^^^ method not found in `&TableIdent`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:578:24
    |
578 |         database_name: convert_to_database(table_ident.database())?,
    |                        ^^^^^^^^^^^^^^^^^^^------------------------ an argument of type `&std::collections::HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
578 |         database_name: convert_to_database(table_ident.database(), /* &std::collections::HashMap<std::string::String, std::string::String> */)?,
    |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0423]: expected function, found macro `with_catalog_id`
   --> crates/catalog/glue/src/catalog.rs:585:22
    |
585 |     let catalog_id = with_catalog_id()?;
    |                      ^^^^^^^^^^^^^^^ not a function
    |
help: use `!` to invoke the macro
    |
585 |     let catalog_id = with_catalog_id!()?;
    |                                     +

error[E0061]: this function takes 2 arguments but 0 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:586:16
    |
586 |     let glue = create_sdk_config()?;
    |                ^^^^^^^^^^^^^^^^^-- two arguments of type `&std::collections::HashMap<std::string::String, std::string::String>` and `std::option::Option<&std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:58:21
    |
58  | pub(crate) async fn create_sdk_config(
    |                     ^^^^^^^^^^^^^^^^^
59  |     properties: &HashMap<String, String>,
    |     ------------------------------------
60  |     endpoint_uri: Option<&String>,
    |     -----------------------------
help: provide the arguments
    |
586 |     let glue = create_sdk_config(/* &std::collections::HashMap<std::string::String, std::string::String> */, /* std::option::Option<&std::string::String> */)?;
    |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> crates/catalog/glue/src/catalog.rs:586:16
    |
586 |     let glue = create_sdk_config()?;
    |                ^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl std::future::Future<Output = SdkConfig>`
    |
    = help: the trait `Try` is not implemented for `impl std::future::Future<Output = SdkConfig>`

error[E0599]: no method named `database` found for reference `&'life0 TableIdent` in the current scope
   --> crates/catalog/glue/src/catalog.rs:590:60
    |
590 |             database_name: convert_to_database(table_ident.database())?,
    |                                                            ^^^^^^^^ method not found in `&TableIdent`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:590:28
    |
590 |             database_name: convert_to_database(table_ident.database())?,
    |                            ^^^^^^^^^^^^^^^^^^^------------------------ an argument of type `&std::collections::HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
590 |             database_name: convert_to_database(table_ident.database(), /* &std::collections::HashMap<std::string::String, std::string::String> */)?,
    |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `database` found for reference `&'life0 TableIdent` in the current scope
   --> crates/catalog/glue/src/catalog.rs:597:60
    |
597 |             database_name: convert_to_database(table_ident.database())?,
    |                                                            ^^^^^^^^ method not found in `&TableIdent`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:597:28
    |
597 |             database_name: convert_to_database(table_ident.database())?,
    |                            ^^^^^^^^^^^^^^^^^^^------------------------ an argument of type `&std::collections::HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
597 |             database_name: convert_to_database(table_ident.database(), /* &std::collections::HashMap<std::string::String, std::string::String> */)?,
    |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0423]: expected function, found macro `with_catalog_id`
   --> crates/catalog/glue/src/catalog.rs:605:22
    |
605 |     let catalog_id = with_catalog_id()?;
    |                      ^^^^^^^^^^^^^^^ not a function
    |
help: use `!` to invoke the macro
    |
605 |     let catalog_id = with_catalog_id!()?;
    |                                     +

error[E0061]: this function takes 2 arguments but 0 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:606:16
    |
606 |     let glue = create_sdk_config()?;
    |                ^^^^^^^^^^^^^^^^^-- two arguments of type `&std::collections::HashMap<std::string::String, std::string::String>` and `std::option::Option<&std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:58:21
    |
58  | pub(crate) async fn create_sdk_config(
    |                     ^^^^^^^^^^^^^^^^^
59  |     properties: &HashMap<String, String>,
    |     ------------------------------------
60  |     endpoint_uri: Option<&String>,
    |     -----------------------------
help: provide the arguments
    |
606 |     let glue = create_sdk_config(/* &std::collections::HashMap<std::string::String, std::string::String> */, /* std::option::Option<&std::string::String> */)?;
    |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> crates/catalog/glue/src/catalog.rs:606:16
    |
606 |     let glue = create_sdk_config()?;
    |                ^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl std::future::Future<Output = SdkConfig>`
    |
    = help: the trait `Try` is not implemented for `impl std::future::Future<Output = SdkConfig>`

error[E0599]: no method named `database` found for reference `&'life0 TableIdent` in the current scope
   --> crates/catalog/glue/src/catalog.rs:609:56
    |
609 |         database_name: convert_to_database(table_ident.database())?,
    |                                                        ^^^^^^^^ method not found in `&TableIdent`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:609:24
    |
609 |         database_name: convert_to_database(table_ident.database())?,
    |                        ^^^^^^^^^^^^^^^^^^^------------------------ an argument of type `&std::collections::HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
609 |         database_name: convert_to_database(table_ident.database(), /* &std::collections::HashMap<std::string::String, std::string::String> */)?,
    |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0061, E0201, E0277, E0308, E0407, E0422, E0423, E0425, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib test) generated 1 warning
error: could not compile `iceberg-catalog-glue` (lib test) due to 48 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
error[E0407]: method `get_table` is not a member of trait `Catalog`
   --> crates/catalog/glue/src/catalog.rs:562:1
    |
562 | / async fn get_table(table_ident: &TableIdent) -> Result<Table> {
563 | |     let catalog_id = with_catalog_id()?;
564 | |     let glue = create_sdk_config()?;
565 | |     let table = glue.get_table(GetTableRequest {
...   |
571 | |     Ok(table.table())
572 | | }
    | |_^ not a member of trait `Catalog`

error[E0201]: duplicate definitions with name `create_table`:
   --> crates/catalog/glue/src/catalog.rs:573:1
    |
341 | /     async fn create_table(
342 | |         &self,
343 | |         namespace: &NamespaceIdent,
344 | |         creation: TableCreation,
...   |
390 | |         Ok(table)
391 | |     }
    | |_____- previous definition here
...
573 | / async fn create_table(table_ident: &TableIdent, table_input: TableInput) -> Result<()> {
574 | |     let catalog_id = with_catalog_id()?;
575 | |     let glue = create_sdk_config()?;
576 | |     glue.create_table(CreateTableRequest {
...   |
582 | |     Ok(())
583 | | }
    | |_^ duplicate definition
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:74:5
    |
74  | /     async fn create_table(
75  | |         &self,
76  | |         namespace: &NamespaceIdent,
77  | |         creation: TableCreation,
78  | |     ) -> Result<Table>;
    | |_______________________- item in trait

error[E0201]: duplicate definitions with name `drop_table`:
   --> crates/catalog/glue/src/catalog.rs:584:1
    |
459 | /     async fn drop_table(&self, table: &TableIdent) -> Result<()> {
460 | |         let db_name = validate_namespace(table.namespace())?;
461 | |         let table_name = table.name();
462 | |
...   |
473 | |         Ok(())
474 | |     }
    | |_____- previous definition here
...
584 | / async fn drop_table(table_ident: &TableIdent, force: bool) -> Result<()> {
585 | |     let catalog_id = with_catalog_id()?;
586 | |     let glue = create_sdk_config()?;
587 | |     if force {
...   |
602 | |     Ok(())
603 | | }
    | |_^ duplicate definition
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:84:5
    |
84  |       async fn drop_table(&self, table: &TableIdent) -> Result<()>;
    |       ------------------------------------------------------------- item in trait

error[E0407]: method `delete_table` is not a member of trait `Catalog`
   --> crates/catalog/glue/src/catalog.rs:604:1
    |
604 |   async fn delete_table(table_ident: &TableIdent) -> Result<()> {
    |   ^        ------------ help: there is an associated function with a similar name: `create_table`
    |  _|
    | |
605 | |     let catalog_id = with_catalog_id()?;
606 | |     let glue = create_sdk_config()?;
607 | |     glue.delete_table(DeleteTableRequest {
...   |
613 | |     Ok(())
614 | | }
    | |_^ not a member of trait `Catalog`

error[E0422]: cannot find struct, variant or union type `GetTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:565:32
    |
565 |     let table = glue.get_table(GetTableRequest {
    |                                ^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `CreateTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:576:23
    |
576 |     glue.create_table(CreateTableRequest {
    |                       ^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `DeleteTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:588:27
    |
588 |         glue.delete_table(DeleteTableRequest {
    |                           ^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `DropTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:595:25
    |
595 |         glue.drop_table(DropTableRequest {
    |                         ^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `DeleteTableRequest` in this scope
   --> crates/catalog/glue/src/catalog.rs:607:23
    |
607 |     glue.delete_table(DeleteTableRequest {
    |                       ^^^^^^^^^^^^^^^^^^ not found in this scope

warning: unused import: `from_aws_build_error`
  --> crates/catalog/glue/src/catalog.rs:31:20
   |
31 | use crate::error::{from_aws_build_error, from_aws_sdk_error};
   |                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:522:42
    |
522 |     let namespace = convert_to_namespace(dest.namespace())?;
    |                     -------------------- ^^^^^^^^^^^^^^^^ expected `&Database`, found `&NamespaceIdent`
    |                     |
    |                     arguments to this function are incorrect
    |
    = note: expected reference `&Database`
               found reference `&NamespaceIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:121:15
    |
121 | pub(crate) fn convert_to_namespace(database: &Database) -> Namespace {
    |               ^^^^^^^^^^^^^^^^^^^^ -------------------

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> crates/catalog/glue/src/catalog.rs:522:21
    |
522 |     let namespace = convert_to_namespace(dest.namespace())?;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `Namespace`
    |
    = help: the trait `Try` is not implemented for `Namespace`

error[E0599]: no variant or associated item named `NamespaceNotFound` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:525:24
    |
525 |             ErrorKind::NamespaceNotFound,
    |                        ^^^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:526:83
    |
526 |             format!("Cannot rename {} to {} because namespace {} does not exist", src, dest, dest.namespace()),
    |                                                                                   ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:526:88
    |
526 |             format!("Cannot rename {} to {} because namespace {} does not exist", src, dest, dest.namespace()),
    |                                                                                        ^^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `NamespaceIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:526:94
    |
526 |             format!("Cannot rename {} to {} because namespace {} does not exist", src, dest, dest.namespace()),
    |                                                                                              ^^^^^^^^^^^^^^^^ `NamespaceIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `NamespaceIdent`, which is required by `&NamespaceIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0425]: cannot find function `get_table` in this scope
   --> crates/catalog/glue/src/catalog.rs:531:28
    |
531 |     let from_table = match get_table(src).await {
    |                            ^^^^^^^^^ not found in this scope

error[E0599]: no variant or associated item named `TableNotFound` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:534:24
    |
534 |             ErrorKind::TableNotFound,
    |                        ^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:535:82
    |
535 |             format!("Cannot rename {} because the table does not exist in Glue", src),
    |                                                                                  ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:542:9
    |
542 |        .parameters(from_table.parameters())
    |         ^^^^^^^^^^------------------------- an argument is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:12
    |
375 |     pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>)...
    |            ^^^^^^^^^^
help: provide the argument
    |
542 |        .parameters(from_table.parameters(), /* v */)
    |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0425]: cannot find function `create_table` in this scope
   --> crates/catalog/glue/src/catalog.rs:547:5
    |
547 |     create_table(dest, table_input).await?;
    |     ^^^^^^^^^^^^
    |
help: you might have meant to call the method
    |
547 |     self.create_table(dest, table_input).await?;
    |     +++++

error[E0277]: the trait bound `NamespaceIdent: AsRef<str>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:549:54
    |
549 |     let metadata_location = create_metadata_location(dest.namespace(), dest.name())?;
    |                             ------------------------ ^^^^^^^^^^^^^^^^ the trait `AsRef<str>` is not implemented for `NamespaceIdent`, which is required by `&NamespaceIdent: AsRef<str>`
    |                             |
    |                             required by a bound introduced by this call
    |
    = help: the trait `AsRef<Vec<std::string::String>>` is implemented for `NamespaceIdent`
    = help: for that trait implementation, expected `Vec<std::string::String>`, found `str`
    = note: required for `&NamespaceIdent` to implement `AsRef<str>`
note: required by a bound in `create_metadata_location`
   --> crates/catalog/glue/src/utils.rs:233:55
    |
233 | pub(crate) fn create_metadata_location(location: impl AsRef<str>, version: i32) -> Result<String> {
    |                                                       ^^^^^^^^^^ required by this bound in `create_metadata_location`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:549:72
    |
549 |     let metadata_location = create_metadata_location(dest.namespace(), dest.name())?;
    |                             ------------------------                   ^^^^^^^^^^^ expected `i32`, found `&str`
    |                             |
    |                             arguments to this function are incorrect
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:233:15
    |
233 | pub(crate) fn create_metadata_location(location: impl AsRef<str>, version: i32) -> Result<String> {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^                            ------------

error[E0599]: no function or associated item named `new` found for struct `TableCommit` in the current scope
   --> crates/catalog/glue/src/catalog.rs:550:37
    |
550 |     let table_commit = TableCommit::new(metadata_location, from_table.metadata());
    |                                     ^^^ function or associated item not found in `TableCommit`

error[E0425]: cannot find function `drop_table` in this scope
   --> crates/catalog/glue/src/catalog.rs:552:5
    |
552 |     drop_table(src, false).await?;
    |     ^^^^^^^^^^
    |
help: you might have meant to call the method
    |
552 |     self.drop_table(src, false).await?;
    |     +++++
help: a local variable with a similar name exists
    |
552 |     from_table(src, false).await?;
    |     ~~~~~~~~~~

error[E0425]: cannot find function `drop_table` in this scope
   --> crates/catalog/glue/src/catalog.rs:555:21
    |
555 |     if let Err(e) = drop_table(dest, false).await {
    |                     ^^^^^^^^^^
    |
help: you might have meant to call the method
    |
555 |     if let Err(e) = self.drop_table(dest, false).await {
    |                     +++++
help: a local variable with a similar name exists
    |
555 |     if let Err(e) = from_table(dest, false).await {
    |                     ~~~~~~~~~~

error[E0425]: cannot find function `delete_table` in this scope
   --> crates/catalog/glue/src/catalog.rs:556:9
    |
556 |         delete_table(dest).await?;
    |         ^^^^^^^^^^^^ not found in this scope

error[E0423]: expected function, found macro `with_catalog_id`
   --> crates/catalog/glue/src/catalog.rs:563:22
    |
563 |     let catalog_id = with_catalog_id()?;
    |                      ^^^^^^^^^^^^^^^ not a function
    |
help: use `!` to invoke the macro
    |
563 |     let catalog_id = with_catalog_id!()?;
    |                                     +

error[E0061]: this function takes 2 arguments but 0 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:564:16
    |
564 |     let glue = create_sdk_config()?;
    |                ^^^^^^^^^^^^^^^^^-- two arguments of type `&HashMap<std::string::String, std::string::String>` and `std::option::Option<&std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:58:21
    |
58  | pub(crate) async fn create_sdk_config(
    |                     ^^^^^^^^^^^^^^^^^
59  |     properties: &HashMap<String, String>,
    |     ------------------------------------
60  |     endpoint_uri: Option<&String>,
    |     -----------------------------
help: provide the arguments
    |
564 |     let glue = create_sdk_config(/* &HashMap<std::string::String, std::string::String> */, /* std::option::Option<&std::string::String> */)?;
    |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> crates/catalog/glue/src/catalog.rs:564:16
    |
564 |     let glue = create_sdk_config()?;
    |                ^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl std::future::Future<Output = SdkConfig>`
    |
    = help: the trait `Try` is not implemented for `impl std::future::Future<Output = SdkConfig>`

error[E0599]: no method named `database` found for reference `&'life0 TableIdent` in the current scope
   --> crates/catalog/glue/src/catalog.rs:567:56
    |
567 |         database_name: convert_to_database(table_ident.database())?,
    |                                                        ^^^^^^^^ method not found in `&TableIdent`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:567:24
    |
567 |         database_name: convert_to_database(table_ident.database())?,
    |                        ^^^^^^^^^^^^^^^^^^^------------------------ an argument of type `&HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
567 |         database_name: convert_to_database(table_ident.database(), /* &HashMap<std::string::String, std::string::String> */)?,
    |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0423]: expected function, found macro `with_catalog_id`
   --> crates/catalog/glue/src/catalog.rs:574:22
    |
574 |     let catalog_id = with_catalog_id()?;
    |                      ^^^^^^^^^^^^^^^ not a function
    |
help: use `!` to invoke the macro
    |
574 |     let catalog_id = with_catalog_id!()?;
    |                                     +

error[E0061]: this function takes 2 arguments but 0 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:575:16
    |
575 |     let glue = create_sdk_config()?;
    |                ^^^^^^^^^^^^^^^^^-- two arguments of type `&HashMap<std::string::String, std::string::String>` and `std::option::Option<&std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:58:21
    |
58  | pub(crate) async fn create_sdk_config(
    |                     ^^^^^^^^^^^^^^^^^
59  |     properties: &HashMap<String, String>,
    |     ------------------------------------
60  |     endpoint_uri: Option<&String>,
    |     -----------------------------
help: provide the arguments
    |
575 |     let glue = create_sdk_config(/* &HashMap<std::string::String, std::string::String> */, /* std::option::Option<&std::string::String> */)?;
    |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> crates/catalog/glue/src/catalog.rs:575:16
    |
575 |     let glue = create_sdk_config()?;
    |                ^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl std::future::Future<Output = SdkConfig>`
    |
    = help: the trait `Try` is not implemented for `impl std::future::Future<Output = SdkConfig>`

error[E0599]: no method named `database` found for reference `&'life0 TableIdent` in the current scope
   --> crates/catalog/glue/src/catalog.rs:578:56
    |
578 |         database_name: convert_to_database(table_ident.database())?,
    |                                                        ^^^^^^^^ method not found in `&TableIdent`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:578:24
    |
578 |         database_name: convert_to_database(table_ident.database())?,
    |                        ^^^^^^^^^^^^^^^^^^^------------------------ an argument of type `&HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
578 |         database_name: convert_to_database(table_ident.database(), /* &HashMap<std::string::String, std::string::String> */)?,
    |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0423]: expected function, found macro `with_catalog_id`
   --> crates/catalog/glue/src/catalog.rs:585:22
    |
585 |     let catalog_id = with_catalog_id()?;
    |                      ^^^^^^^^^^^^^^^ not a function
    |
help: use `!` to invoke the macro
    |
585 |     let catalog_id = with_catalog_id!()?;
    |                                     +

error[E0061]: this function takes 2 arguments but 0 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:586:16
    |
586 |     let glue = create_sdk_config()?;
    |                ^^^^^^^^^^^^^^^^^-- two arguments of type `&HashMap<std::string::String, std::string::String>` and `std::option::Option<&std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:58:21
    |
58  | pub(crate) async fn create_sdk_config(
    |                     ^^^^^^^^^^^^^^^^^
59  |     properties: &HashMap<String, String>,
    |     ------------------------------------
60  |     endpoint_uri: Option<&String>,
    |     -----------------------------
help: provide the arguments
    |
586 |     let glue = create_sdk_config(/* &HashMap<std::string::String, std::string::String> */, /* std::option::Option<&std::string::String> */)?;
    |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> crates/catalog/glue/src/catalog.rs:586:16
    |
586 |     let glue = create_sdk_config()?;
    |                ^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl std::future::Future<Output = SdkConfig>`
    |
    = help: the trait `Try` is not implemented for `impl std::future::Future<Output = SdkConfig>`

error[E0599]: no method named `database` found for reference `&'life0 TableIdent` in the current scope
   --> crates/catalog/glue/src/catalog.rs:590:60
    |
590 |             database_name: convert_to_database(table_ident.database())?,
    |                                                            ^^^^^^^^ method not found in `&TableIdent`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:590:28
    |
590 |             database_name: convert_to_database(table_ident.database())?,
    |                            ^^^^^^^^^^^^^^^^^^^------------------------ an argument of type `&HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
590 |             database_name: convert_to_database(table_ident.database(), /* &HashMap<std::string::String, std::string::String> */)?,
    |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `database` found for reference `&'life0 TableIdent` in the current scope
   --> crates/catalog/glue/src/catalog.rs:597:60
    |
597 |             database_name: convert_to_database(table_ident.database())?,
    |                                                            ^^^^^^^^ method not found in `&TableIdent`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:597:28
    |
597 |             database_name: convert_to_database(table_ident.database())?,
    |                            ^^^^^^^^^^^^^^^^^^^------------------------ an argument of type `&HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
597 |             database_name: convert_to_database(table_ident.database(), /* &HashMap<std::string::String, std::string::String> */)?,
    |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0423]: expected function, found macro `with_catalog_id`
   --> crates/catalog/glue/src/catalog.rs:605:22
    |
605 |     let catalog_id = with_catalog_id()?;
    |                      ^^^^^^^^^^^^^^^ not a function
    |
help: use `!` to invoke the macro
    |
605 |     let catalog_id = with_catalog_id!()?;
    |                                     +

error[E0061]: this function takes 2 arguments but 0 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:606:16
    |
606 |     let glue = create_sdk_config()?;
    |                ^^^^^^^^^^^^^^^^^-- two arguments of type `&HashMap<std::string::String, std::string::String>` and `std::option::Option<&std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:58:21
    |
58  | pub(crate) async fn create_sdk_config(
    |                     ^^^^^^^^^^^^^^^^^
59  |     properties: &HashMap<String, String>,
    |     ------------------------------------
60  |     endpoint_uri: Option<&String>,
    |     -----------------------------
help: provide the arguments
    |
606 |     let glue = create_sdk_config(/* &HashMap<std::string::String, std::string::String> */, /* std::option::Option<&std::string::String> */)?;
    |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> crates/catalog/glue/src/catalog.rs:606:16
    |
606 |     let glue = create_sdk_config()?;
    |                ^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl std::future::Future<Output = SdkConfig>`
    |
    = help: the trait `Try` is not implemented for `impl std::future::Future<Output = SdkConfig>`

error[E0599]: no method named `database` found for reference `&'life0 TableIdent` in the current scope
   --> crates/catalog/glue/src/catalog.rs:609:56
    |
609 |         database_name: convert_to_database(table_ident.database())?,
    |                                                        ^^^^^^^^ method not found in `&TableIdent`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:609:24
    |
609 |         database_name: convert_to_database(table_ident.database())?,
    |                        ^^^^^^^^^^^^^^^^^^^------------------------ an argument of type `&HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
609 |         database_name: convert_to_database(table_ident.database(), /* &HashMap<std::string::String, std::string::String> */)?,
    |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0061, E0201, E0277, E0308, E0407, E0422, E0423, E0425, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib) generated 1 warning
error: could not compile `iceberg-catalog-glue` (lib) due to 48 previous errors; 1 warning emitted


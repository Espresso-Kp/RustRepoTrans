Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0599]: no method named `field_id` found for reference `&datatypes::NestedField` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:304:26
    |
304 |     let field_id = field.field_id();
    |                          ^^^^^^^^ method not found in `&NestedField`

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:307:49
    |
307 |         return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                                                 ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:307:20
    |
307 |         return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                    ^^^^^^^^^^^^^^^^^---------------------------- an argument is missing
    |
note: associated function defined here
   --> crates/iceberg/src/error.rs:197:12
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |            ^^^ ---------------  --------------------------
help: provide the argument
    |
307 |         return Err(crate::Error::new(ErrorKind::RowsCannotMatch, /* message */));
    |                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `field_type` found for reference `&datatypes::NestedField` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:310:14
    |
310 |     if!field.field_type().is_primitive() {
    |              ^^^^^^^^^^-- help: remove the arguments
    |              |
    |              field, not a method

error[E0599]: no variant or associated item named `InvalidFieldType` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:311:49
    |
311 |         return Err(crate::Error::new(ErrorKind::InvalidFieldType));
    |                                                 ^^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `InvalidFieldType` not found for this enum

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:311:20
    |
311 |         return Err(crate::Error::new(ErrorKind::InvalidFieldType));
    |                    ^^^^^^^^^^^^^^^^^----------------------------- an argument is missing
    |
note: associated function defined here
   --> crates/iceberg/src/error.rs:197:12
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |            ^^^ ---------------  --------------------------
help: provide the argument
    |
311 |         return Err(crate::Error::new(ErrorKind::InvalidFieldType, /* message */));
    |                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `value` found for reference `&values::Datum` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:314:24
    |
314 |     let prefix = datum.value().to_string();
    |                        ^^^^^ method not found in `&Datum`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `value`, perhaps you need to implement one of them:
            candidate #1: `itertools::duplicates_impl::private::KeyXorValue`
            candidate #2: `ArrayAccessor`
            candidate #3: `itertools::duplicates_impl::private::KeyXorValue`

error[E0609]: no field `lower_bounds` on type `&mut InclusiveMetricsEvaluator<'_>`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:317:43
    |
317 |     if let Some(lower_bound_bytes) = self.lower_bounds.get(&field_id) {
    |                                           ^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
317 |     if let Some(lower_bound_bytes) = self.data_file.lower_bounds.get(&field_id) {
    |                                           ++++++++++

error[E0599]: no method named `field_type` found for reference `&datatypes::NestedField` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:318:44
    |
318 |         let lower_bound = from_bytes(field.field_type(), lower_bound_bytes).to_string();
    |                                            ^^^^^^^^^^-- help: remove the arguments
    |                                            |
    |                                            field, not a method

error[E0425]: cannot find function `from_bytes` in this scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:318:27
    |
318 |         let lower_bound = from_bytes(field.field_type(), lower_bound_bytes).to_string();
    |                           ^^^^^^^^^^ not found in this scope

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:321:53
    |
321 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                                                     ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:321:24
    |
321 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                        ^^^^^^^^^^^^^^^^^---------------------------- an argument is missing
    |
note: associated function defined here
   --> crates/iceberg/src/error.rs:197:12
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |            ^^^ ---------------  --------------------------
help: provide the argument
    |
321 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch, /* message */));
    |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `upper_bounds` on type `&mut InclusiveMetricsEvaluator<'_>`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:325:43
    |
325 |     if let Some(upper_bound_bytes) = self.upper_bounds.get(&field_id) {
    |                                           ^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
325 |     if let Some(upper_bound_bytes) = self.data_file.upper_bounds.get(&field_id) {
    |                                           ++++++++++

error[E0599]: no method named `field_type` found for reference `&datatypes::NestedField` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:326:44
    |
326 |         let upper_bound = from_bytes(field.field_type(), upper_bound_bytes).to_string();
    |                                            ^^^^^^^^^^-- help: remove the arguments
    |                                            |
    |                                            field, not a method

error[E0425]: cannot find function `from_bytes` in this scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:326:27
    |
326 |         let upper_bound = from_bytes(field.field_type(), upper_bound_bytes).to_string();
    |                           ^^^^^^^^^^ not found in this scope

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:329:53
    |
329 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                                                     ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:329:24
    |
329 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                        ^^^^^^^^^^^^^^^^^---------------------------- an argument is missing
    |
note: associated function defined here
   --> crates/iceberg/src/error.rs:197:12
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |            ^^^ ---------------  --------------------------
help: provide the argument
    |
329 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch, /* message */));
    |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0061, E0425, E0599, E0609.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `iceberg` (lib) due to 17 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 17 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0599]: no method named `field_id` found for reference `&datatypes::NestedField` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:304:26
    |
304 |     let field_id = field.field_id();
    |                          ^^^^^^^^ method not found in `&NestedField`

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:307:49
    |
307 |         return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                                                 ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:307:20
    |
307 |         return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                    ^^^^^^^^^^^^^^^^^---------------------------- an argument is missing
    |
note: associated function defined here
   --> crates/iceberg/src/error.rs:197:12
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |            ^^^ ---------------  --------------------------
help: provide the argument
    |
307 |         return Err(crate::Error::new(ErrorKind::RowsCannotMatch, /* message */));
    |                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `field_type` found for reference `&datatypes::NestedField` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:310:14
    |
310 |     if!field.field_type().is_primitive() {
    |              ^^^^^^^^^^-- help: remove the arguments
    |              |
    |              field, not a method

error[E0599]: no variant or associated item named `InvalidFieldType` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:311:49
    |
311 |         return Err(crate::Error::new(ErrorKind::InvalidFieldType));
    |                                                 ^^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `InvalidFieldType` not found for this enum

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:311:20
    |
311 |         return Err(crate::Error::new(ErrorKind::InvalidFieldType));
    |                    ^^^^^^^^^^^^^^^^^----------------------------- an argument is missing
    |
note: associated function defined here
   --> crates/iceberg/src/error.rs:197:12
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |            ^^^ ---------------  --------------------------
help: provide the argument
    |
311 |         return Err(crate::Error::new(ErrorKind::InvalidFieldType, /* message */));
    |                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `value` found for reference `&values::Datum` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:314:24
    |
314 |     let prefix = datum.value().to_string();
    |                        ^^^^^ method not found in `&Datum`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `value`, perhaps you need to implement one of them:
            candidate #1: `itertools::duplicates_impl::private::KeyXorValue`
            candidate #2: `ArrayAccessor`
            candidate #3: `itertools::duplicates_impl::private::KeyXorValue`

error[E0609]: no field `lower_bounds` on type `&mut InclusiveMetricsEvaluator<'_>`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:317:43
    |
317 |     if let Some(lower_bound_bytes) = self.lower_bounds.get(&field_id) {
    |                                           ^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
317 |     if let Some(lower_bound_bytes) = self.data_file.lower_bounds.get(&field_id) {
    |                                           ++++++++++

error[E0599]: no method named `field_type` found for reference `&datatypes::NestedField` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:318:44
    |
318 |         let lower_bound = from_bytes(field.field_type(), lower_bound_bytes).to_string();
    |                                            ^^^^^^^^^^-- help: remove the arguments
    |                                            |
    |                                            field, not a method

error[E0425]: cannot find function `from_bytes` in this scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:318:27
    |
318 |         let lower_bound = from_bytes(field.field_type(), lower_bound_bytes).to_string();
    |                           ^^^^^^^^^^ not found in this scope

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:321:53
    |
321 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                                                     ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:321:24
    |
321 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                        ^^^^^^^^^^^^^^^^^---------------------------- an argument is missing
    |
note: associated function defined here
   --> crates/iceberg/src/error.rs:197:12
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |            ^^^ ---------------  --------------------------
help: provide the argument
    |
321 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch, /* message */));
    |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `upper_bounds` on type `&mut InclusiveMetricsEvaluator<'_>`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:325:43
    |
325 |     if let Some(upper_bound_bytes) = self.upper_bounds.get(&field_id) {
    |                                           ^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
325 |     if let Some(upper_bound_bytes) = self.data_file.upper_bounds.get(&field_id) {
    |                                           ++++++++++

error[E0599]: no method named `field_type` found for reference `&datatypes::NestedField` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:326:44
    |
326 |         let upper_bound = from_bytes(field.field_type(), upper_bound_bytes).to_string();
    |                                            ^^^^^^^^^^-- help: remove the arguments
    |                                            |
    |                                            field, not a method

error[E0425]: cannot find function `from_bytes` in this scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:326:27
    |
326 |         let upper_bound = from_bytes(field.field_type(), upper_bound_bytes).to_string();
    |                           ^^^^^^^^^^ not found in this scope

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:329:53
    |
329 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                                                     ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:329:24
    |
329 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                        ^^^^^^^^^^^^^^^^^---------------------------- an argument is missing
    |
note: associated function defined here
   --> crates/iceberg/src/error.rs:197:12
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |            ^^^ ---------------  --------------------------
help: provide the argument
    |
329 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch, /* message */));
    |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0061, E0425, E0599, E0609.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `iceberg` (lib) due to 17 previous errors


Fail
file path is :
projects/deltachat-core/rust/src/securejoin.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error: cannot find macro `anyhow` in this scope
  --> src/securejoin.rs:86:24
   |
86 |             return Err(anyhow!("Not configured"));
   |                        ^^^^^^
   |
   = note: `anyhow` is in scope, but it is a crate, not a macro
help: consider importing this macro
   |
3  + use anyhow::anyhow;
   |

error: cannot find macro `anyhow` in this scope
  --> src/securejoin.rs:59:20
   |
59 |         return Err(anyhow!("Invalid context"));
   |                    ^^^^^^
   |
   = note: `anyhow` is in scope, but it is a crate, not a macro
help: consider importing this macro
   |
3  + use anyhow::anyhow;
   |

error[E0425]: cannot find value `DC_CONTEXT_MAGIC` in this scope
  --> src/securejoin.rs:58:47
   |
58 |     if context.is_none() || context.magic()!= DC_CONTEXT_MAGIC {
   |                                               ^^^^^^^^^^^^^^^^ not found in this scope

error[E0603]: function import `create_id` is private
   --> src/securejoin.rs:67:39
    |
67  |             let invitenumber = token::create_id();
    |                                       ^^^^^^^^^ private function import
    |
note: the function import `create_id` is defined here...
   --> src/token.rs:12:20
    |
12  | use crate::tools::{create_id, time};
    |                    ^^^^^^^^^
note: ...and refers to the function `create_id` which is defined here
   --> src/tools.rs:265:1
    |
265 | pub(crate) fn create_id() -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider importing this function instead
    |
67  |             let invitenumber = crate::tools::create_id();
    |                                ~~~~~~~~~~~~~~~~~~~~~~~
help: import `create_id` through the re-export
    |
67  |             let invitenumber = tools::create_id();
    |                                ~~~~~~~~~~~~~~~~

error[E0603]: function import `create_id` is private
   --> src/securejoin.rs:76:31
    |
76  |             let auth = token::create_id();
    |                               ^^^^^^^^^ private function import
    |
note: the function import `create_id` is defined here...
   --> src/token.rs:12:20
    |
12  | use crate::tools::{create_id, time};
    |                    ^^^^^^^^^
note: ...and refers to the function `create_id` which is defined here
   --> src/tools.rs:265:1
    |
265 | pub(crate) fn create_id() -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider importing this function instead
    |
76  |             let auth = crate::tools::create_id();
    |                        ~~~~~~~~~~~~~~~~~~~~~~~
help: import `create_id` through the re-export
    |
76  |             let auth = tools::create_id();
    |                        ~~~~~~~~~~~~~~~~

warning: unused import: `bail`
 --> src/securejoin.rs:3:14
  |
3 | use anyhow::{bail, Context as _, Error, Result};
  |              ^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `Chat`
 --> src/securejoin.rs:7:25
  |
7 | use crate::chat::{self, Chat, ChatId, ChatIdBlocked, ProtectionStatus};
  |                         ^^^^

error[E0599]: no method named `is_none` found for reference `&context::Context` in the current scope
  --> src/securejoin.rs:58:16
   |
58 |     if context.is_none() || context.magic()!= DC_CONTEXT_MAGIC {
   |                ^^^^^^^ method not found in `&Context`

error[E0599]: no method named `magic` found for reference `&context::Context` in the current scope
  --> src/securejoin.rs:58:37
   |
58 |     if context.is_none() || context.magic()!= DC_CONTEXT_MAGIC {
   |                                     ^^^^^ method not found in `&Context`
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `magic`, perhaps you need to implement one of them:
           candidate #1: `object::read::macho::MachHeader`
           candidate #2: `object::read::pe::ImageOptionalHeader`

error[E0277]: the `?` operator can only be applied to values that implement `Try`
  --> src/securejoin.rs:62:5
   |
62 |     ensure_secret_key_exists(context)?;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl futures::Future<Output = std::result::Result<(), anyhow::Error>>`
   |
   = help: the trait `Try` is not implemented for `impl futures::Future<Output = std::result::Result<(), anyhow::Error>>`
help: consider `await`ing on the `Future`
   |
62 |     ensure_secret_key_exists(context).await?;
   |                                      ++++++

error[E0599]: no variant or associated item named `Invitenumber` found for enum `token::Namespace` in the current scope
  --> src/securejoin.rs:64:64
   |
64 |     let invitenumber = match token::lookup(context, Namespace::Invitenumber, group.unwrap_or(0)) {
   |                                                                ^^^^^^^^^^^^
   |                                                                |
   |                                                                variant or associated item not found in `Namespace`
   |                                                                help: there is a variant with a similar name: `InviteNumber`
   |
  ::: src/token.rs:19:1
   |
19 | pub enum Namespace {
   | ------------------ variant or associated item `Invitenumber` not found for this enum

error[E0308]: mismatched types
   --> src/securejoin.rs:64:94
    |
64  |     let invitenumber = match token::lookup(context, Namespace::Invitenumber, group.unwrap_or(0)) {
    |                                                                                    --------- ^ expected `ChatId`, found integer
    |                                                                                    |
    |                                                                                    arguments to this method are incorrect
    |
help: the return type of this call is `{integer}` due to the type of the argument passed
   --> src/securejoin.rs:64:78
    |
64  |     let invitenumber = match token::lookup(context, Namespace::Invitenumber, group.unwrap_or(0)) {
    |                                                                              ^^^^^^^^^^^^^^^^-^
    |                                                                                              |
    |                                                                                              this argument influences the return type of `unwrap_or`
note: method defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:951:12
    |
951 |     pub fn unwrap_or(self, default: T) -> T {
    |            ^^^^^^^^^
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
    |
64  |     let invitenumber = match token::lookup(context, Namespace::Invitenumber, group.unwrap_or(chat::ChatId(0))) {
    |                                                                                              +++++++++++++ +

error[E0308]: mismatched types
  --> src/securejoin.rs:64:78
   |
64 |     let invitenumber = match token::lookup(context, Namespace::Invitenumber, group.unwrap_or(0)) {
   |                              -------------                                   ^^^^^^^^^^^^^^^^^^ expected `Option<ChatId>`, found `ChatId`
   |                              |
   |                              arguments to this function are incorrect
   |
   = note: expected enum `std::option::Option<ChatId>`
            found struct `ChatId`
note: function defined here
  --> src/token.rs:63:14
   |
63 | pub async fn lookup(
   |              ^^^^^^
...
66 |     chat: Option<ChatId>,
   |     --------------------
help: try wrapping the expression in `Some`
   |
64 |     let invitenumber = match token::lookup(context, Namespace::Invitenumber, Some(group.unwrap_or(0))) {
   |                                                                              +++++                  +

error[E0308]: mismatched types
  --> src/securejoin.rs:65:9
   |
64 |     let invitenumber = match token::lookup(context, Namespace::Invitenumber, group.unwrap_or(0)) {
   |                              ------------------------------------------------------------------- this expression has type `impl futures::Future<Output = std::result::Result<std::option::Option<std::string::String>, anyhow::Error>>`
65 |         Some(invitenumber) => invitenumber,
   |         ^^^^^^^^^^^^^^^^^^ expected future, found `Option<_>`
   |
   = note: expected opaque type `impl futures::Future<Output = std::result::Result<std::option::Option<std::string::String>, anyhow::Error>>`
                     found enum `std::option::Option<_>`

error[E0308]: mismatched types
  --> src/securejoin.rs:66:9
   |
64 |     let invitenumber = match token::lookup(context, Namespace::Invitenumber, group.unwrap_or(0)) {
   |                              ------------------------------------------------------------------- this expression has type `impl futures::Future<Output = std::result::Result<std::option::Option<std::string::String>, anyhow::Error>>`
65 |         Some(invitenumber) => invitenumber,
66 |         None => {
   |         ^^^^ expected future, found `Option<_>`
   |
   = note: expected opaque type `impl futures::Future<Output = std::result::Result<std::option::Option<std::string::String>, anyhow::Error>>`
                     found enum `std::option::Option<_>`

error[E0599]: no variant or associated item named `Invitenumber` found for enum `token::Namespace` in the current scope
  --> src/securejoin.rs:68:45
   |
68 |             token::save(context, Namespace::Invitenumber, group.unwrap_or(0), invitenumber);
   |                                             ^^^^^^^^^^^^
   |                                             |
   |                                             variant or associated item not found in `Namespace`
   |                                             help: there is a variant with a similar name: `InviteNumber`
   |
  ::: src/token.rs:19:1
   |
19 | pub enum Namespace {
   | ------------------ variant or associated item `Invitenumber` not found for this enum

error[E0308]: mismatched types
   --> src/securejoin.rs:68:75
    |
68  |             token::save(context, Namespace::Invitenumber, group.unwrap_or(0), invitenumber);
    |                                                                 --------- ^ expected `ChatId`, found integer
    |                                                                 |
    |                                                                 arguments to this method are incorrect
    |
help: the return type of this call is `{integer}` due to the type of the argument passed
   --> src/securejoin.rs:68:59
    |
68  |             token::save(context, Namespace::Invitenumber, group.unwrap_or(0), invitenumber);
    |                                                           ^^^^^^^^^^^^^^^^-^
    |                                                                           |
    |                                                                           this argument influences the return type of `unwrap_or`
note: method defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:951:12
    |
951 |     pub fn unwrap_or(self, default: T) -> T {
    |            ^^^^^^^^^
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
    |
68  |             token::save(context, Namespace::Invitenumber, group.unwrap_or(chat::ChatId(0)), invitenumber);
    |                                                                           +++++++++++++ +

error[E0308]: arguments to this function are incorrect
  --> src/securejoin.rs:68:13
   |
68 |             token::save(context, Namespace::Invitenumber, group.unwrap_or(0), invitenumber);
   |             ^^^^^^^^^^^                                                       ------------ expected `&str`, found `String`
   |
note: expected `Option<ChatId>`, found `ChatId`
  --> src/securejoin.rs:68:59
   |
68 |             token::save(context, Namespace::Invitenumber, group.unwrap_or(0), invitenumber);
   |                                                           ^^^^^^^^^^^^^^^^^^
   = note: expected enum `std::option::Option<ChatId>`
            found struct `ChatId`
note: function defined here
  --> src/token.rs:27:14
   |
27 | pub async fn save(
   |              ^^^^
28 |     context: &Context,
   |     -----------------
29 |     namespace: Namespace,
   |     --------------------
30 |     foreign_id: Option<ChatId>,
   |     --------------------------
31 |     token: &str,
   |     -----------
help: try wrapping the expression in `Some`
   |
68 |             token::save(context, Namespace::Invitenumber, Some(group.unwrap_or(0)), invitenumber);
   |                                                           +++++                  +
help: consider borrowing here
   |
68 |             token::save(context, Namespace::Invitenumber, group.unwrap_or(0), &invitenumber);
   |                                                                               +

error[E0308]: mismatched types
   --> src/securejoin.rs:73:78
    |
73  |     let auth = match token::lookup(context, Namespace::Auth, group.unwrap_or(0)) {
    |                                                                    --------- ^ expected `ChatId`, found integer
    |                                                                    |
    |                                                                    arguments to this method are incorrect
    |
help: the return type of this call is `{integer}` due to the type of the argument passed
   --> src/securejoin.rs:73:62
    |
73  |     let auth = match token::lookup(context, Namespace::Auth, group.unwrap_or(0)) {
    |                                                              ^^^^^^^^^^^^^^^^-^
    |                                                                              |
    |                                                                              this argument influences the return type of `unwrap_or`
note: method defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:951:12
    |
951 |     pub fn unwrap_or(self, default: T) -> T {
    |            ^^^^^^^^^
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
    |
73  |     let auth = match token::lookup(context, Namespace::Auth, group.unwrap_or(chat::ChatId(0))) {
    |                                                                              +++++++++++++ +

error[E0308]: mismatched types
  --> src/securejoin.rs:73:62
   |
73 |     let auth = match token::lookup(context, Namespace::Auth, group.unwrap_or(0)) {
   |                      -------------                           ^^^^^^^^^^^^^^^^^^ expected `Option<ChatId>`, found `ChatId`
   |                      |
   |                      arguments to this function are incorrect
   |
   = note: expected enum `std::option::Option<ChatId>`
            found struct `ChatId`
note: function defined here
  --> src/token.rs:63:14
   |
63 | pub async fn lookup(
   |              ^^^^^^
...
66 |     chat: Option<ChatId>,
   |     --------------------
help: try wrapping the expression in `Some`
   |
73 |     let auth = match token::lookup(context, Namespace::Auth, Some(group.unwrap_or(0))) {
   |                                                              +++++                  +

error[E0308]: mismatched types
  --> src/securejoin.rs:74:9
   |
73 |     let auth = match token::lookup(context, Namespace::Auth, group.unwrap_or(0)) {
   |                      ----------------------------------------------------------- this expression has type `impl futures::Future<Output = std::result::Result<std::option::Option<std::string::String>, anyhow::Error>>`
74 |         Some(auth) => auth,
   |         ^^^^^^^^^^ expected future, found `Option<_>`
   |
   = note: expected opaque type `impl futures::Future<Output = std::result::Result<std::option::Option<std::string::String>, anyhow::Error>>`
                     found enum `std::option::Option<_>`

error[E0308]: mismatched types
  --> src/securejoin.rs:75:9
   |
73 |     let auth = match token::lookup(context, Namespace::Auth, group.unwrap_or(0)) {
   |                      ----------------------------------------------------------- this expression has type `impl futures::Future<Output = std::result::Result<std::option::Option<std::string::String>, anyhow::Error>>`
74 |         Some(auth) => auth,
75 |         None => {
   |         ^^^^ expected future, found `Option<_>`
   |
   = note: expected opaque type `impl futures::Future<Output = std::result::Result<std::option::Option<std::string::String>, anyhow::Error>>`
                     found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> src/securejoin.rs:77:67
    |
77  |             token::save(context, Namespace::Auth, group.unwrap_or(0), auth);
    |                                                         --------- ^ expected `ChatId`, found integer
    |                                                         |
    |                                                         arguments to this method are incorrect
    |
help: the return type of this call is `{integer}` due to the type of the argument passed
   --> src/securejoin.rs:77:51
    |
77  |             token::save(context, Namespace::Auth, group.unwrap_or(0), auth);
    |                                                   ^^^^^^^^^^^^^^^^-^
    |                                                                   |
    |                                                                   this argument influences the return type of `unwrap_or`
note: method defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:951:12
    |
951 |     pub fn unwrap_or(self, default: T) -> T {
    |            ^^^^^^^^^
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
    |
77  |             token::save(context, Namespace::Auth, group.unwrap_or(chat::ChatId(0)), auth);
    |                                                                   +++++++++++++ +

error[E0308]: arguments to this function are incorrect
  --> src/securejoin.rs:77:13
   |
77 |             token::save(context, Namespace::Auth, group.unwrap_or(0), auth);
   |             ^^^^^^^^^^^                                               ---- expected `&str`, found `String`
   |
note: expected `Option<ChatId>`, found `ChatId`
  --> src/securejoin.rs:77:51
   |
77 |             token::save(context, Namespace::Auth, group.unwrap_or(0), auth);
   |                                                   ^^^^^^^^^^^^^^^^^^
   = note: expected enum `std::option::Option<ChatId>`
            found struct `ChatId`
note: function defined here
  --> src/token.rs:27:14
   |
27 | pub async fn save(
   |              ^^^^
28 |     context: &Context,
   |     -----------------
29 |     namespace: Namespace,
   |     --------------------
30 |     foreign_id: Option<ChatId>,
   |     --------------------------
31 |     token: &str,
   |     -----------
help: try wrapping the expression in `Some`
   |
77 |             token::save(context, Namespace::Auth, Some(group.unwrap_or(0)), auth);
   |                                                   +++++                  +
help: consider borrowing here
   |
77 |             token::save(context, Namespace::Auth, group.unwrap_or(0), &auth);
   |                                                                       +

error[E0599]: no method named `sql` found for reference `&context::Context` in the current scope
  --> src/securejoin.rs:82:54
   |
82 |     let self_addr = match sqlite3_get_config(context.sql(), "configured_addr", None) {
   |                                                      ^^^-- help: remove the arguments
   |                                                      |
   |                                                      field, not a method

error[E0425]: cannot find function `sqlite3_get_config` in this scope
  --> src/securejoin.rs:82:27
   |
82 |     let self_addr = match sqlite3_get_config(context.sql(), "configured_addr", None) {
   |                           ^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `log_error` in this scope
  --> src/securejoin.rs:85:13
   |
85 |             log_error(context, 0, "Not configured, cannot generate QR code.");
   |             ^^^^^^^^^ not found in this scope

error[E0599]: no method named `sql` found for reference `&context::Context` in the current scope
  --> src/securejoin.rs:90:54
   |
90 |     let self_name = match sqlite3_get_config(context.sql(), "displayname", "") {
   |                                                      ^^^-- help: remove the arguments
   |                                                      |
   |                                                      field, not a method

error[E0425]: cannot find function `sqlite3_get_config` in this scope
  --> src/securejoin.rs:90:27
   |
90 |     let self_name = match sqlite3_get_config(context.sql(), "displayname", "") {
   |                           ^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0277]: the `?` operator can only be applied to values that implement `Try`
  --> src/securejoin.rs:95:23
   |
95 |     let fingerprint = get_self_fingerprint(context)?;
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl futures::Future<Output = std::option::Option<key::Fingerprint>>`
   |
   = help: the trait `Try` is not implemented for `impl futures::Future<Output = std::option::Option<key::Fingerprint>>`
help: consider `await`ing on the `Future`
   |
95 |     let fingerprint = get_self_fingerprint(context).await?;
   |                                                    ++++++

error[E0425]: cannot find function `get_chat` in this scope
   --> src/securejoin.rs:101:20
    |
101 |         let chat = get_chat(context, group).await?;
    |                    ^^^^^^^^ not found in this scope

error[E0425]: cannot find function `log_info` in this scope
   --> src/securejoin.rs:106:9
    |
106 |         log_info(context, 0, "Generated QR code: {}", qr);
    |         ^^^^^^^^ not found in this scope

error[E0425]: cannot find function `log_info` in this scope
   --> src/securejoin.rs:110:9
    |
110 |         log_info(context, 0, "Generated QR code: {}", qr);
    |         ^^^^^^^^ not found in this scope

Some errors have detailed explanations: E0277, E0308, E0425, E0599, E0603.
For more information about an error, try `rustc --explain E0277`.
warning: `deltachat` (lib) generated 2 warnings
error: could not compile `deltachat` (lib) due to 31 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0599]: no method named `magic` found for reference `&context::Context` in the current scope
  --> src/securejoin.rs:58:37
   |
58 |     if context.is_none() || context.magic()!= DC_CONTEXT_MAGIC {
   |                                     ^^^^^ method not found in `&Context`
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `magic`, perhaps you need to implement one of them:
           candidate #1: `object::read::macho::file::MachHeader`
           candidate #2: `object::read::pe::file::ImageOptionalHeader`

error[E0308]: mismatched types
  --> src/securejoin.rs:64:78
   |
64 |     let invitenumber = match token::lookup(context, Namespace::Invitenumber, group.unwrap_or(0)) {
   |                              -------------                                   ^^^^^^^^^^^^^^^^^^ expected `Option<ChatId>`, found `ChatId`
   |                              |
   |                              arguments to this function are incorrect
   |
   = note: expected enum `std::option::Option<chat::ChatId>`
            found struct `chat::ChatId`
note: function defined here
  --> src/token.rs:63:14
   |
63 | pub async fn lookup(
   |              ^^^^^^
...
66 |     chat: Option<ChatId>,
   |     --------------------
help: try wrapping the expression in `Some`
   |
64 |     let invitenumber = match token::lookup(context, Namespace::Invitenumber, Some(group.unwrap_or(0))) {
   |                                                                              +++++                  +

error[E0308]: arguments to this function are incorrect
  --> src/securejoin.rs:68:13
   |
68 |             token::save(context, Namespace::Invitenumber, group.unwrap_or(0), invitenumber);
   |             ^^^^^^^^^^^                                                       ------------ expected `&str`, found `String`
   |
note: expected `Option<ChatId>`, found `ChatId`
  --> src/securejoin.rs:68:59
   |
68 |             token::save(context, Namespace::Invitenumber, group.unwrap_or(0), invitenumber);
   |                                                           ^^^^^^^^^^^^^^^^^^
   = note: expected enum `std::option::Option<chat::ChatId>`
            found struct `chat::ChatId`
note: function defined here
  --> src/token.rs:27:14
   |
27 | pub async fn save(
   |              ^^^^
28 |     context: &Context,
   |     -----------------
29 |     namespace: Namespace,
   |     --------------------
30 |     foreign_id: Option<ChatId>,
   |     --------------------------
31 |     token: &str,
   |     -----------
help: try wrapping the expression in `Some`
   |
68 |             token::save(context, Namespace::Invitenumber, Some(group.unwrap_or(0)), invitenumber);
   |                                                           +++++                  +
help: consider borrowing here
   |
68 |             token::save(context, Namespace::Invitenumber, group.unwrap_or(0), &invitenumber);
   |                                                                               +

error[E0308]: mismatched types
  --> src/securejoin.rs:73:62
   |
73 |     let auth = match token::lookup(context, Namespace::Auth, group.unwrap_or(0)) {
   |                      -------------                           ^^^^^^^^^^^^^^^^^^ expected `Option<ChatId>`, found `ChatId`
   |                      |
   |                      arguments to this function are incorrect
   |
   = note: expected enum `std::option::Option<chat::ChatId>`
            found struct `chat::ChatId`
note: function defined here
  --> src/token.rs:63:14
   |
63 | pub async fn lookup(
   |              ^^^^^^
...
66 |     chat: Option<ChatId>,
   |     --------------------
help: try wrapping the expression in `Some`
   |
73 |     let auth = match token::lookup(context, Namespace::Auth, Some(group.unwrap_or(0))) {
   |                                                              +++++                  +

error[E0308]: arguments to this function are incorrect
  --> src/securejoin.rs:77:13
   |
77 |             token::save(context, Namespace::Auth, group.unwrap_or(0), auth);
   |             ^^^^^^^^^^^                                               ---- expected `&str`, found `String`
   |
note: expected `Option<ChatId>`, found `ChatId`
  --> src/securejoin.rs:77:51
   |
77 |             token::save(context, Namespace::Auth, group.unwrap_or(0), auth);
   |                                                   ^^^^^^^^^^^^^^^^^^
   = note: expected enum `std::option::Option<chat::ChatId>`
            found struct `chat::ChatId`
note: function defined here
  --> src/token.rs:27:14
   |
27 | pub async fn save(
   |              ^^^^
28 |     context: &Context,
   |     -----------------
29 |     namespace: Namespace,
   |     --------------------
30 |     foreign_id: Option<ChatId>,
   |     --------------------------
31 |     token: &str,
   |     -----------
help: try wrapping the expression in `Some`
   |
77 |             token::save(context, Namespace::Auth, Some(group.unwrap_or(0)), auth);
   |                                                   +++++                  +
help: consider borrowing here
   |
77 |             token::save(context, Namespace::Auth, group.unwrap_or(0), &auth);
   |                                                                       +

warning: `deltachat` (lib test) generated 1 warning (1 duplicate)
error: could not compile `deltachat` (lib test) due to 31 previous errors; 1 warning emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


Fail
file path is :
projects/deltachat-core/rust/src/sql.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `Result` is defined multiple times
 --> src/sql.rs:9:34
  |
4 | use rusqlite::{Connection, OpenFlags, Result};
  |                                       ------ previous import of the type `Result` here
...
9 | use anyhow::{bail, Context as _, Result};
  |                                  ^^^^^^ `Result` reimported here
  |
  = note: `Result` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
  |
9 | use anyhow::{bail, Context as _, Result as OtherResult};
  |                                  ~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `Connection` is defined multiple times
  --> src/sql.rs:10:51
   |
4  | use rusqlite::{Connection, OpenFlags, Result};
   |                ---------- previous import of the type `Connection` here
...
10 | use rusqlite::{config::DbConfig, types::ValueRef, Connection, OpenFlags, Row};
   |                                                   ^^^^^^^^^^--
   |                                                   |
   |                                                   `Connection` reimported here
   |                                                   help: remove unnecessary import
   |
   = note: `Connection` must be defined only once in the type namespace of this module

error[E0252]: the name `OpenFlags` is defined multiple times
  --> src/sql.rs:10:63
   |
4  | use rusqlite::{Connection, OpenFlags, Result};
   |                            --------- previous import of the type `OpenFlags` here
...
10 | use rusqlite::{config::DbConfig, types::ValueRef, Connection, OpenFlags, Row};
   |                                                               ^^^^^^^^^--
   |                                                               |
   |                                                               `OpenFlags` reimported here
   |                                                               help: remove unnecessary import
   |
   = note: `OpenFlags` must be defined only once in the type namespace of this module

warning: unused import: `Result`
 --> src/sql.rs:9:34
  |
9 | use anyhow::{bail, Context as _, Result};
  |                                  ^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused imports: `Connection`, `OpenFlags`
  --> src/sql.rs:10:51
   |
10 | use rusqlite::{config::DbConfig, types::ValueRef, Connection, OpenFlags, Row};
   |                                                   ^^^^^^^^^^  ^^^^^^^^^

error[E0308]: mismatched types
   --> src/sql.rs:101:13
    |
101 |             bail!("Database is already opened.");
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:111:49
    |
111 |             .context("failed to set PRAGMA key")?;
    |                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<bool, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<bool, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:141:76
    |
141 |             .with_context(|| format!("path {path:?} is not valid unicode"))?
    |                                                                            ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:147:65
    |
147 |                     .context("failed to attach backup database")?;
    |                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:153:69
    |
153 |                         .context("failed to detach backup database")?;
    |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/sql.rs:154:32
    |
154 |                     return Err(err);
    |                            --- ^^^ expected `rusqlite::Error`, found `anyhow::Error`
    |                            |
    |                            arguments to this enum variant are incorrect
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
help: the type constructed contains `anyhow::Error` due to the type of the argument passed
   --> src/sql.rs:154:28
    |
154 |                     return Err(err);
    |                            ^^^^---^
    |                                |
    |                                this argument influences the type of `Err`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5
    |
511 |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
    |     ^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:162:77
    |
162 |                     .context("failed to set SQLITE_DBCONFIG_RESET_DATABASE")?;
    |                                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:164:62
    |
164 |                     .context("failed to vacuum the database")?;
    |                                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:166:79
    |
166 |                     .context("failed to unset SQLITE_DBCONFIG_RESET_DATABASE")?;
    |                                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:173:65
    |
173 |                     .context("failed to detach backup database")?;
    |                                                                 ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:174:20
    |
174 |                 res?;
    |                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:214:53
    |
214 |                 .context("failed to run migrations")?;
    |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:234:91
    |
234 |                 if let Some(ref mut peerstate) = Peerstate::from_addr(context, addr).await? {
    |                                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:236:53
    |
236 |                     peerstate.save_to_db(self).await?;
    |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:242:54
    |
242 |             update_saved_messages_icon(context).await?;
    |                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:243:46
    |
243 |             update_device_icon(context).await?;
    |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:249:62
    |
249 |             if context.get_config_delete_server_after().await?.is_some() {
    |                                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:252:68
    |
252 |                 add_device_msg(context, None, Some(&mut msg)).await?;
    |                                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:255:27
    |
255 |                     .await?;
    |                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:260:79
    |
260 |             if let Some(avatar) = context.get_config(Config::Selfavatar).await? {
    |                                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:261:89
    |
261 |                 let mut blob = BlobObject::new_from_path(context, avatar.as_ref()).await?;
    |                                                                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:266:35
    |
266 | ...                   .await?
    |                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:272:35
    |
272 | ...                   .await?
    |                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/sql.rs:289:13
    |
289 |             bail!("SQL database is already opened.");
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `rusqlite::Error`, found `anyhow::Error`
    |
    = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:305:75
    |
305 |             set_debug_logging_xdc(context, Some(MsgId::new(xdc_id))).await?;
    |                                                                           ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:322:74
    |
322 |         let pool = lock.take().context("SQL connection pool is not open")?;
    |                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:323:36
    |
323 |         let conn = pool.get().await?;
    |                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:325:51
    |
325 |             .context("failed to set PRAGMA rekey")?;
    |                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:384:62
    |
384 |         let pool = lock.as_ref().context("no SQL connection")?;
    |                                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<R, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<R, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:385:40
    |
385 |         let mut conn = pool.get().await?;
    |                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<R, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<R, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0609]: no field `conn` on type `&Sql`
   --> src/sql.rs:411:25
    |
411 |     let mut conn = self.conn.lock().await;
    |                         ^^^^ unknown field
    |
    = note: available fields are: `dbfile`, `write_mtx`, `pool`, `is_encrypted`, `config_cache`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:454:34
    |
454 |         Ok(usize::try_from(count)?)
    |                                  ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<usize, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<usize, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:614:67
    |
614 |             .context(format!("failed to fetch raw config: {key}"))?;
    |                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<std::option::Option<std::string::String>, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<std::option::Option<std::string::String>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:2566:67
     |
2566 |                         .context("chat table rowid overflows u32")?,
     |                                                                   ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:1224:9
     |
1224 |         sql.query_row_optional(&query, (self,), f).await
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `anyhow::Error`, found `rusqlite::Error`
     |
     = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^

error[E0271]: expected `{closure@message.rs:1494:18}` to be a closure that returns `Result<_, Error>`, but it returns `Result<(), Error>`
    --> src/message.rs:1509:44
     |
1509 |     if let Err(e) = context.sql.call_write(update).await {
     |                                 ---------- ^^^^^^ expected `Result<_, Error>`, found `Result<(), Error>`
     |                                 |
     |                                 required by a bound introduced by this call
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
note: required by a bound in `Sql::call_write`
    --> src/sql.rs:396:44
     |
394  |     pub async fn call_write<'a, F, R>(&'a self, function: F) -> Result<R>
     |                  ---------- required by a bound in this associated function
395  |     where
396  |         F: 'a + FnOnce(&mut Connection) -> Result<R> + Send,
     |                                            ^^^^^^^^^ required by this bound in `Sql::call_write`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:854:69
    |
854 |         .context("housekeeping: failed to SELECT value FROM config")?;
    |                                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql.rs:994:72
    |
994 |     .context(format!("housekeeping: failed to add_from_param {query}"))?;
    |                                                                        ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql/migrations.rs:844:54
    |
844 |             Sql::set_db_version_trans(trans, version)?;
    |                                                      ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/sql/migrations.rs:982:61
    |
982 |             Self::set_db_version_trans(transaction, version)?;
    |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
    --> src/chat.rs:4270:5
     |
4270 | /     context
4271 | |         .sql
4272 | |         .query_row_optional(
4273 | |             "SELECT id, blocked, protected FROM chats WHERE grpid=?;",
...    |
4284 | |         )
4285 | |         .await
     | |______________^ expected `anyhow::Error`, found `rusqlite::Error`
     |
     = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/securejoin/bobstate.rs:173:9
    |
173 | /         sql.query_row_optional(
174 | |             "SELECT id, invite, next_step, chat_id FROM bobstate;",
175 | |             (),
176 | |             |row| {
...   |
185 | |         )
186 | |         .await
    | |______________^ expected `anyhow::Error`, found `rusqlite::Error`
    |
    = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/chat.rs:3013:43
     |
3013 |             row_ids.push(row_id.try_into()?);
     |                                           ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<Vec<i64>, _>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<Vec<i64>, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0308]: mismatched types
    --> src/chat.rs:3017:5
     |
3017 |     context.sql.transaction(trans_fn).await
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `anyhow::Error`, found `rusqlite::Error`
     |
     = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^

error[E0271]: expected `{closure@chat.rs:3565:24}` to be a closure that returns `Result<_, Error>`, but it returns `Result<isize, Error>`
    --> src/chat.rs:3591:33
     |
3591 |         context.sql.transaction(trans_fn).await?
     |                     ----------- ^^^^^^^^ expected `Result<_, Error>`, found `Result<isize, Error>`
     |                     |
     |                     required by a bound introduced by this call
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
note: required by a bound in `Sql::transaction`
    --> src/sql.rs:489:61
     |
486  |     pub async fn transaction<G, H>(&self, callback: G) -> Result<H>
     |                  ----------- required by a bound in this associated function
...
489  |         G: Send + FnOnce(&mut rusqlite::Transaction<'_>) -> Result<H>,
     |                                                             ^^^^^^^^^ required by this bound in `Sql::transaction`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/contact.rs:827:43
    |
827 |                 row_id = u32::try_from(id)?;
    |                                           ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/contact.rs:867:71
    |
867 | ...                   (Chattype::Single, isize::try_from(row_id)?),
    |                                                                 ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/contact.rs:935:72
    |
935 |                 row_id = u32::try_from(transaction.last_insert_rowid())?;
    |                                                                        ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0308]: mismatched types
   --> src/chatlist.rs:457:5
    |
457 | /     context
458 | |         .sql
459 | |         .query_get_value(
460 | |             "SELECT id
...   |
466 | |         )
467 | |         .await
    | |______________^ expected `Result<Option<MsgId>, Error>`, found `Result<Option<_>, Error>`
    |
    = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^

error[E0609]: no field `conn` on type `&sql::Sql`
   --> src/sql.rs:411:25
    |
411 |     let mut conn = self.conn.lock().await;
    |                         ^^^^ unknown field
    |
    = note: available fields are: `dbfile`, `write_mtx`, `pool`, `is_encrypted`, `config_cache`

error[E0277]: `?` couldn't convert the error to `select_folder::Error`
   --> src/imap/select_folder.rs:240:19
    |
240 |             .await?;
    |                   ^ the trait `From<rusqlite::Error>` is not implemented for `select_folder::Error`, which is required by `std::result::Result<bool, select_folder::Error>: FromResidual<std::result::Result<Infallible, rusqlite::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `From<anyhow::Error>` is implemented for `select_folder::Error`
    = help: for that trait implementation, expected `anyhow::Error`, found `rusqlite::Error`
    = note: required for `std::result::Result<bool, select_folder::Error>` to implement `FromResidual<std::result::Result<Infallible, rusqlite::Error>>`

error[E0308]: mismatched types
   --> src/peerstate.rs:613:9
    |
613 |         sql.transaction(trans_fn).await
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `anyhow::Error`, found `rusqlite::Error`
    |
    = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^

error[E0271]: expected `{closure@message.rs:1494:18}` to be a closure that returns `Result<_, Error>`, but it returns `Result<(), Error>`
    --> src/message.rs:1509:44
     |
1509 |     if let Err(e) = context.sql.call_write(update).await {
     |                                 ---------- ^^^^^^ expected `Result<_, Error>`, found `Result<(), Error>`
     |                                 |
     |                                 required by a bound introduced by this call
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
note: required by a bound in `sql::Sql::call_write`
    --> src/sql.rs:396:44
     |
394  |     pub async fn call_write<'a, F, R>(&'a self, function: F) -> Result<R>
     |                  ---------- required by a bound in this associated function
395  |     where
396  |         F: 'a + FnOnce(&mut Connection) -> Result<R> + Send,
     |                                            ^^^^^^^^^ required by this bound in `Sql::call_write`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/key.rs:329:53
    |
329 |                 .context("Failed to insert keypair")?;
    |                                                     ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/context.rs:406:9
    |
406 |         self.sql.check_passphrase(passphrase).await
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `anyhow::Error`, found `rusqlite::Error`
    |
    = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
  --> src/update_helper.rs:60:74
   |
60 |                 let update = param.update_timestamp(scope, new_timestamp)?;
   |                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             <rusqlite::Error as From<FromSqlError>>
             <rusqlite::Error as From<std::ffi::NulError>>
             <rusqlite::Error as From<std::str::Utf8Error>>
   = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/update_helper.rs:52:9
    |
52  | /         context
53  | |             .sql
54  | |             .transaction(|transaction| {
55  | |                 let mut param: Params =
...   |
68  | |             })
69  | |             .await
    | |__________________^ expected `anyhow::Error`, found `rusqlite::Error`
    |
    = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/location.rs:719:90
    |
719 |                         newest_location_id = Some(u32::try_from(conn.last_insert_rowid())?);
    |                                                                                          ^ the trait `From<TryFromIntError>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, TryFromIntError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, TryFromIntError>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
  --> src/update_helper.rs:30:74
   |
30 |                 let update = param.update_timestamp(scope, new_timestamp)?;
   |                                                                          ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             <rusqlite::Error as From<FromSqlError>>
             <rusqlite::Error as From<std::ffi::NulError>>
             <rusqlite::Error as From<std::str::Utf8Error>>
   = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/update_helper.rs:20:9
    |
20  | /         self.sql
21  | |             .transaction(|transaction| {
22  | |                 let mut param: Params = transaction.query_row(
23  | |                     "SELECT param FROM contacts WHERE id=?",
...   |
38  | |             })
39  | |             .await
    | |__________________^ expected `anyhow::Error`, found `rusqlite::Error`
    |
    = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/config.rs:702:9
    |
702 |         self.sql.set_raw_config(key, value).await
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `anyhow::Error`, found `rusqlite::Error`
    |
    = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/config.rs:708:9
    |
708 |         self.sql.get_raw_config(key).await
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `anyhow::Error`, found `rusqlite::Error`
    |
    = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/imex.rs:801:61
    |
801 |                 .context("failed to attach backup database")?;
    |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/imex.rs:811:61
    |
811 |                 .context("failed to detach backup database")?;
    |                                                             ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/imex.rs:812:16
    |
812 |             res?;
    |                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0308]: mismatched types
   --> src/imex.rs:794:5
    |
794 | /     context
795 | |         .sql
796 | |         .call_write(|conn| {
797 | |             conn.execute("VACUUM;", ())
...   |
814 | |         })
815 | |         .await
    | |______________^ expected `anyhow::Error`, found `rusqlite::Error`
    |
    = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^

error[E0271]: expected `{closure@chat.rs:3565:24}` to be a closure that returns `Result<_, Error>`, but it returns `Result<isize, Error>`
    --> src/chat.rs:3591:33
     |
3591 |         context.sql.transaction(trans_fn).await?
     |                     ----------- ^^^^^^^^ expected `Result<_, Error>`, found `Result<isize, Error>`
     |                     |
     |                     required by a bound introduced by this call
     |
     = note: `anyhow::Error` and `rusqlite::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
note: required by a bound in `sql::Sql::transaction`
    --> src/sql.rs:489:61
     |
486  |     pub async fn transaction<G, H>(&self, callback: G) -> Result<H>
     |                  ----------- required by a bound in this associated function
...
489  |         G: Send + FnOnce(&mut rusqlite::Transaction<'_>) -> Result<H>,
     |                                                             ^^^^^^^^^ required by this bound in `Sql::transaction`

error[E0308]: mismatched types
   --> src/message.rs:181:9
    |
181 | /         context
182 | |             .sql
183 | |             .query_map(
184 | |                 "SELECT folder, uid FROM imap WHERE rfc724_mid=?",
...   |
195 | |             )
196 | |             .await
    | |__________________^ expected `anyhow::Error`, found `rusqlite::Error`
    |
    = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/message.rs:201:9
    |
201 | /         context
202 | |             .sql
203 | |             .query_get_value("SELECT hop_info FROM msgs WHERE id=?", (self,))
204 | |             .await
    | |__________________^ expected `Result<Option<String>, Error>`, found `Result<Option<_>, Error>`
    |
    = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
    --> src/message.rs:1360:5
     |
1360 | /     context
1361 | |         .sql
1362 | |         .query_map(
1363 | |             "SELECT contact_id, timestamp_sent FROM msgs_mdns WHERE msg_id=?",
...    |
1371 | |         )
1372 | |         .await
     | |______________^ expected `anyhow::Error`, found `rusqlite::Error`
     |
     = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
     |
14   | pub enum Error {
     | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
    --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
     |
387  | pub struct Error {
     | ^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/securejoin/bobstate.rs:139:9
    |
139 | /         context
140 | |             .sql
141 | |             .transaction(move |transaction| {
142 | |                 // We need to start a write transaction right away, so that we have the
...   |
165 | |             })
166 | |             .await
    | |__________________^ expected `anyhow::Error`, found `rusqlite::Error`
    |
    = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/webxdc.rs:673:73
    |
673 | ...                   ..serde_json::from_str(&update_item_str)?
    |                                                               ^ the trait `From<serde_json::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, serde_json::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, serde_json::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src/webxdc.rs:682:75
    |
682 |                         json.push_str(&serde_json::to_string(&update_item)?);
    |                                                                           ^ the trait `From<serde_json::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<_, rusqlite::Error>: FromResidual<std::result::Result<Infallible, serde_json::Error>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `std::result::Result<_, rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, serde_json::Error>>`

error[E0277]: the trait bound `rusqlite::Error: From<anyhow::Error>` is not satisfied
   --> src/peer_channels.rs:306:17
    |
306 | /                 g.map(|data| {
307 | |                     let (key, server) = data?;
308 | |                     let server = server.map(|data| Ok::<_, url::ParseError>(RelayUrl::from(Url::parse(&data)?))).transpose()?;
309 | |                     let id = NodeId::from_bytes(&key.try_into()
...   |
315 | |                 .collect::<std::result::Result<Vec<_>, _>>()
316 | |                 .map_err(Into::into)
    | |____________________________________^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `anyhow::Error: Into<_>`
    |
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `anyhow::Error` to implement `Into<rusqlite::Error>`

error[E0277]: the trait bound `rusqlite::Error: From<anyhow::Error>` is not satisfied
   --> src/peer_channels.rs:316:26
    |
316 |                 .map_err(Into::into)
    |                          ^^^^^^^^^^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `anyhow::Error: Into<_>`
    |
    = help: the following other types implement trait `From<T>`:
              <rusqlite::Error as From<FromSqlError>>
              <rusqlite::Error as From<std::ffi::NulError>>
              <rusqlite::Error as From<std::str::Utf8Error>>
    = note: required for `anyhow::Error` to implement `Into<rusqlite::Error>`

error[E0308]: mismatched types
   --> src/peer_channels.rs:296:5
    |
296 | /     ctx.sql
297 | |         .query_map(
298 | |             "SELECT public_key, relay_server FROM iroh_gossip_peers WHERE msg_id = ? AND public_key != ?",
299 | |             (msg_id, PUBLIC_KEY_STUB),
...   |
318 | |         )
319 | |         .await
    | |______________^ expected `anyhow::Error`, found `rusqlite::Error`
    |
    = note: `rusqlite::Error` and `anyhow::Error` have similar names, but are actually distinct types
note: `rusqlite::Error` is defined in crate `rusqlite`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `anyhow::Error` is defined in crate `anyhow`
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/lib.rs:387:1
    |
387 | pub struct Error {
    | ^^^^^^^^^^^^^^^^

Some errors have detailed explanations: E0252, E0271, E0277, E0308, E0609.
For more information about an error, try `rustc --explain E0252`.
warning: `deltachat` (lib) generated 2 warnings
error: could not compile `deltachat` (lib) due to 76 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/sql.rs:1175:28
     |
1175 |         let dir = tempdir()?;
     |                            ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/sql.rs:1208:46
     |
1208 |             migrations::run(&t, &t.sql).await?;
     |                                              ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/sql.rs:1246:28
     |
1246 |         let dir = tempdir()?;
     |                            ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/sql.rs:1253:63
     |
1253 |             .context("failed to open the database first time")?;
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/sql.rs:1266:64
     |
1266 |             .context("failed to open the database second time")?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/sql.rs:1279:28
     |
1279 |         let dir = tempdir()?;
     |                            ^ the trait `From<std::io::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, std::io::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, std::io::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/sql.rs:1285:63
     |
1285 |             .context("failed to open the database first time")?;
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/sql.rs:1292:64
     |
1292 |             .context("failed to open the database second time")?;
     |                                                                ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/sql.rs:1295:52
     |
1295 |             .context("failed to change passphrase")?;
     |                                                    ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/sql.rs:1303:41
     |
1303 |             let conn1 = pool.get().await?;
     |                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/sql.rs:1304:41
     |
1304 |             let conn2 = pool.get().await?;
     |                                         ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
    --> src/sql.rs:1324:63
     |
1324 |             .context("failed to open the database third time")?;
     |                                                               ^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, anyhow::Error>>`
     |
     = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
     = help: the following other types implement trait `From<T>`:
               <rusqlite::Error as From<FromSqlError>>
               <rusqlite::Error as From<std::ffi::NulError>>
               <rusqlite::Error as From<std::str::Utf8Error>>
     = note: required for `std::result::Result<(), rusqlite::Error>` to implement `FromResidual<std::result::Result<Infallible, anyhow::Error>>`

warning: `deltachat` (lib test) generated 2 warnings (2 duplicates)
error: could not compile `deltachat` (lib test) due to 88 previous errors; 2 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


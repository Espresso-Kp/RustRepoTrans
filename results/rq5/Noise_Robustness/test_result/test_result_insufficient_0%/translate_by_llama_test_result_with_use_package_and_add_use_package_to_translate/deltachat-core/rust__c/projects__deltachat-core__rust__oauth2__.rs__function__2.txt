Fail
file path is :
projects/deltachat-core/rust/src/oauth2.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0428]: the name `replace_in_uri` is defined multiple times
   --> src/oauth2.rs:305:1
    |
177 | fn replace_in_uri(url: &str, key: &str, value: &str) -> String {
    | -------------------------------------------------------------- previous definition of the value `replace_in_uri` here
...
305 | fn replace_in_uri(uri: &str, key: &str, value: &str) -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `replace_in_uri` redefined here
    |
    = note: `replace_in_uri` must be defined only once in the value namespace of this module

error: cannot find macro `anyhow` in this scope
  --> src/oauth2.rs:89:13
   |
89 |         Err(anyhow!("Internal OAuth2 error"))
   |             ^^^^^^
   |
   = note: `anyhow` is in scope, but it is a crate, not a macro
help: consider importing this macro
   |
3  + use anyhow::anyhow;
   |

error[E0412]: cannot find type `OAuth2` in this scope
   --> src/oauth2.rs:181:35
    |
35  | struct Oauth2 {
    | ------------- similarly named struct `Oauth2` defined here
...
181 | fn get_info(addr: &str) -> Result<OAuth2> {
    |                                   ^^^^^^ help: a struct with a similar name exists: `Oauth2`
    |
note: struct `crate::imap::OAuth2` exists but is inaccessible
   --> src/imap.rs:101:1
    |
101 | struct OAuth2 {
    | ^^^^^^^^^^^^^ not accessible

error[E0599]: no method named `log_warning` found for reference `&context::Context` in the current scope
  --> src/oauth2.rs:88:17
   |
88 |         context.log_warning("Internal OAuth2 error");
   |                 ^^^^^^^^^^^ method not found in `&Context`

error[E0609]: no field `config` on type `&context::Context`
   --> src/oauth2.rs:106:33
    |
106 |         refresh_token = context.config.get("oauth2_refresh_token").ok();
    |                                 ^^^^^^ unknown field
    |
    = note: available field is: `inner`
    = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0609]: no field `config` on type `&context::Context`
   --> src/oauth2.rs:107:37
    |
107 |         refresh_token_for = context.config.get("oauth2_refresh_token_for").ok();
    |                                     ^^^^^^ unknown field
    |
    = note: available field is: `inner`
    = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0282]: type annotations needed for `std::option::Option<T>`
   --> src/oauth2.rs:95:9
    |
95  |     let mut refresh_token_for = None;
    |         ^^^^^^^^^^^^^^^^^^^^^
...
108 |         if refresh_token.is_none() || refresh_token_for.as_ref().unwrap().as_str()!= code {
    |                                                                           ------ type must be known at this point
    |
help: consider giving `refresh_token_for` an explicit type, where the type for type parameter `T` is specified
    |
95  |     let mut refresh_token_for: std::option::Option<T> = None;
    |                              ++++++++++++++++++++++++

error[E0609]: no field `config` on type `&context::Context`
   --> src/oauth2.rs:109:36
    |
109 |             redirect_uri = context.config.get("oauth2_pending_redirect_uri").ok();
    |                                    ^^^^^^ unknown field
    |
    = note: available field is: `inner`
    = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0609]: no field `config` on type `&context::Context`
   --> src/oauth2.rs:113:36
    |
113 |             redirect_uri = context.config.get("oauth2_redirect_uri").ok();
    |                                    ^^^^^^ unknown field
    |
    = note: available field is: `inner`
    = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0609]: no field `config` on type `&context::Context`
   --> src/oauth2.rs:118:32
    |
118 |         access_token = context.config.get("oauth2_access_token").ok();
    |                                ^^^^^^ unknown field
    |
    = note: available field is: `inner`
    = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0308]: mismatched types
   --> src/oauth2.rs:120:28
    |
120 |             return Ok(Some(access_token.clone()));
    |                       ---- ^^^^^^^^^^^^^^^^^^^^ expected `String`, found `Option<_>`
    |                       |
    |                       arguments to this enum variant are incorrect
    |
    = note: expected struct `std::string::String`
                 found enum `std::option::Option<_>`
help: the type constructed contains `std::option::Option<_>` due to the type of the argument passed
   --> src/oauth2.rs:120:23
    |
120 |             return Ok(Some(access_token.clone()));
    |                       ^^^^^--------------------^
    |                            |
    |                            this argument influences the type of `Some`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:578:5
    |
578 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^^^
help: consider using `Option::expect` to unwrap the `std::option::Option<_>` value, panicking if the value is an `Option::None`
    |
120 |             return Ok(Some(access_token.clone().expect("REASON")));
    |                                                +++++++++++++++++

error[E0609]: no field `config` on type `&context::Context`
   --> src/oauth2.rs:127:36
    |
127 |             redirect_uri = context.config.get("oauth2_pending_redirect_uri").ok();
    |                                    ^^^^^^ unknown field
    |
    = note: available field is: `inner`
    = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0609]: no field `config` on type `&context::Context`
   --> src/oauth2.rs:131:36
    |
131 |             redirect_uri = context.config.get("oauth2_redirect_uri").ok();
    |                                    ^^^^^^ unknown field
    |
    = note: available field is: `inner`
    = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0609]: no field `config` on type `&context::Context`
   --> src/oauth2.rs:135:32
    |
135 |         redirect_uri = context.config.get("oauth2_redirect_uri").ok();
    |                                ^^^^^^ unknown field
    |
    = note: available field is: `inner`
    = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0425]: cannot find function `token_url_ref` in this scope
   --> src/oauth2.rs:141:36
    |
141 |     let token_url = replace_in_uri(token_url_ref().unwrap(), "$REDIRECT_URI", redirect_uri.as_ref().unwrap());
    |                                    ^^^^^^^^^^^^^ help: a local variable with a similar name exists: `token_url`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/oauth2.rs:141:92
    |
141 |     let token_url = replace_in_uri(token_url_ref().unwrap(), "$REDIRECT_URI", redirect_uri.as_ref().unwrap());
    |                                                                                            ^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::option::Option::<T>::as_ref`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:585:6
    |
585 | impl<T> Option<T> {
    |      ^ required by this bound in `Option::<T>::as_ref`
...
680 |     pub const fn as_ref(&self) -> Option<&T> {
    |                  ------ required by a bound in this associated function

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/oauth2.rs:96:28
    |
96  |     let mut redirect_uri = None;
    |                            ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::None`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `std::prelude::v1::None`
...
574 |     None,
    |     ---- required by a bound in this unit variant

error[E0425]: cannot find function `token_url_ref` in this scope
   --> src/oauth2.rs:142:36
    |
142 |     let token_url = replace_in_uri(token_url_ref().unwrap(), "$CODE", code);
    |                                    ^^^^^^^^^^^^^ help: a local variable with a similar name exists: `token_url`

error[E0425]: cannot find function `token_url_ref` in this scope
   --> src/oauth2.rs:143:36
    |
143 |     let token_url = replace_in_uri(token_url_ref().unwrap(), "$REFRESH_TOKEN", refresh_token.as_ref().unwrap());
    |                                    ^^^^^^^^^^^^^ help: a local variable with a similar name exists: `token_url`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/oauth2.rs:143:94
    |
143 |     let token_url = replace_in_uri(token_url_ref().unwrap(), "$REFRESH_TOKEN", refresh_token.as_ref().unwrap());
    |                                                                                              ^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::option::Option::<T>::as_ref`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:585:6
    |
585 | impl<T> Option<T> {
    |      ^ required by this bound in `Option::<T>::as_ref`
...
680 |     pub const fn as_ref(&self) -> Option<&T> {
    |                  ------ required by a bound in this associated function

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/oauth2.rs:108:26
    |
108 |         if refresh_token.is_none() || refresh_token_for.as_ref().unwrap().as_str()!= code {
    |                          ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::option::Option::<T>::is_none`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:585:6
    |
585 | impl<T> Option<T> {
    |      ^ required by this bound in `Option::<T>::is_none`
...
649 |     pub const fn is_none(&self) -> bool {
    |                  ------- required by a bound in this associated function

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/oauth2.rs:125:12
    |
125 |     if let Some(ref refresh_token) = refresh_token {
    |            ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::Some`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `std::prelude::v1::Some`
...
578 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ---- required by a bound in this tuple variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/oauth2.rs:94:29
    |
94  |     let mut refresh_token = None;
    |                             ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::None`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `std::prelude::v1::None`
...
574 |     None,
    |     ---- required by a bound in this unit variant

error[E0599]: no method named `call_http_post` found for reference `&context::Context` in the current scope
   --> src/oauth2.rs:146:20
    |
146 |     json = context.call_http_post(token_url.as_ref().unwrap(), 0).await?;
    |                    ^^^^^^^^^^^^^^ method not found in `&Context`

error[E0282]: type annotations needed
   --> src/oauth2.rs:146:45
    |
146 |     json = context.call_http_post(token_url.as_ref().unwrap(), 0).await?;
    |                                             ^^^^^^   ------ type must be known at this point
    |
help: try using a fully qualified path to specify the expected types
    |
146 |     json = context.call_http_post(<std::string::String as AsRef<T>>::as_ref(&token_url).unwrap(), 0).await?;
    |                                   +++++++++++++++++++++++++++++++++++++++++++         ~

error[E0599]: no method named `parse_json` found for enum `std::option::Option` in the current scope
   --> src/oauth2.rs:149:21
    |
149 |     let json = json.parse_json().unwrap();
    |                     ^^^^^^^^^^ method not found in `Option<_>`

error[E0609]: no field `config` on type `&context::Context`
   --> src/oauth2.rs:158:17
    |
158 |         context.config.set("oauth2_refresh_token", refresh_token.clone());
    |                 ^^^^^^ unknown field
    |
    = note: available field is: `inner`
    = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0282]: type annotations needed
   --> src/oauth2.rs:158:66
    |
158 |         context.config.set("oauth2_refresh_token", refresh_token.clone());
    |                                                                  ^^^^^ cannot infer type for type parameter `T` declared on the enum `Option`

error[E0609]: no field `config` on type `&context::Context`
   --> src/oauth2.rs:159:17
    |
159 |         context.config.set("oauth2_refresh_token_for", code.clone());
    |                 ^^^^^^ unknown field
    |
    = note: available field is: `inner`
    = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0609]: no field `config` on type `&context::Context`
   --> src/oauth2.rs:164:17
    |
164 |         context.config.set("oauth2_access_token", access_token.clone());
    |                 ^^^^^^ unknown field
    |
    = note: available field is: `inner`
    = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0599]: no method named `set` found for reference `&context::Context` in the current scope
   --> src/oauth2.rs:165:17
    |
165 |         context.set("oauth_timestamp_expires", time::now() + expires_in.unwrap_or(0) - 5);
    |                 ^^^ method not found in `&Context`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `set`, perhaps you need to implement one of them:
            candidate #1: `bitflags::traits::Flags`
            candidate #2: `prometheus_client::metrics::gauge::Atomic`
help: one of the expressions' fields has a method of the same name
    |
165 |         context.inner.iroh.set("oauth_timestamp_expires", time::now() + expires_in.unwrap_or(0) - 5);
    |                 +++++++++++
help: one of the expressions' fields has a method of the same name
    |
165 |         context.iroh.set("oauth_timestamp_expires", time::now() + expires_in.unwrap_or(0) - 5);
    |                 +++++

error[E0433]: failed to resolve: function `time` is not a crate or module
   --> src/oauth2.rs:165:48
    |
165 |         context.set("oauth_timestamp_expires", time::now() + expires_in.unwrap_or(0) - 5);
    |                                                ^^^^ function `time` is not a crate or module
    |
help: there is a crate or module with a similar name
    |
165 |         context.set("oauth_timestamp_expires", mime::now() + expires_in.unwrap_or(0) - 5);
    |                                                ~~~~

error[E0599]: no method named `log_warning` found for reference `&context::Context` in the current scope
   --> src/oauth2.rs:167:17
    |
167 |         context.log_warning("Failed to find OAuth2 access token");
    |                 ^^^^^^^^^^^ method not found in `&Context`

error[E0609]: no field `config` on type `&context::Context`
   --> src/oauth2.rs:172:17
    |
172 |         context.config.set("oauth2_redirect_uri", redirect_uri.as_ref().unwrap());
    |                 ^^^^^^ unknown field
    |
    = note: available field is: `inner`
    = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0599]: the method `as_ref` exists for enum `Option<str>`, but its trait bounds were not satisfied
   --> src/oauth2.rs:172:64
    |
172 |         context.config.set("oauth2_redirect_uri", redirect_uri.as_ref().unwrap());
    |                                                                ^^^^^^ method cannot be called on `Option<str>` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `str: Sized`
note: the method `as_ref` exists on the type `str`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:221:5
    |
221 |     fn as_ref(&self) -> &T;
    |     ^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `str` value, panicking if the value is an `Option::None`
    |
172 |         context.config.set("oauth2_redirect_uri", redirect_uri.expect("REASON").as_ref().unwrap());
    |                                                               +++++++++++++++++

error[E0599]: no method named `set` found for reference `&context::Context` in the current scope
   --> src/oauth2.rs:165:17
    |
165 |         context.set("oauth_timestamp_expires", time::now() + expires_in.unwrap_or(0) - 5);
    |                 ^^^ method not found in `&Context`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `set`, perhaps you need to implement one of them:
            candidate #1: `bitflags::traits::Flags`
            candidate #2: `BitSetLike`
            candidate #3: `prometheus_client::metrics::gauge::Atomic`
            candidate #4: `criterion_plot::prelude::Set`
help: one of the expressions' fields has a method of the same name
    |
165 |         context.inner.iroh.set("oauth_timestamp_expires", time::now() + expires_in.unwrap_or(0) - 5);
    |                 +++++++++++
help: one of the expressions' fields has a method of the same name
    |
165 |         context.iroh.set("oauth_timestamp_expires", time::now() + expires_in.unwrap_or(0) - 5);
    |                 +++++

Some errors have detailed explanations: E0277, E0282, E0308, E0412, E0425, E0428, E0433, E0599, E0609.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `deltachat` (lib) due to 35 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 35 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


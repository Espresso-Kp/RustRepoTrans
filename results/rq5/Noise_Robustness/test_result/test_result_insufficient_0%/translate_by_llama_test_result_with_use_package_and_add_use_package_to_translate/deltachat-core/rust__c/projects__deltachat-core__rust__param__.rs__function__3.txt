Fail
file path is :
projects/deltachat-core/rust/src/param.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
warning: unused import: `std::mem`
 --> src/param.rs:3:5
  |
3 | use std::mem;
  |     ^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

error: usage of an `unsafe` block
   --> src/param.rs:279:21
    |
279 |         let param = unsafe { alloc::alloc_zeroed::<Self>(1) };
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: the lint level is defined here
   --> src/lib.rs:4:11
    |
4   | #![forbid(unsafe_code)]
    |           ^^^^^^^^^^^

error: usage of an `unsafe` block
   --> src/param.rs:283:24
    |
283 |         param.packed = unsafe { alloc::alloc_zeroed::<u8>(1) };
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: usage of an `unsafe` block
   --> src/param.rs:291:9
    |
291 | /         unsafe {
292 | |             alloc::dealloc(self.packed as *mut u8, core::alloc::Layout::new::<u8>());
293 | |             alloc::dealloc(self as *mut Self as *mut u8, core::alloc::Layout::new::<Self>());
294 | |         }
    | |_________^

error[E0599]: no method named `set_int` found for enum `std::result::Result` in the current scope
    --> src/chat.rs:2528:24
     |
2528 |                 params.set_int(Param::Selftalk, 1);
     |                        ^^^^^^^ method not found in `Result<Params, Error>`
     |
note: the method `set_int` exists on the type `param::Params`
    --> src/param.rs:437:5
     |
437  |     pub fn set_int(&mut self, key: Param, value: i32) -> &mut Self {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: use the `?` operator to extract the `param::Params` value, propagating a `Result::Err` value to the caller
     |
2528 |                 params?.set_int(Param::Selftalk, 1);
     |                       +

error[E0599]: no method named `set_int` found for enum `std::result::Result` in the current scope
    --> src/chat.rs:2531:24
     |
2531 |                 params.set_int(Param::Devicetalk, 1);
     |                        ^^^^^^^ method not found in `Result<Params, Error>`
     |
note: the method `set_int` exists on the type `param::Params`
    --> src/param.rs:437:5
     |
437  |     pub fn set_int(&mut self, key: Param, value: i32) -> &mut Self {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: use the `?` operator to extract the `param::Params` value, propagating a `Result::Err` value to the caller
     |
2531 |                 params?.set_int(Param::Devicetalk, 1);
     |                       +

error[E0599]: `std::result::Result<param::Params, anyhow::Error>` doesn't implement `std::fmt::Display`
    --> src/chat.rs:2552:32
     |
2552 |                         params.to_string(),
     |                                ^^^^^^^^^ `std::result::Result<param::Params, anyhow::Error>` cannot be formatted with the default formatter
     |
    ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
     |
502  | pub enum Result<T, E> {
     | --------------------- doesn't satisfy `_: Display` or `_: ToString`
     |
     = note: the following trait bounds were not satisfied:
             `std::result::Result<param::Params, anyhow::Error>: std::fmt::Display`
             which is required by `std::result::Result<param::Params, anyhow::Error>: ToString`

error[E0599]: no method named `set_cmd` found for enum `std::result::Result` in the current scope
    --> src/chat.rs:1643:16
     |
1643 |         param0.set_cmd(SystemMessage::SecurejoinWait);
     |                ^^^^^^^ method not found in `Result<Params, Error>`
     |
note: the method `set_cmd` exists on the type `param::Params`
    --> src/param.rs:364:5
     |
364  |     pub fn set_cmd(&mut self, value: SystemMessage) {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: use the `?` operator to extract the `param::Params` value, propagating a `Result::Err` value to the caller
     |
1643 |         param0?.set_cmd(SystemMessage::SecurejoinWait);
     |               +

error[E0599]: no method named `set_cmd` found for enum `std::result::Result` in the current scope
    --> src/chat.rs:1644:16
     |
1644 |         param1.set_cmd(SystemMessage::SecurejoinWaitTimeout);
     |                ^^^^^^^ method not found in `Result<Params, Error>`
     |
note: the method `set_cmd` exists on the type `param::Params`
    --> src/param.rs:364:5
     |
364  |     pub fn set_cmd(&mut self, value: SystemMessage) {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: use the `?` operator to extract the `param::Params` value, propagating a `Result::Err` value to the caller
     |
1644 |         param1?.set_cmd(SystemMessage::SecurejoinWaitTimeout);
     |               +

error[E0599]: `std::result::Result<param::Params, anyhow::Error>` doesn't implement `std::fmt::Display`
    --> src/chat.rs:1645:40
     |
1645 |         let (param0, param1) = (param0.to_string(), param1.to_string());
     |                                        ^^^^^^^^^ `std::result::Result<param::Params, anyhow::Error>` cannot be formatted with the default formatter
     |
    ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
     |
502  | pub enum Result<T, E> {
     | --------------------- doesn't satisfy `_: Display` or `_: ToString`
     |
     = note: the following trait bounds were not satisfied:
             `std::result::Result<param::Params, anyhow::Error>: std::fmt::Display`
             which is required by `std::result::Result<param::Params, anyhow::Error>: ToString`

error[E0599]: `std::result::Result<param::Params, anyhow::Error>` doesn't implement `std::fmt::Display`
    --> src/chat.rs:1645:60
     |
1645 |         let (param0, param1) = (param0.to_string(), param1.to_string());
     |                                                            ^^^^^^^^^ `std::result::Result<param::Params, anyhow::Error>` cannot be formatted with the default formatter
     |
    ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
     |
502  | pub enum Result<T, E> {
     | --------------------- doesn't satisfy `_: Display` or `_: ToString`
     |
     = note: the following trait bounds were not satisfied:
             `std::result::Result<param::Params, anyhow::Error>: std::fmt::Display`
             which is required by `std::result::Result<param::Params, anyhow::Error>: ToString`

error[E0599]: no method named `set_cmd` found for enum `std::result::Result` in the current scope
    --> src/chat.rs:4460:15
     |
4460 |         param.set_cmd(cmd)
     |               ^^^^^^^ method not found in `Result<Params, Error>`
     |
note: the method `set_cmd` exists on the type `param::Params`
    --> src/param.rs:364:5
     |
364  |     pub fn set_cmd(&mut self, value: SystemMessage) {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: use the `?` operator to extract the `param::Params` value, propagating a `Result::Err` value to the caller
     |
4460 |         param?.set_cmd(cmd)
     |              +

error[E0599]: `std::result::Result<param::Params, anyhow::Error>` doesn't implement `std::fmt::Display`
    --> src/chat.rs:4479:19
     |
4479 |             param.to_string(),
     |                   ^^^^^^^^^ `std::result::Result<param::Params, anyhow::Error>` cannot be formatted with the default formatter
     |
    ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
     |
502  | pub enum Result<T, E> {
     | --------------------- doesn't satisfy `_: Display` or `_: ToString`
     |
     = note: the following trait bounds were not satisfied:
             `std::result::Result<param::Params, anyhow::Error>: std::fmt::Display`
             which is required by `std::result::Result<param::Params, anyhow::Error>: ToString`

error[E0599]: no method named `set` found for enum `std::result::Result` in the current scope
    --> src/receive_imf.rs:2300:15
     |
2300 |             p.set(Param::ListPost, list_post);
     |               ^^^ method not found in `Result<Params, Error>`
     |
note: the method `set` exists on the type `param::Params`
    --> src/param.rs:310:5
     |
310  |     pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
     |
2300 |             p.expect("REASON").set(Param::ListPost, list_post);
     |              +++++++++++++++++

error[E0599]: `std::result::Result<param::Params, anyhow::Error>` doesn't implement `std::fmt::Display`
    --> src/receive_imf.rs:2301:15
     |
2301 |             p.to_string()
     |               ^^^^^^^^^ `std::result::Result<param::Params, anyhow::Error>` cannot be formatted with the default formatter
     |
    ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
     |
502  | pub enum Result<T, E> {
     | --------------------- doesn't satisfy `_: Display` or `_: ToString`
     |
     = note: the following trait bounds were not satisfied:
             `std::result::Result<param::Params, anyhow::Error>: std::fmt::Display`
             which is required by `std::result::Result<param::Params, anyhow::Error>: ToString`

error[E0107]: function takes 0 generic arguments but 1 generic argument was supplied
   --> src/param.rs:279:37
    |
279 |         let param = unsafe { alloc::alloc_zeroed::<Self>(1) };
    |                                     ^^^^^^^^^^^^-------- help: remove these generics
    |                                     |
    |                                     expected 0 generic arguments
    |
note: function defined here, with 0 generic parameters
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/alloc.rs:169:15
    |
169 | pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {
    |               ^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/param.rs:279:58
    |
279 |         let param = unsafe { alloc::alloc_zeroed::<Self>(1) };
    |                              --------------------------- ^ expected `Layout`, found integer
    |                              |
    |                              arguments to this function are incorrect
    |
note: function defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/alloc.rs:169:15
    |
169 | pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {
    |               ^^^^^^^^^^^^

error[E0609]: no field `packed` on type `*mut u8`
   --> src/param.rs:283:15
    |
283 |         param.packed = unsafe { alloc::alloc_zeroed::<u8>(1) };
    |         ------^^^^^^
    |         |     |
    |         |     unknown field
    |         help: `param` is a raw pointer; try dereferencing it: `(*param).packed`

error[E0107]: function takes 0 generic arguments but 1 generic argument was supplied
   --> src/param.rs:283:40
    |
283 |         param.packed = unsafe { alloc::alloc_zeroed::<u8>(1) };
    |                                        ^^^^^^^^^^^^------ help: remove these generics
    |                                        |
    |                                        expected 0 generic arguments
    |
note: function defined here, with 0 generic parameters
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/alloc.rs:169:15
    |
169 | pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {
    |               ^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/param.rs:283:59
    |
283 |         param.packed = unsafe { alloc::alloc_zeroed::<u8>(1) };
    |                                 ------------------------- ^ expected `Layout`, found integer
    |                                 |
    |                                 arguments to this function are incorrect
    |
note: function defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/alloc.rs:169:15
    |
169 | pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {
    |               ^^^^^^^^^^^^

error[E0609]: no field `packed` on type `*mut u8`
   --> src/param.rs:284:18
    |
284 |         if param.packed.is_null() {
    |            ------^^^^^^
    |            |     |
    |            |     unknown field
    |            help: `param` is a raw pointer; try dereferencing it: `(*param).packed`

error[E0308]: mismatched types
   --> src/param.rs:288:12
    |
288 |         Ok(param)
    |         -- ^^^^^ expected `Params`, found `*mut u8`
    |         |
    |         arguments to this enum variant are incorrect
    |
    = note:   expected struct `param::Params`
            found raw pointer `*mut u8`
help: the type constructed contains `*mut u8` due to the type of the argument passed
   --> src/param.rs:288:9
    |
288 |         Ok(param)
    |         ^^^-----^
    |            |
    |            this argument influences the type of `Ok`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
    |
506 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

error[E0609]: no field `packed` on type `&mut param::Params`
   --> src/param.rs:292:33
    |
292 |             alloc::dealloc(self.packed as *mut u8, core::alloc::Layout::new::<u8>());
    |                                 ^^^^^^ unknown field
    |
    = note: available field is: `inner`

Some errors have detailed explanations: E0107, E0308, E0599, E0609.
For more information about an error, try `rustc --explain E0107`.
warning: `deltachat` (lib) generated 1 warning
error: could not compile `deltachat` (lib) due to 22 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
error[E0599]: no method named `set` found for enum `std::result::Result` in the current scope
   --> src/param.rs:506:12
    |
506 |         p1.set(Param::Forwarded, "foo")
    |            ^^^ method not found in `Result<Params, Error>`
    |
note: the method `set` exists on the type `param::Params`
   --> src/param.rs:310:5
    |
310 |     pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
506 |         p1.expect("REASON").set(Param::Forwarded, "foo")
    |           +++++++++++++++++

error[E0599]: `std::result::Result<param::Params, anyhow::Error>` doesn't implement `std::fmt::Display`
   --> src/param.rs:511:23
    |
511 |         assert_eq!(p1.to_string(), "a=foo\nd=4\nf=2");
    |                       ^^^^^^^^^ `std::result::Result<param::Params, anyhow::Error>` cannot be formatted with the default formatter
    |
   ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
    |
502 | pub enum Result<T, E> {
    | --------------------- doesn't satisfy `_: Display` or `_: ToString`
    |
    = note: the following trait bounds were not satisfied:
            `std::result::Result<param::Params, anyhow::Error>: std::fmt::Display`
            which is required by `std::result::Result<param::Params, anyhow::Error>: ToString`

error[E0599]: no method named `remove` found for enum `std::result::Result` in the current scope
   --> src/param.rs:513:12
    |
513 |         p1.remove(Param::File);
    |            ^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `remove` exists on the type `param::Params`
   --> src/param.rs:316:5
    |
316 |     pub fn remove(&mut self, key: Param) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
513 |         p1.expect("REASON").remove(Param::File);
    |           +++++++++++++++++

error[E0599]: `std::result::Result<param::Params, anyhow::Error>` doesn't implement `std::fmt::Display`
   --> src/param.rs:515:23
    |
515 |         assert_eq!(p1.to_string(), "a=foo\nd=4",);
    |                       ^^^^^^^^^ `std::result::Result<param::Params, anyhow::Error>` cannot be formatted with the default formatter
    |
   ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
    |
502 | pub enum Result<T, E> {
    | --------------------- doesn't satisfy `_: Display` or `_: ToString`
    |
    = note: the following trait bounds were not satisfied:
            `std::result::Result<param::Params, anyhow::Error>: std::fmt::Display`
            which is required by `std::result::Result<param::Params, anyhow::Error>: ToString`

error[E0599]: no method named `len` found for enum `std::result::Result` in the current scope
   --> src/param.rs:516:23
    |
516 |         assert_eq!(p1.len(), 2);
    |                       ^^^ method not found in `Result<Params, Error>`
    |
note: the method `len` exists on the type `param::Params`
   --> src/param.rs:337:5
    |
337 |     pub fn len(&self) -> usize {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
516 |         assert_eq!(p1.expect("REASON").len(), 2);
    |                      +++++++++++++++++

error[E0599]: no method named `remove` found for enum `std::result::Result` in the current scope
   --> src/param.rs:518:12
    |
518 |         p1.remove(Param::Forwarded);
    |            ^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `remove` exists on the type `param::Params`
   --> src/param.rs:316:5
    |
316 |     pub fn remove(&mut self, key: Param) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
518 |         p1.expect("REASON").remove(Param::Forwarded);
    |           +++++++++++++++++

error[E0599]: no method named `remove` found for enum `std::result::Result` in the current scope
   --> src/param.rs:519:12
    |
519 |         p1.remove(Param::Duration);
    |            ^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `remove` exists on the type `param::Params`
   --> src/param.rs:316:5
    |
316 |     pub fn remove(&mut self, key: Param) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
519 |         p1.expect("REASON").remove(Param::Duration);
    |           +++++++++++++++++

error[E0599]: `std::result::Result<param::Params, anyhow::Error>` doesn't implement `std::fmt::Display`
   --> src/param.rs:521:23
    |
521 |         assert_eq!(p1.to_string(), "",);
    |                       ^^^^^^^^^ `std::result::Result<param::Params, anyhow::Error>` cannot be formatted with the default formatter
    |
   ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
    |
502 | pub enum Result<T, E> {
    | --------------------- doesn't satisfy `_: Display` or `_: ToString`
    |
    = note: the following trait bounds were not satisfied:
            `std::result::Result<param::Params, anyhow::Error>: std::fmt::Display`
            which is required by `std::result::Result<param::Params, anyhow::Error>: ToString`

error[E0599]: no method named `is_empty` found for enum `std::result::Result` in the current scope
   --> src/param.rs:523:20
    |
523 |         assert!(p1.is_empty());
    |                    ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `is_empty` exists on the type `param::Params`
   --> src/param.rs:332:5
    |
332 |     pub fn is_empty(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
523 |         assert!(p1.expect("REASON").is_empty());
    |                   +++++++++++++++++

error[E0599]: no method named `len` found for enum `std::result::Result` in the current scope
   --> src/param.rs:524:23
    |
524 |         assert_eq!(p1.len(), 0)
    |                       ^^^ method not found in `Result<Params, Error>`
    |
note: the method `len` exists on the type `param::Params`
   --> src/param.rs:337:5
    |
337 |     pub fn len(&self) -> usize {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
524 |         assert_eq!(p1.expect("REASON").len(), 0)
    |                      +++++++++++++++++

error[E0599]: no method named `set` found for enum `std::result::Result` in the current scope
   --> src/param.rs:530:16
    |
530 |         params.set(Param::Height, "foo\nbar=baz\nquux");
    |                ^^^ method not found in `Result<Params, Error>`
    |
note: the method `set` exists on the type `param::Params`
   --> src/param.rs:310:5
    |
310 |     pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
530 |         params.expect("REASON").set(Param::Height, "foo\nbar=baz\nquux");
    |               +++++++++++++++++

error[E0599]: no method named `set` found for enum `std::result::Result` in the current scope
   --> src/param.rs:531:16
    |
531 |         params.set(Param::Width, "\n\n\na=\n=");
    |                ^^^ method not found in `Result<Params, Error>`
    |
note: the method `set` exists on the type `param::Params`
   --> src/param.rs:310:5
    |
310 |     pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
531 |         params.expect("REASON").set(Param::Width, "\n\n\na=\n=");
    |               +++++++++++++++++

error[E0599]: `std::result::Result<param::Params, anyhow::Error>` doesn't implement `std::fmt::Display`
   --> src/param.rs:532:27
    |
532 |         assert_eq!(params.to_string().parse::<Params>().unwrap(), params);
    |                           ^^^^^^^^^ `std::result::Result<param::Params, anyhow::Error>` cannot be formatted with the default formatter
    |
   ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:502:1
    |
502 | pub enum Result<T, E> {
    | --------------------- doesn't satisfy `_: Display` or `_: ToString`
    |
    = note: the following trait bounds were not satisfied:
            `std::result::Result<param::Params, anyhow::Error>: std::fmt::Display`
            which is required by `std::result::Result<param::Params, anyhow::Error>: ToString`

error[E0599]: no method named `set` found for enum `std::result::Result` in the current scope
   --> src/param.rs:561:11
    |
561 |         p.set(Param::File, fname.to_str().unwrap());
    |           ^^^ method not found in `Result<Params, Error>`
    |
note: the method `set` exists on the type `param::Params`
   --> src/param.rs:310:5
    |
310 |     pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
561 |         p.expect("REASON").set(Param::File, fname.to_str().unwrap());
    |          +++++++++++++++++

error[E0599]: no method named `get_file` found for enum `std::result::Result` in the current scope
   --> src/param.rs:563:22
    |
563 |         let file = p.get_file(Param::File, &t).unwrap().unwrap();
    |                      ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_file` exists on the type `param::Params`
   --> src/param.rs:377:5
    |
377 |     pub fn get_file<'a>(&self, key: Param, context: &'a Context) -> Result<Option<ParamsFile<'a>>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
563 |         let file = p.expect("REASON").get_file(Param::File, &t).unwrap().unwrap();
    |                     +++++++++++++++++

error[E0599]: no method named `get_path` found for enum `std::result::Result` in the current scope
   --> src/param.rs:566:31
    |
566 |         let path: PathBuf = p.get_path(Param::File, &t).unwrap().unwrap();
    |                               ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_path` exists on the type `param::Params`
   --> src/param.rs:423:5
    |
423 |     pub fn get_path(&self, key: Param, context: &Context) -> Result<Option<PathBuf>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
566 |         let path: PathBuf = p.expect("REASON").get_path(Param::File, &t).unwrap().unwrap();
    |                              +++++++++++++++++

error[E0599]: no method named `get_blob` found for enum `std::result::Result` in the current scope
   --> src/param.rs:570:19
    |
570 |         assert!(p.get_blob(Param::File, &t, false).await.is_err());
    |                   ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_blob` exists on the type `param::Params`
   --> src/param.rs:398:5
    |
398 | /     pub async fn get_blob<'a>(
399 | |         &self,
400 | |         key: Param,
401 | |         context: &'a Context,
402 | |         create: bool,
403 | |     ) -> Result<Option<BlobObject<'a>>> {
    | |_______________________________________^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
570 |         assert!(p.expect("REASON").get_blob(Param::File, &t, false).await.is_err());
    |                  +++++++++++++++++

error[E0599]: no method named `get_blob` found for enum `std::result::Result` in the current scope
   --> src/param.rs:573:22
    |
573 |         let blob = p.get_blob(Param::File, &t, true).await.unwrap().unwrap();
    |                      ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_blob` exists on the type `param::Params`
   --> src/param.rs:398:5
    |
398 | /     pub async fn get_blob<'a>(
399 | |         &self,
400 | |         key: Param,
401 | |         context: &'a Context,
402 | |         create: bool,
403 | |     ) -> Result<Option<BlobObject<'a>>> {
    | |_______________________________________^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
573 |         let blob = p.expect("REASON").get_blob(Param::File, &t, true).await.unwrap().unwrap();
    |                     +++++++++++++++++

error[E0599]: no method named `set` found for enum `std::result::Result` in the current scope
   --> src/param.rs:578:11
    |
578 |         p.set(Param::File, bar_path.to_str().unwrap());
    |           ^^^ method not found in `Result<Params, Error>`
    |
note: the method `set` exists on the type `param::Params`
   --> src/param.rs:310:5
    |
310 |     pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
578 |         p.expect("REASON").set(Param::File, bar_path.to_str().unwrap());
    |          +++++++++++++++++

error[E0599]: no method named `get_blob` found for enum `std::result::Result` in the current scope
   --> src/param.rs:579:22
    |
579 |         let blob = p.get_blob(Param::File, &t, false).await.unwrap().unwrap();
    |                      ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_blob` exists on the type `param::Params`
   --> src/param.rs:398:5
    |
398 | /     pub async fn get_blob<'a>(
399 | |         &self,
400 | |         key: Param,
401 | |         context: &'a Context,
402 | |         create: bool,
403 | |     ) -> Result<Option<BlobObject<'a>>> {
    | |_______________________________________^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
579 |         let blob = p.expect("REASON").get_blob(Param::File, &t, false).await.unwrap().unwrap();
    |                     +++++++++++++++++

error[E0599]: no method named `remove` found for enum `std::result::Result` in the current scope
   --> src/param.rs:582:11
    |
582 |         p.remove(Param::File);
    |           ^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `remove` exists on the type `param::Params`
   --> src/param.rs:316:5
    |
316 |     pub fn remove(&mut self, key: Param) -> &mut Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
582 |         p.expect("REASON").remove(Param::File);
    |          +++++++++++++++++

error[E0599]: no method named `get_file` found for enum `std::result::Result` in the current scope
   --> src/param.rs:583:19
    |
583 |         assert!(p.get_file(Param::File, &t).unwrap().is_none());
    |                   ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_file` exists on the type `param::Params`
   --> src/param.rs:377:5
    |
377 |     pub fn get_file<'a>(&self, key: Param, context: &'a Context) -> Result<Option<ParamsFile<'a>>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
583 |         assert!(p.expect("REASON").get_file(Param::File, &t).unwrap().is_none());
    |                  +++++++++++++++++

error[E0599]: no method named `get_path` found for enum `std::result::Result` in the current scope
   --> src/param.rs:584:19
    |
584 |         assert!(p.get_path(Param::File, &t).unwrap().is_none());
    |                   ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_path` exists on the type `param::Params`
   --> src/param.rs:423:5
    |
423 |     pub fn get_path(&self, key: Param, context: &Context) -> Result<Option<PathBuf>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
584 |         assert!(p.expect("REASON").get_path(Param::File, &t).unwrap().is_none());
    |                  +++++++++++++++++

error[E0599]: no method named `get_blob` found for enum `std::result::Result` in the current scope
   --> src/param.rs:585:19
    |
585 |         assert!(p.get_blob(Param::File, &t, false).await.unwrap().is_none());
    |                   ^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_blob` exists on the type `param::Params`
   --> src/param.rs:398:5
    |
398 | /     pub async fn get_blob<'a>(
399 | |         &self,
400 | |         key: Param,
401 | |         context: &'a Context,
402 | |         create: bool,
403 | |     ) -> Result<Option<BlobObject<'a>>> {
    | |_______________________________________^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
585 |         assert!(p.expect("REASON").get_blob(Param::File, &t, false).await.unwrap().is_none());
    |                  +++++++++++++++++

error[E0599]: no method named `update_timestamp` found for enum `std::result::Result` in the current scope
  --> src/update_helper.rs:99:24
   |
99 |         assert!(params.update_timestamp(Param::LastSubject, ts)?);
   |                        ^^^^^^^^^^^^^^^^ method not found in `Result<Params, Error>`
   |
note: the method `update_timestamp` exists on the type `param::Params`
  --> src/update_helper.rs:76:5
   |
76 |     pub(crate) fn update_timestamp(&mut self, scope: Param, new_timestamp: i64) -> Result<bool> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
   |
99 |         assert!(params.expect("REASON").update_timestamp(Param::LastSubject, ts)?);
   |                       +++++++++++++++++

error[E0599]: no method named `update_timestamp` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:100:24
    |
100 |         assert!(params.update_timestamp(Param::LastSubject, ts)?); // same timestamp -> update
    |                        ^^^^^^^^^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `update_timestamp` exists on the type `param::Params`
   --> src/update_helper.rs:76:5
    |
76  |     pub(crate) fn update_timestamp(&mut self, scope: Param, new_timestamp: i64) -> Result<bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
100 |         assert!(params.expect("REASON").update_timestamp(Param::LastSubject, ts)?); // same timestamp -> update
    |                       +++++++++++++++++

error[E0599]: no method named `update_timestamp` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:101:24
    |
101 |         assert!(params.update_timestamp(Param::LastSubject, ts + 10)?);
    |                        ^^^^^^^^^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `update_timestamp` exists on the type `param::Params`
   --> src/update_helper.rs:76:5
    |
76  |     pub(crate) fn update_timestamp(&mut self, scope: Param, new_timestamp: i64) -> Result<bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
101 |         assert!(params.expect("REASON").update_timestamp(Param::LastSubject, ts + 10)?);
    |                       +++++++++++++++++

error[E0599]: no method named `update_timestamp` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:102:25
    |
102 |         assert!(!params.update_timestamp(Param::LastSubject, ts)?); // `ts` is now too old
    |                         ^^^^^^^^^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `update_timestamp` exists on the type `param::Params`
   --> src/update_helper.rs:76:5
    |
76  |     pub(crate) fn update_timestamp(&mut self, scope: Param, new_timestamp: i64) -> Result<bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
102 |         assert!(!params.expect("REASON").update_timestamp(Param::LastSubject, ts)?); // `ts` is now too old
    |                        +++++++++++++++++

error[E0599]: no method named `update_timestamp` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:103:25
    |
103 |         assert!(!params.update_timestamp(Param::LastSubject, 0)?);
    |                         ^^^^^^^^^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `update_timestamp` exists on the type `param::Params`
   --> src/update_helper.rs:76:5
    |
76  |     pub(crate) fn update_timestamp(&mut self, scope: Param, new_timestamp: i64) -> Result<bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
103 |         assert!(!params.expect("REASON").update_timestamp(Param::LastSubject, 0)?);
    |                        +++++++++++++++++

error[E0599]: no method named `get_i64` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:104:27
    |
104 |         assert_eq!(params.get_i64(Param::LastSubject).unwrap(), ts + 10);
    |                           ^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_i64` exists on the type `param::Params`
   --> src/param.rs:347:5
    |
347 |     pub fn get_i64(&self, key: Param) -> Option<i64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
104 |         assert_eq!(params.expect("REASON").get_i64(Param::LastSubject).unwrap(), ts + 10);
    |                          +++++++++++++++++

error[E0599]: no method named `update_timestamp` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:106:24
    |
106 |         assert!(params.update_timestamp(Param::GroupNameTimestamp, 0)?); // stay unset -> update ...
    |                        ^^^^^^^^^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `update_timestamp` exists on the type `param::Params`
   --> src/update_helper.rs:76:5
    |
76  |     pub(crate) fn update_timestamp(&mut self, scope: Param, new_timestamp: i64) -> Result<bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
106 |         assert!(params.expect("REASON").update_timestamp(Param::GroupNameTimestamp, 0)?); // stay unset -> update ...
    |                       +++++++++++++++++

error[E0599]: no method named `update_timestamp` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:107:24
    |
107 |         assert!(params.update_timestamp(Param::GroupNameTimestamp, 0)?); // ... also on multiple calls
    |                        ^^^^^^^^^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `update_timestamp` exists on the type `param::Params`
   --> src/update_helper.rs:76:5
    |
76  |     pub(crate) fn update_timestamp(&mut self, scope: Param, new_timestamp: i64) -> Result<bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
107 |         assert!(params.expect("REASON").update_timestamp(Param::GroupNameTimestamp, 0)?); // ... also on multiple calls
    |                       +++++++++++++++++

error[E0599]: no method named `get_i64` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:108:27
    |
108 |         assert_eq!(params.get_i64(Param::GroupNameTimestamp).unwrap(), 0);
    |                           ^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_i64` exists on the type `param::Params`
   --> src/param.rs:347:5
    |
347 |     pub fn get_i64(&self, key: Param) -> Option<i64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
108 |         assert_eq!(params.expect("REASON").get_i64(Param::GroupNameTimestamp).unwrap(), 0);
    |                          +++++++++++++++++

error[E0599]: no method named `update_timestamp` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:110:25
    |
110 |         assert!(!params.update_timestamp(Param::AvatarTimestamp, -1)?);
    |                         ^^^^^^^^^^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `update_timestamp` exists on the type `param::Params`
   --> src/update_helper.rs:76:5
    |
76  |     pub(crate) fn update_timestamp(&mut self, scope: Param, new_timestamp: i64) -> Result<bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
110 |         assert!(!params.expect("REASON").update_timestamp(Param::AvatarTimestamp, -1)?);
    |                        +++++++++++++++++

error[E0599]: no method named `get_i64` found for enum `std::result::Result` in the current scope
   --> src/update_helper.rs:111:27
    |
111 |         assert_eq!(params.get_i64(Param::AvatarTimestamp), None);
    |                           ^^^^^^^ method not found in `Result<Params, Error>`
    |
note: the method `get_i64` exists on the type `param::Params`
   --> src/param.rs:347:5
    |
347 |     pub fn get_i64(&self, key: Param) -> Option<i64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Result::expect` to unwrap the `param::Params` value, panicking if the value is a `Result::Err`
    |
111 |         assert_eq!(params.expect("REASON").get_i64(Param::AvatarTimestamp), None);
    |                          +++++++++++++++++

warning: `deltachat` (lib test) generated 1 warning (1 duplicate)
error: could not compile `deltachat` (lib test) due to 57 previous errors; 1 warning emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


Fail
file path is :
projects/deltachat-core/rust/src/location.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0433]: failed to resolve: could not find `job` in the crate root
   --> src/location.rs:315:24
    |
315 |                 crate::job::Job::MaybeSendLocEnded,
    |                        ^^^ could not find `job` in the crate root

error[E0425]: cannot find function `msglocationsent` in module `stock_str`
   --> src/location.rs:299:33
    |
299 |         msg.set_text(stock_str::msglocationsent());
    |                                 ^^^^^^^^^^^^^^^ not found in `stock_str`

error[E0425]: cannot find function `msglocationdisabled` in module `stock_str`
   --> src/location.rs:303:36
    |
303 |         let stock_str = stock_str::msglocationdisabled();
    |                                    ^^^^^^^^^^^^^^^^^^^ help: a function with a similar name exists: `msg_location_disabled`
    |
   ::: src/stock_str.rs:962:1
    |
962 | pub(crate) async fn msg_location_disabled(context: &Context) -> String {
    | ---------------------------------------------------------------------- similarly named function `msg_location_disabled` defined here

error[E0603]: enum import `Param` is private
   --> src/location.rs:300:43
    |
300 |         msg.param.set_int(crate::message::Param::Cmd, SystemMessage::LocationStreamingEnabled as i32);
    |                                           ^^^^^ private enum import
    |
note: the enum import `Param` is defined here...
   --> src/message.rs:28:20
    |
28  | use crate::param::{Param, Params};
    |                    ^^^^^
note: ...and refers to the enum `Param` which is defined here
   --> src/param.rs:19:1
    |
19  | pub enum Param {
    | ^^^^^^^^^^^^^^ you could import this directly
help: consider importing this unit variant instead
    |
300 |         msg.param.set_int(crate::param::Param::Cmd, SystemMessage::LocationStreamingEnabled as i32);
    |                           ~~~~~~~~~~~~~~~~~~~~~~~~
help: import `Param` through the re-export
    |
300 |         msg.param.set_int(param::Param, SystemMessage::LocationStreamingEnabled as i32);
    |                           ~~~~~~~~~~~~

error[E0603]: enum import `Param` is private
   --> src/location.rs:300:43
    |
300 |         msg.param.set_int(crate::message::Param::Cmd, SystemMessage::LocationStreamingEnabled as i32);
    |                                           ^^^^^  --- unit variant `Cmd` is not publicly re-exported
    |                                           |
    |                                           private enum import
    |
note: the enum import `Param` is defined here...
   --> src/message.rs:28:20
    |
28  | use crate::param::{Param, Params};
    |                    ^^^^^
note: ...and refers to the enum `Param` which is defined here
   --> src/param.rs:19:1
    |
19  | pub enum Param {
    | ^^^^^^^^^^^^^^ you could import this directly

error[E0599]: no associated item named `LAST_SPECIAL` found for struct `ChatId` in the current scope
   --> src/location.rs:277:43
    |
277 |         seconds >= 0 && chat_id > ChatId::LAST_SPECIAL,
    |                                           ^^^^^^^^^^^^ associated item not found in `ChatId`
    |
   ::: src/chat.rs:166:1
    |
166 | pub struct ChatId(u32);
    | ----------------- associated item `LAST_SPECIAL` not found for this struct
    |
note: if you're trying to build a new `ChatId` consider using one of the following associated functions:
      ChatId::new
      ChatId::lookup_by_message
   --> src/chat.rs:170:5
    |
170 |     pub const fn new(id: u32) -> ChatId {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
221 |     pub(crate) fn lookup_by_message(msg: &Message) -> Option<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `is_sending_locations_to_chat` found for reference `&context::Context` in the current scope
   --> src/location.rs:282:47
    |
282 |     let is_sending_locations_before = context.is_sending_locations_to_chat(chat_id).await?;
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&Context`

error[E0599]: no method named `send_msg` found for reference `&context::Context` in the current scope
   --> src/location.rs:301:17
    |
301 |         context.send_msg(chat_id, &mut msg).await?;
    |                 ^^^^^^^^ help: there is a method with a similar name: `send_sync_msg`

error[E0599]: no method named `add_device_msg` found for reference `&context::Context` in the current scope
   --> src/location.rs:304:17
    |
304 |         context.add_device_msg(chat_id, &stock_str).await?;
    |                 ^^^^^^^^^^^^^^ method not found in `&Context`

error[E0277]: `()` is not a future
   --> src/location.rs:309:10
    |
309 |         .await;
    |         -^^^^^
    |         ||
    |         |`()` is not a future
    |         help: remove the `.await`
    |
    = help: the trait `futures::Future` is not implemented for `()`, which is required by `(): std::future::IntoFuture`
    = note: () must be a future or must implement `IntoFuture` to be awaited
    = note: required for `()` to implement `std::future::IntoFuture`

error[E0599]: no method named `schedule_maybe_send_locations` found for reference `&context::Context` in the current scope
   --> src/location.rs:312:17
    |
312 |         context.schedule_maybe_send_locations(Duration::from_secs(0)).await?;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: there is a method with a similar name: `schedule_resync`

error[E0599]: no associated item named `LAST_SPECIAL` found for struct `chat::ChatId` in the current scope
   --> src/location.rs:277:43
    |
277 |         seconds >= 0 && chat_id > ChatId::LAST_SPECIAL,
    |                                           ^^^^^^^^^^^^ associated item not found in `ChatId`
    |
   ::: src/chat.rs:166:1
    |
166 | pub struct ChatId(u32);
    | ----------------- associated item `LAST_SPECIAL` not found for this struct
    |
note: if you're trying to build a new `chat::ChatId` consider using one of the following associated functions:
      chat::ChatId::new
      chat::ChatId::lookup_by_message
   --> src/chat.rs:170:5
    |
170 |     pub const fn new(id: u32) -> ChatId {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
221 |     pub(crate) fn lookup_by_message(msg: &Message) -> Option<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `job_add` found for reference `&context::Context` in the current scope
   --> src/location.rs:314:14
    |
313 | /         context
314 | |             .job_add(
    | |             -^^^^^^^ method not found in `&Context`
    | |_____________|
    | 

Some errors have detailed explanations: E0277, E0425, E0433, E0599, E0603.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `deltachat` (lib) due to 11 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 11 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


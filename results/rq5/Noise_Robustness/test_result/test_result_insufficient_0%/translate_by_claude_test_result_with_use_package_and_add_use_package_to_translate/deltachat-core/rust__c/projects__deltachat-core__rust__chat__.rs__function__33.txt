Fail
file path is :
projects/deltachat-core/rust/src/chat.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0609]: no field `id` on type `&ChatId`
   --> src/chat.rs:857:13
    |
857 |     if self.id <= DC_CHAT_ID_LAST_SPECIAL {
    |             ^^ unknown field
    |
    = note: available field is: `0`

error[E0308]: mismatched types
   --> src/chat.rs:862:24
    |
862 |     if draft_msg_id == 0 {
    |        ------------    ^ expected `Option<MsgId>`, found integer
    |        |
    |        expected because this is `std::option::Option<MsgId>`
    |
    = note: expected enum `std::option::Option<MsgId>`
               found type `{integer}`

error[E0308]: mismatched types
   --> src/chat.rs:866:52
    |
866 |     let draft_msg = Message::load_from_db(context, draft_msg_id).await?;
    |                     ---------------------          ^^^^^^^^^^^^ expected `MsgId`, found `Option<MsgId>`
    |                     |
    |                     arguments to this function are incorrect
    |
    = note: expected struct `MsgId`
                 found enum `std::option::Option<MsgId>`
note: associated function defined here
   --> src/message.rs:479:18
    |
479 |     pub async fn load_from_db(context: &Context, id: MsgId) -> Result<Message> {
    |                  ^^^^^^^^^^^^                    ---------
help: consider using `Option::expect` to unwrap the `std::option::Option<MsgId>` value, panicking if the value is an `Option::None`
    |
866 |     let draft_msg = Message::load_from_db(context, draft_msg_id.expect("REASON")).await?;
    |                                                                +++++++++++++++++

error[E0609]: no field `id` on type `&chat::ChatId`
   --> src/chat.rs:857:13
    |
857 |     if self.id <= DC_CHAT_ID_LAST_SPECIAL {
    |             ^^ unknown field
    |
    = note: available field is: `0`

error[E0308]: mismatched types
   --> src/chat.rs:862:24
    |
862 |     if draft_msg_id == 0 {
    |        ------------    ^ expected `Option<MsgId>`, found integer
    |        |
    |        expected because this is `std::option::Option<message::MsgId>`
    |
    = note: expected enum `std::option::Option<message::MsgId>`
               found type `{integer}`

error[E0308]: mismatched types
   --> src/chat.rs:866:52
    |
866 |     let draft_msg = Message::load_from_db(context, draft_msg_id).await?;
    |                     ---------------------          ^^^^^^^^^^^^ expected `MsgId`, found `Option<MsgId>`
    |                     |
    |                     arguments to this function are incorrect
    |
    = note: expected struct `message::MsgId`
                 found enum `std::option::Option<message::MsgId>`
note: associated function defined here
   --> src/message.rs:479:18
    |
479 |     pub async fn load_from_db(context: &Context, id: MsgId) -> Result<Message> {
    |                  ^^^^^^^^^^^^                    ---------
help: consider using `Option::expect` to unwrap the `std::option::Option<message::MsgId>` value, panicking if the value is an `Option::None`
    |
866 |     let draft_msg = Message::load_from_db(context, draft_msg_id.expect("REASON")).await?;
    |                                                                +++++++++++++++++

Some errors have detailed explanations: E0308, E0609.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `deltachat` (lib) due to 3 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 3 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


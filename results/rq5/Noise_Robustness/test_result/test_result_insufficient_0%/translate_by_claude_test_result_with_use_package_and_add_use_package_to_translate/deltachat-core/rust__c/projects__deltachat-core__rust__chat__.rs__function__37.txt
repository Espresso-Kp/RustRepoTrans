Fail
file path is :
projects/deltachat-core/rust/src/chat.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0425]: cannot find value `DC_STATE_IN_FRESH` in this scope
    --> src/chat.rs:1008:13
     |
1008 |             DC_STATE_IN_FRESH.into(),
     |             ^^^^^^^^^^^^^^^^^ not found in this scope

error[E0603]: struct import `Params` is private
    --> src/chat.rs:1004:26
     |
1004 |     let params: Vec<sql::Params> = if chat_id == DC_CHAT_ID_ARCHIVED_LINK {
     |                          ^^^^^^ private struct import
     |
note: the struct import `Params` is defined here...
    --> src/sql.rs:21:27
     |
21   | use crate::param::{Param, Params};
     |                           ^^^^^^
note: ...and refers to the struct `Params` which is defined here
    --> src/param.rs:212:1
     |
212  | pub struct Params {
     | ^^^^^^^^^^^^^^^^^ you could import this directly
help: consider importing this struct instead
     |
1004 |     let params: Vec<crate::param::Params> = if chat_id == DC_CHAT_ID_ARCHIVED_LINK {
     |                     ~~~~~~~~~~~~~~~~~~~~
help: import `Params` through the re-export
     |
1004 |     let params: Vec<param::Params> = if chat_id == DC_CHAT_ID_ARCHIVED_LINK {
     |                     ~~~~~~~~~~~~~

error[E0609]: no field `id` on type `ChatId`
   --> src/chat.rs:985:24
    |
985 |     let chat_id = self.id;
    |                        ^^ unknown field
    |
    = note: available field is: `0`

error[E0277]: the trait bound `Vec<param::Params>: rusqlite::Params` is not satisfied
    --> src/chat.rs:1013:51
     |
1013 |     let count: usize = sql.query_get_value(query, params)
     |                            ---------------        ^^^^^^ the trait `rusqlite::Params` is not implemented for `Vec<param::Params>`
     |                            |
     |                            required by a bound introduced by this call
     |
     = help: the following other types implement trait `rusqlite::Params`:
               ParamsFromIter<I>
               [&dyn rusqlite::ToSql + std::marker::Send + std::marker::Sync; 0]
               [T; 1]
               [T; 2]
               [T; 3]
               [T; 4]
               [T; 5]
               [T; 6]
             and 109 others
note: required by a bound in `Sql::query_get_value`
    --> src/sql.rs:563:22
     |
560  |     pub async fn query_get_value<T>(
     |                  --------------- required by a bound in this associated function
...
563  |         params: impl rusqlite::Params + Send,
     |                      ^^^^^^^^^^^^^^^^ required by this bound in `Sql::query_get_value`

error[E0308]: `?` operator has incompatible types
    --> src/chat.rs:1013:24
     |
1013 |       let count: usize = sql.query_get_value(query, params)
     |  ________________________^
1014 | |         .await
1015 | |         .context("Failed to get fresh message count")?;
     | |______________________________________________________^ expected `usize`, found `Option<_>`
     |
     = note: `?` operator cannot convert from `std::option::Option<_>` to `usize`
     = note: expected type `usize`
                found enum `std::option::Option<_>`
help: consider using `Option::expect` to unwrap the `std::option::Option<_>` value, panicking if the value is an `Option::None`
     |
1015 |         .context("Failed to get fresh message count")?.expect("REASON");
     |                                                       +++++++++++++++++

error[E0609]: no field `id` on type `chat::ChatId`
   --> src/chat.rs:985:24
    |
985 |     let chat_id = self.id;
    |                        ^^ unknown field
    |
    = note: available field is: `0`

error[E0277]: the trait bound `Vec<param::Params>: rusqlite::Params` is not satisfied
    --> src/chat.rs:1013:51
     |
1013 |     let count: usize = sql.query_get_value(query, params)
     |                            ---------------        ^^^^^^ the trait `rusqlite::Params` is not implemented for `Vec<param::Params>`
     |                            |
     |                            required by a bound introduced by this call
     |
     = help: the following other types implement trait `rusqlite::Params`:
               ParamsFromIter<I>
               [&dyn rusqlite::ToSql + std::marker::Send + std::marker::Sync; 0]
               [T; 1]
               [T; 2]
               [T; 3]
               [T; 4]
               [T; 5]
               [T; 6]
             and 109 others
note: required by a bound in `sql::Sql::query_get_value`
    --> src/sql.rs:563:22
     |
560  |     pub async fn query_get_value<T>(
     |                  --------------- required by a bound in this associated function
...
563  |         params: impl rusqlite::Params + Send,
     |                      ^^^^^^^^^^^^^^^^ required by this bound in `Sql::query_get_value`

Some errors have detailed explanations: E0277, E0308, E0425, E0603, E0609.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `deltachat` (lib) due to 5 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 5 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


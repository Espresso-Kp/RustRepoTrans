Fail
file path is :
projects/deltachat-core/rust/src/contact.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0425]: cannot find value `ContactCreated` in this scope
   --> src/contact.rs:635:24
    |
635 |     if sth_modified == ContactCreated {
    |                        ^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `dc_add_or_lookup_contact` in this scope
   --> src/contact.rs:626:38
    |
626 |     let (contact_id, sth_modified) = dc_add_or_lookup_contact(
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `dc_is_contact_blocked` in this scope
   --> src/contact.rs:633:19
    |
633 |     let blocked = dc_is_contact_blocked(context, contact_id).await?;
    |                   ^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0308]: mismatched types
   --> src/contact.rs:638:55
    |
638 |         context.emit_event(EventType::ContactsChanged(ContactId::new(0)));
    |                            -------------------------- ^^^^^^^^^^^^^^^^^ expected `Option<ContactId>`, found `ContactId`
    |                            |
    |                            arguments to this enum variant are incorrect
    |
    = note: expected enum `std::option::Option<ContactId>`
             found struct `ContactId`
note: tuple variant defined here
   --> src/events/payload.rs:188:5
    |
188 |     ContactsChanged(Option<ContactId>),
    |     ^^^^^^^^^^^^^^^
help: try wrapping the expression in `Some`
    |
638 |         context.emit_event(EventType::ContactsChanged(Some(ContactId::new(0))));
    |                                                       +++++                 +

error[E0425]: cannot find function `dc_block_contact` in this scope
   --> src/contact.rs:642:9
    |
642 |         dc_block_contact(context, contact_id, false).await?;
    |         ^^^^^^^^^^^^^^^^ not found in this scope

error[E0308]: mismatched types
   --> src/contact.rs:645:8
    |
645 |     Ok(contact_id)
    |     -- ^^^^^^^^^^ expected `ContactId`, found `Option<ContactId>`
    |     |
    |     arguments to this enum variant are incorrect
    |
    = note: expected struct `ContactId`
                 found enum `std::option::Option<ContactId>`
help: the type constructed contains `std::option::Option<ContactId>` due to the type of the argument passed
   --> src/contact.rs:645:5
    |
645 |     Ok(contact_id)
    |     ^^^----------^
    |        |
    |        this argument influences the type of `Ok`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
    |
506 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^
help: consider using `Option::expect` to unwrap the `std::option::Option<ContactId>` value, panicking if the value is an `Option::None`
    |
645 |     Ok(contact_id.expect("REASON"))
    |                  +++++++++++++++++

error[E0308]: mismatched types
   --> src/contact.rs:638:55
    |
638 |         context.emit_event(EventType::ContactsChanged(ContactId::new(0)));
    |                            -------------------------- ^^^^^^^^^^^^^^^^^ expected `Option<ContactId>`, found `ContactId`
    |                            |
    |                            arguments to this enum variant are incorrect
    |
    = note: expected enum `std::option::Option<contact::ContactId>`
             found struct `contact::ContactId`
note: tuple variant defined here
   --> src/events/payload.rs:188:5
    |
188 |     ContactsChanged(Option<ContactId>),
    |     ^^^^^^^^^^^^^^^
help: try wrapping the expression in `Some`
    |
638 |         context.emit_event(EventType::ContactsChanged(Some(ContactId::new(0))));
    |                                                       +++++                 +

error[E0308]: mismatched types
   --> src/contact.rs:645:8
    |
645 |     Ok(contact_id)
    |     -- ^^^^^^^^^^ expected `ContactId`, found `Option<ContactId>`
    |     |
    |     arguments to this enum variant are incorrect
    |
    = note: expected struct `contact::ContactId`
                 found enum `std::option::Option<contact::ContactId>`
help: the type constructed contains `std::option::Option<contact::ContactId>` due to the type of the argument passed
   --> src/contact.rs:645:5
    |
645 |     Ok(contact_id)
    |     ^^^----------^
    |        |
    |        this argument influences the type of `Ok`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
    |
506 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^
help: consider using `Option::expect` to unwrap the `std::option::Option<contact::ContactId>` value, panicking if the value is an `Option::None`
    |
645 |     Ok(contact_id.expect("REASON"))
    |                  +++++++++++++++++

Some errors have detailed explanations: E0308, E0425.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `deltachat` (lib) due to 6 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 6 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


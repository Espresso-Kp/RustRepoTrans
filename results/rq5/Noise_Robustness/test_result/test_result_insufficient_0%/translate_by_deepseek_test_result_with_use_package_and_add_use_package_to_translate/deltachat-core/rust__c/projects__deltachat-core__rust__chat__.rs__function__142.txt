Fail
file path is :
projects/deltachat-core/rust/src/chat.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `Result` is defined multiple times
  --> src/chat.rs:13:50
   |
4  | use anyhow::Result;
   |     -------------- previous import of the type `Result` here
...
13 | use anyhow::{anyhow, bail, ensure, Context as _, Result};
   |                                                  ^^^^^^ `Result` reimported here
   |
   = note: `Result` must be defined only once in the type namespace of this module

error[E0425]: cannot find function `prepare` in module `sql`
    --> src/chat.rs:4283:21
     |
4283 |     let stmt = sql::prepare(
     |                     ^^^^^^^ not found in `sql`

error[E0425]: cannot find function `bind_text` in module `sql`
    --> src/chat.rs:4287:10
     |
4287 |     sql::bind_text(&stmt, 1, grpid, -1, sql::SQLITE_STATIC)?;
     |          ^^^^^^^^^ not found in `sql`

error[E0425]: cannot find value `SQLITE_STATIC` in module `sql`
    --> src/chat.rs:4287:46
     |
4287 |     sql::bind_text(&stmt, 1, grpid, -1, sql::SQLITE_STATIC)?;
     |                                              ^^^^^^^^^^^^^ not found in `sql`

error[E0425]: cannot find function `step` in module `sql`
    --> src/chat.rs:4288:13
     |
4288 |     if sql::step(&stmt)? == sql::SQLITE_ROW {
     |             ^^^^ not found in `sql`

error[E0425]: cannot find value `SQLITE_ROW` in module `sql`
    --> src/chat.rs:4288:34
     |
4288 |     if sql::step(&stmt)? == sql::SQLITE_ROW {
     |                                  ^^^^^^^^^^ not found in `sql`

error[E0425]: cannot find function `column_int` in module `sql`
    --> src/chat.rs:4289:24
     |
4289 |         chat_id = sql::column_int(&stmt, 0) as u32;
     |                        ^^^^^^^^^^ not found in `sql`

error[E0425]: cannot find function `column_int` in module `sql`
    --> src/chat.rs:4290:28
     |
4290 |         ret_blocked = sql::column_int(&stmt, 1) != 0;
     |                            ^^^^^^^^^^ not found in `sql`

error[E0425]: cannot find function `column_int` in module `sql`
    --> src/chat.rs:4291:29
     |
4291 |         ret_verified = sql::column_int(&stmt, 2) == 1;
     |                             ^^^^^^^^^^ not found in `sql`

error[E0425]: cannot find function `finalize` in module `sql`
    --> src/chat.rs:4294:10
     |
4294 |     sql::finalize(&stmt)?;
     |          ^^^^^^^^ not found in `sql`

warning: unused import: `anyhow::Result`
 --> src/chat.rs:4:5
  |
4 | use anyhow::Result;
  |     ^^^^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

error[E0599]: no method named `unblock_ex` found for type `u32` in the current scope
    --> src/contact.rs:1596:25
     |
1596 |                 chat_id.unblock_ex(context, Nosync).await?;
     |                         ^^^^^^^^^^ method not found in `u32`

error[E0599]: no method named `is_null` found for reference `&context::Context` in the current scope
    --> src/chat.rs:4279:16
     |
4279 |     if context.is_null() || grpid.is_null() {
     |                ^^^^^^^ method not found in `&Context`

error[E0599]: no method named `is_null` found for reference `&str` in the current scope
    --> src/chat.rs:4279:35
     |
4279 |     if context.is_null() || grpid.is_null() {
     |                                   ^^^^^^^ method not found in `&str`

error[E0308]: `match` arms have incompatible types
    --> src/chat.rs:4620:17
     |
4592 |           let chat_id = match id {
     |                         -------- `match` arms have incompatible types
...
4610 | /                 ChatIdBlocked::lookup_by_contact(self, contact_id)
4611 | |                     .await?
4612 | |                     .with_context(|| format!("No chat for addr '{addr}'"))?
4613 | |                     .id
     | |_______________________- this is found to be of type `ChatId`
...
4620 | /                 get_chat_id_by_grpid(self, grpid)
4621 | |                     .await?
4622 | |                     .with_context(|| format!("No chat for grpid '{grpid}'"))?
4623 | |                     .0
     | |______________________^ expected `ChatId`, found `u32`
     |
help: try wrapping the expression in `chat::ChatId`
     |
4620 ~                 chat::ChatId(get_chat_id_by_grpid(self, grpid)
4621 |                     .await?
4622 |                     .with_context(|| format!("No chat for grpid '{grpid}'"))?
4623 ~                     .0)
     |

error[E0599]: no method named `unblock_ex` found for type `u32` in the current scope
   --> src/securejoin/bob.rs:170:33
    |
170 |                         chat_id.unblock_ex(context, Nosync).await?;
    |                                 ^^^^^^^^^^ method not found in `u32`

error[E0308]: `match` arms have incompatible types
   --> src/securejoin/bob.rs:174:25
    |
168 |                   let group_chat_id = match chat::get_chat_id_by_grpid(context, grpid).await? {
    |                                       ------------------------------------------------------- `match` arms have incompatible types
...
171 |                           chat_id
    |                           ------- this is found to be of type `u32`
...
174 | /                         ChatId::create_multiuser_record(
175 | |                             context,
176 | |                             Chattype::Group,
177 | |                             grpid,
...   |
183 | |                         )
184 | |                         .await?
    | |_______________________________^ expected `u32`, found `ChatId`

error[E0308]: mismatched types
   --> src/receive_imf.rs:791:36
    |
791 |                     chat_id = Some(id);
    |                               ---- ^^ expected `ChatId`, found `u32`
    |                               |
    |                               arguments to this enum variant are incorrect
    |
help: the type constructed contains `u32` due to the type of the argument passed
   --> src/receive_imf.rs:791:31
    |
791 |                     chat_id = Some(id);
    |                               ^^^^^--^
    |                                    |
    |                                    this argument influences the type of `Some`
note: tuple variant defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:578:5
    |
578 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^^^
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
    |
791 |                     chat_id = Some(chat::ChatId(id));
    |                                    +++++++++++++  +

error[E0308]: mismatched types
   --> src/receive_imf.rs:792:39
    |
702 |     let mut chat_id_blocked = Blocked::Not;
    |                               ------------ expected due to this value
...
792 |                     chat_id_blocked = blocked;
    |                                       ^^^^^^^ expected `Blocked`, found `bool`

error[E0308]: `match` arms have incompatible types
    --> src/chat.rs:4620:17
     |
4592 |           let chat_id = match id {
     |                         -------- `match` arms have incompatible types
...
4610 | /                 ChatIdBlocked::lookup_by_contact(self, contact_id)
4611 | |                     .await?
4612 | |                     .with_context(|| format!("No chat for addr '{addr}'"))?
4613 | |                     .id
     | |_______________________- this is found to be of type `chat::ChatId`
...
4620 | /                 get_chat_id_by_grpid(self, grpid)
4621 | |                     .await?
4622 | |                     .with_context(|| format!("No chat for grpid '{grpid}'"))?
4623 | |                     .0
     | |______________________^ expected `ChatId`, found `u32`
     |
help: try wrapping the expression in `chat::ChatId`
     |
4620 ~                 chat::ChatId(get_chat_id_by_grpid(self, grpid)
4621 |                     .await?
4622 |                     .with_context(|| format!("No chat for grpid '{grpid}'"))?
4623 ~                     .0)
     |

error[E0308]: mismatched types
    --> src/receive_imf.rs:1053:36
     |
1053 |                     chat_id = Some(id);
     |                               ---- ^^ expected `ChatId`, found `u32`
     |                               |
     |                               arguments to this enum variant are incorrect
     |
help: the type constructed contains `u32` due to the type of the argument passed
    --> src/receive_imf.rs:1053:31
     |
1053 |                     chat_id = Some(id);
     |                               ^^^^^--^
     |                                    |
     |                                    this argument influences the type of `Some`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:578:5
     |
578  |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^^^
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
     |
1053 |                     chat_id = Some(chat::ChatId(id));
     |                                    +++++++++++++  +

error[E0308]: mismatched types
    --> src/receive_imf.rs:1054:39
     |
702  |     let mut chat_id_blocked = Blocked::Not;
     |                               ------------ expected due to this value
...
1054 |                     chat_id_blocked = blocked;
     |                                       ^^^^^^^ expected `Blocked`, found `bool`

error[E0308]: mismatched types
    --> src/receive_imf.rs:1125:40
     |
1125 |                         chat_id = Some(id);
     |                                   ---- ^^ expected `ChatId`, found `u32`
     |                                   |
     |                                   arguments to this enum variant are incorrect
     |
help: the type constructed contains `u32` due to the type of the argument passed
    --> src/receive_imf.rs:1125:35
     |
1125 |                         chat_id = Some(id);
     |                                   ^^^^^--^
     |                                        |
     |                                        this argument influences the type of `Some`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:578:5
     |
578  |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^^^
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
     |
1125 |                         chat_id = Some(chat::ChatId(id));
     |                                        +++++++++++++  +

error[E0308]: mismatched types
    --> src/receive_imf.rs:1126:43
     |
702  |     let mut chat_id_blocked = Blocked::Not;
     |                               ------------ expected due to this value
...
1126 |                         chat_id_blocked = blocked;
     |                                           ^^^^^^^ expected `Blocked`, found `bool`

error[E0308]: mismatched types
    --> src/receive_imf.rs:1190:25
     |
1190 |                         id
     |                         ^^ expected `ChatId`, found `u32`
     |
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
     |
1190 |                         chat::ChatId(id)
     |                         +++++++++++++  +

error[E0308]: mismatched types
   --> src/sync.rs:304:52
    |
304 |         token::save(self, Namespace::InviteNumber, chat_id, &token.invitenumber).await?;
    |         -----------                                ^^^^^^^ expected `Option<ChatId>`, found `Option<u32>`
    |         |
    |         arguments to this function are incorrect
    |
    = note: expected enum `std::option::Option<ChatId>`
               found enum `std::option::Option<u32>`
note: function defined here
   --> src/token.rs:27:14
    |
27  | pub async fn save(
    |              ^^^^
...
30  |     foreign_id: Option<ChatId>,
    |     --------------------------

error[E0308]: mismatched types
   --> src/sync.rs:305:44
    |
305 |         token::save(self, Namespace::Auth, chat_id, &token.auth).await?;
    |         -----------                        ^^^^^^^ expected `Option<ChatId>`, found `Option<u32>`
    |         |
    |         arguments to this function are incorrect
    |
    = note: expected enum `std::option::Option<ChatId>`
               found enum `std::option::Option<u32>`
note: function defined here
   --> src/token.rs:27:14
    |
27  | pub async fn save(
    |              ^^^^
...
30  |     foreign_id: Option<ChatId>,
    |     --------------------------

error[E0308]: mismatched types
   --> src/qr.rs:650:17
    |
647 |             token::save(
    |             ----------- arguments to this function are incorrect
...
650 |                 chat_id,
    |                 ^^^^^^^ expected `Option<ChatId>`, found `Option<u32>`
    |
    = note: expected enum `std::option::Option<ChatId>`
               found enum `std::option::Option<u32>`
note: function defined here
   --> src/token.rs:27:14
    |
27  | pub async fn save(
    |              ^^^^
...
30  |     foreign_id: Option<ChatId>,
    |     --------------------------

error[E0308]: mismatched types
   --> src/qr.rs:654:58
    |
654 |             token::save(context, token::Namespace::Auth, chat_id, &authcode).await?;
    |             -----------                                  ^^^^^^^ expected `Option<ChatId>`, found `Option<u32>`
    |             |
    |             arguments to this function are incorrect
    |
    = note: expected enum `std::option::Option<ChatId>`
               found enum `std::option::Option<u32>`
note: function defined here
   --> src/token.rs:27:14
    |
27  | pub async fn save(
    |              ^^^^
...
30  |     foreign_id: Option<ChatId>,
    |     --------------------------

error[E0308]: mismatched types
   --> src/qr.rs:655:41
    |
655 |             context.sync_qr_code_tokens(chat_id).await?;
    |                     ------------------- ^^^^^^^ expected `Option<ChatId>`, found `Option<u32>`
    |                     |
    |                     arguments to this method are incorrect
    |
    = note: expected enum `std::option::Option<ChatId>`
               found enum `std::option::Option<u32>`
note: method defined here
   --> src/sync.rs:123:25
    |
123 |     pub(crate) async fn sync_qr_code_tokens(&self, chat_id: Option<ChatId>) -> Result<()> {
    |                         ^^^^^^^^^^^^^^^^^^^        -----------------------

error[E0308]: mismatched types
   --> src/sync.rs:304:52
    |
304 |         token::save(self, Namespace::InviteNumber, chat_id, &token.invitenumber).await?;
    |         -----------                                ^^^^^^^ expected `Option<ChatId>`, found `Option<u32>`
    |         |
    |         arguments to this function are incorrect
    |
    = note: expected enum `std::option::Option<chat::ChatId>`
               found enum `std::option::Option<u32>`
note: function defined here
   --> src/token.rs:27:14
    |
27  | pub async fn save(
    |              ^^^^
...
30  |     foreign_id: Option<ChatId>,
    |     --------------------------

error[E0308]: mismatched types
   --> src/sync.rs:305:44
    |
305 |         token::save(self, Namespace::Auth, chat_id, &token.auth).await?;
    |         -----------                        ^^^^^^^ expected `Option<ChatId>`, found `Option<u32>`
    |         |
    |         arguments to this function are incorrect
    |
    = note: expected enum `std::option::Option<chat::ChatId>`
               found enum `std::option::Option<u32>`
note: function defined here
   --> src/token.rs:27:14
    |
27  | pub async fn save(
    |              ^^^^
...
30  |     foreign_id: Option<ChatId>,
    |     --------------------------

error[E0308]: mismatched types
    --> src/receive_imf.rs:2291:25
     |
2291 |         return Ok(Some((chat_id, blocked)));
     |                         ^^^^^^^ expected `ChatId`, found `u32`
     |
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
     |
2291 |         return Ok(Some((chat::ChatId(chat_id), blocked)));
     |                         +++++++++++++       +

error[E0308]: mismatched types
    --> src/receive_imf.rs:2291:34
     |
2291 |         return Ok(Some((chat_id, blocked)));
     |                                  ^^^^^^^ expected `Blocked`, found `bool`

Some errors have detailed explanations: E0252, E0308, E0425, E0599.
For more information about an error, try `rustc --explain E0252`.
warning: `deltachat` (lib) generated 1 warning
error: could not compile `deltachat` (lib) due to 30 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
   --> src/qr.rs:650:17
    |
647 |             token::save(
    |             ----------- arguments to this function are incorrect
...
650 |                 chat_id,
    |                 ^^^^^^^ expected `Option<ChatId>`, found `Option<u32>`
    |
    = note: expected enum `std::option::Option<chat::ChatId>`
               found enum `std::option::Option<u32>`
note: function defined here
   --> src/token.rs:27:14
    |
27  | pub async fn save(
    |              ^^^^
...
30  |     foreign_id: Option<ChatId>,
    |     --------------------------

error[E0308]: mismatched types
   --> src/qr.rs:654:58
    |
654 |             token::save(context, token::Namespace::Auth, chat_id, &authcode).await?;
    |             -----------                                  ^^^^^^^ expected `Option<ChatId>`, found `Option<u32>`
    |             |
    |             arguments to this function are incorrect
    |
    = note: expected enum `std::option::Option<chat::ChatId>`
               found enum `std::option::Option<u32>`
note: function defined here
   --> src/token.rs:27:14
    |
27  | pub async fn save(
    |              ^^^^
...
30  |     foreign_id: Option<ChatId>,
    |     --------------------------

error[E0308]: mismatched types
   --> src/qr.rs:655:41
    |
655 |             context.sync_qr_code_tokens(chat_id).await?;
    |                     ------------------- ^^^^^^^ expected `Option<ChatId>`, found `Option<u32>`
    |                     |
    |                     arguments to this method are incorrect
    |
    = note: expected enum `std::option::Option<chat::ChatId>`
               found enum `std::option::Option<u32>`
note: method defined here
   --> src/sync.rs:123:25
    |
123 |     pub(crate) async fn sync_qr_code_tokens(&self, chat_id: Option<ChatId>) -> Result<()> {
    |                         ^^^^^^^^^^^^^^^^^^^        -----------------------

error[E0308]: mismatched types
    --> src/chat.rs:6987:33
     |
6987 |         assert_eq!(msg.chat_id, a1_broadcast_id);
     |                                 ^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |
help: try wrapping the expression in `chat::ChatId`
     |
6987 |         assert_eq!(msg.chat_id, chat::ChatId(a1_broadcast_id));
     |                                 +++++++++++++               +

error[E0308]: mismatched types
    --> src/chat.rs:6988:64
     |
6988 |         let a1_broadcast_chat = Chat::load_from_db(&alices[1], a1_broadcast_id).await?;
     |                                 ------------------             ^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |                                 |
     |                                 arguments to this function are incorrect
     |
note: associated function defined here
    --> src/chat.rs:1518:18
     |
1518 |     pub async fn load_from_db(context: &Context, chat_id: ChatId) -> Result<Self> {
     |                  ^^^^^^^^^^^^                    ---------------
help: try wrapping the expression in `chat::ChatId`
     |
6988 |         let a1_broadcast_chat = Chat::load_from_db(&alices[1], chat::ChatId(a1_broadcast_id)).await?;
     |                                                                +++++++++++++               +

error[E0308]: mismatched types
    --> src/chat.rs:6991:47
     |
6991 |         assert!(get_chat_contacts(&alices[1], a1_broadcast_id)
     |                 -----------------             ^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |                 |
     |                 arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3460:14
     |
3460 | pub async fn get_chat_contacts(context: &Context, chat_id: ChatId) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ---------------
help: try wrapping the expression in `chat::ChatId`
     |
6991 |         assert!(get_chat_contacts(&alices[1], chat::ChatId(a1_broadcast_id))
     |                                               +++++++++++++               +

error[E0308]: mismatched types
    --> src/chat.rs:6995:41
     |
6995 |         add_contact_to_chat(&alices[1], a1_broadcast_id, a1b_contact_id).await?;
     |         -------------------             ^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |         |
     |         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3672:14
     |
3672 | pub async fn add_contact_to_chat(
     |              ^^^^^^^^^^^^^^^^^^^
3673 |     context: &Context,
3674 |     chat_id: ChatId,
     |     ---------------
help: try wrapping the expression in `chat::ChatId`
     |
6995 |         add_contact_to_chat(&alices[1], chat::ChatId(a1_broadcast_id), a1b_contact_id).await?;
     |                                         +++++++++++++               +

error[E0308]: mismatched types
    --> src/chat.rs:6996:35
     |
6996 |         set_chat_name(&alices[1], a1_broadcast_id, "Broadcast list 43").await?;
     |         -------------             ^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |         |
     |         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3983:14
     |
3983 | pub async fn set_chat_name(context: &Context, chat_id: ChatId, new_name: &str) -> Result<()> {
     |              ^^^^^^^^^^^^^                    ---------------
help: try wrapping the expression in `chat::ChatId`
     |
6996 |         set_chat_name(&alices[1], chat::ChatId(a1_broadcast_id), "Broadcast list 43").await?;
     |                                   +++++++++++++               +

error[E0308]: mismatched types
    --> src/chat.rs:6997:44
     |
6997 |         let sent_msg = alices[1].send_text(a1_broadcast_id, "hi").await;
     |                                  --------- ^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |                                  |
     |                                  arguments to this method are incorrect
     |
note: method defined here
    --> src/test_utils.rs:635:18
     |
635  |     pub async fn send_text(&self, chat_id: ChatId, txt: &str) -> SentMessage<'_> {
     |                  ^^^^^^^^^        ---------------
help: try wrapping the expression in `chat::ChatId`
     |
6997 |         let sent_msg = alices[1].send_text(chat::ChatId(a1_broadcast_id), "hi").await;
     |                                            +++++++++++++               +

error[E0308]: mismatched types
    --> src/chat.rs:7493:60
     |
7493 |         let a1_broadcast_chat = Chat::load_from_db(alice1, a1_broadcast_id).await?;
     |                                 ------------------         ^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |                                 |
     |                                 arguments to this function are incorrect
     |
note: associated function defined here
    --> src/chat.rs:1518:18
     |
1518 |     pub async fn load_from_db(context: &Context, chat_id: ChatId) -> Result<Self> {
     |                  ^^^^^^^^^^^^                    ---------------
help: try wrapping the expression in `chat::ChatId`
     |
7493 |         let a1_broadcast_chat = Chat::load_from_db(alice1, chat::ChatId(a1_broadcast_id)).await?;
     |                                                            +++++++++++++               +

error[E0308]: mismatched types
    --> src/chat.rs:7496:43
     |
7496 |         assert!(get_chat_contacts(alice1, a1_broadcast_id).await?.is_empty());
     |                 -----------------         ^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |                 |
     |                 arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3460:14
     |
3460 | pub async fn get_chat_contacts(context: &Context, chat_id: ChatId) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ---------------
help: try wrapping the expression in `chat::ChatId`
     |
7496 |         assert!(get_chat_contacts(alice1, chat::ChatId(a1_broadcast_id)).await?.is_empty());
     |                                           +++++++++++++               +

error[E0308]: mismatched types
    --> src/chat.rs:7507:39
     |
7507 |             get_chat_contacts(alice1, a1_broadcast_id).await?,
     |             -----------------         ^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |             |
     |             arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3460:14
     |
3460 | pub async fn get_chat_contacts(context: &Context, chat_id: ChatId) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ---------------
help: try wrapping the expression in `chat::ChatId`
     |
7507 |             get_chat_contacts(alice1, chat::ChatId(a1_broadcast_id)).await?,
     |                                       +++++++++++++               +

error[E0308]: mismatched types
    --> src/chat.rs:7510:41
     |
7510 |         let sent_msg = alice1.send_text(a1_broadcast_id, "hi").await;
     |                               --------- ^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |                               |
     |                               arguments to this method are incorrect
     |
note: method defined here
    --> src/test_utils.rs:635:18
     |
635  |     pub async fn send_text(&self, chat_id: ChatId, txt: &str) -> SentMessage<'_> {
     |                  ^^^^^^^^^        ---------------
help: try wrapping the expression in `chat::ChatId`
     |
7510 |         let sent_msg = alice1.send_text(chat::ChatId(a1_broadcast_id), "hi").await;
     |                                         +++++++++++++               +

error[E0308]: mismatched types
    --> src/chat.rs:7518:43
     |
7518 |         assert!(get_chat_contacts(alice1, a1_broadcast_id).await?.is_empty());
     |                 -----------------         ^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |                 |
     |                 arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3460:14
     |
3460 | pub async fn get_chat_contacts(context: &Context, chat_id: ChatId) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ---------------
help: try wrapping the expression in `chat::ChatId`
     |
7518 |         assert!(get_chat_contacts(alice1, chat::ChatId(a1_broadcast_id)).await?.is_empty());
     |                                           +++++++++++++               +

error[E0308]: mismatched types
    --> src/chat.rs:7538:60
     |
7538 |         let a1_broadcast_chat = Chat::load_from_db(alice1, a1_broadcast_id).await?;
     |                                 ------------------         ^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |                                 |
     |                                 arguments to this function are incorrect
     |
note: associated function defined here
    --> src/chat.rs:1518:18
     |
1518 |     pub async fn load_from_db(context: &Context, chat_id: ChatId) -> Result<Self> {
     |                  ^^^^^^^^^^^^                    ---------------
help: try wrapping the expression in `chat::ChatId`
     |
7538 |         let a1_broadcast_chat = Chat::load_from_db(alice1, chat::ChatId(a1_broadcast_id)).await?;
     |                                                            +++++++++++++               +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:1001:9
     |
1001 |         (first_chat.id, false, Blocked::Request)
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(u32, bool, bool)`, found `(ChatId, bool, Blocked)`
     |
     = note: expected tuple `(u32, _, bool)`
                found tuple `(chat::ChatId, _, constants::Blocked)`

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3561:64
     |
3561 |     let mut actual_chat_contacts = chat::get_chat_contacts(&t, chat_id).await?;
     |                                    -----------------------     ^^^^^^^ expected `ChatId`, found `u32`
     |                                    |
     |                                    arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:3460:14
     |
3460 | pub async fn get_chat_contacts(context: &Context, chat_id: ChatId) -> Result<Vec<ContactId>> {
     |              ^^^^^^^^^^^^^^^^^                    ---------------
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
     |
3561 |     let mut actual_chat_contacts = chat::get_chat_contacts(&t, chat::ChatId(chat_id)).await?;
     |                                                                +++++++++++++       +

warning: `deltachat` (lib test) generated 1 warning (1 duplicate)
error: could not compile `deltachat` (lib test) due to 44 previous errors; 1 warning emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


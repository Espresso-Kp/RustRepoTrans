Fail
file path is :
projects/deltachat-core/rust/src/contact.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `addr_normalize` is defined multiple times
  --> src/contact.rs:21:38
   |
6  | use deltachat_contact_tools::{addr_normalize, sanitize_name_and_addr, strip_rtlo_characters};
   |                               -------------- previous import of the value `addr_normalize` here
...
21 |     self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
   |                                      ^^^^^^^^^^^^^^--
   |                                      |
   |                                      `addr_normalize` reimported here
   |                                      help: remove unnecessary import
   |
   = note: `addr_normalize` must be defined only once in the value namespace of this module

error[E0252]: the name `sanitize_name_and_addr` is defined multiple times
  --> src/contact.rs:21:54
   |
6  | use deltachat_contact_tools::{addr_normalize, sanitize_name_and_addr, strip_rtlo_characters};
   |                                               ---------------------- previous import of the value `sanitize_name_and_addr` here
...
21 |     self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
   |                                                      ^^^^^^^^^^^^^^^^^^^^^^--
   |                                                      |
   |                                                      `sanitize_name_and_addr` reimported here
   |                                                      help: remove unnecessary import
   |
   = note: `sanitize_name_and_addr` must be defined only once in the value namespace of this module

error[E0252]: the name `strip_rtlo_characters` is defined multiple times
  --> src/contact.rs:21:78
   |
6  | use deltachat_contact_tools::{addr_normalize, sanitize_name_and_addr, strip_rtlo_characters};
   |                                                                       --------------------- previous import of the value `strip_rtlo_characters` here
...
21 |     self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
   |                                                                              ^^^^^^^^^^^^^^^^^^^^^-
   |                                                                              |
   |                                                                              `strip_rtlo_characters` reimported here
   |                                                                              help: remove unnecessary import
   |
   = note: `strip_rtlo_characters` must be defined only once in the value namespace of this module

error[E0252]: the name `DC_GCL_ADD_SELF` is defined multiple times
  --> src/contact.rs:35:43
   |
5  | use crate::constants::{DC_CONTACT_ID_SELF, DC_ORIGIN_MIN_CONTACT_LIST, DC_CONTACT_ID_LAST_SPECIAL, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
   |                                                                                                    --------------- previous import of the value `DC_GCL_ADD_SELF` here
...
35 | use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
   |                                           ^^^^^^^^^^^^^^^--
   |                                           |
   |                                           `DC_GCL_ADD_SELF` reimported here
   |                                           help: remove unnecessary import
   |
   = note: `DC_GCL_ADD_SELF` must be defined only once in the value namespace of this module

error[E0252]: the name `DC_GCL_VERIFIED_ONLY` is defined multiple times
  --> src/contact.rs:35:60
   |
5  | use crate::constants::{DC_CONTACT_ID_SELF, DC_ORIGIN_MIN_CONTACT_LIST, DC_CONTACT_ID_LAST_SPECIAL, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
   |                                                                                                                     -------------------- previous import of the value `DC_GCL_VERIFIED_ONLY` here
...
35 | use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
   |                                                            ^^^^^^^^^^^^^^^^^^^^ `DC_GCL_VERIFIED_ONLY` reimported here
   |
   = note: `DC_GCL_VERIFIED_ONLY` must be defined only once in the value namespace of this module

error[E0252]: the name `sql` is defined multiple times
  --> src/contact.rs:45:18
   |
4  | use crate::sql::{self, sqlite3_prepare, sqlite3_get_config};
   |                  ---- previous import of the module `sql` here
...
45 | use crate::sql::{self, params_iter};
   |                  ^^^^--
   |                  |
   |                  `sql` reimported here
   |                  help: remove unnecessary import
   |
   = note: `sql` must be defined only once in the type namespace of this module

error[E0432]: unresolved imports `crate::sql::sqlite3_prepare`, `crate::sql::sqlite3_get_config`
 --> src/contact.rs:4:24
  |
4 | use crate::sql::{self, sqlite3_prepare, sqlite3_get_config};
  |                        ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^ no `sqlite3_get_config` in `sql`
  |                        |
  |                        no `sqlite3_prepare` in `sql`

error[E0432]: unresolved imports `crate::constants::DC_CONTACT_ID_SELF`, `crate::constants::DC_ORIGIN_MIN_CONTACT_LIST`, `crate::constants::DC_CONTACT_ID_LAST_SPECIAL`
 --> src/contact.rs:5:24
  |
5 | use crate::constants::{DC_CONTACT_ID_SELF, DC_ORIGIN_MIN_CONTACT_LIST, DC_CONTACT_ID_LAST_SPECIAL, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
  |                        ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |                        |                   |                           |
  |                        |                   |                           no `DC_CONTACT_ID_LAST_SPECIAL` in `constants`
  |                        |                   |                           help: a similar name exists in the module: `DC_CHAT_ID_LAST_SPECIAL`
  |                        |                   no `DC_ORIGIN_MIN_CONTACT_LIST` in `constants`
  |                        no `DC_CONTACT_ID_SELF` in `constants`

error[E0425]: cannot find value `DC_CONTEXT_MAGIC` in this scope
    --> src/contact.rs:1027:25
     |
1027 |     if context.magic != DC_CONTEXT_MAGIC {
     |                         ^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_STR_SELF` in this scope
    --> src/contact.rs:1042:46
     |
1042 |         self_name2 = Some(stock_str(context, DC_STR_SELF)?.to_string());
     |                                              ^^^^^^^^^^^ not found in this scope

warning: unused import: `std::ffi::CStr`
 --> src/contact.rs:7:5
  |
7 | use std::ffi::CStr;
  |     ^^^^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused imports: `addr_normalize`, `sanitize_name_and_addr`, `strip_rtlo_characters`
  --> src/contact.rs:21:38
   |
21 |     self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
   |                                      ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `DC_GCL_ADD_SELF`, `DC_GCL_VERIFIED_ONLY`
  --> src/contact.rs:35:43
   |
35 | use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
   |                                           ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `self`
  --> src/contact.rs:45:18
   |
45 | use crate::sql::{self, params_iter};
   |                  ^^^^

warning: unused import: `std::str::FromStr`
 --> src/contact.rs:8:5
  |
8 | use std::str::FromStr;
  |     ^^^^^^^^^^^^^^^^^

error[E0609]: no field `magic` on type `&context::Context`
    --> src/contact.rs:1027:16
     |
1027 |     if context.magic != DC_CONTEXT_MAGIC {
     |                ^^^^^ unknown field
     |
     = note: available field is: `inner`
     = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0308]: mismatched types
    --> src/contact.rs:1028:9
     |
1028 |         bail!("Invalid context");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Error>`, found `Error`
     |
     = note: expected struct `Box<dyn StdError>`
                found struct `anyhow::Error`
     = note: this error originates in the macro `$crate::__anyhow` which comes from the expansion of the macro `bail` (in Nightly builds, run with -Z macro-backtrace for more info)
help: call `Into::into` on this expression to convert `anyhow::Error` into `Box<dyn StdError>`
    -->  /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.82/src/macros.rs:58:62
     |
58   |         return $crate::__private::Err($crate::__anyhow!($msg).into())
     |                                                              +++++++

error[E0423]: expected function, found module `stock_str`
    --> src/contact.rs:1042:27
     |
1042 |         self_name2 = Some(stock_str(context, DC_STR_SELF)?.to_string());
     |                           ^^^^^^^^^ not a function

error[E0061]: this function takes 2 arguments but 1 argument was supplied
    --> src/contact.rs:1043:151
     |
1043 | ...as_ref().unwrap()) || sanitize_name_and_addr(&self_name.as_ref().unwrap()).contains(query.as_ref().unwrap()) || sanitize_name_and_addr...
     |                          ^^^^^^^^^^^^^^^^^^^^^^------------------------------ an argument of type `&str` is missing
     |
note: function defined here
    --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust/deltachat-contact-tools/src/lib.rs:267:8
     |
267  | pub fn sanitize_name_and_addr(name: &str, addr: &str) -> (String, String) {
     |        ^^^^^^^^^^^^^^^^^^^^^^
help: provide the argument
     |
1043 |         if query.is_none() || query.as_ref().unwrap().is_empty() || addr_normalize(&self_addr.as_ref().unwrap()).contains(query.as_ref().unwrap()) || sanitize_name_and_addr(&self_name.as_ref().unwrap(), /* &str */).contains(query.as_ref().unwrap()) || sanitize_name_and_addr(&self_name2.as_ref().unwrap()).contains(query.as_ref().unwrap()) {
     |                                                                                                                                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `contains` found for tuple `(std::string::String, std::string::String)` in the current scope
    --> src/contact.rs:1043:204
     |
1043 | ...ame_and_addr(&self_name.as_ref().unwrap()).contains(query.as_ref().unwrap()) || sanitize_name_and_addr(&self_name2.as_ref().unwrap())....
     |                                               ^^^^^^^^ method not found in `(String, String)`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
    --> src/contact.rs:1043:241
     |
1043 | ...s_ref().unwrap()) || sanitize_name_and_addr(&self_name2.as_ref().unwrap()).contains(query.as_ref().unwrap()) {
     |                         ^^^^^^^^^^^^^^^^^^^^^^------------------------------- an argument of type `&str` is missing
     |
note: function defined here
    --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust/deltachat-contact-tools/src/lib.rs:267:8
     |
267  | pub fn sanitize_name_and_addr(name: &str, addr: &str) -> (String, String) {
     |        ^^^^^^^^^^^^^^^^^^^^^^
help: provide the argument
     |
1043 |         if query.is_none() || query.as_ref().unwrap().is_empty() || addr_normalize(&self_addr.as_ref().unwrap()).contains(query.as_ref().unwrap()) || sanitize_name_and_addr(&self_name.as_ref().unwrap()).contains(query.as_ref().unwrap()) || sanitize_name_and_addr(&self_name2.as_ref().unwrap(), /* &str */).contains(query.as_ref().unwrap()) {
     |                                                                                                                                                                                                                                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `contains` found for tuple `(std::string::String, std::string::String)` in the current scope
    --> src/contact.rs:1043:295
     |
1043 | ...me_and_addr(&self_name2.as_ref().unwrap()).contains(query.as_ref().unwrap()) {
     |                                               ^^^^^^^^ method not found in `(String, String)`

Some errors have detailed explanations: E0061, E0252, E0308, E0423, E0425, E0432, E0599, E0609.
For more information about an error, try `rustc --explain E0061`.
warning: `deltachat` (lib) generated 5 warnings (1 duplicate)
error: could not compile `deltachat` (lib) due to 17 previous errors; 5 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:1958:76
     |
1958 |         let contacts = Contact::get_all(&context.ctx, 0, Some("bob")).await?;
     |                                                                            ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:1958:76
     |
1958 |         let contacts = Contact::get_all(&context.ctx, 0, Some("bob")).await?;
     |                                                                            ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:1976:76
     |
1976 |         let contacts = Contact::get_all(&context.ctx, 0, Some("bob")).await?;
     |                                                                            ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:1976:76
     |
1976 |         let contacts = Contact::get_all(&context.ctx, 0, Some("bob")).await?;
     |                                                                            ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:1981:77
     |
1981 |         let contacts = Contact::get_all(&context.ctx, 0, Some("user")).await?;
     |                                                                             ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:1981:77
     |
1981 |         let contacts = Contact::get_all(&context.ctx, 0, Some("user")).await?;
     |                                                                             ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:1985:78
     |
1985 |         let contacts = Contact::get_all(&context.ctx, 0, Some("alice")).await?;
     |                                                                              ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:1985:78
     |
1985 |         let contacts = Contact::get_all(&context.ctx, 0, Some("alice")).await?;
     |                                                                              ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2004:76
     |
2004 |         let contacts = Contact::get_all(&context.ctx, 0, Some("bob")).await?;
     |                                                                            ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2004:76
     |
2004 |         let contacts = Contact::get_all(&context.ctx, 0, Some("bob")).await?;
     |                                                                            ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2008:80
     |
2008 |         let contacts = Contact::get_all(&context.ctx, 0, Some("someone")).await?;
     |                                                                                ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2008:80
     |
2008 |         let contacts = Contact::get_all(&context.ctx, 0, Some("someone")).await?;
     |                                                                                ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:1958:76
     |
1958 |         let contacts = Contact::get_all(&context.ctx, 0, Some("bob")).await?;
     |                                                                            ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:1976:76
     |
1976 |         let contacts = Contact::get_all(&context.ctx, 0, Some("bob")).await?;
     |                                                                            ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:1981:77
     |
1981 |         let contacts = Contact::get_all(&context.ctx, 0, Some("user")).await?;
     |                                                                             ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:1985:78
     |
1985 |         let contacts = Contact::get_all(&context.ctx, 0, Some("alice")).await?;
     |                                                                              ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2004:76
     |
2004 |         let contacts = Contact::get_all(&context.ctx, 0, Some("bob")).await?;
     |                                                                            ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2008:80
     |
2008 |         let contacts = Contact::get_all(&context.ctx, 0, Some("someone")).await?;
     |                                                                                ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2178:76
     |
2178 |         let contacts = Contact::get_all(&t, 0, Some("f@example.org")).await?;
     |                                                                            ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2178:76
     |
2178 |         let contacts = Contact::get_all(&t, 0, Some("f@example.org")).await?;
     |                                                                            ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2204:76
     |
2204 |         let contacts = Contact::get_all(&t, 0, Some("f@example.org")).await?;
     |                                                                            ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2204:76
     |
2204 |         let contacts = Contact::get_all(&t, 0, Some("f@example.org")).await?;
     |                                                                            ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2206:72
     |
2206 |         let contacts = Contact::get_all(&t, 0, Some("flobbyfoo")).await?;
     |                                                                        ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2206:72
     |
2206 |         let contacts = Contact::get_all(&t, 0, Some("flobbyfoo")).await?;
     |                                                                        ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2234:76
     |
2234 |         let contacts = Contact::get_all(&t, 0, Some("f@example.org")).await?;
     |                                                                            ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2234:76
     |
2234 |         let contacts = Contact::get_all(&t, 0, Some("f@example.org")).await?;
     |                                                                            ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2236:72
     |
2236 |         let contacts = Contact::get_all(&t, 0, Some("flobbyfoo")).await?;
     |                                                                        ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2236:72
     |
2236 |         let contacts = Contact::get_all(&t, 0, Some("flobbyfoo")).await?;
     |                                                                        ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2238:73
     |
2238 |         let contacts = Contact::get_all(&t, 0, Some("Foo Flobby")).await?;
     |                                                                         ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2238:73
     |
2238 |         let contacts = Contact::get_all(&t, 0, Some("Foo Flobby")).await?;
     |                                                                         ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2252:76
     |
2252 |         let contacts = Contact::get_all(&t, 0, Some("f@example.org")).await?;
     |                                                                            ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2252:76
     |
2252 |         let contacts = Contact::get_all(&t, 0, Some("f@example.org")).await?;
     |                                                                            ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2254:67
     |
2254 |         let contacts = Contact::get_all(&t, 0, Some("falk")).await?;
     |                                                                   ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2254:67
     |
2254 |         let contacts = Contact::get_all(&t, 0, Some("falk")).await?;
     |                                                                   ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2178:76
     |
2178 |         let contacts = Contact::get_all(&t, 0, Some("f@example.org")).await?;
     |                                                                            ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2204:76
     |
2204 |         let contacts = Contact::get_all(&t, 0, Some("f@example.org")).await?;
     |                                                                            ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2206:72
     |
2206 |         let contacts = Contact::get_all(&t, 0, Some("flobbyfoo")).await?;
     |                                                                        ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2234:76
     |
2234 |         let contacts = Contact::get_all(&t, 0, Some("f@example.org")).await?;
     |                                                                            ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2236:72
     |
2236 |         let contacts = Contact::get_all(&t, 0, Some("flobbyfoo")).await?;
     |                                                                        ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2238:73
     |
2238 |         let contacts = Contact::get_all(&t, 0, Some("Foo Flobby")).await?;
     |                                                                         ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2252:76
     |
2252 |         let contacts = Contact::get_all(&t, 0, Some("f@example.org")).await?;
     |                                                                            ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2254:67
     |
2254 |         let contacts = Contact::get_all(&t, 0, Some("falk")).await?;
     |                                                                   ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2279:23
     |
2279 |                 .await?
     |                       ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2279:23
     |
2279 |                 .await?
     |                       ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2290:23
     |
2290 |                 .await?
     |                       ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2290:23
     |
2290 |                 .await?
     |                       ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2303:23
     |
2303 |                 .await?
     |                       ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2303:23
     |
2303 |                 .await?
     |                       ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2279:23
     |
2279 |                 .await?
     |                       ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2290:23
     |
2290 |                 .await?
     |                       ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2303:23
     |
2303 |                 .await?
     |                       ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2317:69
     |
2317 |         assert_eq!(Contact::get_all(&t, 0, Some("foo@bar.de")).await?.len(), 1);
     |                                                                     ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2317:69
     |
2317 |         assert_eq!(Contact::get_all(&t, 0, Some("foo@bar.de")).await?.len(), 1);
     |                                                                     ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2320:69
     |
2320 |         assert_eq!(Contact::get_all(&t, 0, Some("foo@bar.de")).await?.len(), 0);
     |                                                                     ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2320:69
     |
2320 |         assert_eq!(Contact::get_all(&t, 0, Some("foo@bar.de")).await?.len(), 0);
     |                                                                     ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2323:69
     |
2323 |         assert_eq!(Contact::get_all(&t, 0, Some("foo@bar.de")).await?.len(), 1);
     |                                                                     ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2323:69
     |
2323 |         assert_eq!(Contact::get_all(&t, 0, Some("foo@bar.de")).await?.len(), 1);
     |                                                                     ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2330:69
     |
2330 |         assert_eq!(Contact::get_all(&t, 0, Some("foo@bar.de")).await?.len(), 0);
     |                                                                     ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2330:69
     |
2330 |         assert_eq!(Contact::get_all(&t, 0, Some("foo@bar.de")).await?.len(), 0);
     |                                                                     ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/contact.rs:2336:69
     |
2336 |         assert_eq!(Contact::get_all(&t, 0, Some("foo@bar.de")).await?.len(), 1);
     |                                                                     ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/contact.rs:2336:69
     |
2336 |         assert_eq!(Contact::get_all(&t, 0, Some("foo@bar.de")).await?.len(), 1);
     |                                                                     ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2317:69
     |
2317 |         assert_eq!(Contact::get_all(&t, 0, Some("foo@bar.de")).await?.len(), 1);
     |                                                                     ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2320:69
     |
2320 |         assert_eq!(Contact::get_all(&t, 0, Some("foo@bar.de")).await?.len(), 0);
     |                                                                     ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2323:69
     |
2323 |         assert_eq!(Contact::get_all(&t, 0, Some("foo@bar.de")).await?.len(), 1);
     |                                                                     ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2330:69
     |
2330 |         assert_eq!(Contact::get_all(&t, 0, Some("foo@bar.de")).await?.len(), 0);
     |                                                                     ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/contact.rs:2336:69
     |
2336 |         assert_eq!(Contact::get_all(&t, 0, Some("foo@bar.de")).await?.len(), 1);
     |                                                                     ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
   --> src/receive_imf/tests.rs:895:59
    |
895 |     let contacts = Contact::get_all(&t.ctx, 0, None).await?;
    |                                                           ^ `dyn StdError` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
    |
195 | pub struct Box<
    |            ^^^
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
   --> src/receive_imf/tests.rs:895:59
    |
895 |     let contacts = Contact::get_all(&t.ctx, 0, None).await?;
    |                                                           ^ `dyn StdError` cannot be shared between threads safely
    |
    = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
    |
195 | pub struct Box<
    |            ^^^
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
   --> src/receive_imf/tests.rs:895:59
    |
895 |     let contacts = Contact::get_all(&t.ctx, 0, None).await?;
    |                                                           ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
    = help: the following other types implement trait `FromResidual<R>`:
              <std::result::Result<T, F> as FromResidual<Yeet<E>>>
              <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
    = note: required for `Box<dyn StdError>` to implement `StdError`
    = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
    = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be sent between threads safely
    --> src/receive_imf/tests.rs:3201:48
     |
3201 |     assert!(Contact::get_all(&t, 0, None).await?.len() == 1);
     |                                                ^ `dyn StdError` cannot be sent between threads safely
     |
     = help: the trait `std::marker::Send` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Send`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: `dyn StdError` cannot be shared between threads safely
    --> src/receive_imf/tests.rs:3201:48
     |
3201 |     assert!(Contact::get_all(&t, 0, None).await?.len() == 1);
     |                                                ^ `dyn StdError` cannot be shared between threads safely
     |
     = help: the trait `std::marker::Sync` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Unique<dyn StdError>` to implement `std::marker::Sync`
note: required because it appears within the type `Box<dyn StdError>`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/boxed.rs:195:12
     |
195  | pub struct Box<
     |            ^^^
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

error[E0277]: the size for values of type `dyn StdError` cannot be known at compilation time
    --> src/receive_imf/tests.rs:3201:48
     |
3201 |     assert!(Contact::get_all(&t, 0, None).await?.len() == 1);
     |                                                ^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `dyn StdError`, which is required by `std::result::Result<(), _>: FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`
     = help: the following other types implement trait `FromResidual<R>`:
               <std::result::Result<T, F> as FromResidual<Yeet<E>>>
               <std::result::Result<T, F> as FromResidual<std::result::Result<Infallible, E>>>
     = note: required for `Box<dyn StdError>` to implement `StdError`
     = note: required for `anyhow::Error` to implement `From<Box<dyn StdError>>`
     = note: required for `std::result::Result<(), anyhow::Error>` to implement `FromResidual<std::result::Result<Infallible, Box<dyn StdError>>>`

Some errors have detailed explanations: E0061, E0252, E0277, E0308, E0423, E0425, E0432, E0599, E0609.
warning: `deltachat` (lib test) generated 5 warnings (4 duplicates)
error: could not compile `deltachat` (lib test) due to 89 previous errors; 5 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


Fail
file path is :
projects/iceberg/rust/crates/catalog/glue/src/catalog.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
   Compiling iceberg-catalog-hms v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/hms)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
warning: unused import: `TableMetadataBuilder`
  --> crates/catalog/glue/src/catalog.rs:21:36
   |
21 | use iceberg::spec::{TableMetadata, TableMetadataBuilder};
   |                                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `convert_to_glue_table`, `get_default_table_location`
  --> crates/catalog/glue/src/catalog.rs:33:26
   |
33 |     convert_to_database, convert_to_glue_table, convert_to_namespace, create_metadata_location,
   |                          ^^^^^^^^^^^^^^^^^^^^^
34 |     create_sdk_config, get_default_table_location, get_metadata_location, validate_namespace,
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:348:29
    |
348 |         let database_name = convert_to_database(namespace)?;
    |                             ^^^^^^^^^^^^^^^^^^^----------- an argument of type `&std::collections::HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
348 |         let database_name = convert_to_database(namespace, /* &std::collections::HashMap<std::string::String, std::string::String> */)?;
    |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `table_name` on type `TableCreation`
   --> crates/catalog/glue/src/catalog.rs:349:36
    |
349 |         let table_name = &creation.table_name;
    |                                    ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `name`, `location`, `schema`, `partition_spec`, `sort_order`, `properties`

error[E0609]: no field `metadata_location` on type `TableCreation`
   --> crates/catalog/glue/src/catalog.rs:351:68
    |
351 |         let metadata_location = create_metadata_location(&creation.metadata_location)?;
    |                                                                    ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `name`, `location`, `schema`, `partition_spec`, `sort_order`, `properties`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:351:33
    |
351 |         let metadata_location = create_metadata_location(&creation.metadata_location)?;
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^----------------------------- an argument of type `i32` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:233:15
    |
233 | pub(crate) fn create_metadata_location(location: impl AsRef<str>, version: i32) -> Result<String> {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^ -------------------------  ------------
help: provide the argument
    |
351 |         let metadata_location = create_metadata_location(&creation.metadata_location, /* i32 */)?;
    |                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:352:18
    |
352 |         let io = FileIO::new_input(&metadata_location).await?;
    |                  ^^^^^^^^^^^^^^^^^ ------------------ an argument of type `&FileIO` is missing
    |
note: method defined here
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/io.rs:184:12
    |
184 |     pub fn new_input(&self, path: impl AsRef<str>) -> Result<InputFile> {
    |            ^^^^^^^^^
help: provide the argument
    |
352 |         let io = FileIO::new_input(/* &FileIO */, &metadata_location).await?;
    |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: `std::result::Result<InputFile, iceberg::Error>` is not a future
   --> crates/catalog/glue/src/catalog.rs:352:56
    |
352 |         let io = FileIO::new_input(&metadata_location).await?;
    |                  --------------------------------------^^^^^
    |                  |                                    ||
    |                  |                                    |`std::result::Result<InputFile, iceberg::Error>` is not a future
    |                  |                                    help: remove the `.await`
    |                  this call returns `std::result::Result<InputFile, iceberg::Error>`
    |
    = help: the trait `std::future::Future` is not implemented for `std::result::Result<InputFile, iceberg::Error>`, which is required by `std::result::Result<InputFile, iceberg::Error>: IntoFuture`
    = note: std::result::Result<InputFile, iceberg::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<InputFile, iceberg::Error>` to implement `IntoFuture`

error[E0433]: failed to resolve: use of undeclared type `FromInputFile`
   --> crates/catalog/glue/src/catalog.rs:354:39
    |
354 |         let metadata: TableMetadata = FromInputFile::table_metadata(&file).await?;
    |                                       ^^^^^^^^^^^^^ use of undeclared type `FromInputFile`

error[E0599]: no method named `_create_glue_table` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:358:14
    |
358 |         self._create_glue_table(&database_name, table_name, table_input).await?;
    |              ^^^^^^^^^^^^^^^^^^ method not found in `&GlueCatalog`

Some errors have detailed explanations: E0061, E0277, E0433, E0599, E0609.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib test) generated 2 warnings
error: could not compile `iceberg-catalog-glue` (lib test) due to 8 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
warning: unused import: `TableMetadataBuilder`
  --> crates/catalog/glue/src/catalog.rs:21:36
   |
21 | use iceberg::spec::{TableMetadata, TableMetadataBuilder};
   |                                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `convert_to_glue_table`, `get_default_table_location`
  --> crates/catalog/glue/src/catalog.rs:33:26
   |
33 |     convert_to_database, convert_to_glue_table, convert_to_namespace, create_metadata_location,
   |                          ^^^^^^^^^^^^^^^^^^^^^
34 |     create_sdk_config, get_default_table_location, get_metadata_location, validate_namespace,
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:348:29
    |
348 |         let database_name = convert_to_database(namespace)?;
    |                             ^^^^^^^^^^^^^^^^^^^----------- an argument of type `&HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
348 |         let database_name = convert_to_database(namespace, /* &HashMap<std::string::String, std::string::String> */)?;
    |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `table_name` on type `TableCreation`
   --> crates/catalog/glue/src/catalog.rs:349:36
    |
349 |         let table_name = &creation.table_name;
    |                                    ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `name`, `location`, `schema`, `partition_spec`, `sort_order`, `properties`

error[E0609]: no field `metadata_location` on type `TableCreation`
   --> crates/catalog/glue/src/catalog.rs:351:68
    |
351 |         let metadata_location = create_metadata_location(&creation.metadata_location)?;
    |                                                                    ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `name`, `location`, `schema`, `partition_spec`, `sort_order`, `properties`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:351:33
    |
351 |         let metadata_location = create_metadata_location(&creation.metadata_location)?;
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^----------------------------- an argument of type `i32` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:233:15
    |
233 | pub(crate) fn create_metadata_location(location: impl AsRef<str>, version: i32) -> Result<String> {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^ -------------------------  ------------
help: provide the argument
    |
351 |         let metadata_location = create_metadata_location(&creation.metadata_location, /* i32 */)?;
    |                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:352:18
    |
352 |         let io = FileIO::new_input(&metadata_location).await?;
    |                  ^^^^^^^^^^^^^^^^^ ------------------ an argument of type `&FileIO` is missing
    |
note: method defined here
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/io.rs:184:12
    |
184 |     pub fn new_input(&self, path: impl AsRef<str>) -> Result<InputFile> {
    |            ^^^^^^^^^
help: provide the argument
    |
352 |         let io = FileIO::new_input(/* &FileIO */, &metadata_location).await?;
    |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: `Result<InputFile, iceberg::Error>` is not a future
   --> crates/catalog/glue/src/catalog.rs:352:56
    |
352 |         let io = FileIO::new_input(&metadata_location).await?;
    |                  --------------------------------------^^^^^
    |                  |                                    ||
    |                  |                                    |`Result<InputFile, iceberg::Error>` is not a future
    |                  |                                    help: remove the `.await`
    |                  this call returns `Result<InputFile, iceberg::Error>`
    |
    = help: the trait `std::future::Future` is not implemented for `Result<InputFile, iceberg::Error>`, which is required by `Result<InputFile, iceberg::Error>: IntoFuture`
    = note: Result<InputFile, iceberg::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `Result<InputFile, iceberg::Error>` to implement `IntoFuture`

error[E0433]: failed to resolve: use of undeclared type `FromInputFile`
   --> crates/catalog/glue/src/catalog.rs:354:39
    |
354 |         let metadata: TableMetadata = FromInputFile::table_metadata(&file).await?;
    |                                       ^^^^^^^^^^^^^ use of undeclared type `FromInputFile`

error[E0599]: no method named `_create_glue_table` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:358:14
    |
358 |         self._create_glue_table(&database_name, table_name, table_input).await?;
    |              ^^^^^^^^^^^^^^^^^^ method not found in `&GlueCatalog`

Some errors have detailed explanations: E0061, E0277, E0433, E0599, E0609.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib) generated 2 warnings
error: could not compile `iceberg-catalog-glue` (lib) due to 8 previous errors; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...


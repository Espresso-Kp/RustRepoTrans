Fail
file path is :
projects/iceberg/rust/crates/catalog/glue/src/catalog.rs

output is:



error is :
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:154:29
    |
154 |         let database_name = convert_to_database(namespace)?;
    |                             ^^^^^^^^^^^^^^^^^^^----------- an argument of type `&std::collections::HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
154 |         let database_name = convert_to_database(namespace, /* &std::collections::HashMap<std::string::String, std::string::String> */)?;
    |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the trait bound `std::string::String: From<&DatabaseInput>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:155:49
    |
155 |         let table_input = convert_to_glue_table(&database_name, &properties)?;
    |                           --------------------- ^^^^^^^^^^^^^^ the trait `From<&DatabaseInput>` is not implemented for `std::string::String`, which is required by `&DatabaseInput: Into<std::string::String>`
    |                           |
    |                           required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&DatabaseInput` to implement `Into<std::string::String>`
note: required by a bound in `utils::convert_to_glue_table`
   --> crates/catalog/glue/src/utils.rs:145:22
    |
144 | pub(crate) fn convert_to_glue_table(
    |               --------------------- required by a bound in this function
145 |     table_name: impl Into<String>,
    |                      ^^^^^^^^^^^^ required by this bound in `convert_to_glue_table`

error[E0061]: this function takes 5 arguments but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:155:27
    |
155 |         let table_input = convert_to_glue_table(&database_name, &properties)?;
    |                           ^^^^^^^^^^^^^^^^^^^^^-----------------------------
    |                                                |
    |                                                two arguments of type `std::string::String` and `&iceberg::spec::TableMetadata` are missing
    |                                                an argument of type `std::option::Option<std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:144:15
    |
144 | pub(crate) fn convert_to_glue_table(
    |               ^^^^^^^^^^^^^^^^^^^^^
145 |     table_name: impl Into<String>,
    |     -----------------------------
146 |     metadata_location: String,
    |     -------------------------
147 |     metadata: &TableMetadata,
    |     ------------------------
148 |     properties: &HashMap<String, String>,
    |     ------------------------------------
149 |     prev_metadata_location: Option<String>,
    |     --------------------------------------
help: provide the arguments
    |
155 |         let table_input = convert_to_glue_table(&database_name, /* std::string::String */, /* &iceberg::spec::TableMetadata */, &properties, /* std::option::Option<std::string::String> */)?;
    |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `glue` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:157:32
    |
157 |         let glue_client = self.glue.clone();
    |                                ^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:163:26
    |
163 |             .map_err(|e| from_aws_build_error("create_database", e))?;
    |                          ^^^^^^^^^^^^^^^^^^^^ -------------------
    |                                               |
    |                                               unexpected argument of type `&'static str`
    |                                               help: remove the extra argument
    |
note: function defined here
   --> crates/catalog/glue/src/error.rs:36:15
    |
36  | pub(crate) fn from_aws_build_error(error: aws_sdk_glue::error::BuildError) -> Error {
    |               ^^^^^^^^^^^^^^^^^^^^ --------------------------------------

error[E0599]: no variant or associated item named `AlreadyExists` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:166:46
    |
166 |             return Err(Error::new(ErrorKind::AlreadyExists, "Database already exists"));
    |                                              ^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:169:33
    |
169 |         Ok(convert_to_namespace(namespace)?)
    |            -------------------- ^^^^^^^^^ expected `&Database`, found `&NamespaceIdent`
    |            |
    |            arguments to this function are incorrect
    |
    = note: expected reference `&aws_sdk_glue::types::Database`
               found reference `&'life1 iceberg::NamespaceIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:121:15
    |
121 | pub(crate) fn convert_to_namespace(database: &Database) -> Namespace {
    |               ^^^^^^^^^^^^^^^^^^^^ -------------------

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> crates/catalog/glue/src/catalog.rs:169:12
    |
169 |         Ok(convert_to_namespace(namespace)?)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `Namespace`
    |
    = help: the trait `Try` is not implemented for `Namespace`

Some errors have detailed explanations: E0061, E0277, E0308, E0599, E0609.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `iceberg-catalog-glue` (lib test) due to 8 previous errors
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:154:29
    |
154 |         let database_name = convert_to_database(namespace)?;
    |                             ^^^^^^^^^^^^^^^^^^^----------- an argument of type `&HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
154 |         let database_name = convert_to_database(namespace, /* &HashMap<std::string::String, std::string::String> */)?;
    |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the trait bound `std::string::String: From<&DatabaseInput>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:155:49
    |
155 |         let table_input = convert_to_glue_table(&database_name, &properties)?;
    |                           --------------------- ^^^^^^^^^^^^^^ the trait `From<&DatabaseInput>` is not implemented for `std::string::String`, which is required by `&DatabaseInput: Into<std::string::String>`
    |                           |
    |                           required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&DatabaseInput` to implement `Into<std::string::String>`
note: required by a bound in `convert_to_glue_table`
   --> crates/catalog/glue/src/utils.rs:145:22
    |
144 | pub(crate) fn convert_to_glue_table(
    |               --------------------- required by a bound in this function
145 |     table_name: impl Into<String>,
    |                      ^^^^^^^^^^^^ required by this bound in `convert_to_glue_table`

error[E0061]: this function takes 5 arguments but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:155:27
    |
155 |         let table_input = convert_to_glue_table(&database_name, &properties)?;
    |                           ^^^^^^^^^^^^^^^^^^^^^-----------------------------
    |                                                |
    |                                                two arguments of type `std::string::String` and `&TableMetadata` are missing
    |                                                an argument of type `std::option::Option<std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:144:15
    |
144 | pub(crate) fn convert_to_glue_table(
    |               ^^^^^^^^^^^^^^^^^^^^^
145 |     table_name: impl Into<String>,
    |     -----------------------------
146 |     metadata_location: String,
    |     -------------------------
147 |     metadata: &TableMetadata,
    |     ------------------------
148 |     properties: &HashMap<String, String>,
    |     ------------------------------------
149 |     prev_metadata_location: Option<String>,
    |     --------------------------------------
help: provide the arguments
    |
155 |         let table_input = convert_to_glue_table(&database_name, /* std::string::String */, /* &TableMetadata */, &properties, /* std::option::Option<std::string::String> */)?;
    |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `glue` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:157:32
    |
157 |         let glue_client = self.glue.clone();
    |                                ^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:163:26
    |
163 |             .map_err(|e| from_aws_build_error("create_database", e))?;
    |                          ^^^^^^^^^^^^^^^^^^^^ -------------------
    |                                               |
    |                                               unexpected argument of type `&'static str`
    |                                               help: remove the extra argument
    |
note: function defined here
   --> crates/catalog/glue/src/error.rs:36:15
    |
36  | pub(crate) fn from_aws_build_error(error: aws_sdk_glue::error::BuildError) -> Error {
    |               ^^^^^^^^^^^^^^^^^^^^ --------------------------------------

error[E0599]: no variant or associated item named `AlreadyExists` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:166:46
    |
166 |             return Err(Error::new(ErrorKind::AlreadyExists, "Database already exists"));
    |                                              ^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:169:33
    |
169 |         Ok(convert_to_namespace(namespace)?)
    |            -------------------- ^^^^^^^^^ expected `&Database`, found `&NamespaceIdent`
    |            |
    |            arguments to this function are incorrect
    |
    = note: expected reference `&Database`
               found reference `&'life1 NamespaceIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:121:15
    |
121 | pub(crate) fn convert_to_namespace(database: &Database) -> Namespace {
    |               ^^^^^^^^^^^^^^^^^^^^ -------------------

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> crates/catalog/glue/src/catalog.rs:169:12
    |
169 |         Ok(convert_to_namespace(namespace)?)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `Namespace`
    |
    = help: the trait `Try` is not implemented for `Namespace`

Some errors have detailed explanations: E0061, E0277, E0308, E0599, E0609.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `iceberg-catalog-glue` (lib) due to 8 previous errors
warning: build failed, waiting for other jobs to finish...


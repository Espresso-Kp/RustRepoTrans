Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/avro/schema.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: 3 positional arguments in format string, but there are 2 arguments
   --> crates/iceberg/src/avro/schema.rs:171:15
    |
171 |             "k{}_{}v{}",
    |               ^^ ^^ ^^
172 |             self.last_map_key_field_id, self.last_map_value_field_id
    |             --------------------------  ----------------------------

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:138:31
    |
138 |     if let AvroSchemaOrField::Schema(schema) = key_value {
    |                               ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:139:35
    |
139 |         if let AvroSchemaOrField::Schema(value_schema) = value {
    |                                   ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0599]: no variant or associated item named `Primitive` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:140:32
    |
140 |             if let AvroSchema::Primitive(PrimitiveType::String) = schema.schema() {
    |                                ^^^^^^^^^ variant or associated item not found in `Schema`

error[E0559]: variant `apache_avro::Schema::Map` has no field named `values`
   --> crates/iceberg/src/avro/schema.rs:143:21
    |
143 |                     values: Box::new(value_schema),
    |                     ^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:103:5
    |
103 |     Map(Box<Schema>),
    |     --- `apache_avro::Schema::Map` defined here
    |
help: `apache_avro::Schema::Map` is a tuple variant, use the appropriate syntax
    |
142 |                 let map_schema = apache_avro::Schema::Map(/* fields */);
    |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0559]: variant `apache_avro::Schema::Map` has no field named `key_id`
   --> crates/iceberg/src/avro/schema.rs:144:21
    |
144 |                     key_id: self.last_map_key_field_id,
    |                     ^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:103:5
    |
103 |     Map(Box<Schema>),
    |     --- `apache_avro::Schema::Map` defined here
    |
help: `apache_avro::Schema::Map` is a tuple variant, use the appropriate syntax
    |
142 |                 let map_schema = apache_avro::Schema::Map(/* fields */);
    |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:144:34
    |
144 |                     key_id: self.last_map_key_field_id,
    |                                  ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0559]: variant `apache_avro::Schema::Map` has no field named `value_id`
   --> crates/iceberg/src/avro/schema.rs:145:21
    |
145 |                     value_id: self.last_map_value_field_id,
    |                     ^^^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:103:5
    |
103 |     Map(Box<Schema>),
    |     --- `apache_avro::Schema::Map` defined here
    |
help: `apache_avro::Schema::Map` is a tuple variant, use the appropriate syntax
    |
142 |                 let map_schema = apache_avro::Schema::Map(/* fields */);
    |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:145:36
    |
145 |                     value_id: self.last_map_value_field_id,
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:147:46
    |
147 |                 return Ok(AvroSchemaOrField::Schema(map_schema));
    |                                              ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0560]: struct `RecordField` has no field named `r#type`
   --> crates/iceberg/src/avro/schema.rs:156:13
    |
156 |             r#type: key_value.schema(),
    |             ^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `aliases`, `schema`, `position`, `custom_attributes`

error[E0599]: no method named `schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:156:31
    |
156 |             r#type: key_value.schema(),
    |                               ^^^^^^ method not found in `Either<Schema, RecordField>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `schema`, perhaps you need to implement one of them:
            candidate #1: `spec::schema::SchemaVisitor`
            candidate #2: `ArrowSchemaVisitor`

error[E0560]: struct `RecordField` has no field named `r#type`
   --> crates/iceberg/src/avro/schema.rs:163:13
    |
163 |             r#type: value.schema(),
    |             ^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `aliases`, `schema`, `position`, `custom_attributes`

error[E0599]: no method named `schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:163:27
    |
163 |             r#type: value.schema(),
    |                           ^^^^^^ method not found in `Either<Schema, RecordField>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `schema`, perhaps you need to implement one of them:
            candidate #1: `spec::schema::SchemaVisitor`
            candidate #2: `ArrowSchemaVisitor`

error[E0559]: variant `apache_avro::Schema::Record` has no field named `name`
   --> crates/iceberg/src/avro/schema.rs:170:9
    |
170 |         name: format!(
    |         ^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:107:5
    |
107 |     Record(RecordSchema),
    |     ------ `apache_avro::Schema::Record` defined here
    |
help: `apache_avro::Schema::Record` is a tuple variant, use the appropriate syntax
    |
169 |     let record_schema = apache_avro::Schema::Record(/* fields */);
    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:172:18
    |
172 |             self.last_map_key_field_id, self.last_map_value_field_id
    |                  ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:172:46
    |
172 |             self.last_map_key_field_id, self.last_map_value_field_id
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0559]: variant `apache_avro::Schema::Record` has no field named `namespace`
   --> crates/iceberg/src/avro/schema.rs:174:9
    |
174 |         namespace: None,
    |         ^^^^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:107:5
    |
107 |     Record(RecordSchema),
    |     ------ `apache_avro::Schema::Record` defined here
    |
help: `apache_avro::Schema::Record` is a tuple variant, use the appropriate syntax
    |
169 |     let record_schema = apache_avro::Schema::Record(/* fields */);
    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0559]: variant `apache_avro::Schema::Record` has no field named `doc`
   --> crates/iceberg/src/avro/schema.rs:175:9
    |
175 |         doc: None,
    |         ^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:107:5
    |
107 |     Record(RecordSchema),
    |     ------ `apache_avro::Schema::Record` defined here
    |
help: `apache_avro::Schema::Record` is a tuple variant, use the appropriate syntax
    |
169 |     let record_schema = apache_avro::Schema::Record(/* fields */);
    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0559]: variant `apache_avro::Schema::Record` has no field named `fields`
   --> crates/iceberg/src/avro/schema.rs:176:9
    |
176 |         fields: record_fields,
    |         ^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:107:5
    |
107 |     Record(RecordSchema),
    |     ------ `apache_avro::Schema::Record` defined here
    |
help: `apache_avro::Schema::Record` is a tuple variant, use the appropriate syntax
    |
169 |     let record_schema = apache_avro::Schema::Record(/* fields */);
    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0559]: variant `apache_avro::Schema::Record` has no field named `aliases`
   --> crates/iceberg/src/avro/schema.rs:177:9
    |
177 |         aliases: vec![],
    |         ^^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:107:5
    |
107 |     Record(RecordSchema),
    |     ------ `apache_avro::Schema::Record` defined here
    |
help: `apache_avro::Schema::Record` is a tuple variant, use the appropriate syntax
    |
169 |     let record_schema = apache_avro::Schema::Record(/* fields */);
    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no variant or associated item named `Logical` found for enum `apache_avro::Schema` in the current scope
    --> crates/iceberg/src/avro/schema.rs:179:42
     |
179  |     let logical_map_schema = AvroSchema::Logical(DecimalSchema::Map {
     |                                          ^^^^^^^ variant or associated item not found in `Schema`
     |
note: if you're trying to build a new `apache_avro::Schema` consider using one of the following associated functions:
      apache_avro::Schema::parse_str
      apache_avro::Schema::parse_reader
      apache_avro::Schema::parse
      apache_avro::Schema::parse_with_names
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:997:5
     |
997  |     pub fn parse_str(input: &str) -> Result<Schema, Error> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1035 |     pub fn parse_reader(reader: &mut (impl Read + ?Sized)) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1044 |     pub fn parse(value: &Value) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1051 |     pub(crate) fn parse_with_names(value: &Value, names: Names) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0223]: ambiguous associated type
   --> crates/iceberg/src/avro/schema.rs:179:50
    |
179 |     let logical_map_schema = AvroSchema::Logical(DecimalSchema::Map {
    |                                                  ^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `Map` implemented for `DecimalSchema`, you could use the fully-qualified path
    |
179 |     let logical_map_schema = AvroSchema::Logical(<DecimalSchema as Example>::Map {
    |                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:182:27
    |
182 |     Ok(AvroSchemaOrField::Schema(logical_map_schema))
    |                           ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

Some errors have detailed explanations: E0223, E0559, E0560, E0599, E0609.
For more information about an error, try `rustc --explain E0223`.
error: could not compile `iceberg` (lib) due to 24 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 24 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error: 3 positional arguments in format string, but there are 2 arguments
   --> crates/iceberg/src/avro/schema.rs:171:15
    |
171 |             "k{}_{}v{}",
    |               ^^ ^^ ^^
172 |             self.last_map_key_field_id, self.last_map_value_field_id
    |             --------------------------  ----------------------------

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:138:31
    |
138 |     if let AvroSchemaOrField::Schema(schema) = key_value {
    |                               ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:139:35
    |
139 |         if let AvroSchemaOrField::Schema(value_schema) = value {
    |                                   ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0599]: no variant or associated item named `Primitive` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:140:32
    |
140 |             if let AvroSchema::Primitive(PrimitiveType::String) = schema.schema() {
    |                                ^^^^^^^^^ variant or associated item not found in `Schema`

error[E0559]: variant `apache_avro::Schema::Map` has no field named `values`
   --> crates/iceberg/src/avro/schema.rs:143:21
    |
143 |                     values: Box::new(value_schema),
    |                     ^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:103:5
    |
103 |     Map(Box<Schema>),
    |     --- `apache_avro::Schema::Map` defined here
    |
help: `apache_avro::Schema::Map` is a tuple variant, use the appropriate syntax
    |
142 |                 let map_schema = apache_avro::Schema::Map(/* fields */);
    |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0559]: variant `apache_avro::Schema::Map` has no field named `key_id`
   --> crates/iceberg/src/avro/schema.rs:144:21
    |
144 |                     key_id: self.last_map_key_field_id,
    |                     ^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:103:5
    |
103 |     Map(Box<Schema>),
    |     --- `apache_avro::Schema::Map` defined here
    |
help: `apache_avro::Schema::Map` is a tuple variant, use the appropriate syntax
    |
142 |                 let map_schema = apache_avro::Schema::Map(/* fields */);
    |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:144:34
    |
144 |                     key_id: self.last_map_key_field_id,
    |                                  ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0559]: variant `apache_avro::Schema::Map` has no field named `value_id`
   --> crates/iceberg/src/avro/schema.rs:145:21
    |
145 |                     value_id: self.last_map_value_field_id,
    |                     ^^^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:103:5
    |
103 |     Map(Box<Schema>),
    |     --- `apache_avro::Schema::Map` defined here
    |
help: `apache_avro::Schema::Map` is a tuple variant, use the appropriate syntax
    |
142 |                 let map_schema = apache_avro::Schema::Map(/* fields */);
    |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:145:36
    |
145 |                     value_id: self.last_map_value_field_id,
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:147:46
    |
147 |                 return Ok(AvroSchemaOrField::Schema(map_schema));
    |                                              ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

error[E0560]: struct `RecordField` has no field named `r#type`
   --> crates/iceberg/src/avro/schema.rs:156:13
    |
156 |             r#type: key_value.schema(),
    |             ^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `aliases`, `schema`, `position`, `custom_attributes`

error[E0599]: no method named `schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:156:31
    |
156 |             r#type: key_value.schema(),
    |                               ^^^^^^ method not found in `Either<Schema, RecordField>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `schema`, perhaps you need to implement one of them:
            candidate #1: `spec::schema::SchemaVisitor`
            candidate #2: `ArrowSchemaVisitor`

error[E0560]: struct `RecordField` has no field named `r#type`
   --> crates/iceberg/src/avro/schema.rs:163:13
    |
163 |             r#type: value.schema(),
    |             ^^^^^^ `RecordField` does not have this field
    |
    = note: available fields are: `aliases`, `schema`, `position`, `custom_attributes`

error[E0599]: no method named `schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:163:27
    |
163 |             r#type: value.schema(),
    |                           ^^^^^^ method not found in `Either<Schema, RecordField>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `schema`, perhaps you need to implement one of them:
            candidate #1: `spec::schema::SchemaVisitor`
            candidate #2: `ArrowSchemaVisitor`

error[E0559]: variant `apache_avro::Schema::Record` has no field named `name`
   --> crates/iceberg/src/avro/schema.rs:170:9
    |
170 |         name: format!(
    |         ^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:107:5
    |
107 |     Record(RecordSchema),
    |     ------ `apache_avro::Schema::Record` defined here
    |
help: `apache_avro::Schema::Record` is a tuple variant, use the appropriate syntax
    |
169 |     let record_schema = apache_avro::Schema::Record(/* fields */);
    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `last_map_key_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:172:18
    |
172 |             self.last_map_key_field_id, self.last_map_value_field_id
    |                  ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0609]: no field `last_map_value_field_id` on type `&mut SchemaToAvroSchema`
   --> crates/iceberg/src/avro/schema.rs:172:46
    |
172 |             self.last_map_key_field_id, self.last_map_value_field_id
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `schema`

error[E0559]: variant `apache_avro::Schema::Record` has no field named `namespace`
   --> crates/iceberg/src/avro/schema.rs:174:9
    |
174 |         namespace: None,
    |         ^^^^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:107:5
    |
107 |     Record(RecordSchema),
    |     ------ `apache_avro::Schema::Record` defined here
    |
help: `apache_avro::Schema::Record` is a tuple variant, use the appropriate syntax
    |
169 |     let record_schema = apache_avro::Schema::Record(/* fields */);
    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0559]: variant `apache_avro::Schema::Record` has no field named `doc`
   --> crates/iceberg/src/avro/schema.rs:175:9
    |
175 |         doc: None,
    |         ^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:107:5
    |
107 |     Record(RecordSchema),
    |     ------ `apache_avro::Schema::Record` defined here
    |
help: `apache_avro::Schema::Record` is a tuple variant, use the appropriate syntax
    |
169 |     let record_schema = apache_avro::Schema::Record(/* fields */);
    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0559]: variant `apache_avro::Schema::Record` has no field named `fields`
   --> crates/iceberg/src/avro/schema.rs:176:9
    |
176 |         fields: record_fields,
    |         ^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:107:5
    |
107 |     Record(RecordSchema),
    |     ------ `apache_avro::Schema::Record` defined here
    |
help: `apache_avro::Schema::Record` is a tuple variant, use the appropriate syntax
    |
169 |     let record_schema = apache_avro::Schema::Record(/* fields */);
    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0559]: variant `apache_avro::Schema::Record` has no field named `aliases`
   --> crates/iceberg/src/avro/schema.rs:177:9
    |
177 |         aliases: vec![],
    |         ^^^^^^^ field does not exist
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:107:5
    |
107 |     Record(RecordSchema),
    |     ------ `apache_avro::Schema::Record` defined here
    |
help: `apache_avro::Schema::Record` is a tuple variant, use the appropriate syntax
    |
169 |     let record_schema = apache_avro::Schema::Record(/* fields */);
    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no variant or associated item named `Logical` found for enum `apache_avro::Schema` in the current scope
    --> crates/iceberg/src/avro/schema.rs:179:42
     |
179  |     let logical_map_schema = AvroSchema::Logical(DecimalSchema::Map {
     |                                          ^^^^^^^ variant or associated item not found in `Schema`
     |
note: if you're trying to build a new `apache_avro::Schema` consider using one of the following associated functions:
      apache_avro::Schema::parse_str
      apache_avro::Schema::parse_reader
      apache_avro::Schema::parse
      apache_avro::Schema::parse_with_names
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:997:5
     |
997  |     pub fn parse_str(input: &str) -> Result<Schema, Error> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1035 |     pub fn parse_reader(reader: &mut (impl Read + ?Sized)) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1044 |     pub fn parse(value: &Value) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1051 |     pub(crate) fn parse_with_names(value: &Value, names: Names) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0223]: ambiguous associated type
   --> crates/iceberg/src/avro/schema.rs:179:50
    |
179 |     let logical_map_schema = AvroSchema::Logical(DecimalSchema::Map {
    |                                                  ^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `Map` implemented for `DecimalSchema`, you could use the fully-qualified path
    |
179 |     let logical_map_schema = AvroSchema::Logical(<DecimalSchema as Example>::Map {
    |                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no variant or associated item named `Schema` found for enum `itertools::Either` in the current scope
   --> crates/iceberg/src/avro/schema.rs:182:27
    |
182 |     Ok(AvroSchemaOrField::Schema(logical_map_schema))
    |                           ^^^^^^ variant or associated item not found in `Either<Schema, RecordField>`

Some errors have detailed explanations: E0223, E0559, E0560, E0599, E0609.
For more information about an error, try `rustc --explain E0223`.
error: could not compile `iceberg` (lib) due to 24 previous errors


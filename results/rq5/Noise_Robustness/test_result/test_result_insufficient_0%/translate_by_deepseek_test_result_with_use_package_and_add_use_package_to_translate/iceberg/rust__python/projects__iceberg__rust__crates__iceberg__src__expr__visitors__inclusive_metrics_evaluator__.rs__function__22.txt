Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0616]: field `field` of struct `term::BoundReference` is private
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:361:28
    |
361 |     let field = &reference.field;
    |                            ^^^^^ private field
    |
help: a method `field` also exists, call it with parentheses
    |
361 |     let field = &reference.field();
    |                                 ++

error[E0599]: no method named `_may_contain_null` found for mutable reference `&mut InclusiveMetricsEvaluator<'_>` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:364:13
    |
364 |     if self._may_contain_null(field_id) {
    |             ^^^^^^^^^^^^^^^^^ help: there is a method with a similar name: `may_contain_null`

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:365:19
    |
365 |         return Ok(ROWS_MIGHT_MATCH);
    |                -- ^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |                |
    |                arguments to this enum variant are incorrect
    |
    = note: expected type `bool`
               found enum `std::result::Result<bool, error::Error>`
help: the type constructed contains `std::result::Result<bool, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:365:16
    |
365 |         return Ok(ROWS_MIGHT_MATCH);
    |                ^^^----------------^
    |                   |
    |                   this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<bool, error::Error>` value, propagating a `Result::Err` value to the caller
    |
365 |         return Ok(ROWS_MIGHT_MATCH?);
    |                                   +

error[E0599]: no variant or associated item named `InvalidArgument` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:369:42
    |
369 |         return Err(Error::new(ErrorKind::InvalidArgument, "Expected PrimitiveType"));
    |                                          ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `InvalidArgument` not found for this enum

error[E0609]: no field `value` on type `&values::Datum`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:372:24
    |
372 |     let prefix = datum.value.to_string();
    |                        ^^^^^ unknown field

error[E0609]: no field `lower_bounds` on type `&mut InclusiveMetricsEvaluator<'_>`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:377:43
    |
377 |     if let Some(lower_bound_bytes) = self.lower_bounds.get(&field_id) {
    |                                           ^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
377 |     if let Some(lower_bound_bytes) = self.data_file.lower_bounds.get(&field_id) {
    |                                           ++++++++++

error[E0609]: no field `upper_bounds` on type `&mut InclusiveMetricsEvaluator<'_>`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:378:47
    |
378 |         if let Some(upper_bound_bytes) = self.upper_bounds.get(&field_id) {
    |                                               ^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
378 |         if let Some(upper_bound_bytes) = self.data_file.upper_bounds.get(&field_id) {
    |                                               ++++++++++

error[E0425]: cannot find function `from_bytes` in this scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:379:31
    |
379 |             let lower_bound = from_bytes(field.field_type, lower_bound_bytes.clone());
    |                               ^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `from_bytes` in this scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:380:31
    |
380 |             let upper_bound = from_bytes(field.field_type, upper_bound_bytes.clone());
    |                               ^^^^^^^^^^ not found in this scope

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:384:27
    |
384 |                 return Ok(ROWS_MIGHT_MATCH);
    |                        -- ^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |                        |
    |                        arguments to this enum variant are incorrect
    |
    = note: expected type `bool`
               found enum `std::result::Result<bool, error::Error>`
help: the type constructed contains `std::result::Result<bool, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:384:24
    |
384 |                 return Ok(ROWS_MIGHT_MATCH);
    |                        ^^^----------------^
    |                           |
    |                           this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<bool, error::Error>` value, propagating a `Result::Err` value to the caller
    |
384 |                 return Ok(ROWS_MIGHT_MATCH?);
    |                                           +

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:390:31
    |
390 |                     return Ok(ROWS_MIGHT_MATCH);
    |                            -- ^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |                            |
    |                            arguments to this enum variant are incorrect
    |
    = note: expected type `bool`
               found enum `std::result::Result<bool, error::Error>`
help: the type constructed contains `std::result::Result<bool, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:390:28
    |
390 |                     return Ok(ROWS_MIGHT_MATCH);
    |                            ^^^----------------^
    |                               |
    |                               this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<bool, error::Error>` value, propagating a `Result::Err` value to the caller
    |
390 |                     return Ok(ROWS_MIGHT_MATCH?);
    |                                               +

error[E0600]: cannot apply unary operator `!` to type `std::result::Result<bool, error::Error>`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:394:31
    |
394 |                     return Ok(!ROWS_MIGHT_MATCH);
    |                               ^^^^^^^^^^^^^^^^^ cannot apply unary operator `!`

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:400:8
    |
400 |     Ok(ROWS_MIGHT_MATCH)
    |     -- ^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |     |
    |     arguments to this enum variant are incorrect
    |
    = note: expected type `bool`
               found enum `std::result::Result<bool, error::Error>`
help: the type constructed contains `std::result::Result<bool, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:400:5
    |
400 |     Ok(ROWS_MIGHT_MATCH)
    |     ^^^----------------^
    |        |
    |        this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<bool, error::Error>` value, propagating a `Result::Err` value to the caller
    |
400 |     Ok(ROWS_MIGHT_MATCH?)
    |                        +

Some errors have detailed explanations: E0308, E0425, E0599, E0600, E0609, E0616.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `iceberg` (lib) due to 13 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 13 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0616]: field `field` of struct `term::BoundReference` is private
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:361:28
    |
361 |     let field = &reference.field;
    |                            ^^^^^ private field
    |
help: a method `field` also exists, call it with parentheses
    |
361 |     let field = &reference.field();
    |                                 ++

error[E0599]: no method named `_may_contain_null` found for mutable reference `&mut InclusiveMetricsEvaluator<'_>` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:364:13
    |
364 |     if self._may_contain_null(field_id) {
    |             ^^^^^^^^^^^^^^^^^ help: there is a method with a similar name: `may_contain_null`

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:365:19
    |
365 |         return Ok(ROWS_MIGHT_MATCH);
    |                -- ^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |                |
    |                arguments to this enum variant are incorrect
    |
    = note: expected type `bool`
               found enum `std::result::Result<bool, error::Error>`
help: the type constructed contains `std::result::Result<bool, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:365:16
    |
365 |         return Ok(ROWS_MIGHT_MATCH);
    |                ^^^----------------^
    |                   |
    |                   this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<bool, error::Error>` value, propagating a `Result::Err` value to the caller
    |
365 |         return Ok(ROWS_MIGHT_MATCH?);
    |                                   +

error[E0599]: no variant or associated item named `InvalidArgument` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:369:42
    |
369 |         return Err(Error::new(ErrorKind::InvalidArgument, "Expected PrimitiveType"));
    |                                          ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `InvalidArgument` not found for this enum

error[E0609]: no field `value` on type `&values::Datum`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:372:24
    |
372 |     let prefix = datum.value.to_string();
    |                        ^^^^^ unknown field

error[E0609]: no field `lower_bounds` on type `&mut InclusiveMetricsEvaluator<'_>`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:377:43
    |
377 |     if let Some(lower_bound_bytes) = self.lower_bounds.get(&field_id) {
    |                                           ^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
377 |     if let Some(lower_bound_bytes) = self.data_file.lower_bounds.get(&field_id) {
    |                                           ++++++++++

error[E0609]: no field `upper_bounds` on type `&mut InclusiveMetricsEvaluator<'_>`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:378:47
    |
378 |         if let Some(upper_bound_bytes) = self.upper_bounds.get(&field_id) {
    |                                               ^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
378 |         if let Some(upper_bound_bytes) = self.data_file.upper_bounds.get(&field_id) {
    |                                               ++++++++++

error[E0425]: cannot find function `from_bytes` in this scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:379:31
    |
379 |             let lower_bound = from_bytes(field.field_type, lower_bound_bytes.clone());
    |                               ^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `from_bytes` in this scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:380:31
    |
380 |             let upper_bound = from_bytes(field.field_type, upper_bound_bytes.clone());
    |                               ^^^^^^^^^^ not found in this scope

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:384:27
    |
384 |                 return Ok(ROWS_MIGHT_MATCH);
    |                        -- ^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |                        |
    |                        arguments to this enum variant are incorrect
    |
    = note: expected type `bool`
               found enum `std::result::Result<bool, error::Error>`
help: the type constructed contains `std::result::Result<bool, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:384:24
    |
384 |                 return Ok(ROWS_MIGHT_MATCH);
    |                        ^^^----------------^
    |                           |
    |                           this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<bool, error::Error>` value, propagating a `Result::Err` value to the caller
    |
384 |                 return Ok(ROWS_MIGHT_MATCH?);
    |                                           +

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:390:31
    |
390 |                     return Ok(ROWS_MIGHT_MATCH);
    |                            -- ^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |                            |
    |                            arguments to this enum variant are incorrect
    |
    = note: expected type `bool`
               found enum `std::result::Result<bool, error::Error>`
help: the type constructed contains `std::result::Result<bool, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:390:28
    |
390 |                     return Ok(ROWS_MIGHT_MATCH);
    |                            ^^^----------------^
    |                               |
    |                               this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<bool, error::Error>` value, propagating a `Result::Err` value to the caller
    |
390 |                     return Ok(ROWS_MIGHT_MATCH?);
    |                                               +

error[E0600]: cannot apply unary operator `!` to type `std::result::Result<bool, error::Error>`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:394:31
    |
394 |                     return Ok(!ROWS_MIGHT_MATCH);
    |                               ^^^^^^^^^^^^^^^^^ cannot apply unary operator `!`

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:400:8
    |
400 |     Ok(ROWS_MIGHT_MATCH)
    |     -- ^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |     |
    |     arguments to this enum variant are incorrect
    |
    = note: expected type `bool`
               found enum `std::result::Result<bool, error::Error>`
help: the type constructed contains `std::result::Result<bool, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:400:5
    |
400 |     Ok(ROWS_MIGHT_MATCH)
    |     ^^^----------------^
    |        |
    |        this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<bool, error::Error>` value, propagating a `Result::Err` value to the caller
    |
400 |     Ok(ROWS_MIGHT_MATCH?)
    |                        +

Some errors have detailed explanations: E0308, E0425, E0599, E0600, E0609, E0616.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `iceberg` (lib) due to 13 previous errors


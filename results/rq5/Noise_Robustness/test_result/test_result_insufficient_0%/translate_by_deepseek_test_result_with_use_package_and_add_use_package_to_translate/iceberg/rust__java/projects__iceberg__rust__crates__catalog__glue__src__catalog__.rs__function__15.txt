Fail
file path is :
projects/iceberg/rust/crates/catalog/glue/src/catalog.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
   Compiling iceberg-catalog-hms v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/hms)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
warning: unused import: `from_aws_build_error`
  --> crates/catalog/glue/src/catalog.rs:31:20
   |
31 | use crate::error::{from_aws_build_error, from_aws_sdk_error};
   |                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0599]: no function or associated item named `from_kind` found for struct `iceberg::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:523:31
    |
523 |             return Err(Error::from_kind(ErrorKind::NoSuchNamespace(format!(
    |                               ^^^^^^^^^ function or associated item not found in `Error`
    |
note: if you're trying to build a new `iceberg::Error`, consider using `iceberg::Error::new` which returns `iceberg::Error`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:197:5
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `NoSuchNamespace` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:523:52
    |
523 |             return Err(Error::from_kind(ErrorKind::NoSuchNamespace(format!(
    |                                                    ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:525:17
    |
525 |                 src, dest, dest.namespace
    |                 ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:525:22
    |
525 |                 src, dest, dest.namespace
    |                      ^^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `iceberg::NamespaceIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:525:28
    |
525 |                 src, dest, dest.namespace
    |                            ^^^^^^^^^^^^^^ `iceberg::NamespaceIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `iceberg::NamespaceIdent`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `properties` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:530:66
    |
530 |         let from_table_db_name = convert_to_database(&src, &self.properties().glue_catalog_skip_name_validation)?;
    |                                                                  ^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:530:54
    |
530 |         let from_table_db_name = convert_to_database(&src, &self.properties().glue_catalog_skip_name_validation)?;
    |                                  ------------------- ^^^^ expected `&NamespaceIdent`, found `&&TableIdent`
    |                                  |
    |                                  arguments to this function are incorrect
    |
    = note: expected reference `&iceberg::NamespaceIdent`
               found reference `&&'life1 TableIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------

error[E0599]: no method named `properties` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:531:65
    |
531 |         let from_table_name = convert_to_glue_table(&src, &self.properties().glue_catalog_skip_name_validation)?;
    |                                                                 ^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0277]: the trait bound `std::string::String: From<&&TableIdent>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:531:53
    |
531 |         let from_table_name = convert_to_glue_table(&src, &self.properties().glue_catalog_skip_name_validation)?;
    |                               --------------------- ^^^^ the trait `From<&&TableIdent>` is not implemented for `std::string::String`, which is required by `&&TableIdent: Into<std::string::String>`
    |                               |
    |                               required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&&TableIdent` to implement `Into<std::string::String>`
note: required by a bound in `utils::convert_to_glue_table`
   --> crates/catalog/glue/src/utils.rs:145:22
    |
144 | pub(crate) fn convert_to_glue_table(
    |               --------------------- required by a bound in this function
145 |     table_name: impl Into<String>,
    |                      ^^^^^^^^^^^^ required by this bound in `convert_to_glue_table`

error[E0061]: this function takes 5 arguments but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:531:31
    |
531 |         let from_table_name = convert_to_glue_table(&src, &self.properties().glue_catalog_skip_name_validation)?;
    |                               ^^^^^^^^^^^^^^^^^^^^^------------------------------------------------------------ three arguments of type `&iceberg::spec::TableMetadata`, `&std::collections::HashMap<std::string::String, std::string::String>`, and `std::option::Option<std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:144:15
    |
144 | pub(crate) fn convert_to_glue_table(
    |               ^^^^^^^^^^^^^^^^^^^^^
145 |     table_name: impl Into<String>,
    |     -----------------------------
146 |     metadata_location: String,
    |     -------------------------
147 |     metadata: &TableMetadata,
    |     ------------------------
148 |     properties: &HashMap<String, String>,
    |     ------------------------------------
149 |     prev_metadata_location: Option<String>,
    |     --------------------------------------
help: provide the arguments
    |
531 |         let from_table_name = convert_to_glue_table(&src, &self.properties().glue_catalog_skip_name_validation, /* &iceberg::spec::TableMetadata */, /* &std::collections::HashMap<std::string::String, std::string::String> */, /* std::option::Option<std::string::String> */)?;
    |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `properties` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:532:65
    |
532 |         let to_table_db_name = convert_to_database(&dest, &self.properties().glue_catalog_skip_name_validation)?;
    |                                                                 ^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:532:52
    |
532 |         let to_table_db_name = convert_to_database(&dest, &self.properties().glue_catalog_skip_name_validation)?;
    |                                ------------------- ^^^^^ expected `&NamespaceIdent`, found `&&TableIdent`
    |                                |
    |                                arguments to this function are incorrect
    |
    = note: expected reference `&iceberg::NamespaceIdent`
               found reference `&&'life2 TableIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------

error[E0599]: no method named `properties` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:533:64
    |
533 |         let to_table_name = convert_to_glue_table(&dest, &self.properties().glue_catalog_skip_name_validation)?;
    |                                                                ^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0277]: the trait bound `std::string::String: From<&&TableIdent>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:533:51
    |
533 |         let to_table_name = convert_to_glue_table(&dest, &self.properties().glue_catalog_skip_name_validation)?;
    |                             --------------------- ^^^^^ the trait `From<&&TableIdent>` is not implemented for `std::string::String`, which is required by `&&TableIdent: Into<std::string::String>`
    |                             |
    |                             required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&&TableIdent` to implement `Into<std::string::String>`
note: required by a bound in `utils::convert_to_glue_table`
   --> crates/catalog/glue/src/utils.rs:145:22
    |
144 | pub(crate) fn convert_to_glue_table(
    |               --------------------- required by a bound in this function
145 |     table_name: impl Into<String>,
    |                      ^^^^^^^^^^^^ required by this bound in `convert_to_glue_table`

error[E0061]: this function takes 5 arguments but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:533:29
    |
533 |         let to_table_name = convert_to_glue_table(&dest, &self.properties().glue_catalog_skip_name_validation)?;
    |                             ^^^^^^^^^^^^^^^^^^^^^------------------------------------------------------------- three arguments of type `&iceberg::spec::TableMetadata`, `&std::collections::HashMap<std::string::String, std::string::String>`, and `std::option::Option<std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:144:15
    |
144 | pub(crate) fn convert_to_glue_table(
    |               ^^^^^^^^^^^^^^^^^^^^^
145 |     table_name: impl Into<String>,
    |     -----------------------------
146 |     metadata_location: String,
    |     -------------------------
147 |     metadata: &TableMetadata,
    |     ------------------------
148 |     properties: &HashMap<String, String>,
    |     ------------------------------------
149 |     prev_metadata_location: Option<String>,
    |     --------------------------------------
help: provide the arguments
    |
533 |         let to_table_name = convert_to_glue_table(&dest, &self.properties().glue_catalog_skip_name_validation, /* &iceberg::spec::TableMetadata */, /* &std::collections::HashMap<std::string::String, std::string::String> */, /* std::option::Option<std::string::String> */)?;
    |                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `glue_client` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:535:27
    |
535 |         let client = self.glue_client().await?;
    |                           ^^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0599]: no method named `properties` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:538:30
    |
538 |             .catalog_id(self.properties().glue_catalog_id.as_str())
    |                              ^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0599]: no method named `as_str` found for struct `DatabaseInput` in the current scope
   --> crates/catalog/glue/src/catalog.rs:539:47
    |
539 |             .database_name(from_table_db_name.as_str())
    |                                               ^^^^^^ method not found in `DatabaseInput`
    |
help: one of the expressions' fields has a method of the same name
    |
539 |             .database_name(from_table_db_name.name.as_str())
    |                                               +++++

error[E0599]: no method named `as_str` found for struct `TableInput` in the current scope
   --> crates/catalog/glue/src/catalog.rs:540:35
    |
540 |             .name(from_table_name.as_str())
    |                                   ^^^^^^ method not found in `TableInput`
    |
help: one of the expressions' fields has a method of the same name
    |
540 |             .name(from_table_name.name.as_str())
    |                                   +++++

error[E0599]: no function or associated item named `from_kind` found for struct `iceberg::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:544:24
    |
544 |                 Error::from_kind(ErrorKind::NoSuchTable(format!(
    |                        ^^^^^^^^^ function or associated item not found in `Error`
    |
note: if you're trying to build a new `iceberg::Error`, consider using `iceberg::Error::new` which returns `iceberg::Error`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:197:5
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `NoSuchTable` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:544:45
    |
544 |                 Error::from_kind(ErrorKind::NoSuchTable(format!(
    |                                             ^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:546:21
    |
546 |                     src
    |                     ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no function or associated item named `from_kind` found for struct `iceberg::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:551:20
    |
551 |             Error::from_kind(ErrorKind::NoSuchTable(format!(
    |                    ^^^^^^^^^ function or associated item not found in `Error`
    |
note: if you're trying to build a new `iceberg::Error`, consider using `iceberg::Error::new` which returns `iceberg::Error`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:197:5
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `NoSuchTable` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:551:41
    |
551 |             Error::from_kind(ErrorKind::NoSuchTable(format!(
    |                                         ^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:553:17
    |
553 |                 src
    |                 ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:561:14
    |
561 |             .parameters(from_table.parameters.clone())
    |              ^^^^^^^^^^------------------------------- an argument is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:12
    |
375 |     pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>)...
    |            ^^^^^^^^^^
help: provide the argument
    |
561 |             .parameters(from_table.parameters.clone(), /* v */)
    |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `properties` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:566:30
    |
566 |             .catalog_id(self.properties().glue_catalog_id.as_str())
    |                              ^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0599]: no method named `as_str` found for struct `DatabaseInput` in the current scope
   --> crates/catalog/glue/src/catalog.rs:567:45
    |
567 |             .database_name(to_table_db_name.as_str())
    |                                             ^^^^^^ method not found in `DatabaseInput`
    |
help: one of the expressions' fields has a method of the same name
    |
567 |             .database_name(to_table_db_name.name.as_str())
    |                                             +++++

error[E0599]: no method named `as_str` found for struct `TableInput` in the current scope
   --> crates/catalog/glue/src/catalog.rs:568:65
    |
568 |             .table_input(table_input_builder.name(to_table_name.as_str()).build())
    |                                                                 ^^^^^^ method not found in `TableInput`
    |
help: one of the expressions' fields has a method of the same name
    |
568 |             .table_input(table_input_builder.name(to_table_name.name.as_str()).build())
    |                                                                 +++++

error[E0599]: no function or associated item named `from_kind` found for struct `iceberg::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:572:24
    |
572 |                 Error::from_kind(ErrorKind::CreateTable(format!(
    |                        ^^^^^^^^^ function or associated item not found in `Error`
    |
note: if you're trying to build a new `iceberg::Error`, consider using `iceberg::Error::new` which returns `iceberg::Error`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:197:5
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `CreateTable` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:572:45
    |
572 |                 Error::from_kind(ErrorKind::CreateTable(format!(
    |                                             ^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:579:14
    |
579 |         self.drop_table(src, false).await?;
    |              ^^^^^^^^^^    -------
    |                            | |
    |                            | unexpected argument of type `bool`
    |                            help: remove the extra argument
    |
note: method defined here
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:84:14
    |
84  |     async fn drop_table(&self, table: &TableIdent) -> Result<()>;
    |              ^^^^^^^^^^

Some errors have detailed explanations: E0061, E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib test) generated 1 warning
error: could not compile `iceberg-catalog-glue` (lib test) due to 32 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
warning: unused import: `from_aws_build_error`
  --> crates/catalog/glue/src/catalog.rs:31:20
   |
31 | use crate::error::{from_aws_build_error, from_aws_sdk_error};
   |                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0599]: no function or associated item named `from_kind` found for struct `iceberg::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:523:31
    |
523 |             return Err(Error::from_kind(ErrorKind::NoSuchNamespace(format!(
    |                               ^^^^^^^^^ function or associated item not found in `Error`
    |
note: if you're trying to build a new `iceberg::Error`, consider using `iceberg::Error::new` which returns `iceberg::Error`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:197:5
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `NoSuchNamespace` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:523:52
    |
523 |             return Err(Error::from_kind(ErrorKind::NoSuchNamespace(format!(
    |                                                    ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:525:17
    |
525 |                 src, dest, dest.namespace
    |                 ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:525:22
    |
525 |                 src, dest, dest.namespace
    |                      ^^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `NamespaceIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:525:28
    |
525 |                 src, dest, dest.namespace
    |                            ^^^^^^^^^^^^^^ `NamespaceIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `NamespaceIdent`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `properties` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:530:66
    |
530 |         let from_table_db_name = convert_to_database(&src, &self.properties().glue_catalog_skip_name_validation)?;
    |                                                                  ^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:530:54
    |
530 |         let from_table_db_name = convert_to_database(&src, &self.properties().glue_catalog_skip_name_validation)?;
    |                                  ------------------- ^^^^ expected `&NamespaceIdent`, found `&&TableIdent`
    |                                  |
    |                                  arguments to this function are incorrect
    |
    = note: expected reference `&NamespaceIdent`
               found reference `&&'life1 TableIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------

error[E0599]: no method named `properties` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:531:65
    |
531 |         let from_table_name = convert_to_glue_table(&src, &self.properties().glue_catalog_skip_name_validation)?;
    |                                                                 ^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0277]: the trait bound `std::string::String: From<&&TableIdent>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:531:53
    |
531 |         let from_table_name = convert_to_glue_table(&src, &self.properties().glue_catalog_skip_name_validation)?;
    |                               --------------------- ^^^^ the trait `From<&&TableIdent>` is not implemented for `std::string::String`, which is required by `&&TableIdent: Into<std::string::String>`
    |                               |
    |                               required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&&TableIdent` to implement `Into<std::string::String>`
note: required by a bound in `convert_to_glue_table`
   --> crates/catalog/glue/src/utils.rs:145:22
    |
144 | pub(crate) fn convert_to_glue_table(
    |               --------------------- required by a bound in this function
145 |     table_name: impl Into<String>,
    |                      ^^^^^^^^^^^^ required by this bound in `convert_to_glue_table`

error[E0061]: this function takes 5 arguments but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:531:31
    |
531 |         let from_table_name = convert_to_glue_table(&src, &self.properties().glue_catalog_skip_name_validation)?;
    |                               ^^^^^^^^^^^^^^^^^^^^^------------------------------------------------------------ three arguments of type `&TableMetadata`, `&HashMap<std::string::String, std::string::String>`, and `std::option::Option<std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:144:15
    |
144 | pub(crate) fn convert_to_glue_table(
    |               ^^^^^^^^^^^^^^^^^^^^^
145 |     table_name: impl Into<String>,
    |     -----------------------------
146 |     metadata_location: String,
    |     -------------------------
147 |     metadata: &TableMetadata,
    |     ------------------------
148 |     properties: &HashMap<String, String>,
    |     ------------------------------------
149 |     prev_metadata_location: Option<String>,
    |     --------------------------------------
help: provide the arguments
    |
531 |         let from_table_name = convert_to_glue_table(&src, &self.properties().glue_catalog_skip_name_validation, /* &TableMetadata */, /* &HashMap<std::string::String, std::string::String> */, /* std::option::Option<std::string::String> */)?;
    |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `properties` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:532:65
    |
532 |         let to_table_db_name = convert_to_database(&dest, &self.properties().glue_catalog_skip_name_validation)?;
    |                                                                 ^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:532:52
    |
532 |         let to_table_db_name = convert_to_database(&dest, &self.properties().glue_catalog_skip_name_validation)?;
    |                                ------------------- ^^^^^ expected `&NamespaceIdent`, found `&&TableIdent`
    |                                |
    |                                arguments to this function are incorrect
    |
    = note: expected reference `&NamespaceIdent`
               found reference `&&'life2 TableIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------

error[E0599]: no method named `properties` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:533:64
    |
533 |         let to_table_name = convert_to_glue_table(&dest, &self.properties().glue_catalog_skip_name_validation)?;
    |                                                                ^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0277]: the trait bound `std::string::String: From<&&TableIdent>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:533:51
    |
533 |         let to_table_name = convert_to_glue_table(&dest, &self.properties().glue_catalog_skip_name_validation)?;
    |                             --------------------- ^^^^^ the trait `From<&&TableIdent>` is not implemented for `std::string::String`, which is required by `&&TableIdent: Into<std::string::String>`
    |                             |
    |                             required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&&TableIdent` to implement `Into<std::string::String>`
note: required by a bound in `convert_to_glue_table`
   --> crates/catalog/glue/src/utils.rs:145:22
    |
144 | pub(crate) fn convert_to_glue_table(
    |               --------------------- required by a bound in this function
145 |     table_name: impl Into<String>,
    |                      ^^^^^^^^^^^^ required by this bound in `convert_to_glue_table`

error[E0061]: this function takes 5 arguments but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:533:29
    |
533 |         let to_table_name = convert_to_glue_table(&dest, &self.properties().glue_catalog_skip_name_validation)?;
    |                             ^^^^^^^^^^^^^^^^^^^^^------------------------------------------------------------- three arguments of type `&TableMetadata`, `&HashMap<std::string::String, std::string::String>`, and `std::option::Option<std::string::String>` are missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:144:15
    |
144 | pub(crate) fn convert_to_glue_table(
    |               ^^^^^^^^^^^^^^^^^^^^^
145 |     table_name: impl Into<String>,
    |     -----------------------------
146 |     metadata_location: String,
    |     -------------------------
147 |     metadata: &TableMetadata,
    |     ------------------------
148 |     properties: &HashMap<String, String>,
    |     ------------------------------------
149 |     prev_metadata_location: Option<String>,
    |     --------------------------------------
help: provide the arguments
    |
533 |         let to_table_name = convert_to_glue_table(&dest, &self.properties().glue_catalog_skip_name_validation, /* &TableMetadata */, /* &HashMap<std::string::String, std::string::String> */, /* std::option::Option<std::string::String> */)?;
    |                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `glue_client` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:535:27
    |
535 |         let client = self.glue_client().await?;
    |                           ^^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0599]: no method named `properties` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:538:30
    |
538 |             .catalog_id(self.properties().glue_catalog_id.as_str())
    |                              ^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0599]: no method named `as_str` found for struct `DatabaseInput` in the current scope
   --> crates/catalog/glue/src/catalog.rs:539:47
    |
539 |             .database_name(from_table_db_name.as_str())
    |                                               ^^^^^^ method not found in `DatabaseInput`
    |
help: one of the expressions' fields has a method of the same name
    |
539 |             .database_name(from_table_db_name.name.as_str())
    |                                               +++++

error[E0599]: no method named `as_str` found for struct `TableInput` in the current scope
   --> crates/catalog/glue/src/catalog.rs:540:35
    |
540 |             .name(from_table_name.as_str())
    |                                   ^^^^^^ method not found in `TableInput`
    |
help: one of the expressions' fields has a method of the same name
    |
540 |             .name(from_table_name.name.as_str())
    |                                   +++++

error[E0599]: no function or associated item named `from_kind` found for struct `iceberg::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:544:24
    |
544 |                 Error::from_kind(ErrorKind::NoSuchTable(format!(
    |                        ^^^^^^^^^ function or associated item not found in `Error`
    |
note: if you're trying to build a new `iceberg::Error`, consider using `iceberg::Error::new` which returns `iceberg::Error`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:197:5
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `NoSuchTable` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:544:45
    |
544 |                 Error::from_kind(ErrorKind::NoSuchTable(format!(
    |                                             ^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:546:21
    |
546 |                     src
    |                     ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no function or associated item named `from_kind` found for struct `iceberg::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:551:20
    |
551 |             Error::from_kind(ErrorKind::NoSuchTable(format!(
    |                    ^^^^^^^^^ function or associated item not found in `Error`
    |
note: if you're trying to build a new `iceberg::Error`, consider using `iceberg::Error::new` which returns `iceberg::Error`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:197:5
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `NoSuchTable` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:551:41
    |
551 |             Error::from_kind(ErrorKind::NoSuchTable(format!(
    |                                         ^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `TableIdent` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:553:17
    |
553 |                 src
    |                 ^^^ `TableIdent` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `TableIdent`, which is required by `&TableIdent: std::fmt::Display`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:561:14
    |
561 |             .parameters(from_table.parameters.clone())
    |              ^^^^^^^^^^------------------------------- an argument is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:12
    |
375 |     pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>)...
    |            ^^^^^^^^^^
help: provide the argument
    |
561 |             .parameters(from_table.parameters.clone(), /* v */)
    |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `properties` found for reference `&GlueCatalog` in the current scope
   --> crates/catalog/glue/src/catalog.rs:566:30
    |
566 |             .catalog_id(self.properties().glue_catalog_id.as_str())
    |                              ^^^^^^^^^^ method not found in `&GlueCatalog`

error[E0599]: no method named `as_str` found for struct `DatabaseInput` in the current scope
   --> crates/catalog/glue/src/catalog.rs:567:45
    |
567 |             .database_name(to_table_db_name.as_str())
    |                                             ^^^^^^ method not found in `DatabaseInput`
    |
help: one of the expressions' fields has a method of the same name
    |
567 |             .database_name(to_table_db_name.name.as_str())
    |                                             +++++

error[E0599]: no method named `as_str` found for struct `TableInput` in the current scope
   --> crates/catalog/glue/src/catalog.rs:568:65
    |
568 |             .table_input(table_input_builder.name(to_table_name.as_str()).build())
    |                                                                 ^^^^^^ method not found in `TableInput`
    |
help: one of the expressions' fields has a method of the same name
    |
568 |             .table_input(table_input_builder.name(to_table_name.name.as_str()).build())
    |                                                                 +++++

error[E0599]: no function or associated item named `from_kind` found for struct `iceberg::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:572:24
    |
572 |                 Error::from_kind(ErrorKind::CreateTable(format!(
    |                        ^^^^^^^^^ function or associated item not found in `Error`
    |
note: if you're trying to build a new `iceberg::Error`, consider using `iceberg::Error::new` which returns `iceberg::Error`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:197:5
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `CreateTable` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:572:45
    |
572 |                 Error::from_kind(ErrorKind::CreateTable(format!(
    |                                             ^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:579:14
    |
579 |         self.drop_table(src, false).await?;
    |              ^^^^^^^^^^    -------
    |                            | |
    |                            | unexpected argument of type `bool`
    |                            help: remove the extra argument
    |
note: method defined here
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:84:14
    |
84  |     async fn drop_table(&self, table: &TableIdent) -> Result<()>;
    |              ^^^^^^^^^^

Some errors have detailed explanations: E0061, E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib) generated 1 warning
error: could not compile `iceberg-catalog-glue` (lib) due to 32 previous errors; 1 warning emitted


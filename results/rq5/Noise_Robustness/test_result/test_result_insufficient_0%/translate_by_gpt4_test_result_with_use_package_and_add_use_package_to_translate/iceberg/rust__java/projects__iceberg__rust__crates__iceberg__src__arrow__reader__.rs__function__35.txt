Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
warning: unused import: `and`
  --> crates/iceberg/src/arrow/reader.rs:21:28
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                            ^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:547:10
    |
546 |     match (lhs, rhs) {
    |           ---------- this expression has type `(Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>)`
547 |         (None, _) => Err(Error::new(ErrorKind::NullValue, "Left expression cannot be null.")),
    |          ^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Option<_>`
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:548:13
    |
546 |     match (lhs, rhs) {
    |           ---------- this expression has type `(Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>)`
547 |         (None, _) => Err(Error::new(ErrorKind::NullValue, "Left expression cannot be null.")),
548 |         (_, None) => Err(Error::new(ErrorKind::NullValue, "Right expression cannot be null.")),
    |             ^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Option<_>`
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::option::Option<_>`

error[E0599]: no variant or associated item named `NullValue` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:547:48
    |
547 |         (None, _) => Err(Error::new(ErrorKind::NullValue, "Left expression cannot be null.")),
    |                                                ^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `NullValue` not found for this enum

error[E0599]: no variant or associated item named `NullValue` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:548:48
    |
548 |         (_, None) => Err(Error::new(ErrorKind::NullValue, "Right expression cannot be null.")),
    |                                                ^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `NullValue` not found for this enum

error[E0369]: binary operation `==` cannot be applied to type `dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
   --> crates/iceberg/src/arrow/reader.rs:550:21
    |
550 |             if *lhs == self.always_false() || *rhs == self.always_false() {
    |                ---- ^^ ------------------- std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>
    |                |
    |                dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send

error[E0369]: binary operation `==` cannot be applied to type `dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
   --> crates/iceberg/src/arrow/reader.rs:550:52
    |
550 |             if *lhs == self.always_false() || *rhs == self.always_false() {
    |                                               ---- ^^ ------------------- std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>
    |                                               |
    |                                               dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:551:20
    |
551 |                 Ok(self.always_false())
    |                 -- ^^^^^^^^^^^^^^^^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Result<Box<...>, ...>`
    |                 |
    |                 arguments to this enum variant are incorrect
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, error::Error>`
help: the type constructed contains `std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:551:17
    |
551 |                 Ok(self.always_false())
    |                 ^^^-------------------^
    |                    |
    |                    this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, error::Error>` value, propagating a `Result::Err` value to the caller
    |
551 |                 Ok(self.always_false()?)
    |                                       +

error[E0369]: binary operation `==` cannot be applied to type `dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
   --> crates/iceberg/src/arrow/reader.rs:552:28
    |
552 |             } else if *lhs == self.always_true() {
    |                       ---- ^^ ------------------ std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>
    |                       |
    |                       dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send

error[E0369]: binary operation `==` cannot be applied to type `dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
   --> crates/iceberg/src/arrow/reader.rs:554:28
    |
554 |             } else if *rhs == self.always_true() {
    |                       ---- ^^ ------------------ std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>
    |                       |
    |                       dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send

error[E0433]: failed to resolve: use of undeclared type `And`
   --> crates/iceberg/src/arrow/reader.rs:557:29
    |
557 |                 Ok(Box::new(And::new(lhs, rhs)))
    |                             ^^^ use of undeclared type `And`
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::And` and 1 other; try using the variant's enum
    |
557 |                 Ok(Box::new(crate::arrow::reader::BoundPredicate(lhs, rhs)))
    |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
557 |                 Ok(Box::new(crate::expr::Predicate(lhs, rhs)))
    |                             ~~~~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0308, E0369, E0433, E0599.
For more information about an error, try `rustc --explain E0308`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 10 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
error[E0433]: failed to resolve: use of undeclared type `And`
   --> crates/iceberg/src/arrow/reader.rs:557:29
    |
557 |                 Ok(Box::new(And::new(lhs, rhs)))
    |                             ^^^ use of undeclared type `And`
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::And` and 3 others; try using the variant's enum
    |
557 |                 Ok(Box::new(crate::arrow::reader::BoundPredicate(lhs, rhs)))
    |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
557 |                 Ok(Box::new(crate::expr::Predicate(lhs, rhs)))
    |                             ~~~~~~~~~~~~~~~~~~~~~~
557 |                 Ok(Box::new(tera::ast::LogicOperator(lhs, rhs)))
    |                             ~~~~~~~~~~~~~~~~~~~~~~~~

warning: `iceberg` (lib test) generated 1 warning (1 duplicate)
error: could not compile `iceberg` (lib test) due to 10 previous errors; 1 warning emitted

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
warning: unused import: `and`
  --> crates/iceberg/src/arrow/reader.rs:21:28
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                            ^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:547:10
    |
546 |     match (lhs, rhs) {
    |           ---------- this expression has type `(Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>)`
547 |         (None, _) => Err(Error::new(ErrorKind::NullValue, "Left expression cannot be null.")),
    |          ^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Option<_>`
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:548:13
    |
546 |     match (lhs, rhs) {
    |           ---------- this expression has type `(Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>)`
547 |         (None, _) => Err(Error::new(ErrorKind::NullValue, "Left expression cannot be null.")),
548 |         (_, None) => Err(Error::new(ErrorKind::NullValue, "Right expression cannot be null.")),
    |             ^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Option<_>`
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::option::Option<_>`

error[E0599]: no variant or associated item named `NullValue` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:547:48
    |
547 |         (None, _) => Err(Error::new(ErrorKind::NullValue, "Left expression cannot be null.")),
    |                                                ^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `NullValue` not found for this enum

error[E0599]: no variant or associated item named `NullValue` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:548:48
    |
548 |         (_, None) => Err(Error::new(ErrorKind::NullValue, "Right expression cannot be null.")),
    |                                                ^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `NullValue` not found for this enum

error[E0369]: binary operation `==` cannot be applied to type `dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
   --> crates/iceberg/src/arrow/reader.rs:550:21
    |
550 |             if *lhs == self.always_false() || *rhs == self.always_false() {
    |                ---- ^^ ------------------- std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>
    |                |
    |                dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send

error[E0369]: binary operation `==` cannot be applied to type `dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
   --> crates/iceberg/src/arrow/reader.rs:550:52
    |
550 |             if *lhs == self.always_false() || *rhs == self.always_false() {
    |                                               ---- ^^ ------------------- std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>
    |                                               |
    |                                               dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:551:20
    |
551 |                 Ok(self.always_false())
    |                 -- ^^^^^^^^^^^^^^^^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Result<Box<...>, ...>`
    |                 |
    |                 arguments to this enum variant are incorrect
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, error::Error>`
help: the type constructed contains `std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:551:17
    |
551 |                 Ok(self.always_false())
    |                 ^^^-------------------^
    |                    |
    |                    this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<Box<(dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)>, error::Error>` value, propagating a `Result::Err` value to the caller
    |
551 |                 Ok(self.always_false()?)
    |                                       +

error[E0369]: binary operation `==` cannot be applied to type `dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
   --> crates/iceberg/src/arrow/reader.rs:552:28
    |
552 |             } else if *lhs == self.always_true() {
    |                       ---- ^^ ------------------ std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>
    |                       |
    |                       dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send

error[E0369]: binary operation `==` cannot be applied to type `dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
   --> crates/iceberg/src/arrow/reader.rs:554:28
    |
554 |             } else if *rhs == self.always_true() {
    |                       ---- ^^ ------------------ std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>
    |                       |
    |                       dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send

error[E0433]: failed to resolve: use of undeclared type `And`
   --> crates/iceberg/src/arrow/reader.rs:557:29
    |
557 |                 Ok(Box::new(And::new(lhs, rhs)))
    |                             ^^^ use of undeclared type `And`
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::And` and 1 other; try using the variant's enum
    |
557 |                 Ok(Box::new(crate::arrow::reader::BoundPredicate(lhs, rhs)))
    |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
557 |                 Ok(Box::new(crate::expr::Predicate(lhs, rhs)))
    |                             ~~~~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0308, E0369, E0433, E0599.
For more information about an error, try `rustc --explain E0308`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 10 previous errors; 1 warning emitted


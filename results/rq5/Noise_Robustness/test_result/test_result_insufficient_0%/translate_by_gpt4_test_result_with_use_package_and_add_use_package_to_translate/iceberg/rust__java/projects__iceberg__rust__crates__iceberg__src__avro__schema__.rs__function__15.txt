Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/avro/schema.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0532]: expected unit struct, unit variant or constant, found tuple variant `AvroSchema::Enum`
   --> crates/iceberg/src/avro/schema.rs:467:34
    |
467 |             AvroSchema::String | AvroSchema::Enum => Ok(Some(Type::String)),
    |                                  ^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:109:5
    |
109 |     Enum(EnumSchema),
    |     ---- `AvroSchema::Enum` defined here
    |
help: use the tuple variant pattern syntax instead
    |
467 |             AvroSchema::String | AvroSchema::Enum(_) => Ok(Some(Type::String)),
    |                                  ~~~~~~~~~~~~~~~~~~~
help: consider importing one of these items instead
    |
19  + use apache_avro::schema::SchemaKind::Enum;
    |
19  + use apache_avro::types::ValueKind::Enum;
    |
19  + use parquet::basic::LogicalType::Enum;
    |
19  + use serde::de::Unexpected::Enum;
    |
help: if you import `Enum`, refer to it directly
    |
467 -             AvroSchema::String | AvroSchema::Enum => Ok(Some(Type::String)),
467 +             AvroSchema::String | Enum => Ok(Some(Type::String)),
    |

error[E0599]: no method named `get_logical_type` found for reference `&apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:452:18
    |
452 |     match schema.get_logical_type() {
    |                  ^^^^^^^^^^^^^^^^ method not found in `&Schema`

error[E0769]: tuple variant `AvroSchema::Decimal` written as struct variant
   --> crates/iceberg/src/avro/schema.rs:454:13
    |
454 |             AvroSchema::Decimal { precision, scale } => Ok(Some(Type::Decimal { precision, scale })),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: use the tuple variant pattern syntax instead
    |
454 |             AvroSchema::Decimal(_) => Ok(Some(Type::Decimal { precision, scale })),
    |                                ~~~

error[E0599]: no variant named `Decimal` found for enum `datatypes::Type`
   --> crates/iceberg/src/avro/schema.rs:454:71
    |
454 |             AvroSchema::Decimal { precision, scale } => Ok(Some(Type::Decimal { precision, scale })),
    |                                                                       ^^^^^^^ variant not found in `datatypes::Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant `Decimal` not found here

error[E0599]: no variant or associated item named `Date` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:455:47
    |
455 |             AvroSchema::Date => Ok(Some(Type::Date)),
    |                                               ^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Date` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Time` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:456:53
    |
456 |             AvroSchema::TimeMicros => Ok(Some(Type::Time)),
    |                                                     ^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Time` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Timestamp` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:457:58
    |
457 |             AvroSchema::TimestampMicros => Ok(Some(Type::Timestamp)),
    |                                                          ^^^^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Timestamp` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Uuid` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:458:47
    |
458 |             AvroSchema::Uuid => Ok(Some(Type::Uuid)),
    |                                               ^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Uuid` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `error::Error: From<&str>` is not satisfied
   --> crates/iceberg/src/avro/schema.rs:459:22
    |
459 |             _ => Err(Error::from("Unsupported logical type")),
    |                      ^^^^^ the trait `From<&str>` is not implemented for `error::Error`
    |
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others

error[E0769]: tuple variant `AvroSchema::Fixed` written as struct variant
   --> crates/iceberg/src/avro/schema.rs:468:13
    |
468 |             AvroSchema::Fixed { size: _size } => Ok(Some(Type::Fixed)),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: use the tuple variant pattern syntax instead
    |
468 |             AvroSchema::Fixed(_size) => Ok(Some(Type::Fixed)),
    |                              ~~~~~~~

error[E0599]: no variant or associated item named `Boolean` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:462:50
    |
462 |             AvroSchema::Boolean => Ok(Some(Type::Boolean)),
    |                                                  ^^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Boolean` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Integer` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:463:46
    |
463 |             AvroSchema::Int => Ok(Some(Type::Integer)),
    |                                              ^^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Integer` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Long` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:464:47
    |
464 |             AvroSchema::Long => Ok(Some(Type::Long)),
    |                                               ^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Long` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Float` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:465:48
    |
465 |             AvroSchema::Float => Ok(Some(Type::Float)),
    |                                                ^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Float` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Double` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:466:49
    |
466 |             AvroSchema::Double => Ok(Some(Type::Double)),
    |                                                 ^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Double` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `String` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:467:68
    |
467 |             AvroSchema::String | AvroSchema::Enum => Ok(Some(Type::String)),
    |                                                                    ^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `String` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Fixed` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:468:64
    |
468 |             AvroSchema::Fixed { size: _size } => Ok(Some(Type::Fixed)),
    |                                                                ^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Fixed` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Binary` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:469:48
    |
469 |             AvroSchema::Bytes => Ok(Some(Type::Binary)),
    |                                                ^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Binary` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `error::Error: From<&str>` is not satisfied
   --> crates/iceberg/src/avro/schema.rs:471:22
    |
471 |             _ => Err(Error::from("Unsupported primitive type")),
    |                      ^^^^^ the trait `From<&str>` is not implemented for `error::Error`
    |
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others

Some errors have detailed explanations: E0277, E0532, E0599, E0769.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `iceberg` (lib) due to 19 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 19 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0532]: expected unit struct, unit variant or constant, found tuple variant `AvroSchema::Enum`
   --> crates/iceberg/src/avro/schema.rs:467:34
    |
467 |             AvroSchema::String | AvroSchema::Enum => Ok(Some(Type::String)),
    |                                  ^^^^^^^^^^^^^^^^
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:109:5
    |
109 |     Enum(EnumSchema),
    |     ---- `AvroSchema::Enum` defined here
    |
help: use the tuple variant pattern syntax instead
    |
467 |             AvroSchema::String | AvroSchema::Enum(_) => Ok(Some(Type::String)),
    |                                  ~~~~~~~~~~~~~~~~~~~
help: consider importing one of these items instead
    |
19  + use apache_avro::schema::SchemaKind::Enum;
    |
19  + use apache_avro::types::ValueKind::Enum;
    |
19  + use parquet::basic::LogicalType::Enum;
    |
19  + use serde::de::Unexpected::Enum;
    |
help: if you import `Enum`, refer to it directly
    |
467 -             AvroSchema::String | AvroSchema::Enum => Ok(Some(Type::String)),
467 +             AvroSchema::String | Enum => Ok(Some(Type::String)),
    |

error[E0599]: no method named `get_logical_type` found for reference `&apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:452:18
    |
452 |     match schema.get_logical_type() {
    |                  ^^^^^^^^^^^^^^^^ method not found in `&Schema`

error[E0769]: tuple variant `AvroSchema::Decimal` written as struct variant
   --> crates/iceberg/src/avro/schema.rs:454:13
    |
454 |             AvroSchema::Decimal { precision, scale } => Ok(Some(Type::Decimal { precision, scale })),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: use the tuple variant pattern syntax instead
    |
454 |             AvroSchema::Decimal(_) => Ok(Some(Type::Decimal { precision, scale })),
    |                                ~~~

error[E0599]: no variant named `Decimal` found for enum `datatypes::Type`
   --> crates/iceberg/src/avro/schema.rs:454:71
    |
454 |             AvroSchema::Decimal { precision, scale } => Ok(Some(Type::Decimal { precision, scale })),
    |                                                                       ^^^^^^^ variant not found in `datatypes::Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant `Decimal` not found here

error[E0599]: no variant or associated item named `Date` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:455:47
    |
455 |             AvroSchema::Date => Ok(Some(Type::Date)),
    |                                               ^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Date` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Time` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:456:53
    |
456 |             AvroSchema::TimeMicros => Ok(Some(Type::Time)),
    |                                                     ^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Time` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Timestamp` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:457:58
    |
457 |             AvroSchema::TimestampMicros => Ok(Some(Type::Timestamp)),
    |                                                          ^^^^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Timestamp` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Uuid` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:458:47
    |
458 |             AvroSchema::Uuid => Ok(Some(Type::Uuid)),
    |                                               ^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Uuid` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `error::Error: From<&str>` is not satisfied
   --> crates/iceberg/src/avro/schema.rs:459:22
    |
459 |             _ => Err(Error::from("Unsupported logical type")),
    |                      ^^^^^ the trait `From<&str>` is not implemented for `error::Error`
    |
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others

error[E0769]: tuple variant `AvroSchema::Fixed` written as struct variant
   --> crates/iceberg/src/avro/schema.rs:468:13
    |
468 |             AvroSchema::Fixed { size: _size } => Ok(Some(Type::Fixed)),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: use the tuple variant pattern syntax instead
    |
468 |             AvroSchema::Fixed(_size) => Ok(Some(Type::Fixed)),
    |                              ~~~~~~~

error[E0599]: no variant or associated item named `Boolean` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:462:50
    |
462 |             AvroSchema::Boolean => Ok(Some(Type::Boolean)),
    |                                                  ^^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Boolean` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Integer` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:463:46
    |
463 |             AvroSchema::Int => Ok(Some(Type::Integer)),
    |                                              ^^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Integer` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Long` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:464:47
    |
464 |             AvroSchema::Long => Ok(Some(Type::Long)),
    |                                               ^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Long` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Float` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:465:48
    |
465 |             AvroSchema::Float => Ok(Some(Type::Float)),
    |                                                ^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Float` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Double` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:466:49
    |
466 |             AvroSchema::Double => Ok(Some(Type::Double)),
    |                                                 ^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Double` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `String` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:467:68
    |
467 |             AvroSchema::String | AvroSchema::Enum => Ok(Some(Type::String)),
    |                                                                    ^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `String` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Fixed` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:468:64
    |
468 |             AvroSchema::Fixed { size: _size } => Ok(Some(Type::Fixed)),
    |                                                                ^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Fixed` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Binary` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:469:48
    |
469 |             AvroSchema::Bytes => Ok(Some(Type::Binary)),
    |                                                ^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Binary` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `error::Error: From<&str>` is not satisfied
   --> crates/iceberg/src/avro/schema.rs:471:22
    |
471 |             _ => Err(Error::from("Unsupported primitive type")),
    |                      ^^^^^ the trait `From<&str>` is not implemented for `error::Error`
    |
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others

Some errors have detailed explanations: E0277, E0532, E0599, E0769.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `iceberg` (lib) due to 19 previous errors


Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0423]: expected function, tuple struct or tuple variant, found struct `crate::Error`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:307:20
    |
307 |           return Err(crate::Error(crate::ErrorKind::RowsCannotMatch)); // values are all null and literal cannot contain null
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: crates/iceberg/src/error.rs:108:1
    |
108 | / pub struct Error {
109 | |     kind: ErrorKind,
110 | |     message: String,
111 | |
...   |
115 | |     backtrace: Backtrace,
116 | | }
    | |_- `crate::Error` defined here
    |
help: use struct literal syntax instead
    |
307 |         return Err(crate::Error { kind: val, message: val, context: val, source: val, backtrace: val }); // values are all null and literal cannot contain null
    |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: consider importing one of these items instead
    |
18  + use chrono::format::Item::Error;
    |
18  + use core::fmt::Error;
    |
18  + use log::Level::Error;
    |
18  + use log::LevelFilter::Error;
    |
      and 1 other candidate
help: if you import `Error`, refer to it directly
    |
307 -         return Err(crate::Error(crate::ErrorKind::RowsCannotMatch)); // values are all null and literal cannot contain null
307 +         return Err(Error(crate::ErrorKind::RowsCannotMatch)); // values are all null and literal cannot contain null
    |

error[E0423]: expected function, tuple struct or tuple variant, found struct `crate::Error`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:310:54
    |
310 |       let mut prefix_as_bytes = datum.as_bytes().ok_or(crate::Error(crate::ErrorKind::ConversionError))?.to_vec();
    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: crates/iceberg/src/error.rs:108:1
    |
108 | / pub struct Error {
109 | |     kind: ErrorKind,
110 | |     message: String,
111 | |
...   |
115 | |     backtrace: Backtrace,
116 | | }
    | |_- `crate::Error` defined here
    |
help: use struct literal syntax instead
    |
310 |     let mut prefix_as_bytes = datum.as_bytes().ok_or(crate::Error { kind: val, message: val, context: val, source: val, backtrace: val })?.to_vec();
    |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: consider importing one of these items instead
    |
18  + use chrono::format::Item::Error;
    |
18  + use core::fmt::Error;
    |
18  + use log::Level::Error;
    |
18  + use log::LevelFilter::Error;
    |
      and 1 other candidate
help: if you import `Error`, refer to it directly
    |
310 -     let mut prefix_as_bytes = datum.as_bytes().ok_or(crate::Error(crate::ErrorKind::ConversionError))?.to_vec();
310 +     let mut prefix_as_bytes = datum.as_bytes().ok_or(Error(crate::ErrorKind::ConversionError))?.to_vec();
    |

error[E0423]: expected function, tuple struct or tuple variant, found struct `crate::Error`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:312:49
    |
312 |       let lower = field_stats.lower_bound().ok_or(crate::Error(crate::ErrorKind::LowerBoundError))?;
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: crates/iceberg/src/error.rs:108:1
    |
108 | / pub struct Error {
109 | |     kind: ErrorKind,
110 | |     message: String,
111 | |
...   |
115 | |     backtrace: Backtrace,
116 | | }
    | |_- `crate::Error` defined here
    |
help: use struct literal syntax instead
    |
312 |     let lower = field_stats.lower_bound().ok_or(crate::Error { kind: val, message: val, context: val, source: val, backtrace: val })?;
    |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: consider importing one of these items instead
    |
18  + use chrono::format::Item::Error;
    |
18  + use core::fmt::Error;
    |
18  + use log::Level::Error;
    |
18  + use log::LevelFilter::Error;
    |
      and 1 other candidate
help: if you import `Error`, refer to it directly
    |
312 -     let lower = field_stats.lower_bound().ok_or(crate::Error(crate::ErrorKind::LowerBoundError))?;
312 +     let lower = field_stats.lower_bound().ok_or(Error(crate::ErrorKind::LowerBoundError))?;
    |

error[E0423]: expected function, tuple struct or tuple variant, found struct `crate::Error`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:317:20
    |
317 |           return Err(crate::Error(crate::ErrorKind::RowsCannotMatch));
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: crates/iceberg/src/error.rs:108:1
    |
108 | / pub struct Error {
109 | |     kind: ErrorKind,
110 | |     message: String,
111 | |
...   |
115 | |     backtrace: Backtrace,
116 | | }
    | |_- `crate::Error` defined here
    |
help: use struct literal syntax instead
    |
317 |         return Err(crate::Error { kind: val, message: val, context: val, source: val, backtrace: val });
    |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: consider importing one of these items instead
    |
18  + use chrono::format::Item::Error;
    |
18  + use core::fmt::Error;
    |
18  + use log::Level::Error;
    |
18  + use log::LevelFilter::Error;
    |
      and 1 other candidate
help: if you import `Error`, refer to it directly
    |
317 -         return Err(crate::Error(crate::ErrorKind::RowsCannotMatch));
317 +         return Err(Error(crate::ErrorKind::RowsCannotMatch));
    |

error[E0423]: expected function, tuple struct or tuple variant, found struct `crate::Error`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:320:49
    |
320 |       let upper = field_stats.upper_bound().ok_or(crate::Error(crate::ErrorKind::UpperBoundError))?;
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: crates/iceberg/src/error.rs:108:1
    |
108 | / pub struct Error {
109 | |     kind: ErrorKind,
110 | |     message: String,
111 | |
...   |
115 | |     backtrace: Backtrace,
116 | | }
    | |_- `crate::Error` defined here
    |
help: use struct literal syntax instead
    |
320 |     let upper = field_stats.upper_bound().ok_or(crate::Error { kind: val, message: val, context: val, source: val, backtrace: val })?;
    |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: consider importing one of these items instead
    |
18  + use chrono::format::Item::Error;
    |
18  + use core::fmt::Error;
    |
18  + use log::Level::Error;
    |
18  + use log::LevelFilter::Error;
    |
      and 1 other candidate
help: if you import `Error`, refer to it directly
    |
320 -     let upper = field_stats.upper_bound().ok_or(crate::Error(crate::ErrorKind::UpperBoundError))?;
320 +     let upper = field_stats.upper_bound().ok_or(Error(crate::ErrorKind::UpperBoundError))?;
    |

error[E0423]: expected function, tuple struct or tuple variant, found struct `crate::Error`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:325:20
    |
325 |           return Err(crate::Error(crate::ErrorKind::RowsCannotMatch));
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: crates/iceberg/src/error.rs:108:1
    |
108 | / pub struct Error {
109 | |     kind: ErrorKind,
110 | |     message: String,
111 | |
...   |
115 | |     backtrace: Backtrace,
116 | | }
    | |_- `crate::Error` defined here
    |
help: use struct literal syntax instead
    |
325 |         return Err(crate::Error { kind: val, message: val, context: val, source: val, backtrace: val });
    |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: consider importing one of these items instead
    |
18  + use chrono::format::Item::Error;
    |
18  + use core::fmt::Error;
    |
18  + use log::Level::Error;
    |
18  + use log::LevelFilter::Error;
    |
      and 1 other candidate
help: if you import `Error`, refer to it directly
    |
325 -         return Err(crate::Error(crate::ErrorKind::RowsCannotMatch));
325 +         return Err(Error(crate::ErrorKind::RowsCannotMatch));
    |

error[E0609]: no field `stats` on type `&mut InclusiveMetricsEvaluator<'_>`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:304:28
    |
304 |     let field_stats = self.stats.get(pos);
    |                            ^^^^^ unknown field
    |
    = note: available field is: `data_file`

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:307:51
    |
307 |         return Err(crate::Error(crate::ErrorKind::RowsCannotMatch)); // values are all null and literal cannot contain null
    |                                                   ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

error[E0599]: no method named `as_bytes` found for reference `&values::Datum` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:310:37
    |
310 |     let mut prefix_as_bytes = datum.as_bytes().ok_or(crate::Error(crate::ErrorKind::ConversionError))?.to_vec();
    |                                     ^^^^^^^^ method not found in `&Datum`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `as_bytes`, perhaps you need to implement one of them:
            candidate #1: `OsStrExt`
            candidate #2: `zerocopy::AsBytes`
            candidate #3: `AsArray`
            candidate #4: `AsBytes`

error[E0599]: no variant or associated item named `ConversionError` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:310:85
    |
310 |     let mut prefix_as_bytes = datum.as_bytes().ok_or(crate::Error(crate::ErrorKind::ConversionError))?.to_vec();
    |                                                                                     ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `ConversionError` not found for this enum

error[E0599]: no variant or associated item named `LowerBoundError` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:312:80
    |
312 |     let lower = field_stats.lower_bound().ok_or(crate::Error(crate::ErrorKind::LowerBoundError))?;
    |                                                                                ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `LowerBoundError` not found for this enum

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:317:51
    |
317 |         return Err(crate::Error(crate::ErrorKind::RowsCannotMatch));
    |                                                   ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

error[E0599]: no variant or associated item named `UpperBoundError` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:320:80
    |
320 |     let upper = field_stats.upper_bound().ok_or(crate::Error(crate::ErrorKind::UpperBoundError))?;
    |                                                                                ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `UpperBoundError` not found for this enum

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:325:51
    |
325 |         return Err(crate::Error(crate::ErrorKind::RowsCannotMatch));
    |                                                   ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

Some errors have detailed explanations: E0423, E0599, E0609.
For more information about an error, try `rustc --explain E0423`.
error: could not compile `iceberg` (lib) due to 14 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0599]: no method named `as_bytes` found for reference `&values::Datum` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:310:37
    |
310 |     let mut prefix_as_bytes = datum.as_bytes().ok_or(crate::Error(crate::ErrorKind::ConversionError))?.to_vec();
    |                                     ^^^^^^^^ method not found in `&Datum`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `as_bytes`, perhaps you need to implement one of them:
            candidate #1: `OsStrExt`
            candidate #2: `zerocopy::AsBytes`
            candidate #3: `AsArray`
            candidate #4: `AsBytes`
            candidate #5: `bstr::ext_slice::ByteSlice`

error: could not compile `iceberg` (lib test) due to 14 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0423]: expected function, tuple struct or tuple variant, found struct `crate::Error`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:307:20
    |
307 |           return Err(crate::Error(crate::ErrorKind::RowsCannotMatch)); // values are all null and literal cannot contain null
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: crates/iceberg/src/error.rs:108:1
    |
108 | / pub struct Error {
109 | |     kind: ErrorKind,
110 | |     message: String,
111 | |
...   |
115 | |     backtrace: Backtrace,
116 | | }
    | |_- `crate::Error` defined here
    |
help: use struct literal syntax instead
    |
307 |         return Err(crate::Error { kind: val, message: val, context: val, source: val, backtrace: val }); // values are all null and literal cannot contain null
    |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: consider importing one of these items instead
    |
18  + use chrono::format::Item::Error;
    |
18  + use core::fmt::Error;
    |
18  + use log::Level::Error;
    |
18  + use log::LevelFilter::Error;
    |
      and 1 other candidate
help: if you import `Error`, refer to it directly
    |
307 -         return Err(crate::Error(crate::ErrorKind::RowsCannotMatch)); // values are all null and literal cannot contain null
307 +         return Err(Error(crate::ErrorKind::RowsCannotMatch)); // values are all null and literal cannot contain null
    |

error[E0423]: expected function, tuple struct or tuple variant, found struct `crate::Error`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:310:54
    |
310 |       let mut prefix_as_bytes = datum.as_bytes().ok_or(crate::Error(crate::ErrorKind::ConversionError))?.to_vec();
    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: crates/iceberg/src/error.rs:108:1
    |
108 | / pub struct Error {
109 | |     kind: ErrorKind,
110 | |     message: String,
111 | |
...   |
115 | |     backtrace: Backtrace,
116 | | }
    | |_- `crate::Error` defined here
    |
help: use struct literal syntax instead
    |
310 |     let mut prefix_as_bytes = datum.as_bytes().ok_or(crate::Error { kind: val, message: val, context: val, source: val, backtrace: val })?.to_vec();
    |                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: consider importing one of these items instead
    |
18  + use chrono::format::Item::Error;
    |
18  + use core::fmt::Error;
    |
18  + use log::Level::Error;
    |
18  + use log::LevelFilter::Error;
    |
      and 1 other candidate
help: if you import `Error`, refer to it directly
    |
310 -     let mut prefix_as_bytes = datum.as_bytes().ok_or(crate::Error(crate::ErrorKind::ConversionError))?.to_vec();
310 +     let mut prefix_as_bytes = datum.as_bytes().ok_or(Error(crate::ErrorKind::ConversionError))?.to_vec();
    |

error[E0423]: expected function, tuple struct or tuple variant, found struct `crate::Error`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:312:49
    |
312 |       let lower = field_stats.lower_bound().ok_or(crate::Error(crate::ErrorKind::LowerBoundError))?;
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: crates/iceberg/src/error.rs:108:1
    |
108 | / pub struct Error {
109 | |     kind: ErrorKind,
110 | |     message: String,
111 | |
...   |
115 | |     backtrace: Backtrace,
116 | | }
    | |_- `crate::Error` defined here
    |
help: use struct literal syntax instead
    |
312 |     let lower = field_stats.lower_bound().ok_or(crate::Error { kind: val, message: val, context: val, source: val, backtrace: val })?;
    |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: consider importing one of these items instead
    |
18  + use chrono::format::Item::Error;
    |
18  + use core::fmt::Error;
    |
18  + use log::Level::Error;
    |
18  + use log::LevelFilter::Error;
    |
      and 1 other candidate
help: if you import `Error`, refer to it directly
    |
312 -     let lower = field_stats.lower_bound().ok_or(crate::Error(crate::ErrorKind::LowerBoundError))?;
312 +     let lower = field_stats.lower_bound().ok_or(Error(crate::ErrorKind::LowerBoundError))?;
    |

error[E0423]: expected function, tuple struct or tuple variant, found struct `crate::Error`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:317:20
    |
317 |           return Err(crate::Error(crate::ErrorKind::RowsCannotMatch));
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: crates/iceberg/src/error.rs:108:1
    |
108 | / pub struct Error {
109 | |     kind: ErrorKind,
110 | |     message: String,
111 | |
...   |
115 | |     backtrace: Backtrace,
116 | | }
    | |_- `crate::Error` defined here
    |
help: use struct literal syntax instead
    |
317 |         return Err(crate::Error { kind: val, message: val, context: val, source: val, backtrace: val });
    |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: consider importing one of these items instead
    |
18  + use chrono::format::Item::Error;
    |
18  + use core::fmt::Error;
    |
18  + use log::Level::Error;
    |
18  + use log::LevelFilter::Error;
    |
      and 1 other candidate
help: if you import `Error`, refer to it directly
    |
317 -         return Err(crate::Error(crate::ErrorKind::RowsCannotMatch));
317 +         return Err(Error(crate::ErrorKind::RowsCannotMatch));
    |

error[E0423]: expected function, tuple struct or tuple variant, found struct `crate::Error`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:320:49
    |
320 |       let upper = field_stats.upper_bound().ok_or(crate::Error(crate::ErrorKind::UpperBoundError))?;
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: crates/iceberg/src/error.rs:108:1
    |
108 | / pub struct Error {
109 | |     kind: ErrorKind,
110 | |     message: String,
111 | |
...   |
115 | |     backtrace: Backtrace,
116 | | }
    | |_- `crate::Error` defined here
    |
help: use struct literal syntax instead
    |
320 |     let upper = field_stats.upper_bound().ok_or(crate::Error { kind: val, message: val, context: val, source: val, backtrace: val })?;
    |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: consider importing one of these items instead
    |
18  + use chrono::format::Item::Error;
    |
18  + use core::fmt::Error;
    |
18  + use log::Level::Error;
    |
18  + use log::LevelFilter::Error;
    |
      and 1 other candidate
help: if you import `Error`, refer to it directly
    |
320 -     let upper = field_stats.upper_bound().ok_or(crate::Error(crate::ErrorKind::UpperBoundError))?;
320 +     let upper = field_stats.upper_bound().ok_or(Error(crate::ErrorKind::UpperBoundError))?;
    |

error[E0423]: expected function, tuple struct or tuple variant, found struct `crate::Error`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:325:20
    |
325 |           return Err(crate::Error(crate::ErrorKind::RowsCannotMatch));
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: crates/iceberg/src/error.rs:108:1
    |
108 | / pub struct Error {
109 | |     kind: ErrorKind,
110 | |     message: String,
111 | |
...   |
115 | |     backtrace: Backtrace,
116 | | }
    | |_- `crate::Error` defined here
    |
help: use struct literal syntax instead
    |
325 |         return Err(crate::Error { kind: val, message: val, context: val, source: val, backtrace: val });
    |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: consider importing one of these items instead
    |
18  + use chrono::format::Item::Error;
    |
18  + use core::fmt::Error;
    |
18  + use log::Level::Error;
    |
18  + use log::LevelFilter::Error;
    |
      and 1 other candidate
help: if you import `Error`, refer to it directly
    |
325 -         return Err(crate::Error(crate::ErrorKind::RowsCannotMatch));
325 +         return Err(Error(crate::ErrorKind::RowsCannotMatch));
    |

error[E0609]: no field `stats` on type `&mut InclusiveMetricsEvaluator<'_>`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:304:28
    |
304 |     let field_stats = self.stats.get(pos);
    |                            ^^^^^ unknown field
    |
    = note: available field is: `data_file`

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:307:51
    |
307 |         return Err(crate::Error(crate::ErrorKind::RowsCannotMatch)); // values are all null and literal cannot contain null
    |                                                   ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

error[E0599]: no method named `as_bytes` found for reference `&values::Datum` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:310:37
    |
310 |     let mut prefix_as_bytes = datum.as_bytes().ok_or(crate::Error(crate::ErrorKind::ConversionError))?.to_vec();
    |                                     ^^^^^^^^ method not found in `&Datum`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `as_bytes`, perhaps you need to implement one of them:
            candidate #1: `OsStrExt`
            candidate #2: `zerocopy::AsBytes`
            candidate #3: `AsArray`
            candidate #4: `AsBytes`

error[E0599]: no variant or associated item named `ConversionError` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:310:85
    |
310 |     let mut prefix_as_bytes = datum.as_bytes().ok_or(crate::Error(crate::ErrorKind::ConversionError))?.to_vec();
    |                                                                                     ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `ConversionError` not found for this enum

error[E0599]: no variant or associated item named `LowerBoundError` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:312:80
    |
312 |     let lower = field_stats.lower_bound().ok_or(crate::Error(crate::ErrorKind::LowerBoundError))?;
    |                                                                                ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `LowerBoundError` not found for this enum

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:317:51
    |
317 |         return Err(crate::Error(crate::ErrorKind::RowsCannotMatch));
    |                                                   ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

error[E0599]: no variant or associated item named `UpperBoundError` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:320:80
    |
320 |     let upper = field_stats.upper_bound().ok_or(crate::Error(crate::ErrorKind::UpperBoundError))?;
    |                                                                                ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `UpperBoundError` not found for this enum

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:325:51
    |
325 |         return Err(crate::Error(crate::ErrorKind::RowsCannotMatch));
    |                                                   ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

Some errors have detailed explanations: E0423, E0599, E0609.
For more information about an error, try `rustc --explain E0423`.
error: could not compile `iceberg` (lib) due to 14 previous errors


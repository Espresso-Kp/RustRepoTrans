Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/io.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0252]: the name `Error` is defined multiple times
  --> crates/iceberg/src/io.rs:58:28
   |
52 | use std::io::Error;
   |     -------------- previous import of the type `Error` here
...
58 | use crate::{error::Result, Error, ErrorKind};
   |                            ^^^^^ `Error` reimported here
   |
   = note: `Error` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
58 | use crate::{error::Result, Error as OtherError, ErrorKind};
   |                            ~~~~~~~~~~~~~~~~~~~

warning: unused import: `Error`
  --> crates/iceberg/src/io.rs:58:28
   |
58 | use crate::{error::Result, Error, ErrorKind};
   |                            ^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/io.rs:237:37
    |
237 | async fn read(&mut self, n: u64) -> Result<Bytes, Error> {
    |                                     ^^^^^^        ----- help: remove this generic argument
    |                                     |
    |                                     expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0053]: method `read` has an incompatible type for trait
   --> crates/iceberg/src/io.rs:237:15
    |
237 | async fn read(&mut self, n: u64) -> Result<Bytes, Error> {
    |               ^^^^^^^^^
    |               |
    |               types differ in mutability
    |               help: change the self-receiver type to match the trait: `&self`
    |
note: type in trait
   --> crates/iceberg/src/io.rs:230:19
    |
230 |     async fn read(&self, range: Range<u64>) -> Result<Bytes>;
    |                   ^^^^^
    = note: expected signature `fn(&'life0 opendal::Reader, std::ops::Range<u64>) -> Pin<_>`
               found signature `fn(&'life0 mut opendal::Reader, u64) -> Pin<_>`

error[E0277]: the trait bound `std::io::Error: From<url::ParseError>` is not satisfied
   --> crates/iceberg/src/io.rs:158:19
    |
158 |           let url = Url::parse(path.as_ref())
    |  ___________________^
159 | |             .map_err(Error::from)
    | |_________________________________^ the trait `From<url::ParseError>` is not implemented for `std::io::Error`
    |
    = help: the following other types implement trait `From<T>`:
              <std::io::Error as From<getrandom::error::Error>>
              <std::io::Error as From<rand_core::error::Error>>
              <std::io::Error as From<walkdir::error::Error>>
              <std::io::Error as From<serde_json::Error>>
              <std::io::Error as From<snap::error::Error>>
              <std::io::Error as From<lz4_flex::frame::Error>>
              <std::io::Error as From<ordered_float::FloatIsNan>>
              <std::io::Error as From<flate2::mem::DecompressError>>
            and 13 others

error[E0277]: the trait bound `std::io::Error: From<url::ParseError>` is not satisfied
   --> crates/iceberg/src/io.rs:159:22
    |
159 |             .map_err(Error::from)
    |                      ^^^^^ the trait `From<url::ParseError>` is not implemented for `std::io::Error`
    |
    = help: the following other types implement trait `From<T>`:
              <std::io::Error as From<getrandom::error::Error>>
              <std::io::Error as From<rand_core::error::Error>>
              <std::io::Error as From<walkdir::error::Error>>
              <std::io::Error as From<serde_json::Error>>
              <std::io::Error as From<snap::error::Error>>
              <std::io::Error as From<lz4_flex::frame::Error>>
              <std::io::Error as From<ordered_float::FloatIsNan>>
              <std::io::Error as From<flate2::mem::DecompressError>>
            and 13 others

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:163:25
    |
162 |                     Error::new(
    |                     ---------- arguments to this function are incorrect
163 |                         ErrorKind::DataInvalid,
    |                         ^^^^^^^^^^^^^^^^^^^^^^ expected `std::io::ErrorKind`, found `error::ErrorKind`
    |
    = note: `error::ErrorKind` and `std::io::ErrorKind` have similar names, but are actually distinct types
note: `error::ErrorKind` is defined in the current crate
   --> crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ^^^^^^^^^^^^^^^^^^
note: `std::io::ErrorKind` is defined in crate `std`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:179:1
note: associated function defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:515:12

error[E0599]: no method named `with_context` found for struct `std::io::Error` in the current scope
   --> crates/iceberg/src/io.rs:166:22
    |
162 | /                     Error::new(
163 | |                         ErrorKind::DataInvalid,
164 | |                         "Input is neither a valid url nor path",
165 | |                     )
166 | |                     .with_context("input", path.as_ref().to_string())
    | |                     -^^^^^^^^^^^^ method not found in `Error`
    | |_____________________|
    | 

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:239:20
    |
239 |           return Err(std::io::Error::new(
    |  ________________---_^
    | |                |
    | |                arguments to this enum variant are incorrect
240 | |             std::io::ErrorKind::InvalidInput,
241 | |             format!("Requested {} bytes to read, expected positive integer.", n),
242 | |         ));
    | |_________^ expected `error::Error`, found `std::io::Error`
    |
    = note: `std::io::Error` and `error::Error` have similar names, but are actually distinct types
note: `std::io::Error` is defined in crate `std`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:67:1
note: `error::Error` is defined in the current crate
   --> crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `std::io::Error` due to the type of the argument passed
   --> crates/iceberg/src/io.rs:239:16
    |
239 |            return Err(std::io::Error::new(
    |  _________________^___-
    | | ________________|
    | ||
240 | ||             std::io::ErrorKind::InvalidInput,
241 | ||             format!("Requested {} bytes to read, expected positive integer.", n),
242 | ||         ));
    | ||_________-^
    | |__________|
    |            this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `std::io::Error` into `error::Error`
    |
242 |         ).into());
    |          +++++++

error[E0599]: no function or associated item named `with_capacity` found for struct `bytes::Bytes` in the current scope
   --> crates/iceberg/src/io.rs:248:33
    |
248 |         let mut buffer = Bytes::with_capacity(n_remaining as usize);
    |                                 ^^^^^^^^^^^^^ function or associated item not found in `Bytes`
    |
note: if you're trying to build a new `bytes::Bytes` consider using one of the following associated functions:
      bytes::Bytes::new
      bytes::Bytes::from_static
      bytes::Bytes::copy_from_slice
      bytes::Bytes::with_vtable
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.6.1/src/bytes.rs:136:5
    |
136 |       pub const fn new() -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
164 |       pub const fn from_static(bytes: &'static [u8]) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
236 |       pub fn copy_from_slice(data: &[u8]) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
510 | /     pub(crate) unsafe fn with_vtable(
511 | |         ptr: *const u8,
512 | |         len: usize,
513 | |         data: AtomicPtr<()>,
514 | |         vtable: &'static Vtable,
515 | |     ) -> Bytes {
    | |______________^

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:256:24
    |
256 |               return Err(std::io::Error::new(
    |  ____________________---_^
    | |                    |
    | |                    arguments to this enum variant are incorrect
257 | |                 std::io::ErrorKind::UnexpectedEof,
258 | |                 format!("EOF: read {} bytes", read_len)
259 | |             ));
    | |_____________^ expected `error::Error`, found `std::io::Error`
    |
    = note: `std::io::Error` and `error::Error` have similar names, but are actually distinct types
note: `std::io::Error` is defined in crate `std`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:67:1
note: `error::Error` is defined in the current crate
   --> crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `std::io::Error` due to the type of the argument passed
   --> crates/iceberg/src/io.rs:256:20
    |
256 |                return Err(std::io::Error::new(
    |  _____________________^___-
    | | ____________________|
    | ||
257 | ||                 std::io::ErrorKind::UnexpectedEof,
258 | ||                 format!("EOF: read {} bytes", read_len)
259 | ||             ));
    | ||_____________-^
    | |______________|
    |                this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `std::io::Error` into `error::Error`
    |
259 |             ).into());
    |              +++++++

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:454:25
    |
453 |                     Error::new(
    |                     ---------- arguments to this function are incorrect
454 |                         ErrorKind::DataInvalid,
    |                         ^^^^^^^^^^^^^^^^^^^^^^ expected `std::io::ErrorKind`, found `error::ErrorKind`
    |
    = note: `error::ErrorKind` and `std::io::ErrorKind` have similar names, but are actually distinct types
note: `error::ErrorKind` is defined in the current crate
   --> crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ^^^^^^^^^^^^^^^^^^
note: `std::io::ErrorKind` is defined in crate `std`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:179:1
note: associated function defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:515:12

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:466:25
    |
465 |                     Err(Error::new(
    |                         ---------- arguments to this function are incorrect
466 |                         ErrorKind::DataInvalid,
    |                         ^^^^^^^^^^^^^^^^^^^^^^ expected `std::io::ErrorKind`, found `error::ErrorKind`
    |
    = note: `error::ErrorKind` and `std::io::ErrorKind` have similar names, but are actually distinct types
note: `error::ErrorKind` is defined in the current crate
   --> crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ^^^^^^^^^^^^^^^^^^
note: `std::io::ErrorKind` is defined in crate `std`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:179:1
note: associated function defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:515:12

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:465:25
    |
465 |                       Err(Error::new(
    |  _____________________---_^
    | |                     |
    | |                     arguments to this enum variant are incorrect
466 | |                         ErrorKind::DataInvalid,
467 | |                         format!("Invalid s3 url: {}, should start with {}", path, prefix),
468 | |                     ))
    | |_____________________^ expected `error::Error`, found `std::io::Error`
    |
    = note: `std::io::Error` and `error::Error` have similar names, but are actually distinct types
note: `std::io::Error` is defined in crate `std`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:67:1
note: `error::Error` is defined in the current crate
   --> crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `std::io::Error` due to the type of the argument passed
   --> crates/iceberg/src/io.rs:465:21
    |
465 |                        Err(Error::new(
    |  ______________________^___-
    | | _____________________|
    | ||
466 | ||                         ErrorKind::DataInvalid,
467 | ||                         format!("Invalid s3 url: {}, should start with {}", path, prefix),
468 | ||                     ))
    | ||_____________________-^
    | |______________________|
    |                        this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `std::io::Error` into `error::Error`
    |
468 |                     ).into())
    |                      +++++++

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:507:17
    |
506 |             _ => Err(Error::new(
    |                      ---------- arguments to this function are incorrect
507 |                 ErrorKind::FeatureUnsupported,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `std::io::ErrorKind`, found `error::ErrorKind`
    |
    = note: `error::ErrorKind` and `std::io::ErrorKind` have similar names, but are actually distinct types
note: `error::ErrorKind` is defined in the current crate
   --> crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ^^^^^^^^^^^^^^^^^^
note: `std::io::ErrorKind` is defined in crate `std`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:179:1
note: associated function defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:515:12

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:506:22
    |
506 |               _ => Err(Error::new(
    |  __________________---_^
    | |                  |
    | |                  arguments to this enum variant are incorrect
507 | |                 ErrorKind::FeatureUnsupported,
508 | |                 format!("Constructing file io from scheme: {scheme} not supported now",),
509 | |             )),
    | |_____________^ expected `error::Error`, found `std::io::Error`
    |
    = note: `std::io::Error` and `error::Error` have similar names, but are actually distinct types
note: `std::io::Error` is defined in crate `std`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:67:1
note: `error::Error` is defined in the current crate
   --> crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `std::io::Error` due to the type of the argument passed
   --> crates/iceberg/src/io.rs:506:18
    |
506 |                _ => Err(Error::new(
    |  ___________________^___-
    | | __________________|
    | ||
507 | ||                 ErrorKind::FeatureUnsupported,
508 | ||                 format!("Constructing file io from scheme: {scheme} not supported now",),
509 | ||             )),
    | ||_____________-^
    | |______________|
    |                this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `std::io::Error` into `error::Error`
    |
509 |             ).into()),
    |              +++++++

Some errors have detailed explanations: E0053, E0107, E0252, E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0053`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 15 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
error[E0277]: the trait bound `std::io::Error: From<url::ParseError>` is not satisfied
   --> crates/iceberg/src/io.rs:158:19
    |
158 |           let url = Url::parse(path.as_ref())
    |  ___________________^
159 | |             .map_err(Error::from)
    | |_________________________________^ the trait `From<url::ParseError>` is not implemented for `std::io::Error`
    |
    = help: the following other types implement trait `From<T>`:
              <std::io::Error as From<ucd_trie::owned::Error>>
              <std::io::Error as From<globwalk::GlobError>>
              <std::io::Error as From<getrandom::error::Error>>
              <std::io::Error as From<rand_core::error::Error>>
              <std::io::Error as From<PersistError<F>>>
              <std::io::Error as From<walkdir::error::Error>>
              <std::io::Error as From<serde_json::Error>>
              <std::io::Error as From<snap::error::Error>>
            and 18 others

error[E0277]: the trait bound `std::io::Error: From<url::ParseError>` is not satisfied
   --> crates/iceberg/src/io.rs:159:22
    |
159 |             .map_err(Error::from)
    |                      ^^^^^ the trait `From<url::ParseError>` is not implemented for `std::io::Error`
    |
    = help: the following other types implement trait `From<T>`:
              <std::io::Error as From<ucd_trie::owned::Error>>
              <std::io::Error as From<globwalk::GlobError>>
              <std::io::Error as From<getrandom::error::Error>>
              <std::io::Error as From<rand_core::error::Error>>
              <std::io::Error as From<PersistError<F>>>
              <std::io::Error as From<walkdir::error::Error>>
              <std::io::Error as From<serde_json::Error>>
              <std::io::Error as From<snap::error::Error>>
            and 18 others

warning: `iceberg` (lib test) generated 1 warning (1 duplicate)
error: could not compile `iceberg` (lib test) due to 15 previous errors; 1 warning emitted

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0252]: the name `Error` is defined multiple times
  --> crates/iceberg/src/io.rs:58:28
   |
52 | use std::io::Error;
   |     -------------- previous import of the type `Error` here
...
58 | use crate::{error::Result, Error, ErrorKind};
   |                            ^^^^^ `Error` reimported here
   |
   = note: `Error` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
58 | use crate::{error::Result, Error as OtherError, ErrorKind};
   |                            ~~~~~~~~~~~~~~~~~~~

warning: unused import: `Error`
  --> crates/iceberg/src/io.rs:58:28
   |
58 | use crate::{error::Result, Error, ErrorKind};
   |                            ^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/io.rs:237:37
    |
237 | async fn read(&mut self, n: u64) -> Result<Bytes, Error> {
    |                                     ^^^^^^        ----- help: remove this generic argument
    |                                     |
    |                                     expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0053]: method `read` has an incompatible type for trait
   --> crates/iceberg/src/io.rs:237:15
    |
237 | async fn read(&mut self, n: u64) -> Result<Bytes, Error> {
    |               ^^^^^^^^^
    |               |
    |               types differ in mutability
    |               help: change the self-receiver type to match the trait: `&self`
    |
note: type in trait
   --> crates/iceberg/src/io.rs:230:19
    |
230 |     async fn read(&self, range: Range<u64>) -> Result<Bytes>;
    |                   ^^^^^
    = note: expected signature `fn(&'life0 opendal::Reader, std::ops::Range<u64>) -> Pin<_>`
               found signature `fn(&'life0 mut opendal::Reader, u64) -> Pin<_>`

error[E0277]: the trait bound `std::io::Error: From<url::ParseError>` is not satisfied
   --> crates/iceberg/src/io.rs:158:19
    |
158 |           let url = Url::parse(path.as_ref())
    |  ___________________^
159 | |             .map_err(Error::from)
    | |_________________________________^ the trait `From<url::ParseError>` is not implemented for `std::io::Error`
    |
    = help: the following other types implement trait `From<T>`:
              <std::io::Error as From<getrandom::error::Error>>
              <std::io::Error as From<rand_core::error::Error>>
              <std::io::Error as From<walkdir::error::Error>>
              <std::io::Error as From<serde_json::Error>>
              <std::io::Error as From<snap::error::Error>>
              <std::io::Error as From<lz4_flex::frame::Error>>
              <std::io::Error as From<ordered_float::FloatIsNan>>
              <std::io::Error as From<flate2::mem::DecompressError>>
            and 13 others

error[E0277]: the trait bound `std::io::Error: From<url::ParseError>` is not satisfied
   --> crates/iceberg/src/io.rs:159:22
    |
159 |             .map_err(Error::from)
    |                      ^^^^^ the trait `From<url::ParseError>` is not implemented for `std::io::Error`
    |
    = help: the following other types implement trait `From<T>`:
              <std::io::Error as From<getrandom::error::Error>>
              <std::io::Error as From<rand_core::error::Error>>
              <std::io::Error as From<walkdir::error::Error>>
              <std::io::Error as From<serde_json::Error>>
              <std::io::Error as From<snap::error::Error>>
              <std::io::Error as From<lz4_flex::frame::Error>>
              <std::io::Error as From<ordered_float::FloatIsNan>>
              <std::io::Error as From<flate2::mem::DecompressError>>
            and 13 others

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:163:25
    |
162 |                     Error::new(
    |                     ---------- arguments to this function are incorrect
163 |                         ErrorKind::DataInvalid,
    |                         ^^^^^^^^^^^^^^^^^^^^^^ expected `std::io::ErrorKind`, found `error::ErrorKind`
    |
    = note: `error::ErrorKind` and `std::io::ErrorKind` have similar names, but are actually distinct types
note: `error::ErrorKind` is defined in the current crate
   --> crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ^^^^^^^^^^^^^^^^^^
note: `std::io::ErrorKind` is defined in crate `std`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:179:1
note: associated function defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:515:12

error[E0599]: no method named `with_context` found for struct `std::io::Error` in the current scope
   --> crates/iceberg/src/io.rs:166:22
    |
162 | /                     Error::new(
163 | |                         ErrorKind::DataInvalid,
164 | |                         "Input is neither a valid url nor path",
165 | |                     )
166 | |                     .with_context("input", path.as_ref().to_string())
    | |                     -^^^^^^^^^^^^ method not found in `Error`
    | |_____________________|
    | 

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:239:20
    |
239 |           return Err(std::io::Error::new(
    |  ________________---_^
    | |                |
    | |                arguments to this enum variant are incorrect
240 | |             std::io::ErrorKind::InvalidInput,
241 | |             format!("Requested {} bytes to read, expected positive integer.", n),
242 | |         ));
    | |_________^ expected `error::Error`, found `std::io::Error`
    |
    = note: `std::io::Error` and `error::Error` have similar names, but are actually distinct types
note: `std::io::Error` is defined in crate `std`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:67:1
note: `error::Error` is defined in the current crate
   --> crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `std::io::Error` due to the type of the argument passed
   --> crates/iceberg/src/io.rs:239:16
    |
239 |            return Err(std::io::Error::new(
    |  _________________^___-
    | | ________________|
    | ||
240 | ||             std::io::ErrorKind::InvalidInput,
241 | ||             format!("Requested {} bytes to read, expected positive integer.", n),
242 | ||         ));
    | ||_________-^
    | |__________|
    |            this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `std::io::Error` into `error::Error`
    |
242 |         ).into());
    |          +++++++

error[E0599]: no function or associated item named `with_capacity` found for struct `bytes::Bytes` in the current scope
   --> crates/iceberg/src/io.rs:248:33
    |
248 |         let mut buffer = Bytes::with_capacity(n_remaining as usize);
    |                                 ^^^^^^^^^^^^^ function or associated item not found in `Bytes`
    |
note: if you're trying to build a new `bytes::Bytes` consider using one of the following associated functions:
      bytes::Bytes::new
      bytes::Bytes::from_static
      bytes::Bytes::copy_from_slice
      bytes::Bytes::with_vtable
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.6.1/src/bytes.rs:136:5
    |
136 |       pub const fn new() -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
164 |       pub const fn from_static(bytes: &'static [u8]) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
236 |       pub fn copy_from_slice(data: &[u8]) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
510 | /     pub(crate) unsafe fn with_vtable(
511 | |         ptr: *const u8,
512 | |         len: usize,
513 | |         data: AtomicPtr<()>,
514 | |         vtable: &'static Vtable,
515 | |     ) -> Bytes {
    | |______________^

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:256:24
    |
256 |               return Err(std::io::Error::new(
    |  ____________________---_^
    | |                    |
    | |                    arguments to this enum variant are incorrect
257 | |                 std::io::ErrorKind::UnexpectedEof,
258 | |                 format!("EOF: read {} bytes", read_len)
259 | |             ));
    | |_____________^ expected `error::Error`, found `std::io::Error`
    |
    = note: `std::io::Error` and `error::Error` have similar names, but are actually distinct types
note: `std::io::Error` is defined in crate `std`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:67:1
note: `error::Error` is defined in the current crate
   --> crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `std::io::Error` due to the type of the argument passed
   --> crates/iceberg/src/io.rs:256:20
    |
256 |                return Err(std::io::Error::new(
    |  _____________________^___-
    | | ____________________|
    | ||
257 | ||                 std::io::ErrorKind::UnexpectedEof,
258 | ||                 format!("EOF: read {} bytes", read_len)
259 | ||             ));
    | ||_____________-^
    | |______________|
    |                this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `std::io::Error` into `error::Error`
    |
259 |             ).into());
    |              +++++++

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:454:25
    |
453 |                     Error::new(
    |                     ---------- arguments to this function are incorrect
454 |                         ErrorKind::DataInvalid,
    |                         ^^^^^^^^^^^^^^^^^^^^^^ expected `std::io::ErrorKind`, found `error::ErrorKind`
    |
    = note: `error::ErrorKind` and `std::io::ErrorKind` have similar names, but are actually distinct types
note: `error::ErrorKind` is defined in the current crate
   --> crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ^^^^^^^^^^^^^^^^^^
note: `std::io::ErrorKind` is defined in crate `std`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:179:1
note: associated function defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:515:12

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:466:25
    |
465 |                     Err(Error::new(
    |                         ---------- arguments to this function are incorrect
466 |                         ErrorKind::DataInvalid,
    |                         ^^^^^^^^^^^^^^^^^^^^^^ expected `std::io::ErrorKind`, found `error::ErrorKind`
    |
    = note: `error::ErrorKind` and `std::io::ErrorKind` have similar names, but are actually distinct types
note: `error::ErrorKind` is defined in the current crate
   --> crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ^^^^^^^^^^^^^^^^^^
note: `std::io::ErrorKind` is defined in crate `std`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:179:1
note: associated function defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:515:12

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:465:25
    |
465 |                       Err(Error::new(
    |  _____________________---_^
    | |                     |
    | |                     arguments to this enum variant are incorrect
466 | |                         ErrorKind::DataInvalid,
467 | |                         format!("Invalid s3 url: {}, should start with {}", path, prefix),
468 | |                     ))
    | |_____________________^ expected `error::Error`, found `std::io::Error`
    |
    = note: `std::io::Error` and `error::Error` have similar names, but are actually distinct types
note: `std::io::Error` is defined in crate `std`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:67:1
note: `error::Error` is defined in the current crate
   --> crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `std::io::Error` due to the type of the argument passed
   --> crates/iceberg/src/io.rs:465:21
    |
465 |                        Err(Error::new(
    |  ______________________^___-
    | | _____________________|
    | ||
466 | ||                         ErrorKind::DataInvalid,
467 | ||                         format!("Invalid s3 url: {}, should start with {}", path, prefix),
468 | ||                     ))
    | ||_____________________-^
    | |______________________|
    |                        this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `std::io::Error` into `error::Error`
    |
468 |                     ).into())
    |                      +++++++

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:507:17
    |
506 |             _ => Err(Error::new(
    |                      ---------- arguments to this function are incorrect
507 |                 ErrorKind::FeatureUnsupported,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `std::io::ErrorKind`, found `error::ErrorKind`
    |
    = note: `error::ErrorKind` and `std::io::ErrorKind` have similar names, but are actually distinct types
note: `error::ErrorKind` is defined in the current crate
   --> crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ^^^^^^^^^^^^^^^^^^
note: `std::io::ErrorKind` is defined in crate `std`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:179:1
note: associated function defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:515:12

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:506:22
    |
506 |               _ => Err(Error::new(
    |  __________________---_^
    | |                  |
    | |                  arguments to this enum variant are incorrect
507 | |                 ErrorKind::FeatureUnsupported,
508 | |                 format!("Constructing file io from scheme: {scheme} not supported now",),
509 | |             )),
    | |_____________^ expected `error::Error`, found `std::io::Error`
    |
    = note: `std::io::Error` and `error::Error` have similar names, but are actually distinct types
note: `std::io::Error` is defined in crate `std`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/io/error.rs:67:1
note: `error::Error` is defined in the current crate
   --> crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `std::io::Error` due to the type of the argument passed
   --> crates/iceberg/src/io.rs:506:18
    |
506 |                _ => Err(Error::new(
    |  ___________________^___-
    | | __________________|
    | ||
507 | ||                 ErrorKind::FeatureUnsupported,
508 | ||                 format!("Constructing file io from scheme: {scheme} not supported now",),
509 | ||             )),
    | ||_____________-^
    | |______________|
    |                this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `std::io::Error` into `error::Error`
    |
509 |             ).into()),
    |              +++++++

Some errors have detailed explanations: E0053, E0107, E0252, E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0053`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 15 previous errors; 1 warning emitted


Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/avro/schema.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0252]: the name `Error` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:35:32
   |
25 | use crate::Error;
   |     ------------ previous import of the type `Error` here
...
35 | use crate::{ensure_data_valid, Error, ErrorKind, Result};
   |                                ^^^^^--
   |                                |
   |                                `Error` reimported here
   |                                help: remove unnecessary import
   |
   = note: `Error` must be defined only once in the type namespace of this module

error[E0252]: the name `Itertools` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:41:25
   |
27 | use itertools::Itertools;
   |     -------------------- previous import of the trait `Itertools` here
...
41 | use itertools::{Either, Itertools};
   |                         ^^^^^^^^^ `Itertools` reimported here
   |
   = note: `Itertools` must be defined only once in the type namespace of this module

error[E0252]: the name `Value` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:42:26
   |
24 | use apache_avro::{types::Value, Schema};
   |                   ------------ previous import of the type `Value` here
...
42 | use serde_json::{Number, Value};
   |                          ^^^^^ `Value` reimported here
   |
   = note: `Value` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
42 | use serde_json::{Number, Value as OtherValue};
   |                          ~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `SchemaVisitor` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:33:5
   |
22 |     SchemaVisitor, StructType, Type,
   |     ------------- previous import of the trait `SchemaVisitor` here
...
33 |     SchemaVisitor, StructType, Type,
   |     ^^^^^^^^^^^^^--
   |     |
   |     `SchemaVisitor` reimported here
   |     help: remove unnecessary import
   |
   = note: `SchemaVisitor` must be defined only once in the type namespace of this module

error[E0252]: the name `ListType` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:32:19
   |
21 |     ListType, MapType, NestedField, NestedFieldRefType,
   |     -------- previous import of the type `ListType` here
...
32 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
   |                   ^^^^^^^^--
   |                   |
   |                   `ListType` reimported here
   |                   help: remove unnecessary import
   |
   = note: `ListType` must be defined only once in the type namespace of this module

error[E0252]: the name `MapType` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:32:29
   |
21 |     ListType, MapType, NestedField, NestedFieldRefType,
   |               ------- previous import of the type `MapType` here
...
32 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
   |                             ^^^^^^^--
   |                             |
   |                             `MapType` reimported here
   |                             help: remove unnecessary import
   |
   = note: `MapType` must be defined only once in the type namespace of this module

error[E0252]: the name `NestedField` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:32:38
   |
21 |     ListType, MapType, NestedField, NestedFieldRefType,
   |                        ----------- previous import of the type `NestedField` here
...
32 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
   |                                      ^^^^^^^^^^^--
   |                                      |
   |                                      `NestedField` reimported here
   |                                      help: remove unnecessary import
   |
   = note: `NestedField` must be defined only once in the type namespace of this module

error[E0252]: the name `Schema` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:32:82
   |
24 | use apache_avro::{types::Value, Schema};
   |                                 ------ previous import of the type `Schema` here
...
32 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
   |                                                                                  ^^^^^^ `Schema` reimported here
   |
   = note: `Schema` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
32 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema as OtherSchema,
   |                                                                                  ~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `StructType` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:33:20
   |
22 |     SchemaVisitor, StructType, Type,
   |                    ---------- previous import of the type `StructType` here
...
33 |     SchemaVisitor, StructType, Type,
   |                    ^^^^^^^^^^--
   |                    |
   |                    `StructType` reimported here
   |                    help: remove unnecessary import
   |
   = note: `StructType` must be defined only once in the type namespace of this module

error[E0252]: the name `Type` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:33:32
   |
22 |     SchemaVisitor, StructType, Type,
   |                                ---- previous import of the type `Type` here
...
33 |     SchemaVisitor, StructType, Type,
   |                                ^^^^-
   |                                |
   |                                `Type` reimported here
   |                                help: remove unnecessary import
   |
   = note: `Type` must be defined only once in the type namespace of this module

error[E0432]: unresolved import `crate::spec::NestedFieldRefType`
  --> crates/iceberg/src/avro/schema.rs:21:37
   |
21 |     ListType, MapType, NestedField, NestedFieldRefType,
   |                                     ^^^^^^^^^^^^^^^^^^
   |                                     |
   |                                     no `NestedFieldRefType` in `spec`
   |                                     help: a similar name exists in the module: `NestedFieldRef`

error[E0432]: unresolved import `crate::spec::Type::Optional`
  --> crates/iceberg/src/avro/schema.rs:26:5
   |
26 | use crate::spec::Type::Optional;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `Optional` in `spec::datatypes::Type`

warning: unused imports: `ListType`, `MapType`, `NestedField`, `SchemaVisitor`, `Schema`, `StructType`, `Type`
  --> crates/iceberg/src/avro/schema.rs:32:19
   |
32 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
   |                   ^^^^^^^^  ^^^^^^^  ^^^^^^^^^^^                                 ^^^^^^
33 |     SchemaVisitor, StructType, Type,
   |     ^^^^^^^^^^^^^  ^^^^^^^^^^  ^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Error`
  --> crates/iceberg/src/avro/schema.rs:35:32
   |
35 | use crate::{ensure_data_valid, Error, ErrorKind, Result};
   |                                ^^^^^

warning: unused import: `Itertools`
  --> crates/iceberg/src/avro/schema.rs:41:25
   |
41 | use itertools::{Either, Itertools};
   |                         ^^^^^^^^^

warning: unused import: `Value`
  --> crates/iceberg/src/avro/schema.rs:42:26
   |
42 | use serde_json::{Number, Value};
   |                          ^^^^^

error[E0053]: method `schema` has an incompatible type for trait
   --> crates/iceberg/src/avro/schema.rs:60:35
    |
60  |     fn schema(&mut self, _schema: &Schema, value: AvroSchemaOrField) -> Result<AvroSchemaOrField> {
    |                                   ^^^^^^^
    |                                   |
    |                                   expected `spec::schema::Schema`, found `apache_avro::Schema`
    |                                   help: change the parameter type to match the trait: `&spec::schema::Schema`
    |
note: type in trait
   --> crates/iceberg/src/spec/schema.rs:403:34
    |
403 |     fn schema(&mut self, schema: &Schema, value: Self::T) -> Result<Self::T>;
    |                                  ^^^^^^^
    = note: expected signature `fn(&mut SchemaToAvroSchema, &spec::schema::Schema, itertools::Either<_, _>) -> std::result::Result<_, _>`
               found signature `fn(&mut SchemaToAvroSchema, &apache_avro::Schema, itertools::Either<_, _>) -> std::result::Result<_, _>`

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/manifest_list.rs:495:61
    |
495 |         Lazy::new(|| schema_to_avro_schema("manifest_file", &V1_SCHEMA).unwrap());
    |                      ---------------------                  ^^^^^^^^^^ expected `&Schema`, found `&Lazy<Schema>`
    |                      |
    |                      arguments to this function are incorrect
    |
    = note: expected reference `&apache_avro::Schema`
               found reference `&once_cell::sync::Lazy<spec::schema::Schema>`
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:227:15
    |
227 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/manifest_list.rs:498:61
    |
498 |         Lazy::new(|| schema_to_avro_schema("manifest_file", &V2_SCHEMA).unwrap());
    |                      ---------------------                  ^^^^^^^^^^ expected `&Schema`, found `&Lazy<Schema>`
    |                      |
    |                      arguments to this function are incorrect
    |
    = note: expected reference `&apache_avro::Schema`
               found reference `&once_cell::sync::Lazy<spec::schema::Schema>`
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:227:15
    |
227 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:101:46
    |
101 |             avro_record_field.default = Some(Value::Null);
    |                                         ---- ^^^^^^^^^^^ expected `serde_json::Value`, found `apache_avro::types::Value`
    |                                         |
    |                                         arguments to this enum variant are incorrect
    |
    = note: `apache_avro::types::Value` and `serde_json::Value` have similar names, but are actually distinct types
note: `apache_avro::types::Value` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/types.rs:51:1
    |
51  | pub enum Value {
    | ^^^^^^^^^^^^^^
note: `serde_json::Value` is defined in crate `serde_json`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.120/src/value/mod.rs:116:1
    |
116 | pub enum Value {
    | ^^^^^^^^^^^^^^
help: the type constructed contains `apache_avro::types::Value` due to the type of the argument passed
   --> crates/iceberg/src/avro/schema.rs:101:41
    |
101 |             avro_record_field.default = Some(Value::Null);
    |                                         ^^^^^-----------^
    |                                              |
    |                                              this argument influences the type of `Some`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/option.rs:578:5

error[E0599]: no variant or associated item named `Number` found for enum `apache_avro::types::Value` in the current scope
   --> crates/iceberg/src/avro/schema.rs:105:20
    |
105 |             Value::Number(Number::from(field.id)),
    |                    ^^^^^^ variant or associated item not found in `Value`

error[E0599]: no variant or associated item named `Number` found for enum `apache_avro::types::Value` in the current scope
   --> crates/iceberg/src/avro/schema.rs:170:28
    |
170 |                     Value::Number(Number::from(map.key_field.id)),
    |                            ^^^^^^ variant or associated item not found in `Value`

error[E0599]: no variant or associated item named `Number` found for enum `apache_avro::types::Value` in the current scope
   --> crates/iceberg/src/avro/schema.rs:188:28
    |
188 |                     Value::Number(Number::from(map.value_field.id)),
    |                            ^^^^^^ variant or associated item not found in `Value`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:232:18
    |
232 |     visit_schema(schema, &mut converter).map(Either::unwrap_left)
    |     ------------ ^^^^^^ expected `spec::schema::Schema`, found `apache_avro::Schema`
    |     |
    |     arguments to this function are incorrect
    |
    = note: `apache_avro::Schema` and `spec::schema::Schema` have similar names, but are actually distinct types
note: `apache_avro::Schema` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
    |
78  | pub enum Schema {
    | ^^^^^^^^^^^^^^^
note: `spec::schema::Schema` is defined in the current crate
   --> crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ^^^^^^^^^^^^^^^^^
note: function defined here
   --> crates/iceberg/src/spec/schema.rs:462:8
    |
462 | pub fn visit_schema<V: SchemaVisitor>(schema: &Schema, visitor: &mut V) -> Result<V::T> {
    |        ^^^^^^^^^^^^                   ---------------

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:266:9
    |
266 |         attributes,
    |         ^^^^^^^^^^ expected `serde_json::Value`, found `apache_avro::types::Value`
    |
    = note: `apache_avro::types::Value` and `serde_json::Value` have similar names, but are actually distinct types
note: `apache_avro::types::Value` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/types.rs:51:1
    |
51  | pub enum Value {
    | ^^^^^^^^^^^^^^
note: `serde_json::Value` is defined in crate `serde_json`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.120/src/value/mod.rs:116:1
    |
116 | pub enum Value {
    | ^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `as_i64` found for enum `apache_avro::types::Value` in the current scope
   --> crates/iceberg/src/avro/schema.rs:364:34
    |
364 |                 .and_then(Value::as_i64)
    |                                  ^^^^^^ variant or associated item not found in `Value`

error[E0026]: variant `apache_avro::Schema::Decimal` does not have fields named `precision`, `scale`
   --> crates/iceberg/src/avro/schema.rs:468:27
    |
468 |         Schema::Decimal { precision, scale, ..} => Ok(Some(Type::Decimal{ precision: *precision, scale: *scale})),
    |                           ^^^^^^^^^  ^^^^^ variant `apache_avro::Schema::Decimal` does not have these fields

error[E0599]: no variant or associated item named `Str` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:469:17
    |
469 |         Schema::Str => Ok(Some(Type::String)),
    |                 ^^^ variant or associated item not found in `Schema`

error[E0599]: no variant or associated item named `Boolean` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:463:42
    |
463 |         Schema::Boolean => Ok(Some(Type::Boolean)),
    |                                          ^^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Boolean` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Integer` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:464:38
    |
464 |         Schema::Int => Ok(Some(Type::Integer)), // Assumes Int in Avro is going to be <= 32 bits.
    |                                      ^^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Integer` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Long` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:466:39
    |
466 |         Schema::Long => Ok(Some(Type::Long)),
    |                                       ^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Long` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Double` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:467:41
    |
467 |         Schema::Double => Ok(Some(Type::Double)),
    |                                         ^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Double` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant named `Decimal` found for enum `datatypes::Type`
   --> crates/iceberg/src/avro/schema.rs:468:66
    |
468 |         Schema::Decimal { precision, scale, ..} => Ok(Some(Type::Decimal{ precision: *precision, scale: *scale})),
    |                                                                  ^^^^^^^ variant not found in `datatypes::Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant `Decimal` not found here

error[E0599]: no variant or associated item named `String` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:469:38
    |
469 |         Schema::Str => Ok(Some(Type::String)),
    |                                      ^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `String` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Binary` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:470:61
    |
470 |         Schema::Bytes | Schema::Fixed {..} => Ok(Some(Type::Binary)),
    |                                                             ^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Binary` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no associated item named `Avro` found for struct `error::Error` in the current scope
   --> crates/iceberg/src/avro/schema.rs:471:25
    |
471 |         _ => Err(Error::Avro(format!("Unsupported schema: {:?}", schema))),
    |                         ^^^^ associated item not found in `Error`
    |
   ::: crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ---------------- associated item `Avro` not found for this struct
    |
note: if you're trying to build a new `error::Error`, consider using `error::Error::new` which returns `error::Error`
   --> crates/iceberg/src/error.rs:197:5
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `builder` found for enum `apache_avro::Schema` in the current scope
    --> crates/iceberg/src/avro/schema.rs:484:21
     |
484  |             Schema::builder()
     |                     ^^^^^^^ variant or associated item not found in `Schema`
     |
note: if you're trying to build a new `apache_avro::Schema` consider using one of the following associated functions:
      apache_avro::Schema::parse_str
      apache_avro::Schema::parse_reader
      apache_avro::Schema::parse
      apache_avro::Schema::parse_with_names
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:997:5
     |
997  |     pub fn parse_str(input: &str) -> Result<Schema, Error> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1035 |     pub fn parse_reader(reader: &mut (impl Read + ?Sized)) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1044 |     pub fn parse(value: &Value) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1051 |     pub(crate) fn parse_with_names(value: &Value, names: Names) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/manifest.rs:659:49
    |
659 |         schema_to_avro_schema("manifest_entry", &schema)
    |         ---------------------                   ^^^^^^^ expected `apache_avro::Schema`, found `spec::schema::Schema`
    |         |
    |         arguments to this function are incorrect
    |
    = note: `spec::schema::Schema` and `apache_avro::Schema` have similar names, but are actually distinct types
note: `spec::schema::Schema` is defined in the current crate
   --> crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ^^^^^^^^^^^^^^^^^
note: `apache_avro::Schema` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
    |
78  | pub enum Schema {
    | ^^^^^^^^^^^^^^^
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:227:15
    |
227 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/manifest.rs:693:49
    |
693 |         schema_to_avro_schema("manifest_entry", &schema)
    |         ---------------------                   ^^^^^^^ expected `apache_avro::Schema`, found `spec::schema::Schema`
    |         |
    |         arguments to this function are incorrect
    |
    = note: `spec::schema::Schema` and `apache_avro::Schema` have similar names, but are actually distinct types
note: `spec::schema::Schema` is defined in the current crate
   --> crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ^^^^^^^^^^^^^^^^^
note: `apache_avro::Schema` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
    |
78  | pub enum Schema {
    | ^^^^^^^^^^^^^^^
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:227:15
    |
227 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

Some errors have detailed explanations: E0026, E0053, E0252, E0308, E0432, E0599.
For more information about an error, try `rustc --explain E0026`.
warning: `iceberg` (lib) generated 4 warnings
error: could not compile `iceberg` (lib) due to 35 previous errors; 4 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:528:49
    |
528 |             assert_eq!(expected_iceberg_schema, converted_iceberg_schema);
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ expected `spec::schema::Schema`, found `apache_avro::Schema`
    |
    = note: `apache_avro::Schema` and `spec::schema::Schema` have similar names, but are actually distinct types
note: `apache_avro::Schema` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
    |
78  | pub enum Schema {
    | ^^^^^^^^^^^^^^^
note: `spec::schema::Schema` is defined in the current crate
   --> crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:533:13
    |
531 |         let converted_avro_schema = schema_to_avro_schema(
    |                                     --------------------- arguments to this function are incorrect
532 |             avro_schema.name().unwrap().fullname(Namespace::None),
533 |             &expected_iceberg_schema,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ expected `apache_avro::Schema`, found `spec::schema::Schema`
    |
    = note: `spec::schema::Schema` and `apache_avro::Schema` have similar names, but are actually distinct types
note: `spec::schema::Schema` is defined in the current crate
   --> crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ^^^^^^^^^^^^^^^^^
note: `apache_avro::Schema` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
    |
78  | pub enum Schema {
    | ^^^^^^^^^^^^^^^
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:227:15
    |
227 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
    --> crates/iceberg/src/spec/values.rs:2527:57
     |
2527 |         let avro_schema = schema_to_avro_schema("test", &schema).unwrap();
     |                           ---------------------         ^^^^^^^ expected `apache_avro::Schema`, found `spec::schema::Schema`
     |                           |
     |                           arguments to this function are incorrect
     |
     = note: `spec::schema::Schema` and `apache_avro::Schema` have similar names, but are actually distinct types
note: `spec::schema::Schema` is defined in the current crate
    --> crates/iceberg/src/spec/schema.rs:47:1
     |
47   | pub struct Schema {
     | ^^^^^^^^^^^^^^^^^
note: `apache_avro::Schema` is defined in crate `apache_avro`
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
     |
78   | pub enum Schema {
     | ^^^^^^^^^^^^^^^
note: function defined here
    --> crates/iceberg/src/avro/schema.rs:227:15
     |
227  | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
     |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
    --> crates/iceberg/src/spec/values.rs:2553:57
     |
2553 |         let avro_schema = schema_to_avro_schema("test", &schema).unwrap();
     |                           ---------------------         ^^^^^^^ expected `apache_avro::Schema`, found `spec::schema::Schema`
     |                           |
     |                           arguments to this function are incorrect
     |
     = note: `spec::schema::Schema` and `apache_avro::Schema` have similar names, but are actually distinct types
note: `spec::schema::Schema` is defined in the current crate
    --> crates/iceberg/src/spec/schema.rs:47:1
     |
47   | pub struct Schema {
     | ^^^^^^^^^^^^^^^^^
note: `apache_avro::Schema` is defined in crate `apache_avro`
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
     |
78   | pub enum Schema {
     | ^^^^^^^^^^^^^^^
note: function defined here
    --> crates/iceberg/src/avro/schema.rs:227:15
     |
227  | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
     |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
    --> crates/iceberg/src/spec/values.rs:2962:57
     |
2962 |         let avro_schema = schema_to_avro_schema("test", &schema).unwrap();
     |                           ---------------------         ^^^^^^^ expected `apache_avro::Schema`, found `spec::schema::Schema`
     |                           |
     |                           arguments to this function are incorrect
     |
     = note: `spec::schema::Schema` and `apache_avro::Schema` have similar names, but are actually distinct types
note: `spec::schema::Schema` is defined in the current crate
    --> crates/iceberg/src/spec/schema.rs:47:1
     |
47   | pub struct Schema {
     | ^^^^^^^^^^^^^^^^^
note: `apache_avro::Schema` is defined in crate `apache_avro`
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
     |
78   | pub enum Schema {
     | ^^^^^^^^^^^^^^^
note: function defined here
    --> crates/iceberg/src/avro/schema.rs:227:15
     |
227  | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
     |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

warning: `iceberg` (lib test) generated 4 warnings (4 duplicates)
error: could not compile `iceberg` (lib test) due to 40 previous errors; 4 warnings emitted

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0252]: the name `Error` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:35:32
   |
25 | use crate::Error;
   |     ------------ previous import of the type `Error` here
...
35 | use crate::{ensure_data_valid, Error, ErrorKind, Result};
   |                                ^^^^^--
   |                                |
   |                                `Error` reimported here
   |                                help: remove unnecessary import
   |
   = note: `Error` must be defined only once in the type namespace of this module

error[E0252]: the name `Itertools` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:41:25
   |
27 | use itertools::Itertools;
   |     -------------------- previous import of the trait `Itertools` here
...
41 | use itertools::{Either, Itertools};
   |                         ^^^^^^^^^ `Itertools` reimported here
   |
   = note: `Itertools` must be defined only once in the type namespace of this module

error[E0252]: the name `Value` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:42:26
   |
24 | use apache_avro::{types::Value, Schema};
   |                   ------------ previous import of the type `Value` here
...
42 | use serde_json::{Number, Value};
   |                          ^^^^^ `Value` reimported here
   |
   = note: `Value` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
42 | use serde_json::{Number, Value as OtherValue};
   |                          ~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `SchemaVisitor` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:33:5
   |
22 |     SchemaVisitor, StructType, Type,
   |     ------------- previous import of the trait `SchemaVisitor` here
...
33 |     SchemaVisitor, StructType, Type,
   |     ^^^^^^^^^^^^^--
   |     |
   |     `SchemaVisitor` reimported here
   |     help: remove unnecessary import
   |
   = note: `SchemaVisitor` must be defined only once in the type namespace of this module

error[E0252]: the name `ListType` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:32:19
   |
21 |     ListType, MapType, NestedField, NestedFieldRefType,
   |     -------- previous import of the type `ListType` here
...
32 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
   |                   ^^^^^^^^--
   |                   |
   |                   `ListType` reimported here
   |                   help: remove unnecessary import
   |
   = note: `ListType` must be defined only once in the type namespace of this module

error[E0252]: the name `MapType` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:32:29
   |
21 |     ListType, MapType, NestedField, NestedFieldRefType,
   |               ------- previous import of the type `MapType` here
...
32 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
   |                             ^^^^^^^--
   |                             |
   |                             `MapType` reimported here
   |                             help: remove unnecessary import
   |
   = note: `MapType` must be defined only once in the type namespace of this module

error[E0252]: the name `NestedField` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:32:38
   |
21 |     ListType, MapType, NestedField, NestedFieldRefType,
   |                        ----------- previous import of the type `NestedField` here
...
32 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
   |                                      ^^^^^^^^^^^--
   |                                      |
   |                                      `NestedField` reimported here
   |                                      help: remove unnecessary import
   |
   = note: `NestedField` must be defined only once in the type namespace of this module

error[E0252]: the name `Schema` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:32:82
   |
24 | use apache_avro::{types::Value, Schema};
   |                                 ------ previous import of the type `Schema` here
...
32 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
   |                                                                                  ^^^^^^ `Schema` reimported here
   |
   = note: `Schema` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
32 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema as OtherSchema,
   |                                                                                  ~~~~~~~~~~~~~~~~~~~~~

error[E0252]: the name `StructType` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:33:20
   |
22 |     SchemaVisitor, StructType, Type,
   |                    ---------- previous import of the type `StructType` here
...
33 |     SchemaVisitor, StructType, Type,
   |                    ^^^^^^^^^^--
   |                    |
   |                    `StructType` reimported here
   |                    help: remove unnecessary import
   |
   = note: `StructType` must be defined only once in the type namespace of this module

error[E0252]: the name `Type` is defined multiple times
  --> crates/iceberg/src/avro/schema.rs:33:32
   |
22 |     SchemaVisitor, StructType, Type,
   |                                ---- previous import of the type `Type` here
...
33 |     SchemaVisitor, StructType, Type,
   |                                ^^^^-
   |                                |
   |                                `Type` reimported here
   |                                help: remove unnecessary import
   |
   = note: `Type` must be defined only once in the type namespace of this module

error[E0432]: unresolved import `crate::spec::NestedFieldRefType`
  --> crates/iceberg/src/avro/schema.rs:21:37
   |
21 |     ListType, MapType, NestedField, NestedFieldRefType,
   |                                     ^^^^^^^^^^^^^^^^^^
   |                                     |
   |                                     no `NestedFieldRefType` in `spec`
   |                                     help: a similar name exists in the module: `NestedFieldRef`

error[E0432]: unresolved import `crate::spec::Type::Optional`
  --> crates/iceberg/src/avro/schema.rs:26:5
   |
26 | use crate::spec::Type::Optional;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `Optional` in `spec::datatypes::Type`

warning: unused imports: `ListType`, `MapType`, `NestedField`, `SchemaVisitor`, `Schema`, `StructType`, `Type`
  --> crates/iceberg/src/avro/schema.rs:32:19
   |
32 |     visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
   |                   ^^^^^^^^  ^^^^^^^  ^^^^^^^^^^^                                 ^^^^^^
33 |     SchemaVisitor, StructType, Type,
   |     ^^^^^^^^^^^^^  ^^^^^^^^^^  ^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Error`
  --> crates/iceberg/src/avro/schema.rs:35:32
   |
35 | use crate::{ensure_data_valid, Error, ErrorKind, Result};
   |                                ^^^^^

warning: unused import: `Itertools`
  --> crates/iceberg/src/avro/schema.rs:41:25
   |
41 | use itertools::{Either, Itertools};
   |                         ^^^^^^^^^

warning: unused import: `Value`
  --> crates/iceberg/src/avro/schema.rs:42:26
   |
42 | use serde_json::{Number, Value};
   |                          ^^^^^

error[E0053]: method `schema` has an incompatible type for trait
   --> crates/iceberg/src/avro/schema.rs:60:35
    |
60  |     fn schema(&mut self, _schema: &Schema, value: AvroSchemaOrField) -> Result<AvroSchemaOrField> {
    |                                   ^^^^^^^
    |                                   |
    |                                   expected `spec::schema::Schema`, found `apache_avro::Schema`
    |                                   help: change the parameter type to match the trait: `&spec::schema::Schema`
    |
note: type in trait
   --> crates/iceberg/src/spec/schema.rs:403:34
    |
403 |     fn schema(&mut self, schema: &Schema, value: Self::T) -> Result<Self::T>;
    |                                  ^^^^^^^
    = note: expected signature `fn(&mut SchemaToAvroSchema, &spec::schema::Schema, itertools::Either<_, _>) -> std::result::Result<_, _>`
               found signature `fn(&mut SchemaToAvroSchema, &apache_avro::Schema, itertools::Either<_, _>) -> std::result::Result<_, _>`

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/manifest_list.rs:495:61
    |
495 |         Lazy::new(|| schema_to_avro_schema("manifest_file", &V1_SCHEMA).unwrap());
    |                      ---------------------                  ^^^^^^^^^^ expected `&Schema`, found `&Lazy<Schema>`
    |                      |
    |                      arguments to this function are incorrect
    |
    = note: expected reference `&apache_avro::Schema`
               found reference `&once_cell::sync::Lazy<spec::schema::Schema>`
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:227:15
    |
227 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/manifest_list.rs:498:61
    |
498 |         Lazy::new(|| schema_to_avro_schema("manifest_file", &V2_SCHEMA).unwrap());
    |                      ---------------------                  ^^^^^^^^^^ expected `&Schema`, found `&Lazy<Schema>`
    |                      |
    |                      arguments to this function are incorrect
    |
    = note: expected reference `&apache_avro::Schema`
               found reference `&once_cell::sync::Lazy<spec::schema::Schema>`
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:227:15
    |
227 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:101:46
    |
101 |             avro_record_field.default = Some(Value::Null);
    |                                         ---- ^^^^^^^^^^^ expected `serde_json::Value`, found `apache_avro::types::Value`
    |                                         |
    |                                         arguments to this enum variant are incorrect
    |
    = note: `apache_avro::types::Value` and `serde_json::Value` have similar names, but are actually distinct types
note: `apache_avro::types::Value` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/types.rs:51:1
    |
51  | pub enum Value {
    | ^^^^^^^^^^^^^^
note: `serde_json::Value` is defined in crate `serde_json`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.120/src/value/mod.rs:116:1
    |
116 | pub enum Value {
    | ^^^^^^^^^^^^^^
help: the type constructed contains `apache_avro::types::Value` due to the type of the argument passed
   --> crates/iceberg/src/avro/schema.rs:101:41
    |
101 |             avro_record_field.default = Some(Value::Null);
    |                                         ^^^^^-----------^
    |                                              |
    |                                              this argument influences the type of `Some`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/option.rs:578:5

error[E0599]: no variant or associated item named `Number` found for enum `apache_avro::types::Value` in the current scope
   --> crates/iceberg/src/avro/schema.rs:105:20
    |
105 |             Value::Number(Number::from(field.id)),
    |                    ^^^^^^ variant or associated item not found in `Value`

error[E0599]: no variant or associated item named `Number` found for enum `apache_avro::types::Value` in the current scope
   --> crates/iceberg/src/avro/schema.rs:170:28
    |
170 |                     Value::Number(Number::from(map.key_field.id)),
    |                            ^^^^^^ variant or associated item not found in `Value`

error[E0599]: no variant or associated item named `Number` found for enum `apache_avro::types::Value` in the current scope
   --> crates/iceberg/src/avro/schema.rs:188:28
    |
188 |                     Value::Number(Number::from(map.value_field.id)),
    |                            ^^^^^^ variant or associated item not found in `Value`

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:232:18
    |
232 |     visit_schema(schema, &mut converter).map(Either::unwrap_left)
    |     ------------ ^^^^^^ expected `spec::schema::Schema`, found `apache_avro::Schema`
    |     |
    |     arguments to this function are incorrect
    |
    = note: `apache_avro::Schema` and `spec::schema::Schema` have similar names, but are actually distinct types
note: `apache_avro::Schema` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
    |
78  | pub enum Schema {
    | ^^^^^^^^^^^^^^^
note: `spec::schema::Schema` is defined in the current crate
   --> crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ^^^^^^^^^^^^^^^^^
note: function defined here
   --> crates/iceberg/src/spec/schema.rs:462:8
    |
462 | pub fn visit_schema<V: SchemaVisitor>(schema: &Schema, visitor: &mut V) -> Result<V::T> {
    |        ^^^^^^^^^^^^                   ---------------

error[E0308]: mismatched types
   --> crates/iceberg/src/avro/schema.rs:266:9
    |
266 |         attributes,
    |         ^^^^^^^^^^ expected `serde_json::Value`, found `apache_avro::types::Value`
    |
    = note: `apache_avro::types::Value` and `serde_json::Value` have similar names, but are actually distinct types
note: `apache_avro::types::Value` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/types.rs:51:1
    |
51  | pub enum Value {
    | ^^^^^^^^^^^^^^
note: `serde_json::Value` is defined in crate `serde_json`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.120/src/value/mod.rs:116:1
    |
116 | pub enum Value {
    | ^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `as_i64` found for enum `apache_avro::types::Value` in the current scope
   --> crates/iceberg/src/avro/schema.rs:364:34
    |
364 |                 .and_then(Value::as_i64)
    |                                  ^^^^^^ variant or associated item not found in `Value`

error[E0026]: variant `apache_avro::Schema::Decimal` does not have fields named `precision`, `scale`
   --> crates/iceberg/src/avro/schema.rs:468:27
    |
468 |         Schema::Decimal { precision, scale, ..} => Ok(Some(Type::Decimal{ precision: *precision, scale: *scale})),
    |                           ^^^^^^^^^  ^^^^^ variant `apache_avro::Schema::Decimal` does not have these fields

error[E0599]: no variant or associated item named `Str` found for enum `apache_avro::Schema` in the current scope
   --> crates/iceberg/src/avro/schema.rs:469:17
    |
469 |         Schema::Str => Ok(Some(Type::String)),
    |                 ^^^ variant or associated item not found in `Schema`

error[E0599]: no variant or associated item named `Boolean` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:463:42
    |
463 |         Schema::Boolean => Ok(Some(Type::Boolean)),
    |                                          ^^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Boolean` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Integer` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:464:38
    |
464 |         Schema::Int => Ok(Some(Type::Integer)), // Assumes Int in Avro is going to be <= 32 bits.
    |                                      ^^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Integer` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Long` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:466:39
    |
466 |         Schema::Long => Ok(Some(Type::Long)),
    |                                       ^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Long` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Double` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:467:41
    |
467 |         Schema::Double => Ok(Some(Type::Double)),
    |                                         ^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Double` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant named `Decimal` found for enum `datatypes::Type`
   --> crates/iceberg/src/avro/schema.rs:468:66
    |
468 |         Schema::Decimal { precision, scale, ..} => Ok(Some(Type::Decimal{ precision: *precision, scale: *scale})),
    |                                                                  ^^^^^^^ variant not found in `datatypes::Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant `Decimal` not found here

error[E0599]: no variant or associated item named `String` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:469:38
    |
469 |         Schema::Str => Ok(Some(Type::String)),
    |                                      ^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `String` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Binary` found for enum `datatypes::Type` in the current scope
   --> crates/iceberg/src/avro/schema.rs:470:61
    |
470 |         Schema::Bytes | Schema::Fixed {..} => Ok(Some(Type::Binary)),
    |                                                             ^^^^^^ variant or associated item not found in `Type`
    |
   ::: crates/iceberg/src/spec/datatypes.rs:80:1
    |
80  | pub enum Type {
    | ------------- variant or associated item `Binary` not found for this enum
    |
note: if you're trying to build a new `datatypes::Type`, consider using `datatypes::Type::decimal` which returns `std::result::Result<datatypes::Type, error::Error>`
   --> crates/iceberg/src/spec/datatypes.rs:158:5
    |
158 |     pub fn decimal(precision: u32, scale: u32) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no associated item named `Avro` found for struct `error::Error` in the current scope
   --> crates/iceberg/src/avro/schema.rs:471:25
    |
471 |         _ => Err(Error::Avro(format!("Unsupported schema: {:?}", schema))),
    |                         ^^^^ associated item not found in `Error`
    |
   ::: crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ---------------- associated item `Avro` not found for this struct
    |
note: if you're trying to build a new `error::Error`, consider using `error::Error::new` which returns `error::Error`
   --> crates/iceberg/src/error.rs:197:5
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `builder` found for enum `apache_avro::Schema` in the current scope
    --> crates/iceberg/src/avro/schema.rs:484:21
     |
484  |             Schema::builder()
     |                     ^^^^^^^ variant or associated item not found in `Schema`
     |
note: if you're trying to build a new `apache_avro::Schema` consider using one of the following associated functions:
      apache_avro::Schema::parse_str
      apache_avro::Schema::parse_reader
      apache_avro::Schema::parse
      apache_avro::Schema::parse_with_names
    --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:997:5
     |
997  |     pub fn parse_str(input: &str) -> Result<Schema, Error> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1035 |     pub fn parse_reader(reader: &mut (impl Read + ?Sized)) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1044 |     pub fn parse(value: &Value) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1051 |     pub(crate) fn parse_with_names(value: &Value, names: Names) -> AvroResult<Schema> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/manifest.rs:659:49
    |
659 |         schema_to_avro_schema("manifest_entry", &schema)
    |         ---------------------                   ^^^^^^^ expected `apache_avro::Schema`, found `spec::schema::Schema`
    |         |
    |         arguments to this function are incorrect
    |
    = note: `spec::schema::Schema` and `apache_avro::Schema` have similar names, but are actually distinct types
note: `spec::schema::Schema` is defined in the current crate
   --> crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ^^^^^^^^^^^^^^^^^
note: `apache_avro::Schema` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
    |
78  | pub enum Schema {
    | ^^^^^^^^^^^^^^^
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:227:15
    |
227 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/manifest.rs:693:49
    |
693 |         schema_to_avro_schema("manifest_entry", &schema)
    |         ---------------------                   ^^^^^^^ expected `apache_avro::Schema`, found `spec::schema::Schema`
    |         |
    |         arguments to this function are incorrect
    |
    = note: `spec::schema::Schema` and `apache_avro::Schema` have similar names, but are actually distinct types
note: `spec::schema::Schema` is defined in the current crate
   --> crates/iceberg/src/spec/schema.rs:47:1
    |
47  | pub struct Schema {
    | ^^^^^^^^^^^^^^^^^
note: `apache_avro::Schema` is defined in crate `apache_avro`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/apache-avro-0.16.0/src/schema.rs:78:1
    |
78  | pub enum Schema {
    | ^^^^^^^^^^^^^^^
note: function defined here
   --> crates/iceberg/src/avro/schema.rs:227:15
    |
227 | pub(crate) fn schema_to_avro_schema(name: impl ToString, schema: &Schema) -> Result<AvroSchema> {
    |               ^^^^^^^^^^^^^^^^^^^^^                      ---------------

Some errors have detailed explanations: E0026, E0053, E0252, E0308, E0432, E0599.
For more information about an error, try `rustc --explain E0026`.
warning: `iceberg` (lib) generated 4 warnings
error: could not compile `iceberg` (lib) due to 35 previous errors; 4 warnings emitted


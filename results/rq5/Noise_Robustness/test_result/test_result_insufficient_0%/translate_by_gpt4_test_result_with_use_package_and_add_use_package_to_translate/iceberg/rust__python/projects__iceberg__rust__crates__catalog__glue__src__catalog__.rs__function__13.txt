Fail
file path is :
projects/iceberg/rust/crates/catalog/glue/src/catalog.rs

output is:



error is :
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:461:55
    |
461 | async fn drop_table(&self, identifier: TableIdent) -> Result<(), Error> {
    |                                                       ^^^^^^     ----- help: remove this generic argument
    |                                                       |
    |                                                       expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0195]: lifetime parameters or bounds on method `drop_table` do not match the trait declaration
   --> crates/catalog/glue/src/catalog.rs:461:10
    |
461 | async fn drop_table(&self, identifier: TableIdent) -> Result<(), Error> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:463:29
    |
463 |         let database_name = convert_to_database(identifier.namespace());
    |                             ^^^^^^^^^^^^^^^^^^^------------------------ an argument of type `&std::collections::HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
463 |         let database_name = convert_to_database(identifier.namespace(), /* &std::collections::HashMap<std::string::String, std::string::String> */);
    |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `glue_client` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:466:20
    |
466 | ...   match self.glue_client.delete_table().catalog_id(Some(self.catalog_id.to_string())).database_name(database_name.clone()).name(table...
    |                  ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0609]: no field `catalog_id` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:466:68
    |
466 | ...   match self.glue_client.delete_table().catalog_id(Some(self.catalog_id.to_string())).database_name(database_name.clone()).name(table...
    |                                                                  ^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
466 |         match self.glue_client.delete_table().catalog_id(Some(self.config.catalog_id.to_string())).database_name(database_name.clone()).name(table_name.clone()).send().await {
    |                                                                    +++++++

error[E0599]: the method `clone` exists for enum `Result<DatabaseInput, Error>`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:466:121
    |
466 | ...name(database_name.clone()).name(table_name.clone()).send().await {
    |                       ^^^^^ method cannot be called on `Result<DatabaseInput, Error>` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ---------------- doesn't satisfy `iceberg::Error: Clone`
    |
    = note: the following trait bounds were not satisfied:
            `iceberg::Error: Clone`
            which is required by `std::result::Result<DatabaseInput, iceberg::Error>: Clone`
note: the method `clone` exists on the type `DatabaseInput`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/clone.rs:160:5
help: use the `?` operator to extract the `DatabaseInput` value, propagating a `Result::Err` value to the caller
    |
466 |         match self.glue_client.delete_table().catalog_id(Some(self.catalog_id.to_string())).database_name(database_name?.clone()).name(table_name.clone()).send().await {
    |                                                                                                                        +

error[E0599]: no variant or associated item named `NoSuchTableError` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:470:47
    |
470 |                     Err(Error::new(ErrorKind::NoSuchTableError, format!("Table does not exist: {}.{}", database_name, table_name)))
    |                                               ^^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `std::result::Result<DatabaseInput, iceberg::Error>` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:470:104
    |
470 |                     Err(Error::new(ErrorKind::NoSuchTableError, format!("Table does not exist: {}.{}", database_name, table_name)))
    |                                                                                                        ^^^^^^^^^^^^^ `std::result::Result<DatabaseInput, iceberg::Error>` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `std::result::Result<DatabaseInput, iceberg::Error>`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

Some errors have detailed explanations: E0061, E0107, E0195, E0277, E0599, E0609.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `iceberg-catalog-glue` (lib test) due to 8 previous errors
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:461:55
    |
461 | async fn drop_table(&self, identifier: TableIdent) -> Result<(), Error> {
    |                                                       ^^^^^^     ----- help: remove this generic argument
    |                                                       |
    |                                                       expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0195]: lifetime parameters or bounds on method `drop_table` do not match the trait declaration
   --> crates/catalog/glue/src/catalog.rs:461:10
    |
461 | async fn drop_table(&self, identifier: TableIdent) -> Result<(), Error> {
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:463:29
    |
463 |         let database_name = convert_to_database(identifier.namespace());
    |                             ^^^^^^^^^^^^^^^^^^^------------------------ an argument of type `&HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
463 |         let database_name = convert_to_database(identifier.namespace(), /* &HashMap<std::string::String, std::string::String> */);
    |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `glue_client` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:466:20
    |
466 | ...   match self.glue_client.delete_table().catalog_id(Some(self.catalog_id.to_string())).database_name(database_name.clone()).name(table...
    |                  ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`, `file_io`

error[E0609]: no field `catalog_id` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:466:68
    |
466 | ...   match self.glue_client.delete_table().catalog_id(Some(self.catalog_id.to_string())).database_name(database_name.clone()).name(table...
    |                                                                  ^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
466 |         match self.glue_client.delete_table().catalog_id(Some(self.config.catalog_id.to_string())).database_name(database_name.clone()).name(table_name.clone()).send().await {
    |                                                                    +++++++

error[E0599]: the method `clone` exists for enum `Result<DatabaseInput, Error>`, but its trait bounds were not satisfied
   --> crates/catalog/glue/src/catalog.rs:466:121
    |
466 | ...name(database_name.clone()).name(table_name.clone()).send().await {
    |                       ^^^^^ method cannot be called on `Result<DatabaseInput, Error>` due to unsatisfied trait bounds
    |
   ::: /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ---------------- doesn't satisfy `iceberg::Error: Clone`
    |
    = note: the following trait bounds were not satisfied:
            `iceberg::Error: Clone`
            which is required by `Result<DatabaseInput, iceberg::Error>: Clone`
note: the method `clone` exists on the type `DatabaseInput`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/clone.rs:160:5
help: use the `?` operator to extract the `DatabaseInput` value, propagating a `Result::Err` value to the caller
    |
466 |         match self.glue_client.delete_table().catalog_id(Some(self.catalog_id.to_string())).database_name(database_name?.clone()).name(table_name.clone()).send().await {
    |                                                                                                                        +

error[E0599]: no variant or associated item named `NoSuchTableError` found for enum `iceberg::ErrorKind` in the current scope
   --> crates/catalog/glue/src/catalog.rs:470:47
    |
470 |                     Err(Error::new(ErrorKind::NoSuchTableError, format!("Table does not exist: {}.{}", database_name, table_name)))
    |                                               ^^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`

error[E0277]: `Result<DatabaseInput, iceberg::Error>` doesn't implement `std::fmt::Display`
   --> crates/catalog/glue/src/catalog.rs:470:104
    |
470 |                     Err(Error::new(ErrorKind::NoSuchTableError, format!("Table does not exist: {}.{}", database_name, table_name)))
    |                                                                                                        ^^^^^^^^^^^^^ `Result<DatabaseInput, iceberg::Error>` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `Result<DatabaseInput, iceberg::Error>`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

Some errors have detailed explanations: E0061, E0107, E0195, E0277, E0599, E0609.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `iceberg-catalog-glue` (lib) due to 8 previous errors
warning: build failed, waiting for other jobs to finish...


Fail
file path is :
projects/deltachat-core/rust/src/contact.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `sql` is defined multiple times
  --> src/contact.rs:49:18
   |
11 | use crate::sql::{self, Sql};
   |                  ---- previous import of the module `sql` here
...
49 | use crate::sql::{self, params_iter};
   |                  ^^^^--
   |                  |
   |                  `sql` reimported here
   |                  help: remove unnecessary import
   |
   = note: `sql` must be defined only once in the type namespace of this module

error[E0432]: unresolved import `crate::array`
 --> src/contact.rs:7:12
  |
7 | use crate::array::Array;
  |            ^^^^^
  |            |
  |            unresolved import
  |            help: a similar path exists: `core::array`

error[E0432]: unresolved import `crate::context::DC_CONTEXT_MAGIC`
 --> src/contact.rs:9:5
  |
9 | use crate::context::DC_CONTEXT_MAGIC;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `DC_CONTEXT_MAGIC` in `context`

error[E0432]: unresolved import `crate::stock`
  --> src/contact.rs:12:12
   |
12 | use crate::stock::StockMessage;
   |            ^^^^^ could not find `stock` in the crate root

error[E0432]: unresolved import `crate::contact::DC_CONTACT_ID_LAST_SPECIAL`
 --> src/contact.rs:8:5
  |
8 | use crate::contact::DC_CONTACT_ID_LAST_SPECIAL;
  |     ^^^^^^^^^^^^^^^^--------------------------
  |     |               |
  |     |               help: a similar name exists in the module: `DC_CHAT_ID_LAST_SPECIAL`
  |     no `DC_CONTACT_ID_LAST_SPECIAL` in `contact`

error[E0425]: cannot find value `DC_CONTACT_ID_SELF` in this scope
    --> src/contact.rs:1062:18
     |
1062 |         ret.push(DC_CONTACT_ID_SELF.into());
     |                  ^^^^^^^^^^^^^^^^^^ not found in this scope

warning: unused import: `std::cmp::max`
 --> src/contact.rs:4:5
  |
4 | use std::cmp::max;
  |     ^^^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `crate::constants::*`
  --> src/contact.rs:10:5
   |
10 | use crate::constants::*;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `Sql`
  --> src/contact.rs:11:24
   |
11 | use crate::sql::{self, Sql};
   |                        ^^^

warning: unused import: `self`
  --> src/contact.rs:49:18
   |
49 | use crate::sql::{self, params_iter};
   |                  ^^^^

error[E0609]: no field `magic` on type `&context::Context`
    --> src/contact.rs:1023:16
     |
1023 |     if context.magic != DC_CONTEXT_MAGIC {
     |                ^^^^^ unknown field
     |
     = note: available field is: `inner`
     = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0599]: no method named `get_config` found for struct `Sql` in the current scope
    --> src/contact.rs:1027:33
     |
1027 |     let self_addr = context.sql.get_config("configured_addr").await?;
     |                                 ^^^^^^^^^^ help: there is a method with a similar name: `get_raw_config`
     |
    ::: src/sql.rs:57:1
     |
57   | pub struct Sql {
     | -------------- method `get_config` not found for this struct

error[E0599]: no method named `get_config` found for struct `Sql` in the current scope
    --> src/contact.rs:1028:33
     |
1028 |     let self_name = context.sql.get_config("displayname").await?;
     |                                 ^^^^^^^^^^ help: there is a method with a similar name: `get_raw_config`
     |
    ::: src/sql.rs:57:1
     |
57   | pub struct Sql {
     | -------------- method `get_config` not found for this struct

error[E0599]: no method named `stock_string` found for reference `&context::Context` in the current scope
    --> src/contact.rs:1029:30
     |
1029 |     let self_name2 = context.stock_string(StockMessage::SelfMsg).await;
     |                              ^^^^^^^^^^^^ method not found in `&Context`

error[E0308]: mismatched types
    --> src/contact.rs:1045:30
     |
1045 |         let params: Params = params!("configured_addr", s3strLikeCmd, s3strLikeCmd, if listflags & DC_GCL_VERIFIED_ONLY == 0 {1} else {0});
     |                     ------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Params`, found `&[&dyn ToSql]`
     |                     |
     |                     expected due to this
     |
     = note: expected struct `param::Params`
             found reference `&[&dyn rusqlite::ToSql]`
     = note: this error originates in the macro `params` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/contact.rs:1051:30
     |
1051 |         let params: Params = params!("configured_addr");
     |                     ------   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Params`, found `&[&dyn ToSql]`
     |                     |
     |                     expected due to this
     |
     = note: expected struct `param::Params`
             found reference `&[&dyn rusqlite::ToSql]`
     = note: this error originates in the macro `params` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `param::Params: rusqlite::Params` is not satisfied
    --> src/contact.rs:1056:40
     |
1056 |     let res = context.sql.query_map(q, params, |row| row.get::<_, i32>(0)).await?;
     |                           ---------    ^^^^^^ the trait `rusqlite::Params` is not implemented for `param::Params`
     |                           |
     |                           required by a bound introduced by this call
     |
     = help: the following other types implement trait `rusqlite::Params`:
               ParamsFromIter<I>
               [&dyn rusqlite::ToSql + std::marker::Send + std::marker::Sync; 0]
               [T; 1]
               [T; 2]
               [T; 3]
               [T; 4]
               [T; 5]
               [T; 6]
             and 109 others
note: required by a bound in `Sql::query_map`
    --> src/sql.rs:428:22
     |
425  |     pub async fn query_map<T, F, G, H>(
     |                  --------- required by a bound in this associated function
...
428  |         params: impl rusqlite::Params + Send,
     |                      ^^^^^^^^^^^^^^^^ required by this bound in `Sql::query_map`

error[E0061]: this method takes 4 arguments but 3 arguments were supplied
    --> src/contact.rs:1056:27
     |
1056 |     let res = context.sql.query_map(q, params, |row| row.get::<_, i32>(0)).await?;
     |                           ^^^^^^^^^--------------------------------------- an argument is missing
     |
note: method defined here
    --> src/sql.rs:425:18
     |
425  |     pub async fn query_map<T, F, G, H>(
     |                  ^^^^^^^^^
426  |         &self,
427  |         sql: &str,
     |         ---------
428  |         params: impl rusqlite::Params + Send,
     |         ------------------------------------
429  |         f: F,
     |         ----
430  |         mut g: G,
     |         --------
help: provide the argument
     |
1056 |     let res = context.sql.query_map(q, params, |row| row.get::<_, i32>(0), /* g */).await?;
     |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
    --> src/contact.rs:1064:8
     |
1064 |     Ok(ret)
     |     -- ^^^ expected `Vec<ContactId>`, found `Vec<u32>`
     |     |
     |     arguments to this enum variant are incorrect
     |
     = note: expected struct `Vec<ContactId>`
                found struct `Vec<u32>`
help: the type constructed contains `Vec<u32>` due to the type of the argument passed
    --> src/contact.rs:1064:5
     |
1064 |     Ok(ret)
     |     ^^^---^
     |        |
     |        this argument influences the type of `Ok`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
     |
506  |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^

error[E0599]: no method named `get_config` found for struct `sql::Sql` in the current scope
    --> src/contact.rs:1027:33
     |
1027 |     let self_addr = context.sql.get_config("configured_addr").await?;
     |                                 ^^^^^^^^^^ help: there is a method with a similar name: `get_raw_config`
     |
    ::: src/sql.rs:57:1
     |
57   | pub struct Sql {
     | -------------- method `get_config` not found for this struct

error[E0599]: no method named `get_config` found for struct `sql::Sql` in the current scope
    --> src/contact.rs:1028:33
     |
1028 |     let self_name = context.sql.get_config("displayname").await?;
     |                                 ^^^^^^^^^^ help: there is a method with a similar name: `get_raw_config`
     |
    ::: src/sql.rs:57:1
     |
57   | pub struct Sql {
     | -------------- method `get_config` not found for this struct

error[E0277]: the trait bound `param::Params: rusqlite::Params` is not satisfied
    --> src/contact.rs:1056:40
     |
1056 |     let res = context.sql.query_map(q, params, |row| row.get::<_, i32>(0)).await?;
     |                           ---------    ^^^^^^ the trait `rusqlite::Params` is not implemented for `param::Params`
     |                           |
     |                           required by a bound introduced by this call
     |
     = help: the following other types implement trait `rusqlite::Params`:
               ParamsFromIter<I>
               [&dyn rusqlite::ToSql + std::marker::Send + std::marker::Sync; 0]
               [T; 1]
               [T; 2]
               [T; 3]
               [T; 4]
               [T; 5]
               [T; 6]
             and 109 others
note: required by a bound in `sql::Sql::query_map`
    --> src/sql.rs:428:22
     |
425  |     pub async fn query_map<T, F, G, H>(
     |                  --------- required by a bound in this associated function
...
428  |         params: impl rusqlite::Params + Send,
     |                      ^^^^^^^^^^^^^^^^ required by this bound in `Sql::query_map`

error[E0308]: mismatched types
    --> src/contact.rs:1064:8
     |
1064 |     Ok(ret)
     |     -- ^^^ expected `Vec<ContactId>`, found `Vec<u32>`
     |     |
     |     arguments to this enum variant are incorrect
     |
     = note: expected struct `Vec<contact::ContactId>`
                found struct `Vec<u32>`
help: the type constructed contains `Vec<u32>` due to the type of the argument passed
    --> src/contact.rs:1064:5
     |
1064 |     Ok(ret)
     |     ^^^---^
     |        |
     |        this argument influences the type of `Ok`
note: tuple variant defined here
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:506:5
     |
506  |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^

Some errors have detailed explanations: E0061, E0252, E0277, E0308, E0425, E0432, E0599, E0609.
For more information about an error, try `rustc --explain E0061`.
warning: `deltachat` (lib) generated 4 warnings
error: could not compile `deltachat` (lib) due to 15 previous errors; 4 warnings emitted
warning: build failed, waiting for other jobs to finish...
warning: `deltachat` (lib test) generated 4 warnings (4 duplicates)
error: could not compile `deltachat` (lib test) due to 15 previous errors; 4 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


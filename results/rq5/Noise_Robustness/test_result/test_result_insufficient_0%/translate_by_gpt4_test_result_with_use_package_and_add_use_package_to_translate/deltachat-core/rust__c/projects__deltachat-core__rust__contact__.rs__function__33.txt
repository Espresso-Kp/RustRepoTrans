Fail
file path is :
projects/deltachat-core/rust/src/contact.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error: cannot find macro `paramsv` in this scope
    --> src/contact.rs:1281:13
     |
1281 |             paramsv![contact_id, contact_id],
     |             ^^^^^^^ help: a macro with a similar name exists: `params`
     |
    ::: /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/lib.rs:176:1
     |
176  | macro_rules! params {
     | ------------------- similarly named macro `params` defined here

error: cannot find macro `paramsv` in this scope
    --> src/contact.rs:1268:13
     |
1268 |             paramsv![contact_id],
     |             ^^^^^^^ help: a macro with a similar name exists: `params`
     |
    ::: /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rusqlite-0.31.0/src/lib.rs:176:1
     |
176  | macro_rules! params {
     | ------------------- similarly named macro `params` defined here

error[E0425]: cannot find value `DC_CONTEXT_MAGIC` in this scope
    --> src/contact.rs:1257:29
     |
1257 |         || context.magic != DC_CONTEXT_MAGIC
     |                             ^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_CONTACT_ID_LAST_SPECIAL` in this scope
    --> src/contact.rs:1258:49
     |
1258 |         || contact_id <= Ok(ContactId::from_u32(DC_CONTACT_ID_LAST_SPECIAL))
     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0599]: no method named `is_null` found for reference `&context::Context` in the current scope
    --> src/contact.rs:1256:16
     |
1256 |     if context.is_null()
     |                ^^^^^^^ method not found in `&Context`

error[E0609]: no field `magic` on type `&context::Context`
    --> src/contact.rs:1257:20
     |
1257 |         || context.magic != DC_CONTEXT_MAGIC
     |                    ^^^^^ unknown field
     |
     = note: available field is: `inner`
     = note: available fields are: `blobdir`, `sql`, `smeared_timestamp`, `generating_key_mutex`, `oauth2_mutex` ... and 17 others

error[E0599]: no function or associated item named `from_u32` found for struct `ContactId` in the current scope
    --> src/contact.rs:1258:40
     |
55   | pub struct ContactId(u32);
     | -------------------- function or associated item `from_u32` not found for this struct
...
1258 |         || contact_id <= Ok(ContactId::from_u32(DC_CONTACT_ID_LAST_SPECIAL))
     |                                        ^^^^^^^^
     |                                        |
     |                                        function or associated item not found in `ContactId`
     |                                        help: there is a method with a similar name: `to_u32`
     |
note: if you're trying to build a new `ContactId`, consider using `ContactId::new` which returns `ContactId`
    --> src/contact.rs:79:5
     |
79   |     pub const fn new(id: u32) -> ContactId {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following traits define an item `from_u32`, perhaps you need to implement one of them:
             candidate #1: `FromPrimitive`
             candidate #2: `gimli::ReaderOffset`

error[E0107]: method takes 1 generic argument but 2 generic arguments were supplied
    --> src/contact.rs:1265:10
     |
1265 |         .query_get_value::<_, isize>(
     |          ^^^^^^^^^^^^^^^      ----- help: remove this generic argument
     |          |
     |          expected 1 generic argument
     |
note: method defined here, with 1 generic parameter: `T`
    --> src/sql.rs:560:18
     |
560  |     pub async fn query_get_value<T>(
     |                  ^^^^^^^^^^^^^^^ -
     = note: `impl Trait` cannot be explicitly specified as a generic argument

error[E0277]: the trait bound `isize: rusqlite::Params` is not satisfied
    --> src/contact.rs:1265:31
     |
1265 |         .query_get_value::<_, isize>(
     |          ---------------      ^^^^^ the trait `rusqlite::Params` is not implemented for `isize`
     |          |
     |          required by a bound introduced by this call
     |
     = help: the following other types implement trait `rusqlite::Params`:
               ParamsFromIter<I>
               [&dyn rusqlite::ToSql + std::marker::Send + std::marker::Sync; 0]
               [T; 1]
               [T; 2]
               [T; 3]
               [T; 4]
               [T; 5]
               [T; 6]
             and 109 others
note: required by a bound in `Sql::query_get_value`
    --> src/sql.rs:563:22
     |
560  |     pub async fn query_get_value<T>(
     |                  --------------- required by a bound in this associated function
...
563  |         params: impl rusqlite::Params + Send,
     |                      ^^^^^^^^^^^^^^^^ required by this bound in `Sql::query_get_value`

error[E0061]: this method takes 2 arguments but 3 arguments were supplied
    --> src/contact.rs:1265:10
     |
1265 |         .query_get_value::<_, isize>(
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
1266 |             context,
     |             ------- unexpected argument of type `&context::Context`
     |
note: method defined here
    --> src/sql.rs:560:18
     |
560  |     pub async fn query_get_value<T>(
     |                  ^^^^^^^^^^^^^^^
561  |         &self,
562  |         query: &str,
     |         -----------
563  |         params: impl rusqlite::Params + Send,
     |         ------------------------------------
help: remove the extra argument
     |
1266 ~             ,
1267 |             "SELECT COUNT(*) FROM chats_contacts WHERE contact_id=?;",
1268 ~             /* isize */,
     |

error[E0308]: mismatched types
    --> src/contact.rs:1272:15
     |
1272 |     if res != 0 {
     |               ^ expected `Option<_>`, found integer
     |
     = note: expected enum `std::option::Option<_>`
                found type `{integer}`
help: try wrapping the expression in `Some`
     |
1272 |     if res != Some(0) {
     |               +++++ +

error[E0107]: method takes 1 generic argument but 2 generic arguments were supplied
    --> src/contact.rs:1278:10
     |
1278 |         .query_get_value::<_, isize>(
     |          ^^^^^^^^^^^^^^^      ----- help: remove this generic argument
     |          |
     |          expected 1 generic argument
     |
note: method defined here, with 1 generic parameter: `T`
    --> src/sql.rs:560:18
     |
560  |     pub async fn query_get_value<T>(
     |                  ^^^^^^^^^^^^^^^ -
     = note: `impl Trait` cannot be explicitly specified as a generic argument

error[E0277]: the trait bound `isize: rusqlite::Params` is not satisfied
    --> src/contact.rs:1278:31
     |
1278 |         .query_get_value::<_, isize>(
     |          ---------------      ^^^^^ the trait `rusqlite::Params` is not implemented for `isize`
     |          |
     |          required by a bound introduced by this call
     |
     = help: the following other types implement trait `rusqlite::Params`:
               ParamsFromIter<I>
               [&dyn rusqlite::ToSql + std::marker::Send + std::marker::Sync; 0]
               [T; 1]
               [T; 2]
               [T; 3]
               [T; 4]
               [T; 5]
               [T; 6]
             and 109 others
note: required by a bound in `Sql::query_get_value`
    --> src/sql.rs:563:22
     |
560  |     pub async fn query_get_value<T>(
     |                  --------------- required by a bound in this associated function
...
563  |         params: impl rusqlite::Params + Send,
     |                      ^^^^^^^^^^^^^^^^ required by this bound in `Sql::query_get_value`

error[E0061]: this method takes 2 arguments but 3 arguments were supplied
    --> src/contact.rs:1278:10
     |
1278 |         .query_get_value::<_, isize>(
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
1279 |             context,
     |             ------- unexpected argument of type `&context::Context`
     |
note: method defined here
    --> src/sql.rs:560:18
     |
560  |     pub async fn query_get_value<T>(
     |                  ^^^^^^^^^^^^^^^
561  |         &self,
562  |         query: &str,
     |         -----------
563  |         params: impl rusqlite::Params + Send,
     |         ------------------------------------
help: remove the extra argument
     |
1279 ~             ,
1280 |             "SELECT COUNT(*) FROM msgs WHERE from_id=? OR to_id=?;",
1281 ~             /* isize */,
     |

error[E0308]: mismatched types
    --> src/contact.rs:1285:15
     |
1285 |     if res != 0 {
     |               ^ expected `Option<_>`, found integer
     |
     = note: expected enum `std::option::Option<_>`
                found type `{integer}`
help: try wrapping the expression in `Some`
     |
1285 |     if res != Some(0) {
     |               +++++ +

error[E0277]: `dyn rusqlite::ToSql` cannot be shared between threads safely
    --> src/contact.rs:1293:13
     |
1291 |         .execute(
     |          ------- required by a bound introduced by this call
1292 |             "DELETE FROM contacts WHERE id=?;",
1293 |             params![contact_id],
     |             ^^^^^^^^^^^^^^^^^^^ `dyn rusqlite::ToSql` cannot be shared between threads safely
     |
     = help: within `[&dyn rusqlite::ToSql]`, the trait `std::marker::Sync` is not implemented for `dyn rusqlite::ToSql`, which is required by `&[&dyn rusqlite::ToSql]: std::marker::Send`
     = note: required because it appears within the type `&dyn rusqlite::ToSql`
     = note: required because it appears within the type `[&dyn rusqlite::ToSql]`
     = note: required for `&[&dyn rusqlite::ToSql]` to implement `std::marker::Send`
note: required by a bound in `Sql::execute`
    --> src/sql.rs:404:41
     |
401  |     pub async fn execute(
     |                  ------- required by a bound in this associated function
...
404  |         params: impl rusqlite::Params + Send,
     |                                         ^^^^ required by this bound in `Sql::execute`

error[E0308]: mismatched types
    --> src/contact.rs:1297:24
     |
1297 |     context.emit_event(EventType::ContactsChanged);
     |             ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EventType`, found enum constructor
     |             |
     |             arguments to this method are incorrect
     |
    ::: src/events/payload.rs:188:5
     |
188  |     ContactsChanged(Option<ContactId>),
     |     --------------- `ContactsChanged` defines an enum variant constructor here, which should be called
     |
     = note:          expected enum `payload::EventType`
             found enum constructor `fn(std::option::Option<ContactId>) -> payload::EventType {payload::EventType::ContactsChanged}`
note: method defined here
    --> src/context.rs:595:12
     |
595  |     pub fn emit_event(&self, event: EventType) {
     |            ^^^^^^^^^^        ----------------
help: use parentheses to construct this tuple variant
     |
1297 |     context.emit_event(EventType::ContactsChanged(/* std::option::Option<ContactId> */));
     |                                                  ++++++++++++++++++++++++++++++++++++++

error[E0599]: no function or associated item named `from_u32` found for struct `contact::ContactId` in the current scope
    --> src/contact.rs:1258:40
     |
55   | pub struct ContactId(u32);
     | -------------------- function or associated item `from_u32` not found for this struct
...
1258 |         || contact_id <= Ok(ContactId::from_u32(DC_CONTACT_ID_LAST_SPECIAL))
     |                                        ^^^^^^^^
     |                                        |
     |                                        function or associated item not found in `ContactId`
     |                                        help: there is a method with a similar name: `to_u32`
     |
note: if you're trying to build a new `contact::ContactId`, consider using `contact::ContactId::new` which returns `contact::ContactId`
    --> src/contact.rs:79:5
     |
79   |     pub const fn new(id: u32) -> ContactId {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: items from traits can only be used if the trait is implemented and in scope
     = note: the following traits define an item `from_u32`, perhaps you need to implement one of them:
             candidate #1: `FromPrimitive`
             candidate #2: `sysinfo::common::PidExt`
             candidate #3: `gimli::read::reader::ReaderOffset`

error[E0277]: the trait bound `isize: rusqlite::Params` is not satisfied
    --> src/contact.rs:1265:31
     |
1265 |         .query_get_value::<_, isize>(
     |          ---------------      ^^^^^ the trait `rusqlite::Params` is not implemented for `isize`
     |          |
     |          required by a bound introduced by this call
     |
     = help: the following other types implement trait `rusqlite::Params`:
               ParamsFromIter<I>
               [&dyn rusqlite::ToSql + std::marker::Send + std::marker::Sync; 0]
               [T; 1]
               [T; 2]
               [T; 3]
               [T; 4]
               [T; 5]
               [T; 6]
             and 109 others
note: required by a bound in `sql::Sql::query_get_value`
    --> src/sql.rs:563:22
     |
560  |     pub async fn query_get_value<T>(
     |                  --------------- required by a bound in this associated function
...
563  |         params: impl rusqlite::Params + Send,
     |                      ^^^^^^^^^^^^^^^^ required by this bound in `Sql::query_get_value`

error[E0277]: the trait bound `isize: rusqlite::Params` is not satisfied
    --> src/contact.rs:1278:31
     |
1278 |         .query_get_value::<_, isize>(
     |          ---------------      ^^^^^ the trait `rusqlite::Params` is not implemented for `isize`
     |          |
     |          required by a bound introduced by this call
     |
     = help: the following other types implement trait `rusqlite::Params`:
               ParamsFromIter<I>
               [&dyn rusqlite::ToSql + std::marker::Send + std::marker::Sync; 0]
               [T; 1]
               [T; 2]
               [T; 3]
               [T; 4]
               [T; 5]
               [T; 6]
             and 109 others
note: required by a bound in `sql::Sql::query_get_value`
    --> src/sql.rs:563:22
     |
560  |     pub async fn query_get_value<T>(
     |                  --------------- required by a bound in this associated function
...
563  |         params: impl rusqlite::Params + Send,
     |                      ^^^^^^^^^^^^^^^^ required by this bound in `Sql::query_get_value`

error[E0277]: `dyn rusqlite::ToSql` cannot be shared between threads safely
    --> src/contact.rs:1293:13
     |
1291 |         .execute(
     |          ------- required by a bound introduced by this call
1292 |             "DELETE FROM contacts WHERE id=?;",
1293 |             params![contact_id],
     |             ^^^^^^^^^^^^^^^^^^^ `dyn rusqlite::ToSql` cannot be shared between threads safely
     |
     = help: within `[&dyn rusqlite::ToSql]`, the trait `std::marker::Sync` is not implemented for `dyn rusqlite::ToSql`, which is required by `&[&dyn rusqlite::ToSql]: std::marker::Send`
     = note: required because it appears within the type `&dyn rusqlite::ToSql`
     = note: required because it appears within the type `[&dyn rusqlite::ToSql]`
     = note: required for `&[&dyn rusqlite::ToSql]` to implement `std::marker::Send`
note: required by a bound in `sql::Sql::execute`
    --> src/sql.rs:404:41
     |
401  |     pub async fn execute(
     |                  ------- required by a bound in this associated function
...
404  |         params: impl rusqlite::Params + Send,
     |                                         ^^^^ required by this bound in `Sql::execute`

error[E0308]: mismatched types
    --> src/contact.rs:1297:24
     |
1297 |     context.emit_event(EventType::ContactsChanged);
     |             ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EventType`, found enum constructor
     |             |
     |             arguments to this method are incorrect
     |
    ::: src/events/payload.rs:188:5
     |
188  |     ContactsChanged(Option<ContactId>),
     |     --------------- `ContactsChanged` defines an enum variant constructor here, which should be called
     |
     = note:          expected enum `payload::EventType`
             found enum constructor `fn(std::option::Option<contact::ContactId>) -> payload::EventType {payload::EventType::ContactsChanged}`
note: method defined here
    --> src/context.rs:595:12
     |
595  |     pub fn emit_event(&self, event: EventType) {
     |            ^^^^^^^^^^        ----------------
help: use parentheses to construct this tuple variant
     |
1297 |     context.emit_event(EventType::ContactsChanged(/* std::option::Option<contact::ContactId> */));
     |                                                  +++++++++++++++++++++++++++++++++++++++++++++++

Some errors have detailed explanations: E0061, E0107, E0277, E0308, E0425, E0599, E0609.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `deltachat` (lib) due to 17 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 17 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


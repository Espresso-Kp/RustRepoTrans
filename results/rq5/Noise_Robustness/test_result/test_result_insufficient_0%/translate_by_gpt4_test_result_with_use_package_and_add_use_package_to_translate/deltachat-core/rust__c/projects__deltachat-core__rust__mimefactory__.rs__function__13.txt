Fail
file path is :
projects/deltachat-core/rust/src/mimefactory.rs

output is:


error is :
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error: cannot find macro `format_err` in this scope
   --> src/mimefactory.rs:529:30
    |
529 |         Err(_) => return Err(format_err!("Could not parse provided subject.")),
    |                              ^^^^^^^^^^
    |
   ::: /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:978:5
    |
978 |     macro_rules! format_args {
    |     ------------------------ similarly named macro `format_args` defined here
    |
help: a macro with a similar name exists
    |
529 |         Err(_) => return Err(format_args!("Could not parse provided subject.")),
    |                              ~~~~~~~~~~~
help: consider importing one of these items
    |
3   + use anyhow::format_err;
    |
3   + use pgp::format_err;
    |

error[E0433]: failed to resolve: use of undeclared crate or module `mail`
   --> src/mimefactory.rs:521:21
    |
521 |     let mut email = mail::Mailer::new().empty_mail(context.get_config(Config::ConfiguredAddr));
    |                     ^^^^ use of undeclared crate or module `mail`
    |
help: there is a crate or module with a similar name
    |
521 |     let mut email = email::Mailer::new().empty_mail(context.get_config(Config::ConfiguredAddr));
    |                     ~~~~~

error[E0433]: failed to resolve: use of undeclared crate or module `mail`
   --> src/mimefactory.rs:540:36
    |
540 |     email.add_text_part(body.body, mail::header::ContentType::TEXT_UTF8);
    |                                    ^^^^ use of undeclared crate or module `mail`
    |
help: there is an enum variant `crate::mimefactory::HeaderDef::ContentType`; try using the variant's enum
    |
540 |     email.add_text_part(body.body, crate::mimefactory::HeaderDef);
    |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: there is a crate or module with a similar name
    |
540 |     email.add_text_part(body.body, email::header::ContentType::TEXT_UTF8);
    |                                    ~~~~~

error[E0433]: failed to resolve: use of undeclared crate or module `mail`
   --> src/mimefactory.rs:547:17
    |
547 |                 mail::header::ContentType::TEXT_UTF8,
    |                 ^^^^ use of undeclared crate or module `mail`
    |
help: there is an enum variant `crate::mimefactory::HeaderDef::ContentType`; try using the variant's enum
    |
547 |                 crate::mimefactory::HeaderDef,
    |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: there is a crate or module with a similar name
    |
547 |                 email::header::ContentType::TEXT_UTF8,
    |                 ~~~~~

error[E0433]: failed to resolve: use of undeclared type `ChatId`
   --> src/mimefactory.rs:507:25
    |
507 |     let empty_chat_id = ChatId::new(0);
    |                         ^^^^^^ use of undeclared type `ChatId`
    |
help: a struct with a similar name exists
    |
507 |     let empty_chat_id = Chat::new(0);
    |                         ~~~~
help: consider importing this struct
    |
3   + use crate::chat::ChatId;
    |

error[E0433]: failed to resolve: use of undeclared type `ContactAddress`
   --> src/mimefactory.rs:508:23
    |
508 |     let mut to_addr = ContactAddress::new(context, &empty_chat_id, &self.from_id, &empty_chat_id);
    |                       ^^^^^^^^^^^^^^ use of undeclared type `ContactAddress`
    |
help: consider importing this struct
    |
3   + use deltachat_contact_tools::ContactAddress;
    |

error[E0433]: failed to resolve: use of undeclared type `ContactAddress`
   --> src/mimefactory.rs:514:16
    |
514 |     let from = ContactAddress::new(context, &empty_chat_id, &self.from_id, &empty_chat_id);
    |                ^^^^^^^^^^^^^^ use of undeclared type `ContactAddress`
    |
help: consider importing this struct
    |
3   + use deltachat_contact_tools::ContactAddress;
    |

error[E0433]: failed to resolve: use of undeclared crate or module `mail`
   --> src/mimefactory.rs:515:30
    |
515 |     let mut addresses = vec![mail::Address::Single(from.into())];
    |                              ^^^^ use of undeclared crate or module `mail`
    |
help: there is a crate or module with a similar name
    |
515 |     let mut addresses = vec![email::Address::Single(from.into())];
    |                              ~~~~~
help: consider importing one of these items
    |
3   + use email::Address;
    |
3   + use lettre_email::Address;
    |
help: if you import `Address`, refer to it directly
    |
515 -     let mut addresses = vec![mail::Address::Single(from.into())];
515 +     let mut addresses = vec![Address::Single(from.into())];
    |

warning: unused import: `Address`
 --> src/mimefactory.rs:9:20
  |
9 | use lettre_email::{Address, Header, MimeMultipartType, PartBuilder};
  |                    ^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `crate::e2ee::EncryptHelper`
  --> src/mimefactory.rs:18:5
   |
18 | use crate::e2ee::EncryptHelper;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::ephemeral::Timer as EphemeralTimer`
  --> src/mimefactory.rs:19:5
   |
19 | use crate::ephemeral::Timer as EphemeralTimer;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `create_outgoing_rfc724_mid`
  --> src/mimefactory.rs:31:5
   |
31 |     create_outgoing_rfc724_mid, create_smeared_timestamp, remove_subject_prefix, time,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: use of undeclared crate or module `mail`
   --> src/mimefactory.rs:540:36
    |
540 |     email.add_text_part(body.body, mail::header::ContentType::TEXT_UTF8);
    |                                    ^^^^ use of undeclared crate or module `mail`
    |
help: there is an enum variant `crate::peer_channels::tests::HeaderDef::ContentType`; try using the variant's enum
    |
540 |     email.add_text_part(body.body, crate::peer_channels::tests::HeaderDef);
    |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: there is a crate or module with a similar name
    |
540 |     email.add_text_part(body.body, email::header::ContentType::TEXT_UTF8);
    |                                    ~~~~~

error[E0433]: failed to resolve: use of undeclared crate or module `mail`
   --> src/mimefactory.rs:547:17
    |
547 |                 mail::header::ContentType::TEXT_UTF8,
    |                 ^^^^ use of undeclared crate or module `mail`
    |
help: there is an enum variant `crate::peer_channels::tests::HeaderDef::ContentType`; try using the variant's enum
    |
547 |                 crate::peer_channels::tests::HeaderDef,
    |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help: there is a crate or module with a similar name
    |
547 |                 email::header::ContentType::TEXT_UTF8,
    |                 ~~~~~

warning: unused import: `crate::e2ee::EncryptHelper`
  --> src/mimefactory.rs:18:5
   |
18 | use crate::e2ee::EncryptHelper;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: the lint level is defined here
  --> src/lib.rs:6:5
   |
6  |     unused,
   |     ^^^^^^
   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

error[E0609]: no field `from_id` on type `MimeFactory<'_>`
   --> src/mimefactory.rs:508:74
    |
508 |     let mut to_addr = ContactAddress::new(context, &empty_chat_id, &self.from_id, &empty_chat_id);
    |                                                                          ^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
508 |     let mut to_addr = ContactAddress::new(context, &empty_chat_id, &self.msg.from_id, &empty_chat_id);
    |                                                                          ++++

error[E0609]: no field `from_id` on type `MimeFactory<'_>`
   --> src/mimefactory.rs:514:67
    |
514 |     let from = ContactAddress::new(context, &empty_chat_id, &self.from_id, &empty_chat_id);
    |                                                                   ^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
514 |     let from = ContactAddress::new(context, &empty_chat_id, &self.msg.from_id, &empty_chat_id);
    |                                                                   ++++

error[E0308]: mismatched types
   --> src/mimefactory.rs:522:79
    |
522 |     let message_time = std::time::UNIX_EPOCH + std::time::Duration::from_secs(timestamp);
    |                                                ------------------------------ ^^^^^^^^^ expected `u64`, found `i64`
    |                                                |
    |                                                arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/time.rs:225:18
    |
225 |     pub const fn from_secs(secs: u64) -> Duration {
    |                  ^^^^^^^^^
help: you can convert an `i64` to a `u64` and panic if the converted value doesn't fit
    |
522 |     let message_time = std::time::UNIX_EPOCH + std::time::Duration::from_secs(timestamp.try_into().unwrap());
    |                                                                                        ++++++++++++++++++++

error[E0599]: no method named `get_subject` found for struct `MimeFactory` in the current scope
   --> src/mimefactory.rs:526:24
    |
48  | pub struct MimeFactory<'a> {
    | -------------------------- method `get_subject` not found for this struct
...
526 |     let subject = self.get_subject().unwrap_or_default();
    |                        ^^^^^^^^^^^ method not found in `MimeFactory<'_>`
    |
help: one of the expressions' fields has a method of the same name
    |
526 |     let subject = self.msg.get_subject().unwrap_or_default();
    |                        ++++

error[E0609]: no field `text` on type `MimeFactory<'_>`
   --> src/mimefactory.rs:535:55
    |
535 |     let body = match mailparse::addrparse_header(self.text.as_deref().unwrap_or_default()) {
    |                                                       ^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
535 |     let body = match mailparse::addrparse_header(self.msg.text.as_deref().unwrap_or_default()) {
    |                                                       ++++

error[E0624]: associated function `new` is private
   --> src/mimefactory.rs:537:42
    |
537 |         Err(_) => mailparse::SingleInfo::new(),
    |                                          ^^^ private associated function
    |
   ::: /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/mailparse-0.15.0/src/addrparse.rs:15:5
    |
15  |     fn new(name: Option<String>, addr: String) -> Result<Self, MailParseError> {
    |     -------------------------------------------------------------------------- private associated function defined here

error[E0061]: this function takes 2 arguments but 0 arguments were supplied
   --> src/mimefactory.rs:537:19
    |
537 |         Err(_) => mailparse::SingleInfo::new(),
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^-- two arguments of type `std::option::Option<std::string::String>` and `std::string::String` are missing
    |
note: associated function defined here
   --> /home/k/.cargo/registry/src/index.crates.io-6f17d22bba15001f/mailparse-0.15.0/src/addrparse.rs:15:8
    |
15  |     fn new(name: Option<String>, addr: String) -> Result<Self, MailParseError> {
    |        ^^^
help: provide the arguments
    |
537 |         Err(_) => mailparse::SingleInfo::new(/* std::option::Option<std::string::String> */, /* std::string::String */),
    |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: `match` arms have incompatible types
   --> src/mimefactory.rs:537:19
    |
535 |       let body = match mailparse::addrparse_header(self.text.as_deref().unwrap_or_default()) {
    |  ________________-
536 | |         Ok(value) => value,
    | |                      ----- this is found to be of type `MailAddrList`
537 | |         Err(_) => mailparse::SingleInfo::new(),
    | |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `MailAddrList`, found `Result<SingleInfo, MailParseError>`
538 | |     };
    | |_____- `match` arms have incompatible types
    |
    = note: expected struct `MailAddrList`
                 found enum `std::result::Result<SingleInfo, MailParseError>`

error[E0308]: mismatched types
   --> src/mimefactory.rs:543:12
    |
543 |     if let Some(blobs) = self.in_reply_to {
    |            ^^^^^^^^^^^   ---------------- this expression has type `std::string::String`
    |            |
    |            expected `String`, found `Option<_>`
    |
    = note: expected struct `std::string::String`
                 found enum `std::option::Option<_>`

error[E0609]: no field `from_id` on type `mimefactory::MimeFactory<'_>`
   --> src/mimefactory.rs:508:74
    |
508 |     let mut to_addr = ContactAddress::new(context, &empty_chat_id, &self.from_id, &empty_chat_id);
    |                                                                          ^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
508 |     let mut to_addr = ContactAddress::new(context, &empty_chat_id, &self.msg.from_id, &empty_chat_id);
    |                                                                          ++++

error[E0609]: no field `from_id` on type `mimefactory::MimeFactory<'_>`
   --> src/mimefactory.rs:514:67
    |
514 |     let from = ContactAddress::new(context, &empty_chat_id, &self.from_id, &empty_chat_id);
    |                                                                   ^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
514 |     let from = ContactAddress::new(context, &empty_chat_id, &self.msg.from_id, &empty_chat_id);
    |                                                                   ++++

error[E0599]: no method named `get_subject` found for struct `mimefactory::MimeFactory` in the current scope
   --> src/mimefactory.rs:526:24
    |
48  | pub struct MimeFactory<'a> {
    | -------------------------- method `get_subject` not found for this struct
...
526 |     let subject = self.get_subject().unwrap_or_default();
    |                        ^^^^^^^^^^^ method not found in `MimeFactory<'_>`
    |
help: one of the expressions' fields has a method of the same name
    |
526 |     let subject = self.msg.get_subject().unwrap_or_default();
    |                        ++++

error[E0609]: no field `text` on type `mimefactory::MimeFactory<'_>`
   --> src/mimefactory.rs:535:55
    |
535 |     let body = match mailparse::addrparse_header(self.text.as_deref().unwrap_or_default()) {
    |                                                       ^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
535 |     let body = match mailparse::addrparse_header(self.msg.text.as_deref().unwrap_or_default()) {
    |                                                       ++++

Some errors have detailed explanations: E0061, E0308, E0433, E0599, E0609, E0624.
For more information about an error, try `rustc --explain E0061`.
warning: `deltachat` (lib) generated 4 warnings
error: could not compile `deltachat` (lib) due to 17 previous errors; 4 warnings emitted
warning: build failed, waiting for other jobs to finish...
warning: `deltachat` (lib test) generated 3 warnings (2 duplicates)
error: could not compile `deltachat` (lib test) due to 17 previous errors; 3 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


Fail
file path is :
projects/deltachat-core/rust/src/blob.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/config.rs:619:53
    |
619 | ...                   let buf = fs::read(blob.to_abs_path()).await?;
    |                                               ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
    |
note: method defined here
   --> src/blob.rs:202:8
    |
202 | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
619 |                             let buf = fs::read(blob.to_abs_path(/* &OsStr */)).await?;
    |                                                                ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/chat.rs:2635:86
     |
2635 |             if let Some((better_type, _)) = message::guess_msgtype_from_suffix(&blob.to_abs_path())
     |                                                                                      ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
     |
note: method defined here
    --> src/blob.rs:202:8
     |
202  | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
2635 |             if let Some((better_type, _)) = message::guess_msgtype_from_suffix(&blob.to_abs_path(/* &OsStr */))
     |                                                                                                 ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/chat.rs:2639:60
     |
2639 |                         .ensure_sendable_webxdc_file(&blob.to_abs_path())
     |                                                            ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
     |
note: method defined here
    --> src/blob.rs:202:8
     |
202  | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
2639 |                         .ensure_sendable_webxdc_file(&blob.to_abs_path(/* &OsStr */))
     |                                                                       ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/chat.rs:2648:52
     |
2648 |                 .ensure_sendable_webxdc_file(&blob.to_abs_path())
     |                                                    ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
     |
note: method defined here
    --> src/blob.rs:202:8
     |
202  | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
2648 |                 .ensure_sendable_webxdc_file(&blob.to_abs_path(/* &OsStr */))
     |                                                               ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/chat.rs:2675:79
     |
2675 |             if let Some((_, mime)) = message::guess_msgtype_from_suffix(&blob.to_abs_path()) {
     |                                                                               ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
     |
note: method defined here
    --> src/blob.rs:202:8
     |
202  | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
2675 |             if let Some((_, mime)) = message::guess_msgtype_from_suffix(&blob.to_abs_path(/* &OsStr */)) {
     |                                                                                          ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/chat.rs:2685:18
     |
2685 |             blob.to_abs_path().display(),
     |                  ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
     |
note: method defined here
    --> src/blob.rs:202:8
     |
202  | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
2685 |             blob.to_abs_path(/* &OsStr */).display(),
     |                             ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/blob.rs:377:29
    |
377 |         let blob_abs = self.to_abs_path();
    |                             ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
    |
note: method defined here
   --> src/blob.rs:202:8
    |
202 | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
377 |         let blob_abs = self.to_abs_path(/* &OsStr */);
    |                                        ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/blob.rs:416:29
    |
416 |         let blob_abs = self.to_abs_path();
    |                             ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
    |
note: method defined here
   --> src/blob.rs:202:8
    |
202 | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
416 |         let blob_abs = self.to_abs_path(/* &OsStr */);
    |                                        ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/mimefactory.rs:1564:30
     |
1564 |     let body = fs::read(blob.to_abs_path()).await?;
     |                              ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
     |
note: method defined here
    --> src/blob.rs:202:8
     |
202  | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
1564 |     let body = fs::read(blob.to_abs_path(/* &OsStr */)).await?;
     |                                         ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/mimefactory.rs:1547:30
     |
1547 |     let body = fs::read(blob.to_abs_path()).await?;
     |                              ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
     |
note: method defined here
    --> src/blob.rs:202:8
     |
202  | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
1547 |     let body = fs::read(blob.to_abs_path(/* &OsStr */)).await?;
     |                                         ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/imex.rs:588:40
    |
588 |         let mut file = File::open(blob.to_abs_path()).await?;
    |                                        ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
    |
note: method defined here
   --> src/blob.rs:202:8
    |
202 | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
588 |         let mut file = File::open(blob.to_abs_path(/* &OsStr */)).await?;
    |                                                   ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/imex/transfer.rs:175:29
    |
175 |             let path = blob.to_abs_path();
    |                             ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
    |
note: method defined here
   --> src/blob.rs:202:8
    |
202 | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
175 |             let path = blob.to_abs_path(/* &OsStr */);
    |                                        ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/qr_code_generator.rs:35:46
    |
35  |             Some(tokio::fs::read(avatar_blob.to_abs_path()).await?)
    |                                              ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
    |
note: method defined here
   --> src/blob.rs:202:8
    |
202 | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
35  |             Some(tokio::fs::read(avatar_blob.to_abs_path(/* &OsStr */)).await?)
    |                                                         ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/qr_code_generator.rs:83:46
    |
83  |             Some(tokio::fs::read(avatar_blob.to_abs_path()).await?)
    |                                              ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
    |
note: method defined here
   --> src/blob.rs:202:8
    |
202 | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
83  |             Some(tokio::fs::read(avatar_blob.to_abs_path(/* &OsStr */)).await?)
    |                                                         ~~~~~~~~~~~~~~

error[E0599]: no method named `is_null` found for reference `&blob::BlobObject<'a>` in the current scope
   --> src/blob.rs:206:13
    |
206 |     if self.is_null() || pathNfilename == OsStr::new("") {
    |             ^^^^^^^ method not found in `&BlobObject<'a>`

error[E0308]: mismatched types
   --> src/blob.rs:213:16
    |
213 |         if let Some(blobdir) = &self.blobdir {
    |                ^^^^^^^^^^^^^   ------------- this expression has type `&&std::path::Path`
    |                |
    |                expected `Path`, found `Option<_>`
    |
    = note: expected struct `std::path::Path`
                 found enum `std::option::Option<_>`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/blob.rs:213:16
    |
213 |         if let Some(blobdir) = &self.blobdir {
    |                ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::prelude::v1::Some`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:570:17
    |
570 | pub enum Option<T> {
    |                 ^ required by this bound in `std::prelude::v1::Some`
...
578 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ---- required by a bound in this tuple variant

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/blob.rs:609:45
    |
609 |         let file = std::fs::File::open(self.to_abs_path())?;
    |                                             ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
    |
note: method defined here
   --> src/blob.rs:202:8
    |
202 | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
609 |         let file = std::fs::File::open(self.to_abs_path(/* &OsStr */))?;
    |                                                        ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/blob.rs:797:25
    |
797 |         assert_eq!(blob.to_abs_path(), t.get_blobdir().join("foo"));
    |                         ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
    |
note: method defined here
   --> src/blob.rs:202:8
    |
202 | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
797 |         assert_eq!(blob.to_abs_path(/* &OsStr */), t.get_blobdir().join("foo"));
    |                                    ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/blob.rs:891:34
    |
891 |         let data = fs::read(blob.to_abs_path()).await.unwrap();
    |                                  ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
    |
note: method defined here
   --> src/blob.rs:202:8
    |
202 | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
891 |         let data = fs::read(blob.to_abs_path(/* &OsStr */)).await.unwrap();
    |                                             ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/blob.rs:912:34
    |
912 |         let data = fs::read(blob.to_abs_path()).await.unwrap();
    |                                  ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
    |
note: method defined here
   --> src/blob.rs:202:8
    |
202 | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
912 |         let data = fs::read(blob.to_abs_path(/* &OsStr */)).await.unwrap();
    |                                             ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/blob.rs:919:34
    |
919 |         let data = fs::read(blob.to_abs_path()).await.unwrap();
    |                                  ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
    |
note: method defined here
   --> src/blob.rs:202:8
    |
202 | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
919 |         let data = fs::read(blob.to_abs_path(/* &OsStr */)).await.unwrap();
    |                                             ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/blob.rs:1003:22
     |
1003 |                 blob.to_abs_path(),
     |                      ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
     |
note: method defined here
    --> src/blob.rs:202:8
     |
202  | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
1003 |                 blob.to_abs_path(/* &OsStr */),
     |                                 ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/blob.rs:1011:44
     |
1011 |                 let img = image::open(blob.to_abs_path()).unwrap();
     |                                            ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
     |
note: method defined here
    --> src/blob.rs:202:8
     |
202  | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
1011 |                 let img = image::open(blob.to_abs_path(/* &OsStr */)).unwrap();
     |                                                       ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/blob.rs:1052:18
     |
1052 |             blob.to_abs_path(),
     |                  ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
     |
note: method defined here
    --> src/blob.rs:202:8
     |
202  | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
1052 |             blob.to_abs_path(/* &OsStr */),
     |                             ~~~~~~~~~~~~~~

error[E0599]: no method named `is_null` found for reference `&BlobObject<'a>` in the current scope
   --> src/blob.rs:206:13
    |
206 |     if self.is_null() || pathNfilename == OsStr::new("") {
    |             ^^^^^^^ method not found in `&BlobObject<'a>`

error[E0308]: mismatched types
   --> src/blob.rs:213:16
    |
213 |         if let Some(blobdir) = &self.blobdir {
    |                ^^^^^^^^^^^^^   ------------- this expression has type `&&Path`
    |                |
    |                expected `Path`, found `Option<_>`
    |
    = note: expected struct `Path`
                 found enum `std::option::Option<_>`

error[E0061]: this method takes 1 argument but 0 arguments were supplied
   --> src/param.rs:408:44
    |
408 |             ParamsFile::Blob(blob) => blob.to_abs_path(),
    |                                            ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
    |
note: method defined here
   --> src/blob.rs:202:8
    |
202 | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
    |        ^^^^^^^^^^^        ---------------------
help: provide the argument
    |
408 |             ParamsFile::Blob(blob) => blob.to_abs_path(/* &OsStr */),
    |                                                       ~~~~~~~~~~~~~~

error[E0061]: this method takes 1 argument but 0 arguments were supplied
    --> src/mimeparser.rs:3085:44
     |
3085 |         let f = tokio::fs::File::open(blob.to_abs_path()).await.unwrap();
     |                                            ^^^^^^^^^^^-- an argument of type `&OsStr` is missing
     |
note: method defined here
    --> src/blob.rs:202:8
     |
202  | pub fn to_abs_path(&self, pathNfilename: &OsStr) -> PathBuf {
     |        ^^^^^^^^^^^        ---------------------
help: provide the argument
     |
3085 |         let f = tokio::fs::File::open(blob.to_abs_path(/* &OsStr */)).await.unwrap();
     |                                                       ~~~~~~~~~~~~~~

Some errors have detailed explanations: E0061, E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `deltachat` (lib) due to 19 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 27 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


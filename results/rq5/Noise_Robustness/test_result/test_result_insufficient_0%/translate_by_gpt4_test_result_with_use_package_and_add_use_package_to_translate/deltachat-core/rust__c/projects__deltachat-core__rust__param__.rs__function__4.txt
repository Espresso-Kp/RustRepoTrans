Fail
file path is :
projects/deltachat-core/rust/src/param.rs

output is:


error is :
    Blocking waiting for file lock on package cache
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0308]: mismatched types
    --> src/chat.rs:2795:38
     |
2795 |         let forwards = msg.param.get(Param::PrepForwards);
     |                                  --- ^^^^^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                  |
     |                                  arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
2795 |         let forwards = msg.param.get(&Param::PrepForwards);
     |                                      +

error[E0308]: mismatched types
    --> src/chat.rs:2665:66
     |
2665 |         if let (Some(filename), Some(blob_ext)) = (msg.param.get(Param::Filename), blob.suffix()) {
     |                                                              --- ^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                                              |
     |                                                              arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
2665 |         if let (Some(filename), Some(blob_ext)) = (msg.param.get(&Param::Filename), blob.suffix()) {
     |                                                                  +

error[E0308]: mismatched types
   --> src/sql.rs:980:47
    |
980 |                 if let Some(file) = param.get(param_id) {
    |                                           --- ^^^^^^^^ expected `&Param`, found `Param`
    |                                           |
    |                                           arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
980 |                 if let Some(file) = param.get(&param_id) {
    |                                               +

error[E0308]: mismatched types
   --> src/param.rs:393:34
    |
393 |         let val = match self.get(key) {
    |                              --- ^^^ expected `&Param`, found `Param`
    |                              |
    |                              arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
393 |         let val = match self.get(&key) {
    |                                  +

error[E0308]: mismatched types
    --> src/chat.rs:1736:49
     |
1736 |         if let Some(image_rel) = self.param.get(Param::ProfileImage) {
     |                                             --- ^^^^^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                             |
     |                                             arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1736 |         if let Some(image_rel) = self.param.get(&Param::ProfileImage) {
     |                                                 +

error[E0308]: mismatched types
    --> src/chat.rs:2043:31
     |
2043 |                 msg.param.get(Param::SendHtml).map(|s| s.to_string())
     |                           --- ^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                           |
     |                           arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
2043 |                 msg.param.get(&Param::SendHtml).map(|s| s.to_string())
     |                               +

error[E0308]: mismatched types
    --> src/message.rs:1184:27
     |
1184 |         if self.param.get(Param::Quote).is_some() && !self.is_forwarded() {
     |                       --- ^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                       |
     |                       arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1184 |         if self.param.get(&Param::Quote).is_some() && !self.is_forwarded() {
     |                           +

error[E0308]: mismatched types
   --> src/mimefactory.rs:151:56
    |
151 |             if let Some(override_name) = msg.param.get(Param::OverrideSenderDisplayname) {
    |                                                    --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
    |                                                    |
    |                                                    arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
151 |             if let Some(override_name) = msg.param.get(&Param::OverrideSenderDisplayname) {
    |                                                        +

error[E0308]: mismatched types
   --> src/mimefactory.rs:166:22
    |
166 |                 .get(Param::ListPost)
    |                  --- ^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
    |                  |
    |                  arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
166 |                 .get(&Param::ListPost)
    |                      +

error[E0308]: mismatched types
   --> src/mimefactory.rs:525:40
    |
525 |                     self.msg.param.get(Param::Arg)
    |                                    --- ^^^^^^^^^^ expected `&Param`, found `Param`
    |                                    |
    |                                    arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
525 |                     self.msg.param.get(&Param::Arg)
    |                                        +

error[E0308]: mismatched types
    --> src/chat.rs:4170:50
     |
4170 |             if let Some(old_fwd) = msg.param.get(Param::PrepForwards) {
     |                                              --- ^^^^^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                              |
     |                                              arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
4170 |             if let Some(old_fwd) = msg.param.get(&Param::PrepForwards) {
     |                                                  +

error[E0308]: mismatched types
   --> src/chatlist.rs:233:46
    |
233 | ...                   && param.get(Param::ListPost).is_none_or_empty()
    |                                --- ^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
    |                                |
    |                                arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
233 |                                 && param.get(&Param::ListPost).is_none_or_empty()
    |                                              +

error[E0308]: mismatched types
   --> src/webxdc.rs:840:22
    |
840 |                 .get(Param::WebxdcDocument)
    |                  --- ^^^^^^^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
    |                  |
    |                  arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
840 |                 .get(&Param::WebxdcDocument)
    |                      +

error[E0308]: mismatched types
   --> src/webxdc.rs:847:26
    |
847 |                     .get(Param::WebxdcSummary)
    |                      --- ^^^^^^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
    |                      |
    |                      arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
847 |                     .get(&Param::WebxdcSummary)
    |                          +

error[E0308]: mismatched types
   --> src/mimeparser.rs:792:60
    |
792 |                         if let Some(blob) = part.param.get(Param::File) {
    |                                                        --- ^^^^^^^^^^^ expected `&Param`, found `Param`
    |                                                        |
    |                                                        arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
792 |                         if let Some(blob) = part.param.get(&Param::File) {
    |                                                            +

error[E0308]: mismatched types
    --> src/receive_imf.rs:1121:61
     |
1121 |                 if let Some(list_id) = to_contact.param.get(Param::ListId) {
     |                                                         --- ^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                                         |
     |                                                         arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1121 |                 if let Some(list_id) = to_contact.param.get(&Param::ListId) {
     |                                                             +

error[E0308]: mismatched types
    --> src/receive_imf.rs:1474:60
     |
1474 |                 if let Some(value) = placeholder.param.get(key) {
     |                                                        --- ^^^ expected `&Param`, found `Param`
     |                                                        |
     |                                                        arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1474 |                 if let Some(value) = placeholder.param.get(&key) {
     |                                                            +

error[E0308]: mismatched types
    --> src/receive_imf.rs:1488:71
     |
1488 |             typ == Viewtype::Text && msg.is_empty() && part.param.get(Param::Quote).is_none();
     |                                                                   --- ^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                                                   |
     |                                                                   arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1488 |             typ == Viewtype::Text && msg.is_empty() && part.param.get(&Param::Quote).is_none();
     |                                                                       +

error[E0308]: mismatched types
    --> src/contact.rs:1386:56
     |
1386 |         } else if let Some(image_rel) = self.param.get(Param::ProfileImage) {
     |                                                    --- ^^^^^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                                    |
     |                                                    arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1386 |         } else if let Some(image_rel) = self.param.get(&Param::ProfileImage) {
     |                                                        +

error[E0308]: mismatched types
   --> src/mimefactory.rs:401:38
    |
401 |             let step = msg.param.get(Param::Arg).unwrap_or_default();
    |                                  --- ^^^^^^^^^^ expected `&Param`, found `Param`
    |                                  |
    |                                  arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
401 |             let step = msg.param.get(&Param::Arg).unwrap_or_default();
    |                                      +

error[E0308]: mismatched types
   --> src/mimefactory.rs:474:36
    |
474 |                     chat.param.get(Param::LastSubject)
    |                                --- ^^^^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
    |                                |
    |                                arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
474 |                     chat.param.get(&Param::LastSubject)
    |                                    +

error[E0308]: mismatched types
    --> src/mimefactory.rs:1007:62
     |
1007 |                     let email_to_remove = self.msg.param.get(Param::Arg).unwrap_or_default();
     |                                                          --- ^^^^^^^^^^ expected `&Param`, found `Param`
     |                                                          |
     |                                                          arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1007 |                     let email_to_remove = self.msg.param.get(&Param::Arg).unwrap_or_default();
     |                                                              +

error[E0308]: mismatched types
    --> src/mimefactory.rs:1029:59
     |
1029 |                     let email_to_add = self.msg.param.get(Param::Arg).unwrap_or_default();
     |                                                       --- ^^^^^^^^^^ expected `&Param`, found `Param`
     |                                                       |
     |                                                       arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1029 |                     let email_to_add = self.msg.param.get(&Param::Arg).unwrap_or_default();
     |                                                           +

error[E0308]: mismatched types
    --> src/mimefactory.rs:1053:55
     |
1053 |                     let old_name = self.msg.param.get(Param::Arg).unwrap_or_default();
     |                                                   --- ^^^^^^^^^^ expected `&Param`, found `Param`
     |                                                   |
     |                                                   arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1053 |                     let old_name = self.msg.param.get(&Param::Arg).unwrap_or_default();
     |                                                       +

error[E0308]: mismatched types
    --> src/mimefactory.rs:1113:42
     |
1113 |                 let step = msg.param.get(Param::Arg).unwrap_or_default();
     |                                      --- ^^^^^^^^^^ expected `&Param`, found `Param`
     |                                      |
     |                                      arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1113 |                 let step = msg.param.get(&Param::Arg).unwrap_or_default();
     |                                          +

error[E0308]: mismatched types
    --> src/mimefactory.rs:1120:48
     |
1120 |                     let param2 = msg.param.get(Param::Arg2).unwrap_or_default();
     |                                            --- ^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                            |
     |                                            arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1120 |                     let param2 = msg.param.get(&Param::Arg2).unwrap_or_default();
     |                                                +

error[E0308]: mismatched types
    --> src/mimefactory.rs:1132:53
     |
1132 |                     let fingerprint = msg.param.get(Param::Arg3).unwrap_or_default();
     |                                                 --- ^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                                 |
     |                                                 arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1132 |                     let fingerprint = msg.param.get(&Param::Arg3).unwrap_or_default();
     |                                                     +

error[E0308]: mismatched types
    --> src/mimefactory.rs:1139:53
     |
1139 |                     if let Some(id) = msg.param.get(Param::Arg4) {
     |                                                 --- ^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                                 |
     |                                                 arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1139 |                     if let Some(id) = msg.param.get(&Param::Arg4) {
     |                                                     +

error[E0308]: mismatched types
    --> src/mimefactory.rs:1197:26
     |
1197 |                     .get(Param::WebrtcRoom)
     |                      --- ^^^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                      |
     |                      arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1197 |                     .get(&Param::WebrtcRoom)
     |                          +

error[E0308]: mismatched types
    --> src/mimefactory.rs:1299:36
     |
1299 |                 self.msg.param.get(Param::SendHtml).map(|s| s.to_string())
     |                                --- ^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                |
     |                                arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1299 |                 self.msg.param.get(&Param::SendHtml).map(|s| s.to_string())
     |                                    +

error[E0308]: mismatched types
    --> src/mimefactory.rs:1328:43
     |
1328 |             let json = self.msg.param.get(Param::Arg).unwrap_or_default();
     |                                       --- ^^^^^^^^^^ expected `&Param`, found `Param`
     |                                       |
     |                                       arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1328 |             let json = self.msg.param.get(&Param::Arg).unwrap_or_default();
     |                                           +

error[E0308]: mismatched types
    --> src/mimefactory.rs:1329:42
     |
1329 |             let ids = self.msg.param.get(Param::Arg2).unwrap_or_default();
     |                                      --- ^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                      |
     |                                      arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1329 |             let ids = self.msg.param.get(&Param::Arg2).unwrap_or_default();
     |                                          +

error[E0308]: mismatched types
    --> src/mimefactory.rs:1333:43
     |
1333 |             let json = self.msg.param.get(Param::Arg).unwrap_or_default();
     |                                       --- ^^^^^^^^^^ expected `&Param`, found `Param`
     |                                       |
     |                                       arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1333 |             let json = self.msg.param.get(&Param::Arg).unwrap_or_default();
     |                                           +

error[E0308]: mismatched types
    --> src/mimefactory.rs:1520:18
     |
1520 |             .get(Param::Filename)
     |              --- ^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |              |
     |              arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1520 |             .get(&Param::Filename)
     |                  +

error[E0308]: mismatched types
    --> src/mimefactory.rs:1526:52
     |
1526 |     let mimetype: mime::Mime = match msg.param.get(Param::MimeType) {
     |                                                --- ^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                                |
     |                                                arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1526 |     let mimetype: mime::Mime = match msg.param.get(&Param::MimeType) {
     |                                                    +

error[E0308]: mismatched types
    --> src/receive_imf.rs:2449:26
     |
2449 |     if contact.param.get(Param::ListId) != Some(listid) {
     |                      --- ^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                      |
     |                      arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
2449 |     if contact.param.get(&Param::ListId) != Some(listid) {
     |                          +

error[E0308]: mismatched types
    --> src/receive_imf.rs:2454:49
     |
2454 |     if let Some(old_list_post) = chat.param.get(Param::ListPost) {
     |                                             --- ^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                             |
     |                                             arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
2454 |     if let Some(old_list_post) = chat.param.get(&Param::ListPost) {
     |                                                 +

error[E0308]: mismatched types
    --> src/chat.rs:1731:24
     |
1731 |         self.param.get(Param::ListPost)
     |                    --- ^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                    |
     |                    arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1731 |         self.param.get(&Param::ListPost)
     |                        +

error[E0308]: mismatched types
   --> src/message.rs:593:41
    |
593 |         if let Some(m) = self.param.get(Param::MimeType) {
    |                                     --- ^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
    |                                     |
    |                                     arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
593 |         if let Some(m) = self.param.get(&Param::MimeType) {
    |                                         +

error[E0308]: mismatched types
   --> src/message.rs:595:51
    |
595 |         } else if let Some(file) = self.param.get(Param::File) {
    |                                               --- ^^^^^^^^^^^ expected `&Param`, found `Param`
    |                                               |
    |                                               arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
595 |         } else if let Some(file) = self.param.get(&Param::File) {
    |                                                   +

error[E0308]: mismatched types
   --> src/message.rs:778:44
    |
778 |         if let Some(name) = self.param.get(Param::Filename) {
    |                                        --- ^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
    |                                        |
    |                                        arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
778 |         if let Some(name) = self.param.get(&Param::Filename) {
    |                                            +

error[E0308]: mismatched types
   --> src/message.rs:782:18
    |
782 |             .get(Param::File)
    |              --- ^^^^^^^^^^^ expected `&Param`, found `Param`
    |              |
    |              arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
782 |             .get(&Param::File)
    |                  +

error[E0308]: mismatched types
   --> src/message.rs:873:18
    |
873 |             .get(Param::OverrideSenderDisplayname)
    |              --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
    |              |
    |              arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
873 |             .get(&Param::OverrideSenderDisplayname)
    |                  +

error[E0308]: mismatched types
    --> src/message.rs:1030:52
     |
1030 |             if let Some(instance) = self.param.get(Param::WebrtcRoom) {
     |                                                --- ^^^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                                |
     |                                                arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1030 |             if let Some(instance) = self.param.get(&Param::WebrtcRoom) {
     |                                                    +

error[E0308]: mismatched types
    --> src/message.rs:1040:52
     |
1040 |             if let Some(instance) = self.param.get(Param::WebrtcRoom) {
     |                                                --- ^^^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                                |
     |                                                arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1040 |             if let Some(instance) = self.param.get(&Param::WebrtcRoom) {
     |                                                    +

error[E0308]: mismatched types
    --> src/message.rs:1179:24
     |
1179 |         self.param.get(Param::Quote).map(|s| s.to_string())
     |                    --- ^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                    |
     |                    arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1179 |         self.param.get(&Param::Quote).map(|s| s.to_string())
     |                        +

error[E0308]: mismatched types
   --> src/mimefactory.rs:430:47
    |
430 |                         return chat.param.get(Param::ProfileImage).map(Into::into);
    |                                           --- ^^^^^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
    |                                           |
    |                                           arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
430 |                         return chat.param.get(&Param::ProfileImage).map(Into::into);
    |                                               +

error[E0308]: mismatched types
   --> src/mimefactory.rs:433:51
    |
433 |                         return self.msg.param.get(Param::Arg).map(Into::into)
    |                                               --- ^^^^^^^^^^ expected `&Param`, found `Param`
    |                                               |
    |                                               arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
433 |                         return self.msg.param.get(&Param::Arg).map(Into::into)
    |                                                   +

error[E0308]: mismatched types
   --> src/mimefactory.rs:444:43
    |
444 |                     return chat.param.get(Param::ProfileImage).map(Into::into);
    |                                       --- ^^^^^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
    |                                       |
    |                                       arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
444 |                     return chat.param.get(&Param::ProfileImage).map(Into::into);
    |                                           +

error[E0308]: mismatched types
   --> src/mimeparser.rs:617:62
    |
617 |                 if let Some(quote) = self.parts[0].param.get(Param::Quote) {
    |                                                          --- ^^^^^^^^^^^^ expected `&Param`, found `Param`
    |                                                          |
    |                                                          arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
617 |                 if let Some(quote) = self.parts[0].param.get(&Param::Quote) {
    |                                                              +

error[E0599]: no method named `is_empty` found for reference `&Param` in the current scope
   --> src/param.rs:280:12
    |
280 |     if key.is_empty() {
    |            ^^^^^^^^ method not found in `&Param`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `is_empty`, perhaps you need to implement one of them:
            candidate #1: `ExactSizeIterator`
            candidate #2: `bitflags::traits::Flags`
            candidate #3: `SampleRange`
            candidate #4: `aead::Buffer`
            candidate #5: `nix::NixPath`
            candidate #6: `governor::state::keyed::ShrinkableKeyedStateStore`
            candidate #7: `toml_edit::table::TableLike`

error[E0599]: no method named `find_param` found for reference `&param::Params` in the current scope
   --> src/param.rs:284:19
    |
284 |     let p1 = self.find_param(key);
    |                   ^^^^^^^^^^ method not found in `&Params`

error[E0308]: mismatched types
   --> src/param.rs:332:18
    |
332 |         self.get(key).and_then(|s| s.parse().ok())
    |              --- ^^^ expected `&Param`, found `Param`
    |              |
    |              arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
332 |         self.get(&key).and_then(|s| s.parse().ok())
    |                  +

error[E0308]: mismatched types
   --> src/param.rs:337:18
    |
337 |         self.get(key).and_then(|s| s.parse().ok())
    |              --- ^^^ expected `&Param`, found `Param`
    |              |
    |              arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
337 |         self.get(&key).and_then(|s| s.parse().ok())
    |                  +

error[E0308]: mismatched types
   --> src/param.rs:359:18
    |
359 |         self.get(key).and_then(|s| s.parse().ok())
    |              --- ^^^ expected `&Param`, found `Param`
    |              |
    |              arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
359 |         self.get(&key).and_then(|s| s.parse().ok())
    |                  +

error[E0308]: mismatched types
   --> src/param.rs:367:34
    |
367 |         let val = match self.get(key) {
    |                              --- ^^^ expected `&Param`, found `Param`
    |                              |
    |                              arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
367 |         let val = match self.get(&key) {
    |                                  +

error[E0308]: mismatched types
   --> src/param.rs:413:34
    |
413 |         let val = match self.get(key) {
    |                              --- ^^^ expected `&Param`, found `Param`
    |                              |
    |                              arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
413 |         let val = match self.get(&key) {
    |                                  +

Some errors have detailed explanations: E0308, E0599.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `deltachat` (lib) due to 57 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
    --> src/chat.rs:7282:27
     |
7282 |             msg.param.get(Param::File),
     |                       --- ^^^^^^^^^^^ expected `&Param`, found `Param`
     |                       |
     |                       arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
7282 |             msg.param.get(&Param::File),
     |                           +

error[E0308]: mismatched types
    --> src/mimeparser.rs:2762:22
     |
2762 |                 .get(Param::WebrtcRoom)
     |                  --- ^^^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                  |
     |                  arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
2762 |                 .get(&Param::WebrtcRoom)
     |                      +

error[E0308]: mismatched types
    --> src/mimeparser.rs:3378:40
     |
3378 |             message.parts[0].param.get(Param::Quote).unwrap(),
     |                                    --- ^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                    |
     |                                    arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
3378 |             message.parts[0].param.get(&Param::Quote).unwrap(),
     |                                        +

error[E0308]: mismatched types
    --> src/mimeparser.rs:3410:40
     |
3410 |             message.parts[0].param.get(Param::Quote).unwrap(),
     |                                    --- ^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                    |
     |                                    arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
3410 |             message.parts[0].param.get(&Param::Quote).unwrap(),
     |                                        +

error[E0308]: mismatched types
    --> src/mimeparser.rs:3441:40
     |
3441 |             message.parts[0].param.get(Param::Quote).unwrap(),
     |                                    --- ^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                    |
     |                                    arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
3441 |             message.parts[0].param.get(&Param::Quote).unwrap(),
     |                                        +

error[E0308]: mismatched types
    --> src/mimeparser.rs:3459:43
     |
3459 |             mimeparser.parts[0].param.get(Param::Quote).unwrap(),
     |                                       --- ^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                       |
     |                                       arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
3459 |             mimeparser.parts[0].param.get(&Param::Quote).unwrap(),
     |                                           +

error[E0308]: mismatched types
    --> src/mimeparser.rs:3471:50
     |
3471 |         assert_eq!(mimeparser.parts[0].param.get(Param::Quote).unwrap(), "Now?");
     |                                              --- ^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                              |
     |                                              arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
3471 |         assert_eq!(mimeparser.parts[0].param.get(&Param::Quote).unwrap(), "Now?");
     |                                                  +

error[E0308]: mismatched types
    --> src/mimeparser.rs:3482:43
     |
3482 |             mimeparser.parts[0].param.get(Param::Quote).unwrap(),
     |                                       --- ^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                       |
     |                                       arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
3482 |             mimeparser.parts[0].param.get(&Param::Quote).unwrap(),
     |                                           +

error[E0308]: mismatched types
    --> src/mimeparser.rs:3856:45
     |
3856 |             mime_message.parts[0].param.get(Param::File),
     |                                         --- ^^^^^^^^^^^ expected `&Param`, found `Param`
     |                                         |
     |                                         arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
3856 |             mime_message.parts[0].param.get(&Param::File),
     |                                             +

error[E0599]: no method named `is_empty` found for reference `&param::Param` in the current scope
   --> src/param.rs:280:12
    |
280 |     if key.is_empty() {
    |            ^^^^^^^^ method not found in `&Param`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `is_empty`, perhaps you need to implement one of them:
            candidate #1: `ExactSizeIterator`
            candidate #2: `bitflags::traits::Flags`
            candidate #3: `SampleRange`
            candidate #4: `gimli::read::reader::Reader`
            candidate #5: `aead::Buffer`
            candidate #6: `nix::NixPath`
            candidate #7: `governor::state::keyed::ShrinkableKeyedStateStore`
            candidate #8: `toml_edit::table::TableLike`

error[E0308]: mismatched types
   --> src/param.rs:582:26
    |
582 |         assert_eq!(p.get(Param::Width), Some("12"));
    |                      --- ^^^^^^^^^^^^ expected `&Param`, found `Param`
    |                      |
    |                      arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
582 |         assert_eq!(p.get(&Param::Width), Some("12"));
    |                          +

error[E0308]: mismatched types
   --> src/param.rs:583:26
    |
583 |         assert_eq!(p.get(Param::Height), Some("14"));
    |                      --- ^^^^^^^^^^^^^ expected `&Param`, found `Param`
    |                      |
    |                      arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
583 |         assert_eq!(p.get(&Param::Height), Some("14"));
    |                          +

error[E0308]: mismatched types
   --> src/update_helper.rs:150:28
    |
150 |             chat.param.get(Param::LastSubject).unwrap(),
    |                        --- ^^^^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
    |                        |
    |                        arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
150 |             chat.param.get(&Param::LastSubject).unwrap(),
    |                            +

error[E0308]: mismatched types
   --> src/receive_imf/tests.rs:984:30
    |
984 |         first_chat.param.get(Param::ListPost).unwrap(),
    |                          --- ^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
    |                          |
    |                          arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
984 |         first_chat.param.get(&Param::ListPost).unwrap(),
    |                              +

error[E0308]: mismatched types
   --> src/receive_imf/tests.rs:994:37
    |
994 |         list_post_contact.param.get(Param::ListId).unwrap(),
    |                                 --- ^^^^^^^^^^^^^ expected `&Param`, found `Param`
    |                                 |
    |                                 arguments to this method are incorrect
    |
note: method defined here
   --> src/param.rs:279:8
    |
279 | pub fn get(&self, key: &Param) -> Option<&'static str> {
    |        ^^^        -----------
help: consider borrowing here
    |
994 |         list_post_contact.param.get(&Param::ListId).unwrap(),
    |                                     +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:1460:27
     |
1460 |         contact.param.get(Param::ListId).unwrap(),
     |                       --- ^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                       |
     |                       arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1460 |         contact.param.get(&Param::ListId).unwrap(),
     |                           +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:1558:35
     |
1558 |     let file_path = msg.param.get(Param::File).unwrap();
     |                               --- ^^^^^^^^^^^ expected `&Param`, found `Param`
     |                               |
     |                               arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1558 |     let file_path = msg.param.get(&Param::File).unwrap();
     |                                   +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:1574:35
     |
1574 |     let file_path = msg.param.get(Param::File).unwrap();
     |                               --- ^^^^^^^^^^^ expected `&Param`, found `Param`
     |                               |
     |                               arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
1574 |     let file_path = msg.param.get(&Param::File).unwrap();
     |                                   +

error[E0308]: mismatched types
    --> src/receive_imf/tests.rs:3015:26
     |
3015 |         msg_in.param.get(Param::OverrideSenderDisplayname),
     |                      --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&Param`, found `Param`
     |                      |
     |                      arguments to this method are incorrect
     |
note: method defined here
    --> src/param.rs:279:8
     |
279  | pub fn get(&self, key: &Param) -> Option<&'static str> {
     |        ^^^        -----------
help: consider borrowing here
     |
3015 |         msg_in.param.get(&Param::OverrideSenderDisplayname),
     |                          +

error: could not compile `deltachat` (lib test) due to 75 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


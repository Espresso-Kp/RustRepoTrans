Fail
file path is :
projects/deltachat-core/rust/src/pgp.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0425]: cannot find value `PGP_KEY_ID_SIZE` in this scope
   --> src/pgp.rs:154:30
    |
154 |     let mut subkeyid = [0u8; PGP_KEY_ID_SIZE];
    |                              ^^^^^^^^^^^^^^^ not found in this scope

error[E0433]: failed to resolve: could not find `signed_message` in `composed`
   --> src/pgp.rs:156:37
    |
156 |     let mut pubmem = pgp::composed::signed_message::SignedPublicKey::new();
    |                                     ^^^^^^^^^^^^^^ could not find `signed_message` in `composed`
    |
help: consider importing one of these items
    |
3   + use crate::key::SignedPublicKey;
    |
3   + use pgp::SignedPublicKey;
    |
help: if you import `SignedPublicKey`, refer to it directly
    |
156 -     let mut pubmem = pgp::composed::signed_message::SignedPublicKey::new();
156 +     let mut pubmem = SignedPublicKey::new();
    |

error[E0433]: failed to resolve: could not find `signed_message` in `composed`
   --> src/pgp.rs:157:37
    |
157 |     let mut secmem = pgp::composed::signed_message::SignedSecretKey::new();
    |                                     ^^^^^^^^^^^^^^ could not find `signed_message` in `composed`
    |
help: consider importing one of these items
    |
3   + use crate::key::SignedSecretKey;
    |
3   + use pgp::SignedSecretKey;
    |
help: if you import `SignedSecretKey`, refer to it directly
    |
157 -     let mut secmem = pgp::composed::signed_message::SignedSecretKey::new();
157 +     let mut secmem = SignedSecretKey::new();
    |

error[E0425]: cannot find value `DC_KEYGEN_BITS` in this scope
   --> src/pgp.rs:164:46
    |
164 |     if !seckey.generate_keypair(&mut pubkey, DC_KEYGEN_BITS, DC_KEYGEN_E, None, None, None, 0)
    |                                              ^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_KEYGEN_E` in this scope
   --> src/pgp.rs:164:62
    |
164 |     if !seckey.generate_keypair(&mut pubkey, DC_KEYGEN_BITS, DC_KEYGEN_E, None, None, None, 0)
    |                                                              ^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_KEYGEN_BITS` in this scope
   --> src/pgp.rs:165:49
    |
165 |        || !subkey.generate_keypair(&mut seckey, DC_KEYGEN_BITS, DC_KEYGEN_E, None, None, None, 0) {
    |                                                 ^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_KEYGEN_E` in this scope
   --> src/pgp.rs:165:65
    |
165 |        || !subkey.generate_keypair(&mut seckey, DC_KEYGEN_BITS, DC_KEYGEN_E, None, None, None, 0) {
    |                                                                 ^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_KEY_PUBLIC` in this scope
   --> src/pgp.rs:185:57
    |
185 |     let ret_public_key = DcKey::from_slice(&pubmem.buf, DC_KEY_PUBLIC);
    |                                                         ^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `DC_KEY_PRIVATE` in this scope
   --> src/pgp.rs:186:58
    |
186 |     let ret_private_key = DcKey::from_slice(&secmem.buf, DC_KEY_PRIVATE);
    |                                                          ^^^^^^^^^^^^^^ not found in this scope

warning: unused `#[macro_use]` import
  --> src/lib.rs:31:1
   |
31 | #[macro_use]
   | ^^^^^^^^^^^^
   |
note: the lint level is defined here
  --> src/lib.rs:6:5
   |
6  |     unused,
   |     ^^^^^^
   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused imports: `SecretKeyParamsBuilder`, `SubkeyParamsBuilder`
  --> src/pgp.rs:11:53
   |
11 |     Deserializable, KeyType as PgpKeyType, Message, SecretKeyParamsBuilder, SignedPublicKey,
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^
12 |     SignedPublicSubKey, SignedSecretKey, StandaloneSignature, SubkeyParamsBuilder,
   |                                                               ^^^^^^^^^^^^^^^^^^^

warning: unused import: `SecretKeyTrait`
  --> src/pgp.rs:17:58
   |
17 |     CompressionAlgorithm, KeyTrait, Mpi, PublicKeyTrait, SecretKeyTrait, StringToKey,
   |                                                          ^^^^^^^^^^^^^^

error[E0599]: no method named `is_empty` found for struct `deltachat_contact_tools::EmailAddress` in the current scope
   --> src/pgp.rs:147:13
    |
147 |     if addr.is_empty() {
    |             ^^^^^^^^ method not found in `EmailAddress`
    |
help: some of the expressions' fields have a method of the same name
    |
147 |     if addr.domain.is_empty() {
    |             +++++++
147 |     if addr.local.is_empty() {
    |             ++++++

error[E0599]: no variant or associated item named `new` found for enum `KeyType` in the current scope
   --> src/pgp.rs:151:34
    |
151 |     let mut seckey = PgpKeyType::new();
    |                                  ^^^ variant or associated item not found in `KeyType`

error[E0599]: no variant or associated item named `new` found for enum `KeyType` in the current scope
   --> src/pgp.rs:152:34
    |
152 |     let mut pubkey = PgpKeyType::new();
    |                                  ^^^ variant or associated item not found in `KeyType`

error[E0599]: no variant or associated item named `new` found for enum `KeyType` in the current scope
   --> src/pgp.rs:153:34
    |
153 |     let mut subkey = PgpKeyType::new();
    |                                  ^^^ variant or associated item not found in `KeyType`

error[E0425]: cannot find function `add_selfsigned_userid` in this scope
   --> src/pgp.rs:172:5
    |
172 |     add_selfsigned_userid(&seckey, &pubkey, user_id.as_ref().map(|s| s.as_bytes()), 0).unwrap();
    |     ^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `add_subkey_binding_signature` in this scope
   --> src/pgp.rs:173:5
    |
173 |     add_subkey_binding_signature(&mut pubkey, &mut subkey, &mut seckey).unwrap();
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `pgp_writer_set_memory` in this scope
   --> src/pgp.rs:175:5
    |
175 |     pgp_writer_set_memory(&mut pubout, &mut pubmem);
    |     ^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `krb5_write_key` in this scope
   --> src/pgp.rs:176:5
    |
176 |     krb5_write_key(&mut pubout, &pubkey, false).unwrap();
    |     ^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `pgp_writer_set_memory` in this scope
   --> src/pgp.rs:178:5
    |
178 |     pgp_writer_set_memory(&mut secout, &mut secmem);
    |     ^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `krb5_write_key` in this scope
   --> src/pgp.rs:179:5
    |
179 |     krb5_write_key(&mut secout, &seckey, false).unwrap();
    |     ^^^^^^^^^^^^^^ not found in this scope

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> src/pgp.rs:185:26
    |
185 |     let ret_public_key = DcKey::from_slice(&pubmem.buf, DC_KEY_PUBLIC);
    |                          ^^^^^^^^^^^^^^^^^            ---------------
    |                                                       | |
    |                                                       | unexpected argument
    |                                                       help: remove the extra argument
    |
note: associated function defined here
   --> src/key.rs:31:8
    |
31  |     fn from_slice(bytes: &[u8]) -> Result<Self> {
    |        ^^^^^^^^^^ ------------

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> src/pgp.rs:186:27
    |
186 |     let ret_private_key = DcKey::from_slice(&secmem.buf, DC_KEY_PRIVATE);
    |                           ^^^^^^^^^^^^^^^^^            ----------------
    |                                                        | |
    |                                                        | unexpected argument
    |                                                        help: remove the extra argument
    |
note: associated function defined here
   --> src/key.rs:31:8
    |
31  |     fn from_slice(bytes: &[u8]) -> Result<Self> {
    |        ^^^^^^^^^^ ------------

error[E0308]: mismatched types
   --> src/pgp.rs:190:17
    |
190 |         public: ret_public_key,
    |                 ^^^^^^^^^^^^^^ expected `SignedPublicKey`, found `Result<_, Error>`
    |
    = note: expected struct `SignedPublicKey`
                 found enum `std::result::Result<_, anyhow::Error>`
help: use the `?` operator to extract the `std::result::Result<_, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
190 |         public: ret_public_key?,
    |                               +

error[E0308]: mismatched types
   --> src/pgp.rs:191:17
    |
191 |         secret: ret_private_key,
    |                 ^^^^^^^^^^^^^^^ expected `SignedSecretKey`, found `Result<_, Error>`
    |
    = note: expected struct `SignedSecretKey`
                 found enum `std::result::Result<_, anyhow::Error>`
help: use the `?` operator to extract the `std::result::Result<_, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
191 |         secret: ret_private_key?,
    |                                +

Some errors have detailed explanations: E0061, E0308, E0425, E0433, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `deltachat` (lib) generated 3 warnings
error: could not compile `deltachat` (lib) due to 23 previous errors; 3 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
   --> src/pgp.rs:190:17
    |
190 |         public: ret_public_key,
    |                 ^^^^^^^^^^^^^^ expected `SignedPublicKey`, found `Result<_, Error>`
    |
    = note: expected struct `pgp::SignedPublicKey`
                 found enum `std::result::Result<_, anyhow::Error>`
help: use the `?` operator to extract the `std::result::Result<_, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
190 |         public: ret_public_key?,
    |                               +

error[E0308]: mismatched types
   --> src/pgp.rs:191:17
    |
191 |         secret: ret_private_key,
    |                 ^^^^^^^^^^^^^^^ expected `SignedSecretKey`, found `Result<_, Error>`
    |
    = note: expected struct `pgp::SignedSecretKey`
                 found enum `std::result::Result<_, anyhow::Error>`
help: use the `?` operator to extract the `std::result::Result<_, anyhow::Error>` value, propagating a `Result::Err` value to the caller
    |
191 |         secret: ret_private_key?,
    |                                +

warning: `deltachat` (lib test) generated 3 warnings (3 duplicates)
error: could not compile `deltachat` (lib test) due to 23 previous errors; 3 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


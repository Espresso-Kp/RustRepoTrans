Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0599]: no method named `id` found for reference `&datatypes::NestedField` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:304:26
    |
304 |     let field_id = field.id();
    |                          ^^-- help: remove the arguments
    |                          |
    |                          field, not a method

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:307:49
    |
307 |         return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                                                 ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:307:20
    |
307 |         return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                    ^^^^^^^^^^^^^^^^^---------------------------- an argument is missing
    |
note: associated function defined here
   --> crates/iceberg/src/error.rs:197:12
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |            ^^^ ---------------  --------------------------
help: provide the argument
    |
307 |         return Err(crate::Error::new(ErrorKind::RowsCannotMatch, /* message */));
    |                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `field_type` found for reference `&datatypes::NestedField` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:310:14
    |
310 |     if!field.field_type().is_primitive() {
    |              ^^^^^^^^^^-- help: remove the arguments
    |              |
    |              field, not a method

error[E0599]: no variant or associated item named `InvalidType` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:311:49
    |
311 |         return Err(crate::Error::new(ErrorKind::InvalidType));
    |                                                 ^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `InvalidType` not found for this enum

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:311:20
    |
311 |         return Err(crate::Error::new(ErrorKind::InvalidType));
    |                    ^^^^^^^^^^^^^^^^^------------------------ an argument is missing
    |
note: associated function defined here
   --> crates/iceberg/src/error.rs:197:12
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |            ^^^ ---------------  --------------------------
help: provide the argument
    |
311 |         return Err(crate::Error::new(ErrorKind::InvalidType, /* message */));
    |                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: can't compare `str` with `std::string::String`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:319:81
    |
319 |         if lower_bound_str.len() > len_prefix && &lower_bound_str[..len_prefix] > &prefix {
    |                                                                                 ^ no implementation for `str < std::string::String` and `str > std::string::String`
    |
    = help: the trait `PartialOrd<std::string::String>` is not implemented for `str`, which is required by `&str: PartialOrd<&std::string::String>`
    = note: required for `&str` to implement `PartialOrd<&std::string::String>`
help: consider dereferencing both sides of the expression
    |
319 -         if lower_bound_str.len() > len_prefix && &lower_bound_str[..len_prefix] > &prefix {
319 +         if lower_bound_str.len() > len_prefix && lower_bound_str[..len_prefix] > *prefix {
    |

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:320:53
    |
320 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                                                     ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:320:24
    |
320 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                        ^^^^^^^^^^^^^^^^^---------------------------- an argument is missing
    |
note: associated function defined here
   --> crates/iceberg/src/error.rs:197:12
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |            ^^^ ---------------  --------------------------
help: provide the argument
    |
320 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch, /* message */));
    |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: can't compare `str` with `std::string::String`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:326:81
    |
326 |         if upper_bound_str.len() > len_prefix && &upper_bound_str[..len_prefix] < &prefix {
    |                                                                                 ^ no implementation for `str < std::string::String` and `str > std::string::String`
    |
    = help: the trait `PartialOrd<std::string::String>` is not implemented for `str`, which is required by `&str: PartialOrd<&std::string::String>`
    = note: required for `&str` to implement `PartialOrd<&std::string::String>`
help: consider dereferencing both sides of the expression
    |
326 -         if upper_bound_str.len() > len_prefix && &upper_bound_str[..len_prefix] < &prefix {
326 +         if upper_bound_str.len() > len_prefix && upper_bound_str[..len_prefix] < *prefix {
    |

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:327:53
    |
327 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                                                     ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:327:24
    |
327 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                        ^^^^^^^^^^^^^^^^^---------------------------- an argument is missing
    |
note: associated function defined here
   --> crates/iceberg/src/error.rs:197:12
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |            ^^^ ---------------  --------------------------
help: provide the argument
    |
327 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch, /* message */));
    |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0061, E0277, E0599.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `iceberg` (lib) due to 12 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 12 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0599]: no method named `id` found for reference `&datatypes::NestedField` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:304:26
    |
304 |     let field_id = field.id();
    |                          ^^-- help: remove the arguments
    |                          |
    |                          field, not a method

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:307:49
    |
307 |         return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                                                 ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:307:20
    |
307 |         return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                    ^^^^^^^^^^^^^^^^^---------------------------- an argument is missing
    |
note: associated function defined here
   --> crates/iceberg/src/error.rs:197:12
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |            ^^^ ---------------  --------------------------
help: provide the argument
    |
307 |         return Err(crate::Error::new(ErrorKind::RowsCannotMatch, /* message */));
    |                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `field_type` found for reference `&datatypes::NestedField` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:310:14
    |
310 |     if!field.field_type().is_primitive() {
    |              ^^^^^^^^^^-- help: remove the arguments
    |              |
    |              field, not a method

error[E0599]: no variant or associated item named `InvalidType` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:311:49
    |
311 |         return Err(crate::Error::new(ErrorKind::InvalidType));
    |                                                 ^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `InvalidType` not found for this enum

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:311:20
    |
311 |         return Err(crate::Error::new(ErrorKind::InvalidType));
    |                    ^^^^^^^^^^^^^^^^^------------------------ an argument is missing
    |
note: associated function defined here
   --> crates/iceberg/src/error.rs:197:12
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |            ^^^ ---------------  --------------------------
help: provide the argument
    |
311 |         return Err(crate::Error::new(ErrorKind::InvalidType, /* message */));
    |                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: can't compare `str` with `std::string::String`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:319:81
    |
319 |         if lower_bound_str.len() > len_prefix && &lower_bound_str[..len_prefix] > &prefix {
    |                                                                                 ^ no implementation for `str < std::string::String` and `str > std::string::String`
    |
    = help: the trait `PartialOrd<std::string::String>` is not implemented for `str`, which is required by `&str: PartialOrd<&std::string::String>`
    = note: required for `&str` to implement `PartialOrd<&std::string::String>`
help: consider dereferencing both sides of the expression
    |
319 -         if lower_bound_str.len() > len_prefix && &lower_bound_str[..len_prefix] > &prefix {
319 +         if lower_bound_str.len() > len_prefix && lower_bound_str[..len_prefix] > *prefix {
    |

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:320:53
    |
320 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                                                     ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:320:24
    |
320 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                        ^^^^^^^^^^^^^^^^^---------------------------- an argument is missing
    |
note: associated function defined here
   --> crates/iceberg/src/error.rs:197:12
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |            ^^^ ---------------  --------------------------
help: provide the argument
    |
320 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch, /* message */));
    |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: can't compare `str` with `std::string::String`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:326:81
    |
326 |         if upper_bound_str.len() > len_prefix && &upper_bound_str[..len_prefix] < &prefix {
    |                                                                                 ^ no implementation for `str < std::string::String` and `str > std::string::String`
    |
    = help: the trait `PartialOrd<std::string::String>` is not implemented for `str`, which is required by `&str: PartialOrd<&std::string::String>`
    = note: required for `&str` to implement `PartialOrd<&std::string::String>`
help: consider dereferencing both sides of the expression
    |
326 -         if upper_bound_str.len() > len_prefix && &upper_bound_str[..len_prefix] < &prefix {
326 +         if upper_bound_str.len() > len_prefix && upper_bound_str[..len_prefix] < *prefix {
    |

error[E0599]: no variant or associated item named `RowsCannotMatch` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:327:53
    |
327 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                                                     ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `RowsCannotMatch` not found for this enum

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:327:24
    |
327 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch));
    |                        ^^^^^^^^^^^^^^^^^---------------------------- an argument is missing
    |
note: associated function defined here
   --> crates/iceberg/src/error.rs:197:12
    |
197 |     pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
    |            ^^^ ---------------  --------------------------
help: provide the argument
    |
327 |             return Err(crate::Error::new(ErrorKind::RowsCannotMatch, /* message */));
    |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0061, E0277, E0599.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `iceberg` (lib) due to 12 previous errors


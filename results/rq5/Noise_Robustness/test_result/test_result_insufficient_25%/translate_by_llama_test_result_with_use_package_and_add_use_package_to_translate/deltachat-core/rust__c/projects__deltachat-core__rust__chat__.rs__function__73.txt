Fail
file path is :
projects/deltachat-core/rust/src/chat.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0425]: cannot find value `DC_PARAM_PROFILE_IMAGE` in this scope
    --> src/chat.rs:1742:36
     |
1742 |     let image_rel = self.param.get(DC_PARAM_PROFILE_IMAGE).await?;
     |                                    ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0599]: no method named `is_none_or_empty` found for reference `&Chat` in the current scope
    --> src/chat.rs:1738:13
     |
1738 |     if self.is_none_or_empty() {
     |             ^^^^^^^^^^^^^^^^ method not found in `&Chat`
     |
     = help: items from traits can only be used if the trait is implemented and in scope
note: `IsNoneOrEmpty` defines an item `is_none_or_empty`, perhaps you need to implement it
    --> src/tools.rs:521:1
     |
521  | pub(crate) trait IsNoneOrEmpty<T> {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `std::option::Option<&str>` is not a future
    --> src/chat.rs:1742:60
     |
1742 |     let image_rel = self.param.get(DC_PARAM_PROFILE_IMAGE).await?;
     |                                                           -^^^^^
     |                                                           ||
     |                                                           |`std::option::Option<&str>` is not a future
     |                                                           help: remove the `.await`
     |
     = help: the trait `futures::Future` is not implemented for `std::option::Option<&str>`, which is required by `std::option::Option<&str>: std::future::IntoFuture`
     = note: std::option::Option<&str> must be a future or must implement `IntoFuture` to be awaited
     = note: required for `std::option::Option<&str>` to implement `std::future::IntoFuture`

error[E0277]: `PathBuf` is not a future
    --> src/chat.rs:1744:66
     |
1744 |         let image_abs = get_abs_path(context, image_rel.clone()).await?;
     |                         ---------------------------------------- ^^^^^ `PathBuf` is not a future
     |                         |
     |                         this call returns `PathBuf`
     |
     = help: the trait `futures::Future` is not implemented for `PathBuf`, which is required by `PathBuf: std::future::IntoFuture`
     = note: PathBuf must be a future or must implement `IntoFuture` to be awaited
     = note: required for `PathBuf` to implement `std::future::IntoFuture`
help: remove the `.await`
     |
1744 -         let image_abs = get_abs_path(context, image_rel.clone()).await?;
1744 +         let image_abs = get_abs_path(context, image_rel.clone())?;
     |
help: alternatively, consider making `fn get_abs_path` asynchronous
    -->  src/tools.rs:315:11
     |
315  | pub(crate) async fn get_abs_path(context: &Context, path: &Path) -> PathBuf {
     |            +++++

error[E0599]: no method named `is_some` found for struct `std::string::String` in the current scope
    --> src/chat.rs:1750:22
     |
1750 |         if image_rel.is_some() {
     |                      ^^^^^^^ method not found in `String`

error[E0308]: mismatched types
    --> src/chat.rs:1751:51
     |
1751 |             let image_abs = get_abs_path(context, image_rel.clone()).await?;
     |                             ------------          ^^^^^^^^^^^^^^^^^ expected `&Path`, found `String`
     |                             |
     |                             arguments to this function are incorrect
     |
note: function defined here
    --> src/tools.rs:315:15
     |
315  | pub(crate) fn get_abs_path(context: &Context, path: &Path) -> PathBuf {
     |               ^^^^^^^^^^^^                    -----------

error[E0277]: `PathBuf` is not a future
    --> src/chat.rs:1751:70
     |
1751 |             let image_abs = get_abs_path(context, image_rel.clone()).await?;
     |                             ---------------------------------------- ^^^^^ `PathBuf` is not a future
     |                             |
     |                             this call returns `PathBuf`
     |
     = help: the trait `futures::Future` is not implemented for `PathBuf`, which is required by `PathBuf: std::future::IntoFuture`
     = note: PathBuf must be a future or must implement `IntoFuture` to be awaited
     = note: required for `PathBuf` to implement `std::future::IntoFuture`
help: remove the `.await`
     |
1751 -             let image_abs = get_abs_path(context, image_rel.clone()).await?;
1751 +             let image_abs = get_abs_path(context, image_rel.clone())?;
     |
help: alternatively, consider making `fn get_abs_path` asynchronous
    -->  src/tools.rs:315:11
     |
315  | pub(crate) async fn get_abs_path(context: &Context, path: &Path) -> PathBuf {
     |            +++++

error[E0609]: no field `count` on type `Vec<ContactId>`
    --> src/chat.rs:1758:21
     |
1758 |         if contacts.count >= 1 {
     |                     ^^^^^ unknown field

error[E0609]: no field `array` on type `Vec<ContactId>`
    --> src/chat.rs:1759:57
     |
1759 |             let contact = get_contact(context, contacts.array[0]).await?;
     |                                                         ^^^^^ unknown field

error[E0425]: cannot find function `get_contact` in this scope
    --> src/chat.rs:1759:27
     |
1759 |             let contact = get_contact(context, contacts.array[0]).await?;
     |                           ^^^^^^^^^^^ not found in this scope

error[E0599]: no method named `is_some` found for struct `std::string::String` in the current scope
    --> src/chat.rs:1767:22
     |
1767 |         if image_rel.is_some() {
     |                      ^^^^^^^ method not found in `String`

error[E0308]: mismatched types
    --> src/chat.rs:1768:51
     |
1768 |             let image_abs = get_abs_path(context, image_rel.clone()).await?;
     |                             ------------          ^^^^^^^^^^^^^^^^^ expected `&Path`, found `String`
     |                             |
     |                             arguments to this function are incorrect
     |
note: function defined here
    --> src/tools.rs:315:15
     |
315  | pub(crate) fn get_abs_path(context: &Context, path: &Path) -> PathBuf {
     |               ^^^^^^^^^^^^                    -----------

error[E0277]: `PathBuf` is not a future
    --> src/chat.rs:1768:70
     |
1768 |             let image_abs = get_abs_path(context, image_rel.clone()).await?;
     |                             ---------------------------------------- ^^^^^ `PathBuf` is not a future
     |                             |
     |                             this call returns `PathBuf`
     |
     = help: the trait `futures::Future` is not implemented for `PathBuf`, which is required by `PathBuf: std::future::IntoFuture`
     = note: PathBuf must be a future or must implement `IntoFuture` to be awaited
     = note: required for `PathBuf` to implement `std::future::IntoFuture`
help: remove the `.await`
     |
1768 -             let image_abs = get_abs_path(context, image_rel.clone()).await?;
1768 +             let image_abs = get_abs_path(context, image_rel.clone())?;
     |
help: alternatively, consider making `fn get_abs_path` asynchronous
    -->  src/tools.rs:315:11
     |
315  | pub(crate) async fn get_abs_path(context: &Context, path: &Path) -> PathBuf {
     |            +++++

error[E0599]: no method named `is_none_or_empty` found for reference `&chat::Chat` in the current scope
    --> src/chat.rs:1738:13
     |
1738 |     if self.is_none_or_empty() {
     |             ^^^^^^^^^^^^^^^^ method not found in `&Chat`
     |
     = help: items from traits can only be used if the trait is implemented and in scope
note: `IsNoneOrEmpty` defines an item `is_none_or_empty`, perhaps you need to implement it
    --> src/tools.rs:521:1
     |
521  | pub(crate) trait IsNoneOrEmpty<T> {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `std::path::PathBuf` is not a future
    --> src/chat.rs:1744:66
     |
1744 |         let image_abs = get_abs_path(context, image_rel.clone()).await?;
     |                         ---------------------------------------- ^^^^^ `std::path::PathBuf` is not a future
     |                         |
     |                         this call returns `std::path::PathBuf`
     |
     = help: the trait `futures::Future` is not implemented for `std::path::PathBuf`, which is required by `std::path::PathBuf: std::future::IntoFuture`
     = note: std::path::PathBuf must be a future or must implement `IntoFuture` to be awaited
     = note: required for `std::path::PathBuf` to implement `std::future::IntoFuture`
help: remove the `.await`
     |
1744 -         let image_abs = get_abs_path(context, image_rel.clone()).await?;
1744 +         let image_abs = get_abs_path(context, image_rel.clone())?;
     |
help: alternatively, consider making `fn get_abs_path` asynchronous
    -->  src/tools.rs:315:11
     |
315  | pub(crate) async fn get_abs_path(context: &Context, path: &Path) -> PathBuf {
     |            +++++

error[E0277]: `std::path::PathBuf` is not a future
    --> src/chat.rs:1751:70
     |
1751 |             let image_abs = get_abs_path(context, image_rel.clone()).await?;
     |                             ---------------------------------------- ^^^^^ `std::path::PathBuf` is not a future
     |                             |
     |                             this call returns `std::path::PathBuf`
     |
     = help: the trait `futures::Future` is not implemented for `std::path::PathBuf`, which is required by `std::path::PathBuf: std::future::IntoFuture`
     = note: std::path::PathBuf must be a future or must implement `IntoFuture` to be awaited
     = note: required for `std::path::PathBuf` to implement `std::future::IntoFuture`
help: remove the `.await`
     |
1751 -             let image_abs = get_abs_path(context, image_rel.clone()).await?;
1751 +             let image_abs = get_abs_path(context, image_rel.clone())?;
     |
help: alternatively, consider making `fn get_abs_path` asynchronous
    -->  src/tools.rs:315:11
     |
315  | pub(crate) async fn get_abs_path(context: &Context, path: &Path) -> PathBuf {
     |            +++++

error[E0609]: no field `count` on type `Vec<contact::ContactId>`
    --> src/chat.rs:1758:21
     |
1758 |         if contacts.count >= 1 {
     |                     ^^^^^ unknown field

error[E0609]: no field `array` on type `Vec<contact::ContactId>`
    --> src/chat.rs:1759:57
     |
1759 |             let contact = get_contact(context, contacts.array[0]).await?;
     |                                                         ^^^^^ unknown field

error[E0277]: `std::path::PathBuf` is not a future
    --> src/chat.rs:1768:70
     |
1768 |             let image_abs = get_abs_path(context, image_rel.clone()).await?;
     |                             ---------------------------------------- ^^^^^ `std::path::PathBuf` is not a future
     |                             |
     |                             this call returns `std::path::PathBuf`
     |
     = help: the trait `futures::Future` is not implemented for `std::path::PathBuf`, which is required by `std::path::PathBuf: std::future::IntoFuture`
     = note: std::path::PathBuf must be a future or must implement `IntoFuture` to be awaited
     = note: required for `std::path::PathBuf` to implement `std::future::IntoFuture`
help: remove the `.await`
     |
1768 -             let image_abs = get_abs_path(context, image_rel.clone()).await?;
1768 +             let image_abs = get_abs_path(context, image_rel.clone())?;
     |
help: alternatively, consider making `fn get_abs_path` asynchronous
    -->  src/tools.rs:315:11
     |
315  | pub(crate) async fn get_abs_path(context: &Context, path: &Path) -> PathBuf {
     |            +++++

Some errors have detailed explanations: E0277, E0308, E0425, E0599, E0609.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `deltachat` (lib) due to 13 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 13 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


Fail
file path is :
projects/deltachat-core/rust/src/contact.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error: cannot find macro `anyhow` in this scope
   --> src/contact.rs:974:128
    |
974 |     for (name, addr) in lines.chunks(2).map(|chunk| (chunk.first().ok_or(anyhow!("Invalid address book"))?, chunk.get(1).ok_or(anyhow!("I...
    |                                                                                                                                ^^^^^^
    |
    = note: `anyhow` is in scope, but it is a crate, not a macro
help: consider importing this macro
    |
3   + use anyhow::anyhow;
    |

error: cannot find macro `anyhow` in this scope
   --> src/contact.rs:974:74
    |
974 |     for (name, addr) in lines.chunks(2).map(|chunk| (chunk.first().ok_or(anyhow!("Invalid address book"))?, chunk.get(1).ok_or(anyhow!("I...
    |                                                                          ^^^^^^
    |
    = note: `anyhow` is in scope, but it is a crate, not a macro
help: consider importing this macro
    |
3   + use anyhow::anyhow;
    |

error: cannot find macro `anyhow` in this scope
   --> src/contact.rs:970:20
    |
970 |         return Err(anyhow!("Invalid context or address book"));
    |                    ^^^^^^
    |
    = note: `anyhow` is in scope, but it is a crate, not a macro
help: consider importing this macro
    |
3   + use anyhow::anyhow;
    |

error[E0425]: cannot find value `DC_CONTEXT_MAGIC` in this scope
   --> src/contact.rs:969:47
    |
969 |     if context.is_none() || context.magic()!= DC_CONTEXT_MAGIC || addr_book.is_none() {
    |                                               ^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `normalize_name` in this scope
   --> src/contact.rs:975:20
    |
975 |         let name = normalize_name(name);
    |                    ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
3   + use crate::contact::contact_tools::normalize_name;
    |
3   + use deltachat_contact_tools::normalize_name;
    |

error[E0425]: cannot find value `DC_ORIGIN_ADRESS_BOOK` in this scope
   --> src/contact.rs:978:70
    |
978 |         let sth_modified = context.add_or_lookup_contact(name, addr, DC_ORIGIN_ADRESS_BOOK).await?;
    |                                                                      ^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0277]: `Vec<(&str, &str)>` is not a future
   --> src/contact.rs:966:47
    |
966 |     let lines = split_address_book(addr_book).await?;
    |                 ----------------------------- ^^^^^ `Vec<(&str, &str)>` is not a future
    |                 |
    |                 this call returns `Vec<(&str, &str)>`
    |
    = help: the trait `futures::Future` is not implemented for `Vec<(&str, &str)>`, which is required by `Vec<(&str, &str)>: std::future::IntoFuture`
    = note: Vec<(&str, &str)> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `Vec<(&str, &str)>` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
966 -     let lines = split_address_book(addr_book).await?;
966 +     let lines = split_address_book(addr_book)?;
    |
help: alternatively, consider making `fn split_address_book` asynchronous
    |
1765| async fn split_address_book(book: &str) -> Vec<(&str, &str)> {
    | +++++

error[E0599]: no method named `is_none` found for reference `&context::Context` in the current scope
   --> src/contact.rs:969:16
    |
969 |     if context.is_none() || context.magic()!= DC_CONTEXT_MAGIC || addr_book.is_none() {
    |                ^^^^^^^ method not found in `&Context`

error[E0599]: no method named `magic` found for reference `&context::Context` in the current scope
   --> src/contact.rs:969:37
    |
969 |     if context.is_none() || context.magic()!= DC_CONTEXT_MAGIC || addr_book.is_none() {
    |                                     ^^^^^ method not found in `&Context`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `magic`, perhaps you need to implement one of them:
            candidate #1: `object::read::macho::MachHeader`
            candidate #2: `object::read::pe::ImageOptionalHeader`

error[E0599]: no method named `is_none` found for reference `&str` in the current scope
   --> src/contact.rs:969:77
    |
969 |     if context.is_none() || context.magic()!= DC_CONTEXT_MAGIC || addr_book.is_none() {
    |                                                                             ^^^^^^^ method not found in `&str`

error[E0599]: no method named `sql` found for reference `&context::Context` in the current scope
   --> src/contact.rs:973:26
    |
973 |     let mut tx = context.sql().begin_transaction().await?;
    |                          ^^^-- help: remove the arguments
    |                          |
    |                          field, not a method

error[E0308]: mismatched types
   --> src/contact.rs:977:43
    |
977 |         let contact = ContactAddress::new(addr).await?;
    |                       ------------------- ^^^^ expected `&str`, found `String`
    |                       |
    |                       arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust/deltachat-contact-tools/src/lib.rs:248:12
    |
248 |     pub fn new(s: &str) -> Result<Self> {
    |            ^^^
help: consider borrowing here
    |
977 |         let contact = ContactAddress::new(&addr).await?;
    |                                           +

error[E0277]: `std::result::Result<ContactAddress, anyhow::Error>` is not a future
   --> src/contact.rs:977:49
    |
977 |         let contact = ContactAddress::new(addr).await?;
    |                       --------------------------^^^^^
    |                       |                        ||
    |                       |                        |`std::result::Result<ContactAddress, anyhow::Error>` is not a future
    |                       |                        help: remove the `.await`
    |                       this call returns `std::result::Result<ContactAddress, anyhow::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<ContactAddress, anyhow::Error>`, which is required by `std::result::Result<ContactAddress, anyhow::Error>: std::future::IntoFuture`
    = note: std::result::Result<ContactAddress, anyhow::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<ContactAddress, anyhow::Error>` to implement `std::future::IntoFuture`

error[E0599]: no method named `add_or_lookup_contact` found for reference `&context::Context` in the current scope
   --> src/contact.rs:978:36
    |
978 |         let sth_modified = context.add_or_lookup_contact(name, addr, DC_ORIGIN_ADRESS_BOOK).await?;
    |                                    ^^^^^^^^^^^^^^^^^^^^^ method not found in `&Context`

error[E0308]: mismatched types
   --> src/contact.rs:987:28
    |
987 |         context.emit_event(EventType::ContactsChanged);
    |                 ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EventType`, found enum constructor
    |                 |
    |                 arguments to this method are incorrect
    |
   ::: src/events/payload.rs:188:5
    |
188 |     ContactsChanged(Option<ContactId>),
    |     --------------- `ContactsChanged` defines an enum variant constructor here, which should be called
    |
    = note:          expected enum `payload::EventType`
            found enum constructor `fn(std::option::Option<ContactId>) -> payload::EventType {payload::EventType::ContactsChanged}`
note: method defined here
   --> src/context.rs:595:12
    |
595 |     pub fn emit_event(&self, event: EventType) {
    |            ^^^^^^^^^^        ----------------
help: use parentheses to construct this tuple variant
    |
987 |         context.emit_event(EventType::ContactsChanged(/* std::option::Option<ContactId> */));
    |                                                      ++++++++++++++++++++++++++++++++++++++

error[E0277]: a value of type `std::result::Result<Vec<(&str, &str)>, anyhow::Error>` cannot be built from an iterator over elements of type `(&str, &str)`
    --> src/contact.rs:1001:9
     |
1001 |        .collect()
     |         ^^^^^^^ value of type `std::result::Result<Vec<(&str, &str)>, anyhow::Error>` cannot be built from `std::iter::Iterator<Item=(&str, &str)>`
     |
     = help: the trait `FromIterator<(&str, &str)>` is not implemented for `std::result::Result<Vec<(&str, &str)>, anyhow::Error>`
     = help: the trait `FromIterator<std::result::Result<(&str, &str), anyhow::Error>>` is implemented for `std::result::Result<Vec<(&str, &str)>, anyhow::Error>`
     = help: for that trait implementation, expected `std::result::Result<(&str, &str), anyhow::Error>`, found `(&str, &str)`
note: the method call chain might not have had the expected associated types
    --> src/contact.rs:996:9
     |
992  |   async fn split_address_book(book: &str) -> Result<Vec<(&str, &str)>> {
     |                               ---- this expression has type `&str`
993  |       book.lines()
     |            ------- `Iterator::Item` is `&str` here
994  |          .collect::<Vec<&str>>()
995  |          .chunks(2)
     |           --------- `Iterator::Item` is `&[&str]` here
996  |          .filter_map(|chunk| {
     |  _________^
997  | |             let name = chunk.first()?;
998  | |             let addr = chunk.get(1)?;
999  | |             Some((*name, *addr))
1000 | |         })
     | |__________^ `Iterator::Item` changed to `(&str, &str)` here
note: required by a bound in `std::iter::Iterator::collect`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2050:19
     |
2050 |     fn collect<B: FromIterator<Self::Item>>(self) -> B
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`

error[E0599]: no method named `magic` found for reference `&context::Context` in the current scope
   --> src/contact.rs:969:37
    |
969 |     if context.is_none() || context.magic()!= DC_CONTEXT_MAGIC || addr_book.is_none() {
    |                                     ^^^^^ method not found in `&Context`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `magic`, perhaps you need to implement one of them:
            candidate #1: `object::read::macho::file::MachHeader`
            candidate #2: `object::read::pe::file::ImageOptionalHeader`

error[E0277]: `std::result::Result<deltachat_contact_tools::ContactAddress, anyhow::Error>` is not a future
   --> src/contact.rs:977:49
    |
977 |         let contact = ContactAddress::new(addr).await?;
    |                       --------------------------^^^^^
    |                       |                        ||
    |                       |                        |`std::result::Result<deltachat_contact_tools::ContactAddress, anyhow::Error>` is not a future
    |                       |                        help: remove the `.await`
    |                       this call returns `std::result::Result<deltachat_contact_tools::ContactAddress, anyhow::Error>`
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<deltachat_contact_tools::ContactAddress, anyhow::Error>`, which is required by `std::result::Result<deltachat_contact_tools::ContactAddress, anyhow::Error>: std::future::IntoFuture`
    = note: std::result::Result<deltachat_contact_tools::ContactAddress, anyhow::Error> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<deltachat_contact_tools::ContactAddress, anyhow::Error>` to implement `std::future::IntoFuture`

error[E0308]: mismatched types
   --> src/contact.rs:987:28
    |
987 |         context.emit_event(EventType::ContactsChanged);
    |                 ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EventType`, found enum constructor
    |                 |
    |                 arguments to this method are incorrect
    |
   ::: src/events/payload.rs:188:5
    |
188 |     ContactsChanged(Option<ContactId>),
    |     --------------- `ContactsChanged` defines an enum variant constructor here, which should be called
    |
    = note:          expected enum `payload::EventType`
            found enum constructor `fn(std::option::Option<contact::ContactId>) -> payload::EventType {payload::EventType::ContactsChanged}`
note: method defined here
   --> src/context.rs:595:12
    |
595 |     pub fn emit_event(&self, event: EventType) {
    |            ^^^^^^^^^^        ----------------
help: use parentheses to construct this tuple variant
    |
987 |         context.emit_event(EventType::ContactsChanged(/* std::option::Option<contact::ContactId> */));
    |                                                      +++++++++++++++++++++++++++++++++++++++++++++++

Some errors have detailed explanations: E0277, E0308, E0425, E0599.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `deltachat` (lib) due to 16 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 16 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


Fail
file path is :
projects/deltachat-core/rust/src/summary.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error: expected one of `)`, `,`, `.`, `?`, or an operator, found `StockMessage`
   --> src/summary.rs:193:85
    |
193 |                 label = Some(translated(context, self.viewtype == Viewtype::Audio ? StockMessage::Audio : StockMessage::File));
    |                                                                                     ^^^^^^^^^^^^ expected one of `)`, `,`, `.`, `?`, or an operator

error[E0423]: expected function, found crate `image`
   --> src/summary.rs:175:27
    |
175 |             prefix = Some(image(context).await);
    |                           ^^^^^ not a function
    |
help: consider importing this function instead
    |
3   + use crate::stock_str::image;
    |

error[E0425]: cannot find function `translated` in this scope
   --> src/summary.rs:178:27
    |
178 |             prefix = Some(translated(context, StockMessage::Gif).await);
    |                           ^^^^^^^^^^ not found in this scope
    |
note: function `crate::stock_str::translated` exists but is inaccessible
   --> src/stock_str.rs:507:1
    |
507 | async fn translated(context: &Context, id: StockMessage) -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0433]: failed to resolve: use of undeclared type `StockMessage`
   --> src/summary.rs:178:47
    |
178 |             prefix = Some(translated(context, StockMessage::Gif).await);
    |                                               ^^^^^^^^^^^^ use of undeclared type `StockMessage`
    |
help: consider importing this enum
    |
3   + use crate::stock_str::StockMessage;
    |

error[E0425]: cannot find function `translated` in this scope
   --> src/summary.rs:181:27
    |
181 |             prefix = Some(translated(context, StockMessage::Video).await);
    |                           ^^^^^^^^^^ not found in this scope
    |
note: function `crate::stock_str::translated` exists but is inaccessible
   --> src/stock_str.rs:507:1
    |
507 | async fn translated(context: &Context, id: StockMessage) -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0433]: failed to resolve: use of undeclared type `StockMessage`
   --> src/summary.rs:181:47
    |
181 |             prefix = Some(translated(context, StockMessage::Video).await);
    |                                               ^^^^^^^^^^^^ use of undeclared type `StockMessage`
    |
help: consider importing this enum
    |
3   + use crate::stock_str::StockMessage;
    |

error[E0425]: cannot find function `translated` in this scope
   --> src/summary.rs:184:27
    |
184 |             prefix = Some(translated(context, StockMessage::VoiceMessage).await);
    |                           ^^^^^^^^^^ not found in this scope
    |
note: function `crate::stock_str::translated` exists but is inaccessible
   --> src/stock_str.rs:507:1
    |
507 | async fn translated(context: &Context, id: StockMessage) -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0433]: failed to resolve: use of undeclared type `StockMessage`
   --> src/summary.rs:184:47
    |
184 |             prefix = Some(translated(context, StockMessage::VoiceMessage).await);
    |                                               ^^^^^^^^^^^^ use of undeclared type `StockMessage`
    |
help: consider importing this enum
    |
3   + use crate::stock_str::StockMessage;
    |

error[E0425]: cannot find function `translated` in this scope
   --> src/summary.rs:188:31
    |
188 |                 prefix = Some(translated(context, StockMessage::AcSetupMsgSubject).await);
    |                               ^^^^^^^^^^ not found in this scope
    |
note: function `crate::stock_str::translated` exists but is inaccessible
   --> src/stock_str.rs:507:1
    |
507 | async fn translated(context: &Context, id: StockMessage) -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0433]: failed to resolve: use of undeclared type `StockMessage`
   --> src/summary.rs:188:51
    |
188 |                 prefix = Some(translated(context, StockMessage::AcSetupMsgSubject).await);
    |                                                   ^^^^^^^^^^^^ use of undeclared type `StockMessage`
    |
help: consider importing this enum
    |
3   + use crate::stock_str::StockMessage;
    |

error[E0425]: cannot find function `translated` in this scope
   --> src/summary.rs:199:31
    |
199 |                 prefix = Some(translated(context, StockMessage::Location).await);
    |                               ^^^^^^^^^^ not found in this scope
    |
note: function `crate::stock_str::translated` exists but is inaccessible
   --> src/stock_str.rs:507:1
    |
507 | async fn translated(context: &Context, id: StockMessage) -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0433]: failed to resolve: use of undeclared type `StockMessage`
   --> src/summary.rs:199:51
    |
199 |                 prefix = Some(translated(context, StockMessage::Location).await);
    |                                                   ^^^^^^^^^^^^ use of undeclared type `StockMessage`
    |
help: consider importing this enum
    |
3   + use crate::stock_str::StockMessage;
    |

error[E0599]: no method named `get_cmd` found for reference `&message::Message` in the current scope
   --> src/summary.rs:187:21
    |
187 |             if self.get_cmd() == SystemMessage::AutocryptSetupMessage {
    |                     ^^^^^^^
    |
help: one of the expressions' fields has a method of the same name
    |
187 |             if self.param.get_cmd() == SystemMessage::AutocryptSetupMessage {
    |                     ++++++
help: there is a method with a similar name
    |
187 |             if self.get_id() == SystemMessage::AutocryptSetupMessage {
    |                     ~~~~~~

error[E0599]: no method named `get_cmd` found for reference `&message::Message` in the current scope
   --> src/summary.rs:198:21
    |
198 |             if self.get_cmd() == SystemMessage::LocationOnly {
    |                     ^^^^^^^
    |
help: one of the expressions' fields has a method of the same name
    |
198 |             if self.param.get_cmd() == SystemMessage::LocationOnly {
    |                     ++++++
help: there is a method with a similar name
    |
198 |             if self.get_id() == SystemMessage::LocationOnly {
    |                     ~~~~~~

error[E0282]: type annotations needed
   --> src/summary.rs:207:51
    |
207 |             ret = format!("{} – {}", p, self.text.as_ref().unwrap_or(""));
    |                                                   ^^^^^^   --------- type must be known at this point
    |
help: try using a fully qualified path to specify the expected types
    |
207 |             ret = format!("{} – {}", p, <std::string::String as AsRef<T>>::as_ref(&self.text).unwrap_or(""));
    |                                         +++++++++++++++++++++++++++++++++++++++++++         ~

error[E0277]: the trait bound `std::string::String: AsRef<std::option::Option<_>>` is not satisfied
   --> src/summary.rs:208:43
    |
208 |         } else if let Some(t) = self.text.as_ref() {
    |                                           ^^^^^^ the trait `AsRef<std::option::Option<_>>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `AsRef<T>`:
              <std::string::String as AsRef<OsStr>>
              <std::string::String as AsRef<Path>>
              <std::string::String as AsRef<str>>
              <std::string::String as AsRef<[u8]>>

error[E0282]: type annotations needed
   --> src/summary.rs:208:43
    |
208 |         } else if let Some(t) = self.text.as_ref() {
    |                                           ^^^^^^
209 |             ret = t.to_string();
    |                     --------- type must be known at this point
    |
help: try using a fully qualified path to specify the expected types
    |
208 |         } else if let Some(t) = <std::string::String as AsRef<std::option::Option<T>>>::as_ref(&self.text) {
    |                                 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++         ~

error[E0061]: this function takes 2 arguments but 3 arguments were supplied
   --> src/summary.rs:211:9
    |
211 |         truncate(&mut ret, 500, false);
    |         ^^^^^^^^              -------
    |                               | |
    |                               | unexpected argument of type `bool`
    |                               help: remove the extra argument
    |
note: function defined here
   --> src/tools.rs:46:15
    |
46  | pub(crate) fn truncate(buf: &str, approx_chars: usize) -> Cow<str> {
    |               ^^^^^^^^ ---------  -------------------

error[E0277]: the trait bound `std::string::String: AsRef<std::option::Option<_>>` is not satisfied
   --> src/summary.rs:208:43
    |
208 |         } else if let Some(t) = self.text.as_ref() {
    |                                           ^^^^^^ the trait `AsRef<std::option::Option<_>>` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `AsRef<T>`:
              <std::string::String as AsRef<Utf8Path>>
              <std::string::String as AsRef<OsStr>>
              <std::string::String as AsRef<std::path::Path>>
              <std::string::String as AsRef<str>>
              <std::string::String as AsRef<[u8]>>

Some errors have detailed explanations: E0061, E0277, E0282, E0423, E0425, E0433, E0599.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `deltachat` (lib) due to 18 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 18 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


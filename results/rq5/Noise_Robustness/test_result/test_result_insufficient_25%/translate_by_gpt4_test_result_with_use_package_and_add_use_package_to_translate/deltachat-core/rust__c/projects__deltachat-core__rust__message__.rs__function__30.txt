Fail
file path is :
projects/deltachat-core/rust/src/message.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0599]: no method named `get_html` found for enum `std::option::Option` in the current scope
    --> src/chat.rs:2041:30
     |
2041 |                 msg.get_id().get_html(context).await?
     |                              ^^^^^^^^ method not found in `Option<MsgId>`
     |
note: the method `get_html` exists on the type `MsgId`
    --> src/html.rs:234:5
     |
234  |     pub async fn get_html(self, context: &Context) -> Result<Option<String>> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `MsgId` value, panicking if the value is an `Option::None`
     |
2041 |                 msg.get_id().expect("REASON").get_html(context).await?
     |                             +++++++++++++++++

error[E0599]: no method named `get_html` found for enum `std::option::Option` in the current scope
    --> src/chat.rs:2041:30
     |
2041 |                 msg.get_id().get_html(context).await?
     |                              ^^^^^^^^ method not found in `Option<MsgId>`
     |
note: the method `get_html` exists on the type `message::MsgId`
    --> src/html.rs:234:5
     |
234  |     pub async fn get_html(self, context: &Context) -> Result<Option<String>> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `message::MsgId` value, panicking if the value is an `Option::None`
     |
2041 |                 msg.get_id().expect("REASON").get_html(context).await?
     |                             +++++++++++++++++

error[E0308]: mismatched types
   --> src/debug_logging.rs:102:9
    |
97  |     maybe_set_logging_xdc_inner(
    |     --------------------------- arguments to this function are incorrect
...
102 |         msg.get_id(),
    |         ^^^^^^^^^^^^ expected `MsgId`, found `Option<MsgId>`
    |
    = note: expected struct `message::MsgId`
                 found enum `std::option::Option<message::MsgId>`
note: function defined here
   --> src/debug_logging.rs:110:14
    |
110 | pub async fn maybe_set_logging_xdc_inner(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     msg_id: MsgId,
    |     -------------
help: consider using `Option::expect` to unwrap the `std::option::Option<message::MsgId>` value, panicking if the value is an `Option::None`
    |
102 |         msg.get_id().expect("REASON"),
    |                     +++++++++++++++++

error[E0277]: `std::option::Option<message::MsgId>` doesn't implement `std::fmt::Display`
    --> src/test_utils.rs:1201:9
     |
1201 |         msg.get_id(),
     |         ^^^^^^^^^^^^ `std::option::Option<message::MsgId>` cannot be formatted with the default formatter
     |
     = help: the trait `std::fmt::Display` is not implemented for `std::option::Option<message::MsgId>`
     = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
     = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> src/debug_logging.rs:102:9
    |
97  |     maybe_set_logging_xdc_inner(
    |     --------------------------- arguments to this function are incorrect
...
102 |         msg.get_id(),
    |         ^^^^^^^^^^^^ expected `MsgId`, found `Option<MsgId>`
    |
    = note: expected struct `MsgId`
                 found enum `std::option::Option<MsgId>`
note: function defined here
   --> src/debug_logging.rs:110:14
    |
110 | pub async fn maybe_set_logging_xdc_inner(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     msg_id: MsgId,
    |     -------------
help: consider using `Option::expect` to unwrap the `std::option::Option<MsgId>` value, panicking if the value is an `Option::None`
    |
102 |         msg.get_id().expect("REASON"),
    |                     +++++++++++++++++

error[E0308]: mismatched types
   --> src/message.rs:725:9
    |
724 |     match self.id {
    |           ------- this expression has type `MsgId`
725 |         Some(x) => Some(x),
    |         ^^^^^^^ expected `MsgId`, found `Option<_>`
    |
    = note: expected struct `MsgId`
                 found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> src/message.rs:726:9
    |
724 |     match self.id {
    |           ------- this expression has type `MsgId`
725 |         Some(x) => Some(x),
726 |         None => None,
    |         ^^^^ expected `MsgId`, found `Option<_>`
    |
    = note: expected struct `MsgId`
                 found enum `std::option::Option<_>`

Some errors have detailed explanations: E0308, E0599.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `deltachat` (lib) due to 4 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
   --> src/message.rs:725:9
    |
724 |     match self.id {
    |           ------- this expression has type `message::MsgId`
725 |         Some(x) => Some(x),
    |         ^^^^^^^ expected `MsgId`, found `Option<_>`
    |
    = note: expected struct `message::MsgId`
                 found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> src/message.rs:726:9
    |
724 |     match self.id {
    |           ------- this expression has type `message::MsgId`
725 |         Some(x) => Some(x),
726 |         None => None,
    |         ^^^^ expected `MsgId`, found `Option<_>`
    |
    = note: expected struct `message::MsgId`
                 found enum `std::option::Option<_>`

error[E0308]: mismatched types
    --> src/webxdc.rs:1043:28
     |
1043 |         forward_msgs(&t, &[instance.get_id()], chat_id).await?;
     |                            ^^^^^^^^^^^^^^^^^ expected `MsgId`, found `Option<MsgId>`
     |
     = note: expected struct `message::MsgId`
                  found enum `std::option::Option<message::MsgId>`
help: consider using `Option::expect` to unwrap the `std::option::Option<message::MsgId>` value, panicking if the value is an `Option::None`
     |
1043 |         forward_msgs(&t, &[instance.get_id().expect("REASON")], chat_id).await?;
     |                                             +++++++++++++++++

error[E0599]: no method named `get_html` found for enum `std::option::Option` in the current scope
   --> src/html.rs:447:33
    |
447 |         let html = msg.get_id().get_html(&alice).await.unwrap().unwrap();
    |                                 ^^^^^^^^ method not found in `Option<MsgId>`
    |
note: the method `get_html` exists on the type `message::MsgId`
   --> src/html.rs:234:5
    |
234 |     pub async fn get_html(self, context: &Context) -> Result<Option<String>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `message::MsgId` value, panicking if the value is an `Option::None`
    |
447 |         let html = msg.get_id().expect("REASON").get_html(&alice).await.unwrap().unwrap();
    |                                +++++++++++++++++

error[E0308]: mismatched types
   --> src/html.rs:452:32
    |
452 |         forward_msgs(&alice, &[msg.get_id()], chat.get_id())
    |                                ^^^^^^^^^^^^ expected `MsgId`, found `Option<MsgId>`
    |
    = note: expected struct `message::MsgId`
                 found enum `std::option::Option<message::MsgId>`
help: consider using `Option::expect` to unwrap the `std::option::Option<message::MsgId>` value, panicking if the value is an `Option::None`
    |
452 |         forward_msgs(&alice, &[msg.get_id().expect("REASON")], chat.get_id())
    |                                            +++++++++++++++++

error[E0599]: no method named `get_html` found for enum `std::option::Option` in the current scope
   --> src/html.rs:461:33
    |
461 |         let html = msg.get_id().get_html(&alice).await.unwrap().unwrap();
    |                                 ^^^^^^^^ method not found in `Option<MsgId>`
    |
note: the method `get_html` exists on the type `message::MsgId`
   --> src/html.rs:234:5
    |
234 |     pub async fn get_html(self, context: &Context) -> Result<Option<String>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `message::MsgId` value, panicking if the value is an `Option::None`
    |
461 |         let html = msg.get_id().expect("REASON").get_html(&alice).await.unwrap().unwrap();
    |                                +++++++++++++++++

error[E0599]: no method named `get_html` found for enum `std::option::Option` in the current scope
   --> src/html.rs:474:33
    |
474 |         let html = msg.get_id().get_html(&bob).await.unwrap().unwrap();
    |                                 ^^^^^^^^ method not found in `Option<MsgId>`
    |
note: the method `get_html` exists on the type `message::MsgId`
   --> src/html.rs:234:5
    |
234 |     pub async fn get_html(self, context: &Context) -> Result<Option<String>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `message::MsgId` value, panicking if the value is an `Option::None`
    |
474 |         let html = msg.get_id().expect("REASON").get_html(&bob).await.unwrap().unwrap();
    |                                +++++++++++++++++

error[E0308]: mismatched types
   --> src/html.rs:498:32
    |
498 |         forward_msgs(&alice, &[msg.get_id()], chat.get_id())
    |                                ^^^^^^^^^^^^ expected `MsgId`, found `Option<MsgId>`
    |
    = note: expected struct `message::MsgId`
                 found enum `std::option::Option<message::MsgId>`
help: consider using `Option::expect` to unwrap the `std::option::Option<message::MsgId>` value, panicking if the value is an `Option::None`
    |
498 |         forward_msgs(&alice, &[msg.get_id().expect("REASON")], chat.get_id())
    |                                            +++++++++++++++++

error[E0599]: no method named `get_html` found for enum `std::option::Option` in the current scope
   --> src/html.rs:517:33
    |
517 |         let html = msg.get_id().get_html(&alice).await.unwrap().unwrap();
    |                                 ^^^^^^^^ method not found in `Option<MsgId>`
    |
note: the method `get_html` exists on the type `message::MsgId`
   --> src/html.rs:234:5
    |
234 |     pub async fn get_html(self, context: &Context) -> Result<Option<String>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `message::MsgId` value, panicking if the value is an `Option::None`
    |
517 |         let html = msg.get_id().expect("REASON").get_html(&alice).await.unwrap().unwrap();
    |                                +++++++++++++++++

error[E0599]: no method named `get_html` found for enum `std::option::Option` in the current scope
   --> src/html.rs:539:33
    |
539 |         let html = msg.get_id().get_html(&alice).await.unwrap().unwrap();
    |                                 ^^^^^^^^ method not found in `Option<MsgId>`
    |
note: the method `get_html` exists on the type `message::MsgId`
   --> src/html.rs:234:5
    |
234 |     pub async fn get_html(self, context: &Context) -> Result<Option<String>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `message::MsgId` value, panicking if the value is an `Option::None`
    |
539 |         let html = msg.get_id().expect("REASON").get_html(&alice).await.unwrap().unwrap();
    |                                +++++++++++++++++

error[E0599]: no method named `get_html` found for enum `std::option::Option` in the current scope
   --> src/html.rs:549:33
    |
549 |         let html = msg.get_id().get_html(&bob).await.unwrap().unwrap();
    |                                 ^^^^^^^^ method not found in `Option<MsgId>`
    |
note: the method `get_html` exists on the type `message::MsgId`
   --> src/html.rs:234:5
    |
234 |     pub async fn get_html(self, context: &Context) -> Result<Option<String>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `message::MsgId` value, panicking if the value is an `Option::None`
    |
549 |         let html = msg.get_id().expect("REASON").get_html(&bob).await.unwrap().unwrap();
    |                                +++++++++++++++++

error[E0599]: no method named `get_html` found for enum `std::option::Option` in the current scope
   --> src/html.rs:566:33
    |
566 |         let html = msg.get_id().get_html(&t).await?.unwrap();
    |                                 ^^^^^^^^ method not found in `Option<MsgId>`
    |
note: the method `get_html` exists on the type `message::MsgId`
   --> src/html.rs:234:5
    |
234 |     pub async fn get_html(self, context: &Context) -> Result<Option<String>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `message::MsgId` value, panicking if the value is an `Option::None`
    |
566 |         let html = msg.get_id().expect("REASON").get_html(&t).await?.unwrap();
    |                                +++++++++++++++++

error[E0599]: no method named `get_html` found for enum `std::option::Option` in the current scope
    --> src/receive_imf/tests.rs:1417:29
     |
1417 |     let html = msg.get_id().get_html(&t).await.unwrap().unwrap();
     |                             ^^^^^^^^ method not found in `Option<MsgId>`
     |
note: the method `get_html` exists on the type `message::MsgId`
    --> src/html.rs:234:5
     |
234  |     pub async fn get_html(self, context: &Context) -> Result<Option<String>> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider using `Option::expect` to unwrap the `message::MsgId` value, panicking if the value is an `Option::None`
     |
1417 |     let html = msg.get_id().expect("REASON").get_html(&t).await.unwrap().unwrap();
     |                            +++++++++++++++++

Some errors have detailed explanations: E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `deltachat` (lib test) due to 16 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


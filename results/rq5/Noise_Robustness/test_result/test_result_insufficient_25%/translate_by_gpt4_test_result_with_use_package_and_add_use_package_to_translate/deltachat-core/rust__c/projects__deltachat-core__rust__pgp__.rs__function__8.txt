Fail
file path is :
projects/deltachat-core/rust/src/pgp.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0425]: cannot find function `generate_keypair` in this scope
   --> src/pgp.rs:148:55
    |
148 |         let (_, _, ret_public_key, ret_private_key) = generate_keypair(addr, keygen_type)?;
    |                                                       ^^^^^^^^^^^^^^^^ not found in this scope
    |
note: function `crate::key::generate_keypair` exists but is inaccessible
   --> src/key.rs:218:1
    |
218 | async fn generate_keypair(context: &Context) -> Result<KeyPair> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0433]: failed to resolve: use of undeclared type `Key`
   --> src/pgp.rs:157:67
    |
157 |             let key = DcKey::from_slice(&buf[..], KeyFmt::Binary, Key::from_binary(&buf, KeyType::Public).unwrap().id);
    |                                                                   ^^^ use of undeclared type `Key`

error[E0433]: failed to resolve: use of undeclared type `KeyType`
   --> src/pgp.rs:157:90
    |
157 |             let key = DcKey::from_slice(&buf[..], KeyFmt::Binary, Key::from_binary(&buf, KeyType::Public).unwrap().id);
    |                                                                                          ^^^^^^^ use of undeclared type `KeyType`
    |
help: consider importing this enum
    |
3   + use pgp::KeyType;
    |

error[E0433]: failed to resolve: use of undeclared type `Key`
   --> src/pgp.rs:168:67
    |
168 |             let key = DcKey::from_slice(&buf[..], KeyFmt::Binary, Key::from_binary(&buf, KeyType::Private).unwrap().id);
    |                                                                   ^^^ use of undeclared type `Key`

error[E0433]: failed to resolve: use of undeclared type `KeyType`
   --> src/pgp.rs:168:90
    |
168 |             let key = DcKey::from_slice(&buf[..], KeyFmt::Binary, Key::from_binary(&buf, KeyType::Private).unwrap().id);
    |                                                                                          ^^^^^^^ use of undeclared type `KeyType`
    |
help: consider importing this enum
    |
3   + use pgp::KeyType;
    |

warning: unused `#[macro_use]` import
  --> src/lib.rs:31:1
   |
31 | #[macro_use]
   | ^^^^^^^^^^^^
   |
note: the lint level is defined here
  --> src/lib.rs:6:5
   |
6  |     unused,
   |     ^^^^^^
   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused imports: `KeyType as PgpKeyType`, `SecretKeyParamsBuilder`, `SubkeyParamsBuilder`
  --> src/pgp.rs:11:21
   |
11 |     Deserializable, KeyType as PgpKeyType, Message, SecretKeyParamsBuilder, SignedPublicKey,
   |                     ^^^^^^^^^^^^^^^^^^^^^           ^^^^^^^^^^^^^^^^^^^^^^
12 |     SignedPublicSubKey, SignedSecretKey, StandaloneSignature, SubkeyParamsBuilder,
   |                                                               ^^^^^^^^^^^^^^^^^^^

warning: unused import: `SecretKeyTrait`
  --> src/pgp.rs:17:58
   |
17 |     CompressionAlgorithm, KeyTrait, Mpi, PublicKeyTrait, SecretKeyTrait, StringToKey,
   |                                                          ^^^^^^^^^^^^^^

error[E0433]: failed to resolve: use of undeclared type `Profile`
   --> src/pgp.rs:147:5
    |
147 |     Profile::with_test_logger("", |ctx| {
    |     ^^^^^^^ use of undeclared type `Profile`

error[E0433]: failed to resolve: use of undeclared type `KeyFmt`
   --> src/pgp.rs:157:51
    |
157 |             let key = DcKey::from_slice(&buf[..], KeyFmt::Binary, Key::from_binary(&buf, KeyType::Public).unwrap().id);
    |                                                   ^^^^^^ use of undeclared type `KeyFmt`

error[E0061]: this function takes 1 argument but 3 arguments were supplied
   --> src/pgp.rs:157:23
    |
157 |             let key = DcKey::from_slice(&buf[..], KeyFmt::Binary, Key::from_binary(&buf, KeyType::Public).unwrap().id);
    |                       ^^^^^^^^^^^^^^^^^           --------------  --------------------------------------------------- unexpected argument
    |                                                   |
    |                                                   unexpected argument
    |
note: associated function defined here
   --> src/key.rs:31:8
    |
31  |     fn from_slice(bytes: &[u8]) -> Result<Self> {
    |        ^^^^^^^^^^ ------------
help: remove the extra arguments
    |
157 -             let key = DcKey::from_slice(&buf[..], KeyFmt::Binary, Key::from_binary(&buf, KeyType::Public).unwrap().id);
157 +             let key = DcKey::from_slice(&buf[..]);
    |

error[E0599]: no variant or associated item named `SecretKey` found for enum `BlockType` in the current scope
   --> src/pgp.rs:165:39
    |
165 |                 .to_writer(BlockType::SecretKey, &mut buf)
    |                                       ^^^^^^^^^ variant or associated item not found in `BlockType`

error[E0433]: failed to resolve: use of undeclared type `KeyFmt`
   --> src/pgp.rs:168:51
    |
168 |             let key = DcKey::from_slice(&buf[..], KeyFmt::Binary, Key::from_binary(&buf, KeyType::Private).unwrap().id);
    |                                                   ^^^^^^ use of undeclared type `KeyFmt`

error[E0061]: this function takes 1 argument but 3 arguments were supplied
   --> src/pgp.rs:168:23
    |
168 |             let key = DcKey::from_slice(&buf[..], KeyFmt::Binary, Key::from_binary(&buf, KeyType::Private).unwrap().id);
    |                       ^^^^^^^^^^^^^^^^^           --------------  ---------------------------------------------------- unexpected argument
    |                                                   |
    |                                                   unexpected argument
    |
note: associated function defined here
   --> src/key.rs:31:8
    |
31  |     fn from_slice(bytes: &[u8]) -> Result<Self> {
    |        ^^^^^^^^^^ ------------
help: remove the extra arguments
    |
168 -             let key = DcKey::from_slice(&buf[..], KeyFmt::Binary, Key::from_binary(&buf, KeyType::Private).unwrap().id);
168 +             let key = DcKey::from_slice(&buf[..]);
    |

error[E0308]: mismatched types
   --> src/pgp.rs:173:37
    |
173 |             addr: EmailAddress::new(addr).unwrap(),
    |                   ----------------- ^^^^ expected `&str`, found `EmailAddress`
    |                   |
    |                   arguments to this function are incorrect
    |
note: associated function defined here
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust/deltachat-contact-tools/src/lib.rs:383:12
    |
383 |     pub fn new(input: &str) -> Result<EmailAddress> {
    |            ^^^

error[E0308]: mismatched types
   --> src/pgp.rs:174:21
    |
174 |             public: pub_key,
    |                     ^^^^^^^ expected `SignedPublicKey`, found `Result<_, Error>`
    |
    = note: expected struct `SignedPublicKey`
                 found enum `std::result::Result<_, anyhow::Error>`
help: consider using `Result::expect` to unwrap the `std::result::Result<_, anyhow::Error>` value, panicking if the value is a `Result::Err`
    |
174 |             public: pub_key.expect("REASON"),
    |                            +++++++++++++++++

error[E0308]: mismatched types
   --> src/pgp.rs:175:21
    |
175 |             secret: priv_key,
    |                     ^^^^^^^^ expected `SignedSecretKey`, found `Result<_, Error>`
    |
    = note: expected struct `SignedSecretKey`
                 found enum `std::result::Result<_, anyhow::Error>`
help: consider using `Result::expect` to unwrap the `std::result::Result<_, anyhow::Error>` value, panicking if the value is a `Result::Err`
    |
175 |             secret: priv_key.expect("REASON"),
    |                             +++++++++++++++++

Some errors have detailed explanations: E0061, E0308, E0425, E0433, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `deltachat` (lib) generated 3 warnings
error: could not compile `deltachat` (lib) due to 14 previous errors; 3 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0599]: no variant or associated item named `SecretKey` found for enum `pgp::armor::BlockType` in the current scope
   --> src/pgp.rs:165:39
    |
165 |                 .to_writer(BlockType::SecretKey, &mut buf)
    |                                       ^^^^^^^^^ variant or associated item not found in `BlockType`

error[E0308]: mismatched types
   --> src/pgp.rs:174:21
    |
174 |             public: pub_key,
    |                     ^^^^^^^ expected `SignedPublicKey`, found `Result<_, Error>`
    |
    = note: expected struct `pgp::SignedPublicKey`
                 found enum `std::result::Result<_, anyhow::Error>`
help: consider using `Result::expect` to unwrap the `std::result::Result<_, anyhow::Error>` value, panicking if the value is a `Result::Err`
    |
174 |             public: pub_key.expect("REASON"),
    |                            +++++++++++++++++

error[E0308]: mismatched types
   --> src/pgp.rs:175:21
    |
175 |             secret: priv_key,
    |                     ^^^^^^^^ expected `SignedSecretKey`, found `Result<_, Error>`
    |
    = note: expected struct `pgp::SignedSecretKey`
                 found enum `std::result::Result<_, anyhow::Error>`
help: consider using `Result::expect` to unwrap the `std::result::Result<_, anyhow::Error>` value, panicking if the value is a `Result::Err`
    |
175 |             secret: priv_key.expect("REASON"),
    |                             +++++++++++++++++

warning: `deltachat` (lib test) generated 3 warnings (3 duplicates)
error: could not compile `deltachat` (lib test) due to 14 previous errors; 3 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


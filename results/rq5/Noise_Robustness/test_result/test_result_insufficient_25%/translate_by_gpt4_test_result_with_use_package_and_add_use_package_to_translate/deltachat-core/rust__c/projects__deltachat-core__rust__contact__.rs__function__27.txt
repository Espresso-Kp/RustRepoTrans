Fail
file path is :
projects/deltachat-core/rust/src/contact.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error: cannot find macro `anyhow` in this scope
   --> src/contact.rs:970:20
    |
970 |         return Err(anyhow!("Invalid parameter"));
    |                    ^^^^^^
    |
    = note: `anyhow` is in scope, but it is a crate, not a macro
help: consider importing this macro
    |
3   + use anyhow::anyhow;
    |

error[E0425]: cannot find function `normalize_name` in this scope
   --> src/contact.rs:978:25
    |
978 |         let norm_name = normalize_name(name);
    |                         ^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
3   + use crate::contact::contact_tools::normalize_name;
    |
3   + use deltachat_contact_tools::normalize_name;
    |

error[E0599]: no method named `is_null` found for reference `&context::Context` in the current scope
   --> src/contact.rs:969:16
    |
969 |     if context.is_null() || addr_book.is_empty() {
    |                ^^^^^^^ method not found in `&Context`

error[E0599]: no method named `begin_noawait` found for struct `Sql` in the current scope
   --> src/contact.rs:975:35
    |
975 |     let transaction = context.sql.begin_noawait().await?;
    |                                   ^^^^^^^^^^^^^ method not found in `Sql`
    |
   ::: src/sql.rs:57:1
    |
57  | pub struct Sql {
    | -------------- method `begin_noawait` not found for this struct

error[E0609]: no field `addr` on type `ContactAddress`
   --> src/contact.rs:981:82
    |
981 |         let sth_modified = add_or_lookup_contact(context, &norm_name, &norm_addr.addr, Origin::AdressBook).await?;
    |                                                                                  ^^^^ unknown field

error[E0599]: no variant or associated item named `AdressBook` found for enum `contact::Origin` in the current scope
   --> src/contact.rs:981:96
    |
410 | pub enum Origin {
    | --------------- variant or associated item `AdressBook` not found for this enum
...
981 |         let sth_modified = add_or_lookup_contact(context, &norm_name, &norm_addr.addr, Origin::AdressBook).await?;
    |                                                                                                ^^^^^^^^^^
    |                                                                                                |
    |                                                                                                variant or associated item not found in `Origin`
    |                                                                                                help: there is a variant with a similar name: `AddressBook`

error[E0425]: cannot find function `add_or_lookup_contact` in this scope
   --> src/contact.rs:981:28
    |
981 |         let sth_modified = add_or_lookup_contact(context, &norm_name, &norm_addr.addr, Origin::AdressBook).await?;
    |                            ^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0559]: variant `payload::EventType::ContactsChanged` has no field named `altered_tcb`
   --> src/contact.rs:991:57
    |
991 |         context.emit_event(EventType::ContactsChanged { altered_tcb: Default::default(), blocked: false });
    |                                                         ^^^^^^^^^^^ field does not exist
    |
   ::: src/events/payload.rs:188:5
    |
188 |     ContactsChanged(Option<ContactId>),
    |     --------------- `payload::EventType::ContactsChanged` defined here
    |
help: `payload::EventType::ContactsChanged` is a tuple variant, use the appropriate syntax
    |
991 |         context.emit_event(payload::EventType::ContactsChanged(/* fields */));
    |                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0559]: variant `payload::EventType::ContactsChanged` has no field named `blocked`
   --> src/contact.rs:991:90
    |
991 |         context.emit_event(EventType::ContactsChanged { altered_tcb: Default::default(), blocked: false });
    |                                                                                          ^^^^^^^ field does not exist
    |
   ::: src/events/payload.rs:188:5
    |
188 |     ContactsChanged(Option<ContactId>),
    |     --------------- `payload::EventType::ContactsChanged` defined here
    |
help: `payload::EventType::ContactsChanged` is a tuple variant, use the appropriate syntax
    |
991 |         context.emit_event(payload::EventType::ContactsChanged(/* fields */));
    |                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `begin_noawait` found for struct `sql::Sql` in the current scope
   --> src/contact.rs:975:35
    |
975 |     let transaction = context.sql.begin_noawait().await?;
    |                                   ^^^^^^^^^^^^^ method not found in `sql::Sql`
    |
   ::: src/sql.rs:57:1
    |
57  | pub struct Sql {
    | -------------- method `begin_noawait` not found for this struct

error[E0609]: no field `addr` on type `deltachat_contact_tools::ContactAddress`
   --> src/contact.rs:981:82
    |
981 |         let sth_modified = add_or_lookup_contact(context, &norm_name, &norm_addr.addr, Origin::AdressBook).await?;
    |                                                                                  ^^^^ unknown field

Some errors have detailed explanations: E0425, E0559, E0599, E0609.
For more information about an error, try `rustc --explain E0425`.
error: could not compile `deltachat` (lib) due to 9 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `deltachat` (lib test) due to 9 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


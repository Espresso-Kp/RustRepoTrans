Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
warning: unused import: `or`
  --> crates/iceberg/src/arrow/reader.rs:21:60
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                                                            ^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:559:10
    |
558 |     match (lhs, rhs) {
    |           ---------- this expression has type `(Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>)`
559 |         (None, _) => return Err(Box::new("Left expression cannot be null.")),
    |          ^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Option<_>`
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:560:13
    |
558 |     match (lhs, rhs) {
    |           ---------- this expression has type `(Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>)`
559 |         (None, _) => return Err(Box::new("Left expression cannot be null.")),
560 |         (_, None) => return Err(Box::new("Right expression cannot be null.")),
    |             ^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Option<_>`
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:561:10
    |
558 |     match (lhs, rhs) {
    |           ---------- this expression has type `(Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>)`
...
561 |         (Some(left), Some(right)) => {
    |          ^^^^^^^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Option<_>`
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:561:22
    |
558 |     match (lhs, rhs) {
    |           ---------- this expression has type `(Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>)`
...
561 |         (Some(left), Some(right)) => {
    |                      ^^^^^^^^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Option<_>`
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:559:33
    |
559 |         (None, _) => return Err(Box::new("Left expression cannot be null.")),
    |                             --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Error`, found `Box<&str>`
    |                             |
    |                             arguments to this enum variant are incorrect
    |
    = note: expected struct `error::Error`
               found struct `Box<&str>`
help: the type constructed contains `Box<&str>` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:559:29
    |
559 |         (None, _) => return Err(Box::new("Left expression cannot be null.")),
    |                             ^^^^-------------------------------------------^
    |                                 |
    |                                 this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:560:33
    |
560 |         (_, None) => return Err(Box::new("Right expression cannot be null.")),
    |                             --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Error`, found `Box<&str>`
    |                             |
    |                             arguments to this enum variant are incorrect
    |
    = note: expected struct `error::Error`
               found struct `Box<&str>`
help: the type constructed contains `Box<&str>` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:560:29
    |
560 |         (_, None) => return Err(Box::new("Right expression cannot be null.")),
    |                             ^^^^--------------------------------------------^
    |                                 |
    |                                 this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5

error[E0425]: cannot find function `always_true` in this scope
   --> crates/iceberg/src/arrow/reader.rs:562:24
    |
562 |             if left == always_true() || right == always_true() {
    |                        ^^^^^^^^^^^
    |
help: you might have meant to call the method
    |
562 |             if left == self.always_true() || right == always_true() {
    |                        +++++

error[E0425]: cannot find function `always_true` in this scope
   --> crates/iceberg/src/arrow/reader.rs:562:50
    |
562 |             if left == always_true() || right == always_true() {
    |                                                  ^^^^^^^^^^^
    |
help: you might have meant to call the method
    |
562 |             if left == always_true() || right == self.always_true() {
    |                                                  +++++

error[E0425]: cannot find function `always_true` in this scope
   --> crates/iceberg/src/arrow/reader.rs:563:20
    |
563 |                 Ok(always_true())
    |                    ^^^^^^^^^^^
    |
help: you might have meant to call the method
    |
563 |                 Ok(self.always_true())
    |                    +++++

error[E0425]: cannot find function `always_false` in this scope
   --> crates/iceberg/src/arrow/reader.rs:565:29
    |
565 |             else if left == always_false() {
    |                             ^^^^^^^^^^^^
    |
help: you might have meant to call the method
    |
565 |             else if left == self.always_false() {
    |                             +++++

error[E0425]: cannot find function `always_false` in this scope
   --> crates/iceberg/src/arrow/reader.rs:568:30
    |
568 |             else if right == always_false() {
    |                              ^^^^^^^^^^^^
    |
help: you might have meant to call the method
    |
568 |             else if right == self.always_false() {
    |                              +++++

error[E0433]: failed to resolve: use of undeclared type `Or`
   --> crates/iceberg/src/arrow/reader.rs:572:20
    |
572 |                 Ok(Or::new(left, right))
    |                    ^^ use of undeclared type `Or`
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::Or` and 1 other; try using the variant's enum
    |
572 |                 Ok(crate::arrow::reader::BoundPredicate(left, right))
    |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
572 |                 Ok(crate::expr::Predicate(left, right))
    |                    ~~~~~~~~~~~~~~~~~~~~~~
help: a trait with a similar name exists
    |
572 |                 Ok(Ord::new(left, right))
    |                    ~~~

Some errors have detailed explanations: E0308, E0425, E0433.
For more information about an error, try `rustc --explain E0308`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 12 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
error[E0433]: failed to resolve: use of undeclared type `Or`
   --> crates/iceberg/src/arrow/reader.rs:572:20
    |
572 |                 Ok(Or::new(left, right))
    |                    ^^ use of undeclared type `Or`
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::Or` and 3 others; try using the variant's enum
    |
572 |                 Ok(crate::arrow::reader::BoundPredicate(left, right))
    |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
572 |                 Ok(crate::expr::Predicate(left, right))
    |                    ~~~~~~~~~~~~~~~~~~~~~~
572 |                 Ok(tera::ast::LogicOperator(left, right))
    |                    ~~~~~~~~~~~~~~~~~~~~~~~~
help: a trait with a similar name exists
    |
572 |                 Ok(Ord::new(left, right))
    |                    ~~~

warning: `iceberg` (lib test) generated 1 warning (1 duplicate)
error: could not compile `iceberg` (lib test) due to 12 previous errors; 1 warning emitted

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
warning: unused import: `or`
  --> crates/iceberg/src/arrow/reader.rs:21:60
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                                                            ^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:559:10
    |
558 |     match (lhs, rhs) {
    |           ---------- this expression has type `(Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>)`
559 |         (None, _) => return Err(Box::new("Left expression cannot be null.")),
    |          ^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Option<_>`
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:560:13
    |
558 |     match (lhs, rhs) {
    |           ---------- this expression has type `(Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>)`
559 |         (None, _) => return Err(Box::new("Left expression cannot be null.")),
560 |         (_, None) => return Err(Box::new("Right expression cannot be null.")),
    |             ^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Option<_>`
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:561:10
    |
558 |     match (lhs, rhs) {
    |           ---------- this expression has type `(Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>)`
...
561 |         (Some(left), Some(right)) => {
    |          ^^^^^^^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Option<_>`
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:561:22
    |
558 |     match (lhs, rhs) {
    |           ---------- this expression has type `(Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>)`
...
561 |         (Some(left), Some(right)) => {
    |                      ^^^^^^^^^^^ expected `Box<dyn FnMut(...) -> ... + Send>`, found `Option<_>`
    |
    = note: expected struct `Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>`
                 found enum `std::option::Option<_>`

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:559:33
    |
559 |         (None, _) => return Err(Box::new("Left expression cannot be null.")),
    |                             --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Error`, found `Box<&str>`
    |                             |
    |                             arguments to this enum variant are incorrect
    |
    = note: expected struct `error::Error`
               found struct `Box<&str>`
help: the type constructed contains `Box<&str>` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:559:29
    |
559 |         (None, _) => return Err(Box::new("Left expression cannot be null.")),
    |                             ^^^^-------------------------------------------^
    |                                 |
    |                                 this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:560:33
    |
560 |         (_, None) => return Err(Box::new("Right expression cannot be null.")),
    |                             --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Error`, found `Box<&str>`
    |                             |
    |                             arguments to this enum variant are incorrect
    |
    = note: expected struct `error::Error`
               found struct `Box<&str>`
help: the type constructed contains `Box<&str>` due to the type of the argument passed
   --> crates/iceberg/src/arrow/reader.rs:560:29
    |
560 |         (_, None) => return Err(Box::new("Right expression cannot be null.")),
    |                             ^^^^--------------------------------------------^
    |                                 |
    |                                 this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5

error[E0425]: cannot find function `always_true` in this scope
   --> crates/iceberg/src/arrow/reader.rs:562:24
    |
562 |             if left == always_true() || right == always_true() {
    |                        ^^^^^^^^^^^
    |
help: you might have meant to call the method
    |
562 |             if left == self.always_true() || right == always_true() {
    |                        +++++

error[E0425]: cannot find function `always_true` in this scope
   --> crates/iceberg/src/arrow/reader.rs:562:50
    |
562 |             if left == always_true() || right == always_true() {
    |                                                  ^^^^^^^^^^^
    |
help: you might have meant to call the method
    |
562 |             if left == always_true() || right == self.always_true() {
    |                                                  +++++

error[E0425]: cannot find function `always_true` in this scope
   --> crates/iceberg/src/arrow/reader.rs:563:20
    |
563 |                 Ok(always_true())
    |                    ^^^^^^^^^^^
    |
help: you might have meant to call the method
    |
563 |                 Ok(self.always_true())
    |                    +++++

error[E0425]: cannot find function `always_false` in this scope
   --> crates/iceberg/src/arrow/reader.rs:565:29
    |
565 |             else if left == always_false() {
    |                             ^^^^^^^^^^^^
    |
help: you might have meant to call the method
    |
565 |             else if left == self.always_false() {
    |                             +++++

error[E0425]: cannot find function `always_false` in this scope
   --> crates/iceberg/src/arrow/reader.rs:568:30
    |
568 |             else if right == always_false() {
    |                              ^^^^^^^^^^^^
    |
help: you might have meant to call the method
    |
568 |             else if right == self.always_false() {
    |                              +++++

error[E0433]: failed to resolve: use of undeclared type `Or`
   --> crates/iceberg/src/arrow/reader.rs:572:20
    |
572 |                 Ok(Or::new(left, right))
    |                    ^^ use of undeclared type `Or`
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::Or` and 1 other; try using the variant's enum
    |
572 |                 Ok(crate::arrow::reader::BoundPredicate(left, right))
    |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
572 |                 Ok(crate::expr::Predicate(left, right))
    |                    ~~~~~~~~~~~~~~~~~~~~~~
help: a trait with a similar name exists
    |
572 |                 Ok(Ord::new(left, right))
    |                    ~~~

Some errors have detailed explanations: E0308, E0425, E0433.
For more information about an error, try `rustc --explain E0308`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 12 previous errors; 1 warning emitted


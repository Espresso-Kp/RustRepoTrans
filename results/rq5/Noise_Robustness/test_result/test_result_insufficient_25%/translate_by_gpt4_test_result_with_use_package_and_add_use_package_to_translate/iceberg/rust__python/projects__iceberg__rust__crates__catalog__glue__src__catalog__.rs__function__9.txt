Fail
file path is :
projects/iceberg/rust/crates/catalog/glue/src/catalog.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
   Compiling iceberg-catalog-hms v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/hms)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
error[E0252]: the name `Error` is defined multiple times
  --> crates/catalog/glue/src/catalog.rs:30:14
   |
21 | use aws_sdk_glue::{SdkError, Client, Config, Error, Errors};
   |                                              ----- previous import of the type `Error` here
...
30 |     Catalog, Error, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
   |              ^^^^^ `Error` reimported here
   |
   = note: `Error` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
30 |     Catalog, Error as OtherError, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
   |              ~~~~~~~~~~~~~~~~~~~

error[E0432]: unresolved import `aws_sdk_glue::client::fluent_builders`
  --> crates/catalog/glue/src/catalog.rs:19:27
   |
19 | use aws_sdk_glue::client::fluent_builders::DeleteDatabase;
   |                           ^^^^^^^^^^^^^^^ could not find `fluent_builders` in `client`

error[E0432]: unresolved import `aws_sdk_glue::types::GetTableInput`
  --> crates/catalog/glue/src/catalog.rs:20:5
   |
20 | use aws_sdk_glue::types::GetTableInput;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `GetTableInput` in `types`
   |
help: a similar name exists in the module
   |
20 | use aws_sdk_glue::types::TableInput;
   |                          ~~~~~~~~~~
help: consider importing this struct instead
   |
20 | use aws_sdk_glue::operation::get_table::GetTableInput;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0432]: unresolved imports `aws_sdk_glue::SdkError`, `aws_sdk_glue::Errors`
  --> crates/catalog/glue/src/catalog.rs:21:20
   |
21 | use aws_sdk_glue::{SdkError, Client, Config, Error, Errors};
   |                    ^^^^^^^^                         ^^^^^^
   |                    |                                |
   |                    |                                no `Errors` in the root
   |                    |                                help: a similar name exists in the module: `Error`
   |                    no `SdkError` in the root
   |
   = help: consider importing this type alias instead:
           aws_sdk_glue::error::SdkError

warning: unused import: `Config`
  --> crates/catalog/glue/src/catalog.rs:21:38
   |
21 | use aws_sdk_glue::{SdkError, Client, Config, Error, Errors};
   |                                      ^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::convert::TryFrom`
  --> crates/catalog/glue/src/catalog.rs:22:5
   |
22 | use std::convert::TryFrom;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Error`
  --> crates/catalog/glue/src/catalog.rs:30:14
   |
30 |     Catalog, Error, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
   |              ^^^^^

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:274:63
    |
274 | async fn drop_namespace(&self, namespace: &NamespaceIdent) -> Result<(), Error> {
    |                                                               ^^^^^^     ----- help: remove this generic argument
    |                                                               |
    |                                                               expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0599]: no variant or associated item named `new` found for enum `aws_sdk_glue::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:189:32
    |
189 |             None => Err(Error::new(
    |                                ^^^ variant or associated item not found in `Error`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:275:29
    |
275 |         let database_name = convert_to_database(namespace)?;
    |                             ^^^^^^^^^^^^^^^^^^^----------- an argument of type `&std::collections::HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
275 |         let database_name = convert_to_database(namespace, /* &std::collections::HashMap<std::string::String, std::string::String> */)?;
    |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:276:40
    |
276 |         let client = Client::from_conf(create_sdk_config(&self.config));
    |                                        ^^^^^^^^^^^^^^^^^-------------- an argument of type `std::option::Option<&std::string::String>` is missing
    |
note: expected `&HashMap<String, String>`, found `&GlueCatalogConfig`
   --> crates/catalog/glue/src/catalog.rs:276:58
    |
276 |         let client = Client::from_conf(create_sdk_config(&self.config));
    |                                                          ^^^^^^^^^^^^
    = note: expected reference `&std::collections::HashMap<std::string::String, std::string::String>`
               found reference `&GlueCatalogConfig`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:58:21
    |
58  | pub(crate) async fn create_sdk_config(
    |                     ^^^^^^^^^^^^^^^^^
59  |     properties: &HashMap<String, String>,
    |     ------------------------------------
60  |     endpoint_uri: Option<&String>,
    |     -----------------------------
help: provide the argument
    |
276 |         let client = Client::from_conf(create_sdk_config(/* &std::collections::HashMap<std::string::String, std::string::String> */, /* std::option::Option<&std::string::String> */));
    |                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:276:40
    |
276 |         let client = Client::from_conf(create_sdk_config(&self.config));
    |                      ----------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Config`, found future
    |                      |
    |                      arguments to this function are incorrect
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/client.rs:95:12
    |
95  |     pub fn from_conf(conf: crate::Config) -> Self {
    |            ^^^^^^^^^

error[E0277]: the trait bound `std::string::String: From<&DatabaseInput>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:278:60
    |
278 |         let table_list = client.get_tables().database_name(&database_name).send().await.map_err(from_aws_sdk_error)?;
    |                                              ------------- ^^^^^^^^^^^^^^ the trait `From<&DatabaseInput>` is not implemented for `std::string::String`, which is required by `&DatabaseInput: Into<std::string::String>`
    |                                              |
    |                                              required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&DatabaseInput` to implement `Into<std::string::String>`
note: required by a bound in `GetTablesFluentBuilder::database_name`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/operation/get_tables/builders.rs:126:48
    |
126 |     pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `GetTablesFluentBuilder::database_name`

error[E0599]: no method named `is_empty` found for enum `std::option::Option` in the current scope
   --> crates/catalog/glue/src/catalog.rs:280:35
    |
280 |         if !table_list.table_list.is_empty() {
    |                                   ^^^^^^^^ method not found in `Option<Vec<Table>>`
    |
note: the method `is_empty` exists on the type `Vec<aws_sdk_glue::types::Table>`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/vec/mod.rs:2160:5
help: consider using `Option::expect` to unwrap the `Vec<aws_sdk_glue::types::Table>` value, panicking if the value is an `Option::None`
    |
280 |         if !table_list.table_list.expect("REASON").is_empty() {
    |                                  +++++++++++++++++

error[E0599]: no variant or associated item named `new` found for enum `aws_sdk_glue::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:281:31
    |
281 |             return Err(Error::new(
    |                               ^^^ variant or associated item not found in `Error`

error[E0061]: this method takes 0 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:292:16
    |
292 |         client.delete_database(delete_database_input).await.map_err(from_aws_sdk_error)?;
    |                ^^^^^^^^^^^^^^^ ---------------------
    |                                |
    |                                unexpected argument
    |                                help: remove the extra argument
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/client/delete_database.rs:10:12
    |
10  |     pub fn delete_database(&self) -> crate::operation::delete_database::builders::DeleteDatabaseFluentBuilder {
    |            ^^^^^^^^^^^^^^^

error[E0277]: `DeleteDatabaseFluentBuilder` is not a future
   --> crates/catalog/glue/src/catalog.rs:292:55
    |
292 |         client.delete_database(delete_database_input).await.map_err(from_aws_sdk_error)?;
    |                                                      -^^^^^
    |                                                      ||
    |                                                      |`DeleteDatabaseFluentBuilder` is not a future
    |                                                      help: remove the `.await`
    |
    = help: the trait `std::future::Future` is not implemented for `DeleteDatabaseFluentBuilder`, which is required by `DeleteDatabaseFluentBuilder: IntoFuture`
    = note: DeleteDatabaseFluentBuilder must be a future or must implement `IntoFuture` to be awaited
    = note: required for `DeleteDatabaseFluentBuilder` to implement `IntoFuture`

error[E0599]: no variant or associated item named `new` found for enum `aws_sdk_glue::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:434:32
    |
434 |             None => Err(Error::new(
    |                                ^^^ variant or associated item not found in `Error`

error[E0599]: no variant or associated item named `new` found for enum `aws_sdk_glue::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:550:32
    |
550 |             None => Err(Error::new(
    |                                ^^^ variant or associated item not found in `Error`

error[E0599]: no variant or associated item named `new` found for enum `aws_sdk_glue::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:590:49
    |
590 | ...                   Ok(_) => Err(Error::new(
    |                                           ^^^ variant or associated item not found in `Error`

error[E0599]: no variant or associated item named `new` found for enum `aws_sdk_glue::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:597:50
    |
597 | ...                   Err(_) => Err(Error::new(
    |                                            ^^^ variant or associated item not found in `Error`

error[E0599]: no variant or associated item named `new` found for enum `aws_sdk_glue::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:612:20
    |
612 |         Err(Error::new(
    |                    ^^^ variant or associated item not found in `Error`

Some errors have detailed explanations: E0061, E0107, E0252, E0277, E0308, E0432, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib test) generated 3 warnings
error: could not compile `iceberg-catalog-glue` (lib test) due to 19 previous errors; 3 warnings emitted
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
error[E0252]: the name `Error` is defined multiple times
  --> crates/catalog/glue/src/catalog.rs:30:14
   |
21 | use aws_sdk_glue::{SdkError, Client, Config, Error, Errors};
   |                                              ----- previous import of the type `Error` here
...
30 |     Catalog, Error, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
   |              ^^^^^ `Error` reimported here
   |
   = note: `Error` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
30 |     Catalog, Error as OtherError, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
   |              ~~~~~~~~~~~~~~~~~~~

error[E0432]: unresolved import `aws_sdk_glue::client::fluent_builders`
  --> crates/catalog/glue/src/catalog.rs:19:27
   |
19 | use aws_sdk_glue::client::fluent_builders::DeleteDatabase;
   |                           ^^^^^^^^^^^^^^^ could not find `fluent_builders` in `client`

error[E0432]: unresolved import `aws_sdk_glue::types::GetTableInput`
  --> crates/catalog/glue/src/catalog.rs:20:5
   |
20 | use aws_sdk_glue::types::GetTableInput;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `GetTableInput` in `types`
   |
help: a similar name exists in the module
   |
20 | use aws_sdk_glue::types::TableInput;
   |                          ~~~~~~~~~~
help: consider importing this struct instead
   |
20 | use aws_sdk_glue::operation::get_table::GetTableInput;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0432]: unresolved imports `aws_sdk_glue::SdkError`, `aws_sdk_glue::Errors`
  --> crates/catalog/glue/src/catalog.rs:21:20
   |
21 | use aws_sdk_glue::{SdkError, Client, Config, Error, Errors};
   |                    ^^^^^^^^                         ^^^^^^
   |                    |                                |
   |                    |                                no `Errors` in the root
   |                    |                                help: a similar name exists in the module: `Error`
   |                    no `SdkError` in the root
   |
   = help: consider importing this type alias instead:
           aws_sdk_glue::error::SdkError

warning: unused import: `Config`
  --> crates/catalog/glue/src/catalog.rs:21:38
   |
21 | use aws_sdk_glue::{SdkError, Client, Config, Error, Errors};
   |                                      ^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::convert::TryFrom`
  --> crates/catalog/glue/src/catalog.rs:22:5
   |
22 | use std::convert::TryFrom;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Error`
  --> crates/catalog/glue/src/catalog.rs:30:14
   |
30 |     Catalog, Error, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
   |              ^^^^^

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:274:63
    |
274 | async fn drop_namespace(&self, namespace: &NamespaceIdent) -> Result<(), Error> {
    |                                                               ^^^^^^     ----- help: remove this generic argument
    |                                                               |
    |                                                               expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0599]: no variant or associated item named `new` found for enum `aws_sdk_glue::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:189:32
    |
189 |             None => Err(Error::new(
    |                                ^^^ variant or associated item not found in `Error`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:275:29
    |
275 |         let database_name = convert_to_database(namespace)?;
    |                             ^^^^^^^^^^^^^^^^^^^----------- an argument of type `&HashMap<std::string::String, std::string::String>` is missing
    |
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
275 |         let database_name = convert_to_database(namespace, /* &HashMap<std::string::String, std::string::String> */)?;
    |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:276:40
    |
276 |         let client = Client::from_conf(create_sdk_config(&self.config));
    |                                        ^^^^^^^^^^^^^^^^^-------------- an argument of type `std::option::Option<&std::string::String>` is missing
    |
note: expected `&HashMap<String, String>`, found `&GlueCatalogConfig`
   --> crates/catalog/glue/src/catalog.rs:276:58
    |
276 |         let client = Client::from_conf(create_sdk_config(&self.config));
    |                                                          ^^^^^^^^^^^^
    = note: expected reference `&HashMap<std::string::String, std::string::String>`
               found reference `&GlueCatalogConfig`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:58:21
    |
58  | pub(crate) async fn create_sdk_config(
    |                     ^^^^^^^^^^^^^^^^^
59  |     properties: &HashMap<String, String>,
    |     ------------------------------------
60  |     endpoint_uri: Option<&String>,
    |     -----------------------------
help: provide the argument
    |
276 |         let client = Client::from_conf(create_sdk_config(/* &HashMap<std::string::String, std::string::String> */, /* std::option::Option<&std::string::String> */));
    |                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/catalog/glue/src/catalog.rs:276:40
    |
276 |         let client = Client::from_conf(create_sdk_config(&self.config));
    |                      ----------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Config`, found future
    |                      |
    |                      arguments to this function are incorrect
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/client.rs:95:12
    |
95  |     pub fn from_conf(conf: crate::Config) -> Self {
    |            ^^^^^^^^^

error[E0277]: the trait bound `std::string::String: From<&DatabaseInput>` is not satisfied
   --> crates/catalog/glue/src/catalog.rs:278:60
    |
278 |         let table_list = client.get_tables().database_name(&database_name).send().await.map_err(from_aws_sdk_error)?;
    |                                              ------------- ^^^^^^^^^^^^^^ the trait `From<&DatabaseInput>` is not implemented for `std::string::String`, which is required by `&DatabaseInput: Into<std::string::String>`
    |                                              |
    |                                              required by a bound introduced by this call
    |
    = help: the following other types implement trait `From<T>`:
              <std::string::String as From<char>>
              <std::string::String as From<Box<str>>>
              <std::string::String as From<Cow<'a, str>>>
              <std::string::String as From<url::Url>>
              <std::string::String as From<uuid::Uuid>>
              <std::string::String as From<object_store::path::Path>>
              <std::string::String as From<SensitiveString>>
              <std::string::String as From<aws_smithy_runtime_api::http::headers::header_value::HeaderValue>>
            and 5 others
    = note: required for `&DatabaseInput` to implement `Into<std::string::String>`
note: required by a bound in `GetTablesFluentBuilder::database_name`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/operation/get_tables/builders.rs:126:48
    |
126 |     pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `GetTablesFluentBuilder::database_name`

error[E0599]: no method named `is_empty` found for enum `std::option::Option` in the current scope
   --> crates/catalog/glue/src/catalog.rs:280:35
    |
280 |         if !table_list.table_list.is_empty() {
    |                                   ^^^^^^^^ method not found in `Option<Vec<Table>>`
    |
note: the method `is_empty` exists on the type `Vec<aws_sdk_glue::types::Table>`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/alloc/src/vec/mod.rs:2160:5
help: consider using `Option::expect` to unwrap the `Vec<aws_sdk_glue::types::Table>` value, panicking if the value is an `Option::None`
    |
280 |         if !table_list.table_list.expect("REASON").is_empty() {
    |                                  +++++++++++++++++

error[E0599]: no variant or associated item named `new` found for enum `aws_sdk_glue::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:281:31
    |
281 |             return Err(Error::new(
    |                               ^^^ variant or associated item not found in `Error`

error[E0061]: this method takes 0 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:292:16
    |
292 |         client.delete_database(delete_database_input).await.map_err(from_aws_sdk_error)?;
    |                ^^^^^^^^^^^^^^^ ---------------------
    |                                |
    |                                unexpected argument
    |                                help: remove the extra argument
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/client/delete_database.rs:10:12
    |
10  |     pub fn delete_database(&self) -> crate::operation::delete_database::builders::DeleteDatabaseFluentBuilder {
    |            ^^^^^^^^^^^^^^^

error[E0277]: `DeleteDatabaseFluentBuilder` is not a future
   --> crates/catalog/glue/src/catalog.rs:292:55
    |
292 |         client.delete_database(delete_database_input).await.map_err(from_aws_sdk_error)?;
    |                                                      -^^^^^
    |                                                      ||
    |                                                      |`DeleteDatabaseFluentBuilder` is not a future
    |                                                      help: remove the `.await`
    |
    = help: the trait `std::future::Future` is not implemented for `DeleteDatabaseFluentBuilder`, which is required by `DeleteDatabaseFluentBuilder: IntoFuture`
    = note: DeleteDatabaseFluentBuilder must be a future or must implement `IntoFuture` to be awaited
    = note: required for `DeleteDatabaseFluentBuilder` to implement `IntoFuture`

error[E0599]: no variant or associated item named `new` found for enum `aws_sdk_glue::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:434:32
    |
434 |             None => Err(Error::new(
    |                                ^^^ variant or associated item not found in `Error`

error[E0599]: no variant or associated item named `new` found for enum `aws_sdk_glue::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:550:32
    |
550 |             None => Err(Error::new(
    |                                ^^^ variant or associated item not found in `Error`

error[E0599]: no variant or associated item named `new` found for enum `aws_sdk_glue::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:590:49
    |
590 | ...                   Ok(_) => Err(Error::new(
    |                                           ^^^ variant or associated item not found in `Error`

error[E0599]: no variant or associated item named `new` found for enum `aws_sdk_glue::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:597:50
    |
597 | ...                   Err(_) => Err(Error::new(
    |                                            ^^^ variant or associated item not found in `Error`

error[E0599]: no variant or associated item named `new` found for enum `aws_sdk_glue::Error` in the current scope
   --> crates/catalog/glue/src/catalog.rs:612:20
    |
612 |         Err(Error::new(
    |                    ^^^ variant or associated item not found in `Error`

Some errors have detailed explanations: E0061, E0107, E0252, E0277, E0308, E0432, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib) generated 3 warnings
error: could not compile `iceberg-catalog-glue` (lib) due to 19 previous errors; 3 warnings emitted
warning: build failed, waiting for other jobs to finish...


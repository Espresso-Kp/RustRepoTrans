Fail
file path is :
projects/iceberg/rust/crates/catalog/rest/src/catalog.rs

output is:



error is :
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
error[E0252]: the name `Error` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:41:14
   |
21 | use reqwest::Error;
   |     -------------- previous import of the type `Error` here
...
41 |     Catalog, Error, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ^^^^^ `Error` reimported here
   |
   = note: `Error` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
41 |     Catalog, Error as OtherError, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ~~~~~~~~~~~~~~~~~~~

error: cannot find macro `json` in this scope
   --> crates/catalog/rest/src/catalog.rs:321:19
    |
321 |     let payload = json!({
    |                   ^^^^
    |
help: consider importing this macro
    |
21  + use serde_json::json;
    |

error[E0425]: cannot find value `Endpoints` in this scope
   --> crates/catalog/rest/src/catalog.rs:327:24
    |
327 |         .post(self.url(Endpoints.create_namespace), json = payload)
    |                        ^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `json` in this scope
   --> crates/catalog/rest/src/catalog.rs:327:53
    |
327 |         .post(self.url(Endpoints.create_namespace), json = payload)
    |                                                     ^^^^
    |
help: you might have meant to introduce a new binding
    |
327 |         .post(self.url(Endpoints.create_namespace), let json = payload)
    |                                                     +++

warning: unused import: `Error`
  --> crates/catalog/rest/src/catalog.rs:41:14
   |
41 |     Catalog, Error, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/catalog/rest/src/catalog.rs:319:6
    |
319 | ) -> Result<Namespace, Error> {
    |      ^^^^^^            ----- help: remove this generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:208:24
    |
208 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:208:17
    |
208 |                 Error::new(
    |                 ^^^^^^^^^^
209 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:210:21
    |
210 |                     "Failed to parse response from rest catalog server!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
210 |                     Some("Failed to parse response from rest catalog server!"),
    |                     +++++                                                    +

error[E0599]: no method named `with_context` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:212:18
    |
208 | /                 Error::new(
209 | |                     ErrorKind::Unexpected,
210 | |                     "Failed to parse response from rest catalog server!",
211 | |                 )
212 | |                 .with_context("json", String::from_utf8_lossy(&text))
    | |                 -^^^^^^^^^^^^ help: there is a method with a similar name: `is_connect`
    | |_________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:219:24
    |
219 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:219:17
    |
219 |                 Error::new(
    |                 ^^^^^^^^^^
220 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:221:21
    |
221 |                     "Failed to parse response from rest catalog server!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
221 |                     Some("Failed to parse response from rest catalog server!"),
    |                     +++++                                                    +

error[E0599]: no method named `with_context` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:223:18
    |
219 | /                 Error::new(
220 | |                     ErrorKind::Unexpected,
221 | |                     "Failed to parse response from rest catalog server!",
222 | |                 )
223 | |                 .with_context("json", String::from_utf8_lossy(&text))
    | |                 -^^^^^^^^^^^^ help: there is a method with a similar name: `is_connect`
    | |_________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:243:24
    |
243 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:243:17
    |
243 |                 Error::new(
    |                 ^^^^^^^^^^
244 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:245:21
    |
245 |                     "Failed to parse response from rest catalog server!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
245 |                     Some("Failed to parse response from rest catalog server!"),
    |                     +++++                                                    +

error[E0599]: no method named `with_context` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:247:18
    |
243 | /                 Error::new(
244 | |                     ErrorKind::Unexpected,
245 | |                     "Failed to parse response from rest catalog server!",
246 | |                 )
247 | |                 .with_context("json", String::from_utf8_lossy(&text))
    | |                 -^^^^^^^^^^^^ help: there is a method with a similar name: `is_connect`
    | |_________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:269:24
    |
269 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:269:17
    |
269 |                 Error::new(
    |                 ^^^^^^^^^^
270 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:271:21
    |
271 |                     "Failed to parse response from rest catalog server!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
271 |                     Some("Failed to parse response from rest catalog server!"),
    |                     +++++                                                    +

error[E0599]: no method named `with_context` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:273:18
    |
269 | /                 Error::new(
270 | |                     ErrorKind::Unexpected,
271 | |                     "Failed to parse response from rest catalog server!",
272 | |                 )
273 | |                 .with_context("code", code.to_string())
    | |                 -^^^^^^^^^^^^ help: there is a method with a similar name: `is_connect`
    | |_________________|
    | 

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:618:41
    |
618 |                 .query::<TokenResponse, ErrorResponse, OK>(req)
    |                  -----                  ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |                  |
    |                  required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:197:31
    |
195 |     async fn query<
    |              ----- required by a bound in this associated function
196 |         R: DeserializeOwned,
197 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:621:28
    |
621 |                       Error::new(
    |                              ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:621:21
    |
621 |                     Error::new(
    |                     ^^^^^^^^^^
622 |                         ErrorKind::Unexpected,
    |                         --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:623:25
    |
623 |                         "Failed to fetch access token from catalog server!",
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
623 |                         Some("Failed to fetch access token from catalog server!"),
    |                         +++++                                                   +

error[E0599]: no method named `with_source` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:625:22
    |
621 | /                     Error::new(
622 | |                         ErrorKind::Unexpected,
623 | |                         "Failed to fetch access token from catalog server!",
624 | |                     )
625 | |                     .with_source(e)
    | |                     -^^^^^^^^^^^ help: there is a method with a similar name: `with_url`
    | |_____________________|
    | 

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:643:37
    |
643 |             .query::<CatalogConfig, ErrorResponse, OK>(request.build()?)
    |              -----                  ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:197:31
    |
195 |     async fn query<
    |              ----- required by a bound in this associated function
196 |         R: DeserializeOwned,
197 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:130:28
    |
130 |                       Error::new(
    |                              ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:130:21
    |
130 |                     Error::new(
    |                     ^^^^^^^^^^
131 |                         ErrorKind::DataInvalid,
    |                         ---------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:132:25
    |
132 |                         "Invalid token received from catalog server!",
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
132 |                         Some("Invalid token received from catalog server!"),
    |                         +++++                                             +

error[E0599]: no method named `with_source` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:134:22
    |
130 | /                     Error::new(
131 | |                         ErrorKind::DataInvalid,
132 | |                         "Invalid token received from catalog server!",
133 | |                     )
134 | |                     .with_source(e)
    | |                     -^^^^^^^^^^^ help: there is a method with a similar name: `with_url`
    | |_____________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:145:36
    |
145 |   ...                   Error::new(
    |                                ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:147:33
    |
147 | ...                   format!("Invalid header name: {stripped_key}!"),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<_>`, found `String`
    |
    = note: expected enum `std::option::Option<_>`
             found struct `std::string::String`
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)
help: call `Into::into` on this expression to convert `std::string::String` into `std::option::Option<_>`
    |
147 |                                 format!("Invalid header name: {stripped_key}!").into(),
    |                                                                                +++++++

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:146:33
    |
145 | ...                   Error::new(
    |                       ---------- arguments to this function are incorrect
146 | ...                       ErrorKind::DataInvalid,
    |                           ^^^^^^^^^^^^^^^^^^^^^^ expected `Kind`, found `ErrorKind`
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^

error[E0599]: no method named `with_source` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:149:30
    |
145 | / ...                   Error::new(
146 | | ...                       ErrorKind::DataInvalid,
147 | | ...                       format!("Invalid header name: {stripped_key}!"),
148 | | ...                   )
149 | | ...                   .with_source(e)
    | |                       -^^^^^^^^^^^ help: there is a method with a similar name: `with_url`
    | |_______________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:152:36
    |
152 |   ...                   Error::new(
    |                                ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:154:33
    |
154 | ...                   format!("Invalid header value: {value}!"),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<_>`, found `String`
    |
    = note: expected enum `std::option::Option<_>`
             found struct `std::string::String`
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)
help: call `Into::into` on this expression to convert `std::string::String` into `std::option::Option<_>`
    |
154 |                                 format!("Invalid header value: {value}!").into(),
    |                                                                          +++++++

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:153:33
    |
152 | ...                   Error::new(
    |                       ---------- arguments to this function are incorrect
153 | ...                       ErrorKind::DataInvalid,
    |                           ^^^^^^^^^^^^^^^^^^^^^^ expected `Kind`, found `ErrorKind`
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^

error[E0599]: no method named `with_source` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:156:30
    |
152 | / ...                   Error::new(
153 | | ...                       ErrorKind::DataInvalid,
154 | | ...                       format!("Invalid header value: {value}!"),
155 | | ...                   )
156 | | ...                   .with_source(e)
    | |                       -^^^^^^^^^^^ help: there is a method with a similar name: `with_url`
    | |_______________________|
    | 

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:303:45
    |
303 |             .query::<ListNamespaceResponse, ErrorResponse, OK>(request.build()?)
    |              -----                          ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:197:31
    |
195 |     async fn query<
    |              ----- required by a bound in this associated function
196 |         R: DeserializeOwned,
197 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0599]: no method named `check_valid_namespace_identifier` found for reference `&catalog::RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:320:39
    |
320 |     let namespace_tuple: &str = &self.check_valid_namespace_identifier(namespace).await?;
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&RestCatalog`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:320:34
    |
320 |     let namespace_tuple: &str = &self.check_valid_namespace_identifier(namespace).await?;
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:320:34
    |
320 |     let namespace_tuple: &str = &self.check_valid_namespace_identifier(namespace).await?;
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `ControlFlow`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/ops/control_flow.rs:85:1

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:320:88
    |
320 |     let namespace_tuple: &str = &self.check_valid_namespace_identifier(namespace).await?;
    |                                                                                        ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `Break`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/ops/control_flow.rs:93:5

error[E0609]: no field `_session` on type `&catalog::RestCatalog`
   --> crates/catalog/rest/src/catalog.rs:326:10
    |
326 |         ._session
    |          ^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`

error[E0599]: no method named `url` found for reference `&catalog::RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:327:20
    |
327 |         .post(self.url(Endpoints.create_namespace), json = payload)
    |                    ^^^ method not found in `&RestCatalog`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `url`, perhaps you need to implement it:
            candidate #1: `ResponseBuilderExt`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:337:24
    |
337 |               Err(Error::new(error.error))
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0616]: field `error` of struct `ErrorResponse` is private
   --> crates/catalog/rest/src/catalog.rs:337:34
    |
337 |             Err(Error::new(error.error))
    |                                  ^^^^^ private field

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/rest/src/catalog.rs:337:17
    |
337 |             Err(Error::new(error.error))
    |                 ^^^^^^^^^^------------- an argument of type `std::option::Option<_>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: provide the argument
    |
337 |             Err(Error::new(error.error, /* source */))
    |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:337:17
    |
337 |             Err(Error::new(error.error))
    |             --- ^^^^^^^^^^^^^^^^^^^^^^^ expected `iceberg::Error`, found `reqwest::Error`
    |             |
    |             arguments to this enum variant are incorrect
    |
    = note: `reqwest::Error` and `iceberg::Error` have similar names, but are actually distinct types
note: `reqwest::Error` is defined in crate `reqwest`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:16:1
    |
16  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `iceberg::Error` is defined in crate `iceberg`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `reqwest::Error` due to the type of the argument passed
   --> crates/catalog/rest/src/catalog.rs:337:13
    |
337 |             Err(Error::new(error.error))
    |             ^^^^-----------------------^
    |                 |
    |                 this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `reqwest::Error` into `iceberg::Error`
    |
337 |             Err(Error::new(error.error).into())
    |                                        +++++++

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:341:24
    |
341 |               Err(Error::new(error.error))
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0616]: field `error` of struct `ErrorResponse` is private
   --> crates/catalog/rest/src/catalog.rs:341:34
    |
341 |             Err(Error::new(error.error))
    |                                  ^^^^^ private field

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/rest/src/catalog.rs:341:17
    |
341 |             Err(Error::new(error.error))
    |                 ^^^^^^^^^^------------- an argument of type `std::option::Option<_>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: provide the argument
    |
341 |             Err(Error::new(error.error, /* source */))
    |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:341:17
    |
341 |             Err(Error::new(error.error))
    |             --- ^^^^^^^^^^^^^^^^^^^^^^^ expected `iceberg::Error`, found `reqwest::Error`
    |             |
    |             arguments to this enum variant are incorrect
    |
    = note: `reqwest::Error` and `iceberg::Error` have similar names, but are actually distinct types
note: `reqwest::Error` is defined in crate `reqwest`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:16:1
    |
16  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `iceberg::Error` is defined in crate `iceberg`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `reqwest::Error` due to the type of the argument passed
   --> crates/catalog/rest/src/catalog.rs:341:13
    |
341 |             Err(Error::new(error.error))
    |             ^^^^-----------------------^
    |                 |
    |                 this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `reqwest::Error` into `iceberg::Error`
    |
341 |             Err(Error::new(error.error).into())
    |                                        +++++++

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:358:38
    |
358 |             .query::<NamespaceSerde, ErrorResponse, OK>(request)
    |              -----                   ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:197:31
    |
195 |     async fn query<
    |              ----- required by a bound in this associated function
196 |         R: DeserializeOwned,
197 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:373:20
    |
373 |           Err(Error::new(
    |                      ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:373:13
    |
373 |         Err(Error::new(
    |             ^^^^^^^^^^
374 |             ErrorKind::FeatureUnsupported,
    |             ----------------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:375:13
    |
375 |             "Updating namespace not supported yet!",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
375 |             Some("Updating namespace not supported yet!"),
    |             +++++                                       +

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:373:13
    |
373 |           Err(Error::new(
    |  _________---_^
    | |         |
    | |         arguments to this enum variant are incorrect
374 | |             ErrorKind::FeatureUnsupported,
375 | |             "Updating namespace not supported yet!",
376 | |         ))
    | |_________^ expected `iceberg::Error`, found `reqwest::Error`
    |
    = note: `reqwest::Error` and `iceberg::Error` have similar names, but are actually distinct types
note: `reqwest::Error` is defined in crate `reqwest`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:16:1
    |
16  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `iceberg::Error` is defined in crate `iceberg`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `reqwest::Error` due to the type of the argument passed
   --> crates/catalog/rest/src/catalog.rs:373:9
    |
373 |            Err(Error::new(
    |  __________^___-
    | | _________|
    | ||
374 | ||             ErrorKind::FeatureUnsupported,
375 | ||             "Updating namespace not supported yet!",
376 | ||         ))
    | ||_________-^
    | |__________|
    |            this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `reqwest::Error` into `iceberg::Error`
    |
376 |         ).into())
    |          +++++++

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:387:33
    |
387 |             .do_execute::<bool, ErrorResponse>(request, |resp| match resp.status() {
    |              ----------         ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::do_execute`
   --> crates/catalog/rest/src/catalog.rs:256:50
    |
256 |     async fn do_execute<R, E: DeserializeOwned + Into<Error>>(
    |                                                  ^^^^^^^^^^^ required by this bound in `HttpClient::do_execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:404:24
    |
404 |             .execute::<ErrorResponse, NO_CONTENT>(request)
    |              -------   ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::execute`
   --> crates/catalog/rest/src/catalog.rs:231:44
    |
231 |     async fn execute<E: DeserializeOwned + Into<Error>, const SUCCESS_CODE: u16>(
    |                                            ^^^^^^^^^^^ required by this bound in `HttpClient::execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:418:41
    |
418 |             .query::<ListTableResponse, ErrorResponse, OK>(request)
    |              -----                      ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:197:31
    |
195 |     async fn query<
    |              ----- required by a bound in this associated function
196 |         R: DeserializeOwned,
197 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:454:41
    |
454 |             .query::<LoadTableResponse, ErrorResponse, OK>(request)
    |              -----                      ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:197:31
    |
195 |     async fn query<
    |              ----- required by a bound in this associated function
196 |         R: DeserializeOwned,
197 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:464:24
    |
464 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:464:17
    |
464 |                 Error::new(
    |                 ^^^^^^^^^^
465 |                     ErrorKind::DataInvalid,
    |                     ---------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:466:21
    |
466 |                     "Metadata location missing in create table response!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
466 |                     Some("Metadata location missing in create table response!"),
    |                     +++++                                                     +

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:484:41
    |
484 |             .query::<LoadTableResponse, ErrorResponse, OK>(request)
    |              -----                      ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:197:31
    |
195 |     async fn query<
    |              ----- required by a bound in this associated function
196 |         R: DeserializeOwned,
197 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:510:24
    |
510 |             .execute::<ErrorResponse, NO_CONTENT>(request)
    |              -------   ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::execute`
   --> crates/catalog/rest/src/catalog.rs:231:44
    |
231 |     async fn execute<E: DeserializeOwned + Into<Error>, const SUCCESS_CODE: u16>(
    |                                            ^^^^^^^^^^^ required by this bound in `HttpClient::execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:523:33
    |
523 |             .do_execute::<bool, ErrorResponse>(request, |resp| match resp.status() {
    |              ----------         ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::do_execute`
   --> crates/catalog/rest/src/catalog.rs:256:50
    |
256 |     async fn do_execute<R, E: DeserializeOwned + Into<Error>>(
    |                                                  ^^^^^^^^^^^ required by this bound in `HttpClient::do_execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:544:24
    |
544 |             .execute::<ErrorResponse, NO_CONTENT>(request)
    |              -------   ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::execute`
   --> crates/catalog/rest/src/catalog.rs:231:44
    |
231 |     async fn execute<E: DeserializeOwned + Into<Error>, const SUCCESS_CODE: u16>(
    |                                            ^^^^^^^^^^^ required by this bound in `HttpClient::execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:563:43
    |
563 |             .query::<CommitTableResponse, ErrorResponse, OK>(request)
    |              -----                        ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:197:31
    |
195 |     async fn query<
    |              ----- required by a bound in this associated function
196 |         R: DeserializeOwned,
197 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:679:35
    |
679 |                   return Err(Error::new(
    |                                     ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:679:28
    |
679 |                 return Err(Error::new(
    |                            ^^^^^^^^^^
680 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:681:21
    |
681 |                     "Unable to load file io, neither warehouse nor metadata location is set!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
681 |                     Some("Unable to load file io, neither warehouse nor metadata location is set!"),
    |                     +++++                                                                         +

Some errors have detailed explanations: E0061, E0107, E0252, E0277, E0308, E0425, E0599, E0609, E0616...
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-rest` (lib test) generated 1 warning
error: could not compile `iceberg-catalog-rest` (lib test) due to 65 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
error[E0252]: the name `Error` is defined multiple times
  --> crates/catalog/rest/src/catalog.rs:41:14
   |
21 | use reqwest::Error;
   |     -------------- previous import of the type `Error` here
...
41 |     Catalog, Error, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ^^^^^ `Error` reimported here
   |
   = note: `Error` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
   |
41 |     Catalog, Error as OtherError, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ~~~~~~~~~~~~~~~~~~~

error: cannot find macro `json` in this scope
   --> crates/catalog/rest/src/catalog.rs:321:19
    |
321 |     let payload = json!({
    |                   ^^^^
    |
help: consider importing this macro
    |
21  + use serde_json::json;
    |

error[E0425]: cannot find value `Endpoints` in this scope
   --> crates/catalog/rest/src/catalog.rs:327:24
    |
327 |         .post(self.url(Endpoints.create_namespace), json = payload)
    |                        ^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `json` in this scope
   --> crates/catalog/rest/src/catalog.rs:327:53
    |
327 |         .post(self.url(Endpoints.create_namespace), json = payload)
    |                                                     ^^^^
    |
help: you might have meant to introduce a new binding
    |
327 |         .post(self.url(Endpoints.create_namespace), let json = payload)
    |                                                     +++

warning: unused import: `Error`
  --> crates/catalog/rest/src/catalog.rs:41:14
   |
41 |     Catalog, Error, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
   |              ^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/catalog/rest/src/catalog.rs:319:6
    |
319 | ) -> Result<Namespace, Error> {
    |      ^^^^^^            ----- help: remove this generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:208:24
    |
208 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:208:17
    |
208 |                 Error::new(
    |                 ^^^^^^^^^^
209 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:210:21
    |
210 |                     "Failed to parse response from rest catalog server!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
210 |                     Some("Failed to parse response from rest catalog server!"),
    |                     +++++                                                    +

error[E0599]: no method named `with_context` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:212:18
    |
208 | /                 Error::new(
209 | |                     ErrorKind::Unexpected,
210 | |                     "Failed to parse response from rest catalog server!",
211 | |                 )
212 | |                 .with_context("json", String::from_utf8_lossy(&text))
    | |                 -^^^^^^^^^^^^ help: there is a method with a similar name: `is_connect`
    | |_________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:219:24
    |
219 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:219:17
    |
219 |                 Error::new(
    |                 ^^^^^^^^^^
220 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:221:21
    |
221 |                     "Failed to parse response from rest catalog server!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
221 |                     Some("Failed to parse response from rest catalog server!"),
    |                     +++++                                                    +

error[E0599]: no method named `with_context` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:223:18
    |
219 | /                 Error::new(
220 | |                     ErrorKind::Unexpected,
221 | |                     "Failed to parse response from rest catalog server!",
222 | |                 )
223 | |                 .with_context("json", String::from_utf8_lossy(&text))
    | |                 -^^^^^^^^^^^^ help: there is a method with a similar name: `is_connect`
    | |_________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:243:24
    |
243 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:243:17
    |
243 |                 Error::new(
    |                 ^^^^^^^^^^
244 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:245:21
    |
245 |                     "Failed to parse response from rest catalog server!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
245 |                     Some("Failed to parse response from rest catalog server!"),
    |                     +++++                                                    +

error[E0599]: no method named `with_context` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:247:18
    |
243 | /                 Error::new(
244 | |                     ErrorKind::Unexpected,
245 | |                     "Failed to parse response from rest catalog server!",
246 | |                 )
247 | |                 .with_context("json", String::from_utf8_lossy(&text))
    | |                 -^^^^^^^^^^^^ help: there is a method with a similar name: `is_connect`
    | |_________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:269:24
    |
269 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:269:17
    |
269 |                 Error::new(
    |                 ^^^^^^^^^^
270 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:271:21
    |
271 |                     "Failed to parse response from rest catalog server!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
271 |                     Some("Failed to parse response from rest catalog server!"),
    |                     +++++                                                    +

error[E0599]: no method named `with_context` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:273:18
    |
269 | /                 Error::new(
270 | |                     ErrorKind::Unexpected,
271 | |                     "Failed to parse response from rest catalog server!",
272 | |                 )
273 | |                 .with_context("code", code.to_string())
    | |                 -^^^^^^^^^^^^ help: there is a method with a similar name: `is_connect`
    | |_________________|
    | 

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:618:41
    |
618 |                 .query::<TokenResponse, ErrorResponse, OK>(req)
    |                  -----                  ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |                  |
    |                  required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:197:31
    |
195 |     async fn query<
    |              ----- required by a bound in this associated function
196 |         R: DeserializeOwned,
197 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:621:28
    |
621 |                       Error::new(
    |                              ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:621:21
    |
621 |                     Error::new(
    |                     ^^^^^^^^^^
622 |                         ErrorKind::Unexpected,
    |                         --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:623:25
    |
623 |                         "Failed to fetch access token from catalog server!",
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
623 |                         Some("Failed to fetch access token from catalog server!"),
    |                         +++++                                                   +

error[E0599]: no method named `with_source` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:625:22
    |
621 | /                     Error::new(
622 | |                         ErrorKind::Unexpected,
623 | |                         "Failed to fetch access token from catalog server!",
624 | |                     )
625 | |                     .with_source(e)
    | |                     -^^^^^^^^^^^ help: there is a method with a similar name: `with_url`
    | |_____________________|
    | 

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:643:37
    |
643 |             .query::<CatalogConfig, ErrorResponse, OK>(request.build()?)
    |              -----                  ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:197:31
    |
195 |     async fn query<
    |              ----- required by a bound in this associated function
196 |         R: DeserializeOwned,
197 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:130:28
    |
130 |                       Error::new(
    |                              ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:130:21
    |
130 |                     Error::new(
    |                     ^^^^^^^^^^
131 |                         ErrorKind::DataInvalid,
    |                         ---------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:132:25
    |
132 |                         "Invalid token received from catalog server!",
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
132 |                         Some("Invalid token received from catalog server!"),
    |                         +++++                                             +

error[E0599]: no method named `with_source` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:134:22
    |
130 | /                     Error::new(
131 | |                         ErrorKind::DataInvalid,
132 | |                         "Invalid token received from catalog server!",
133 | |                     )
134 | |                     .with_source(e)
    | |                     -^^^^^^^^^^^ help: there is a method with a similar name: `with_url`
    | |_____________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:145:36
    |
145 |   ...                   Error::new(
    |                                ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:147:33
    |
147 | ...                   format!("Invalid header name: {stripped_key}!"),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<_>`, found `String`
    |
    = note: expected enum `std::option::Option<_>`
             found struct `std::string::String`
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)
help: call `Into::into` on this expression to convert `std::string::String` into `std::option::Option<_>`
    |
147 |                                 format!("Invalid header name: {stripped_key}!").into(),
    |                                                                                +++++++

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:146:33
    |
145 | ...                   Error::new(
    |                       ---------- arguments to this function are incorrect
146 | ...                       ErrorKind::DataInvalid,
    |                           ^^^^^^^^^^^^^^^^^^^^^^ expected `Kind`, found `ErrorKind`
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^

error[E0599]: no method named `with_source` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:149:30
    |
145 | / ...                   Error::new(
146 | | ...                       ErrorKind::DataInvalid,
147 | | ...                       format!("Invalid header name: {stripped_key}!"),
148 | | ...                   )
149 | | ...                   .with_source(e)
    | |                       -^^^^^^^^^^^ help: there is a method with a similar name: `with_url`
    | |_______________________|
    | 

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:152:36
    |
152 |   ...                   Error::new(
    |                                ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:154:33
    |
154 | ...                   format!("Invalid header value: {value}!"),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<_>`, found `String`
    |
    = note: expected enum `std::option::Option<_>`
             found struct `std::string::String`
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)
help: call `Into::into` on this expression to convert `std::string::String` into `std::option::Option<_>`
    |
154 |                                 format!("Invalid header value: {value}!").into(),
    |                                                                          +++++++

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:153:33
    |
152 | ...                   Error::new(
    |                       ---------- arguments to this function are incorrect
153 | ...                       ErrorKind::DataInvalid,
    |                           ^^^^^^^^^^^^^^^^^^^^^^ expected `Kind`, found `ErrorKind`
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^

error[E0599]: no method named `with_source` found for struct `reqwest::Error` in the current scope
   --> crates/catalog/rest/src/catalog.rs:156:30
    |
152 | / ...                   Error::new(
153 | | ...                       ErrorKind::DataInvalid,
154 | | ...                       format!("Invalid header value: {value}!"),
155 | | ...                   )
156 | | ...                   .with_source(e)
    | |                       -^^^^^^^^^^^ help: there is a method with a similar name: `with_url`
    | |_______________________|
    | 

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:303:45
    |
303 |             .query::<ListNamespaceResponse, ErrorResponse, OK>(request.build()?)
    |              -----                          ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:197:31
    |
195 |     async fn query<
    |              ----- required by a bound in this associated function
196 |         R: DeserializeOwned,
197 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0599]: no method named `check_valid_namespace_identifier` found for reference `&RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:320:39
    |
320 |     let namespace_tuple: &str = &self.check_valid_namespace_identifier(namespace).await?;
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&RestCatalog`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:320:34
    |
320 |     let namespace_tuple: &str = &self.check_valid_namespace_identifier(namespace).await?;
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:320:34
    |
320 |     let namespace_tuple: &str = &self.check_valid_namespace_identifier(namespace).await?;
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `ControlFlow`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/ops/control_flow.rs:85:1

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> crates/catalog/rest/src/catalog.rs:320:88
    |
320 |     let namespace_tuple: &str = &self.check_valid_namespace_identifier(namespace).await?;
    |                                                                                        ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `Break`
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/ops/control_flow.rs:93:5

error[E0609]: no field `_session` on type `&RestCatalog`
   --> crates/catalog/rest/src/catalog.rs:326:10
    |
326 |         ._session
    |          ^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `client`

error[E0599]: no method named `url` found for reference `&RestCatalog` in the current scope
   --> crates/catalog/rest/src/catalog.rs:327:20
    |
327 |         .post(self.url(Endpoints.create_namespace), json = payload)
    |                    ^^^ method not found in `&RestCatalog`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `url`, perhaps you need to implement it:
            candidate #1: `ResponseBuilderExt`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:337:24
    |
337 |               Err(Error::new(error.error))
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0616]: field `error` of struct `ErrorResponse` is private
   --> crates/catalog/rest/src/catalog.rs:337:34
    |
337 |             Err(Error::new(error.error))
    |                                  ^^^^^ private field

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/rest/src/catalog.rs:337:17
    |
337 |             Err(Error::new(error.error))
    |                 ^^^^^^^^^^------------- an argument of type `std::option::Option<_>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: provide the argument
    |
337 |             Err(Error::new(error.error, /* source */))
    |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:337:17
    |
337 |             Err(Error::new(error.error))
    |             --- ^^^^^^^^^^^^^^^^^^^^^^^ expected `iceberg::Error`, found `reqwest::Error`
    |             |
    |             arguments to this enum variant are incorrect
    |
    = note: `reqwest::Error` and `iceberg::Error` have similar names, but are actually distinct types
note: `reqwest::Error` is defined in crate `reqwest`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:16:1
    |
16  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `iceberg::Error` is defined in crate `iceberg`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `reqwest::Error` due to the type of the argument passed
   --> crates/catalog/rest/src/catalog.rs:337:13
    |
337 |             Err(Error::new(error.error))
    |             ^^^^-----------------------^
    |                 |
    |                 this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `reqwest::Error` into `iceberg::Error`
    |
337 |             Err(Error::new(error.error).into())
    |                                        +++++++

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:341:24
    |
341 |               Err(Error::new(error.error))
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0616]: field `error` of struct `ErrorResponse` is private
   --> crates/catalog/rest/src/catalog.rs:341:34
    |
341 |             Err(Error::new(error.error))
    |                                  ^^^^^ private field

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/rest/src/catalog.rs:341:17
    |
341 |             Err(Error::new(error.error))
    |                 ^^^^^^^^^^------------- an argument of type `std::option::Option<_>` is missing
    |
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: provide the argument
    |
341 |             Err(Error::new(error.error, /* source */))
    |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:341:17
    |
341 |             Err(Error::new(error.error))
    |             --- ^^^^^^^^^^^^^^^^^^^^^^^ expected `iceberg::Error`, found `reqwest::Error`
    |             |
    |             arguments to this enum variant are incorrect
    |
    = note: `reqwest::Error` and `iceberg::Error` have similar names, but are actually distinct types
note: `reqwest::Error` is defined in crate `reqwest`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:16:1
    |
16  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `iceberg::Error` is defined in crate `iceberg`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `reqwest::Error` due to the type of the argument passed
   --> crates/catalog/rest/src/catalog.rs:341:13
    |
341 |             Err(Error::new(error.error))
    |             ^^^^-----------------------^
    |                 |
    |                 this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `reqwest::Error` into `iceberg::Error`
    |
341 |             Err(Error::new(error.error).into())
    |                                        +++++++

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:358:38
    |
358 |             .query::<NamespaceSerde, ErrorResponse, OK>(request)
    |              -----                   ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:197:31
    |
195 |     async fn query<
    |              ----- required by a bound in this associated function
196 |         R: DeserializeOwned,
197 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:373:20
    |
373 |           Err(Error::new(
    |                      ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:373:13
    |
373 |         Err(Error::new(
    |             ^^^^^^^^^^
374 |             ErrorKind::FeatureUnsupported,
    |             ----------------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:375:13
    |
375 |             "Updating namespace not supported yet!",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
375 |             Some("Updating namespace not supported yet!"),
    |             +++++                                       +

error[E0308]: mismatched types
   --> crates/catalog/rest/src/catalog.rs:373:13
    |
373 |           Err(Error::new(
    |  _________---_^
    | |         |
    | |         arguments to this enum variant are incorrect
374 | |             ErrorKind::FeatureUnsupported,
375 | |             "Updating namespace not supported yet!",
376 | |         ))
    | |_________^ expected `iceberg::Error`, found `reqwest::Error`
    |
    = note: `reqwest::Error` and `iceberg::Error` have similar names, but are actually distinct types
note: `reqwest::Error` is defined in crate `reqwest`
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:16:1
    |
16  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `iceberg::Error` is defined in crate `iceberg`
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/error.rs:108:1
    |
108 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
help: the type constructed contains `reqwest::Error` due to the type of the argument passed
   --> crates/catalog/rest/src/catalog.rs:373:9
    |
373 |            Err(Error::new(
    |  __________^___-
    | | _________|
    | ||
374 | ||             ErrorKind::FeatureUnsupported,
375 | ||             "Updating namespace not supported yet!",
376 | ||         ))
    | ||_________-^
    | |__________|
    |            this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: call `Into::into` on this expression to convert `reqwest::Error` into `iceberg::Error`
    |
376 |         ).into())
    |          +++++++

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:387:33
    |
387 |             .do_execute::<bool, ErrorResponse>(request, |resp| match resp.status() {
    |              ----------         ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::do_execute`
   --> crates/catalog/rest/src/catalog.rs:256:50
    |
256 |     async fn do_execute<R, E: DeserializeOwned + Into<Error>>(
    |                                                  ^^^^^^^^^^^ required by this bound in `HttpClient::do_execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:404:24
    |
404 |             .execute::<ErrorResponse, NO_CONTENT>(request)
    |              -------   ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::execute`
   --> crates/catalog/rest/src/catalog.rs:231:44
    |
231 |     async fn execute<E: DeserializeOwned + Into<Error>, const SUCCESS_CODE: u16>(
    |                                            ^^^^^^^^^^^ required by this bound in `HttpClient::execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:418:41
    |
418 |             .query::<ListTableResponse, ErrorResponse, OK>(request)
    |              -----                      ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:197:31
    |
195 |     async fn query<
    |              ----- required by a bound in this associated function
196 |         R: DeserializeOwned,
197 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:454:41
    |
454 |             .query::<LoadTableResponse, ErrorResponse, OK>(request)
    |              -----                      ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:197:31
    |
195 |     async fn query<
    |              ----- required by a bound in this associated function
196 |         R: DeserializeOwned,
197 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:464:24
    |
464 |                   Error::new(
    |                          ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:464:17
    |
464 |                 Error::new(
    |                 ^^^^^^^^^^
465 |                     ErrorKind::DataInvalid,
    |                     ---------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:466:21
    |
466 |                     "Metadata location missing in create table response!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
466 |                     Some("Metadata location missing in create table response!"),
    |                     +++++                                                     +

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:484:41
    |
484 |             .query::<LoadTableResponse, ErrorResponse, OK>(request)
    |              -----                      ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:197:31
    |
195 |     async fn query<
    |              ----- required by a bound in this associated function
196 |         R: DeserializeOwned,
197 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:510:24
    |
510 |             .execute::<ErrorResponse, NO_CONTENT>(request)
    |              -------   ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::execute`
   --> crates/catalog/rest/src/catalog.rs:231:44
    |
231 |     async fn execute<E: DeserializeOwned + Into<Error>, const SUCCESS_CODE: u16>(
    |                                            ^^^^^^^^^^^ required by this bound in `HttpClient::execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:523:33
    |
523 |             .do_execute::<bool, ErrorResponse>(request, |resp| match resp.status() {
    |              ----------         ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::do_execute`
   --> crates/catalog/rest/src/catalog.rs:256:50
    |
256 |     async fn do_execute<R, E: DeserializeOwned + Into<Error>>(
    |                                                  ^^^^^^^^^^^ required by this bound in `HttpClient::do_execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:544:24
    |
544 |             .execute::<ErrorResponse, NO_CONTENT>(request)
    |              -------   ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::execute`
   --> crates/catalog/rest/src/catalog.rs:231:44
    |
231 |     async fn execute<E: DeserializeOwned + Into<Error>, const SUCCESS_CODE: u16>(
    |                                            ^^^^^^^^^^^ required by this bound in `HttpClient::execute`

error[E0277]: the trait bound `reqwest::Error: From<ErrorResponse>` is not satisfied
   --> crates/catalog/rest/src/catalog.rs:563:43
    |
563 |             .query::<CommitTableResponse, ErrorResponse, OK>(request)
    |              -----                        ^^^^^^^^^^^^^ the trait `From<ErrorResponse>` is not implemented for `reqwest::Error`, which is required by `ErrorResponse: Into<reqwest::Error>`
    |              |
    |              required by a bound introduced by this call
    |
    = note: required for `ErrorResponse` to implement `Into<reqwest::Error>`
note: required by a bound in `HttpClient::query`
   --> crates/catalog/rest/src/catalog.rs:197:31
    |
195 |     async fn query<
    |              ----- required by a bound in this associated function
196 |         R: DeserializeOwned,
197 |         E: DeserializeOwned + Into<Error>,
    |                               ^^^^^^^^^^^ required by this bound in `HttpClient::query`

error[E0624]: associated function `new` is private
   --> crates/catalog/rest/src/catalog.rs:679:35
    |
679 |                   return Err(Error::new(
    |                                     ^^^ private associated function
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:5
    |
29  | /     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
30  | |     where
31  | |         E: Into<BoxError>,
    | |__________________________- private associated function defined here

error[E0308]: arguments to this function are incorrect
   --> crates/catalog/rest/src/catalog.rs:679:28
    |
679 |                 return Err(Error::new(
    |                            ^^^^^^^^^^
680 |                     ErrorKind::Unexpected,
    |                     --------------------- expected `Kind`, found `ErrorKind`
    |
note: expected `Option<_>`, found `&str`
   --> crates/catalog/rest/src/catalog.rs:681:21
    |
681 |                     "Unable to load file io, neither warehouse nor metadata location is set!",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note:   expected enum `std::option::Option<_>`
            found reference `&'static str`
note: associated function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.12.5/src/error.rs:29:19
    |
29  |     pub(crate) fn new<E>(kind: Kind, source: Option<E>) -> Error
    |                   ^^^
help: try wrapping the expression in `Some`
    |
681 |                     Some("Unable to load file io, neither warehouse nor metadata location is set!"),
    |                     +++++                                                                         +

Some errors have detailed explanations: E0061, E0107, E0252, E0277, E0308, E0425, E0599, E0609, E0616...
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-rest` (lib) generated 1 warning
error: could not compile `iceberg-catalog-rest` (lib) due to 65 previous errors; 1 warning emitted


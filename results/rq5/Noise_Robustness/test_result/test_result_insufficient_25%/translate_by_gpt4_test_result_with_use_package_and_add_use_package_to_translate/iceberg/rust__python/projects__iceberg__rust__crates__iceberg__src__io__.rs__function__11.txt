Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/io.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0433]: failed to resolve: use of undeclared type `BytesMut`
   --> crates/iceberg/src/io.rs:239:22
    |
239 |     let mut buffer = BytesMut::new();
    |                      ^^^^^^^^ use of undeclared type `BytesMut`
    |
help: consider importing this struct
    |
51  + use bytes::BytesMut;
    |

error[E0433]: failed to resolve: use of undeclared type `File`
   --> crates/iceberg/src/io.rs:242:26
    |
242 |     let mut file = match File::open(&Path::new(&self.path)) {
    |                          ^^^^ use of undeclared type `File`
    |
help: consider importing one of these items
    |
51  + use std::fs::File;
    |
51  + use tokio::fs::File;
    |

error[E0433]: failed to resolve: use of undeclared type `Path`
   --> crates/iceberg/src/io.rs:242:38
    |
242 |     let mut file = match File::open(&Path::new(&self.path)) {
    |                                      ^^^^ use of undeclared type `Path`
    |
help: consider importing this struct
    |
51  + use std::path::Path;
    |

error[E0433]: failed to resolve: use of undeclared type `AllowStdIo`
   --> crates/iceberg/src/io.rs:247:22
    |
247 |     let mut stream = AllowStdIo::new(file);
    |                      ^^^^^^^^^^ use of undeclared type `AllowStdIo`
    |
help: consider importing this struct
    |
51  + use futures::io::AllowStdIo;
    |

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/io.rs:234:48
    |
234 | async fn read(&mut self, range: Range<u64>) -> Result<Bytes, Box<dyn std::error::Error>> { 
    |                                                ^^^^^^        -------------------------- help: remove this generic argument
    |                                                |
    |                                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0053]: method `read` has an incompatible type for trait
   --> crates/iceberg/src/io.rs:234:15
    |
234 | async fn read(&mut self, range: Range<u64>) -> Result<Bytes, Box<dyn std::error::Error>> { 
    |               ^^^^^^^^^
    |               |
    |               types differ in mutability
    |               help: change the self-receiver type to match the trait: `&self`
    |
note: type in trait
   --> crates/iceberg/src/io.rs:227:19
    |
227 |     async fn read(&self, range: Range<u64>) -> Result<Bytes>;
    |                   ^^^^^
    = note: expected signature `fn(&'life0 opendal::Reader, std::ops::Range<_>) -> Pin<_>`
               found signature `fn(&'life0 mut opendal::Reader, std::ops::Range<_>) -> Pin<_>`

error[E0599]: no variant or associated item named `InvalidInput` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/io.rs:237:42
    |
237 |         return Err(Error::new(ErrorKind::InvalidInput, format!("Requested {} bytes to read, expected positive range.", range_len))); 
    |                                          ^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `InvalidInput` not found for this enum

error[E0609]: no field `path` on type `&mut opendal::Reader`
   --> crates/iceberg/src/io.rs:242:54
    |
242 |     let mut file = match File::open(&Path::new(&self.path)) {
    |                                                      ^^^^ unknown field

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:243:32
    |
243 |         Err(err) => return Err(Box::new(err)),
    |                            --- ^^^^^^^^^^^^^ expected `Error`, found `Box<_>`
    |                            |
    |                            arguments to this enum variant are incorrect
    |
    = note: expected struct `error::Error`
               found struct `Box<_>`
help: the type constructed contains `Box<_>` due to the type of the argument passed
   --> crates/iceberg/src/io.rs:243:28
    |
243 |         Err(err) => return Err(Box::new(err)),
    |                            ^^^^-------------^
    |                                |
    |                                this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: consider unboxing the value
    |
243 |         Err(err) => return Err(*Box::new(err)),
    |                                +

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:254:24
    |
254 |             return Err(Box::new(std::io::Error::new(std::io::ErrorKind::UnexpectedEof, format!("EOF: read {} bytes", read_len))));
    |                    --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Error`, found `Box<Error>`
    |                    |
    |                    arguments to this enum variant are incorrect
    |
    = note: expected struct `error::Error`
               found struct `Box<std::io::Error>`
help: the type constructed contains `Box<std::io::Error>` due to the type of the argument passed
   --> crates/iceberg/src/io.rs:254:20
    |
254 |             return Err(Box::new(std::io::Error::new(std::io::ErrorKind::UnexpectedEof, format!("EOF: read {} bytes", read_len))));
    |                    ^^^^---------------------------------------------------------------------------------------------------------^
    |                        |
    |                        this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5

Some errors have detailed explanations: E0053, E0107, E0308, E0433, E0599, E0609.
For more information about an error, try `rustc --explain E0053`.
error: could not compile `iceberg` (lib) due to 10 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 10 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0433]: failed to resolve: use of undeclared type `BytesMut`
   --> crates/iceberg/src/io.rs:239:22
    |
239 |     let mut buffer = BytesMut::new();
    |                      ^^^^^^^^ use of undeclared type `BytesMut`
    |
help: consider importing this struct
    |
51  + use bytes::BytesMut;
    |

error[E0433]: failed to resolve: use of undeclared type `File`
   --> crates/iceberg/src/io.rs:242:26
    |
242 |     let mut file = match File::open(&Path::new(&self.path)) {
    |                          ^^^^ use of undeclared type `File`
    |
help: consider importing one of these items
    |
51  + use std::fs::File;
    |
51  + use tokio::fs::File;
    |

error[E0433]: failed to resolve: use of undeclared type `Path`
   --> crates/iceberg/src/io.rs:242:38
    |
242 |     let mut file = match File::open(&Path::new(&self.path)) {
    |                                      ^^^^ use of undeclared type `Path`
    |
help: consider importing this struct
    |
51  + use std::path::Path;
    |

error[E0433]: failed to resolve: use of undeclared type `AllowStdIo`
   --> crates/iceberg/src/io.rs:247:22
    |
247 |     let mut stream = AllowStdIo::new(file);
    |                      ^^^^^^^^^^ use of undeclared type `AllowStdIo`
    |
help: consider importing this struct
    |
51  + use futures::io::AllowStdIo;
    |

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> crates/iceberg/src/io.rs:234:48
    |
234 | async fn read(&mut self, range: Range<u64>) -> Result<Bytes, Box<dyn std::error::Error>> { 
    |                                                ^^^^^^        -------------------------- help: remove this generic argument
    |                                                |
    |                                                expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> crates/iceberg/src/error.rs:25:10
    |
25  | pub type Result<T> = std::result::Result<T, Error>;
    |          ^^^^^^ -

error[E0053]: method `read` has an incompatible type for trait
   --> crates/iceberg/src/io.rs:234:15
    |
234 | async fn read(&mut self, range: Range<u64>) -> Result<Bytes, Box<dyn std::error::Error>> { 
    |               ^^^^^^^^^
    |               |
    |               types differ in mutability
    |               help: change the self-receiver type to match the trait: `&self`
    |
note: type in trait
   --> crates/iceberg/src/io.rs:227:19
    |
227 |     async fn read(&self, range: Range<u64>) -> Result<Bytes>;
    |                   ^^^^^
    = note: expected signature `fn(&'life0 opendal::Reader, std::ops::Range<_>) -> Pin<_>`
               found signature `fn(&'life0 mut opendal::Reader, std::ops::Range<_>) -> Pin<_>`

error[E0599]: no variant or associated item named `InvalidInput` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/io.rs:237:42
    |
237 |         return Err(Error::new(ErrorKind::InvalidInput, format!("Requested {} bytes to read, expected positive range.", range_len))); 
    |                                          ^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `InvalidInput` not found for this enum

error[E0609]: no field `path` on type `&mut opendal::Reader`
   --> crates/iceberg/src/io.rs:242:54
    |
242 |     let mut file = match File::open(&Path::new(&self.path)) {
    |                                                      ^^^^ unknown field

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:243:32
    |
243 |         Err(err) => return Err(Box::new(err)),
    |                            --- ^^^^^^^^^^^^^ expected `Error`, found `Box<_>`
    |                            |
    |                            arguments to this enum variant are incorrect
    |
    = note: expected struct `error::Error`
               found struct `Box<_>`
help: the type constructed contains `Box<_>` due to the type of the argument passed
   --> crates/iceberg/src/io.rs:243:28
    |
243 |         Err(err) => return Err(Box::new(err)),
    |                            ^^^^-------------^
    |                                |
    |                                this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5
help: consider unboxing the value
    |
243 |         Err(err) => return Err(*Box::new(err)),
    |                                +

error[E0308]: mismatched types
   --> crates/iceberg/src/io.rs:254:24
    |
254 |             return Err(Box::new(std::io::Error::new(std::io::ErrorKind::UnexpectedEof, format!("EOF: read {} bytes", read_len))));
    |                    --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Error`, found `Box<Error>`
    |                    |
    |                    arguments to this enum variant are incorrect
    |
    = note: expected struct `error::Error`
               found struct `Box<std::io::Error>`
help: the type constructed contains `Box<std::io::Error>` due to the type of the argument passed
   --> crates/iceberg/src/io.rs:254:20
    |
254 |             return Err(Box::new(std::io::Error::new(std::io::ErrorKind::UnexpectedEof, format!("EOF: read {} bytes", read_len))));
    |                    ^^^^---------------------------------------------------------------------------------------------------------^
    |                        |
    |                        this argument influences the type of `Err`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:511:5

Some errors have detailed explanations: E0053, E0107, E0308, E0433, E0599, E0609.
For more information about an error, try `rustc --explain E0053`.
error: could not compile `iceberg` (lib) due to 10 previous errors


Fail
file path is :
projects/iceberg/rust/crates/catalog/glue/src/catalog.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
   Compiling iceberg-catalog-hms v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/hms)
   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
warning: unused import: `from_aws_build_error`
  --> crates/catalog/glue/src/catalog.rs:31:20
   |
31 | use crate::error::{from_aws_build_error, from_aws_sdk_error};
   |                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:533:23
    |
533 |     let src_db_name = convert_to_database(src)?;
    |                       ^^^^^^^^^^^^^^^^^^^-----
    |                                          ||
    |                                          |expected `&NamespaceIdent`, found `&TableIdent`
    |                                          an argument of type `&std::collections::HashMap<std::string::String, std::string::String>` is missing
    |
    = note: expected reference `&iceberg::NamespaceIdent`
               found reference `&'life1 TableIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
533 |     let src_db_name = convert_to_database(/* &iceberg::NamespaceIdent */, /* &std::collections::HashMap<std::string::String, std::string::String> */)?;
    |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:535:24
    |
535 |     let dest_db_name = convert_to_database(dest)?;
    |                        ^^^^^^^^^^^^^^^^^^^------
    |                                           ||
    |                                           |expected `&NamespaceIdent`, found `&TableIdent`
    |                                           an argument of type `&std::collections::HashMap<std::string::String, std::string::String>` is missing
    |
    = note: expected reference `&iceberg::NamespaceIdent`
               found reference `&'life2 TableIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
535 |     let dest_db_name = convert_to_database(/* &iceberg::NamespaceIdent */, /* &std::collections::HashMap<std::string::String, std::string::String> */)?;
    |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `0` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:539:32
    |
539 |     let src_table = match self.0.get_table()
    |                                ^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
539 |     let src_table = match self.client.0.get_table()
    |                                +++++++

error[E0609]: no field `catalog_id` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:540:26
    |
540 |         .catalog_id(self.catalog_id.as_ref())
    |                          ^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
540 |         .catalog_id(self.config.catalog_id.as_ref())
    |                          +++++++

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:566:10
    |
566 |         .parameters(src_table.parameters)
    |          ^^^^^^^^^^---------------------- an argument is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:12
    |
375 |     pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>)...
    |            ^^^^^^^^^^
help: provide the argument
    |
566 |         .parameters(src_table.parameters, /* v */)
    |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: `?` couldn't convert the error to `iceberg::Error`
   --> crates/catalog/glue/src/catalog.rs:569:17
    |
569 |         .build()?;
    |                 ^ the trait `From<aws_sdk_glue::error::BuildError>` is not implemented for `iceberg::Error`, which is required by `std::result::Result<(), iceberg::Error>: FromResidual<std::result::Result<Infallible, aws_sdk_glue::error::BuildError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <iceberg::Error as From<reqwest::error::Error>>
              <iceberg::Error as From<serde_json::Error>>
              <iceberg::Error as From<uuid::Error>>
              <iceberg::Error as From<url::parser::ParseError>>
              <iceberg::Error as From<rust_decimal::error::Error>>
              <iceberg::Error as From<opendal::types::error::Error>>
              <iceberg::Error as From<apache_avro::error::Error>>
              <iceberg::Error as From<chrono::format::ParseError>>
            and 5 others
    = note: required for `std::result::Result<(), iceberg::Error>` to implement `FromResidual<std::result::Result<Infallible, aws_sdk_glue::error::BuildError>>`

error[E0609]: no field `0` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:571:10
    |
571 |     self.0.create_table()
    |          ^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
571 |     self.client.0.create_table()
    |          +++++++

error[E0609]: no field `catalog_id` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:572:26
    |
572 |         .catalog_id(self.catalog_id.as_ref())
    |                          ^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
572 |         .catalog_id(self.config.catalog_id.as_ref())
    |                          +++++++

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:582:16
    |
582 |     match self.drop_table(src, false).await {
    |                ^^^^^^^^^^    -------
    |                              | |
    |                              | unexpected argument of type `bool`
    |                              help: remove the extra argument
    |
note: method defined here
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:84:14
    |
84  |     async fn drop_table(&self, table: &TableIdent) -> Result<()>;
    |              ^^^^^^^^^^

error[E0609]: no field `0` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:595:18
    |
595 |             self.0.delete_table()
    |                  ^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
595 |             self.client.0.delete_table()
    |                  +++++++

error[E0609]: no field `catalog_id` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:596:34
    |
596 |                 .catalog_id(self.catalog_id.as_ref())
    |                                  ^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
596 |                 .catalog_id(self.config.catalog_id.as_ref())
    |                                  +++++++

Some errors have detailed explanations: E0061, E0277, E0609.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib test) generated 1 warning
error: could not compile `iceberg-catalog-glue` (lib test) due to 11 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...

   Compiling iceberg-catalog-rest v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/rest)
   Compiling iceberg-catalog-glue v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/catalog/glue)
   Compiling iceberg-datafusion v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/integrations/datafusion)
warning: unused import: `from_aws_build_error`
  --> crates/catalog/glue/src/catalog.rs:31:20
   |
31 | use crate::error::{from_aws_build_error, from_aws_sdk_error};
   |                    ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:533:23
    |
533 |     let src_db_name = convert_to_database(src)?;
    |                       ^^^^^^^^^^^^^^^^^^^-----
    |                                          ||
    |                                          |expected `&NamespaceIdent`, found `&TableIdent`
    |                                          an argument of type `&HashMap<std::string::String, std::string::String>` is missing
    |
    = note: expected reference `&NamespaceIdent`
               found reference `&'life1 TableIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
533 |     let src_db_name = convert_to_database(/* &NamespaceIdent */, /* &HashMap<std::string::String, std::string::String> */)?;
    |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:535:24
    |
535 |     let dest_db_name = convert_to_database(dest)?;
    |                        ^^^^^^^^^^^^^^^^^^^------
    |                                           ||
    |                                           |expected `&NamespaceIdent`, found `&TableIdent`
    |                                           an argument of type `&HashMap<std::string::String, std::string::String>` is missing
    |
    = note: expected reference `&NamespaceIdent`
               found reference `&'life2 TableIdent`
note: function defined here
   --> crates/catalog/glue/src/utils.rs:96:15
    |
96  | pub(crate) fn convert_to_database(
    |               ^^^^^^^^^^^^^^^^^^^
97  |     namespace: &NamespaceIdent,
    |     --------------------------
98  |     properties: &HashMap<String, String>,
    |     ------------------------------------
help: provide the argument
    |
535 |     let dest_db_name = convert_to_database(/* &NamespaceIdent */, /* &HashMap<std::string::String, std::string::String> */)?;
    |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `0` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:539:32
    |
539 |     let src_table = match self.0.get_table()
    |                                ^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
539 |     let src_table = match self.client.0.get_table()
    |                                +++++++

error[E0609]: no field `catalog_id` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:540:26
    |
540 |         .catalog_id(self.catalog_id.as_ref())
    |                          ^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
540 |         .catalog_id(self.config.catalog_id.as_ref())
    |                          +++++++

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> crates/catalog/glue/src/catalog.rs:566:10
    |
566 |         .parameters(src_table.parameters)
    |          ^^^^^^^^^^---------------------- an argument is missing
    |
note: method defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-sdk-glue-1.47.0/src/types/_table_input.rs:375:12
    |
375 |     pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>)...
    |            ^^^^^^^^^^
help: provide the argument
    |
566 |         .parameters(src_table.parameters, /* v */)
    |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: `?` couldn't convert the error to `iceberg::Error`
   --> crates/catalog/glue/src/catalog.rs:569:17
    |
569 |         .build()?;
    |                 ^ the trait `From<aws_sdk_glue::error::BuildError>` is not implemented for `iceberg::Error`, which is required by `Result<(), iceberg::Error>: FromResidual<Result<Infallible, aws_sdk_glue::error::BuildError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <iceberg::Error as From<reqwest::error::Error>>
              <iceberg::Error as From<serde_json::Error>>
              <iceberg::Error as From<uuid::Error>>
              <iceberg::Error as From<url::parser::ParseError>>
              <iceberg::Error as From<rust_decimal::error::Error>>
              <iceberg::Error as From<opendal::types::error::Error>>
              <iceberg::Error as From<apache_avro::error::Error>>
              <iceberg::Error as From<chrono::format::ParseError>>
            and 5 others
    = note: required for `Result<(), iceberg::Error>` to implement `FromResidual<Result<Infallible, aws_sdk_glue::error::BuildError>>`

error[E0609]: no field `0` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:571:10
    |
571 |     self.0.create_table()
    |          ^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
571 |     self.client.0.create_table()
    |          +++++++

error[E0609]: no field `catalog_id` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:572:26
    |
572 |         .catalog_id(self.catalog_id.as_ref())
    |                          ^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
572 |         .catalog_id(self.config.catalog_id.as_ref())
    |                          +++++++

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> crates/catalog/glue/src/catalog.rs:582:16
    |
582 |     match self.drop_table(src, false).await {
    |                ^^^^^^^^^^    -------
    |                              | |
    |                              | unexpected argument of type `bool`
    |                              help: remove the extra argument
    |
note: method defined here
   --> /home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg/src/catalog/mod.rs:84:14
    |
84  |     async fn drop_table(&self, table: &TableIdent) -> Result<()>;
    |              ^^^^^^^^^^

error[E0609]: no field `0` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:595:18
    |
595 |             self.0.delete_table()
    |                  ^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
595 |             self.client.0.delete_table()
    |                  +++++++

error[E0609]: no field `catalog_id` on type `&GlueCatalog`
   --> crates/catalog/glue/src/catalog.rs:596:34
    |
596 |                 .catalog_id(self.catalog_id.as_ref())
    |                                  ^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
596 |                 .catalog_id(self.config.catalog_id.as_ref())
    |                                  +++++++

Some errors have detailed explanations: E0061, E0277, E0609.
For more information about an error, try `rustc --explain E0061`.
warning: `iceberg-catalog-glue` (lib) generated 1 warning
error: could not compile `iceberg-catalog-glue` (lib) due to 11 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...


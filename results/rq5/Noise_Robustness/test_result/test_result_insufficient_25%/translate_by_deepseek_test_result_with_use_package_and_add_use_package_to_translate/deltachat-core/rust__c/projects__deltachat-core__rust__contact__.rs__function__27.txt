Fail
file path is :
projects/deltachat-core/rust/src/contact.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0252]: the name `bail` is defined multiple times
  --> src/contact.rs:14:14
   |
4  | use anyhow::{bail, Result};
   |              ---- previous import of the macro `bail` here
...
14 | use anyhow::{bail, ensure, Context as _, Result};
   |              ^^^^--
   |              |
   |              `bail` reimported here
   |              help: remove unnecessary import
   |
   = note: `bail` must be defined only once in the macro namespace of this module

error[E0252]: the name `Result` is defined multiple times
  --> src/contact.rs:14:42
   |
4  | use anyhow::{bail, Result};
   |                    ------ previous import of the type `Result` here
...
14 | use anyhow::{bail, ensure, Context as _, Result};
   |                                          ^^^^^^ `Result` reimported here
   |
   = note: `Result` must be defined only once in the type namespace of this module

error[E0252]: the name `may_be_valid_addr` is defined multiple times
  --> src/contact.rs:17:9
   |
5  | use deltachat_contact_tools::{addr_normalize, may_be_valid_addr, normalize_name};
   |                                               ----------------- previous import of the value `may_be_valid_addr` here
...
17 | pub use deltachat_contact_tools::may_be_valid_addr;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `may_be_valid_addr` reimported here
   |
   = note: `may_be_valid_addr` must be defined only once in the value namespace of this module

error[E0252]: the name `addr_normalize` is defined multiple times
  --> src/contact.rs:19:38
   |
5  | use deltachat_contact_tools::{addr_normalize, may_be_valid_addr, normalize_name};
   |                               -------------- previous import of the value `addr_normalize` here
...
19 |     self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
   |                                      ^^^^^^^^^^^^^^--
   |                                      |
   |                                      `addr_normalize` reimported here
   |                                      help: remove unnecessary import
   |
   = note: `addr_normalize` must be defined only once in the value namespace of this module

error[E0425]: cannot find function `begin_transaction` in module `sql`
   --> src/contact.rs:986:10
    |
986 |     sql::begin_transaction(&context.sql)?;
    |          ^^^^^^^^^^^^^^^^^ not found in `sql`

error[E0425]: cannot find value `DC_ORIGIN_ADRESS_BOOK` in this scope
   --> src/contact.rs:993:81
    |
993 |             dc_add_or_lookup_contact(context, normalized_name, normalized_addr, DC_ORIGIN_ADRESS_BOOK, &mut sth_modified)?;
    |                                                                                 ^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `commit` in module `sql`
    --> src/contact.rs:1000:10
     |
1000 |     sql::commit(&context.sql)?;
     |          ^^^^^^ not found in `sql`

error[E0425]: cannot find value `DC_EVENT_CONTACTS_CHANGED` in this scope
    --> src/contact.rs:1003:28
     |
1003 |         context.emit_event(DC_EVENT_CONTACTS_CHANGED, 0, 0)?;
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

warning: unused import: `may_be_valid_addr`
 --> src/contact.rs:5:47
  |
5 | use deltachat_contact_tools::{addr_normalize, may_be_valid_addr, normalize_name};
  |                                               ^^^^^^^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/lib.rs:6:5
  |
6 |     unused,
  |     ^^^^^^
  = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`

warning: unused import: `std::str::Lines`
 --> src/contact.rs:6:5
  |
6 | use std::str::Lines;
  |     ^^^^^^^^^^^^^^^

warning: unused imports: `Result`, `bail`
  --> src/contact.rs:14:14
   |
14 | use anyhow::{bail, ensure, Context as _, Result};
   |              ^^^^                        ^^^^^^

warning: unused import: `deltachat_contact_tools::may_be_valid_addr`
  --> src/contact.rs:17:9
   |
17 | pub use deltachat_contact_tools::may_be_valid_addr;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `addr_normalize`
  --> src/contact.rs:19:38
   |
19 |     self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
   |                                      ^^^^^^^^^^^^^^

error[E0599]: no method named `is_null_or_invalid` found for reference `&context::Context` in the current scope
   --> src/contact.rs:976:16
    |
976 |     if context.is_null_or_invalid() || addr_book.is_null_or_empty() {
    |                ^^^^^^^^^^^^^^^^^^ method not found in `&Context`

error[E0599]: no method named `is_null_or_empty` found for reference `&str` in the current scope
   --> src/contact.rs:976:50
    |
976 |     if context.is_null_or_invalid() || addr_book.is_null_or_empty() {
    |                                                  ^^^^^^^^^^^^^^^^ help: there is a method with a similar name: `is_empty`

error[E0308]: mismatched types
   --> src/contact.rs:980:12
    |
980 |     if let Some(lines_vec) = split_address_book(addr_book) {
    |            ^^^^^^^^^^^^^^^   ----------------------------- this expression has type `Vec<(&str, &str)>`
    |            |
    |            expected `Vec<(&str, &str)>`, found `Option<_>`
    |
    = note: expected struct `Vec<(&str, &str)>`
                 found enum `std::option::Option<_>`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/contact.rs:990:50
    |
990 |         if let (Some(name), Some(addr)) = (lines.get(i), lines.get(i + 1)) {
    |                                                  ^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `core::slice::<impl [T]>::get`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/slice/mod.rs:123:6
    |
123 | impl<T> [T] {
    |      ^ required by this bound in `core::slice::<impl [T]>::get`
...
608 |     pub fn get<I>(&self, index: I) -> Option<&I::Output>
    |            --- required by a bound in this associated function

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/contact.rs:990:54
    |
990 |         if let (Some(name), Some(addr)) = (lines.get(i), lines.get(i + 1)) {
    |                                                  --- ^ doesn't have a size known at compile-time
    |                                                  |
    |                                                  required by a bound introduced by this call
    |
    = help: the trait `Sized` is not implemented for `str`, which is required by `usize: SliceIndex<[_]>`
    = help: the trait `SliceIndex<[T]>` is implemented for `usize`
    = note: required for `usize` to implement `SliceIndex<[str]>`
note: required by a bound in `core::slice::<impl [T]>::get`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/slice/mod.rs:610:12
    |
608 |     pub fn get<I>(&self, index: I) -> Option<&I::Output>
    |            --- required by a bound in this associated function
609 |     where
610 |         I: SliceIndex<Self>,
    |            ^^^^^^^^^^^^^^^^ required by this bound in `core::slice::<impl [T]>::get`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/contact.rs:990:64
    |
990 |         if let (Some(name), Some(addr)) = (lines.get(i), lines.get(i + 1)) {
    |                                                                ^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `core::slice::<impl [T]>::get`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/slice/mod.rs:123:6
    |
123 | impl<T> [T] {
    |      ^ required by this bound in `core::slice::<impl [T]>::get`
...
608 |     pub fn get<I>(&self, index: I) -> Option<&I::Output>
    |            --- required by a bound in this associated function

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/contact.rs:990:68
    |
990 |         if let (Some(name), Some(addr)) = (lines.get(i), lines.get(i + 1)) {
    |                                                                --- ^^^^^ doesn't have a size known at compile-time
    |                                                                |
    |                                                                required by a bound introduced by this call
    |
    = help: the trait `Sized` is not implemented for `str`, which is required by `usize: SliceIndex<[_]>`
    = help: the trait `SliceIndex<[T]>` is implemented for `usize`
    = note: required for `usize` to implement `SliceIndex<[str]>`
note: required by a bound in `core::slice::<impl [T]>::get`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/slice/mod.rs:610:12
    |
608 |     pub fn get<I>(&self, index: I) -> Option<&I::Output>
    |            --- required by a bound in this associated function
609 |     where
610 |         I: SliceIndex<Self>,
    |            ^^^^^^^^^^^^^^^^ required by this bound in `core::slice::<impl [T]>::get`

error[E0277]: the size for values of type `str` cannot be known at compilation time
    --> src/contact.rs:988:19
     |
988  |     i_cnt = lines.len();
     |                   ^^^ doesn't have a size known at compile-time
     |
     = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `Vec::<T, A>::len`
    --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:592:6
     |
592  | impl<T, A: Allocator> Vec<T, A> {
     |      ^ required by this bound in `Vec::<T, A>::len`
...
2144 |     pub fn len(&self) -> usize {
     |            --- required by a bound in this associated function

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/contact.rs:990:44
    |
990 |         if let (Some(name), Some(addr)) = (lines.get(i), lines.get(i + 1)) {
    |                                            ^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`, which is required by `Vec<_>: Deref`
    = note: required for `Vec<str>` to implement `Deref`

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/contact.rs:971:21
    |
971 |     let mut lines = Vec::new();
    |                     ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `Vec::<T>::new`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:407:6
    |
407 | impl<T> Vec<T> {
    |      ^ required by this bound in `Vec::<T>::new`
...
422 |     pub const fn new() -> Self {
    |                  --- required by a bound in this associated function

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/contact.rs:971:21
    |
971 |     let mut lines = Vec::new();
    |                     ^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `Vec`
   --> /home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:398:16
    |
398 | pub struct Vec<T, #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global> {
    |                ^ required by this bound in `Vec`

error[E0425]: cannot find function `dc_add_or_lookup_contact` in this scope
   --> src/contact.rs:993:13
    |
993 |             dc_add_or_lookup_contact(context, normalized_name, normalized_addr, DC_ORIGIN_ADRESS_BOOK, &mut sth_modified)?;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0308]: mismatched types
   --> src/contact.rs:994:16
    |
994 |             if sth_modified {
    |                ^^^^^^^^^^^^ expected `bool`, found integer

error[E0061]: this method takes 1 argument but 3 arguments were supplied
    --> src/contact.rs:1003:17
     |
1003 |         context.emit_event(DC_EVENT_CONTACTS_CHANGED, 0, 0)?;
     |                 ^^^^^^^^^^                            -  - unexpected argument of type `{integer}`
     |                                                       |
     |                                                       unexpected argument of type `{integer}`
     |
note: method defined here
    --> src/context.rs:595:12
     |
595  |     pub fn emit_event(&self, event: EventType) {
     |            ^^^^^^^^^^        ----------------
help: remove the extra arguments
     |
1003 -         context.emit_event(DC_EVENT_CONTACTS_CHANGED, 0, 0)?;
1003 +         context.emit_event(DC_EVENT_CONTACTS_CHANGED)?;
     |

error[E0277]: the `?` operator can only be applied to values that implement `Try`
    --> src/contact.rs:1003:9
     |
1003 |         context.emit_event(DC_EVENT_CONTACTS_CHANGED, 0, 0)?;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `()`
     |
     = help: the trait `Try` is not implemented for `()`

Some errors have detailed explanations: E0061, E0252, E0277, E0308, E0425, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `deltachat` (lib) generated 5 warnings
error: could not compile `deltachat` (lib) due to 23 previous errors; 5 warnings emitted
warning: build failed, waiting for other jobs to finish...
warning: `deltachat` (lib test) generated 5 warnings (5 duplicates)
error: could not compile `deltachat` (lib test) due to 23 previous errors; 5 warnings emitted
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


Fail
file path is :
projects/deltachat-core/rust/src/chat.rs

output is:


error is :
   Compiling deltachat v1.139.6 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/deltachat-core/rust)
error[E0425]: cannot find value `DC_CHAT_MAGIC` in this scope
    --> src/chat.rs:1718:38
     |
1718 |     if self.id == 0 || self.magic != DC_CHAT_MAGIC {
     |                                      ^^^^^^^^^^^^^ not found in this scope

error[E0308]: mismatched types
    --> src/chat.rs:1718:19
     |
1718 |     if self.id == 0 || self.magic != DC_CHAT_MAGIC {
     |        -------    ^ expected `ChatId`, found integer
     |        |
     |        expected because this is `ChatId`
     |
help: try wrapping the expression in `chat::ChatId`
     |
1718 |     if self.id == chat::ChatId(0) || self.magic != DC_CHAT_MAGIC {
     |                   +++++++++++++ +

error[E0609]: no field `magic` on type `&Chat`
    --> src/chat.rs:1718:29
     |
1718 |     if self.id == 0 || self.magic != DC_CHAT_MAGIC {
     |                             ^^^^^ unknown field
     |
     = note: available fields are: `id`, `typ`, `name`, `visibility`, `grpid` ... and 5 others

error[E0308]: mismatched types
    --> src/chat.rs:1721:5
     |
1717 | pub fn get_id(&self) -> u32 {
     |                         --- expected `u32` because of return type
...
1721 |     self.id
     |     ^^^^^^^ expected `u32`, found `ChatId`

Some errors have detailed explanations: E0308, E0425, E0609.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `deltachat` (lib) due to 4 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0308]: mismatched types
    --> src/securejoin.rs:975:44
     |
975  |             let msg = get_chat_msg(&alice, chat.get_id(), 0, 1).await;
     |                       ------------         ^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |                       |
     |                       arguments to this function are incorrect
     |
note: function defined here
    --> src/test_utils.rs:1052:21
     |
1052 | pub(crate) async fn get_chat_msg(
     |                     ^^^^^^^^^^^^
1053 |     t: &TestContext,
1054 |     chat_id: ChatId,
     |     ---------------
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
     |
975  |             let msg = get_chat_msg(&alice, chat::ChatId(chat.get_id()), 0, 1).await;
     |                                            +++++++++++++             +

error[E0308]: mismatched types
    --> src/securejoin.rs:1025:38
     |
1025 |         let msg = get_chat_msg(&bob, bob_chat.get_id(), i.next().unwrap(), msg_cnt).await;
     |                   ------------       ^^^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |                   |
     |                   arguments to this function are incorrect
     |
note: function defined here
    --> src/test_utils.rs:1052:21
     |
1052 | pub(crate) async fn get_chat_msg(
     |                     ^^^^^^^^^^^^
1053 |     t: &TestContext,
1054 |     chat_id: ChatId,
     |     ---------------
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
     |
1025 |         let msg = get_chat_msg(&bob, chat::ChatId(bob_chat.get_id()), i.next().unwrap(), msg_cnt).await;
     |                                      +++++++++++++                 +

error[E0308]: mismatched types
    --> src/securejoin.rs:1029:42
     |
1029 |             let msg = get_chat_msg(&bob, bob_chat.get_id(), i.next().unwrap(), msg_cnt).await;
     |                       ------------       ^^^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |                       |
     |                       arguments to this function are incorrect
     |
note: function defined here
    --> src/test_utils.rs:1052:21
     |
1052 | pub(crate) async fn get_chat_msg(
     |                     ^^^^^^^^^^^^
1053 |     t: &TestContext,
1054 |     chat_id: ChatId,
     |     ---------------
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
     |
1029 |             let msg = get_chat_msg(&bob, chat::ChatId(bob_chat.get_id()), i.next().unwrap(), msg_cnt).await;
     |                                          +++++++++++++                 +

error[E0308]: mismatched types
    --> src/securejoin.rs:1036:38
     |
1036 |         let msg = get_chat_msg(&bob, bob_chat.get_id(), i.next().unwrap(), msg_cnt).await;
     |                   ------------       ^^^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |                   |
     |                   arguments to this function are incorrect
     |
note: function defined here
    --> src/test_utils.rs:1052:21
     |
1052 | pub(crate) async fn get_chat_msg(
     |                     ^^^^^^^^^^^^
1053 |     t: &TestContext,
1054 |     chat_id: ChatId,
     |     ---------------
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
     |
1036 |         let msg = get_chat_msg(&bob, chat::ChatId(bob_chat.get_id()), i.next().unwrap(), msg_cnt).await;
     |                                      +++++++++++++                 +

error[E0308]: mismatched types
    --> src/chat.rs:1718:19
     |
1718 |     if self.id == 0 || self.magic != DC_CHAT_MAGIC {
     |        -------    ^ expected `ChatId`, found integer
     |        |
     |        expected because this is `chat::ChatId`
     |
help: try wrapping the expression in `chat::ChatId`
     |
1718 |     if self.id == chat::ChatId(0) || self.magic != DC_CHAT_MAGIC {
     |                   +++++++++++++ +

error[E0609]: no field `magic` on type `&chat::Chat`
    --> src/chat.rs:1718:29
     |
1718 |     if self.id == 0 || self.magic != DC_CHAT_MAGIC {
     |                             ^^^^^ unknown field
     |
     = note: available fields are: `id`, `typ`, `name`, `visibility`, `grpid` ... and 5 others

error[E0308]: mismatched types
    --> src/chat.rs:6554:39
     |
6554 |         let sent_msg = alice.send_msg(alice_chat.get_id(), &mut msg).await;
     |                              -------- ^^^^^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |                              |
     |                              arguments to this method are incorrect
     |
note: method defined here
    --> src/test_utils.rs:646:18
     |
646  |     pub async fn send_msg(&self, chat_id: ChatId, msg: &mut Message) -> SentMessage<'_> {
     |                  ^^^^^^^^        ---------------
help: try wrapping the expression in `chat::ChatId`
     |
6554 |         let sent_msg = alice.send_msg(chat::ChatId(alice_chat.get_id()), &mut msg).await;
     |                                       +++++++++++++                   +

error[E0308]: mismatched types
    --> src/chat.rs:6558:39
     |
6558 |         forward_msgs(&bob, &[msg.id], bob_chat.get_id()).await?;
     |         ------------                  ^^^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |         |
     |         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:4108:14
     |
4108 | pub async fn forward_msgs(context: &Context, msg_ids: &[MsgId], chat_id: ChatId) -> Result<()> {
     |              ^^^^^^^^^^^^                                       ---------------
help: try wrapping the expression in `chat::ChatId`
     |
6558 |         forward_msgs(&bob, &[msg.id], chat::ChatId(bob_chat.get_id())).await?;
     |                                       +++++++++++++                 +

error[E0308]: mismatched types
    --> src/chat.rs:6577:39
     |
6577 |         let sent_msg = alice.send_msg(alice_chat.get_id(), &mut msg).await;
     |                              -------- ^^^^^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |                              |
     |                              arguments to this method are incorrect
     |
note: method defined here
    --> src/test_utils.rs:646:18
     |
646  |     pub async fn send_msg(&self, chat_id: ChatId, msg: &mut Message) -> SentMessage<'_> {
     |                  ^^^^^^^^        ---------------
help: try wrapping the expression in `chat::ChatId`
     |
6577 |         let sent_msg = alice.send_msg(chat::ChatId(alice_chat.get_id()), &mut msg).await;
     |                                       +++++++++++++                   +

error[E0308]: mismatched types
    --> src/chat.rs:6580:39
     |
6580 |         forward_msgs(&bob, &[msg.id], bob_chat.get_id()).await?;
     |         ------------                  ^^^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |         |
     |         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:4108:14
     |
4108 | pub async fn forward_msgs(context: &Context, msg_ids: &[MsgId], chat_id: ChatId) -> Result<()> {
     |              ^^^^^^^^^^^^                                       ---------------
help: try wrapping the expression in `chat::ChatId`
     |
6580 |         forward_msgs(&bob, &[msg.id], chat::ChatId(bob_chat.get_id())).await?;
     |                                       +++++++++++++                 +

error[E0308]: mismatched types
    --> src/chat.rs:6634:52
     |
6634 |         forward_msgs(&alice, &[received_reply.id], alice_chat.get_id()).await?;
     |         ------------                               ^^^^^^^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |         |
     |         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:4108:14
     |
4108 | pub async fn forward_msgs(context: &Context, msg_ids: &[MsgId], chat_id: ChatId) -> Result<()> {
     |              ^^^^^^^^^^^^                                       ---------------
help: try wrapping the expression in `chat::ChatId`
     |
6634 |         forward_msgs(&alice, &[received_reply.id], chat::ChatId(alice_chat.get_id())).await?;
     |                                                    +++++++++++++                   +

error[E0599]: no method named `delete` found for type `u32` in the current scope
    --> src/contact.rs:2337:23
     |
2337 |         chat.get_id().delete(&alice).await?;
     |                       ^^^^^^ method not found in `u32`

error[E0308]: mismatched types
   --> src/html.rs:441:41
    |
441 |         let msg = alice.get_last_msg_in(chat.get_id()).await;
    |                         --------------- ^^^^^^^^^^^^^ expected `ChatId`, found `u32`
    |                         |
    |                         arguments to this method are incorrect
    |
note: method defined here
   --> src/test_utils.rs:531:18
    |
531 |     pub async fn get_last_msg_in(&self, chat_id: ChatId) -> Message {
    |                  ^^^^^^^^^^^^^^^        ---------------
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
    |
441 |         let msg = alice.get_last_msg_in(chat::ChatId(chat.get_id())).await;
    |                                         +++++++++++++             +

error[E0308]: mismatched types
    --> src/html.rs:452:47
     |
452  |         forward_msgs(&alice, &[msg.get_id()], chat.get_id())
     |         ------------                          ^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |         |
     |         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:4108:14
     |
4108 | pub async fn forward_msgs(context: &Context, msg_ids: &[MsgId], chat_id: ChatId) -> Result<()> {
     |              ^^^^^^^^^^^^                                       ---------------
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
     |
452  |         forward_msgs(&alice, &[msg.get_id()], chat::ChatId(chat.get_id()))
     |                                               +++++++++++++             +

error[E0308]: mismatched types
   --> src/html.rs:455:41
    |
455 |         let msg = alice.get_last_msg_in(chat.get_id()).await;
    |                         --------------- ^^^^^^^^^^^^^ expected `ChatId`, found `u32`
    |                         |
    |                         arguments to this method are incorrect
    |
note: method defined here
   --> src/test_utils.rs:531:18
    |
531 |     pub async fn get_last_msg_in(&self, chat_id: ChatId) -> Message {
    |                  ^^^^^^^^^^^^^^^        ---------------
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
    |
455 |         let msg = alice.get_last_msg_in(chat::ChatId(chat.get_id())).await;
    |                                         +++++++++++++             +

error[E0308]: mismatched types
   --> src/html.rs:493:41
    |
493 |         let msg = alice.get_last_msg_in(chat.get_id()).await;
    |                         --------------- ^^^^^^^^^^^^^ expected `ChatId`, found `u32`
    |                         |
    |                         arguments to this method are incorrect
    |
note: method defined here
   --> src/test_utils.rs:531:18
    |
531 |     pub async fn get_last_msg_in(&self, chat_id: ChatId) -> Message {
    |                  ^^^^^^^^^^^^^^^        ---------------
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
    |
493 |         let msg = alice.get_last_msg_in(chat::ChatId(chat.get_id())).await;
    |                                         +++++++++++++             +

error[E0308]: mismatched types
    --> src/html.rs:498:47
     |
498  |         forward_msgs(&alice, &[msg.get_id()], chat.get_id())
     |         ------------                          ^^^^^^^^^^^^^ expected `ChatId`, found `u32`
     |         |
     |         arguments to this function are incorrect
     |
note: function defined here
    --> src/chat.rs:4108:14
     |
4108 | pub async fn forward_msgs(context: &Context, msg_ids: &[MsgId], chat_id: ChatId) -> Result<()> {
     |              ^^^^^^^^^^^^                                       ---------------
help: try wrapping the expression in `chat::ChatId` (its field is private, but it's local to this crate and its privacy can be changed)
     |
498  |         forward_msgs(&alice, &[msg.get_id()], chat::ChatId(chat.get_id()))
     |                                               +++++++++++++             +

Some errors have detailed explanations: E0308, E0425, E0599, E0609.
error: could not compile `deltachat` (lib test) due to 19 previous errors
error: command `/home/k/.rustup/toolchains/1.77.1-x86_64-unknown-linux-gnu/bin/cargo test --no-run --message-format json-render-diagnostics` exited with code 101


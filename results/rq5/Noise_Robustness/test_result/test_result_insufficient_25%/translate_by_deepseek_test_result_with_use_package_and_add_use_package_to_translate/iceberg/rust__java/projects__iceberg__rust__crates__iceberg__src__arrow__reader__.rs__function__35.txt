Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:546:20
    |
546 |     if is_not_null(lhs.as_mut())? && is_not_null(rhs.as_mut())? {
    |        ----------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |        |
    |        arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:345:8
    |
345 | pub fn is_not_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^^^^^

error[E0308]: `?` operator has incompatible types
   --> crates/iceberg/src/arrow/reader.rs:546:8
    |
546 |     if is_not_null(lhs.as_mut())? && is_not_null(rhs.as_mut())? {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `BooleanArray`
    |
    = note: `?` operator cannot convert from `BooleanArray` to `bool`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:33
    |
546 |     if is_not_null(lhs.as_mut())? && is_not_null(rhs.as_mut())? {
    |                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-15347162241147446415.txt'

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:546:50
    |
546 |     if is_not_null(lhs.as_mut())? && is_not_null(rhs.as_mut())? {
    |                                      ----------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |                                      |
    |                                      arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:345:8
    |
345 | pub fn is_not_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^^^^^

error[E0308]: `?` operator has incompatible types
   --> crates/iceberg/src/arrow/reader.rs:546:38
    |
546 |     if is_not_null(lhs.as_mut())? && is_not_null(rhs.as_mut())? {
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `BooleanArray`
    |
    = note: `?` operator cannot convert from `BooleanArray` to `bool`

error[E0599]: no function or associated item named `default` found for struct `RecordBatch` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:547:43
    |
547 |         let lhs_result = lhs(RecordBatch::default());
    |                                           ^^^^^^^ function or associated item not found in `RecordBatch`
    |
note: if you're trying to build a new `RecordBatch` consider using one of the following associated functions:
      RecordBatch::try_new
      RecordBatch::try_new_with_options
      RecordBatch::new_empty
      RecordBatch::try_new_impl
      and 2 others
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:110:5
    |
110 |       pub fn try_new(schema: SchemaRef, columns: Vec<ArrayRef>) -> Result<Self, ArrowError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
119 | /     pub fn try_new_with_options(
120 | |         schema: SchemaRef,
121 | |         columns: Vec<ArrayRef>,
122 | |         options: &RecordBatchOptions,
123 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^
...
128 |       pub fn new_empty(schema: SchemaRef) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
144 | /     fn try_new_impl(
145 | |         schema: SchemaRef,
146 | |         columns: Vec<ArrayRef>,
147 | |         options: &RecordBatchOptions,
148 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:63
    |
546 |     if is_not_null(lhs.as_mut())? && is_not_null(rhs.as_mut())? {
    |                                                               ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-7478807566662386449.txt'

error[E0599]: no function or associated item named `default` found for struct `RecordBatch` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:548:43
    |
548 |         let rhs_result = rhs(RecordBatch::default());
    |                                           ^^^^^^^ function or associated item not found in `RecordBatch`
    |
note: if you're trying to build a new `RecordBatch` consider using one of the following associated functions:
      RecordBatch::try_new
      RecordBatch::try_new_with_options
      RecordBatch::new_empty
      RecordBatch::try_new_impl
      and 2 others
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:110:5
    |
110 |       pub fn try_new(schema: SchemaRef, columns: Vec<ArrayRef>) -> Result<Self, ArrowError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
119 | /     pub fn try_new_with_options(
120 | |         schema: SchemaRef,
121 | |         columns: Vec<ArrayRef>,
122 | |         options: &RecordBatchOptions,
123 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^
...
128 |       pub fn new_empty(schema: SchemaRef) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
144 | /     fn try_new_impl(
145 | |         schema: SchemaRef,
146 | |         columns: Vec<ArrayRef>,
147 | |         options: &RecordBatchOptions,
148 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:550:68
    |
550 | ...   if let (Ok(lhs_boolean), Ok(rhs_boolean)) = (lhs_array.as_any().downcast_ref::<BooleanArray>(), rhs_array.as_any().downcast_ref::<B...
    |                                                              ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:550:119
    |
550 | ...y().downcast_ref::<BooleanArray>(), rhs_array.as_any().downcast_ref::<BooleanArray>()) {
    |                                                  ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:551:59
    |
551 |                 let result = and(lhs_boolean, rhs_boolean)?;
    |                                                           ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-6276115859586241008.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:560:68
    |
560 | ...   if let (Ok(lhs_boolean), Ok(rhs_boolean)) = (lhs_array.as_any().downcast_ref::<BooleanArray>(), rhs_array.as_any().downcast_ref::<B...
    |                                                              ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:560:119
    |
560 | ...y().downcast_ref::<BooleanArray>(), rhs_array.as_any().downcast_ref::<BooleanArray>()) {
    |                                                  ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

Some errors have detailed explanations: E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `iceberg` (lib) due to 13 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:33
    |
546 |     if is_not_null(lhs.as_mut())? && is_not_null(rhs.as_mut())? {
    |                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-7260257237468750390.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:63
    |
546 |     if is_not_null(lhs.as_mut())? && is_not_null(rhs.as_mut())? {
    |                                                               ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-4635948450225055800.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:551:59
    |
551 |                 let result = and(lhs_boolean, rhs_boolean)?;
    |                                                           ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-524272042954426601.txt'

error: could not compile `iceberg` (lib test) due to 13 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:546:20
    |
546 |     if is_not_null(lhs.as_mut())? && is_not_null(rhs.as_mut())? {
    |        ----------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |        |
    |        arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:345:8
    |
345 | pub fn is_not_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^^^^^

error[E0308]: `?` operator has incompatible types
   --> crates/iceberg/src/arrow/reader.rs:546:8
    |
546 |     if is_not_null(lhs.as_mut())? && is_not_null(rhs.as_mut())? {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `BooleanArray`
    |
    = note: `?` operator cannot convert from `BooleanArray` to `bool`

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:33
    |
546 |     if is_not_null(lhs.as_mut())? && is_not_null(rhs.as_mut())? {
    |                                 ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-15586493307859713927.txt'

error[E0308]: mismatched types
   --> crates/iceberg/src/arrow/reader.rs:546:50
    |
546 |     if is_not_null(lhs.as_mut())? && is_not_null(rhs.as_mut())? {
    |                                      ----------- ^^^^^^^^^^^^ expected trait `arrow_array::Array`, found trait `FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send`
    |                                      |
    |                                      arguments to this function are incorrect
    |
    = note:      expected reference `&dyn arrow_array::Array`
            found mutable reference `&mut (dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send + 'static)`
note: function defined here
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-52.1.0/src/boolean.rs:345:8
    |
345 | pub fn is_not_null(input: &dyn Array) -> Result<BooleanArray, ArrowError> {
    |        ^^^^^^^^^^^

error[E0308]: `?` operator has incompatible types
   --> crates/iceberg/src/arrow/reader.rs:546:38
    |
546 |     if is_not_null(lhs.as_mut())? && is_not_null(rhs.as_mut())? {
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `BooleanArray`
    |
    = note: `?` operator cannot convert from `BooleanArray` to `bool`

error[E0599]: no function or associated item named `default` found for struct `RecordBatch` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:547:43
    |
547 |         let lhs_result = lhs(RecordBatch::default());
    |                                           ^^^^^^^ function or associated item not found in `RecordBatch`
    |
note: if you're trying to build a new `RecordBatch` consider using one of the following associated functions:
      RecordBatch::try_new
      RecordBatch::try_new_with_options
      RecordBatch::new_empty
      RecordBatch::try_new_impl
      and 2 others
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:110:5
    |
110 |       pub fn try_new(schema: SchemaRef, columns: Vec<ArrayRef>) -> Result<Self, ArrowError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
119 | /     pub fn try_new_with_options(
120 | |         schema: SchemaRef,
121 | |         columns: Vec<ArrayRef>,
122 | |         options: &RecordBatchOptions,
123 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^
...
128 |       pub fn new_empty(schema: SchemaRef) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
144 | /     fn try_new_impl(
145 | |         schema: SchemaRef,
146 | |         columns: Vec<ArrayRef>,
147 | |         options: &RecordBatchOptions,
148 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:546:63
    |
546 |     if is_not_null(lhs.as_mut())? && is_not_null(rhs.as_mut())? {
    |                                                               ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-7861516517469602936.txt'

error[E0599]: no function or associated item named `default` found for struct `RecordBatch` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:548:43
    |
548 |         let rhs_result = rhs(RecordBatch::default());
    |                                           ^^^^^^^ function or associated item not found in `RecordBatch`
    |
note: if you're trying to build a new `RecordBatch` consider using one of the following associated functions:
      RecordBatch::try_new
      RecordBatch::try_new_with_options
      RecordBatch::new_empty
      RecordBatch::try_new_impl
      and 2 others
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:110:5
    |
110 |       pub fn try_new(schema: SchemaRef, columns: Vec<ArrayRef>) -> Result<Self, ArrowError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
119 | /     pub fn try_new_with_options(
120 | |         schema: SchemaRef,
121 | |         columns: Vec<ArrayRef>,
122 | |         options: &RecordBatchOptions,
123 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^
...
128 |       pub fn new_empty(schema: SchemaRef) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
144 | /     fn try_new_impl(
145 | |         schema: SchemaRef,
146 | |         columns: Vec<ArrayRef>,
147 | |         options: &RecordBatchOptions,
148 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:550:68
    |
550 | ...   if let (Ok(lhs_boolean), Ok(rhs_boolean)) = (lhs_array.as_any().downcast_ref::<BooleanArray>(), rhs_array.as_any().downcast_ref::<B...
    |                                                              ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:550:119
    |
550 | ...y().downcast_ref::<BooleanArray>(), rhs_array.as_any().downcast_ref::<BooleanArray>()) {
    |                                                  ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:551:59
    |
551 |                 let result = and(lhs_boolean, rhs_boolean)?;
    |                                                           ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-15032337879684423910.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:560:68
    |
560 | ...   if let (Ok(lhs_boolean), Ok(rhs_boolean)) = (lhs_array.as_any().downcast_ref::<BooleanArray>(), rhs_array.as_any().downcast_ref::<B...
    |                                                              ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:560:119
    |
560 | ...y().downcast_ref::<BooleanArray>(), rhs_array.as_any().downcast_ref::<BooleanArray>()) {
    |                                                  ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

Some errors have detailed explanations: E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `iceberg` (lib) due to 13 previous errors


Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/arrow/reader.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0412]: cannot find type `AlwaysTrue` in this scope
   --> crates/iceberg/src/arrow/reader.rs:558:51
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                                   ^^^^^^^^^^ not found in this scope
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::AlwaysTrue` and 1 other; try using the variant's enum
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<crate::arrow::reader::BoundPredicate>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
558 |     if lhs(RecordBatch::default())?.as_any().is::<crate::expr::Predicate>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                                   ~~~~~~~~~~~~~~~~~~~~~~
help: you might be missing a type parameter
    |
528 | impl<'a, AlwaysTrue> BoundPredicateVisitor for PredicateConverter<'a> {
    |        ++++++++++++

error[E0412]: cannot find type `AlwaysTrue` in this scope
   --> crates/iceberg/src/arrow/reader.rs:558:111
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                                                                                               ^^^^^^^^^^ not found in this scope
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::AlwaysTrue` and 1 other; try using the variant's enum
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<crate::arrow::reader::BoundPredicate>() {
    |                                                                                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<crate::expr::Predicate>() {
    |                                                                                                               ~~~~~~~~~~~~~~~~~~~~~~
help: you might be missing a type parameter
    |
528 | impl<'a, AlwaysTrue> BoundPredicateVisitor for PredicateConverter<'a> {
    |        ++++++++++++

error[E0425]: cannot find value `AlwaysTrue` in this scope
   --> crates/iceberg/src/arrow/reader.rs:559:21
    |
559 |         Ok(Box::new(AlwaysTrue))
    |                     ^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
20  + use crate::arrow::reader::BoundPredicate::AlwaysTrue;
    |
20  + use crate::expr::Predicate::AlwaysTrue;
    |

error[E0412]: cannot find type `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:560:58
    |
560 |     } else if lhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                                          ^^^^^^^^^^^ not found in this scope
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::AlwaysFalse` and 1 other; try using the variant's enum
    |
560 |     } else if lhs(RecordBatch::default())?.as_any().is::<crate::arrow::reader::BoundPredicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
560 |     } else if lhs(RecordBatch::default())?.as_any().is::<crate::expr::Predicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~
help: you might be missing a type parameter
    |
528 | impl<'a, AlwaysFalse> BoundPredicateVisitor for PredicateConverter<'a> {
    |        +++++++++++++

error[E0412]: cannot find type `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:562:58
    |
562 |     } else if rhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                                          ^^^^^^^^^^^ not found in this scope
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::AlwaysFalse` and 1 other; try using the variant's enum
    |
562 |     } else if rhs(RecordBatch::default())?.as_any().is::<crate::arrow::reader::BoundPredicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
562 |     } else if rhs(RecordBatch::default())?.as_any().is::<crate::expr::Predicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~
help: you might be missing a type parameter
    |
528 | impl<'a, AlwaysFalse> BoundPredicateVisitor for PredicateConverter<'a> {
    |        +++++++++++++

warning: unused import: `or`
  --> crates/iceberg/src/arrow/reader.rs:21:60
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                                                            ^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0599]: no function or associated item named `default` found for struct `RecordBatch` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:25
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                         ^^^^^^^ function or associated item not found in `RecordBatch`
    |
note: if you're trying to build a new `RecordBatch` consider using one of the following associated functions:
      RecordBatch::try_new
      RecordBatch::try_new_with_options
      RecordBatch::new_empty
      RecordBatch::try_new_impl
      and 2 others
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:110:5
    |
110 |       pub fn try_new(schema: SchemaRef, columns: Vec<ArrayRef>) -> Result<Self, ArrowError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
119 | /     pub fn try_new_with_options(
120 | |         schema: SchemaRef,
121 | |         columns: Vec<ArrayRef>,
122 | |         options: &RecordBatchOptions,
123 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^
...
128 |       pub fn new_empty(schema: SchemaRef) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
144 | /     fn try_new_impl(
145 | |         schema: SchemaRef,
146 | |         columns: Vec<ArrayRef>,
147 | |         options: &RecordBatchOptions,
148 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:558:35
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                   ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-4006215229688055310.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:37
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                     ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no function or associated item named `default` found for struct `RecordBatch` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:85
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                                                                     ^^^^^^^ function or associated item not found in `RecordBatch`
    |
note: if you're trying to build a new `RecordBatch` consider using one of the following associated functions:
      RecordBatch::try_new
      RecordBatch::try_new_with_options
      RecordBatch::new_empty
      RecordBatch::try_new_impl
      and 2 others
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:110:5
    |
110 |       pub fn try_new(schema: SchemaRef, columns: Vec<ArrayRef>) -> Result<Self, ArrowError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
119 | /     pub fn try_new_with_options(
120 | |         schema: SchemaRef,
121 | |         columns: Vec<ArrayRef>,
122 | |         options: &RecordBatchOptions,
123 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^
...
128 |       pub fn new_empty(schema: SchemaRef) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
144 | /     fn try_new_impl(
145 | |         schema: SchemaRef,
146 | |         columns: Vec<ArrayRef>,
147 | |         options: &RecordBatchOptions,
148 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:558:95
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                                                                               ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-10274744122980606078.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:97
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                                                                                 ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no function or associated item named `default` found for struct `RecordBatch` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:560:32
    |
560 |     } else if lhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                ^^^^^^^ function or associated item not found in `RecordBatch`
    |
note: if you're trying to build a new `RecordBatch` consider using one of the following associated functions:
      RecordBatch::try_new
      RecordBatch::try_new_with_options
      RecordBatch::new_empty
      RecordBatch::try_new_impl
      and 2 others
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:110:5
    |
110 |       pub fn try_new(schema: SchemaRef, columns: Vec<ArrayRef>) -> Result<Self, ArrowError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
119 | /     pub fn try_new_with_options(
120 | |         schema: SchemaRef,
121 | |         columns: Vec<ArrayRef>,
122 | |         options: &RecordBatchOptions,
123 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^
...
128 |       pub fn new_empty(schema: SchemaRef) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
144 | /     fn try_new_impl(
145 | |         schema: SchemaRef,
146 | |         columns: Vec<ArrayRef>,
147 | |         options: &RecordBatchOptions,
148 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:560:42
    |
560 |     } else if lhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-12289197276418049727.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:560:44
    |
560 |     } else if lhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no function or associated item named `default` found for struct `RecordBatch` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:562:32
    |
562 |     } else if rhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                ^^^^^^^ function or associated item not found in `RecordBatch`
    |
note: if you're trying to build a new `RecordBatch` consider using one of the following associated functions:
      RecordBatch::try_new
      RecordBatch::try_new_with_options
      RecordBatch::new_empty
      RecordBatch::try_new_impl
      and 2 others
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:110:5
    |
110 |       pub fn try_new(schema: SchemaRef, columns: Vec<ArrayRef>) -> Result<Self, ArrowError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
119 | /     pub fn try_new_with_options(
120 | |         schema: SchemaRef,
121 | |         columns: Vec<ArrayRef>,
122 | |         options: &RecordBatchOptions,
123 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^
...
128 |       pub fn new_empty(schema: SchemaRef) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
144 | /     fn try_new_impl(
145 | |         schema: SchemaRef,
146 | |         columns: Vec<ArrayRef>,
147 | |         options: &RecordBatchOptions,
148 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:562:42
    |
562 |     } else if rhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-11020945881312447456.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:562:44
    |
562 |     } else if rhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `clone` found for mutable reference `&mut PredicateConverter<'a>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:565:24
    |
565 |         let obj = self.clone();
    |                        ^^^^^ method not found in `&mut PredicateConverter<'a>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the trait `Clone` defines an item `clone`, but is explicitly unimplemented

Some errors have detailed explanations: E0277, E0412, E0425, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 18 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:558:35
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                   ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-8741786966118928848.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:558:95
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                                                                               ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-7983969997751831749.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:560:42
    |
560 |     } else if lhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-9358610743560202059.txt'

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:562:42
    |
562 |     } else if rhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-2d20128a1dd8cadd.long-type-1470567956038702902.txt'

warning: `iceberg` (lib test) generated 1 warning (1 duplicate)
error: could not compile `iceberg` (lib test) due to 18 previous errors; 1 warning emitted

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0412]: cannot find type `AlwaysTrue` in this scope
   --> crates/iceberg/src/arrow/reader.rs:558:51
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                                   ^^^^^^^^^^ not found in this scope
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::AlwaysTrue` and 1 other; try using the variant's enum
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<crate::arrow::reader::BoundPredicate>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
558 |     if lhs(RecordBatch::default())?.as_any().is::<crate::expr::Predicate>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                                   ~~~~~~~~~~~~~~~~~~~~~~
help: you might be missing a type parameter
    |
528 | impl<'a, AlwaysTrue> BoundPredicateVisitor for PredicateConverter<'a> {
    |        ++++++++++++

error[E0412]: cannot find type `AlwaysTrue` in this scope
   --> crates/iceberg/src/arrow/reader.rs:558:111
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                                                                                               ^^^^^^^^^^ not found in this scope
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::AlwaysTrue` and 1 other; try using the variant's enum
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<crate::arrow::reader::BoundPredicate>() {
    |                                                                                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<crate::expr::Predicate>() {
    |                                                                                                               ~~~~~~~~~~~~~~~~~~~~~~
help: you might be missing a type parameter
    |
528 | impl<'a, AlwaysTrue> BoundPredicateVisitor for PredicateConverter<'a> {
    |        ++++++++++++

error[E0425]: cannot find value `AlwaysTrue` in this scope
   --> crates/iceberg/src/arrow/reader.rs:559:21
    |
559 |         Ok(Box::new(AlwaysTrue))
    |                     ^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
20  + use crate::arrow::reader::BoundPredicate::AlwaysTrue;
    |
20  + use crate::expr::Predicate::AlwaysTrue;
    |

error[E0412]: cannot find type `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:560:58
    |
560 |     } else if lhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                                          ^^^^^^^^^^^ not found in this scope
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::AlwaysFalse` and 1 other; try using the variant's enum
    |
560 |     } else if lhs(RecordBatch::default())?.as_any().is::<crate::arrow::reader::BoundPredicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
560 |     } else if lhs(RecordBatch::default())?.as_any().is::<crate::expr::Predicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~
help: you might be missing a type parameter
    |
528 | impl<'a, AlwaysFalse> BoundPredicateVisitor for PredicateConverter<'a> {
    |        +++++++++++++

error[E0412]: cannot find type `AlwaysFalse` in this scope
   --> crates/iceberg/src/arrow/reader.rs:562:58
    |
562 |     } else if rhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                                          ^^^^^^^^^^^ not found in this scope
    |
help: there is an enum variant `crate::arrow::reader::BoundPredicate::AlwaysFalse` and 1 other; try using the variant's enum
    |
562 |     } else if rhs(RecordBatch::default())?.as_any().is::<crate::arrow::reader::BoundPredicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
562 |     } else if rhs(RecordBatch::default())?.as_any().is::<crate::expr::Predicate>() {
    |                                                          ~~~~~~~~~~~~~~~~~~~~~~
help: you might be missing a type parameter
    |
528 | impl<'a, AlwaysFalse> BoundPredicateVisitor for PredicateConverter<'a> {
    |        +++++++++++++

warning: unused import: `or`
  --> crates/iceberg/src/arrow/reader.rs:21:60
   |
21 | use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
   |                                                            ^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0599]: no function or associated item named `default` found for struct `RecordBatch` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:25
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                         ^^^^^^^ function or associated item not found in `RecordBatch`
    |
note: if you're trying to build a new `RecordBatch` consider using one of the following associated functions:
      RecordBatch::try_new
      RecordBatch::try_new_with_options
      RecordBatch::new_empty
      RecordBatch::try_new_impl
      and 2 others
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:110:5
    |
110 |       pub fn try_new(schema: SchemaRef, columns: Vec<ArrayRef>) -> Result<Self, ArrowError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
119 | /     pub fn try_new_with_options(
120 | |         schema: SchemaRef,
121 | |         columns: Vec<ArrayRef>,
122 | |         options: &RecordBatchOptions,
123 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^
...
128 |       pub fn new_empty(schema: SchemaRef) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
144 | /     fn try_new_impl(
145 | |         schema: SchemaRef,
146 | |         columns: Vec<ArrayRef>,
147 | |         options: &RecordBatchOptions,
148 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:558:35
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                   ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-10096178436949383428.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:37
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                     ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no function or associated item named `default` found for struct `RecordBatch` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:85
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                                                                     ^^^^^^^ function or associated item not found in `RecordBatch`
    |
note: if you're trying to build a new `RecordBatch` consider using one of the following associated functions:
      RecordBatch::try_new
      RecordBatch::try_new_with_options
      RecordBatch::new_empty
      RecordBatch::try_new_impl
      and 2 others
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:110:5
    |
110 |       pub fn try_new(schema: SchemaRef, columns: Vec<ArrayRef>) -> Result<Self, ArrowError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
119 | /     pub fn try_new_with_options(
120 | |         schema: SchemaRef,
121 | |         columns: Vec<ArrayRef>,
122 | |         options: &RecordBatchOptions,
123 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^
...
128 |       pub fn new_empty(schema: SchemaRef) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
144 | /     fn try_new_impl(
145 | |         schema: SchemaRef,
146 | |         columns: Vec<ArrayRef>,
147 | |         options: &RecordBatchOptions,
148 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:558:95
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                                                                               ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-9077742925646166097.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:558:97
    |
558 |     if lhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() || rhs(RecordBatch::default())?.as_any().is::<AlwaysTrue>() {
    |                                                                                                 ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no function or associated item named `default` found for struct `RecordBatch` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:560:32
    |
560 |     } else if lhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                ^^^^^^^ function or associated item not found in `RecordBatch`
    |
note: if you're trying to build a new `RecordBatch` consider using one of the following associated functions:
      RecordBatch::try_new
      RecordBatch::try_new_with_options
      RecordBatch::new_empty
      RecordBatch::try_new_impl
      and 2 others
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:110:5
    |
110 |       pub fn try_new(schema: SchemaRef, columns: Vec<ArrayRef>) -> Result<Self, ArrowError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
119 | /     pub fn try_new_with_options(
120 | |         schema: SchemaRef,
121 | |         columns: Vec<ArrayRef>,
122 | |         options: &RecordBatchOptions,
123 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^
...
128 |       pub fn new_empty(schema: SchemaRef) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
144 | /     fn try_new_impl(
145 | |         schema: SchemaRef,
146 | |         columns: Vec<ArrayRef>,
147 | |         options: &RecordBatchOptions,
148 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:560:42
    |
560 |     } else if lhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-5389716260597938410.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:560:44
    |
560 |     } else if lhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no function or associated item named `default` found for struct `RecordBatch` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:562:32
    |
562 |     } else if rhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                ^^^^^^^ function or associated item not found in `RecordBatch`
    |
note: if you're trying to build a new `RecordBatch` consider using one of the following associated functions:
      RecordBatch::try_new
      RecordBatch::try_new_with_options
      RecordBatch::new_empty
      RecordBatch::try_new_impl
      and 2 others
   --> /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/record_batch.rs:110:5
    |
110 |       pub fn try_new(schema: SchemaRef, columns: Vec<ArrayRef>) -> Result<Self, ArrowError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
119 | /     pub fn try_new_with_options(
120 | |         schema: SchemaRef,
121 | |         columns: Vec<ArrayRef>,
122 | |         options: &RecordBatchOptions,
123 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^
...
128 |       pub fn new_empty(schema: SchemaRef) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
144 | /     fn try_new_impl(
145 | |         schema: SchemaRef,
146 | |         columns: Vec<ArrayRef>,
147 | |         options: &RecordBatchOptions,
148 | |     ) -> Result<Self, ArrowError> {
    | |_________________________________^

error[E0277]: `?` couldn't convert the error to `error::Error`
   --> crates/iceberg/src/arrow/reader.rs:562:42
    |
562 |     } else if rhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                          ^ the trait `From<arrow_schema::ArrowError>` is not implemented for `error::Error`, which is required by `std::result::Result<Box<dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, arrow_schema::ArrowError> + std::marker::Send>, error::Error>: FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              <error::Error as From<reqwest::Error>>
              <error::Error as From<serde_json::Error>>
              <error::Error as From<uuid::Error>>
              <error::Error as From<url::ParseError>>
              <error::Error as From<rust_decimal::Error>>
              <error::Error as From<opendal::Error>>
              <error::Error as From<apache_avro::Error>>
              <error::Error as From<chrono::ParseError>>
            and 5 others
    = note: required for `Result<Box<dyn FnMut(RecordBatch) -> Result<BooleanArray, ArrowError> + Send>, Error>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`
    = note: the full type name has been written to '/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/target/debug/deps/iceberg-4f45ef7999fe22a6.long-type-5144691404389379215.txt'

error[E0599]: no method named `as_any` found for struct `BooleanArray` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:562:44
    |
562 |     } else if rhs(RecordBatch::default())?.as_any().is::<AlwaysFalse>() {
    |                                            ^^^^^^ method not found in `BooleanArray`
    |
   ::: /root/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-52.1.0/src/array/mod.rs:99:8
    |
99  |     fn as_any(&self) -> &dyn Any;
    |        ------ the method is available for `BooleanArray` here
    |
    = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:
    |
20  + use arrow_array::Array;
    |

error[E0599]: no method named `clone` found for mutable reference `&mut PredicateConverter<'a>` in the current scope
   --> crates/iceberg/src/arrow/reader.rs:565:24
    |
565 |         let obj = self.clone();
    |                        ^^^^^ method not found in `&mut PredicateConverter<'a>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the trait `Clone` defines an item `clone`, but is explicitly unimplemented

Some errors have detailed explanations: E0277, E0412, E0425, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `iceberg` (lib) generated 1 warning
error: could not compile `iceberg` (lib) due to 18 previous errors; 1 warning emitted


Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0616]: field `field` of struct `term::BoundReference` is private
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:303:28
    |
303 |     let field = &reference.field;
    |                            ^^^^^ private field
    |
help: a method `field` also exists, call it with parentheses
    |
303 |     let field = &reference.field();
    |                                 ++

error[E0599]: no method named `_contains_nulls_only` found for mutable reference `&mut InclusiveMetricsEvaluator<'_>` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:306:13
    |
306 |     if self._contains_nulls_only(field_id)? {
    |             ^^^^^^^^^^^^^^^^^^^^ help: there is a method with a similar name: `contains_nulls_only`

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:307:19
    |
307 |         return Ok(ROWS_CANNOT_MATCH);
    |                -- ^^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |                |
    |                arguments to this enum variant are incorrect
    |
    = note: expected type `bool`
               found enum `std::result::Result<bool, error::Error>`
help: the type constructed contains `std::result::Result<bool, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:307:16
    |
307 |         return Ok(ROWS_CANNOT_MATCH);
    |                ^^^-----------------^
    |                   |
    |                   this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<bool, error::Error>` value, propagating a `Result::Err` value to the caller
    |
307 |         return Ok(ROWS_CANNOT_MATCH?);
    |                                    +

error[E0599]: no variant or associated item named `InvalidArgument` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:311:42
    |
311 |         return Err(Error::new(ErrorKind::InvalidArgument, format!(
    |                                          ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `InvalidArgument` not found for this enum

error[E0599]: no method named `as_string` found for reference `&values::Datum` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:317:24
    |
317 |     let prefix = datum.as_string().unwrap();
    |                        ^^^^^^^^^ method not found in `&Datum`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `as_string`, perhaps you need to implement it:
            candidate #1: `AsArray`

error[E0609]: no field `lower_bounds` on type `&mut InclusiveMetricsEvaluator<'_>`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:320:43
    |
320 |     if let Some(lower_bound_bytes) = self.lower_bounds.get(&field_id) {
    |                                           ^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
320 |     if let Some(lower_bound_bytes) = self.data_file.lower_bounds.get(&field_id) {
    |                                           ++++++++++

error[E0425]: cannot find function `from_bytes` in this scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:321:27
    |
321 |         let lower_bound = from_bytes(field.field_type, lower_bound_bytes)?;
    |                           ^^^^^^^^^^ not found in this scope

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:325:23
    |
325 |             return Ok(ROWS_CANNOT_MATCH);
    |                    -- ^^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |                    |
    |                    arguments to this enum variant are incorrect
    |
    = note: expected type `bool`
               found enum `std::result::Result<bool, error::Error>`
help: the type constructed contains `std::result::Result<bool, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:325:20
    |
325 |             return Ok(ROWS_CANNOT_MATCH);
    |                    ^^^-----------------^
    |                       |
    |                       this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<bool, error::Error>` value, propagating a `Result::Err` value to the caller
    |
325 |             return Ok(ROWS_CANNOT_MATCH?);
    |                                        +

error[E0609]: no field `upper_bounds` on type `&mut InclusiveMetricsEvaluator<'_>`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:329:43
    |
329 |     if let Some(upper_bound_bytes) = self.upper_bounds.get(&field_id) {
    |                                           ^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
329 |     if let Some(upper_bound_bytes) = self.data_file.upper_bounds.get(&field_id) {
    |                                           ++++++++++

error[E0425]: cannot find function `from_bytes` in this scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:330:27
    |
330 |         let upper_bound = from_bytes(field.field_type, upper_bound_bytes)?;
    |                           ^^^^^^^^^^ not found in this scope

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:334:23
    |
334 |             return Ok(ROWS_CANNOT_MATCH);
    |                    -- ^^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |                    |
    |                    arguments to this enum variant are incorrect
    |
    = note: expected type `bool`
               found enum `std::result::Result<bool, error::Error>`
help: the type constructed contains `std::result::Result<bool, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:334:20
    |
334 |             return Ok(ROWS_CANNOT_MATCH);
    |                    ^^^-----------------^
    |                       |
    |                       this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<bool, error::Error>` value, propagating a `Result::Err` value to the caller
    |
334 |             return Ok(ROWS_CANNOT_MATCH?);
    |                                        +

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:338:8
    |
338 |     Ok(ROWS_MIGHT_MATCH)
    |     -- ^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |     |
    |     arguments to this enum variant are incorrect
    |
    = note: expected type `bool`
               found enum `std::result::Result<bool, error::Error>`
help: the type constructed contains `std::result::Result<bool, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:338:5
    |
338 |     Ok(ROWS_MIGHT_MATCH)
    |     ^^^----------------^
    |        |
    |        this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<bool, error::Error>` value, propagating a `Result::Err` value to the caller
    |
338 |     Ok(ROWS_MIGHT_MATCH?)
    |                        +

Some errors have detailed explanations: E0308, E0425, E0599, E0609, E0616.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `iceberg` (lib) due to 12 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 12 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0616]: field `field` of struct `term::BoundReference` is private
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:303:28
    |
303 |     let field = &reference.field;
    |                            ^^^^^ private field
    |
help: a method `field` also exists, call it with parentheses
    |
303 |     let field = &reference.field();
    |                                 ++

error[E0599]: no method named `_contains_nulls_only` found for mutable reference `&mut InclusiveMetricsEvaluator<'_>` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:306:13
    |
306 |     if self._contains_nulls_only(field_id)? {
    |             ^^^^^^^^^^^^^^^^^^^^ help: there is a method with a similar name: `contains_nulls_only`

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:307:19
    |
307 |         return Ok(ROWS_CANNOT_MATCH);
    |                -- ^^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |                |
    |                arguments to this enum variant are incorrect
    |
    = note: expected type `bool`
               found enum `std::result::Result<bool, error::Error>`
help: the type constructed contains `std::result::Result<bool, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:307:16
    |
307 |         return Ok(ROWS_CANNOT_MATCH);
    |                ^^^-----------------^
    |                   |
    |                   this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<bool, error::Error>` value, propagating a `Result::Err` value to the caller
    |
307 |         return Ok(ROWS_CANNOT_MATCH?);
    |                                    +

error[E0599]: no variant or associated item named `InvalidArgument` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:311:42
    |
311 |         return Err(Error::new(ErrorKind::InvalidArgument, format!(
    |                                          ^^^^^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `InvalidArgument` not found for this enum

error[E0599]: no method named `as_string` found for reference `&values::Datum` in the current scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:317:24
    |
317 |     let prefix = datum.as_string().unwrap();
    |                        ^^^^^^^^^ method not found in `&Datum`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `as_string`, perhaps you need to implement it:
            candidate #1: `AsArray`

error[E0609]: no field `lower_bounds` on type `&mut InclusiveMetricsEvaluator<'_>`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:320:43
    |
320 |     if let Some(lower_bound_bytes) = self.lower_bounds.get(&field_id) {
    |                                           ^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
320 |     if let Some(lower_bound_bytes) = self.data_file.lower_bounds.get(&field_id) {
    |                                           ++++++++++

error[E0425]: cannot find function `from_bytes` in this scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:321:27
    |
321 |         let lower_bound = from_bytes(field.field_type, lower_bound_bytes)?;
    |                           ^^^^^^^^^^ not found in this scope

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:325:23
    |
325 |             return Ok(ROWS_CANNOT_MATCH);
    |                    -- ^^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |                    |
    |                    arguments to this enum variant are incorrect
    |
    = note: expected type `bool`
               found enum `std::result::Result<bool, error::Error>`
help: the type constructed contains `std::result::Result<bool, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:325:20
    |
325 |             return Ok(ROWS_CANNOT_MATCH);
    |                    ^^^-----------------^
    |                       |
    |                       this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<bool, error::Error>` value, propagating a `Result::Err` value to the caller
    |
325 |             return Ok(ROWS_CANNOT_MATCH?);
    |                                        +

error[E0609]: no field `upper_bounds` on type `&mut InclusiveMetricsEvaluator<'_>`
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:329:43
    |
329 |     if let Some(upper_bound_bytes) = self.upper_bounds.get(&field_id) {
    |                                           ^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
329 |     if let Some(upper_bound_bytes) = self.data_file.upper_bounds.get(&field_id) {
    |                                           ++++++++++

error[E0425]: cannot find function `from_bytes` in this scope
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:330:27
    |
330 |         let upper_bound = from_bytes(field.field_type, upper_bound_bytes)?;
    |                           ^^^^^^^^^^ not found in this scope

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:334:23
    |
334 |             return Ok(ROWS_CANNOT_MATCH);
    |                    -- ^^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |                    |
    |                    arguments to this enum variant are incorrect
    |
    = note: expected type `bool`
               found enum `std::result::Result<bool, error::Error>`
help: the type constructed contains `std::result::Result<bool, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:334:20
    |
334 |             return Ok(ROWS_CANNOT_MATCH);
    |                    ^^^-----------------^
    |                       |
    |                       this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<bool, error::Error>` value, propagating a `Result::Err` value to the caller
    |
334 |             return Ok(ROWS_CANNOT_MATCH?);
    |                                        +

error[E0308]: mismatched types
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:338:8
    |
338 |     Ok(ROWS_MIGHT_MATCH)
    |     -- ^^^^^^^^^^^^^^^^ expected `bool`, found `Result<bool, Error>`
    |     |
    |     arguments to this enum variant are incorrect
    |
    = note: expected type `bool`
               found enum `std::result::Result<bool, error::Error>`
help: the type constructed contains `std::result::Result<bool, error::Error>` due to the type of the argument passed
   --> crates/iceberg/src/expr/visitors/inclusive_metrics_evaluator.rs:338:5
    |
338 |     Ok(ROWS_MIGHT_MATCH)
    |     ^^^----------------^
    |        |
    |        this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5
help: use the `?` operator to extract the `std::result::Result<bool, error::Error>` value, propagating a `Result::Err` value to the caller
    |
338 |     Ok(ROWS_MIGHT_MATCH?)
    |                        +

Some errors have detailed explanations: E0308, E0425, E0599, E0609, E0616.
For more information about an error, try `rustc --explain E0308`.
error: could not compile `iceberg` (lib) due to 12 previous errors


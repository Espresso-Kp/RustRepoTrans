Fail
file path is :
projects/iceberg/rust/crates/iceberg/src/spec/schema.rs

output is:



error is :
   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0428]: the name `visit_schema` is defined multiple times
   --> crates/iceberg/src/spec/schema.rs:764:1
    |
462 | pub fn visit_schema<V: SchemaVisitor>(schema: &Schema, visitor: &mut V) -> Result<V::T> {
    | --------------------------------------------------------------------------------------- previous definition of the value `visit_schema` here
...
764 | pub fn visit_schema<V: SchemaVisitor>(schema: &Schema, visitor: &mut V) -> Result<Option<StructType>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `visit_schema` redefined here
    |
    = note: `visit_schema` must be defined only once in the value namespace of this module

error[E0599]: no variant or associated item named `InvalidData` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/spec/schema.rs:750:50
    |
750 |         None => return Err(Error::new(ErrorKind::InvalidData, "No fields selected")),
    |                                                  ^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `InvalidData` not found for this enum

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/schema.rs:753:19
    |
753 |         r#struct: result_struct,
    |                   ^^^^^^^^^^^^^ expected `StructType`, found `Type`

error[E0063]: missing fields `alias_to_id`, `field_id_to_accessor`, `highest_field_id` and 4 other fields in initializer of `spec::schema::Schema`
   --> crates/iceberg/src/spec/schema.rs:752:22
    |
752 |     let new_schema = Schema {
    |                      ^^^^^^ missing `alias_to_id`, `field_id_to_accessor`, `highest_field_id` and 4 other fields

error[E0277]: the trait bound `datatypes::Type: From<spec::schema::Schema>` is not satisfied
   --> crates/iceberg/src/spec/schema.rs:762:19
    |
762 |     Ok(new_schema.into())
    |                   ^^^^ the trait `From<spec::schema::Schema>` is not implemented for `datatypes::Type`, which is required by `spec::schema::Schema: Into<_>`
    |
    = help: the following other types implement trait `From<T>`:
              <datatypes::Type as From<datatypes::PrimitiveType>>
              <datatypes::Type as From<datatypes::StructType>>
              <datatypes::Type as From<datatypes::ListType>>
              <datatypes::Type as From<SerdeType<'a>>>
              <datatypes::Type as From<datatypes::MapType>>
    = note: required for `spec::schema::Schema` to implement `Into<datatypes::Type>`

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/schema.rs:766:5
    |
764 | pub fn visit_schema<V: SchemaVisitor>(schema: &Schema, visitor: &mut V) -> Result<Option<StructType>> {
    |                                                                            -------------------------- expected `std::result::Result<std::option::Option<datatypes::StructType>, error::Error>` because of return type
765 |     let result = visit_struct(&schema.r#struct, visitor)?;
766 |     visitor.schema(schema, result)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<Option<StructType>, Error>`, found `Result<<... as SchemaVisitor>::T, ...>`
    |
    = note: expected enum `std::result::Result<std::option::Option<datatypes::StructType>, _>`
               found enum `std::result::Result<<V as spec::schema::SchemaVisitor>::T, _>`
help: consider constraining the associated type `<V as spec::schema::SchemaVisitor>::T` to `std::option::Option<datatypes::StructType>`
    |
764 | pub fn visit_schema<V: SchemaVisitor<T = std::option::Option<datatypes::StructType>>>(schema: &Schema, visitor: &mut V) -> Result<Option<StructType>> {
    |                                     ++++++++++++++++++++++++++++++++++++++++++++++++

Some errors have detailed explanations: E0063, E0277, E0308, E0428, E0599.
For more information about an error, try `rustc --explain E0063`.
error: could not compile `iceberg` (lib) due to 6 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `iceberg` (lib test) due to 6 previous errors

   Compiling iceberg v0.2.0 (/home/k/ogs_PHD/LLM4SE/2Rust_projects/auto_get_functionPair/projects/iceberg/rust/crates/iceberg)
error[E0428]: the name `visit_schema` is defined multiple times
   --> crates/iceberg/src/spec/schema.rs:764:1
    |
462 | pub fn visit_schema<V: SchemaVisitor>(schema: &Schema, visitor: &mut V) -> Result<V::T> {
    | --------------------------------------------------------------------------------------- previous definition of the value `visit_schema` here
...
764 | pub fn visit_schema<V: SchemaVisitor>(schema: &Schema, visitor: &mut V) -> Result<Option<StructType>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `visit_schema` redefined here
    |
    = note: `visit_schema` must be defined only once in the value namespace of this module

error[E0599]: no variant or associated item named `InvalidData` found for enum `error::ErrorKind` in the current scope
   --> crates/iceberg/src/spec/schema.rs:750:50
    |
750 |         None => return Err(Error::new(ErrorKind::InvalidData, "No fields selected")),
    |                                                  ^^^^^^^^^^^ variant or associated item not found in `ErrorKind`
    |
   ::: crates/iceberg/src/error.rs:30:1
    |
30  | pub enum ErrorKind {
    | ------------------ variant or associated item `InvalidData` not found for this enum

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/schema.rs:753:19
    |
753 |         r#struct: result_struct,
    |                   ^^^^^^^^^^^^^ expected `StructType`, found `Type`

error[E0063]: missing fields `alias_to_id`, `field_id_to_accessor`, `highest_field_id` and 4 other fields in initializer of `spec::schema::Schema`
   --> crates/iceberg/src/spec/schema.rs:752:22
    |
752 |     let new_schema = Schema {
    |                      ^^^^^^ missing `alias_to_id`, `field_id_to_accessor`, `highest_field_id` and 4 other fields

error[E0277]: the trait bound `datatypes::Type: From<spec::schema::Schema>` is not satisfied
   --> crates/iceberg/src/spec/schema.rs:762:19
    |
762 |     Ok(new_schema.into())
    |                   ^^^^ the trait `From<spec::schema::Schema>` is not implemented for `datatypes::Type`, which is required by `spec::schema::Schema: Into<_>`
    |
    = help: the following other types implement trait `From<T>`:
              <datatypes::Type as From<datatypes::PrimitiveType>>
              <datatypes::Type as From<datatypes::StructType>>
              <datatypes::Type as From<datatypes::ListType>>
              <datatypes::Type as From<SerdeType<'a>>>
              <datatypes::Type as From<datatypes::MapType>>
    = note: required for `spec::schema::Schema` to implement `Into<datatypes::Type>`

error[E0308]: mismatched types
   --> crates/iceberg/src/spec/schema.rs:766:5
    |
764 | pub fn visit_schema<V: SchemaVisitor>(schema: &Schema, visitor: &mut V) -> Result<Option<StructType>> {
    |                                                                            -------------------------- expected `std::result::Result<std::option::Option<datatypes::StructType>, error::Error>` because of return type
765 |     let result = visit_struct(&schema.r#struct, visitor)?;
766 |     visitor.schema(schema, result)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<Option<StructType>, Error>`, found `Result<<... as SchemaVisitor>::T, ...>`
    |
    = note: expected enum `std::result::Result<std::option::Option<datatypes::StructType>, _>`
               found enum `std::result::Result<<V as spec::schema::SchemaVisitor>::T, _>`
help: consider constraining the associated type `<V as spec::schema::SchemaVisitor>::T` to `std::option::Option<datatypes::StructType>`
    |
764 | pub fn visit_schema<V: SchemaVisitor<T = std::option::Option<datatypes::StructType>>>(schema: &Schema, visitor: &mut V) -> Result<Option<StructType>> {
    |                                     ++++++++++++++++++++++++++++++++++++++++++++++++

Some errors have detailed explanations: E0063, E0277, E0308, E0428, E0599.
For more information about an error, try `rustc --explain E0063`.
error: could not compile `iceberg` (lib) due to 6 previous errors


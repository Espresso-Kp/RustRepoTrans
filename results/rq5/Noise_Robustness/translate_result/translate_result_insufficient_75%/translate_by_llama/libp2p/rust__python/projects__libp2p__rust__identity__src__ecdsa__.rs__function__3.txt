<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def get_pubkey(self) -> PublicKey:
        """
        :return: public key of the peer
        :raise PeerDataError: if public key not found
        """
        if self.pubkey is None:
            raise PeerDataError("public key not found")
        return self.pubkey
</python function>
<rust function signature>
pub fn public(&self) -> &PublicKey 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct Keypair {
    secret: SecretKey,
    public: PublicKey,
}
pub struct PublicKey(VerifyingKey);

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use super::error::DecodingError;
use core::cmp;
use core::fmt;
use core::hash;
use p256::{
    ecdsa::{
        signature::{Signer, Verifier},
        Signature, SigningKey, VerifyingKey,
    },
    EncodedPoint,
};
use sec1::{DecodeEcPrivateKey, EncodeEcPrivateKey};
use void::Void;
use zeroize::Zeroize;
use super::*;

</rust function dependency libraries>

</message>
<function>
pub fn public(&self) -> &PublicKey {
        &self.public
    }
</function>
<translated function>
```rust
pub fn public(&self) -> &PublicKey {
    if self.pubkey.is_none() {
        panic!("public key not found");
    }
    self.pubkey.as_ref().unwrap()
}
```

Note: I've assumed that `self.pubkey` is an `Option<PublicKey>` based on the Python code. If it's a `None`-able `PublicKey` (i.e., a `PublicKey` that can be `None`), you should use `if let` or `match` instead of `if`. 

Also, I've used `panic!` to raise an error, but you might want to use a more specific error type (like `PeerDataError`) as in the Python code.</translated function>```rust
pub fn public(&self) -> &PublicKey {
    if self.pubkey.is_none() {
        panic!("public key not found");
    }
    self.pubkey.as_ref().unwrap()
}
```

Note: I've assumed that `self.pubkey` is an `Option<PublicKey>` based on the Python code. If it's a `None`-able `PublicKey` (i.e., a `PublicKey` that can be `None`), you should use `if let` or `match` instead of `if`. 

Also, I've used `panic!` to raise an error, but you might want to use a more specific error type (like `PeerDataError`) as in the Python code.
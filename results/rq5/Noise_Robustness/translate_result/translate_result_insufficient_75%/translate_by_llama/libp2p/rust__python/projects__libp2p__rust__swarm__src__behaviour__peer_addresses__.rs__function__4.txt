<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def addrs(self, peer_id: ID) -> List[Multiaddr]:
        """
        :param peer_id: peer ID to get addrs for
        :return: list of addrs
        :raise PeerStoreError: if peer ID not found
        """
        if peer_id in self.peer_data_map:
            return self.peer_data_map[peer_id].get_addrs()
        raise PeerStoreError("peer ID not found")
</python function>
<rust function signature>
pub fn get(&mut self, peer: &PeerId) -> impl Iterator<Item = Multiaddr> + '_ 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn iter(&self) -> impl Iterator<Item = &Multiaddr> {
        self.inner.iter().map(|(a, _)| a)
    }
pub fn map<TNewErr>(self, map: impl FnOnce(TErr) -> TNewErr) -> TransportError<TNewErr> {
        match self {
            TransportError::MultiaddrNotSupported(addr) => {
                TransportError::MultiaddrNotSupported(addr)
            }
            TransportError::Other(err) => TransportError::Other(map(err)),
        }
    }
pub struct PeerAddresses(LruCache<PeerId, LruCache<Multiaddr, ()>>);

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use crate::behaviour::FromSwarm;
use crate::{DialError, DialFailure, NewExternalAddrOfPeer};
use libp2p_core::Multiaddr;
use libp2p_identity::PeerId;
use lru::LruCache;
use std::num::NonZeroUsize;
use super::*;
use std::io;
use crate::ConnectionId;
use libp2p_core::{
        multiaddr::Protocol,
        transport::{memory::MemoryTransportError, TransportError},
    };
use once_cell::sync::Lazy;

</rust function dependency libraries>

</message>
<function>
pub fn get(&mut self, peer: &PeerId) -> impl Iterator<Item = Multiaddr> + '_ {
        self.0
            .get(peer)
            .into_iter()
            .flat_map(|c| c.iter().map(|(m, ())| m))
            .cloned()
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
impl PeerStore {
    pub fn get(&mut self, peer: &PeerId) -> impl Iterator<Item = Multiaddr> + '_ {
        if let Some(peer_addresses) = self.peer_data_map.get(peer) {
            peer_addresses.iter().map(|(_, addr)| addr.clone())
        } else {
            Err(PeerStoreError::PeerNotFound)
        }
    }
}
```
Note that I assumed `PeerStoreError` is an enum with a variant `PeerNotFound`, if that's not the case, you'll need to adjust the error handling accordingly.

Also, I used `clone()` to clone the `Multiaddr` instances, since the `get` function returns an iterator over `Multiaddr` instances, and the `iter` method returns references to the `Multiaddr` instances stored in the cache. If you want to return owned `Multiaddr` instances instead, you can use `into_iter()` instead of `iter()`.</translated function>Here is the translated Rust function:
```rust
impl PeerStore {
    pub fn get(&mut self, peer: &PeerId) -> impl Iterator<Item = Multiaddr> + '_ {
        if let Some(peer_addresses) = self.peer_data_map.get(peer) {
            peer_addresses.iter().map(|(_, addr)| addr.clone())
        } else {
            Err(PeerStoreError::PeerNotFound)
        }
    }
}
```
Note that I assumed `PeerStoreError` is an enum with a variant `PeerNotFound`, if that's not the case, you'll need to adjust the error handling accordingly.

Also, I used `clone()` to clone the `Multiaddr` instances, since the `get` function returns an iterator over `Multiaddr` instances, and the `iter` method returns references to the `Multiaddr` instances stored in the cache. If you want to return owned `Multiaddr` instances instead, you can use `into_iter()` instead of `iter()`.
<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static boolean PKCS15(int sha,byte[] m,byte[] w)
	{
		int olen=FF.FF_BITS/8;
		int i,hlen=sha;
		int idlen=19; 

		if (olen<idlen+hlen+10) return false;
		byte[] H=hashit(sha,m,-1);

		for (i=0;i<w.length;i++) w[i]=0;
		i=0;
		w[i++]=0;
		w[i++]=1;
		for (int j=0;j<olen-idlen-hlen-3;j++)
			w[i++]=(byte)0xff;
		w[i++]=0;


		if (hlen==SHA256) for (int j=0;j<idlen;j++) w[i++]=SHA256ID[j];
		if (hlen==SHA384) for (int j=0;j<idlen;j++) w[i++]=SHA384ID[j];
		if (hlen==SHA512) for (int j=0;j<idlen;j++) w[i++]=SHA512ID[j];

		for (int j=0;j<hlen;j++)
			w[i++]=H[j];

		return true;
	}
</java function>
<rust function signature>
pub fn pkcs15(sha: usize, m: &[u8], w: &mut [u8]) -> bool 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn hashit(sha: usize, a: Option<&[u8]>, n: isize, w: &mut [u8]) {
    if sha == SHA256 {
        let mut h = HASH256::new();
        if let Some(x) = a {
            h.process_array(x);
        }
        if n >= 0 {
            h.process_num(n as i32)
        }
        let hs = h.hash();
        for i in 0..sha {
            w[i] = hs[i]
        }
    }
    if sha == SHA384 {
        let mut h = HASH384::new();
        if let Some(x) = a {
            h.process_array(x);
        }
        if n >= 0 {
            h.process_num(n as i32)
        }
        let hs = h.hash();
        for i in 0..sha {
            w[i] = hs[i]
        }
    }
    if sha == SHA512 {
        let mut h = HASH512::new();
        if let Some(x) = a {
            h.process_array(x);
        }
        if n >= 0 {
            h.process_num(n as i32)
        }
        let hs = h.hash();
        for i in 0..sha {
            w[i] = hs[i]
        }
    }
}
pub const FF_BITS: usize = big::BIGBITS * FFLEN;
const SHA384ID: [u8; 19] = [
    0x30, 0x41, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02, 0x05,
    0x00, 0x04, 0x30,
];
const SHA512ID: [u8; 19] = [
    0x30, 0x51, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, 0x05,
    0x00, 0x04, 0x40,
];
pub const SHA256: usize = 32;
pub const SHA384: usize = 48;

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use super::big;
use super::ff;
use super::ff::FF;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn pkcs15(sha: usize, m: &[u8], w: &mut [u8]) -> bool {
    let olen = ff::FF_BITS / 8;
    let hlen = sha;
    let idlen = 19;
    let mut b: [u8; 64] = [0; 64]; /* Not good */

    if olen < idlen + hlen + 10 {
        return false;
    }
    hashit(sha, Some(m), -1, &mut b);

    for i in 0..w.len() {
        w[i] = 0
    }
    let mut i = 0;
    w[i] = 0;
    i += 1;
    w[i] = 1;
    i += 1;
    for _ in 0..olen - idlen - hlen - 3 {
        w[i] = 0xff;
        i += 1
    }
    w[i] = 0;
    i += 1;

    if hlen == SHA256 {
        for j in 0..idlen {
            w[i] = SHA256ID[j];
            i += 1
        }
    }
    if hlen == SHA384 {
        for j in 0..idlen {
            w[i] = SHA384ID[j];
            i += 1
        }
    }
    if hlen == SHA512 {
        for j in 0..idlen {
            w[i] = SHA512ID[j];
            i += 1
        }
    }
    for j in 0..hlen {
        w[i] = b[j];
        i += 1
    }

    return true;
}
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn pkcs15(sha: usize, m: &[u8], w: &mut [u8]) -> bool {
    let olen = FF_BITS / 8;
    let idlen = 19;
    let hlen = sha;

    if olen < idlen + hlen + 10 {
        return false;
    }

    let H = hashit(sha, Some(m), -1, w);

    w[0] = 0;
    w[1] = 1;
    for j in 0..olen - idlen - hlen - 3 {
        w[j + 2] = 0xff;
    }
    w[olen - idlen - hlen - 2] = 0;

    if hlen == SHA256 {
        for (i, &id) in SHA256ID.iter().enumerate() {
            w[i + 2] = id;
        }
    } else if hlen == SHA384 {
        for (i, &id) in SHA384ID.iter().enumerate() {
            w[i + 2] = id;
        }
    } else if hlen == SHA512 {
        for (i, &id) in SHA512ID.iter().enumerate() {
            w[i + 2] = id;
        }
    }

    for (i, &h) in H.iter().enumerate() {
        w[i + 2 + idlen] = h;
    }

    true
}
```
Note that I've assumed that the `hashit` function is defined elsewhere in the codebase, and that the `FF_BITS` constant is defined as `big::BIGBITS * FFLEN`. I've also assumed that the `SHA256ID`, `SHA384ID`, and `SHA512ID` constants are defined as arrays of `u8` values.</translated function>Here is the translated Rust function:
```rust
pub fn pkcs15(sha: usize, m: &[u8], w: &mut [u8]) -> bool {
    let olen = FF_BITS / 8;
    let idlen = 19;
    let hlen = sha;

    if olen < idlen + hlen + 10 {
        return false;
    }

    let H = hashit(sha, Some(m), -1, w);

    w[0] = 0;
    w[1] = 1;
    for j in 0..olen - idlen - hlen - 3 {
        w[j + 2] = 0xff;
    }
    w[olen - idlen - hlen - 2] = 0;

    if hlen == SHA256 {
        for (i, &id) in SHA256ID.iter().enumerate() {
            w[i + 2] = id;
        }
    } else if hlen == SHA384 {
        for (i, &id) in SHA384ID.iter().enumerate() {
            w[i + 2] = id;
        }
    } else if hlen == SHA512 {
        for (i, &id) in SHA512ID.iter().enumerate() {
            w[i + 2] = id;
        }
    }

    for (i, &h) in H.iter().enumerate() {
        w[i + 2 + idlen] = h;
    }

    true
}
```
Note that I've assumed that the `hashit` function is defined elsewhere in the codebase, and that the `FF_BITS` constant is defined as `big::BIGBITS * FFLEN`. I've also assumed that the `SHA256ID`, `SHA384ID`, and `SHA512ID` constants are defined as arrays of `u8` values.
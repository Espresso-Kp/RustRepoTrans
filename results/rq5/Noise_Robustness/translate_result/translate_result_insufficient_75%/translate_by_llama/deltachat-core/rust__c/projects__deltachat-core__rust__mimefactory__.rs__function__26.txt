<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
int dc_needs_ext_header(const char* to_check)
{
	if (to_check) {
		while (*to_check)
		{
			if (!isalnum(*to_check) && *to_check!='-' && *to_check!='_' && *to_check!='.' && *to_check!='~'  && *to_check!='%') {
				return 1;
			}
			to_check++;
		}
	}

	return 0;
}
</c function>
<rust function signature>
fn needs_encoding(to_check: &str) -> bool 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use deltachat_contact_tools::ContactAddress;
use mailparse::{addrparse_header, MailHeaderMap};
use std::str;
use super::*;
use crate::chat::{
        add_contact_to_chat, create_group_chat, remove_contact_from_chat, send_text_msg, ChatId,
        ProtectionStatus,
    };
use crate::chatlist::Chatlist;
use crate::constants;
use crate::contact::Origin;
use crate::mimeparser::MimeMessage;
use crate::receive_imf::receive_imf;
use crate::test_utils::{get_chat_msg, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
fn needs_encoding(to_check: &str) -> bool {
    !to_check.chars().all(|c| {
        c.is_ascii_alphanumeric() || c == '-' || c == '_' || c == '.' || c == '~' || c == '%'
    })
}
</function>
<translated function>
Here is the translated Rust function:
```rust
use std::str;

fn needs_encoding(to_check: &str) -> bool {
    if to_check.is_empty() {
        return false;
    }
    to_check.chars().any(|c|!c.is_alphanumeric() && c!= '-' && c!= '_' && c!= '.' && c!= '~' && c!= '%')
}
```
Note that I've used the `chars()` method to iterate over the characters of the string, and the `any()` method to check if any of the characters match the condition. I've also used the `is_empty()` method to check if the string is empty, and returned `false` in that case.</translated function>Here is the translated Rust function:
```rust
use std::str;

fn needs_encoding(to_check: &str) -> bool {
    if to_check.is_empty() {
        return false;
    }
    to_check.chars().any(|c|!c.is_alphanumeric() && c!= '-' && c!= '_' && c!= '.' && c!= '~' && c!= '%')
}
```
Note that I've used the `chars()` method to iterate over the characters of the string, and the `any()` method to check if any of the characters match the condition. I've also used the `is_empty()` method to check if the string is empty, and returned `false` in that case.
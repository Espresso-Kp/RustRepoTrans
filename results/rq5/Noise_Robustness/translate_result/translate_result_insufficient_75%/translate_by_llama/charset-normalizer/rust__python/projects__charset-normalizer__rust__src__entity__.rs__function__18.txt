<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def raw(self) -> bytes:
        """
        Original untouched bytes.
        """
        return self._payload
</python function>
<rust function signature>
pub fn raw(&self) -> &Vec<u8> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct CharsetMatch {
    payload: Vec<u8>,
    encoding: String,

    mean_mess_ratio: f32,
    coherence_matches: CoherenceMatches,

    has_sig_or_bom: bool,

    submatch: Vec<CharsetMatch>,
    decoded_payload: Option<String>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use crate::cd::{encoding_languages, mb_encoding_languages};
use crate::consts::{IANA_SUPPORTED_ALIASES, TOO_BIG_SEQUENCE};
use crate::utils::{decode, iana_name, is_multi_byte_encoding, range_scan};
use clap::Parser;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use serde::Serialize;
use std::cmp::Ordering;
use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::hash::Hash;
use std::ops::Index;
use std::path::PathBuf;
use std::time::Duration;

</rust function dependency libraries>

</message>
<function>
pub fn raw(&self) -> &Vec<u8> {
        &self.payload
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn raw(&self) -> &Vec<u8> {
    &self.payload
}
```
Note that I've assumed that `payload` is a field of the struct that this function is part of, as it is in the provided Rust code snippet. If that's not the case, you'll need to adjust the code accordingly.</translated function>Here is the translated Rust function:
```rust
pub fn raw(&self) -> &Vec<u8> {
    &self.payload
}
```
Note that I've assumed that `payload` is a field of the struct that this function is part of, as it is in the provided Rust code snippet. If that's not the case, you'll need to adjust the code accordingly.
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def bind(self, schema: Schema, case_sensitive: bool = True) -> BoundSetPredicate[L]:
        bound_term = self.term.bind(schema, case_sensitive)
        return self.as_bound(bound_term, {lit.to(bound_term.ref().field.field_type) for lit in self.literals})
</python function>
<rust function signature>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> crate::Result<Self::Bound>;
pub struct SetExpression<T> {
    /// Operator of this predicate, must be set operator, such as `IN`, `NOT IN`, etc.
    op: PredicateOperator,
    /// Term of this predicate, for example, `a` in `a in (1, 2, 3)`.
    term: T,
    /// Literals of this predicate, for example, `(1, 2, 3)` in `a in (1, 2, 3)`.
    literals: FnvHashSet<Datum>,
}
pub(crate) fn new(op: PredicateOperator, term: T, literals: FnvHashSet<Datum>) -> Self {
        debug_assert!(op.is_set());
        Self { op, term, literals }
    }

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use std::fmt::{Debug, Display, Formatter};
use std::ops::Not;
use array_init::array_init;
use fnv::FnvHashSet;
use itertools::Itertools;
use crate::error::Result;
use crate::expr::{Bind, BoundReference, PredicateOperator, Reference};
use crate::spec::{Datum, SchemaRef};
use crate::{Error, ErrorKind};
use std::ops::Not;
use std::sync::Arc;
use crate::expr::Bind;
use crate::expr::Predicate::{AlwaysFalse, AlwaysTrue};
use crate::expr::Reference;
use crate::spec::Datum;
use crate::spec::{NestedField, PrimitiveType, Schema, SchemaRef, Type};

</rust function dependency libraries>

</message>
<function>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
        let bound_term = self.term.bind(schema.clone(), case_sensitive)?;
        Ok(SetExpression::new(
            self.op,
            bound_term,
            self.literals.clone(),
        ))
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> crate::Result<Self::Bound> {
    let bound_term = self.term.bind(schema, case_sensitive);
    let bound_literals = self.literals.iter().map(|lit| lit.to(bound_term.ref().field.field_type.clone())).collect::<FnvHashSet<_>>();
    Ok(self.as_bound(bound_term, bound_literals))
}
```
Note that I assumed `Self::Bound` is a type alias for `Bound` in the `SetExpression` struct, and `Self` is the type of the struct that this function is a part of. If that's not the case, you may need to adjust the code accordingly.</translated function>Here is the translated Rust function:
```rust
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> crate::Result<Self::Bound> {
    let bound_term = self.term.bind(schema, case_sensitive);
    let bound_literals = self.literals.iter().map(|lit| lit.to(bound_term.ref().field.field_type.clone())).collect::<FnvHashSet<_>>();
    Ok(self.as_bound(bound_term, bound_literals))
}
```
Note that I assumed `Self::Bound` is a type alias for `Bound` in the `SetExpression` struct, and `Self` is the type of the struct that this function is a part of. If that's not the case, you may need to adjust the code accordingly.
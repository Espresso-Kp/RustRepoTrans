<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def upgrade_table_version(self, format_version: TableVersion) -> Transaction:
        """Set the table to a certain version.

        Args:
            format_version: The newly set version.

        Returns:
            The alter table builder.
        """

        if format_version < self._table.metadata.format_version:
            raise ValueError(f"Cannot downgrade v{self._table.metadata.format_version} table to v{format_version}")

        if format_version > self._table.metadata.format_version:
            return self._apply((UpgradeFormatVersionUpdate(format_version=format_version),))

        return self
</python function>
<rust function signature>
pub fn upgrade_table_version(mut self, format_version: FormatVersion) -> Result<Self> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub async fn metadata(&self) -> Result<FileMetadata> {
        let meta = self.op.stat(&self.path[self.relative_path_pos..]).await?;

        Ok(FileMetadata {
            size: meta.content_length(),
        })
    }
pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
        Self {
            kind,
            message: message.into(),
            context: Vec::default(),

            source: None,
            // `Backtrace::capture()` will check if backtrace has been enabled
            // internally. It's zero cost if backtrace is disabled.
            backtrace: Backtrace::capture(),
        }
    }
pub struct Transaction<'a> {
    table: &'a Table,
    updates: Vec<TableUpdate>,
    requirements: Vec<TableRequirement>,
}
pub enum Ordering {
    /// An ordering where a compared value is less than another.
    #[stable(feature = "rust1", since = "1.0.0")]
    Less = -1,
    /// An ordering where a compared value is equal to another.
    #[stable(feature = "rust1", since = "1.0.0")]
    Equal = 0,
    /// An ordering where a compared value is greater than another.
    #[stable(feature = "rust1", since = "1.0.0")]
    Greater = 1,
}
pub enum ErrorKind {
    /// Iceberg don't know what happened here, and no actions other than
    /// just returning it back. For example, iceberg returns an internal
    /// service error.
    Unexpected,

    /// Iceberg data is invalid.
    ///
    /// This error is returned when we try to read a table from iceberg but
    /// failed to parse it's metadata or data file correctly.
    ///
    /// The table could be invalid or corrupted.
    DataInvalid,
    /// Iceberg feature is not supported.
    ///
    /// This error is returned when given iceberg feature is not supported.
    FeatureUnsupported,
}
pub struct Error {
    kind: ErrorKind,
    message: String,

    context: Vec<(&'static str, String)>,

    source: Option<anyhow::Error>,
    backtrace: Backtrace,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use crate::error::Result;
use crate::spec::{FormatVersion, NullOrder, SortDirection, SortField, SortOrder, Transform};
use crate::table::Table;
use crate::TableUpdate::UpgradeFormatVersion;
use crate::{Catalog, Error, ErrorKind, TableCommit, TableRequirement, TableUpdate};
use std::cmp::Ordering;
use std::collections::HashMap;
use std::mem::discriminant;
use crate::io::FileIO;
use crate::spec::{FormatVersion, TableMetadata};
use crate::table::Table;
use crate::transaction::Transaction;
use crate::{TableIdent, TableRequirement, TableUpdate};
use std::collections::HashMap;
use std::fs::File;
use std::io::BufReader;

</rust function dependency libraries>

</message>
<function>
pub fn upgrade_table_version(mut self, format_version: FormatVersion) -> Result<Self> {
        let current_version = self.table.metadata().format_version();
        match current_version.cmp(&format_version) {
            Ordering::Greater => {
                return Err(Error::new(
                    ErrorKind::DataInvalid,
                    format!(
                        "Cannot downgrade table version from {} to {}",
                        current_version, format_version
                    ),
                ));
            }
            Ordering::Less => {
                self.append_updates(vec![UpgradeFormatVersion { format_version }])?;
            }
            Ordering::Equal => {
                // Do nothing.
            }
        }
        Ok(self)
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn upgrade_table_version(mut self, format_version: FormatVersion) -> Result<Self> {
    if format_version < self._table.metadata().format_version {
        return Err(Error::new(
            ErrorKind::Unexpected,
            format!("Cannot downgrade v{} table to v{}", self._table.metadata().format_version, format_version),
        ));
    }

    if format_version > self._table.metadata().format_version {
        return Ok(self._apply(vec![TableUpdate::UpgradeFormatVersion(format_version)]));
    }

    Ok(self)
}
```
Note that I've assumed that `self._table.metadata()` returns a `Result<FileMetadata>`, and that `self._apply` takes a `Vec<TableUpdate>` as an argument. I've also assumed that `Error::new` takes an `ErrorKind` and a `String` as arguments, and that `TableUpdate::UpgradeFormatVersion` takes a `FormatVersion` as an argument. If these assumptions are incorrect, please let me know and I'll adjust the translation accordingly.</translated function>Here is the translated Rust function:
```rust
pub fn upgrade_table_version(mut self, format_version: FormatVersion) -> Result<Self> {
    if format_version < self._table.metadata().format_version {
        return Err(Error::new(
            ErrorKind::Unexpected,
            format!("Cannot downgrade v{} table to v{}", self._table.metadata().format_version, format_version),
        ));
    }

    if format_version > self._table.metadata().format_version {
        return Ok(self._apply(vec![TableUpdate::UpgradeFormatVersion(format_version)]));
    }

    Ok(self)
}
```
Note that I've assumed that `self._table.metadata()` returns a `Result<FileMetadata>`, and that `self._apply` takes a `Vec<TableUpdate>` as an argument. I've also assumed that `Error::new` takes an `ErrorKind` and a `String` as arguments, and that `TableUpdate::UpgradeFormatVersion` takes a `FormatVersion` as an argument. If these assumptions are incorrect, please let me know and I'll adjust the translation accordingly.
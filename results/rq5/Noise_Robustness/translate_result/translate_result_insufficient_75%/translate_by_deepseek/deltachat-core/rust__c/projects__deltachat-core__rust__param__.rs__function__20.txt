<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
void dc_param_set_int(dc_param_t* param, int key, int32_t value)
{
	if (param==NULL || key==0) {
		return;
	}

    char* value_str = dc_mprintf("%i", (int)value);
    if (value_str==NULL) {
		return;
    }
    dc_param_set(param, key, value_str);
    free(value_str);
}
</c function>
<rust function signature>
pub fn set_int(&mut self, key: Param, value: i32) -> &mut Self 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
        self.inner.insert(key, value.to_string());
        self
    }
pub struct Params {
    inner: BTreeMap<Param, String>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use std::collections::BTreeMap;
use std::fmt;
use std::path::PathBuf;
use std::str;
use anyhow::{bail, Error, Result};
use num_traits::FromPrimitive;
use serde::{Deserialize, Serialize};
use crate::blob::BlobObject;
use crate::context::Context;
use crate::mimeparser::SystemMessage;
use std::path::Path;
use std::str::FromStr;
use tokio::fs;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub fn set_int(&mut self, key: Param, value: i32) -> &mut Self {
        self.set(key, format!("{value}"));
        self
    }
</function>
<translated function>
 ```rust
pub fn set_int(&mut self, key: Param, value: i32) -> &mut Self {
    if key == 0 {
        return self;
    }

    let value_str = dc_mprintf("%i", value).to_string();
    if value_str.is_empty() {
        return self;
    }
    self.set(key, value_str);
    self
}
```</translated function> ```rust
pub fn set_int(&mut self, key: Param, value: i32) -> &mut Self {
    if key == 0 {
        return self;
    }

    let value_str = dc_mprintf("%i", value).to_string();
    if value_str.is_empty() {
        return self;
    }
    self.set(key, value_str);
    self
}
```
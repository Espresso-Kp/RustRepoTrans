<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static void SERVER_2(byte[] S,byte[] UC,byte[] KEY)
	{
		int i;
		SHA3 sh=new SHA3(SHA3.HASH256);

		int[] c=new int[DEGREE];
		int[] s=new int[DEGREE];
		int[] k=new int[DEGREE];

		byte[] array=new byte[1792];
		byte[] key=new byte[32];
		byte[] cc=new byte[384];

		for (i=0;i<1792;i++)
			array[i]=UC[i];

		unpack(array,k);
		nres_it(k);

		for (i=0;i<384;i++)
			cc[i]=UC[i+1792];

		Decompress(cc,c);

		for (i=0;i<1792;i++)
			array[i]=S[i];

		unpack(array,s);

		poly_mul(k,k,s);
		intt(k);
		poly_sub(k,c,k);
		poly_soft_reduce(k);

		Decode(k,key);

		for (i=0;i<32;i++)
			sh.process(key[i]);
		sh.hash(key);

		for (i=0;i<32;i++)
			KEY[i]=key[i];
	}
</java function>
<rust function signature>
pub fn server_2(ss: &[u8], uc: &[u8], okey: &mut [u8]) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn new(olen: usize) -> SHA3 {
        let mut nh = SHA3 {
            length: 0,
            rate: 0,
            len: 0,
            s: [[0; 5]; 5],
        };
        nh.init(olen);
        return nh;
    }
fn decode(poly: &[i32], key: &mut [u8]) {
    let q2 = PRIME / 2;
    for i in 0..32 {
        key[i] = 0;
    }

    let mut i = 0;
    let mut j = 0;
    while i < 256 {
        for _ in 0..8 {
            let t = nabs(poly[i] - q2)
                + nabs(poly[i + 256] - q2)
                + nabs(poly[i + 512] - q2)
                + nabs(poly[i + 768] - q2);
            let mut b = t - PRIME;
            b = (b >> 31) & 1;
            key[j] = (key[j] >> 1) + ((b << 7) as u8);
            i += 1;
        }
        j += 1;
    }
}
fn poly_soft_reduce(poly: &mut [i32]) {
    for i in 0..DEGREE {
        let e = poly[i] - PRIME;
        poly[i] = e + ((e >> (WL - 1)) & PRIME);
    }
}
fn intt(x: &mut [i32]) {
    let mut t = 1;
    let q = PRIME;
    let mut m = DEGREE / 2;
    while m > 1 {
        let mut k = 0;
        for i in 0..m {
            let s = IROOTS[m + i];
            for j in k..k + t {
                let u = x[j];
                let v = x[j + t];
                x[j] = u + v;
                let w = u + (DEGREE as i32) * q - v;
                x[j + t] = modmul(w, s);
            }
            k += 2 * t;
        }
        t *= 2;
        m /= 2;
    }

    /* Last iteration merged with n^-1 */
    t = DEGREE / 2;
    for j in 0..t {
        let u = x[j];
        let v = x[j + t];
        let w = u + (DEGREE as i32) * q - v;
        x[j + t] = modmul(w, INVPR);
        x[j] = modmul(u + v, INV);
    }
    /* convert back from Montgomery to "normal" form */
    for j in 0..DEGREE {
        x[j] = redc(x[j] as u64);
        x[j] -= q;
        x[j] += (x[j] >> (WL - 1)) & q;
    }
}
fn poly_rsub(p1: &mut [i32], p2: &[i32]) {
    for i in 0..DEGREE {
        p1[i] = p2[i] + PRIME - p1[i];
    }
}
pub fn hash(&mut self, digest: &mut [u8]) {
        /* pad message and finish - supply digest */
        let q = self.rate - (self.length % (self.rate as u64)) as usize;
        if q == 1 {
            self.process(0x86);
        } else {
            self.process(0x06);
            while (self.length % (self.rate as u64)) as usize != self.rate - 1 {
                self.process(0x00)
            }
            self.process(0x80);
        }
        let hlen = self.len as usize;
        self.squeeze(digest, hlen);
    }
pub fn process(&mut self, byt: u8) {
        /* process the next message byte */
        let cnt = (self.length % (self.rate as u64)) as usize;
        let b = cnt % 8;
        let ind = cnt / 8;
        let i = ind % 5;
        let j = ind / 5;
        self.s[i][j] ^= u64::from(byt) << (8 * b);
        self.length += 1;
        if cnt + 1 == self.rate {
            self.transform();
        }
    }
fn nres_it(p: &mut [i32]) {
    for i in 0..DEGREE {
        p[i] = nres(p[i]);
    }
}
fn decompress(array: &[u8], poly: &mut [i32]) {
    let mut j = 0;
    let mut i = 0;
    while i < DEGREE {
        let mut col = (array[j + 2] as i32) & 0xff;
        col = (col << 8) + ((array[j + 1] as i32) & 0xff);
        col = (col << 8) + ((array[j] as i32) & 0xff);
        j += 3;
        for _ in 0..8 {
            let b = (col & 0xe00000) >> 21;
            col <<= 3;
            poly[i] = round(b * PRIME, 8);
            i += 1;
        }
    }
}
fn poly_mul(p1: &mut [i32], p3: &[i32]) {
    for i in 0..DEGREE {
        p1[i] = modmul(p1[i], p3[i]);
    }
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use crate::rand::RAND;
use crate::sha3;
use crate::sha3::SHA3;
use super::*;

</rust function dependency libraries>

</message>
<function>
pub fn server_2(ss: &[u8], uc: &[u8], okey: &mut [u8]) {
    let mut sh = SHA3::new(sha3::HASH256);

    let mut s: [i32; DEGREE] = [0; DEGREE];
    let mut k: [i32; DEGREE] = [0; DEGREE];
    let mut c: [i32; DEGREE] = [0; DEGREE];

    let mut array: [u8; 1792] = [0; 1792];
    let mut key: [u8; 32] = [0; 32];
    let mut cc: [u8; 384] = [0; 384];

    for i in 0..1792 {
        array[i] = uc[i];
    }

    nhs_unpack(&array, &mut k);
    nres_it(&mut k);

    for i in 0..384 {
        cc[i] = uc[i + 1792];
    }

    decompress(&cc, &mut c);

    for i in 0..1792 {
        array[i] = ss[i];
    }

    nhs_unpack(&array, &mut s);

    poly_mul(&mut k, &s);
    intt(&mut k);
    poly_rsub(&mut k, &c);
    poly_soft_reduce(&mut k);

    decode(&k, &mut key);

    for i in 0..32 {
        sh.process(key[i]);
    }
    sh.hash(&mut key);

    for i in 0..32 {
        okey[i] = key[i];
    }
}
</function>
<translated function>
 ```rust
use crate::rand::RAND;
use crate::sha3::SHA3;
use super::*;

pub fn server_2(ss: &[u8], uc: &[u8], okey: &mut [u8]) {
    let mut sh = SHA3::new(32);

    let mut c = vec![0; DEGREE];
    let mut s = vec![0; DEGREE];
    let mut k = vec![0; DEGREE];

    let mut array = vec![0; 1792];
    let mut key = vec![0; 32];
    let mut cc = vec![0; 384];

    for i in 0..1792 {
        array[i] = uc[i];
    }

    unpack(&array, &mut k);
    nres_it(&mut k);

    for i in 0..384 {
        cc[i] = uc[i + 1792];
    }

    decompress(&cc, &mut c);

    for i in 0..1792 {
        array[i] = ss[i];
    }

    unpack(&array, &mut s);

    poly_mul(&mut k, &s);
    intt(&mut k);
    poly_rsub(&mut k, &c);
    poly_soft_reduce(&mut k);

    decode(&k, &mut key);

    for i in 0..32 {
        sh.process(key[i]);
    }
    sh.hash(&mut key);

    for i in 0..32 {
        okey[i] = key[i];
    }
}
```</translated function> ```rust
use crate::rand::RAND;
use crate::sha3::SHA3;
use super::*;

pub fn server_2(ss: &[u8], uc: &[u8], okey: &mut [u8]) {
    let mut sh = SHA3::new(32);

    let mut c = vec![0; DEGREE];
    let mut s = vec![0; DEGREE];
    let mut k = vec![0; DEGREE];

    let mut array = vec![0; 1792];
    let mut key = vec![0; 32];
    let mut cc = vec![0; 384];

    for i in 0..1792 {
        array[i] = uc[i];
    }

    unpack(&array, &mut k);
    nres_it(&mut k);

    for i in 0..384 {
        cc[i] = uc[i + 1792];
    }

    decompress(&cc, &mut c);

    for i in 0..1792 {
        array[i] = ss[i];
    }

    unpack(&array, &mut s);

    poly_mul(&mut k, &s);
    intt(&mut k);
    poly_rsub(&mut k, &c);
    poly_soft_reduce(&mut k);

    decode(&k, &mut key);

    for i in 0..32 {
        sh.process(key[i]);
    }
    sh.hash(&mut key);

    for i in 0..32 {
        okey[i] = key[i];
    }
}
```
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def schema(self) -> Schema:
        """Return the schema for this table."""
        return next(schema for schema in self.schemas if schema.schema_id == self.current_schema_id)
</python function>
<rust function signature>
fn schema(&self) -> ArrowSchemaRef 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub(crate) struct IcebergTableProvider {
    /// A table in the catalog.
    table: Table,
    /// A reference-counted arrow `Schema`.
    schema: ArrowSchemaRef,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use std::{any::Any, sync::Arc};
use async_trait::async_trait;
use datafusion::error::Result as DFResult;
use datafusion::{
    arrow::datatypes::SchemaRef as ArrowSchemaRef,
    datasource::{TableProvider, TableType},
    execution::context,
    logical_expr::Expr,
    physical_plan::ExecutionPlan,
};
use iceberg::{
    arrow::schema_to_arrow_schema, table::Table, Catalog, NamespaceIdent, Result, TableIdent,
};
use crate::physical_plan::scan::IcebergTableScan;

</rust function dependency libraries>

</message>
<function>
fn schema(&self) -> ArrowSchemaRef {
        self.schema.clone()
    }
</function>
<translated function>
Based on the given Python function, Rust function signature, dependencies, and related variables, please see the translated Rust function below.

<rust function>
```rust
fn schema(&self) -> ArrowSchemaRef {
    match self.table.schemas().iter().find(|&schema| schema.schema_id() == self.table.current_schema_id()) {
        Some(schema) => Arc::clone(&schema),
        None => panic!("Schema not found"),
    }
}
```
</rust function> 

Please note that in this translated version, I am assuming that the `schemas` method of `Table` returns a vector of `ArrowSchemaRef` and `schema_id` is a method of each `ArrowSchemaRef`. Also, each `ArrowSchemaRef` is wrapped in a shared reference counted pointer, also known as `Arc`. Rust doesn't have a direct equivalent to Python's `next` function, so instead, we use the `iter` method to create an iterator over the schemas vector and the `find` method to find the schema with the current schema id. If found, we clone it and return it, otherwise, we panic with message "Schema not found".
</translated function>Based on the given Python function, Rust function signature, dependencies, and related variables, please see the translated Rust function below.

<rust function>
```rust
fn schema(&self) -> ArrowSchemaRef {
    match self.table.schemas().iter().find(|&schema| schema.schema_id() == self.table.current_schema_id()) {
        Some(schema) => Arc::clone(&schema),
        None => panic!("Schema not found"),
    }
}
```
</rust function> 

Please note that in this translated version, I am assuming that the `schemas` method of `Table` returns a vector of `ArrowSchemaRef` and `schema_id` is a method of each `ArrowSchemaRef`. Also, each `ArrowSchemaRef` is wrapped in a shared reference counted pointer, also known as `Arc`. Rust doesn't have a direct equivalent to Python's `next` function, so instead, we use the `iter` method to create an iterator over the schemas vector and the `find` method to find the schema with the current schema id. If found, we clone it and return it, otherwise, we panic with message "Schema not found".

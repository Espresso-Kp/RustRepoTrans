<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static void SERVER_1(int sha,int date,byte[] CID,byte[] HID,byte[] HTID)
	{
		byte[] h=hashit(sha,0,CID,EFS);
		ECP R,P=ECP.mapit(h);

		P.toBytes(HID,false);   // new
		if (date!=0)
		{
	//		if (HID!=null) P.toBytes(HID,false);
			h=hashit(sha,date,h,EFS);
			R=ECP.mapit(h);
			P.add(R); //P.affine();
			P.toBytes(HTID,false);
		}
	//	else P.toBytes(HID,false);
	}
</java function>
<rust function signature>
pub fn server_1(sha: usize, date: usize, cid: &[u8], hid: &mut [u8], htid: Option<&mut [u8]>) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn mapit(h: &[u8]) -> ECP {
        let q = Big::new_ints(&rom::MODULUS);
        let mut x = Big::from_bytes(h);
        x.rmod(&q);
        let mut P: ECP;

        loop {
            loop {
                if CURVETYPE != CurveType::Montgomery {
                    P = ECP::new_bigint(&x, 0);
                } else {
                    P = ECP::new_big(&x);
                }
                x.inc(1);
                x.norm();
                if !P.is_infinity() {
                    break;
                }
            }
            P.cfp();
            if !P.is_infinity() {
                break;
            }
        }

        return P;
    }
fn hashit(sha: usize, n: usize, id: &[u8], w: &mut [u8]) -> bool {
    let mut r: [u8; 64] = [0; 64];
    let mut didit = false;
    if sha == SHA256 {
        let mut h = HASH256::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA384 {
        let mut h = HASH384::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA512 {
        let mut h = HASH512::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if !didit {
        return false;
    }

    let rm = big::MODBYTES as usize;

    if sha > rm {
        for i in 0..rm {
            w[i] = r[i]
        }
    } else {
        for i in 0..sha {
            w[i + rm - sha] = r[i]
        }
        for i in 0..(rm - sha) {
            w[i] = 0
        }
    }

    return true;
}
pub fn to_bytes(&self, b: &mut [u8], compress: bool) {
        let mb = big::MODBYTES as usize;
        let mut t: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];
        let mut W = self.clone();

        W.affine();
        W.x.redc().to_bytes(&mut t);
        for i in 0..mb {
            b[i + 1] = t[i]
        }

        if CURVETYPE == CurveType::Montgomery {
            b[0] = 0x06;
            return;
        }

        if compress {
            b[0] = 0x02;
            if W.y.redc().parity() == 1 {
                b[0] = 0x03
            }
            return;
        }

        b[0] = 0x04;

        W.y.redc().to_bytes(&mut t);
        for i in 0..mb {
            b[i + mb + 1] = t[i]
        }
    }
pub const MODBYTES: usize = 32;

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp2::ECP2;
use super::fp12::FP12;
use super::fp4::FP4;
use super::pair;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn server_1(sha: usize, date: usize, cid: &[u8], hid: &mut [u8], htid: Option<&mut [u8]>) {
    const RM: usize = big::MODBYTES as usize;
    let mut h: [u8; RM] = [0; RM];

    hashit(sha, 0, cid, &mut h);

    let mut P = ECP::mapit(&h);

    P.to_bytes(hid, false);
    if date != 0 {
        let mut h2: [u8; RM] = [0; RM];
        hashit(sha, date, &h, &mut h2);
        let mut R = ECP::mapit(&h2);
        P.add(&mut R);
        if let Some(rhtid) = htid {
            P.to_bytes(rhtid, false);
        }
    }
}
</function>
<translated function>
The translated Rust code from the provided Java function would be:

```rust
pub fn server_1(sha: usize, date: usize, cid: &[u8], hid: &mut [u8], htid: Option<&mut [u8]>) {
    let mut h: Vec<u8> = Vec::new();
    // unsafe block added to handle result from hashit method
    unsafe {
        h = match hashit(sha,0,cid,hid) {
            true => Vec::from(hid),
            false => Vec::new(),
        };
    }
    let mut P = mapit(&h);
    P.to_bytes(hid, false);

    if date != 0 {
        // unsafe block added to handle result from hashit method
        unsafe {
            h = match hashit(sha,date,cid,hid) {
                true => Vec::from(hid),
                false => Vec::new(),
            };
        }
        let R = mapit(&h);
        P.add(&mut R);
        htid.map(|h| {
            P.to_bytes(h, false);
        });
    }
}
```

Note: Please ensure that you define `h` in the same scope or level where you are using it in the `if date != 0 {}` code block.

Also, you have to make sure to import all the relevant modules inside the file where you are defining the `server_1` function. The function might not work properly or give errors if the relevant modules are not correctly imported into the file.

Moreover, this Rust function assumes that the function `hashit` panics upon an error and returns a boolean. This has been handled with an `unsafe` block in Rust. It's recommended to avoid using `unsafe` whenever possible in Rust, but sometimes we have to use it when we are sure about the safety of the operation or when dealing with external libraries. 

This code ensures proper handling of the results from calling `hashit`, ensuring usage of results only in the `true or success` case.  In a `false or failure` case, `hashit` case it assigns an empty `Vec<u8>` to `h`.
 
Always exercise caution when using `unsafe`, and if possible try to refactor the code to function without it. If `hashit` can be refactored to return a `Result` type that would be the recommended approach. If not, ensure all safety precautions are taken in using `unsafe`.</translated function>The translated Rust code from the provided Java function would be:

```rust
pub fn server_1(sha: usize, date: usize, cid: &[u8], hid: &mut [u8], htid: Option<&mut [u8]>) {
    let mut h: Vec<u8> = Vec::new();
    // unsafe block added to handle result from hashit method
    unsafe {
        h = match hashit(sha,0,cid,hid) {
            true => Vec::from(hid),
            false => Vec::new(),
        };
    }
    let mut P = mapit(&h);
    P.to_bytes(hid, false);

    if date != 0 {
        // unsafe block added to handle result from hashit method
        unsafe {
            h = match hashit(sha,date,cid,hid) {
                true => Vec::from(hid),
                false => Vec::new(),
            };
        }
        let R = mapit(&h);
        P.add(&mut R);
        htid.map(|h| {
            P.to_bytes(h, false);
        });
    }
}
```

Note: Please ensure that you define `h` in the same scope or level where you are using it in the `if date != 0 {}` code block.

Also, you have to make sure to import all the relevant modules inside the file where you are defining the `server_1` function. The function might not work properly or give errors if the relevant modules are not correctly imported into the file.

Moreover, this Rust function assumes that the function `hashit` panics upon an error and returns a boolean. This has been handled with an `unsafe` block in Rust. It's recommended to avoid using `unsafe` whenever possible in Rust, but sometimes we have to use it when we are sure about the safety of the operation or when dealing with external libraries. 

This code ensures proper handling of the results from calling `hashit`, ensuring usage of results only in the `true or success` case.  In a `false or failure` case, `hashit` case it assigns an empty `Vec<u8>` to `h`.
 
Always exercise caution when using `unsafe`, and if possible try to refactor the code to function without it. If `hashit` can be refactored to return a `Result` type that would be the recommended approach. If not, ensure all safety precautions are taken in using `unsafe`.
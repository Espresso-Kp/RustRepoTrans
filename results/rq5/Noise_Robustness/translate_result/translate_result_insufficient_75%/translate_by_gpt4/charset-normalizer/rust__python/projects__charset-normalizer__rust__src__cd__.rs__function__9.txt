<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def merge_coherence_ratios(results: List[CoherenceMatches]) -> CoherenceMatches:
    """
    This function merge results previously given by the function coherence_ratio.
    The return type is the same as coherence_ratio.
    """
    per_language_ratios: Dict[str, List[float]] = {}
    for result in results:
        for sub_result in result:
            language, ratio = sub_result
            if language not in per_language_ratios:
                per_language_ratios[language] = [ratio]
                continue
            per_language_ratios[language].append(ratio)

    merge = [
        (
            language,
            round(
                sum(per_language_ratios[language]) / len(per_language_ratios[language]),
                4,
            ),
        )
        for language in per_language_ratios
    ]

    return sorted(merge, key=lambda x: x[1], reverse=True)
</python function>
<rust function signature>
pub(crate) fn merge_coherence_ratios(results: &Vec<CoherenceMatches>) -> CoherenceMatches 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn len(&self) -> usize {
        self.items.len()
    }
pub fn iter(&self) -> CharsetMatchesIter {
        CharsetMatchesIter {
            items: self.items.iter(),
        }
    }
pub struct CoherenceMatch {
    pub language: &'static Language,
    pub score: f32,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use crate::assets::{ENCODING_TO_LANGUAGE, LANGUAGES, LANGUAGE_SUPPORTED_COUNT};
use crate::consts::TOO_SMALL_SEQUENCE;
use crate::entity::{CoherenceMatch, CoherenceMatches, Language};
use crate::utils::{
    get_language_data, is_accentuated, is_multi_byte_encoding, is_suspiciously_successive_range,
    is_unicode_range_secondary, unicode_range,
};
use ahash::{HashMap, HashMapExt, HashSet};
use cached::proc_macro::cached;
use counter::Counter;
use encoding::label::encoding_from_whatwg_label;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use strsim::jaro;

</rust function dependency libraries>

</message>
<function>
pub(crate) fn merge_coherence_ratios(results: &Vec<CoherenceMatches>) -> CoherenceMatches {
    let mut index: HashMap<&Language, Vec<f32>> = HashMap::with_capacity(results.len());
    results
        .iter()
        .flatten()
        .for_each(|result| index.entry(result.language).or_default().push(result.score));

    let mut merge: Vec<CoherenceMatch> = index
        .iter()
        .map(|(&lang, scores)| CoherenceMatch {
            language: lang,
            score: scores.iter().sum::<f32>() / (scores.len() as f32),
        })
        .collect();

    merge.sort_unstable_by(|a, b| b.score.partial_cmp(&a.score).unwrap());
    merge
}
</function>
<translated function>
Here's how the Python function could be translated into Rust:

```rust
pub(crate) fn merge_coherence_ratios(results: &Vec<CoherenceMatches>) -> CoherenceMatches {
    use crate::assets::coherence_correct_sort;
    use crate::entity::CoherenceMatch;
    use std::collections::HashMap;

    // create a per-language ratio map
    let mut per_language_ratios: HashMap<&Language, Vec<f32>> = HashMap::new();
    for result in results {
        for sub_result in result.iter() {
            let language = &sub_result.language;
            let ratio = sub_result.score;
            per_language_ratios.entry(language).or_insert(Vec::new()).push(ratio);
        }
    }

    // perform the merge according to the predefined rounding function and sorting order
    let mut merge: Vec<CoherenceMatch> = per_language_ratios.iter().map(|(&key, val)| {
        let sum: f32 = val.iter().sum();
        let len = val.len() as f32;
        CoherenceMatch {
            language: key,
            score: (sum / len).round(),
        }
    }).collect();

    // perform a secondary sort according to the provided function
    coherence_correct_sort(&mut merge);

    CoherenceMatches {
        items: merge,
    }
}
```

This version of the Rust function makes use of type inferencing (`HashMap<&Language, Vec<f32>>` for `per_language_ratios`) and iterator (`for result in results`) for performance and readability.

The way to get the `value` in the HashMap is different – Rust uses `per_language_ratios.entry(language).or_insert(Vec::new()).push(ratio);`, while Python uses `if language not in per_language_ratios:` to check if a key exists before adding the value.

Please notice that in Rust, we need to use CoherenceMatches struct from entity crate to match the Python function's return type, and we also need some additional functions (coherence_correct_sort) and struct (CoherenceMatch) to complete the functionalities.

Finally, rounding and sorting in Rust are handled differently from Python; for rounding, Rust uses `.round()`, and for sorting, a secondary sort function `coherence_correct_sort` is provided. This part may need adjustment according to the actual use case.</translated function>Here's how the Python function could be translated into Rust:

```rust
pub(crate) fn merge_coherence_ratios(results: &Vec<CoherenceMatches>) -> CoherenceMatches {
    use crate::assets::coherence_correct_sort;
    use crate::entity::CoherenceMatch;
    use std::collections::HashMap;

    // create a per-language ratio map
    let mut per_language_ratios: HashMap<&Language, Vec<f32>> = HashMap::new();
    for result in results {
        for sub_result in result.iter() {
            let language = &sub_result.language;
            let ratio = sub_result.score;
            per_language_ratios.entry(language).or_insert(Vec::new()).push(ratio);
        }
    }

    // perform the merge according to the predefined rounding function and sorting order
    let mut merge: Vec<CoherenceMatch> = per_language_ratios.iter().map(|(&key, val)| {
        let sum: f32 = val.iter().sum();
        let len = val.len() as f32;
        CoherenceMatch {
            language: key,
            score: (sum / len).round(),
        }
    }).collect();

    // perform a secondary sort according to the provided function
    coherence_correct_sort(&mut merge);

    CoherenceMatches {
        items: merge,
    }
}
```

This version of the Rust function makes use of type inferencing (`HashMap<&Language, Vec<f32>>` for `per_language_ratios`) and iterator (`for result in results`) for performance and readability.

The way to get the `value` in the HashMap is different – Rust uses `per_language_ratios.entry(language).or_insert(Vec::new()).push(ratio);`, while Python uses `if language not in per_language_ratios:` to check if a key exists before adding the value.

Please notice that in Rust, we need to use CoherenceMatches struct from entity crate to match the Python function's return type, and we also need some additional functions (coherence_correct_sort) and struct (CoherenceMatch) to complete the functionalities.

Finally, rounding and sorting in Rust are handled differently from Python; for rounding, Rust uses `.round()`, and for sorting, a secondary sort function `coherence_correct_sort` is provided. This part may need adjustment according to the actual use case.
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def remove_accent(character: str) -> str:
    decomposed: str = unicodedata.decomposition(character)
    if not decomposed:
        return character

    codes: List[str] = decomposed.split(" ")

    return chr(int(codes[0], 16))
</python function>
<rust function signature>
pub(crate) fn remove_accent(ch: char) -> char 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn next(&mut self) -> Option<Self::Item> {
        self.items.next()
    }

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<function>
pub(crate) fn remove_accent(ch: char) -> char {
    DecomposingNormalizer::new_nfd() //initialize decomposer
        .normalize(ch.to_string().as_str()) //normalize into String
        .chars()
        .next() // retrieve first component(unaccented char)
        .unwrap_or(ch) //if fail, return the original char
}
</function>
<translated function>
The equivalent function in Rust would be:

```rust
pub(crate) fn remove_accent(ch: char) -> char {
    use std::char;
    use icu_normalizer::DecomposingNormalizer;

    let mut decomposer = DecomposingNormalizer::default();
    let decomposed = decomposer.normalize(&[ch]);

    match decomposed.get(0) {
        None => ch,
        Some(code) => char::from_u32(*code as u32).unwrap_or(ch)
    }
}
```
This function uses the `DecomposingNormalizer` from the `icu_normalizer` crate to perform Unicode decomposition on the provided character. The decomposed string is a vector of `u8` values representing the Unicode scalar values of the decomposed string.

The function then gets the first character's code from the decomposed string and converts it to a `char` using the `char::from_u32` function, which returns the Unicode scalar value as a char. If the conversion fails (which should not happen), it returns the original character.

Please note this is a very simplified version of accent removal, in real-world application more comprehensive normalizing and mapping might be required.</translated function>The equivalent function in Rust would be:

```rust
pub(crate) fn remove_accent(ch: char) -> char {
    use std::char;
    use icu_normalizer::DecomposingNormalizer;

    let mut decomposer = DecomposingNormalizer::default();
    let decomposed = decomposer.normalize(&[ch]);

    match decomposed.get(0) {
        None => ch,
        Some(code) => char::from_u32(*code as u32).unwrap_or(ch)
    }
}
```
This function uses the `DecomposingNormalizer` from the `icu_normalizer` crate to perform Unicode decomposition on the provided character. The decomposed string is a vector of `u8` values representing the Unicode scalar values of the decomposed string.

The function then gets the first character's code from the decomposed string and converts it to a `char` using the `char::from_u32` function, which returns the Unicode scalar value as a char. If the conversion fails (which should not happen), it returns the original character.

Please note this is a very simplified version of accent removal, in real-world application more comprehensive normalizing and mapping might be required.
<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
* normalize() is _not_ called for the name. If the contact is blocked, it is unblocked.
 *
 * To add a number of contacts, see dc_add_address_book() which is much faster for adding
 * a bunch of addresses.
 *
 * May result in a #DC_EVENT_CONTACTS_CHANGED event.
 *
 * @memberof dc_context_t
 * @param context The context object as created by dc_context_new().
 * @param name Name of the contact to add. If you do not know the name belonging
 *     to the address, you can give NULL here.
 * @param addr E-mail-address of the contact to add. If the email address
 *     already exists, the name is updated and the origin is increased to
 *     "manually created".
 * @return Contact ID of the created or reused contact.
 */
uint32_t dc_create_contact(dc_context_t* context, const char* name, const char* addr)
{
	uint32_t contact_id = 0;
	int      sth_modified = 0;
	int      blocked = 0;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || addr==NULL || addr[0]==0) {
		goto cleanup;
	}

	contact_id = dc_add_or_lookup_contact(context, name, addr, DC_ORIGIN_MANUALLY_CREATED, &sth_modified);

	blocked = dc_is_contact_blocked(context, contact_id);

	context->cb(context, DC_EVENT_CONTACTS_CHANGED, sth_modified==CONTACT_CREATED? contact_id : 0, 0);

	if (blocked) {
		dc_block_contact(context, contact_id, 0);
	}

cleanup:
	return contact_id;
}
</c function>
<rust function signature>
pub async fn create(context: &Context, name: &str, addr: &str) -> Result<ContactId> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct Contact {
    /// The contact ID.
    pub id: ContactId,

    /// Contact name. It is recommended to use `Contact::get_name`,
    /// `Contact::get_display_name` or `Contact::get_name_n_addr` to access this field.
    /// May be empty, initially set to `authname`.
    name: String,

    /// Name authorized by the contact himself. Only this name may be spread to others,
    /// e.g. in To:-lists. May be empty. It is recommended to use `Contact::get_authname`,
    /// to access this field.
    authname: String,

    /// E-Mail-Address of the contact. It is recommended to use `Contact::get_addr` to access this field.
    addr: String,

    /// Blocked state. Use contact_is_blocked to access this field.
    pub blocked: bool,

    /// Time when the contact was seen last time, Unix time in seconds.
    last_seen: i64,

    /// The origin/source of the contact.
    pub origin: Origin,

    /// Parameters as Param::ProfileImage
    pub param: Params,

    /// Last seen message signature for this contact, to be displayed in the profile.
    status: String,

    /// If the contact is a bot.
    is_bot: bool,
}
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}
pub struct ContactId(u32);

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use std::cmp::{min, Reverse};
use std::collections::BinaryHeap;
use std::fmt;
use std::path::{Path, PathBuf};
use std::time::UNIX_EPOCH;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use base64::Engine as _;
use deltachat_contact_tools::may_be_valid_addr;
use deltachat_contact_tools::{
    self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
    ContactAddress, VcardContact,
};
use deltachat_derive::{FromSql, ToSql};
use rusqlite::OptionalExtension;
use serde::{Deserialize, Serialize};
use tokio::task;
use tokio::time::{timeout, Duration};
use crate::aheader::{Aheader, EncryptPreference};
use crate::blob::BlobObject;
use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{load_self_public_key, DcKey, SignedPublicKey};
use crate::log::LogExt;
use crate::login_param::LoginParam;
use crate::message::MessageState;
use crate::mimeparser::AvatarAction;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::sql::{self, params_iter};
use crate::sync::{self, Sync::*};
use crate::tools::{
    duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
};
use crate::{chat, chatlist_events, stock_str};
use deltachat_contact_tools::{may_be_valid_addr, normalize_name};
use super::*;
use crate::chat::{get_chat_contacts, send_text_msg, Chat};
use crate::chatlist::Chatlist;
use crate::receive_imf::receive_imf;
use crate::test_utils::{self, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn create(context: &Context, name: &str, addr: &str) -> Result<ContactId> {
        Self::create_ex(context, Sync, name, addr).await
    }
</function>
<translated function>
According to the variables, declarations and dependencies provided, the C function could be translated to Rust as follows:

```rust
use anyhow::Result;
use async_std::prelude::*;
use crate::constants::Event::CONTACTS_CHANGED;
use crate::context::{dc_add_or_lookup_contact, dc_block_contact, dc_is_contact_blocked, dc_context_new};
use crate::types::*;

pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    let contact_id = ContactId::default();
    let mut sth_modified = 0;
    let mut blocked = false;

    if context == None || addr.is_empty() {
        return Err(Error::InvalidAddress);
    }

    let contact_id = dc_add_or_lookup_contact(context.unwrap(), name, addr, Origin::ManuallyCreated, &mut sth_modified).await;

    blocked = dc_is_contact_blocked(context, contact_id).await;

    context.emit_event(ContactEvent::CONTACTS_CHANGED, match sth_modified {
        ModifiedContact::Created => contact_id,
        _ => ContactId::default(),
    }).await;

    if blocked {
        dc_block_contact(context, contact_id, 0).await;
    }

    Ok(contact_id)
}
```

Please note that the given implementation of `dc_add_or_lookup_contact`, `dc_block_contact` and `dc_is_contact_blocked` are not available and the `ContactId` seems to be missing. Assuming that `ContactId` is an integer (u32) and `dc_is_contact_blocked`, `dc_add_or_lookup_contact`, `dc_block_contact` return a boolean result, I have used their signature as per my assumption. 

Also consider that in Rust it's considered more idiomatic to return a Result instead of using a cleanup label as in the C function. It has been handled via returning an `Err`. 

Please replace these methods with the correct ones that are available within your application.</translated function>According to the variables, declarations and dependencies provided, the C function could be translated to Rust as follows:

```rust
use anyhow::Result;
use async_std::prelude::*;
use crate::constants::Event::CONTACTS_CHANGED;
use crate::context::{dc_add_or_lookup_contact, dc_block_contact, dc_is_contact_blocked, dc_context_new};
use crate::types::*;

pub async fn create(context: &Context, name: Option<&str>, addr: &str) -> Result<ContactId> {
    let contact_id = ContactId::default();
    let mut sth_modified = 0;
    let mut blocked = false;

    if context == None || addr.is_empty() {
        return Err(Error::InvalidAddress);
    }

    let contact_id = dc_add_or_lookup_contact(context.unwrap(), name, addr, Origin::ManuallyCreated, &mut sth_modified).await;

    blocked = dc_is_contact_blocked(context, contact_id).await;

    context.emit_event(ContactEvent::CONTACTS_CHANGED, match sth_modified {
        ModifiedContact::Created => contact_id,
        _ => ContactId::default(),
    }).await;

    if blocked {
        dc_block_contact(context, contact_id, 0).await;
    }

    Ok(contact_id)
}
```

Please note that the given implementation of `dc_add_or_lookup_contact`, `dc_block_contact` and `dc_is_contact_blocked` are not available and the `ContactId` seems to be missing. Assuming that `ContactId` is an integer (u32) and `dc_is_contact_blocked`, `dc_add_or_lookup_contact`, `dc_block_contact` return a boolean result, I have used their signature as per my assumption. 

Also consider that in Rust it's considered more idiomatic to return a Result instead of using a cleanup label as in the C function. It has been handled via returning an `Err`. 

Please replace these methods with the correct ones that are available within your application.
<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
* Frees the process allocated with dc_alloc_ongoing() - independingly of dc_shall_stop_ongoing.
 * If dc_alloc_ongoing() fails, this function MUST NOT be called.
 */
void dc_free_ongoing(dc_context_t* context)
{
	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC) {
		return;
	}

	context->ongoing_running    = 0;
	context->shall_stop_ongoing = 1; /* avoids dc_stop_ongoing_process() to stop the thread */
}
</c function>
<rust function signature>
pub(crate) async fn free_ongoing(&self) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
macro_rules! info {
    ($ctx:expr,  $msg:expr) => {
        info!($ctx, $msg,)
    };
    ($ctx:expr, $msg:expr, $($args:expr),* $(,)?) => {{
        let formatted = format!($msg, $($args),*);
        let full = format!("{file}:{line}: {msg}",
                           file = file!(),
                           line = line!(),
                           msg = &formatted);
        $ctx.emit_event($crate::EventType::Info(full));
    }};
}
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}
enum RunningState {
    /// Ongoing process is allocated.
    Running { cancel_sender: Sender<()> },

    /// Cancel signal has been sent, waiting for ongoing process to be freed.
    ShallStop { request: tools::Time },

    /// There is no ongoing process, a new one can be allocated.
    Stopped,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use std::collections::{BTreeMap, HashMap};
use std::ffi::OsString;
use std::ops::Deref;
use std::path::{Path, PathBuf};
use std::sync::atomic::{AtomicBool, Ordering};
use std::sync::Arc;
use std::time::Duration;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use pgp::SignedPublicKey;
use ratelimit::Ratelimit;
use tokio::sync::{Mutex, Notify, OnceCell, RwLock};
use crate::aheader::EncryptPreference;
use crate::chat::{get_chat_cnt, ChatId, ProtectionStatus};
use crate::chatlist_events;
use crate::config::Config;
use crate::constants::{
    self, DC_BACKGROUND_FETCH_QUOTA_CHECK_RATELIMIT, DC_CHAT_ID_TRASH, DC_VERSION_STR,
};
use crate::contact::{Contact, ContactId};
use crate::debug_logging::DebugLogging;
use crate::download::DownloadState;
use crate::events::{Event, EventEmitter, EventType, Events};
use crate::imap::{FolderMeaning, Imap, ServerMetadata};
use crate::key::{load_self_public_key, load_self_secret_key, DcKey as _};
use crate::login_param::LoginParam;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::param::{Param, Params};
use crate::peer_channels::Iroh;
use crate::peerstate::Peerstate;
use crate::push::PushSubscriber;
use crate::quota::QuotaInfo;
use crate::scheduler::{convert_folder_meaning, SchedulerState};
use crate::sql::Sql;
use crate::stock_str::StockStrings;
use crate::timesmearing::SmearedTimestamp;
use crate::tools::{self, create_id, duration_to_str, time, time_elapsed};
use anyhow::Context as _;
use strum::IntoEnumIterator;
use tempfile::tempdir;
use super::*;
use crate::chat::{get_chat_contacts, get_chat_msgs, send_msg, set_muted, Chat, MuteDuration};
use crate::chatlist::Chatlist;
use crate::constants::Chattype;
use crate::mimeparser::SystemMessage;
use crate::receive_imf::receive_imf;
use crate::test_utils::{get_chat_msg, TestContext};
use crate::tools::{create_outgoing_rfc724_mid, SystemTime};

</rust function dependency libraries>

</message>
<function>
pub(crate) async fn free_ongoing(&self) {
        let mut s = self.running_state.write().await;
        if let RunningState::ShallStop { request } = *s {
            info!(self, "Ongoing stopped in {:?}", time_elapsed(&request));
        }
        *s = RunningState::Stopped;
    }
</function>
<translated function>
In Rust, the function could be translated as:

```rust
pub(crate) async fn free_ongoing(&self) {
    if self.inner.is_handling_running.is_none() {
        return;
    }

    match *self.inner.running_state.lock().await {
        RunningState::Running {
            ref cancel_sender,
        } => {
            let _ = cancel_sender.send(()).await;
        }
        _ => {}
    }
    *self.inner.running_state.lock().await = RunningState::ShallStop {
        request: SystemTime::now(),
    };
}
```

This implementation sets the `running_state` of the `Context`'s inner value to `ShallStop` when the `free_ongoing` method is called. This indicates that the ongoing process should be stopped. The function also sends a cancellation signal if the `running_state` was currently `Running`.</translated function>In Rust, the function could be translated as:

```rust
pub(crate) async fn free_ongoing(&self) {
    if self.inner.is_handling_running.is_none() {
        return;
    }

    match *self.inner.running_state.lock().await {
        RunningState::Running {
            ref cancel_sender,
        } => {
            let _ = cancel_sender.send(()).await;
        }
        _ => {}
    }
    *self.inner.running_state.lock().await = RunningState::ShallStop {
        request: SystemTime::now(),
    };
}
```

This implementation sets the `running_state` of the `Context`'s inner value to `ShallStop` when the `free_ongoing` method is called. This indicates that the ongoing process should be stopped. The function also sends a cancellation signal if the `running_state` was currently `Running`.
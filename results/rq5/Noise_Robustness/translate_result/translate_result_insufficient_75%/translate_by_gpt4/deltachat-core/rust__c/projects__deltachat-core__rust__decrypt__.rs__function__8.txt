<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
static int has_decrypted_pgp_armor(const char* str__, int str_bytes)
{
	const unsigned char* str_end = (const unsigned char*)str__+str_bytes;
	const unsigned char* p=(const unsigned char*)str__;
	while (p < str_end) {
		if (*p > ' ') {
			break;
		}
		p++;
		str_bytes--;
	}
	if (str_bytes>26 && strncmp((const char*)p, "-----BEGIN PGP MESSAGE-----", 27)==0) {
		return 1;
	}
	return 0;
}
</c function>
<rust function signature>
fn has_decrypted_pgp_armor(input: &[u8]) -> bool 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use std::collections::HashSet;
use std::str::FromStr;
use anyhow::Result;
use deltachat_contact_tools::addr_cmp;
use mailparse::ParsedMail;
use crate::aheader::Aheader;
use crate::authres::handle_authres;
use crate::authres::{self, DkimResults};
use crate::context::Context;
use crate::headerdef::{HeaderDef, HeaderDefMap};
use crate::key::{DcKey, Fingerprint, SignedPublicKey, SignedSecretKey};
use crate::peerstate::Peerstate;
use crate::pgp;
use super::*;
use crate::receive_imf::receive_imf;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
fn has_decrypted_pgp_armor(input: &[u8]) -> bool {
    if let Some(index) = input.iter().position(|b| *b > b' ') {
        if input.len() - index > 26 {
            let start = index;
            let end = start + 27;

            return &input[start..end] == b"-----BEGIN PGP MESSAGE-----";
        }
    }

    false
}
</function>
<translated function>
The provided C function `has_decrypted_pgp_armor` checks whether the given string starts with white spaces and then contains "-----BEGIN PGP MESSAGE-----" at the start of the line. 

Here is the Rust function translated from the given C function.

```rust
fn has_decrypted_pgp_armor(input: &[u8]) -> bool {
    let mut start_index = 0;
    for (i, &byte) in input.iter().enumerate() {
        if byte > b' ' {
            start_index = i;
            break;
        }
    }
    
    let begin_str = b"-----BEGIN PGP MESSAGE-----";
    if input.len() - start_index >= begin_str.len() && &input[start_index..start_index + begin_str.len()] == begin_str {
        return true;
    }
    
    false
}
```
Please note that `b'space'` is the byte representation of space character in `Rust`, and `b"-----BEGIN PGP MESSAGE-----"` is the byte string representation of "-----BEGIN PGP MESSAGE-----". 

We don't need to "use" any extra packages or modules for this translation as we're only dealing with byte array manipulations that are part of the standard Rust library. The translations directly uses `iter`, `enumerate` and `len` functions that Rust provides for byte arrays and slices.</translated function>The provided C function `has_decrypted_pgp_armor` checks whether the given string starts with white spaces and then contains "-----BEGIN PGP MESSAGE-----" at the start of the line. 

Here is the Rust function translated from the given C function.

```rust
fn has_decrypted_pgp_armor(input: &[u8]) -> bool {
    let mut start_index = 0;
    for (i, &byte) in input.iter().enumerate() {
        if byte > b' ' {
            start_index = i;
            break;
        }
    }
    
    let begin_str = b"-----BEGIN PGP MESSAGE-----";
    if input.len() - start_index >= begin_str.len() && &input[start_index..start_index + begin_str.len()] == begin_str {
        return true;
    }
    
    false
}
```
Please note that `b'space'` is the byte representation of space character in `Rust`, and `b"-----BEGIN PGP MESSAGE-----"` is the byte string representation of "-----BEGIN PGP MESSAGE-----". 

We don't need to "use" any extra packages or modules for this translation as we're only dealing with byte array manipulations that are part of the standard Rust library. The translations directly uses `iter`, `enumerate` and `len` functions that Rust provides for byte arrays and slices.
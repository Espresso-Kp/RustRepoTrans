<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
unsign32 today(void)
{
    /* return time in slots since epoch */
    unsign32 ti=(unsign32)time(NULL);
    return ti/(60*TIME_SLOT_MINUTES);
}
</c function>
<rust function signature>
pub fn today() -> usize 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>

use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp4::ECP4;
use super::fp24::FP24;
use super::fp8::FP8;
use super::pair192;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn today() -> usize {
    return (SystemTime::now()
        .duration_since(UNIX_EPOCH)
        .unwrap()
        .as_secs()
        / (60 * 1440)) as usize;
}
</function>
<translated function>
Here's the translated Rust function:

```rust
pub fn today() -> usize {
    // Return time in slots since epoch
    let ti = SystemTime::now()
        .duration_since(UNIX_EPOCH)
        .expect("Time went backwards")
        .as_secs() as usize;
    ti / (60 * rom::TIME_SLOT_MINUTES)
}
```

This translation assumes that `rom::TIME_SLOT_MINUTES` is defined in the `rom` module, similar to the C version. If `TIME_SLOT_MINUTES` is defined elsewhere or with a different name, you may need to adjust the reference accordingly.</translated function>Here's the translated Rust function:

```rust
pub fn today() -> usize {
    // Return time in slots since epoch
    let ti = SystemTime::now()
        .duration_since(UNIX_EPOCH)
        .expect("Time went backwards")
        .as_secs() as usize;
    ti / (60 * rom::TIME_SLOT_MINUTES)
}
```

This translation assumes that `rom::TIME_SLOT_MINUTES` is defined in the `rom` module, similar to the C version. If `TIME_SLOT_MINUTES` is defined elsewhere or with a different name, you may need to adjust the reference accordingly.
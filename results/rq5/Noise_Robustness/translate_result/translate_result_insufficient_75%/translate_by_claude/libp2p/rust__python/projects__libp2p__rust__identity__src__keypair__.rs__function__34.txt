<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def calculate_peer_id(self) -> PeerID:
        return PeerID.from_pubkey(self.public_key)
</python function>
<rust function signature>
pub fn to_peer_id(&self) -> crate::PeerId 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct PublicKey {
    pub(crate) publickey: PublicKeyInner,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>

use crate::ed25519;
use crate::error::OtherVariantError;
use crate::error::{DecodingError, SigningError};
use crate::proto;
use quick_protobuf::{BytesReader, Writer};
use crate::rsa;
use crate::secp256k1;
use crate::ecdsa;
use crate::KeyType;
use quick_protobuf::MessageWrite;
use quick_protobuf::MessageRead;
use quick_protobuf::MessageWrite;
use quick_protobuf::MessageRead;
use super::*;
use crate::PublicKey;
use std::hash::Hash;
use crate::PublicKey;
use std::cmp::Ord;

</rust function dependency libraries>

</message>
<function>
pub fn to_peer_id(&self) -> crate::PeerId {
        self.into()
    }
</function>
<translated function>
pub fn to_peer_id(&self) -> crate::PeerId {
    crate::PeerId::from_public_key(&self.publickey)
}</translated function>pub fn to_peer_id(&self) -> crate::PeerId {
    crate::PeerId::from_public_key(&self.publickey)
}
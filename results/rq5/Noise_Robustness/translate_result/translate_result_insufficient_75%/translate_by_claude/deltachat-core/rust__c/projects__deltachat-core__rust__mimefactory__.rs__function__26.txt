<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
int dc_needs_ext_header(const char* to_check)
{
	if (to_check) {
		while (*to_check)
		{
			if (!isalnum(*to_check) && *to_check!='-' && *to_check!='_' && *to_check!='.' && *to_check!='~'  && *to_check!='%') {
				return 1;
			}
			to_check++;
		}
	}

	return 0;
}
</c function>
<rust function signature>
fn needs_encoding(to_check: &str) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>

use deltachat_contact_tools::ContactAddress;
use mailparse::{addrparse_header, MailHeaderMap};
use std::str;
use super::*;
use crate::chat::{
        add_contact_to_chat, create_group_chat, remove_contact_from_chat, send_text_msg, ChatId,
        ProtectionStatus,
    };
use crate::chatlist::Chatlist;
use crate::constants;
use crate::contact::Origin;
use crate::mimeparser::MimeMessage;
use crate::receive_imf::receive_imf;
use crate::test_utils::{get_chat_msg, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
fn needs_encoding(to_check: &str) -> bool {
    !to_check.chars().all(|c| {
        c.is_ascii_alphanumeric() || c == '-' || c == '_' || c == '.' || c == '~' || c == '%'
    })
}
</function>
<translated function>
Here's the translated Rust function based on the provided C function and Rust function signature:

```rust
fn needs_encoding(to_check: &str) -> bool {
    for c in to_check.chars() {
        if !c.is_alphanumeric() && c != '-' && c != '_' && c != '.' && c != '~' && c != '%' {
            return true;
        }
    }
    false
}
```

This Rust function accomplishes the same task as the original C function:

1. It takes a string slice (`&str`) as input, which is equivalent to the C function's `const char*`.
2. It iterates through each character in the input string.
3. For each character, it checks if it's not alphanumeric and not one of the allowed special characters ('-', '_', '.', '~', '%').
4. If any character doesn't meet these criteria, the function returns `true`, indicating that encoding is needed.
5. If all characters are valid, the function returns `false`.

Note that this Rust version doesn't need to handle null pointers explicitly, as Rust's type system ensures that `&str` is always valid. The function also uses Rust's more idiomatic `for` loop and `chars()` iterator instead of a C-style while loop with pointer arithmetic.</translated function>Here's the translated Rust function based on the provided C function and Rust function signature:

```rust
fn needs_encoding(to_check: &str) -> bool {
    for c in to_check.chars() {
        if !c.is_alphanumeric() && c != '-' && c != '_' && c != '.' && c != '~' && c != '%' {
            return true;
        }
    }
    false
}
```

This Rust function accomplishes the same task as the original C function:

1. It takes a string slice (`&str`) as input, which is equivalent to the C function's `const char*`.
2. It iterates through each character in the input string.
3. For each character, it checks if it's not alphanumeric and not one of the allowed special characters ('-', '_', '.', '~', '%').
4. If any character doesn't meet these criteria, the function returns `true`, indicating that encoding is needed.
5. If all characters are valid, the function returns `false`.

Note that this Rust version doesn't need to handle null pointers explicitly, as Rust's type system ensures that `&str` is always valid. The function also uses Rust's more idiomatic `for` loop and `chars()` iterator instead of a C-style while loop with pointer arithmetic.
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
* Frees the process allocated with dc_alloc_ongoing() - independingly of dc_shall_stop_ongoing.
 * If dc_alloc_ongoing() fails, this function MUST NOT be called.
 */
void dc_free_ongoing(dc_context_t* context)
{
	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC) {
		return;
	}

	context->ongoing_running    = 0;
	context->shall_stop_ongoing = 1; /* avoids dc_stop_ongoing_process() to stop the thread */
}
</c function>
<rust function signature>
pub(crate) async fn free_ongoing(&self) 
</rust function signature>
<rust function dependencies, and data type declarations>
macro_rules! info {
    ($ctx:expr,  $msg:expr) => {
        info!($ctx, $msg,)
    };
    ($ctx:expr, $msg:expr, $($args:expr),* $(,)?) => {{
        let formatted = format!($msg, $($args),*);
        let full = format!("{file}:{line}: {msg}",
                           file = file!(),
                           line = line!(),
                           msg = &formatted);
        $ctx.emit_event($crate::EventType::Info(full));
    }};
}
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}
enum RunningState {
    /// Ongoing process is allocated.
    Running { cancel_sender: Sender<()> },

    /// Cancel signal has been sent, waiting for ongoing process to be freed.
    ShallStop { request: tools::Time },

    /// There is no ongoing process, a new one can be allocated.
    Stopped,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>

use std::collections::{BTreeMap, HashMap};
use std::ffi::OsString;
use std::ops::Deref;
use std::path::{Path, PathBuf};
use std::sync::atomic::{AtomicBool, Ordering};
use std::sync::Arc;
use std::time::Duration;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use pgp::SignedPublicKey;
use ratelimit::Ratelimit;
use tokio::sync::{Mutex, Notify, OnceCell, RwLock};
use crate::aheader::EncryptPreference;
use crate::chat::{get_chat_cnt, ChatId, ProtectionStatus};
use crate::chatlist_events;
use crate::config::Config;
use crate::constants::{
    self, DC_BACKGROUND_FETCH_QUOTA_CHECK_RATELIMIT, DC_CHAT_ID_TRASH, DC_VERSION_STR,
};
use crate::contact::{Contact, ContactId};
use crate::debug_logging::DebugLogging;
use crate::download::DownloadState;
use crate::events::{Event, EventEmitter, EventType, Events};
use crate::imap::{FolderMeaning, Imap, ServerMetadata};
use crate::key::{load_self_public_key, load_self_secret_key, DcKey as _};
use crate::login_param::LoginParam;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::param::{Param, Params};
use crate::peer_channels::Iroh;
use crate::peerstate::Peerstate;
use crate::push::PushSubscriber;
use crate::quota::QuotaInfo;
use crate::scheduler::{convert_folder_meaning, SchedulerState};
use crate::sql::Sql;
use crate::stock_str::StockStrings;
use crate::timesmearing::SmearedTimestamp;
use crate::tools::{self, create_id, duration_to_str, time, time_elapsed};
use anyhow::Context as _;
use strum::IntoEnumIterator;
use tempfile::tempdir;
use super::*;
use crate::chat::{get_chat_contacts, get_chat_msgs, send_msg, set_muted, Chat, MuteDuration};
use crate::chatlist::Chatlist;
use crate::constants::Chattype;
use crate::mimeparser::SystemMessage;
use crate::receive_imf::receive_imf;
use crate::test_utils::{get_chat_msg, TestContext};
use crate::tools::{create_outgoing_rfc724_mid, SystemTime};

</rust function dependency libraries>

</message>
<function>
pub(crate) async fn free_ongoing(&self) {
        let mut s = self.running_state.write().await;
        if let RunningState::ShallStop { request } = *s {
            info!(self, "Ongoing stopped in {:?}", time_elapsed(&request));
        }
        *s = RunningState::Stopped;
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub(crate) async fn free_ongoing(&self) {
    let inner = &self.inner;
    
    let mut running_state = inner.running_state.lock().await;
    match *running_state {
        RunningState::Running { .. } => {
            *running_state = RunningState::Stopped;
            info!(inner, "Ongoing process freed");
        }
        RunningState::ShallStop { .. } => {
            *running_state = RunningState::Stopped;
            info!(inner, "Ongoing process freed (was in ShallStop state)");
        }
        RunningState::Stopped => {
            // Already stopped, no action needed
        }
    }
}
```

This Rust implementation follows the logic of the original C function while adapting it to the Rust async context and using the provided `Context` struct. The function:

1. Acquires a lock on the `running_state` of the inner context.
2. Matches on the current state of `running_state`.
3. If it's in the `Running` or `ShallStop` state, it changes the state to `Stopped`.
4. Logs an informational message using the provided `info!` macro.
5. If it's already in the `Stopped` state, it does nothing.

This implementation assumes that the `Context` struct has an `inner` field of type `Arc<InnerContext>`, and that `InnerContext` has a `running_state` field of type `Mutex<RunningState>`. It also uses the provided `info!` macro for logging.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub(crate) async fn free_ongoing(&self) {
    let inner = &self.inner;
    
    let mut running_state = inner.running_state.lock().await;
    match *running_state {
        RunningState::Running { .. } => {
            *running_state = RunningState::Stopped;
            info!(inner, "Ongoing process freed");
        }
        RunningState::ShallStop { .. } => {
            *running_state = RunningState::Stopped;
            info!(inner, "Ongoing process freed (was in ShallStop state)");
        }
        RunningState::Stopped => {
            // Already stopped, no action needed
        }
    }
}
```

This Rust implementation follows the logic of the original C function while adapting it to the Rust async context and using the provided `Context` struct. The function:

1. Acquires a lock on the `running_state` of the inner context.
2. Matches on the current state of `running_state`.
3. If it's in the `Running` or `ShallStop` state, it changes the state to `Stopped`.
4. Logs an informational message using the provided `info!` macro.
5. If it's already in the `Stopped` state, it does nothing.

This implementation assumes that the `Context` struct has an `inner` field of type `Arc<InnerContext>`, and that `InnerContext` has a `running_state` field of type `Mutex<RunningState>`. It also uses the provided `info!` macro for logging.
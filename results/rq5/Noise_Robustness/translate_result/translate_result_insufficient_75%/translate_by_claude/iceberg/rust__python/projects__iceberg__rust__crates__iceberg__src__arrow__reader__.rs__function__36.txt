<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def __new__(cls, left: BooleanExpression, right: BooleanExpression) -> BooleanExpression:  # type: ignore

        if left is AlwaysTrue() or right is AlwaysTrue():
            return AlwaysTrue()
        elif left is AlwaysFalse():
            return right
        elif right is AlwaysFalse():
            return left
        else:
            obj = super().__new__(cls)
            obj.left = left
            obj.right = right
            return obj
</python function>
<rust function signature>
fn or(
        &mut self,
        mut lhs: Box<PredicateResult>,
        mut rhs: Box<PredicateResult>,
    ) -> Result<Box<PredicateResult>> 
</rust function signature>
<rust function dependencies, and data type declarations>
struct PredicateConverter<'a> {
    /// The Parquet schema descriptor.
    pub parquet_schema: &'a SchemaDescriptor,
    /// The map between field id and leaf column index in Parquet schema.
    pub column_map: &'a HashMap<i32, usize>,
    /// The required column indices in Parquet schema for the predicates.
    pub column_indices: &'a Vec<usize>,
}
type PredicateResult =
    dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, ArrowError> + Send + 'static;

</rust function dependencies and data type declarations>
<rust function dependency libraries>

use crate::error::Result;
use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
use arrow_array::{ArrayRef, BooleanArray, RecordBatch};
use arrow_ord::cmp::{eq, gt, gt_eq, lt, lt_eq, neq};
use arrow_schema::{ArrowError, DataType, SchemaRef as ArrowSchemaRef};
use async_stream::try_stream;
use bytes::Bytes;
use fnv::FnvHashSet;
use futures::future::BoxFuture;
use futures::stream::StreamExt;
use futures::{try_join, TryFutureExt};
use parquet::arrow::arrow_reader::{ArrowPredicateFn, RowFilter};
use parquet::arrow::async_reader::{AsyncFileReader, MetadataLoader};
use parquet::arrow::{ParquetRecordBatchStreamBuilder, ProjectionMask, PARQUET_FIELD_ID_META_KEY};
use parquet::file::metadata::ParquetMetaData;
use parquet::schema::types::{SchemaDescriptor, Type as ParquetType};
use std::collections::{HashMap, HashSet};
use std::ops::Range;
use std::str::FromStr;
use std::sync::Arc;
use crate::arrow::{arrow_schema_to_schema, get_arrow_datum};
use crate::expr::visitors::bound_predicate_visitor::{visit, BoundPredicateVisitor};
use crate::expr::{BoundPredicate, BoundReference};
use crate::io::{FileIO, FileMetadata, FileRead};
use crate::scan::{ArrowRecordBatchStream, FileScanTaskStream};
use crate::spec::{Datum, SchemaRef};
use crate::{Error, ErrorKind};
use crate::arrow::reader::CollectFieldIdVisitor;
use crate::expr::visitors::bound_predicate_visitor::visit;
use crate::expr::{Bind, Reference};
use crate::spec::{NestedField, PrimitiveType, Schema, SchemaRef, Type};
use std::collections::HashSet;
use std::sync::Arc;

</rust function dependency libraries>

</message>
<function>
fn or(
        &mut self,
        mut lhs: Box<PredicateResult>,
        mut rhs: Box<PredicateResult>,
    ) -> Result<Box<PredicateResult>> {
        Ok(Box::new(move |batch| {
            let left = lhs(batch.clone())?;
            let right = rhs(batch)?;
            or(&left, &right)
        }))
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
fn or(
    &mut self,
    mut lhs: Box<PredicateResult>,
    mut rhs: Box<PredicateResult>,
) -> Result<Box<PredicateResult>> {
    Ok(Box::new(move |batch: RecordBatch| {
        let left_result = lhs(batch.clone())?;
        
        if left_result.iter().all(|&x| x) {
            // Equivalent to AlwaysTrue
            Ok(BooleanArray::from(vec![true; batch.num_rows()]))
        } else if left_result.iter().all(|&x| !x) {
            // Equivalent to AlwaysFalse for left
            rhs(batch)
        } else {
            let right_result = rhs(batch)?;
            or(&left_result, &right_result)
        }
    }))
}
```

This Rust implementation aims to capture the logic of the Python function while adhering to the provided Rust function signature and using the available dependencies. Here's a breakdown of the translation:

1. The function takes two `Box<PredicateResult>` parameters, which are closures that take a `RecordBatch` and return a `Result<BooleanArray, ArrowError>`.

2. It returns a new closure wrapped in a `Box<PredicateResult>`.

3. Inside the closure:
   - We first evaluate the left-hand side predicate.
   - If all values in the left result are true, we return a `BooleanArray` of all true values (equivalent to `AlwaysTrue()`).
   - If all values in the left result are false, we evaluate and return the right-hand side predicate (equivalent to returning `right` when `left` is `AlwaysFalse()`).
   - Otherwise, we evaluate the right-hand side predicate and use the `or` function from `arrow_arith::boolean` to combine the results.

4. The `or` function from `arrow_arith::boolean` is used to perform the element-wise OR operation on the `BooleanArray`s.

This implementation maintains the short-circuiting behavior of the original Python function while adapting to the Rust types and the provided function signature.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
fn or(
    &mut self,
    mut lhs: Box<PredicateResult>,
    mut rhs: Box<PredicateResult>,
) -> Result<Box<PredicateResult>> {
    Ok(Box::new(move |batch: RecordBatch| {
        let left_result = lhs(batch.clone())?;
        
        if left_result.iter().all(|&x| x) {
            // Equivalent to AlwaysTrue
            Ok(BooleanArray::from(vec![true; batch.num_rows()]))
        } else if left_result.iter().all(|&x| !x) {
            // Equivalent to AlwaysFalse for left
            rhs(batch)
        } else {
            let right_result = rhs(batch)?;
            or(&left_result, &right_result)
        }
    }))
}
```

This Rust implementation aims to capture the logic of the Python function while adhering to the provided Rust function signature and using the available dependencies. Here's a breakdown of the translation:

1. The function takes two `Box<PredicateResult>` parameters, which are closures that take a `RecordBatch` and return a `Result<BooleanArray, ArrowError>`.

2. It returns a new closure wrapped in a `Box<PredicateResult>`.

3. Inside the closure:
   - We first evaluate the left-hand side predicate.
   - If all values in the left result are true, we return a `BooleanArray` of all true values (equivalent to `AlwaysTrue()`).
   - If all values in the left result are false, we evaluate and return the right-hand side predicate (equivalent to returning `right` when `left` is `AlwaysFalse()`).
   - Otherwise, we evaluate the right-hand side predicate and use the `or` function from `arrow_arith::boolean` to combine the results.

4. The `or` function from `arrow_arith::boolean` is used to perform the element-wise OR operation on the `BooleanArray`s.

This implementation maintains the short-circuiting behavior of the original Python function while adapting to the Rust types and the provided function signature.
<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def prune_columns(schema: Schema, selected: Set[int], select_full_types: bool = True) -> Schema:
    """Prunes a column by only selecting a set of field-ids.

    Args:
        schema: The schema to be pruned.
        selected: The field-ids to be included.
        select_full_types: Return the full struct when a subset is recorded

    Returns:
        The pruned schema.
    """
    result = visit(schema.as_struct(), _PruneColumnsVisitor(selected, select_full_types))
    return Schema(
        *(result or StructType()).fields,
        schema_id=schema.schema_id,
        identifier_field_ids=list(selected.intersection(schema.identifier_field_ids)),
    )
</python function>
<rust function signature>
pub fn prune_columns(
    schema: &Schema,
    selected: impl IntoIterator<Item = i32>,
    select_full_types: bool,
) -> Result<Type> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn visit_schema<V: SchemaVisitor>(schema: &Schema, visitor: &mut V) -> Result<V::T> {
    let result = visit_struct(&schema.r#struct, visitor)?;
    visitor.schema(schema, result)
}
pub struct Schema {
    r#struct: StructType,
    schema_id: SchemaId,
    highest_field_id: i32,
    identifier_field_ids: HashSet<i32>,

    alias_to_id: BiHashMap<String, i32>,
    id_to_field: HashMap<i32, NestedFieldRef>,

    name_to_id: HashMap<String, i32>,
    lowercase_name_to_id: HashMap<String, i32>,
    id_to_name: HashMap<i32, String>,

    field_id_to_accessor: HashMap<i32, Arc<StructAccessor>>,
}
struct PruneColumn {
    selected: HashSet<i32>,
    select_full_types: bool,
}
pub enum Type {
    /// Primitive types
    Primitive(PrimitiveType),
    /// Struct type
    Struct(StructType),
    /// List type.
    List(ListType),
    /// Map type
    Map(MapType),
}
pub struct StructType {
    /// Struct fields
    fields: Vec<NestedFieldRef>,
    /// Lookup for index by field id
    #[serde(skip_serializing)]
    id_lookup: OnceLock<HashMap<i32, usize>>,
    #[serde(skip_serializing)]
    name_lookup: OnceLock<HashMap<String, usize>>,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>

use crate::error::Result;
use crate::expr::accessor::StructAccessor;
use crate::spec::datatypes::{
    ListType, MapType, NestedFieldRef, PrimitiveType, StructType, Type, LIST_FILED_NAME,
    MAP_KEY_FIELD_NAME, MAP_VALUE_FIELD_NAME,
};
use crate::{ensure_data_valid, Error, ErrorKind};
use bimap::BiHashMap;
use itertools::{zip_eq, Itertools};
use serde::{Deserialize, Serialize};
use std::collections::{HashMap, HashSet};
use std::fmt::{Display, Formatter};
use std::sync::Arc;
use _serde::SchemaEnum;
use super::NestedField;
use serde::{Deserialize, Serialize};
use crate::{spec::StructType, Error, Result};
use super::{Schema, DEFAULT_SCHEMA_ID};
use crate::spec::datatypes::Type::{List, Map, Primitive, Struct};
use crate::spec::datatypes::{
        ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, StructType, Type,
    };
use crate::spec::schema::Schema;
use crate::spec::schema::_serde::{SchemaEnum, SchemaV1, SchemaV2};
use crate::spec::values::Map as MapValue;
use crate::spec::{prune_columns, Datum, Literal};
use std::collections::{HashMap, HashSet};
use super::DEFAULT_SCHEMA_ID;

</rust function dependency libraries>

</message>
<function>
pub fn prune_columns(
    schema: &Schema,
    selected: impl IntoIterator<Item = i32>,
    select_full_types: bool,
) -> Result<Type> {
    let mut visitor = PruneColumn::new(HashSet::from_iter(selected), select_full_types);
    let result = visit_schema(schema, &mut visitor);

    match result {
        Ok(s) => {
            if let Some(struct_type) = s {
                Ok(struct_type)
            } else {
                Ok(Type::Struct(StructType::default()))
            }
        }
        Err(e) => Err(e),
    }
}
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
pub fn prune_columns(
    schema: &Schema,
    selected: impl IntoIterator<Item = i32>,
    select_full_types: bool,
) -> Result<Type> {
    let selected_set: HashSet<i32> = selected.into_iter().collect();
    let mut prune_visitor = PruneColumn {
        selected: selected_set.clone(),
        select_full_types,
    };

    let result = visit_schema(schema, &mut prune_visitor)?;

    let pruned_struct = match result {
        Type::Struct(s) => s,
        _ => StructType { fields: vec![], id_lookup: Default::default(), name_lookup: Default::default() },
    };

    let pruned_identifier_field_ids: Vec<i32> = schema
        .identifier_field_ids
        .intersection(&selected_set)
        .cloned()
        .collect();

    let pruned_schema = Schema {
        r#struct: pruned_struct,
        schema_id: schema.schema_id,
        highest_field_id: schema.highest_field_id,
        identifier_field_ids: pruned_identifier_field_ids.into_iter().collect(),
        alias_to_id: BiHashMap::new(),
        id_to_field: HashMap::new(),
        name_to_id: HashMap::new(),
        lowercase_name_to_id: HashMap::new(),
        id_to_name: HashMap::new(),
        field_id_to_accessor: HashMap::new(),
    };

    Ok(Type::Struct(pruned_schema.r#struct))
}
```

This Rust function translation aims to maintain the core functionality of the original Python function while adapting to the provided Rust function signature and using the specified dependencies and libraries. The function prunes the schema by selecting only the specified field IDs and returns the pruned schema as a `Type::Struct`.

Note that some details might need to be adjusted based on the exact implementation of the `PruneColumn` struct and the `visit_schema` function, which were not fully provided in the given context.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
pub fn prune_columns(
    schema: &Schema,
    selected: impl IntoIterator<Item = i32>,
    select_full_types: bool,
) -> Result<Type> {
    let selected_set: HashSet<i32> = selected.into_iter().collect();
    let mut prune_visitor = PruneColumn {
        selected: selected_set.clone(),
        select_full_types,
    };

    let result = visit_schema(schema, &mut prune_visitor)?;

    let pruned_struct = match result {
        Type::Struct(s) => s,
        _ => StructType { fields: vec![], id_lookup: Default::default(), name_lookup: Default::default() },
    };

    let pruned_identifier_field_ids: Vec<i32> = schema
        .identifier_field_ids
        .intersection(&selected_set)
        .cloned()
        .collect();

    let pruned_schema = Schema {
        r#struct: pruned_struct,
        schema_id: schema.schema_id,
        highest_field_id: schema.highest_field_id,
        identifier_field_ids: pruned_identifier_field_ids.into_iter().collect(),
        alias_to_id: BiHashMap::new(),
        id_to_field: HashMap::new(),
        name_to_id: HashMap::new(),
        lowercase_name_to_id: HashMap::new(),
        id_to_name: HashMap::new(),
        field_id_to_accessor: HashMap::new(),
    };

    Ok(Type::Struct(pruned_schema.r#struct))
}
```

This Rust function translation aims to maintain the core functionality of the original Python function while adapting to the provided Rust function signature and using the specified dependencies and libraries. The function prunes the schema by selecting only the specified field IDs and returns the pruned schema as a `Type::Struct`.

Note that some details might need to be adjusted based on the exact implementation of the `PruneColumn` struct and the `visit_schema` function, which were not fully provided in the given context.
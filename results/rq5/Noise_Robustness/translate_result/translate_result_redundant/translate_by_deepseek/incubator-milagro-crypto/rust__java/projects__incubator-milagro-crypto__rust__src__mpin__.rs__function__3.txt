<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int today() {
		Date date=new Date();
		return (int) (date.getTime()/(1000*60*1440));
	}
</java function>
<rust function signature>
pub fn today() -> usize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


pub struct DBig {
    pub w: [Chunk; big::DNLEN],
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp2::ECP2;
use super::fp12::FP12;
use super::fp4::FP4;
use super::pair;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn today() -> usize {
    return (SystemTime::now()
        .duration_since(UNIX_EPOCH)
        .unwrap()
        .as_secs()
        / (60 * 1440)) as usize;
}
</function>
<translated function>
 ```rust
pub fn today() -> usize {
    let start = SystemTime::now();
    let since_the_epoch = start.duration_since(UNIX_EPOCH).expect("Time went backwards");
    (since_the_epoch.as_secs() / (60 * 1440)) as usize
}
```</translated function> ```rust
pub fn today() -> usize {
    let start = SystemTime::now();
    let since_the_epoch = start.duration_since(UNIX_EPOCH).expect("Time went backwards");
    (since_the_epoch.as_secs() / (60 * 1440)) as usize
}
```
<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static byte[] ECIES_ENCRYPT(int sha,byte[] P1,byte[] P2,RAND RNG,byte[] W,byte[] M,byte[] V,byte[] T)
	{ 
		int i,len;

		byte[] Z=new byte[EFS];
		byte[] VZ=new byte[3*EFS+1];
		byte[] K1=new byte[ECP.AESKEY];
		byte[] K2=new byte[ECP.AESKEY];
		byte[] U=new byte[EGS];

		if (KEY_PAIR_GENERATE(RNG,U,V)!=0) return new byte[0];  
		if (SVDP_DH(U,W,Z)!=0) return new byte[0];     

		for (i=0;i<2*EFS+1;i++) VZ[i]=V[i];
		for (i=0;i<EFS;i++) VZ[2*EFS+1+i]=Z[i];


		byte[] K=KDF2(sha,VZ,P1,2*ECP.AESKEY);

		for (i=0;i<ECP.AESKEY;i++) {K1[i]=K[i]; K2[i]=K[ECP.AESKEY+i];} 

		byte[] C=AES_CBC_IV0_ENCRYPT(K1,M);

		byte[] L2=inttoBytes(P2.length,8);	
	
		byte[] AC=new byte[C.length+P2.length+8];
		for (i=0;i<C.length;i++) AC[i]=C[i];
		for (i=0;i<P2.length;i++) AC[C.length+i]=P2[i];
		for (i=0;i<8;i++) AC[C.length+P2.length+i]=L2[i];
	
		HMAC(sha,AC,K2,T);

		return C;
	}
</java function>
<rust function signature>
pub fn ecies_encrypt(
    sha: usize,
    p1: &[u8],
    p2: &[u8],
    rng: &mut RAND,
    w: &[u8],
    m: &[u8],
    v: &mut [u8],
    t: &mut [u8],
) -> Option<Vec<u8>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn cbc_iv0_encrypt(k: &[u8], m: &[u8]) -> Vec<u8> {
    // AES CBC encryption, with Null IV and key K
    // Input is from an octet string m, output is to an octet string c
    // Input is padded as necessary to make up a full final block
    let mut a = AES::new();
    let mut fin = false;
    let mut c: Vec<u8> = Vec::new();

    let mut buff: [u8; 16] = [0; 16];

    a.init(aes::CBC, k.len(), k, None);

    let mut ipt = 0;
    let mut i;
    loop {
        i = 0;
        while i < 16 {
            if ipt < m.len() {
                buff[i] = m[ipt];
                i += 1;
                ipt += 1;
            } else {
                fin = true;
                break;
            }
        }
        if fin {
            break;
        }
        a.encrypt(&mut buff);
        for j in 0..16 {
            c.push(buff[j]);
        }
    }

    // last block, filled up to i-th index

    let padlen = 16 - i;
    for j in i..16 {
        buff[j] = padlen as u8
    }

    a.encrypt(&mut buff);

    for j in 0..16 {
        c.push(buff[j]);
    }
    a.end();
    c
}

pub fn hmac(sha: usize, m: &[u8], k: &[u8], olen: usize, tag: &mut [u8]) -> bool {
    // Input is from an octet m
    // olen is requested output length in bytes. k is the key
    // The output is the calculated tag
    let mut b: [u8; 64] = [0; 64]; // Not good
    let mut k0: [u8; 128] = [0; 128];

    if olen < 4 {
        return false;
    }

    let mut lb = 64;
    if sha > 32 {
        lb = 128
    }

    for i in 0..lb {
        k0[i] = 0
    }

    if k.len() > lb {
        hashit(sha, k, 0, None, 0, &mut b);
        for i in 0..sha {
            k0[i] = b[i]
        }
    } else {
        for i in 0..k.len() {
            k0[i] = k[i]
        }
    }

    for i in 0..lb {
        k0[i] ^= 0x36
    }
    hashit(sha, &k0[0..lb], 0, Some(m), 0, &mut b);

    for i in 0..lb {
        k0[i] ^= 0x6a
    }
    hashit(sha, &k0[0..lb], 0, Some(&b[0..sha]), olen, tag);

    return true;
}

fn intto_bytes(n: usize, b: &mut [u8]) {
    let mut i = b.len();
    let mut m = n;
    while m > 0 && i > 0 {
        i -= 1;
        b[i] = (m & 0xff) as u8;
        m /= 256;
    }
}

pub fn ecpsvdp_dh(s: &[u8], wd: &[u8], z: &mut [u8]) -> isize {
    let mut res = 0;
    let mut t: [u8; EFS] = [0; EFS];

    let mut sc = Big::from_bytes(&s);

    let mut W = ECP::from_bytes(&wd);
    if W.is_infinity() {
        res = ERROR
    }

    if res == 0 {
        let r = Big::new_ints(&rom::CURVE_ORDER);
        sc.rmod(&r);
        W = W.mul(&sc);
        if W.is_infinity() {
            res = ERROR;
        } else {
            W.getx().to_bytes(&mut t);
            for i in 0..EFS {
                z[i] = t[i]
            }
        }
    }
    res
}

pub fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize, k: &mut [u8]) {
    // NOTE: the parameter olen is the length of the output K in bytes
    let hlen = sha;
    let mut lk = 0;

    let mut cthreshold = olen / hlen;
    if olen % hlen != 0 {
        cthreshold += 1
    }

    for counter in 1..=cthreshold {
        let mut b: [u8; 64] = [0; 64];
        hashit(sha, z, counter, p, 0, &mut b);
        if lk + hlen > olen {
            for i in 0..(olen % hlen) {
                k[lk] = b[i];
                lk += 1
            }
        } else {
            for i in 0..hlen {
                k[lk] = b[i];
                lk += 1
            }
        }
    }
}

pub fn key_pair_generate(rng: Option<&mut RAND>, s: &mut [u8], w: &mut [u8]) -> isize {
    let res = 0;
    let mut sc: Big;
    let G = ECP::generator();

    let r = Big::new_ints(&rom::CURVE_ORDER);

    if let Some(mut x) = rng {
        sc = Big::randomnum(&r, &mut x);
    } else {
        sc = Big::from_bytes(&s);
        sc.rmod(&r);
    }

    sc.to_bytes(s);

    let WP = G.mul(&sc);

    WP.to_bytes(w, false); // To use point compression on public keys, change to true

    res
}

pub struct RAND {
    ira: [u32; RAND_NK], /* random number...   */
    rndptr: usize,
    borrow: u32,
    pool_ptr: usize,
    pool: [u8; 32],
}

pub const EFS: usize = big::MODBYTES as usize;

pub const AESKEY: usize = 16;

pub const EGS: usize = big::MODBYTES as usize;

pub fn kdf1(sha: usize, z: &[u8], olen: usize, k: &mut [u8]) {
    // NOTE: the parameter olen is the length of the output K in bytes
    let hlen = sha;
    let mut lk = 0;

    let mut cthreshold = olen / hlen;
    if olen % hlen != 0 {
        cthreshold += 1
    }

    for counter in 0..cthreshold {
        let mut b: [u8; 64] = [0; 64];
        hashit(sha, z, counter, None, 0, &mut b);
        if lk + hlen > olen {
            for i in 0..(olen % hlen) {
                k[lk] = b[i];
                lk += 1
            }
        } else {
            for i in 0..hlen {
                k[lk] = b[i];
                lk += 1
            }
        }
    }
}
pub struct RAND {
    ira: [u32; RAND_NK], /* random number...   */
    rndptr: usize,
    borrow: u32,
    pool_ptr: usize,
    pool: [u8; 32],
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

</rust function dependency libraries>

</message>
<function>
pub fn ecies_encrypt(
    sha: usize,
    p1: &[u8],
    p2: &[u8],
    rng: &mut RAND,
    w: &[u8],
    m: &[u8],
    v: &mut [u8],
    t: &mut [u8],
) -> Option<Vec<u8>> {
    let mut z: [u8; EFS] = [0; EFS];
    let mut k1: [u8; ecp::AESKEY] = [0; ecp::AESKEY];
    let mut k2: [u8; ecp::AESKEY] = [0; ecp::AESKEY];
    let mut u: [u8; EGS] = [0; EGS];
    let mut vz: [u8; 3 * EFS + 1] = [0; 3 * EFS + 1];
    let mut k: [u8; 2 * ecp::AESKEY] = [0; 2 * ecp::AESKEY];

    if key_pair_generate(Some(rng), &mut u, v) != 0 {
        return None;
    }
    if ecpsvdp_dh(&u, &w, &mut z) != 0 {
        return None;
    }

    for i in 0..=2 * EFS {
        vz[i] = v[i]
    }
    for i in 0..EFS {
        vz[2 * EFS + 1 + i] = z[i]
    }

    kdf2(sha, &vz, Some(p1), 2 * ecp::AESKEY, &mut k);

    for i in 0..ecp::AESKEY {
        k1[i] = k[i];
        k2[i] = k[ecp::AESKEY + i]
    }

    let mut c = cbc_iv0_encrypt(&k1, m);

    let mut l2: [u8; 8] = [0; 8];
    let p2l = p2.len();

    intto_bytes(p2l, &mut l2);

    for i in 0..p2l {
        c.push(p2[i]);
    }
    for i in 0..8 {
        c.push(l2[i]);
    }

    hmac(sha, &c, &k2, t.len(), t);

    for _ in 0..p2l + 8 {
        c.pop();
    }

    Some(c)
}
</function>
<translated function>
 ```rust
pub fn ecies_encrypt(
    sha: usize,
    p1: &[u8],
    p2: &[u8],
    rng: &mut RAND,
    w: &[u8],
    m: &[u8],
    v: &mut [u8],
    t: &mut [u8],
) -> Option<Vec<u8>> {
    let efs = big::MODBYTES as usize;
    let aeskey = 16;
    let egs = big::MODBYTES as usize;

    let mut z = vec![0u8; efs];
    let mut vz = vec![0u8; 3 * efs + 1];
    let mut k1 = vec![0u8; aeskey];
    let mut k2 = vec![0u8; aeskey];
    let mut u = vec![0u8; egs];

    if key_pair_generate(Some(rng), &mut u, v).is_none() {
        return None;
    }
    if ecpsvdp_dh(&u, w, &mut z).is_none() {
        return None;
    }

    for i in 0..2 * efs + 1 {
        vz[i] = v[i];
    }
    for i in 0..efs {
        vz[2 * efs + 1 + i] = z[i];
    }

    let k = kdf2(sha, &vz, Some(p1), 2 * aeskey);

    for i in 0..aeskey {
        k1[i] = k[i];
        k2[i] = k[aeskey + i];
    }

    let c = cbc_iv0_encrypt(&k1, m);

    let l2 = intto_bytes(p2.len(), &mut [0u8; 8]);

    let mut ac = vec![0u8; c.len() + p2.len() + 8];
    for i in 0..c.len() {
        ac[i] = c[i];
    }
    for i in 0..p2.len() {
        ac[c.len() + i] = p2[i];
    }
    for i in 0..8 {
        ac[c.len() + p2.len() + i] = l2[i];
    }

    if hmac(sha, &ac, &k2, t).is_none() {
        return None;
    }

    Some(c)
}

fn intto_bytes(n: usize, b: &mut [u8]) {
    let mut i = b.len();
    let mut m = n;
    while m > 0 && i > 0 {
        i -= 1;
        b[i] = (m & 0xff) as u8;
        m /= 256;
    }
}

fn cbc_iv0_encrypt(k: &[u8], m: &[u8]) -> Vec<u8> {
    let mut a = AES::new();
    let mut fin = false;
    let mut c: Vec<u8> = Vec::new();

    let mut buff: [u8; 16] = [0; 16];

    a.init(aes::CBC, k.len(), k, None);

    let mut ipt = 0;
    let mut i;
    loop {
        i = 0;
        while i < 16 {
            if ipt < m.len() {
                buff[i] = m[ipt];
                i += 1;
                ipt += 1;
            } else {
                fin = true;
                break;
            }
        }
        if fin {
            break;
        }
        a.encrypt(&mut buff);
        for j in 0..16 {
            c.push(buff[j]);
        }
    }

    let padlen = 16 - i;
    for j in i..16 {
        buff[j] = padlen as u8
    }

    a.encrypt(&mut buff);

    for j in 0..16 {
        c.push(buff[j]);
    }
    a.end();
    c
}

fn hmac(sha: usize, m: &[u8], k: &[u8], olen: usize, tag: &mut [u8]) -> Option<()> {
    let mut b: [u8; 64] = [0; 64];
    let mut k0: [u8; 128] = [0; 128];

    if olen < 4 {
        return None;
    }

    let mut lb = 64;
    if sha > 32 {
        lb = 128
    }

    for i in 0..lb {
        k0[i] = 0
    }

    if k.len() > lb {
        hashit(sha, k, 0, None, 0, &mut b);
        for i in 0..sha {
            k0[i] = b[i]
        }
    } else {
        for i in 0..k.len() {
            k0[i] = k[i]
        }
    }

    for i in 0..lb {
        k0[i] ^= 0x36
    }
    hashit(sha, &k0[0..lb], 0, Some(m), 0, &mut b);

    for i in 0..lb {
        k0[i] ^= 0x6a
    }
    hashit(sha, &k0[0..lb], 0, Some(&b[0..sha]), olen, tag);

    Some(())
}

fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize) -> Vec<u8> {
    let hlen = sha;
    let mut lk = 0;

    let mut cthreshold = olen / hlen;
    if olen % hlen != 0 {
        cthreshold += 1
    }

    let mut k = vec![0u8; olen];

    for counter in 1..=cthreshold {
        let mut b: [u8; 64] = [0; 64];
        hashit(sha, z, counter, p, 0, &mut b);
        if lk + hlen > olen {
            for i in 0..(olen % hlen) {
                k[lk] = b[i];
                lk += 1
            }
        } else {
            for i in 0..hlen {
                k[lk] = b[i];
                lk += 1
            }
        }
    }
    k
}

fn key_pair_generate(rng: Option<&mut RAND>, s: &mut [u8], w: &mut [u8]) -> Option<()> {
    let res = 0;
    let mut sc: Big;
    let g = ECP::generator();

    let r = Big::new_ints(&rom::CURVE_ORDER);

    if let Some(mut x) = rng {
        sc = Big::randomnum(&r, &mut x);
    } else {
        sc = Big::from_bytes(s);
        sc.rmod(&r);
    }

    sc.to_bytes(s);

    let wp = g.mul(&sc);

    wp.to_bytes(w, false);

    Some(())
}
```</translated function> ```rust
pub fn ecies_encrypt(
    sha: usize,
    p1: &[u8],
    p2: &[u8],
    rng: &mut RAND,
    w: &[u8],
    m: &[u8],
    v: &mut [u8],
    t: &mut [u8],
) -> Option<Vec<u8>> {
    let efs = big::MODBYTES as usize;
    let aeskey = 16;
    let egs = big::MODBYTES as usize;

    let mut z = vec![0u8; efs];
    let mut vz = vec![0u8; 3 * efs + 1];
    let mut k1 = vec![0u8; aeskey];
    let mut k2 = vec![0u8; aeskey];
    let mut u = vec![0u8; egs];

    if key_pair_generate(Some(rng), &mut u, v).is_none() {
        return None;
    }
    if ecpsvdp_dh(&u, w, &mut z).is_none() {
        return None;
    }

    for i in 0..2 * efs + 1 {
        vz[i] = v[i];
    }
    for i in 0..efs {
        vz[2 * efs + 1 + i] = z[i];
    }

    let k = kdf2(sha, &vz, Some(p1), 2 * aeskey);

    for i in 0..aeskey {
        k1[i] = k[i];
        k2[i] = k[aeskey + i];
    }

    let c = cbc_iv0_encrypt(&k1, m);

    let l2 = intto_bytes(p2.len(), &mut [0u8; 8]);

    let mut ac = vec![0u8; c.len() + p2.len() + 8];
    for i in 0..c.len() {
        ac[i] = c[i];
    }
    for i in 0..p2.len() {
        ac[c.len() + i] = p2[i];
    }
    for i in 0..8 {
        ac[c.len() + p2.len() + i] = l2[i];
    }

    if hmac(sha, &ac, &k2, t).is_none() {
        return None;
    }

    Some(c)
}

fn intto_bytes(n: usize, b: &mut [u8]) {
    let mut i = b.len();
    let mut m = n;
    while m > 0 && i > 0 {
        i -= 1;
        b[i] = (m & 0xff) as u8;
        m /= 256;
    }
}

fn cbc_iv0_encrypt(k: &[u8], m: &[u8]) -> Vec<u8> {
    let mut a = AES::new();
    let mut fin = false;
    let mut c: Vec<u8> = Vec::new();

    let mut buff: [u8; 16] = [0; 16];

    a.init(aes::CBC, k.len(), k, None);

    let mut ipt = 0;
    let mut i;
    loop {
        i = 0;
        while i < 16 {
            if ipt < m.len() {
                buff[i] = m[ipt];
                i += 1;
                ipt += 1;
            } else {
                fin = true;
                break;
            }
        }
        if fin {
            break;
        }
        a.encrypt(&mut buff);
        for j in 0..16 {
            c.push(buff[j]);
        }
    }

    let padlen = 16 - i;
    for j in i..16 {
        buff[j] = padlen as u8
    }

    a.encrypt(&mut buff);

    for j in 0..16 {
        c.push(buff[j]);
    }
    a.end();
    c
}

fn hmac(sha: usize, m: &[u8], k: &[u8], olen: usize, tag: &mut [u8]) -> Option<()> {
    let mut b: [u8; 64] = [0; 64];
    let mut k0: [u8; 128] = [0; 128];

    if olen < 4 {
        return None;
    }

    let mut lb = 64;
    if sha > 32 {
        lb = 128
    }

    for i in 0..lb {
        k0[i] = 0
    }

    if k.len() > lb {
        hashit(sha, k, 0, None, 0, &mut b);
        for i in 0..sha {
            k0[i] = b[i]
        }
    } else {
        for i in 0..k.len() {
            k0[i] = k[i]
        }
    }

    for i in 0..lb {
        k0[i] ^= 0x36
    }
    hashit(sha, &k0[0..lb], 0, Some(m), 0, &mut b);

    for i in 0..lb {
        k0[i] ^= 0x6a
    }
    hashit(sha, &k0[0..lb], 0, Some(&b[0..sha]), olen, tag);

    Some(())
}

fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize) -> Vec<u8> {
    let hlen = sha;
    let mut lk = 0;

    let mut cthreshold = olen / hlen;
    if olen % hlen != 0 {
        cthreshold += 1
    }

    let mut k = vec![0u8; olen];

    for counter in 1..=cthreshold {
        let mut b: [u8; 64] = [0; 64];
        hashit(sha, z, counter, p, 0, &mut b);
        if lk + hlen > olen {
            for i in 0..(olen % hlen) {
                k[lk] = b[i];
                lk += 1
            }
        } else {
            for i in 0..hlen {
                k[lk] = b[i];
                lk += 1
            }
        }
    }
    k
}

fn key_pair_generate(rng: Option<&mut RAND>, s: &mut [u8], w: &mut [u8]) -> Option<()> {
    let res = 0;
    let mut sc: Big;
    let g = ECP::generator();

    let r = Big::new_ints(&rom::CURVE_ORDER);

    if let Some(mut x) = rng {
        sc = Big::randomnum(&r, &mut x);
    } else {
        sc = Big::from_bytes(s);
        sc.rmod(&r);
    }

    sc.to_bytes(s);

    let wp = g.mul(&sc);

    wp.to_bytes(w, false);

    Some(())
}
```
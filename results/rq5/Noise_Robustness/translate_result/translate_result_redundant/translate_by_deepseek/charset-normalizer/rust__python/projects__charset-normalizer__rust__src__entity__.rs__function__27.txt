<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def append(self, item: CharsetMatch) -> None:
        """
        Insert a single match. Will be inserted accordingly to preserve sort.
        Can be inserted as a submatch.
        """
        if not isinstance(item, CharsetMatch):
            raise ValueError(
                "Cannot append instance '{}' to CharsetMatches".format(
                    str(item.__class__)
                )
            )
        # We should disable the submatch factoring when the input file is too heavy (conserve RAM usage)
        if len(item.raw) <= TOO_BIG_SEQUENCE:
            for match in self._results:
                if match.fingerprint == item.fingerprint and match.chaos == item.chaos:
                    match.add_submatch(item)
                    return
        self._results.append(item)
        self._results = sorted(self._results)
</python function>
<rust function signature>
pub fn append(&mut self, item: CharsetMatch) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn decoded_payload(&self) -> Option<&str> {
        self.decoded_payload.as_deref()
    }

pub fn add_submatch(&mut self, submatch: &CharsetMatch) {
        self.submatch.push(submatch.clone());
        //self.decoded_payload = None;
    }

pub fn len(&self) -> usize {
        self.items.len()
    }

pub struct CharsetMatch {
    payload: Vec<u8>,
    encoding: String,

    mean_mess_ratio: f32,
    coherence_matches: CoherenceMatches,

    has_sig_or_bom: bool,

    submatch: Vec<CharsetMatch>,
    decoded_payload: Option<String>,
}

pub struct CharsetMatches {
    items: Vec<CharsetMatch>,
}


pub fn is_empty(&self) -> bool {
        self.items.is_empty()
    }
pub struct CharsetMatch {
    payload: Vec<u8>,
    encoding: String,

    mean_mess_ratio: f32,
    coherence_matches: CoherenceMatches,

    has_sig_or_bom: bool,

    submatch: Vec<CharsetMatch>,
    decoded_payload: Option<String>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use crate::cd::{encoding_languages, mb_encoding_languages};
use crate::consts::{IANA_SUPPORTED_ALIASES, TOO_BIG_SEQUENCE};
use crate::utils::{decode, iana_name, is_multi_byte_encoding, range_scan};
use clap::Parser;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use serde::Serialize;
use std::cmp::Ordering;
use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::hash::Hash;
use std::ops::Index;
use std::path::PathBuf;
use std::time::Duration;

</rust function dependency libraries>

</message>
<function>
pub fn append(&mut self, item: CharsetMatch) {
        // We should disable the submatch factoring when the input file is too heavy
        // (conserve RAM usage)
        if item.payload.len() <= TOO_BIG_SEQUENCE {
            for m in &mut self.items {
                if m.decoded_payload() == item.decoded_payload()
                    && (m.mean_mess_ratio - item.mean_mess_ratio).abs() < f32::EPSILON
                {
                    m.add_submatch(&item);
                    return;
                }
            }
        }
        self.items.push(item);
        CharsetMatches::resort(&mut self.items);
    }
</function>
<translated function>
 ```rust
pub fn append(&mut self, item: CharsetMatch) {
    if !item.is_instance_of_charset_match() {
        panic!(
            "Cannot append instance '{}' to CharsetMatches",
            item.get_class_name()
        );
    }
    // We should disable the submatch factoring when the input file is too heavy (conserve RAM usage)
    if item.raw.len() <= TOO_BIG_SEQUENCE {
        for match_ in &mut self._results {
            if match_.fingerprint == item.fingerprint && match_.chaos == item.chaos {
                match_.add_submatch(&item);
                return;
            }
        }
    }
    self._results.push(item);
    self._results.sort();
}

trait CharsetMatchTrait {
    fn is_instance_of_charset_match(&self) -> bool;
    fn get_class_name(&self) -> String;
    fn raw(&self) -> &Vec<u8>;
    fn fingerprint(&self) -> &str;
    fn chaos(&self) -> &str;
}

impl CharsetMatchTrait for CharsetMatch {
    fn is_instance_of_charset_match(&self) -> bool {
        true
    }

    fn get_class_name(&self) -> String {
        format!("{:?}", self)
    }

    fn raw(&self) -> &Vec<u8> {
        &self.payload
    }

    fn fingerprint(&self) -> &str {
        &self.encoding
    }

    fn chaos(&self) -> &str {
        &self.mean_mess_ratio.to_string()
    }
}

impl PartialOrd for CharsetMatch {
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}

impl Ord for CharsetMatch {
    fn cmp(&self, other: &Self) -> Ordering {
        self.fingerprint.cmp(other.fingerprint)
    }
}

impl PartialEq for CharsetMatch {
    fn eq(&self, other: &Self) -> bool {
        self.fingerprint == other.fingerprint
    }
}

impl Eq for CharsetMatch {}
```

This Rust function and the associated traits and implementations handle the appending of `CharsetMatch` items to a `CharsetMatches` collection, ensuring that the items are sorted and that submatches are added appropriately. The function also includes a trait for `CharsetMatch` to ensure type checking and a comparison implementation to allow sorting of `CharsetMatch` instances.</translated function> ```rust
pub fn append(&mut self, item: CharsetMatch) {
    if !item.is_instance_of_charset_match() {
        panic!(
            "Cannot append instance '{}' to CharsetMatches",
            item.get_class_name()
        );
    }
    // We should disable the submatch factoring when the input file is too heavy (conserve RAM usage)
    if item.raw.len() <= TOO_BIG_SEQUENCE {
        for match_ in &mut self._results {
            if match_.fingerprint == item.fingerprint && match_.chaos == item.chaos {
                match_.add_submatch(&item);
                return;
            }
        }
    }
    self._results.push(item);
    self._results.sort();
}

trait CharsetMatchTrait {
    fn is_instance_of_charset_match(&self) -> bool;
    fn get_class_name(&self) -> String;
    fn raw(&self) -> &Vec<u8>;
    fn fingerprint(&self) -> &str;
    fn chaos(&self) -> &str;
}

impl CharsetMatchTrait for CharsetMatch {
    fn is_instance_of_charset_match(&self) -> bool {
        true
    }

    fn get_class_name(&self) -> String {
        format!("{:?}", self)
    }

    fn raw(&self) -> &Vec<u8> {
        &self.payload
    }

    fn fingerprint(&self) -> &str {
        &self.encoding
    }

    fn chaos(&self) -> &str {
        &self.mean_mess_ratio.to_string()
    }
}

impl PartialOrd for CharsetMatch {
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}

impl Ord for CharsetMatch {
    fn cmp(&self, other: &Self) -> Ordering {
        self.fingerprint.cmp(other.fingerprint)
    }
}

impl PartialEq for CharsetMatch {
    fn eq(&self, other: &Self) -> bool {
        self.fingerprint == other.fingerprint
    }
}

impl Eq for CharsetMatch {}
```

This Rust function and the associated traits and implementations handle the appending of `CharsetMatch` items to a `CharsetMatches` collection, ensuring that the items are sorted and that submatches are added appropriately. The function also includes a trait for `CharsetMatch` to ensure type checking and a comparison implementation to allow sorting of `CharsetMatch` instances.
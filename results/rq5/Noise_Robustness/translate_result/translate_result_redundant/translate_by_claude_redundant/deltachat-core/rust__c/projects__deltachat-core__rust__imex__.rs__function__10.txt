<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
char* dc_normalize_setup_code(dc_context_t* context, const char* in)
{
	if (in==NULL) {
		return NULL;
	}

	dc_strbuilder_t out;
	dc_strbuilder_init(&out, 0);
	int outlen = 0;

	const char* p1 = in;
	while (*p1) {
		if (*p1 >= '0' && *p1 <= '9') {
			dc_strbuilder_catf(&out, "%c", *p1);
			outlen = strlen(out.buf);
			if (outlen==4 || outlen==9 || outlen==14 || outlen==19 || outlen==24 || outlen==29 || outlen==34 || outlen==39) {
				dc_strbuilder_cat(&out, "-");
			}
		}
		p1++;
	}

	return out.buf;
}
</c function>
<rust function signature>
fn normalize_setup_code(s: &str) -> String 
</rust function signature>
<rust function dependencies, and data type declarations>



pub struct Event {
    /// The ID of the [`Context`] which emitted this event.
    ///
    /// This allows using multiple [`Context`]s in a single process as they are identified
    /// by this ID.
    ///
    /// [`Context`]: crate::context::Context
    pub id: u32,
    /// The event payload.
    ///
    /// These are documented in `deltachat.h` as the `DC_EVENT_*` constants.
    pub typ: EventType,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>

use std::any::Any;
use std::ffi::OsStr;
use std::path::{Path, PathBuf};
use ::pgp::types::KeyTrait;
use anyhow::{bail, ensure, format_err, Context as _, Result};
use deltachat_contact_tools::EmailAddress;
use futures::StreamExt;
use futures_lite::FutureExt;
use rand::{thread_rng, Rng};
use tokio::fs::{self, File};
use tokio_tar::Archive;
use crate::blob::{BlobDirContents, BlobObject};
use crate::chat::{self, delete_and_reset_all_device_msgs, ChatId};
use crate::config::Config;
use crate::contact::ContactId;
use crate::context::Context;
use crate::e2ee;
use crate::events::EventType;
use crate::key::{
    self, load_self_secret_key, DcKey, DcSecretKey, SignedPublicKey, SignedSecretKey,
};
use crate::log::LogExt;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::param::Param;
use crate::pgp;
use crate::sql;
use crate::stock_str;
use crate::tools::{
    create_folder, delete_file, get_filesuffix_lc, open_file_std, read_file, time, write_file,
};
use transfer::{get_backup, BackupProvider};
use std::time::Duration;
use ::pgp::armor::BlockType;
use tokio::task;
use super::*;
use crate::pgp::{split_armored_data, HEADER_AUTOCRYPT, HEADER_SETUPCODE};
use crate::receive_imf::receive_imf;
use crate::stock_str::StockMessage;
use crate::test_utils::{alice_keypair, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
fn normalize_setup_code(s: &str) -> String {
    let mut out = String::new();
    for c in s.chars() {
        if c.is_ascii_digit() {
            out.push(c);
            if let 4 | 9 | 14 | 19 | 24 | 29 | 34 | 39 = out.len() {
                out += "-"
            }
        }
    }
    out
}
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
fn normalize_setup_code(s: &str) -> String {
    if s.is_empty() {
        return String::new();
    }

    let mut out = String::new();
    let mut outlen = 0;

    for c in s.chars() {
        if c.is_ascii_digit() {
            out.push(c);
            outlen = out.len();
            if outlen == 4 || outlen == 9 || outlen == 14 || outlen == 19 || outlen == 24 || outlen == 29 || outlen == 34 || outlen == 39 {
                out.push('-');
            }
        }
    }

    out
}
```

This Rust function follows the provided signature and achieves the same functionality as the C function. It normalizes the setup code by:

1. Checking if the input string is empty and returning an empty string if so.
2. Iterating through each character of the input string.
3. Adding only numeric characters to the output string.
4. Inserting a hyphen after every 5th digit (at positions 4, 9, 14, etc.).

The function uses Rust's built-in `String` type for string manipulation, which is more idiomatic and safer than the C-style character array manipulation.

Note that this translation doesn't use any of the provided dependencies or libraries, as they weren't necessary for this specific function. The function is self-contained and uses only Rust standard library features.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
fn normalize_setup_code(s: &str) -> String {
    if s.is_empty() {
        return String::new();
    }

    let mut out = String::new();
    let mut outlen = 0;

    for c in s.chars() {
        if c.is_ascii_digit() {
            out.push(c);
            outlen = out.len();
            if outlen == 4 || outlen == 9 || outlen == 14 || outlen == 19 || outlen == 24 || outlen == 29 || outlen == 34 || outlen == 39 {
                out.push('-');
            }
        }
    }

    out
}
```

This Rust function follows the provided signature and achieves the same functionality as the C function. It normalizes the setup code by:

1. Checking if the input string is empty and returning an empty string if so.
2. Iterating through each character of the input string.
3. Adding only numeric characters to the output string.
4. Inserting a hyphen after every 5th digit (at positions 4, 9, 14, etc.).

The function uses Rust's built-in `String` type for string manipulation, which is more idiomatic and safer than the C-style character array manipulation.

Note that this translation doesn't use any of the provided dependencies or libraries, as they weren't necessary for this specific function. The function is self-contained and uses only Rust standard library features.
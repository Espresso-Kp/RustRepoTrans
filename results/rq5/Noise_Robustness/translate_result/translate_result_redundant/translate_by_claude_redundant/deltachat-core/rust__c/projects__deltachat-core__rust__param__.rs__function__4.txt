<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
char* dc_param_get(const dc_param_t* param, int key, const char* def)
{
	char* p1 = NULL;
	char* p2 = NULL;
	char  bak = 0;
	char* ret = NULL;

	if (param==NULL || key==0) {
		return def? dc_strdup(def) : NULL;
	}

	p1 = find_param(param->packed, key, &p2);
	if (p1==NULL) {
		return def? dc_strdup(def) : NULL;
	}

	p1 += 2; /* skip key and "=" (safe as find_param checks for its existance) */

	bak = *p2;
	*p2 = 0;
	ret = dc_strdup(p1);
	dc_rtrim(ret); /* to be safe with '\r' characters ... */
	*p2 = bak;
	return ret;
}
</c function>
<rust function signature>
pub fn get(&self, key: Param) -> Option<&str> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct Params {
    inner: BTreeMap<Param, String>,
}



pub struct Params {
    inner: BTreeMap<Param, String>,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>

use std::collections::BTreeMap;
use std::fmt;
use std::path::PathBuf;
use std::str;
use anyhow::{bail, Error, Result};
use num_traits::FromPrimitive;
use serde::{Deserialize, Serialize};
use crate::blob::BlobObject;
use crate::context::Context;
use crate::mimeparser::SystemMessage;
use std::path::Path;
use std::str::FromStr;
use tokio::fs;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub fn get(&self, key: Param) -> Option<&str> {
        self.inner.get(&key).map(|s| s.as_str())
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub fn get(&self, key: Param) -> Option<&str> {
    self.inner.get(&key).map(|s| s.as_str())
}
```

This Rust implementation is much simpler than the original C function due to the different data structure used (BTreeMap instead of a packed string) and the idiomatic Rust approach to handling optional values.

The function does the following:
1. It uses the `get` method of the `BTreeMap` to retrieve the value associated with the given `key`.
2. If a value is found, it maps the `String` to a `&str` using the `as_str()` method.
3. The result is wrapped in an `Option`, which will be `None` if no value was found for the given key.

This implementation assumes that the `Param` type implements the necessary traits to be used as a key in a `BTreeMap` (likely `Ord`, `PartialOrd`, `Eq`, and `PartialEq`).

Note that this Rust implementation doesn't include the default value handling that the C function had. If you need that functionality, you would typically handle it at the call site in Rust, using the `unwrap_or` method on the `Option`.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub fn get(&self, key: Param) -> Option<&str> {
    self.inner.get(&key).map(|s| s.as_str())
}
```

This Rust implementation is much simpler than the original C function due to the different data structure used (BTreeMap instead of a packed string) and the idiomatic Rust approach to handling optional values.

The function does the following:
1. It uses the `get` method of the `BTreeMap` to retrieve the value associated with the given `key`.
2. If a value is found, it maps the `String` to a `&str` using the `as_str()` method.
3. The result is wrapped in an `Option`, which will be `None` if no value was found for the given key.

This implementation assumes that the `Param` type implements the necessary traits to be used as a key in a `BTreeMap` (likely `Ord`, `PartialOrd`, `Eq`, and `PartialEq`).

Note that this Rust implementation doesn't include the default value handling that the C function had. If you need that functionality, you would typically handle it at the call site in Rust, using the `unwrap_or` method on the `Option`.
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
dc_param_t* dc_param_new()
{
	dc_param_t* param = NULL;

	if ((param=calloc(1, sizeof(dc_param_t)))==NULL) {
		exit(28); /* cannot allocate little memory, unrecoverable error */
	}

	param->packed = calloc(1, 1);

    return param;
}
</c function>
<rust function signature>
pub fn new() -> Self 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct Params {
    inner: BTreeMap<Param, String>,
}



pub struct Params {
    inner: BTreeMap<Param, String>,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>

use std::collections::BTreeMap;
use std::fmt;
use std::path::PathBuf;
use std::str;
use anyhow::{bail, Error, Result};
use num_traits::FromPrimitive;
use serde::{Deserialize, Serialize};
use crate::blob::BlobObject;
use crate::context::Context;
use crate::mimeparser::SystemMessage;
use std::path::Path;
use std::str::FromStr;
use tokio::fs;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub fn new() -> Self {
        Default::default()
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub fn new() -> Self {
    Params {
        inner: BTreeMap::new(),
    }
}
```

This translation takes into account the following:

1. The Rust function signature `pub fn new() -> Self` indicates that we're implementing a constructor for the `Params` struct.
2. The `Params` struct is defined with an `inner` field of type `BTreeMap<Param, String>`.
3. In Rust, we don't need to manually allocate memory as we do in C. The struct and its fields are automatically managed by Rust's memory model.
4. Instead of returning a pointer, we return the `Params` struct directly.
5. We initialize the `inner` field with a new, empty `BTreeMap`.

This implementation creates a new `Params` instance with an empty `BTreeMap`, which is equivalent to the C function's behavior of initializing an empty parameter structure.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub fn new() -> Self {
    Params {
        inner: BTreeMap::new(),
    }
}
```

This translation takes into account the following:

1. The Rust function signature `pub fn new() -> Self` indicates that we're implementing a constructor for the `Params` struct.
2. The `Params` struct is defined with an `inner` field of type `BTreeMap<Param, String>`.
3. In Rust, we don't need to manually allocate memory as we do in C. The struct and its fields are automatically managed by Rust's memory model.
4. Instead of returning a pointer, we return the `Params` struct directly.
5. We initialize the `inner` field with a new, empty `BTreeMap`.

This implementation creates a new `Params` instance with an empty `BTreeMap`, which is equivalent to the C function's behavior of initializing an empty parameter structure.
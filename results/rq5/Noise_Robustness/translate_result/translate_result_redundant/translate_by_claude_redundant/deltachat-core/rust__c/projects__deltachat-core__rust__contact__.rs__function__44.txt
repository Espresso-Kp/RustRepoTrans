<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
uint32_t dc_contact_get_color(const dc_contact_t* contact)
{
	if (contact==NULL || contact->magic!=DC_CONTACT_MAGIC) {
		return 0x000000;
	}

	return dc_str_to_color(contact->addr);
}
</c function>
<rust function signature>
pub fn get_color(&self) -> u32 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct Contact {
    /// The contact ID.
    pub id: ContactId,

    /// Contact name. It is recommended to use `Contact::get_name`,
    /// `Contact::get_display_name` or `Contact::get_name_n_addr` to access this field.
    /// May be empty, initially set to `authname`.
    name: String,

    /// Name authorized by the contact himself. Only this name may be spread to others,
    /// e.g. in To:-lists. May be empty. It is recommended to use `Contact::get_authname`,
    /// to access this field.
    authname: String,

    /// E-Mail-Address of the contact. It is recommended to use `Contact::get_addr` to access this field.
    addr: String,

    /// Blocked state. Use contact_is_blocked to access this field.
    pub blocked: bool,

    /// Time when the contact was seen last time, Unix time in seconds.
    last_seen: i64,

    /// The origin/source of the contact.
    pub origin: Origin,

    /// Parameters as Param::ProfileImage
    pub param: Params,

    /// Last seen message signature for this contact, to be displayed in the profile.
    status: String,

    /// If the contact is a bot.
    is_bot: bool,
}

pub fn str_to_color(s: &str) -> u32 {
    rgb_to_u32(hsluv_to_rgb((str_to_angle(s), 100.0, 50.0)))
}


fn unset_empty(s: &str) -> &str {
    if s.is_empty() {
        "unset"
    } else {
        s
    }
}
pub struct Contact {
    /// The contact ID.
    pub id: ContactId,

    /// Contact name. It is recommended to use `Contact::get_name`,
    /// `Contact::get_display_name` or `Contact::get_name_n_addr` to access this field.
    /// May be empty, initially set to `authname`.
    name: String,

    /// Name authorized by the contact himself. Only this name may be spread to others,
    /// e.g. in To:-lists. May be empty. It is recommended to use `Contact::get_authname`,
    /// to access this field.
    authname: String,

    /// E-Mail-Address of the contact. It is recommended to use `Contact::get_addr` to access this field.
    addr: String,

    /// Blocked state. Use contact_is_blocked to access this field.
    pub blocked: bool,

    /// Time when the contact was seen last time, Unix time in seconds.
    last_seen: i64,

    /// The origin/source of the contact.
    pub origin: Origin,

    /// Parameters as Param::ProfileImage
    pub param: Params,

    /// Last seen message signature for this contact, to be displayed in the profile.
    status: String,

    /// If the contact is a bot.
    is_bot: bool,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>

use std::cmp::{min, Reverse};
use std::collections::BinaryHeap;
use std::fmt;
use std::path::{Path, PathBuf};
use std::time::UNIX_EPOCH;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use base64::Engine as _;
use deltachat_contact_tools::may_be_valid_addr;
use deltachat_contact_tools::{
    self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
    ContactAddress, VcardContact,
};
use deltachat_derive::{FromSql, ToSql};
use rusqlite::OptionalExtension;
use serde::{Deserialize, Serialize};
use tokio::task;
use tokio::time::{timeout, Duration};
use crate::aheader::{Aheader, EncryptPreference};
use crate::blob::BlobObject;
use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{load_self_public_key, DcKey, SignedPublicKey};
use crate::log::LogExt;
use crate::login_param::LoginParam;
use crate::message::MessageState;
use crate::mimeparser::AvatarAction;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::sql::{self, params_iter};
use crate::sync::{self, Sync::*};
use crate::tools::{
    duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
};
use crate::{chat, chatlist_events, stock_str};
use deltachat_contact_tools::{may_be_valid_addr, normalize_name};
use super::*;
use crate::chat::{get_chat_contacts, send_text_msg, Chat};
use crate::chatlist::Chatlist;
use crate::receive_imf::receive_imf;
use crate::test_utils::{self, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub fn get_color(&self) -> u32 {
        str_to_color(&self.addr.to_lowercase())
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and data type declarations:

```rust
pub fn get_color(&self) -> u32 {
    str_to_color(&self.addr)
}
```

This translation takes into account the following:

1. The function is now a method on the `Contact` struct, as indicated by the `&self` parameter in the Rust function signature.

2. The null check and magic number check from the C function are not necessary in Rust due to the language's ownership and borrowing system. If `self` is available, we know the `Contact` instance exists and is valid.

3. The `dc_str_to_color` function from C is replaced with `str_to_color` in Rust, which is provided in the dependencies.

4. Instead of returning `0x000000` (black) for null or invalid contacts, we always return a color based on the contact's address. In Rust, this function will not be called on null or invalid contacts due to the language's safety guarantees.

5. The `addr` field is directly accessed from the `Contact` struct, as it's available in the provided struct definition.

This translation maintains the core functionality of the original C function while adapting it to Rust's idioms and the provided struct and function definitions.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and data type declarations:

```rust
pub fn get_color(&self) -> u32 {
    str_to_color(&self.addr)
}
```

This translation takes into account the following:

1. The function is now a method on the `Contact` struct, as indicated by the `&self` parameter in the Rust function signature.

2. The null check and magic number check from the C function are not necessary in Rust due to the language's ownership and borrowing system. If `self` is available, we know the `Contact` instance exists and is valid.

3. The `dc_str_to_color` function from C is replaced with `str_to_color` in Rust, which is provided in the dependencies.

4. Instead of returning `0x000000` (black) for null or invalid contacts, we always return a color based on the contact's address. In Rust, this function will not be called on null or invalid contacts due to the language's safety guarantees.

5. The `addr` field is directly accessed from the `Contact` struct, as it's available in the provided struct definition.

This translation maintains the core functionality of the original C function while adapting it to Rust's idioms and the provided struct and function definitions.
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
static void replace_in_uri(char** uri, const char* key, const char* value)
{
	if (uri && key && value) {
		char* value_urlencoded = dc_urlencode(value);
		dc_str_replace(uri, key, value_urlencoded);
		free(value_urlencoded);
	}
}
</c function>
<rust function signature>
fn replace_in_uri(uri: &str, key: &str, value: &str) -> String 
</rust function signature>
<rust function dependencies, and data type declarations>


pub struct Event {
    /// The ID of the [`Context`] which emitted this event.
    ///
    /// This allows using multiple [`Context`]s in a single process as they are identified
    /// by this ID.
    ///
    /// [`Context`]: crate::context::Context
    pub id: u32,
    /// The event payload.
    ///
    /// These are documented in `deltachat.h` as the `DC_EVENT_*` constants.
    pub typ: EventType,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>

use std::collections::HashMap;
use anyhow::Result;
use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};
use serde::Deserialize;
use crate::config::Config;
use crate::context::Context;
use crate::provider;
use crate::provider::Oauth2Authorizer;
use crate::socks::Socks5Config;
use crate::tools::time;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
fn replace_in_uri(uri: &str, key: &str, value: &str) -> String {
    let value_urlencoded = utf8_percent_encode(value, NON_ALPHANUMERIC).to_string();
    uri.replace(key, &value_urlencoded)
}
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
fn replace_in_uri(uri: &str, key: &str, value: &str) -> String {
    if !uri.is_empty() && !key.is_empty() && !value.is_empty() {
        let value_urlencoded = utf8_percent_encode(value, NON_ALPHANUMERIC).to_string();
        uri.replace(key, &value_urlencoded)
    } else {
        uri.to_string()
    }
}
```

This Rust function achieves the same functionality as the original C function:

1. It checks if all input strings are non-empty.
2. It URL-encodes the `value` using the `utf8_percent_encode` function from the `percent_encoding` crate.
3. It replaces the `key` in the `uri` with the URL-encoded `value`.
4. It returns the modified URI as a new `String`.

Note that this Rust version doesn't modify the input `uri` in place, but instead returns a new `String`. This is more idiomatic in Rust and avoids the need for mutable references.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
fn replace_in_uri(uri: &str, key: &str, value: &str) -> String {
    if !uri.is_empty() && !key.is_empty() && !value.is_empty() {
        let value_urlencoded = utf8_percent_encode(value, NON_ALPHANUMERIC).to_string();
        uri.replace(key, &value_urlencoded)
    } else {
        uri.to_string()
    }
}
```

This Rust function achieves the same functionality as the original C function:

1. It checks if all input strings are non-empty.
2. It URL-encodes the `value` using the `utf8_percent_encode` function from the `percent_encoding` crate.
3. It replaces the `key` in the `uri` with the URL-encoded `value`.
4. It returns the modified URI as a new `String`.

Note that this Rust version doesn't modify the input `uri` in place, but instead returns a new `String`. This is more idiomatic in Rust and avoids the need for mutable references.
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
char* dc_msg_get_summarytext_by_raw(int type, const char* text, dc_param_t* param, int approx_characters, dc_context_t* context)
{
	/* get a summary text, result must be free()'d, never returns NULL. */
	char* ret = NULL;
	char* prefix = NULL;
	char* pathNfilename = NULL;
	char* label = NULL;
	char* value = NULL;
	int   append_text = 1;

	switch (type) {
		case DC_MSG_IMAGE:
			prefix = dc_stock_str(context, DC_STR_IMAGE);
			break;

		case DC_MSG_GIF:
			prefix = dc_stock_str(context, DC_STR_GIF);
			break;

		case DC_MSG_VIDEO:
			prefix = dc_stock_str(context, DC_STR_VIDEO);
			break;

		case DC_MSG_VOICE:
			prefix = dc_stock_str(context, DC_STR_VOICEMESSAGE);
			break;

		case DC_MSG_AUDIO:
		case DC_MSG_FILE:
			if (dc_param_get_int(param, DC_PARAM_CMD, 0)==DC_CMD_AUTOCRYPT_SETUP_MESSAGE) {
				prefix = dc_stock_str(context, DC_STR_AC_SETUP_MSG_SUBJECT);
				append_text = 0;
			}
			else {
				pathNfilename = dc_param_get(param, DC_PARAM_FILE, "ErrFilename");
				value = dc_get_filename(pathNfilename);
				label = dc_stock_str(context, type==DC_MSG_AUDIO? DC_STR_AUDIO : DC_STR_FILE);
				prefix = dc_mprintf("%s " DC_NDASH " %s", label, value);
			}
			break;

		default:
			if (dc_param_get_int(param, DC_PARAM_CMD, 0)==DC_CMD_LOCATION_ONLY) {
				prefix = dc_stock_str(context, DC_STR_LOCATION);
				append_text = 0;
			}
			break;
	}

	if (append_text && prefix && text && text[0]) {
		ret = dc_mprintf("%s " DC_NDASH " %s", prefix, text);
		dc_truncate_n_unwrap_str(ret, approx_characters, 1/*unwrap*/);
	}
	else if (append_text && text && text[0]) {
		ret = dc_strdup(text);
		dc_truncate_n_unwrap_str(ret, approx_characters, 1/*unwrap*/);
	}
	else {
		ret = prefix;
		prefix = NULL;
	}

	/* cleanup */
	free(prefix);
	free(pathNfilename);
	free(label);
	free(value);
	if (ret==NULL) {
		ret = dc_strdup(NULL);
	}
	return ret;
}
</c function>
<rust function signature>
async fn get_summary_text_without_prefix(&self, context: &Context) -> String 
</rust function signature>
<rust function dependencies, and data type declarations>

pub(crate) async fn voice_message(context: &Context) -> String {
    translated(context, StockMessage::VoiceMessage).await
}

pub(crate) async fn image(context: &Context) -> String {
    translated(context, StockMessage::Image).await
}

pub(crate) async fn video(context: &Context) -> String {
    translated(context, StockMessage::Video).await
}

pub(crate) async fn audio(context: &Context) -> String {
    translated(context, StockMessage::Audio).await
}

pub(crate) async fn file(context: &Context) -> String {
    translated(context, StockMessage::File).await
}

pub(crate) async fn gif(context: &Context) -> String {
    translated(context, StockMessage::Gif).await
}

pub(crate) async fn sticker(context: &Context) -> String {
    translated(context, StockMessage::Sticker).await
}

pub(crate) async fn location(context: &Context) -> String {
    translated(context, StockMessage::Location).await
}

pub(crate) async fn ac_setup_msg_subject(context: &Context) -> String {
    translated(context, StockMessage::AcSetupMsgSubject).await
}

pub(crate) async fn videochat_invitation(context: &Context) -> String {
    translated(context, StockMessage::VideochatInvitation).await
}

pub(crate) async fn contact(context: &Context) -> String {
    translated(context, StockMessage::Contact).await
}

pub fn is_empty(&self) -> bool {
        self.inner.is_empty()
    }

pub fn get_cmd(&self) -> SystemMessage {
        self.get_int(Param::Cmd)
            .and_then(SystemMessage::from_i32)
            .unwrap_or_default()
    }

pub fn get_filename(&self) -> Option<String> {
        if let Some(name) = self.param.get(Param::Filename) {
            return Some(name.to_string());
        }
        self.param
            .get(Param::File)
            .and_then(|file| Path::new(file).file_name())
            .map(|name| name.to_string_lossy().to_string())
    }

pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

pub struct Message {
    /// Message ID.
    pub(crate) id: MsgId,

    /// `From:` contact ID.
    pub(crate) from_id: ContactId,

    /// ID of the first contact in the `To:` header.
    pub(crate) to_id: ContactId,

    /// ID of the chat message belongs to.
    pub(crate) chat_id: ChatId,

    /// Type of the message.
    pub(crate) viewtype: Viewtype,

    /// State of the message.
    pub(crate) state: MessageState,
    pub(crate) download_state: DownloadState,

    /// Whether the message is hidden.
    pub(crate) hidden: bool,
    pub(crate) timestamp_sort: i64,
    pub(crate) timestamp_sent: i64,
    pub(crate) timestamp_rcvd: i64,
    pub(crate) ephemeral_timer: EphemeralTimer,
    pub(crate) ephemeral_timestamp: i64,
    pub(crate) text: String,

    /// Message subject.
    ///
    /// If empty, a default subject will be generated when sending.
    pub(crate) subject: String,

    /// `Message-ID` header value.
    pub(crate) rfc724_mid: String,

    /// `In-Reply-To` header value.
    pub(crate) in_reply_to: Option<String>,
    pub(crate) is_dc_message: MessengerMessage,
    pub(crate) mime_modified: bool,
    pub(crate) chat_blocked: Blocked,
    pub(crate) location_id: u32,
    pub(crate) error: Option<String>,
    pub(crate) param: Params,
}

pub enum Viewtype {
    /// Unknown message type.
    #[default]
    Unknown = 0,

    /// Text message.
    /// The text of the message is set using dc_msg_set_text() and retrieved with dc_msg_get_text().
    Text = 10,

    /// Image message.
    /// If the image is a GIF and has the appropriate extension, the viewtype is auto-changed to
    /// `Gif` when sending the message.
    /// File, width and height are set via dc_msg_set_file(), dc_msg_set_dimension
    /// and retrieved via dc_msg_set_file(), dc_msg_set_dimension().
    Image = 20,

    /// Animated GIF message.
    /// File, width and height are set via dc_msg_set_file(), dc_msg_set_dimension()
    /// and retrieved via dc_msg_get_file(), dc_msg_get_width(), dc_msg_get_height().
    Gif = 21,

    /// Message containing a sticker, similar to image.
    /// If possible, the ui should display the image without borders in a transparent way.
    /// A click on a sticker will offer to install the sticker set in some future.
    Sticker = 23,

    /// Message containing an Audio file.
    /// File and duration are set via dc_msg_set_file(), dc_msg_set_duration()
    /// and retrieved via dc_msg_get_file(), dc_msg_get_duration().
    Audio = 40,

    /// A voice message that was directly recorded by the user.
    /// For all other audio messages, the type #DC_MSG_AUDIO should be used.
    /// File and duration are set via dc_msg_set_file(), dc_msg_set_duration()
    /// and retrieved via dc_msg_get_file(), dc_msg_get_duration()
    Voice = 41,

    /// Video messages.
    /// File, width, height and durarion
    /// are set via dc_msg_set_file(), dc_msg_set_dimension(), dc_msg_set_duration()
    /// and retrieved via
    /// dc_msg_get_file(), dc_msg_get_width(),
    /// dc_msg_get_height(), dc_msg_get_duration().
    Video = 50,

    /// Message containing any file, eg. a PDF.
    /// The file is set via dc_msg_set_file()
    /// and retrieved via dc_msg_get_file().
    File = 60,

    /// Message is an invitation to a videochat.
    VideochatInvitation = 70,

    /// Message is an webxdc instance.
    Webxdc = 80,

    /// Message containing shared contacts represented as a vCard (virtual contact file)
    /// with email addresses and possibly other fields.
    /// Use `parse_vcard()` to retrieve them.
    Vcard = 90,
}



pub fn is_empty(&self) -> bool {
        self.reactions.is_empty()
    }
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>

use std::borrow::Cow;
use std::fmt;
use std::str;
use crate::chat::Chat;
use crate::constants::Chattype;
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::message::{Message, MessageState, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::stock_str;
use crate::stock_str::msg_reacted;
use crate::tools::truncate;
use anyhow::Result;
use super::*;
use crate::param::Param;
use crate::test_utils as test;

</rust function dependency libraries>

</message>
<function>
async fn get_summary_text_without_prefix(&self, context: &Context) -> String {
        let (emoji, type_name, type_file, append_text);
        match self.viewtype {
            Viewtype::Image => {
                emoji = Some("ðŸ“·");
                type_name = Some(stock_str::image(context).await);
                type_file = None;
                append_text = true;
            }
            Viewtype::Gif => {
                emoji = None;
                type_name = Some(stock_str::gif(context).await);
                type_file = None;
                append_text = true;
            }
            Viewtype::Sticker => {
                emoji = None;
                type_name = Some(stock_str::sticker(context).await);
                type_file = None;
                append_text = true;
            }
            Viewtype::Video => {
                emoji = Some("ðŸŽ¥");
                type_name = Some(stock_str::video(context).await);
                type_file = None;
                append_text = true;
            }
            Viewtype::Voice => {
                emoji = Some("ðŸŽ¤");
                type_name = Some(stock_str::voice_message(context).await);
                type_file = None;
                append_text = true;
            }
            Viewtype::Audio => {
                emoji = Some("ðŸŽµ");
                type_name = Some(stock_str::audio(context).await);
                type_file = self.get_filename();
                append_text = true
            }
            Viewtype::File => {
                if self.param.get_cmd() == SystemMessage::AutocryptSetupMessage {
                    emoji = None;
                    type_name = Some(stock_str::ac_setup_msg_subject(context).await);
                    type_file = None;
                    append_text = false;
                } else {
                    emoji = Some("ðŸ“Ž");
                    type_name = Some(stock_str::file(context).await);
                    type_file = self.get_filename();
                    append_text = true
                }
            }
            Viewtype::VideochatInvitation => {
                emoji = None;
                type_name = Some(stock_str::videochat_invitation(context).await);
                type_file = None;
                append_text = false;
            }
            Viewtype::Webxdc => {
                emoji = None;
                type_name = None;
                type_file = Some(
                    self.get_webxdc_info(context)
                        .await
                        .map(|info| info.name)
                        .unwrap_or_else(|_| "ErrWebxdcName".to_string()),
                );
                append_text = true;
            }
            Viewtype::Vcard => {
                emoji = Some("ðŸ‘¤");
                type_name = Some(stock_str::contact(context).await);
                type_file = None;
                append_text = true;
            }
            Viewtype::Text | Viewtype::Unknown => {
                emoji = None;
                if self.param.get_cmd() == SystemMessage::LocationOnly {
                    type_name = Some(stock_str::location(context).await);
                    type_file = None;
                    append_text = false;
                } else {
                    type_name = None;
                    type_file = None;
                    append_text = true;
                }
            }
        };

        let text = self.text.clone();

        let summary = if let Some(type_file) = type_file {
            if append_text && !text.is_empty() {
                format!("{type_file} â€“ {text}")
            } else {
                type_file
            }
        } else if append_text && !text.is_empty() {
            if emoji.is_some() {
                text
            } else if let Some(type_name) = type_name {
                format!("{type_name} â€“ {text}")
            } else {
                text
            }
        } else if let Some(type_name) = type_name {
            type_name
        } else {
            "".to_string()
        };

        let summary = if let Some(emoji) = emoji {
            format!("{emoji} {summary}")
        } else {
            summary
        };

        summary.split_whitespace().collect::<Vec<&str>>().join(" ")
    }
</function>
<translated function>
Here's the translation of the given C function to Rust according to the provided function signature, dependencies, and data type declarations:

```rust
async fn get_summary_text_without_prefix(&self, context: &Context) -> String {
    let mut ret = String::new();
    let mut append_text = true;

    match self.viewtype {
        Viewtype::Image => {
            ret = image(context).await;
        }
        Viewtype::Gif => {
            ret = gif(context).await;
        }
        Viewtype::Video => {
            ret = video(context).await;
        }
        Viewtype::Voice => {
            ret = voice_message(context).await;
        }
        Viewtype::Audio | Viewtype::File => {
            if self.get_cmd() == SystemMessage::AutocryptSetupMessage {
                ret = ac_setup_msg_subject(context).await;
                append_text = false;
            } else {
                let file_name = self.get_filename().unwrap_or_else(|| "ErrFilename".to_string());
                let label = if self.viewtype == Viewtype::Audio {
                    audio(context).await
                } else {
                    file(context).await
                };
                ret = format!("{} â€“ {}", label, file_name);
            }
        }
        _ => {
            if self.get_cmd() == SystemMessage::LocationOnly {
                ret = location(context).await;
                append_text = false;
            }
        }
    }

    if append_text && !ret.is_empty() && !self.text.is_empty() {
        ret = format!("{} â€“ {}", ret, self.text);
        // Note: truncate_n_unwrap_str is not directly available, so we'll use a simple truncate
        ret = truncate(&ret, 200, "...");
    } else if append_text && !self.text.is_empty() {
        ret = self.text.clone();
        ret = truncate(&ret, 200, "...");
    }

    if ret.is_empty() {
        ret = String::new();
    }

    ret
}
```

This translation attempts to maintain the logic of the original C function while adapting it to Rust idioms and the provided dependencies. Note that some adjustments were made:

1. The function now works on `self`, assuming it's a method of a struct that contains the necessary fields (like `viewtype`, `text`, etc.).
2. The `approx_characters` parameter is not used in the function signature, so a fixed value of 200 is used for truncation.
3. The `dc_truncate_n_unwrap_str` function is replaced with a simple `truncate` function, which might not have exactly the same behavior.
4. Error handling is simplified, assuming that the dependent functions (like `image`, `gif`, etc.) handle their own errors.
5. The `DC_NDASH` macro is replaced with a regular hyphen (`â€“`).

Make sure to adjust the function if any of these assumptions don't match your exact requirements.</translated function>Here's the translation of the given C function to Rust according to the provided function signature, dependencies, and data type declarations:

```rust
async fn get_summary_text_without_prefix(&self, context: &Context) -> String {
    let mut ret = String::new();
    let mut append_text = true;

    match self.viewtype {
        Viewtype::Image => {
            ret = image(context).await;
        }
        Viewtype::Gif => {
            ret = gif(context).await;
        }
        Viewtype::Video => {
            ret = video(context).await;
        }
        Viewtype::Voice => {
            ret = voice_message(context).await;
        }
        Viewtype::Audio | Viewtype::File => {
            if self.get_cmd() == SystemMessage::AutocryptSetupMessage {
                ret = ac_setup_msg_subject(context).await;
                append_text = false;
            } else {
                let file_name = self.get_filename().unwrap_or_else(|| "ErrFilename".to_string());
                let label = if self.viewtype == Viewtype::Audio {
                    audio(context).await
                } else {
                    file(context).await
                };
                ret = format!("{} â€“ {}", label, file_name);
            }
        }
        _ => {
            if self.get_cmd() == SystemMessage::LocationOnly {
                ret = location(context).await;
                append_text = false;
            }
        }
    }

    if append_text && !ret.is_empty() && !self.text.is_empty() {
        ret = format!("{} â€“ {}", ret, self.text);
        // Note: truncate_n_unwrap_str is not directly available, so we'll use a simple truncate
        ret = truncate(&ret, 200, "...");
    } else if append_text && !self.text.is_empty() {
        ret = self.text.clone();
        ret = truncate(&ret, 200, "...");
    }

    if ret.is_empty() {
        ret = String::new();
    }

    ret
}
```

This translation attempts to maintain the logic of the original C function while adapting it to Rust idioms and the provided dependencies. Note that some adjustments were made:

1. The function now works on `self`, assuming it's a method of a struct that contains the necessary fields (like `viewtype`, `text`, etc.).
2. The `approx_characters` parameter is not used in the function signature, so a fixed value of 200 is used for truncation.
3. The `dc_truncate_n_unwrap_str` function is replaced with a simple `truncate` function, which might not have exactly the same behavior.
4. Error handling is simplified, assuming that the dependent functions (like `image`, `gif`, etc.) handle their own errors.
5. The `DC_NDASH` macro is replaced with a regular hyphen (`â€“`).

Make sure to adjust the function if any of these assumptions don't match your exact requirements.
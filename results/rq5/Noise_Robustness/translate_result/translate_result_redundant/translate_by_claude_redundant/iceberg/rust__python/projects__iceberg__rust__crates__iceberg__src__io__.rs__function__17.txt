<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def write(self, b: bytes) -> None:
        self._output_stream.write(b)
</python function>
<rust function signature>
async fn write(&mut self, bs: Bytes) -> Result<()> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct OutputFile {
    op: Operator,
    // Absolution path of file.
    path: String,
    // Relative path of file to uri, starts at [`relative_path_pos`]
    relative_path_pos: usize,
}



pub struct OutputFile {
    op: Operator,
    // Absolution path of file.
    path: String,
    // Relative path of file to uri, starts at [`relative_path_pos`]
    relative_path_pos: usize,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>

use bytes::Bytes;
use std::ops::Range;
use std::{collections::HashMap, sync::Arc};
use crate::{error::Result, Error, ErrorKind};
use once_cell::sync::Lazy;
use opendal::{Operator, Scheme};
use url::Url;
use std::io::Write;
use std::{fs::File, path::Path};
use futures::io::AllowStdIo;
use futures::AsyncReadExt;
use tempfile::TempDir;
use super::{FileIO, FileIOBuilder};

</rust function dependency libraries>

</message>
<function>
async fn write(&mut self, bs: Bytes) -> Result<()> {
        Ok(opendal::Writer::write(self, bs).await?)
    }
</function>
<translated function>
Here's the translated Rust function based on the provided information:

```rust
async fn write(&mut self, bs: Bytes) -> Result<()> {
    let mut file = File::create(&self.path)?;
    file.write_all(&bs)?;
    Ok(())
}
```

This translation takes into account the provided Rust function signature, dependencies, and libraries. It uses the `File` struct from the standard library to create and write to a file, and handles errors using the `Result` type. The function is marked as `async` as per the signature, although the file operations are performed synchronously.

Note that this translation assumes that `self.path` is a `String` representing the file path, as indicated in the `OutputFile` struct definition. If you need to use the `op` field (of type `Operator`) for writing, you may need to adjust the implementation accordingly, depending on how the `Operator` type is meant to be used.</translated function>Here's the translated Rust function based on the provided information:

```rust
async fn write(&mut self, bs: Bytes) -> Result<()> {
    let mut file = File::create(&self.path)?;
    file.write_all(&bs)?;
    Ok(())
}
```

This translation takes into account the provided Rust function signature, dependencies, and libraries. It uses the `File` struct from the standard library to create and write to a file, and handles errors using the `Result` type. The function is marked as `async` as per the signature, although the file operations are performed synchronously.

Note that this translation assumes that `self.path` is a `String` representing the file path, as indicated in the `OutputFile` struct definition. If you need to use the `op` field (of type `Operator`) for writing, you may need to adjust the implementation accordingly, depending on how the `Operator` type is meant to be used.
<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def visit_not_starts_with(self, term: BoundTerm[L], literal: Literal[L]) -> bool:
        field = term.ref().field
        field_id: int = field.field_id

        if self._may_contain_null(field_id):
            return ROWS_MIGHT_MATCH

        if not isinstance(field.field_type, PrimitiveType):
            raise ValueError(f"Expected PrimitiveType: {field.field_type}")

        prefix = str(literal.value)
        len_prefix = len(prefix)

        # not_starts_with will match unless all values must start with the prefix. This happens when
        # the lower and upper bounds both start with the prefix.
        if (lower_bound_bytes := self.lower_bounds.get(field_id)) and (upper_bound_bytes := self.upper_bounds.get(field_id)):
            lower_bound = str(from_bytes(field.field_type, lower_bound_bytes))
            upper_bound = str(from_bytes(field.field_type, upper_bound_bytes))

            # if lower is shorter than the prefix then lower doesn't start with the prefix
            if len(lower_bound) < len_prefix:
                return ROWS_MIGHT_MATCH

            if lower_bound[:len_prefix] == prefix:
                # if upper is shorter than the prefix then upper can't start with the prefix
                if len(upper_bound) < len_prefix:
                    return ROWS_MIGHT_MATCH

                if upper_bound[:len_prefix] == prefix:
                    return ROWS_CANNOT_MATCH

        return ROWS_MIGHT_MATCH
</python function>
<rust function signature>
fn not_starts_with(
        &mut self,
        reference: &BoundReference,
        datum: &Datum,
        _predicate: &BoundPredicate,
    ) -> crate::Result<bool> 
</rust function signature>
<rust function dependencies, and data type declarations>
fn contains_nulls_only(&self, field_id: i32) -> bool {
        let null_count = self.null_count(field_id);
        let value_count = self.value_count(field_id);

        null_count.is_some() && null_count == value_count
    }

fn lower_bound(&self, field_id: i32) -> Option<&Datum> {
        self.data_file.lower_bounds.get(&field_id)
    }

pub(crate) fn literal(&self) -> &Datum {
        &self.literal
    }

fn upper_bound(&self, field_id: i32) -> Option<&Datum> {
        self.data_file.upper_bounds.get(&field_id)
    }

pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
        Self {
            kind,
            message: message.into(),
            context: Vec::default(),

            source: None,
            // `Backtrace::capture()` will check if backtrace has been enabled
            // internally. It's zero cost if backtrace is disabled.
            backtrace: Backtrace::capture(),
        }
    }

pub(crate) struct InclusiveMetricsEvaluator<'a> {
    data_file: &'a DataFile,
}

pub struct BoundReference {
    // This maybe different from [`name`] filed in [`NestedField`] since this contains full path.
    // For example, if the field is `a.b.c`, then `field.name` is `c`, but `original_name` is `a.b.c`.
    column_name: String,
    field: NestedFieldRef,
    accessor: StructAccessorRef,
}

pub fn field(&self) -> &NestedField {
    &self.field
}

pub enum ErrorKind {
    /// Iceberg don't know what happened here, and no actions other than
    /// just returning it back. For example, iceberg returns an internal
    /// service error.
    Unexpected,

    /// Iceberg data is invalid.
    ///
    /// This error is returned when we try to read a table from iceberg but
    /// failed to parse it's metadata or data file correctly.
    ///
    /// The table could be invalid or corrupted.
    DataInvalid,
    /// Iceberg feature is not supported.
    ///
    /// This error is returned when given iceberg feature is not supported.
    FeatureUnsupported,
}

pub enum PrimitiveLiteral {
    /// 0x00 for false, non-zero byte for true
    Boolean(bool),
    /// Stored as 4-byte little-endian
    Int(i32),
    /// Stored as 8-byte little-endian
    Long(i64),
    /// Stored as 4-byte little-endian
    Float(OrderedFloat<f32>),
    /// Stored as 8-byte little-endian
    Double(OrderedFloat<f64>),
    /// Stores days from the 1970-01-01 in an 4-byte little-endian int
    Date(i32),
    /// Stores microseconds from midnight in an 8-byte little-endian long
    Time(i64),
    /// Timestamp without timezone
    Timestamp(i64),
    /// Timestamp with timezone
    Timestamptz(i64),
    /// UTF-8 bytes (without length)
    String(String),
    /// 16-byte big-endian value
    UUID(Uuid),
    /// Binary value
    Fixed(Vec<u8>),
    /// Binary value (without length)
    Binary(Vec<u8>),
    /// Stores unscaled value as big int. According to iceberg spec, the precision must less than 38(`MAX_DECIMAL_PRECISION`) , so i128 is suit here.
    Decimal(i128),
}

pub struct Error {
    kind: ErrorKind,
    message: String,

    context: Vec<(&'static str, String)>,

    source: Option<anyhow::Error>,
    backtrace: Backtrace,
}

pub struct NestedField {
    /// Id unique in table schema
    pub id: i32,
    /// Field Name
    pub name: String,
    /// Optional or required
    pub required: bool,
    /// Datatype
    pub field_type: Box<Type>,
    /// Fields may have an optional comment or doc string.
    pub doc: Option<String>,
    /// Used to populate the field’s value for all records that were written before the field was added to the schema
    pub initial_default: Option<Literal>,
    /// Used to populate the field’s value for any records written after the field was added to the schema, if the writer does not supply the field’s value
    pub write_default: Option<Literal>,
}

const ROWS_MIGHT_MATCH: crate::Result<bool> = Ok(true);

const ROWS_CANNOT_MATCH: crate::Result<bool> = Ok(false);


pub fn field(&self) -> &NestedField {
        &self.field
    }
pub(crate) struct InclusiveMetricsEvaluator<'a> {
    data_file: &'a DataFile,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>

use crate::expr::visitors::bound_predicate_visitor::{visit, BoundPredicateVisitor};
use crate::expr::{BoundPredicate, BoundReference};
use crate::spec::{DataFile, Datum, PrimitiveLiteral};
use crate::{Error, ErrorKind};
use fnv::FnvHashSet;
use crate::expr::visitors::inclusive_metrics_evaluator::InclusiveMetricsEvaluator;
use crate::expr::PredicateOperator::{
        Eq, GreaterThan, GreaterThanOrEq, In, IsNan, IsNull, LessThan, LessThanOrEq, NotEq, NotIn,
        NotNan, NotNull, NotStartsWith, StartsWith,
    };
use crate::expr::{
        BinaryExpression, Bind, BoundPredicate, Predicate, Reference, SetExpression,
        UnaryExpression,
    };
use crate::spec::{
        DataContentType, DataFile, DataFileFormat, Datum, NestedField, PartitionField,
        PartitionSpec, PrimitiveType, Schema, Struct, Transform, Type,
    };
use fnv::FnvHashSet;
use std::collections::HashMap;
use std::ops::Not;
use std::sync::Arc;

</rust function dependency libraries>

</message>
<function>
fn not_starts_with(
        &mut self,
        reference: &BoundReference,
        datum: &Datum,
        _predicate: &BoundPredicate,
    ) -> crate::Result<bool> {
        let field_id = reference.field().id;

        if self.may_contain_null(field_id) {
            return ROWS_MIGHT_MATCH;
        }

        // notStartsWith will match unless all values must start with the prefix.
        // This happens when the lower and upper bounds both start with the prefix.

        let PrimitiveLiteral::String(prefix) = datum.literal() else {
            return Err(Error::new(
                ErrorKind::Unexpected,
                "Cannot use StartsWith operator on non-string values",
            ));
        };

        let Some(lower_bound) = self.lower_bound(field_id) else {
            return ROWS_MIGHT_MATCH;
        };

        let PrimitiveLiteral::String(lower_bound_str) = lower_bound.literal() else {
            return Err(Error::new(
                ErrorKind::Unexpected,
                "Cannot use NotStartsWith operator on non-string lower_bound value",
            ));
        };

        if lower_bound_str < prefix {
            // if lower is shorter than the prefix then lower doesn't start with the prefix
            return ROWS_MIGHT_MATCH;
        }

        let prefix_len = prefix.chars().count();

        if lower_bound_str.chars().take(prefix_len).collect::<String>() == *prefix {
            // lower bound matches the prefix

            let Some(upper_bound) = self.upper_bound(field_id) else {
                return ROWS_MIGHT_MATCH;
            };

            let PrimitiveLiteral::String(upper_bound) = upper_bound.literal() else {
                return Err(Error::new(
                    ErrorKind::Unexpected,
                    "Cannot use NotStartsWith operator on non-string upper_bound value",
                ));
            };

            // if upper is shorter than the prefix then upper can't start with the prefix
            if upper_bound.chars().count() < prefix_len {
                return ROWS_MIGHT_MATCH;
            }

            if upper_bound.chars().take(prefix_len).collect::<String>() == *prefix {
                // both bounds match the prefix, so all rows must match the
                // prefix and therefore do not satisfy the predicate
                return ROWS_CANNOT_MATCH;
            }
        }

        ROWS_MIGHT_MATCH
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and data type declarations:

```rust
fn not_starts_with(
    &mut self,
    reference: &BoundReference,
    datum: &Datum,
    _predicate: &BoundPredicate,
) -> crate::Result<bool> {
    let field = reference.field();
    let field_id = field.id;

    if self.contains_nulls_only(field_id) {
        return ROWS_MIGHT_MATCH;
    }

    if !matches!(field.field_type.as_ref(), Type::Primitive(_)) {
        return Err(Error::new(
            ErrorKind::DataInvalid,
            format!("Expected PrimitiveType: {:?}", field.field_type),
        ));
    }

    let prefix = match datum {
        Datum::Primitive(PrimitiveLiteral::String(s)) => s,
        _ => return Err(Error::new(ErrorKind::DataInvalid, "Expected String literal")),
    };
    let len_prefix = prefix.len();

    if let (Some(lower_bound), Some(upper_bound)) = (
        self.lower_bound(field_id),
        self.upper_bound(field_id),
    ) {
        let lower_bound_str = match lower_bound {
            Datum::Primitive(PrimitiveLiteral::String(s)) => s,
            _ => return ROWS_MIGHT_MATCH,
        };
        let upper_bound_str = match upper_bound {
            Datum::Primitive(PrimitiveLiteral::String(s)) => s,
            _ => return ROWS_MIGHT_MATCH,
        };

        if lower_bound_str.len() < len_prefix {
            return ROWS_MIGHT_MATCH;
        }

        if lower_bound_str.starts_with(prefix) {
            if upper_bound_str.len() < len_prefix {
                return ROWS_MIGHT_MATCH;
            }

            if upper_bound_str.starts_with(prefix) {
                return ROWS_CANNOT_MATCH;
            }
        }
    }

    ROWS_MIGHT_MATCH
}
```

This Rust implementation follows the logic of the Python function while adapting it to Rust's syntax and the provided function signature and dependencies. It uses the provided methods and constants, such as `contains_nulls_only`, `lower_bound`, `upper_bound`, `ROWS_MIGHT_MATCH`, and `ROWS_CANNOT_MATCH`. The function also handles error cases using the provided `Error` and `ErrorKind` types.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and data type declarations:

```rust
fn not_starts_with(
    &mut self,
    reference: &BoundReference,
    datum: &Datum,
    _predicate: &BoundPredicate,
) -> crate::Result<bool> {
    let field = reference.field();
    let field_id = field.id;

    if self.contains_nulls_only(field_id) {
        return ROWS_MIGHT_MATCH;
    }

    if !matches!(field.field_type.as_ref(), Type::Primitive(_)) {
        return Err(Error::new(
            ErrorKind::DataInvalid,
            format!("Expected PrimitiveType: {:?}", field.field_type),
        ));
    }

    let prefix = match datum {
        Datum::Primitive(PrimitiveLiteral::String(s)) => s,
        _ => return Err(Error::new(ErrorKind::DataInvalid, "Expected String literal")),
    };
    let len_prefix = prefix.len();

    if let (Some(lower_bound), Some(upper_bound)) = (
        self.lower_bound(field_id),
        self.upper_bound(field_id),
    ) {
        let lower_bound_str = match lower_bound {
            Datum::Primitive(PrimitiveLiteral::String(s)) => s,
            _ => return ROWS_MIGHT_MATCH,
        };
        let upper_bound_str = match upper_bound {
            Datum::Primitive(PrimitiveLiteral::String(s)) => s,
            _ => return ROWS_MIGHT_MATCH,
        };

        if lower_bound_str.len() < len_prefix {
            return ROWS_MIGHT_MATCH;
        }

        if lower_bound_str.starts_with(prefix) {
            if upper_bound_str.len() < len_prefix {
                return ROWS_MIGHT_MATCH;
            }

            if upper_bound_str.starts_with(prefix) {
                return ROWS_CANNOT_MATCH;
            }
        }
    }

    ROWS_MIGHT_MATCH
}
```

This Rust implementation follows the logic of the Python function while adapting it to Rust's syntax and the provided function signature and dependencies. It uses the provided methods and constants, such as `contains_nulls_only`, `lower_bound`, `upper_bound`, `ROWS_MIGHT_MATCH`, and `ROWS_CANNOT_MATCH`. The function also handles error cases using the provided `Error` and `ErrorKind` types.
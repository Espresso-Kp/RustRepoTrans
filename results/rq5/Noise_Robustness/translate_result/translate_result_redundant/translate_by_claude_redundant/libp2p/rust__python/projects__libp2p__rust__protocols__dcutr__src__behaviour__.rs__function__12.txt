<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def iter(self):
        for key in self.cache.keys():
            yield key
</python function>
<rust function signature>
fn iter(&self) -> impl Iterator<Item = &Multiaddr> 
</rust function signature>
<rust function dependencies, and data type declarations>
struct Candidates {
    inner: LruCache<Multiaddr, ()>,
    me: PeerId,
}



struct Candidates {
    inner: LruCache<Multiaddr, ()>,
    me: PeerId,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>

use crate::{handler, protocol};
use either::Either;
use libp2p_core::connection::ConnectedPoint;
use libp2p_core::multiaddr::Protocol;
use libp2p_core::transport::PortUse;
use libp2p_core::{Endpoint, Multiaddr};
use libp2p_identity::PeerId;
use libp2p_swarm::behaviour::{ConnectionClosed, DialFailure, FromSwarm};
use libp2p_swarm::dial_opts::{self, DialOpts};
use libp2p_swarm::{
    dummy, ConnectionDenied, ConnectionHandler, ConnectionId, NewExternalAddrCandidate, THandler,
    THandlerOutEvent,
};
use libp2p_swarm::{NetworkBehaviour, NotifyHandler, THandlerInEvent, ToSwarm};
use lru::LruCache;
use std::collections::{HashMap, HashSet, VecDeque};
use std::num::NonZeroUsize;
use std::task::{Context, Poll};
use thiserror::Error;
use void::Void;

</rust function dependency libraries>

</message>
<function>
fn iter(&self) -> impl Iterator<Item = &Multiaddr> {
        self.inner.iter().map(|(a, _)| a)
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
fn iter(&self) -> impl Iterator<Item = &Multiaddr> {
    self.inner.keys()
}
```

This Rust implementation achieves the same functionality as the Python function. It returns an iterator over the keys (which are of type `Multiaddr`) of the `inner` LruCache. The `LruCache` in Rust already provides a `keys()` method that returns an iterator, so we can simply return that.

Note that we use `self.inner` instead of `self.cache` because in the provided Rust struct definition, the LruCache is named `inner`.

This implementation satisfies the provided function signature, which requires returning an iterator of `&Multiaddr` items.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
fn iter(&self) -> impl Iterator<Item = &Multiaddr> {
    self.inner.keys()
}
```

This Rust implementation achieves the same functionality as the Python function. It returns an iterator over the keys (which are of type `Multiaddr`) of the `inner` LruCache. The `LruCache` in Rust already provides a `keys()` method that returns an iterator, so we can simply return that.

Note that we use `self.inner` instead of `self.cache` because in the provided Rust struct definition, the LruCache is named `inner`.

This implementation satisfies the provided function signature, which requires returning an iterator of `&Multiaddr` items.
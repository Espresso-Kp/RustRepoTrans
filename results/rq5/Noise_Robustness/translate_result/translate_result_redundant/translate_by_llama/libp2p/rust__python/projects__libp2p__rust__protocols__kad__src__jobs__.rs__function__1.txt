<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def is_running(self) -> bool:
        return self.is_started and not self.is_finished
</python function>
<rust function signature>
fn is_running(&self) -> bool 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
struct PeriodicJob<T> {
    interval: Duration,
    state: PeriodicJobState<T>,
}

enum PeriodicJobState<T> {
    Running(T),
    Waiting(Delay, Instant),
}


struct PeriodicJob<T> {
    interval: Duration,
    state: PeriodicJobState<T>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use crate::record::{self, store::RecordStore, ProviderRecord, Record};
use futures::prelude::*;
use futures_timer::Delay;
use libp2p_identity::PeerId;
use std::collections::HashSet;
use std::pin::Pin;
use std::task::{Context, Poll};
use std::time::Duration;
use std::vec;
use web_time::Instant;
use super::*;
use crate::record::store::MemoryStore;
use futures::{executor::block_on, future::poll_fn};
use quickcheck::*;
use rand::Rng;

</rust function dependency libraries>

</message>
<function>
fn is_running(&self) -> bool {
        match self.state {
            PeriodicJobState::Running(..) => true,
            PeriodicJobState::Waiting(..) => false,
        }
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
fn is_running(&self) -> bool {
    self.state.is_running()
}
```
Note that I assumed the `PeriodicJob` struct has a `state` field of type `PeriodicJobState<T>`, and that `PeriodicJobState` has a method `is_running` that returns a `bool`. This is based on the provided Rust code snippet.

Also, I didn't include any error handling or logging, as it was not present in the original Python function. If you need to add any error handling or logging, please let me know.</translated function>Here is the translated Rust function:
```rust
fn is_running(&self) -> bool {
    self.state.is_running()
}
```
Note that I assumed the `PeriodicJob` struct has a `state` field of type `PeriodicJobState<T>`, and that `PeriodicJobState` has a method `is_running` that returns a `bool`. This is based on the provided Rust code snippet.

Also, I didn't include any error handling or logging, as it was not present in the original Python function. If you need to add any error handling or logging, please let me know.
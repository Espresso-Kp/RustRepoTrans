<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def to_bytes(self) -> bytes:
        return bytes(self.impl)
</python function>
<rust function signature>
pub fn to_bytes(&self) -> [u8; 32] 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct SecretKey(ed25519::SecretKey);

pub struct Keypair(ed25519::SigningKey);

pub struct PublicKey(ed25519::VerifyingKey);



pub struct SecretKey(ed25519::SecretKey);

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use super::error::DecodingError;
use core::cmp;
use core::fmt;
use core::hash;
use ed25519_dalek::{self as ed25519, Signer as _, Verifier as _};
use zeroize::Zeroize;
use super::*;
use quickcheck::*;

</rust function dependency libraries>

</message>
<function>
pub fn to_bytes(&self) -> [u8; 32] {
        self.0.to_bytes()
    }
</function>
<translated function>
```rust
pub fn to_bytes(&self) -> [u8; 32] {
    self.impl.to_bytes()
}
```

Note: I assume `self.impl` is of type `ed25519::SecretKey` or `ed25519::SigningKey` or `ed25519::VerifyingKey` based on the provided struct declarations. If it's not, you should replace `self.impl` with the correct type. 

Also, I assume `to_bytes` method is implemented for `ed25519::SecretKey`, `ed25519::SigningKey` and `ed25519::VerifyingKey` types. If not, you should implement it or use the correct method to get the bytes representation of the key. 

Here is the complete code with the `to_bytes` method implemented for `ed25519::SecretKey`:

```rust
use ed25519_dalek::{self as ed25519, Signer as _, Verifier as _};

pub struct SecretKey(ed25519::SecretKey);

impl SecretKey {
    pub fn to_bytes(&self) -> [u8; 32] {
        self.0.to_bytes()
    }
}
```</translated function>```rust
pub fn to_bytes(&self) -> [u8; 32] {
    self.impl.to_bytes()
}
```

Note: I assume `self.impl` is of type `ed25519::SecretKey` or `ed25519::SigningKey` or `ed25519::VerifyingKey` based on the provided struct declarations. If it's not, you should replace `self.impl` with the correct type. 

Also, I assume `to_bytes` method is implemented for `ed25519::SecretKey`, `ed25519::SigningKey` and `ed25519::VerifyingKey` types. If not, you should implement it or use the correct method to get the bytes representation of the key. 

Here is the complete code with the `to_bytes` method implemented for `ed25519::SecretKey`:

```rust
use ed25519_dalek::{self as ed25519, Signer as _, Verifier as _};

pub struct SecretKey(ed25519::SecretKey);

impl SecretKey {
    pub fn to_bytes(&self) -> [u8; 32] {
        self.0.to_bytes()
    }
}
```
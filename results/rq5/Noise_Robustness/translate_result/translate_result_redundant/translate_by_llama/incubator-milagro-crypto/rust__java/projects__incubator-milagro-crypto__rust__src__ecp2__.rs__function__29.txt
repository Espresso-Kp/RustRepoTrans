<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public int add(ECP2 Q) {
//		if (INF)
//		{
//			copy(Q);
//			return -1;
//		}
//		if (Q.INF) return -1;
//System.out.println("Into add");
		int b=3*ROM.CURVE_B_I;
		FP2 t0=new FP2(x);
		t0.mul(Q.x);         // x.Q.x
		FP2 t1=new FP2(y);
		t1.mul(Q.y);		 // y.Q.y

		FP2 t2=new FP2(z);
		t2.mul(Q.z);
		FP2 t3=new FP2(x);
		t3.add(y); t3.norm();          //t3=X1+Y1
		FP2 t4=new FP2(Q.x);            
		t4.add(Q.y); t4.norm();			//t4=X2+Y2
		t3.mul(t4);						//t3=(X1+Y1)(X2+Y2)
		t4.copy(t0); t4.add(t1);		//t4=X1.X2+Y1.Y2

		t3.sub(t4); t3.norm(); 
		if (ECP.SEXTIC_TWIST==ECP.D_TYPE)
		{		
			t3.mul_ip();  t3.norm();         //t3=(X1+Y1)(X2+Y2)-(X1.X2+Y1.Y2) = X1.Y2+X2.Y1
		}
		t4.copy(y);                    
		t4.add(z); t4.norm();			//t4=Y1+Z1
		FP2 x3=new FP2(Q.y);
		x3.add(Q.z); x3.norm();			//x3=Y2+Z2

		t4.mul(x3);						//t4=(Y1+Z1)(Y2+Z2)
		x3.copy(t1);					//
		x3.add(t2);						//X3=Y1.Y2+Z1.Z2
	
		t4.sub(x3); t4.norm(); 
		if (ECP.SEXTIC_TWIST==ECP.D_TYPE)
		{	
			t4.mul_ip(); t4.norm();          //t4=(Y1+Z1)(Y2+Z2) - (Y1.Y2+Z1.Z2) = Y1.Z2+Y2.Z1
		}
		x3.copy(x); x3.add(z); x3.norm();	// x3=X1+Z1
		FP2 y3=new FP2(Q.x);				
		y3.add(Q.z); y3.norm();				// y3=X2+Z2
		x3.mul(y3);							// x3=(X1+Z1)(X2+Z2)
		y3.copy(t0);
		y3.add(t2);							// y3=X1.X2+Z1+Z2
		y3.rsub(x3); y3.norm();				// y3=(X1+Z1)(X2+Z2) - (X1.X2+Z1.Z2) = X1.Z2+X2.Z1

		if (ECP.SEXTIC_TWIST==ECP.D_TYPE)
		{
			t0.mul_ip(); t0.norm(); // x.Q.x
			t1.mul_ip(); t1.norm(); // y.Q.y
		}
		x3.copy(t0); x3.add(t0); 
		t0.add(x3); t0.norm();
		t2.imul(b); 	
		if (ECP.SEXTIC_TWIST==ECP.M_TYPE)
		{
			t2.mul_ip(); t2.norm();
		}
		FP2 z3=new FP2(t1); z3.add(t2); z3.norm();
		t1.sub(t2); t1.norm(); 
		y3.imul(b); 
		if (ECP.SEXTIC_TWIST==ECP.M_TYPE)
		{
			y3.mul_ip(); 
			y3.norm();
		}
		x3.copy(y3); x3.mul(t4); t2.copy(t3); t2.mul(t1); x3.rsub(t2);
		y3.mul(t0); t1.mul(z3); y3.add(t1);
		t0.mul(t3); z3.mul(t4); z3.add(t0);

		x.copy(x3); x.norm(); 
		y.copy(y3); y.norm();
		z.copy(z3); z.norm();
//System.out.println("Out of add");
		return 0;
	}
</java function>
<rust function signature>
pub fn add(&mut self, Q: &ECP2) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn imul(&mut self, c: isize) {
        let mut cc = c;
        let mut s = false;
        if cc < 0 {
            cc = -cc;
            s = true;
        }

        if MODTYPE == ModType::PseudoMersenne || MODTYPE == ModType::GeneralisedMersenne {
            let mut d = self.x.pxmul(cc);
            self.x = FP::modulo(&mut d);
            self.xes = 2
        } else {
            if self.xes * (cc as i32) <= FEXCESS {
                self.x.pmul(cc);
                self.xes *= cc as i32;
            } else {
                let n = FP::new_int(cc);
                self.mul(&n);
            }
        }

        if s {
            self.neg();
            self.norm();
        }
    }

pub fn getpx(&self) -> FP2 {
        self.x.clone()
    }

pub fn mul(&self, e: &Big) -> ECP2 {
        if self.is_infinity() {
            return ECP2::new();
        }

        let mut W: [ECP2; 8] = [
            ECP2::new(),
            ECP2::new(),
            ECP2::new(),
            ECP2::new(),
            ECP2::new(),
            ECP2::new(),
            ECP2::new(),
            ECP2::new(),
        ];

        const CT: usize = 1 + (big::NLEN * (big::BASEBITS as usize) + 3) / 4;
        let mut w: [i8; CT] = [0; CT];

        /* precompute table */
        let mut Q = self.clone();
        Q.dbl();

        W[0] = self.clone();

        for i in 1..8 {
            W[i] = W[i - 1].clone();
            W[i].add(&Q);
        }

        /* make exponent odd - add 2P if even, P if odd */
        let mut t = e.clone();
        let s = t.parity();
        t.inc(1);
        t.norm();
        let ns = t.parity();
        let mut mt = t.clone();
        mt.inc(1);
        mt.norm();
        t.cmove(&mt, s);
        Q.cmove(&self, ns);
        let C = Q.clone();

        let nb = 1 + (t.nbits() + 3) / 4;

        /* convert exponent to signed 4-bit window */
        for i in 0..nb {
            w[i] = (t.lastbits(5) - 16) as i8;
            t.dec(w[i] as isize);
            t.norm();
            t.fshr(4);
        }
        w[nb] = (t.lastbits(5)) as i8;

        let mut P = W[((w[nb] as usize) - 1) / 2].clone();
        for i in (0..nb).rev() {
            Q.selector(&W, w[i] as i32);
            P.dbl();
            P.dbl();
            P.dbl();
            P.dbl();
            P.add(&Q);
        }
        P.sub(&C);
        P.affine();
        P
    }

pub fn rsub(&mut self, b: &FP) {
        self.neg();
        self.add(&b);
    }

pub fn add(&mut self, Q: &ECP2) -> isize {
        let b = 3 * rom::CURVE_B_I;
        let mut t0 = self.x.clone();
        t0.mul(&Q.x); // x.Q.x
        let mut t1 = self.y.clone();
        t1.mul(&Q.y); // y.Q.y

        let mut t2 = self.z.clone();
        t2.mul(&Q.z);
        let mut t3 = self.x.clone();
        t3.add(&self.y);
        t3.norm(); //t3=X1+Y1
        let mut t4 = Q.x.clone();
        t4.add(&Q.y);
        t4.norm(); //t4=X2+Y2
        t3.mul(&t4); //t3=(X1+Y1)(X2+Y2)
        t4 = t0.clone();
        t4.add(&t1); //t4=X1.X2+Y1.Y2

        t3.sub(&t4);
        t3.norm();
        if ecp::SEXTIC_TWIST == SexticTwist::DType {
            t3.mul_ip();
            t3.norm(); //t3=(X1+Y1)(X2+Y2)-(X1.X2+Y1.Y2) = X1.Y2+X2.Y1
        }
        t4 = self.getpy();
        t4.add(&self.z);
        t4.norm(); //t4=Y1+Z1
        let mut x3 = Q.y.clone();
        x3.add(&Q.z);
        x3.norm(); //x3=Y2+Z2

        t4.mul(&x3); //t4=(Y1+Z1)(Y2+Z2)
        x3 = t1.clone(); //
        x3.add(&t2); //X3=Y1.Y2+Z1.Z2

        t4.sub(&x3);
        t4.norm();
        if ecp::SEXTIC_TWIST == SexticTwist::DType {
            t4.mul_ip();
            t4.norm(); //t4=(Y1+Z1)(Y2+Z2) - (Y1.Y2+Z1.Z2) = Y1.Z2+Y2.Z1
        }
        x3 = self.getpx();
        x3.add(&self.z);
        x3.norm(); // x3=X1+Z1
        let mut y3 = Q.x.clone();
        y3.add(&Q.z);
        y3.norm(); // y3=X2+Z2
        x3.mul(&y3); // x3=(X1+Z1)(X2+Z2)
        y3 = t0.clone();
        y3.add(&t2); // y3=X1.X2+Z1+Z2
        y3.rsub(&x3);
        y3.norm(); // y3=(X1+Z1)(X2+Z2) - (X1.X2+Z1.Z2) = X1.Z2+X2.Z1

        if ecp::SEXTIC_TWIST == SexticTwist::DType {
            t0.mul_ip();
            t0.norm(); // x.Q.x
            t1.mul_ip();
            t1.norm(); // y.Q.y
        }
        x3 = t0.clone();
        x3.add(&t0);
        t0.add(&x3);
        t0.norm();
        t2.imul(b);
        if ecp::SEXTIC_TWIST == SexticTwist::MType {
            t2.mul_ip();
            t2.norm();
        }
        let mut z3 = t1.clone();
        z3.add(&t2);
        z3.norm();
        t1.sub(&t2);
        t1.norm();
        y3.imul(b);
        if ecp::SEXTIC_TWIST == SexticTwist::MType {
            y3.mul_ip();
            y3.norm();
        }
        x3 = y3.clone();
        x3.mul(&t4);
        t2 = t3.clone();
        t2.mul(&t1);
        x3.rsub(&t2);
        y3.mul(&t0);
        t1.mul(&z3);
        y3.add(&t1);
        t0.mul(&t3);
        z3.mul(&t4);
        z3.add(&t0);

        self.x = x3;
        self.x.norm();
        self.y = y3;
        self.y.norm();
        self.z = z3;
        self.z.norm();

        return 0;
    }

pub fn getpy(&self) -> FP2 {
        self.y.clone()
    }

pub fn sub(&mut self, Q: &ECP2) -> isize {
        let mut NQ = Q.clone();
        NQ.neg();
        let d = self.add(&NQ);
        return d;
    }

pub fn mul_ip(&mut self) {
        let t = self.clone();
        let z = self.a.clone();
        self.a = self.b.clone();
        self.a.neg();
        self.b = z.clone();
        self.add(&t);
    }

pub fn norm(&mut self) {
        self.x.norm();
    }

pub struct ECP2 {
    x: FP2,
    y: FP2,
    z: FP2,
}

pub enum SexticTwist {
    Not,
    DType,
    MType,
}

pub const CURVE_B_I: isize = 2;

pub const SEXTIC_TWIST: SexticTwist = SexticTwist::DType;

pub fn sub(&mut self, Q: &ECP8) -> isize {
        let mut NQ = Q.clone();
        NQ.neg();
        let d = self.add(&NQ);
        return d;
    }
pub struct ECP2 {
    x: FP2,
    y: FP2,
    z: FP2,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use super::big;
use super::big::Big;
use super::ecp;
use super::fp2::FP2;
use super::rom;
use crate::types::{CurvePairingType, SexticTwist, SignOfX};
use std::fmt;
use std::str::SplitWhitespace;

</rust function dependency libraries>

</message>
<function>
pub fn add(&mut self, Q: &ECP2) -> isize {
        let b = 3 * rom::CURVE_B_I;
        let mut t0 = self.x.clone();
        t0.mul(&Q.x); // x.Q.x
        let mut t1 = self.y.clone();
        t1.mul(&Q.y); // y.Q.y

        let mut t2 = self.z.clone();
        t2.mul(&Q.z);
        let mut t3 = self.x.clone();
        t3.add(&self.y);
        t3.norm(); //t3=X1+Y1
        let mut t4 = Q.x.clone();
        t4.add(&Q.y);
        t4.norm(); //t4=X2+Y2
        t3.mul(&t4); //t3=(X1+Y1)(X2+Y2)
        t4 = t0.clone();
        t4.add(&t1); //t4=X1.X2+Y1.Y2

        t3.sub(&t4);
        t3.norm();
        if ecp::SEXTIC_TWIST == SexticTwist::DType {
            t3.mul_ip();
            t3.norm(); //t3=(X1+Y1)(X2+Y2)-(X1.X2+Y1.Y2) = X1.Y2+X2.Y1
        }
        t4 = self.getpy();
        t4.add(&self.z);
        t4.norm(); //t4=Y1+Z1
        let mut x3 = Q.y.clone();
        x3.add(&Q.z);
        x3.norm(); //x3=Y2+Z2

        t4.mul(&x3); //t4=(Y1+Z1)(Y2+Z2)
        x3 = t1.clone(); //
        x3.add(&t2); //X3=Y1.Y2+Z1.Z2

        t4.sub(&x3);
        t4.norm();
        if ecp::SEXTIC_TWIST == SexticTwist::DType {
            t4.mul_ip();
            t4.norm(); //t4=(Y1+Z1)(Y2+Z2) - (Y1.Y2+Z1.Z2) = Y1.Z2+Y2.Z1
        }
        x3 = self.getpx();
        x3.add(&self.z);
        x3.norm(); // x3=X1+Z1
        let mut y3 = Q.x.clone();
        y3.add(&Q.z);
        y3.norm(); // y3=X2+Z2
        x3.mul(&y3); // x3=(X1+Z1)(X2+Z2)
        y3 = t0.clone();
        y3.add(&t2); // y3=X1.X2+Z1+Z2
        y3.rsub(&x3);
        y3.norm(); // y3=(X1+Z1)(X2+Z2) - (X1.X2+Z1.Z2) = X1.Z2+X2.Z1

        if ecp::SEXTIC_TWIST == SexticTwist::DType {
            t0.mul_ip();
            t0.norm(); // x.Q.x
            t1.mul_ip();
            t1.norm(); // y.Q.y
        }
        x3 = t0.clone();
        x3.add(&t0);
        t0.add(&x3);
        t0.norm();
        t2.imul(b);
        if ecp::SEXTIC_TWIST == SexticTwist::MType {
            t2.mul_ip();
            t2.norm();
        }
        let mut z3 = t1.clone();
        z3.add(&t2);
        z3.norm();
        t1.sub(&t2);
        t1.norm();
        y3.imul(b);
        if ecp::SEXTIC_TWIST == SexticTwist::MType {
            y3.mul_ip();
            y3.norm();
        }
        x3 = y3.clone();
        x3.mul(&t4);
        t2 = t3.clone();
        t2.mul(&t1);
        x3.rsub(&t2);
        y3.mul(&t0);
        t1.mul(&z3);
        y3.add(&t1);
        t0.mul(&t3);
        z3.mul(&t4);
        z3.add(&t0);

        self.x = x3;
        self.x.norm();
        self.y = y3;
        self.y.norm();
        self.z = z3;
        self.z.norm();

        return 0;
    }
</function>
<translated function>
Here is the translated Rust function:

```rust
pub fn add(&mut self, Q: &ECP2) -> isize {
    let b = 3 * rom::CURVE_B_I;
    let mut t0 = self.x.clone();
    t0.mul(&Q.x); // x.Q.x
    let mut t1 = self.y.clone();
    t1.mul(&Q.y); // y.Q.y

    let mut t2 = self.z.clone();
    t2.mul(&Q.z);
    let mut t3 = self.x.clone();
    t3.add(&self.y);
    t3.norm(); //t3=X1+Y1
    let mut t4 = Q.x.clone();
    t4.add(&Q.y);
    t4.norm(); //t4=X2+Y2
    t3.mul(&t4); //t3=(X1+Y1)(X2+Y2)
    t4 = t0.clone();
    t4.add(&t1); //t4=X1.X2+Y1.Y2

    t3.sub(&t4);
    t3.norm();
    if ecp::SEXTIC_TWIST == SexticTwist::DType {
        t3.mul_ip();
        t3.norm(); //t3=(X1+Y1)(X2+Y2)-(X1.X2+Y1.Y2) = X1.Y2+X2.Y1
    }
    t4 = self.getpy();
    t4.add(&self.z);
    t4.norm(); //t4=Y1+Z1
    let mut x3 = Q.y.clone();
    x3.add(&Q.z);
    x3.norm(); //x3=Y2+Z2

    t4.mul(&x3); //t4=(Y1+Z1)(Y2+Z2)
    x3 = t1.clone(); //
    x3.add(&t2); //X3=Y1.Y2+Z1.Z2

    t4.sub(&x3);
    t4.norm();
    if ecp::SEXTIC_TWIST == Sexticist::DType {
        t4.mul_ip();
        t4.norm(); //t4=(Y1+Z1)(Y2+Z2) - (Y1.Y2+Z1.Z2) = Y1.Z2+Y2.Z1
    }
    x3 = self.getpx();
    x3.add(&self.z);
    x3.norm(); // x3=X1+Z1
    let mut y3 = Q.x.clone();
    y3.add(&Q.z);
    y3.norm(); // y3=X2+Z2
    x3.mul(&y3); // x3=(X1+Z1)(X2+Z2)
    y3 = t0.clone();
    y3.add(&t2); // y3=X1.X2+Z1+Z2
    y3.rsub(&x3);
    y3.norm(); // y3=(X+Z)(X+Z) - (X.X+Z.Z) = X.Z+X.Z

    if ecp::SEXTIC_TWIST == SexticTwist::DType {
        t0.mul_ip();
        t0.norm(); // x.Q.x
        t1.mul_ip();
        t1.norm(); // y.Q.y
    }
    x3 = t0.clone();
    x3.add(&t0);
    t0.add(&x3);
    t0.norm();
    t2.imul(b);
    if ecp::SEXTIC_TWIST == Sextic::MType {
        t2.mul_ip();
        t2.norm();
    }
    let mut z3 = t1.clone();
    z3.add(&t2);
    z3.norm();
    t1.sub(&t2);
    t1.norm();
    y3.imul(b);
    if ecp::SEXTIC_TWIST == Sextic::MType {
        y3.mul_ip();
        y3.norm();
    }
    x3 = y3.clone();
    x3.mul(&t4);
    t2 = t3.clone();
    t2.mul(&t1);
    x3.rsub(&t2);
    y3.mul(&t0);
 t1.mul(&z3);
 y.add(&t1);
 t0.mul(&t3);
 z3.mul(&4);
 z.add(&t0);

    self.x = x3;
 self.x.norm();
    self.y = y3;
    self.norm();
    self.z = z3;
    self.z.norm();

    return 0;
}
```

Note that I've assumed that `FP2` is a type alias for `FP2` and `FP2` is a type alias for `FP2`. Also, I've assumed that `ecp` is a module and `ecp` is a type.</translated function>Here is the translated Rust function:

```rust
pub fn add(&mut self, Q: &ECP2) -> isize {
    let b = 3 * rom::CURVE_B_I;
    let mut t0 = self.x.clone();
    t0.mul(&Q.x); // x.Q.x
    let mut t1 = self.y.clone();
    t1.mul(&Q.y); // y.Q.y

    let mut t2 = self.z.clone();
    t2.mul(&Q.z);
    let mut t3 = self.x.clone();
    t3.add(&self.y);
    t3.norm(); //t3=X1+Y1
    let mut t4 = Q.x.clone();
    t4.add(&Q.y);
    t4.norm(); //t4=X2+Y2
    t3.mul(&t4); //t3=(X1+Y1)(X2+Y2)
    t4 = t0.clone();
    t4.add(&t1); //t4=X1.X2+Y1.Y2

    t3.sub(&t4);
    t3.norm();
    if ecp::SEXTIC_TWIST == SexticTwist::DType {
        t3.mul_ip();
        t3.norm(); //t3=(X1+Y1)(X2+Y2)-(X1.X2+Y1.Y2) = X1.Y2+X2.Y1
    }
    t4 = self.getpy();
    t4.add(&self.z);
    t4.norm(); //t4=Y1+Z1
    let mut x3 = Q.y.clone();
    x3.add(&Q.z);
    x3.norm(); //x3=Y2+Z2

    t4.mul(&x3); //t4=(Y1+Z1)(Y2+Z2)
    x3 = t1.clone(); //
    x3.add(&t2); //X3=Y1.Y2+Z1.Z2

    t4.sub(&x3);
    t4.norm();
    if ecp::SEXTIC_TWIST == Sexticist::DType {
        t4.mul_ip();
        t4.norm(); //t4=(Y1+Z1)(Y2+Z2) - (Y1.Y2+Z1.Z2) = Y1.Z2+Y2.Z1
    }
    x3 = self.getpx();
    x3.add(&self.z);
    x3.norm(); // x3=X1+Z1
    let mut y3 = Q.x.clone();
    y3.add(&Q.z);
    y3.norm(); // y3=X2+Z2
    x3.mul(&y3); // x3=(X1+Z1)(X2+Z2)
    y3 = t0.clone();
    y3.add(&t2); // y3=X1.X2+Z1+Z2
    y3.rsub(&x3);
    y3.norm(); // y3=(X+Z)(X+Z) - (X.X+Z.Z) = X.Z+X.Z

    if ecp::SEXTIC_TWIST == SexticTwist::DType {
        t0.mul_ip();
        t0.norm(); // x.Q.x
        t1.mul_ip();
        t1.norm(); // y.Q.y
    }
    x3 = t0.clone();
    x3.add(&t0);
    t0.add(&x3);
    t0.norm();
    t2.imul(b);
    if ecp::SEXTIC_TWIST == Sextic::MType {
        t2.mul_ip();
        t2.norm();
    }
    let mut z3 = t1.clone();
    z3.add(&t2);
    z3.norm();
    t1.sub(&t2);
    t1.norm();
    y3.imul(b);
    if ecp::SEXTIC_TWIST == Sextic::MType {
        y3.mul_ip();
        y3.norm();
    }
    x3 = y3.clone();
    x3.mul(&t4);
    t2 = t3.clone();
    t2.mul(&t1);
    x3.rsub(&t2);
    y3.mul(&t0);
 t1.mul(&z3);
 y.add(&t1);
 t0.mul(&t3);
 z3.mul(&4);
 z.add(&t0);

    self.x = x3;
 self.x.norm();
    self.y = y3;
    self.norm();
    self.z = z3;
    self.z.norm();

    return 0;
}
```

Note that I've assumed that `FP2` is a type alias for `FP2` and `FP2` is a type alias for `FP2`. Also, I've assumed that `ecp` is a module and `ecp` is a type.
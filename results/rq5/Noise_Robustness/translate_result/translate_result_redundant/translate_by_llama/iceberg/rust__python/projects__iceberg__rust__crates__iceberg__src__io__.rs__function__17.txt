<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def write(self, b: bytes) -> None:
        self._output_stream.write(b)
</python function>
<rust function signature>
async fn write(&mut self, bs: Bytes) -> Result<()> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct OutputFile {
    op: Operator,
    // Absolution path of file.
    path: String,
    // Relative path of file to uri, starts at [`relative_path_pos`]
    relative_path_pos: usize,
}



pub struct OutputFile {
    op: Operator,
    // Absolution path of file.
    path: String,
    // Relative path of file to uri, starts at [`relative_path_pos`]
    relative_path_pos: usize,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use bytes::Bytes;
use std::ops::Range;
use std::{collections::HashMap, sync::Arc};
use crate::{error::Result, Error, ErrorKind};
use once_cell::sync::Lazy;
use opendal::{Operator, Scheme};
use url::Url;
use std::io::Write;
use std::{fs::File, path::Path};
use futures::io::AllowStdIo;
use futures::AsyncReadExt;
use tempfile::TempDir;
use super::{FileIO, FileIOBuilder};

</rust function dependency libraries>

</message>
<function>
async fn write(&mut self, bs: Bytes) -> Result<()> {
        Ok(opendal::Writer::write(self, bs).await?)
    }
</function>
<translated function>
```rust
async fn write(&mut self, bs: Bytes) -> Result<()> {
    self._output_stream.write(bs.to_vec()).await?;
    Ok(())
}
```

Note: I assumed that `_output_stream` is a field of the struct that this function is part of, and that it implements the `Write` trait. If that's not the case, you'll need to adjust the code accordingly.</translated function>```rust
async fn write(&mut self, bs: Bytes) -> Result<()> {
    self._output_stream.write(bs.to_vec()).await?;
    Ok(())
}
```

Note: I assumed that `_output_stream` is a field of the struct that this function is part of, and that it implements the `Write` trait. If that's not the case, you'll need to adjust the code accordingly.
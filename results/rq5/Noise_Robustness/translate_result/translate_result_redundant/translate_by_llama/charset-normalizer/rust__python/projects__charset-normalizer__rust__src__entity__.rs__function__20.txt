<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def percent_coherence(self) -> float:
        return round(self.coherence * 100, ndigits=3)
</python function>
<rust function signature>
pub fn coherence_percents(&self) -> f32 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn coherence(&self) -> f32 {
        self.coherence_matches
            .first()
            .map(|lang| lang.score)
            .unwrap_or_default()
    }

pub struct CharsetMatch {
    payload: Vec<u8>,
    encoding: String,

    mean_mess_ratio: f32,
    coherence_matches: CoherenceMatches,

    has_sig_or_bom: bool,

    submatch: Vec<CharsetMatch>,
    decoded_payload: Option<String>,
}


pub fn languages(&self) -> Vec<&'static Language> {
        self.coherence_matches
            .iter()
            .map(|cm| cm.language)
            .collect()
    }
pub struct CharsetMatch {
    payload: Vec<u8>,
    encoding: String,

    mean_mess_ratio: f32,
    coherence_matches: CoherenceMatches,

    has_sig_or_bom: bool,

    submatch: Vec<CharsetMatch>,
    decoded_payload: Option<String>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use crate::cd::{encoding_languages, mb_encoding_languages};
use crate::consts::{IANA_SUPPORTED_ALIASES, TOO_BIG_SEQUENCE};
use crate::utils::{decode, iana_name, is_multi_byte_encoding, range_scan};
use clap::Parser;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use serde::Serialize;
use std::cmp::Ordering;
use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::hash::Hash;
use std::ops::Index;
use std::path::PathBuf;
use std::time::Duration;

</rust function dependency libraries>

</message>
<function>
pub fn coherence_percents(&self) -> f32 {
        self.coherence() * 100.0
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn coherence_percents(&self) -> f32 {
    self.coherence_matches
       .first()
       .map(|lang| lang.score)
       .unwrap_or_default() * 100.0
       .round_to_nearest(0.001)
}
```
Note that I assumed `round_to_nearest` is a method on `f32` that rounds to the nearest multiple of the given value (in this case, 0.001). If this is not the case, you may need to use a different rounding method or library.</translated function>Here is the translated Rust function:
```rust
pub fn coherence_percents(&self) -> f32 {
    self.coherence_matches
       .first()
       .map(|lang| lang.score)
       .unwrap_or_default() * 100.0
       .round_to_nearest(0.001)
}
```
Note that I assumed `round_to_nearest` is a method on `f32` that rounds to the nearest multiple of the given value (in this case, 0.001). If this is not the case, you may need to use a different rounding method or library.
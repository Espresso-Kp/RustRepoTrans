<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
char* dc_addr_normalize(const char* addr)
{
	char* addr_normalized = dc_strdup(addr);
	dc_trim(addr_normalized);
	if (strncmp(addr_normalized, "mailto:", 7)==0) {
		char* old = addr_normalized;
		addr_normalized = dc_strdup(&old[7]);
		free(old);
		dc_trim(addr_normalized);
	}
	return addr_normalized;
}
</c function>
<rust function signature>
fn normalize_addr(addr: &str) -> &str 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


pub struct Event {
    /// The ID of the [`Context`] which emitted this event.
    ///
    /// This allows using multiple [`Context`]s in a single process as they are identified
    /// by this ID.
    ///
    /// [`Context`]: crate::context::Context
    pub id: u32,
    /// The event payload.
    ///
    /// These are documented in `deltachat.h` as the `DC_EVENT_*` constants.
    pub typ: EventType,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use std::collections::HashMap;
use anyhow::Result;
use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};
use serde::Deserialize;
use crate::config::Config;
use crate::context::Context;
use crate::provider;
use crate::provider::Oauth2Authorizer;
use crate::socks::Socks5Config;
use crate::tools::time;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
fn normalize_addr(addr: &str) -> &str {
    let normalized = addr.trim();
    normalized.trim_start_matches("mailto:")
}
</function>
<translated function>
Here is the translated Rust function:
```rust
use std::ffi::CString;
use std::mem;
use std::ptr;

fn normalize_addr(addr: &str) -> &str {
    let addr_normalized = CString::new(addr).unwrap().into_bytes_with_nul();
    let addr_normalized = unsafe { ptr::slice_from_raw_parts_mut(addr_normalized.as_ptr(), addr_normalized.len()) };
    dc_trim(addr_normalized);
    if addr_normalized.as_ptr().offset(7).readable() == b"mailto:" {
        let old = addr_normalized.as_ptr();
        let addr_normalized = CString::new(mem::replace(old, ptr::null_mut())).unwrap().into_bytes_with_nul();
        let addr_normalized = unsafe { ptr::slice_from_raw_parts_mut(addr_normalized.as_ptr(), addr_normalized.len()) };
        dc_trim(addr_normalized);
    }
    unsafe { CString::from_raw(addr_normalized) }.into_raw().as_ptr()
}
```
Note that I've used the `CString` type to handle the C-style string manipulation, and `ptr::slice_from_raw_parts_mut` to create a mutable slice from a raw pointer. I've also used `mem::replace` to swap the `old` pointer with a null pointer, and `CString::from_raw` to convert the raw pointer back to a `CString`.</translated function>Here is the translated Rust function:
```rust
use std::ffi::CString;
use std::mem;
use std::ptr;

fn normalize_addr(addr: &str) -> &str {
    let addr_normalized = CString::new(addr).unwrap().into_bytes_with_nul();
    let addr_normalized = unsafe { ptr::slice_from_raw_parts_mut(addr_normalized.as_ptr(), addr_normalized.len()) };
    dc_trim(addr_normalized);
    if addr_normalized.as_ptr().offset(7).readable() == b"mailto:" {
        let old = addr_normalized.as_ptr();
        let addr_normalized = CString::new(mem::replace(old, ptr::null_mut())).unwrap().into_bytes_with_nul();
        let addr_normalized = unsafe { ptr::slice_from_raw_parts_mut(addr_normalized.as_ptr(), addr_normalized.len()) };
        dc_trim(addr_normalized);
    }
    unsafe { CString::from_raw(addr_normalized) }.into_raw().as_ptr()
}
```
Note that I've used the `CString` type to handle the C-style string manipulation, and `ptr::slice_from_raw_parts_mut` to create a mutable slice from a raw pointer. I've also used `mem::replace` to swap the `old` pointer with a null pointer, and `CString::from_raw` to convert the raw pointer back to a `CString`.
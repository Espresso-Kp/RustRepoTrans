<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
static void replace_in_uri(char** uri, const char* key, const char* value)
{
	if (uri && key && value) {
		char* value_urlencoded = dc_urlencode(value);
		dc_str_replace(uri, key, value_urlencoded);
		free(value_urlencoded);
	}
}
</c function>
<rust function signature>
fn replace_in_uri(uri: &str, key: &str, value: &str) -> String 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


pub struct Event {
    /// The ID of the [`Context`] which emitted this event.
    ///
    /// This allows using multiple [`Context`]s in a single process as they are identified
    /// by this ID.
    ///
    /// [`Context`]: crate::context::Context
    pub id: u32,
    /// The event payload.
    ///
    /// These are documented in `deltachat.h` as the `DC_EVENT_*` constants.
    pub typ: EventType,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use std::collections::HashMap;
use anyhow::Result;
use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};
use serde::Deserialize;
use crate::config::Config;
use crate::context::Context;
use crate::provider;
use crate::provider::Oauth2Authorizer;
use crate::socks::Socks5Config;
use crate::tools::time;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
fn replace_in_uri(uri: &str, key: &str, value: &str) -> String {
    let value_urlencoded = utf8_percent_encode(value, NON_ALPHANUMERIC).to_string();
    uri.replace(key, &value_urlencoded)
}
</function>
<translated function>
Here is the translated Rust function:
```rust
use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};
use std::collections::HashMap;

fn replace_in_uri(uri: &str, key: &str, value: &str) -> String {
    if uri.is_empty() || key.is_empty() || value.is_empty() {
        return String::new();
    }

    let value_urlencoded = utf8_percent_encode(value, NON_ALPHANUMERIC).to_string();
    let mut uri = uri.to_string();
    uri.replace(key, &value_urlencoded);
    uri
}
```
Note that I've used the `percent_encoding` crate to URL encode the `value` string, as it's not clear what the `dc_urlencode` function does in the C code. If you have more information about this function, I can adjust the translation accordingly.

Also, I've used the `String::new()` method to return an empty string when any of the input parameters are empty, as the C code doesn't handle this case explicitly. If you want to handle this case differently, please let me know.</translated function>Here is the translated Rust function:
```rust
use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};
use std::collections::HashMap;

fn replace_in_uri(uri: &str, key: &str, value: &str) -> String {
    if uri.is_empty() || key.is_empty() || value.is_empty() {
        return String::new();
    }

    let value_urlencoded = utf8_percent_encode(value, NON_ALPHANUMERIC).to_string();
    let mut uri = uri.to_string();
    uri.replace(key, &value_urlencoded);
    uri
}
```
Note that I've used the `percent_encoding` crate to URL encode the `value` string, as it's not clear what the `dc_urlencode` function does in the C code. If you have more information about this function, I can adjust the translation accordingly.

Also, I've used the `String::new()` method to return an empty string when any of the input parameters are empty, as the C code doesn't handle this case explicitly. If you want to handle this case differently, please let me know.
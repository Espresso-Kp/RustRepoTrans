<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def bind(self, schema: Schema, case_sensitive: bool = True) -> BoundSetPredicate[L]:
        bound_term = self.term.bind(schema, case_sensitive)
        return self.as_bound(bound_term, {lit.to(bound_term.ref().field.field_type) for lit in self.literals})
</python function>
<rust function signature>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> crate::Result<Self::Bound>;

pub struct SetExpression<T> {
    /// Operator of this predicate, must be set operator, such as `IN`, `NOT IN`, etc.
    op: PredicateOperator,
    /// Term of this predicate, for example, `a` in `a in (1, 2, 3)`.
    term: T,
    /// Literals of this predicate, for example, `(1, 2, 3)` in `a in (1, 2, 3)`.
    literals: FnvHashSet<Datum>,
}

pub(crate) fn new(op: PredicateOperator, term: T, literals: FnvHashSet<Datum>) -> Self {
        debug_assert!(op.is_set());
        Self { op, term, literals }
    }

pub(crate) fn new(table: Table, schema: ArrowSchemaRef) -> Self {
        let plan_properties = Self::compute_properties(schema.clone());

        Self {
            table,
            schema,
            plan_properties,
        }
    }
pub struct SetExpression<T> {
    /// Operator of this predicate, must be set operator, such as `IN`, `NOT IN`, etc.
    op: PredicateOperator,
    /// Term of this predicate, for example, `a` in `a in (1, 2, 3)`.
    term: T,
    /// Literals of this predicate, for example, `(1, 2, 3)` in `a in (1, 2, 3)`.
    literals: FnvHashSet<Datum>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use std::fmt::{Debug, Display, Formatter};
use std::ops::Not;
use array_init::array_init;
use fnv::FnvHashSet;
use itertools::Itertools;
use crate::error::Result;
use crate::expr::{Bind, BoundReference, PredicateOperator, Reference};
use crate::spec::{Datum, SchemaRef};
use crate::{Error, ErrorKind};
use std::ops::Not;
use std::sync::Arc;
use crate::expr::Bind;
use crate::expr::Predicate::{AlwaysFalse, AlwaysTrue};
use crate::expr::Reference;
use crate::spec::Datum;
use crate::spec::{NestedField, PrimitiveType, Schema, SchemaRef, Type};

</rust function dependency libraries>

</message>
<function>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
        let bound_term = self.term.bind(schema.clone(), case_sensitive)?;
        Ok(SetExpression::new(
            self.op,
            bound_term,
            self.literals.clone(),
        ))
    }
</function>
<translated function>
In your translated function, it seems like you want to bind the given schema and case sensitivity details with term and literals under SetExpression. Here is the equivalent Rust code:

```rust
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> crate::Result<Self::Bound> {
    let bound_term = self.term.bind(&schema, case_sensitive)?;

    let mut literal_map = FnvHashSet::default();
    for lit in &self.literals {
        literal_map.insert(lit.to(bound_term.ref().field.field_type.clone()));
    }

    Ok(self.as_bound(bound_term, literal_map))
}
```

This function first binds the term with the given schema and case sensitivity, then goes through each element in literals and adds the transformed literal (according to `bound_term.ref().field.field_type`) into a new FnvHashSet `literal_map`. It finally returns the bound structure with `bound_term` and `literal_map`.

Note that the actual function's behavior may vary depending on your implementations of functions and methods like `as_bound`, `bind`, `ref`, `field`, `to` and assumption of your self.Bound, but this should give you a good start in translating. 

Please keep in mind that Rust has a checked error handling system, you may need to adapt the code according to how your other functions handle errors.</translated function>In your translated function, it seems like you want to bind the given schema and case sensitivity details with term and literals under SetExpression. Here is the equivalent Rust code:

```rust
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> crate::Result<Self::Bound> {
    let bound_term = self.term.bind(&schema, case_sensitive)?;

    let mut literal_map = FnvHashSet::default();
    for lit in &self.literals {
        literal_map.insert(lit.to(bound_term.ref().field.field_type.clone()));
    }

    Ok(self.as_bound(bound_term, literal_map))
}
```

This function first binds the term with the given schema and case sensitivity, then goes through each element in literals and adds the transformed literal (according to `bound_term.ref().field.field_type`) into a new FnvHashSet `literal_map`. It finally returns the bound structure with `bound_term` and `literal_map`.

Note that the actual function's behavior may vary depending on your implementations of functions and methods like `as_bound`, `bind`, `ref`, `field`, `to` and assumption of your self.Bound, but this should give you a good start in translating. 

Please keep in mind that Rust has a checked error handling system, you may need to adapt the code according to how your other functions handle errors.
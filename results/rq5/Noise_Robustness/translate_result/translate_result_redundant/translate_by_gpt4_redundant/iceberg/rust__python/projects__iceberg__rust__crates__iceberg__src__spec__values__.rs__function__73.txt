<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def __iter__(self) -> Iterator[MappedField]:
        """Iterate over the mapped fields."""
        return iter(self.root)
</python function>
<rust function signature>
pub fn iter(&self) -> impl Iterator<Item = Option<&Literal>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct Struct {
    /// Vector to store the field values
    fields: Vec<Literal>,
    /// Null bitmap
    null_bitmap: BitVec,
}



pub struct Struct {
    /// Vector to store the field values
    fields: Vec<Literal>,
    /// Null bitmap
    null_bitmap: BitVec,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use std::any::Any;
use std::collections::HashMap;
use std::fmt::{Display, Formatter};
use std::hash::Hash;
use std::ops::Index;
use std::str::FromStr;
use bitvec::vec::BitVec;
use chrono::{DateTime, NaiveDate, NaiveDateTime, NaiveTime, TimeZone, Utc};
use ordered_float::OrderedFloat;
use rust_decimal::Decimal;
use serde_bytes::ByteBuf;
use serde_json::{Map as JsonMap, Number, Value as JsonValue};
use uuid::Uuid;
use _serde::RawLiteral;
use crate::error::Result;
use crate::spec::values::date::{date_from_naive_date, days_to_date, unix_epoch};
use crate::spec::values::time::microseconds_to_time;
use crate::spec::values::timestamp::microseconds_to_datetime;
use crate::spec::values::timestamptz::microseconds_to_datetimetz;
use crate::spec::MAX_DECIMAL_PRECISION;
use crate::{ensure_data_valid, Error, ErrorKind};
use super::datatypes::{PrimitiveType, Type};
use chrono::{DateTime, NaiveDate, TimeDelta, TimeZone, Utc};
use chrono::NaiveTime;
use chrono::{DateTime, NaiveDateTime};
use chrono::DateTime;
use chrono::Utc;
use serde::{
        de::Visitor,
        ser::{SerializeMap, SerializeSeq, SerializeStruct},
        Deserialize, Serialize,
    };
use serde_bytes::ByteBuf;
use serde_derive::Deserialize as DeserializeDerive;
use serde_derive::Serialize as SerializeDerive;
use crate::{
        spec::{PrimitiveType, Type, MAP_KEY_FIELD_NAME, MAP_VALUE_FIELD_NAME},
        Error, ErrorKind,
    };
use super::{Literal, Map, PrimitiveLiteral};
use apache_avro::{to_value, types::Value};
use crate::{
        avro::schema_to_avro_schema,
        spec::{
            datatypes::{ListType, MapType, NestedField, StructType},
            Schema,
        },
    };
use super::*;

</rust function dependency libraries>

</message>
<function>
pub fn iter(&self) -> impl Iterator<Item = Option<&Literal>> {
        self.null_bitmap.iter().zip(self.fields.iter()).map(
            |(null, value)| {
                if *null {
                    None
                } else {
                    Some(value)
                }
            },
        )
    }
</function>
<translated function>
The Python function `__iter__` you provided seems to iterate over the `root` of the class it belongs to. However, you didn't provide any corresponding Rust fields or classes that has a `root` attribute, so I made some assumptions and have translated the Python code to fit the Rust `Struct` you provided. Here, assuming we need to iterate over the `fields` vector of a `Struct` object and get an optional reference to its elements (of type `Literal`).

Here's your translated Rust function:

```rust
impl Struct {
    pub fn iter(&self) -> impl Iterator<Item = Option<&Literal>> {
        self.fields.iter().map(|x| Some(x))
    }
}
```

Please note that I've assumed that you want to map over `fields` vector and effectively turn `&Literal` into `Option<&Literal>` by wrapping each element into `Some`. If, instead, you want to take the null_bitmap into account, or any other logic, you should adjust this function accordingly.</translated function>The Python function `__iter__` you provided seems to iterate over the `root` of the class it belongs to. However, you didn't provide any corresponding Rust fields or classes that has a `root` attribute, so I made some assumptions and have translated the Python code to fit the Rust `Struct` you provided. Here, assuming we need to iterate over the `fields` vector of a `Struct` object and get an optional reference to its elements (of type `Literal`).

Here's your translated Rust function:

```rust
impl Struct {
    pub fn iter(&self) -> impl Iterator<Item = Option<&Literal>> {
        self.fields.iter().map(|x| Some(x))
    }
}
```

Please note that I've assumed that you want to map over `fields` vector and effectively turn `&Literal` into `Option<&Literal>` by wrapping each element into `Some`. If, instead, you want to take the null_bitmap into account, or any other logic, you should adjust this function accordingly.
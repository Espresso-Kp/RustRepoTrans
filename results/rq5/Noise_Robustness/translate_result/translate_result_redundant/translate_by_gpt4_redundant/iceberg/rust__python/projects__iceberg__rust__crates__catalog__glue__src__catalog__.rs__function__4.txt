<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def list_namespaces(self, namespace: Union[str, Identifier] = ()) -> List[Identifier]:
        """List namespaces from the given namespace. If not given, list top-level namespaces from the catalog.

        Returns:
            List[Identifier]: a List of namespace identifiers.
        """
        # Hierarchical namespace is not supported. Return an empty list
        if namespace:
            return []

        database_list: List[DatabaseTypeDef] = []
        next_token: Optional[str] = None

        while True:
            databases_response = self.glue.get_databases() if not next_token else self.glue.get_databases(NextToken=next_token)
            database_list.extend(databases_response["DatabaseList"])
            next_token = databases_response.get("NextToken")
            if not next_token:
                break

        return [self.identifier_to_tuple(database["Name"]) for database in database_list]
</python function>
<rust function signature>
async fn list_namespaces(
        &self,
        parent: Option<&NamespaceIdent>,
    ) -> Result<Vec<NamespaceIdent>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
macro_rules! with_catalog_id {
    ($builder:expr, $config:expr) => {{
        if let Some(catalog_id) = &$config.catalog_id {
            $builder.catalog_id(catalog_id)
        } else {
            $builder
        }
    }};
}

pub fn new(name: String) -> Self {
        Self(vec![name])
    }

pub(crate) fn from_aws_sdk_error<T>(error: aws_sdk_glue::error::SdkError<T>) -> Error
where
    T: Debug,
{
    Error::new(
        ErrorKind::Unexpected,
        "Operation failed for hitting aws skd error".to_string(),
    )
    .with_source(anyhow!("aws sdk error: {:?}", error))
}

pub struct GlueCatalog {
    config: GlueCatalogConfig,
    client: GlueClient,
    file_io: FileIO,
}

struct GlueClient(aws_sdk_glue::Client);

pub struct NamespaceIdent(Vec<String>);


pub fn from_thrift_error<T>(error: volo_thrift::error::ResponseError<T>) -> Error
where
    T: Debug,
{
    Error::new(
        ErrorKind::Unexpected,
        "Operation failed for hitting thrift error".to_string(),
    )
    .with_source(anyhow!("thrift error: {:?}", error))
}
pub struct GlueCatalog {
    config: GlueCatalogConfig,
    client: GlueClient,
    file_io: FileIO,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use async_trait::async_trait;
use aws_sdk_glue::types::TableInput;
use iceberg::io::FileIO;
use iceberg::spec::{TableMetadata, TableMetadataBuilder};
use iceberg::table::Table;
use iceberg::{
    Catalog, Error, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
    TableIdent,
};
use std::{collections::HashMap, fmt::Debug};
use typed_builder::TypedBuilder;
use crate::error::{from_aws_build_error, from_aws_sdk_error};
use crate::utils::{
    convert_to_database, convert_to_glue_table, convert_to_namespace, create_metadata_location,
    create_sdk_config, get_default_table_location, get_metadata_location, validate_namespace,
};
use crate::with_catalog_id;

</rust function dependency libraries>

</message>
<function>
async fn list_namespaces(
        &self,
        parent: Option<&NamespaceIdent>,
    ) -> Result<Vec<NamespaceIdent>> {
        if parent.is_some() {
            return Ok(vec![]);
        }

        let mut database_list: Vec<NamespaceIdent> = Vec::new();
        let mut next_token: Option<String> = None;

        loop {
            let builder = match &next_token {
                Some(token) => self.client.0.get_databases().next_token(token),
                None => self.client.0.get_databases(),
            };
            let builder = with_catalog_id!(builder, self.config);
            let resp = builder.send().await.map_err(from_aws_sdk_error)?;

            let dbs: Vec<NamespaceIdent> = resp
                .database_list()
                .iter()
                .map(|db| NamespaceIdent::new(db.name().to_string()))
                .collect();

            database_list.extend(dbs);

            next_token = resp.next_token().map(ToOwned::to_owned);
            if next_token.is_none() {
                break;
            }
        }

        Ok(database_list)
    }
</function>
<translated function>
Here is your Python function translated to Rust:

```rust
use aws_sdk_glue::model::{Database, GetDatabasesInput, GetDatabasesOutput};

#[async_trait]
impl GlueCatalog {
    async fn list_namespaces(
        &self,
        parent: Option<&NamespaceIdent>
    ) -> Result<Vec<NamespaceIdent>> {
        // Hierarchical namespace is not supported. Return an empty list
        if parent.is_some() {
            return Ok(Vec::new());
        }

        let mut database_list: Vec<Database> = Vec::new();
        let mut next_token: Option<String> = None;

        loop {
            let get_db_input = GetDatabasesInput::new();

            let mut builder = get_db_input.clone();
            if next_token.is_some() {
                builder = builder.next_token(next_token);
            }

            let databases_response: GetDatabasesOutput = match with_catalog_id!(builder, self.config).send().await {
                Ok(response) => response,
                Err(e) => return Err(from_aws_sdk_error(e))
            };
            
            if let Some(db_list) = databases_response.database_list {
                database_list.extend(db_list);
            }

            next_token = databases_response.next_token;
            if next_token.is_none() {
                break;
            }
        }

        let namespace_list: Vec<NamespaceIdent> = database_list.iter().map(|database| {
            NamespaceIdent::new(database.name.clone())
        }).collect();
        Ok(namespace_list)
    }
}
```

Please note that I assumed the existence of several Rust types (Database, GetDatabasesInput, GetDatabasesOutput) and their methods in the aws_sdk_glue package, based on the matching behavior shown in the Python function, as their exact implementation could not be found. If these types or methods do not exist or have different names, some modifications may be required. Also, it's assumed that GlueCatalog has a config field.</translated function>Here is your Python function translated to Rust:

```rust
use aws_sdk_glue::model::{Database, GetDatabasesInput, GetDatabasesOutput};

#[async_trait]
impl GlueCatalog {
    async fn list_namespaces(
        &self,
        parent: Option<&NamespaceIdent>
    ) -> Result<Vec<NamespaceIdent>> {
        // Hierarchical namespace is not supported. Return an empty list
        if parent.is_some() {
            return Ok(Vec::new());
        }

        let mut database_list: Vec<Database> = Vec::new();
        let mut next_token: Option<String> = None;

        loop {
            let get_db_input = GetDatabasesInput::new();

            let mut builder = get_db_input.clone();
            if next_token.is_some() {
                builder = builder.next_token(next_token);
            }

            let databases_response: GetDatabasesOutput = match with_catalog_id!(builder, self.config).send().await {
                Ok(response) => response,
                Err(e) => return Err(from_aws_sdk_error(e))
            };
            
            if let Some(db_list) = databases_response.database_list {
                database_list.extend(db_list);
            }

            next_token = databases_response.next_token;
            if next_token.is_none() {
                break;
            }
        }

        let namespace_list: Vec<NamespaceIdent> = database_list.iter().map(|database| {
            NamespaceIdent::new(database.name.clone())
        }).collect();
        Ok(namespace_list)
    }
}
```

Please note that I assumed the existence of several Rust types (Database, GetDatabasesInput, GetDatabasesOutput) and their methods in the aws_sdk_glue package, based on the matching behavior shown in the Python function, as their exact implementation could not be found. If these types or methods do not exist or have different names, some modifications may be required. Also, it's assumed that GlueCatalog has a config field.
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def bind(self, schema: Schema, case_sensitive: bool = True) -> BoundUnaryPredicate[Any]:
        bound_term = self.term.bind(schema, case_sensitive)
        return self.as_bound(bound_term)
</python function>
<rust function signature>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>

pub struct UnaryExpression<T> {
    /// Operator of this predicate, must be single operand operator.
    op: PredicateOperator,
    /// Term of this predicate, for example, `a` in `a IS NULL`.
    term: T,
}

fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> crate::Result<Self::Bound>;

pub(crate) fn new(op: PredicateOperator, term: T) -> Self {
        debug_assert!(op.is_unary());
        Self { op, term }
    }


pub(crate) fn new(op: PredicateOperator, term: T, literals: FnvHashSet<Datum>) -> Self {
        debug_assert!(op.is_set());
        Self { op, term, literals }
    }
pub struct UnaryExpression<T> {
    /// Operator of this predicate, must be single operand operator.
    op: PredicateOperator,
    /// Term of this predicate, for example, `a` in `a IS NULL`.
    term: T,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use std::fmt::{Debug, Display, Formatter};
use std::ops::Not;
use array_init::array_init;
use fnv::FnvHashSet;
use itertools::Itertools;
use crate::error::Result;
use crate::expr::{Bind, BoundReference, PredicateOperator, Reference};
use crate::spec::{Datum, SchemaRef};
use crate::{Error, ErrorKind};
use std::ops::Not;
use std::sync::Arc;
use crate::expr::Bind;
use crate::expr::Predicate::{AlwaysFalse, AlwaysTrue};
use crate::expr::Reference;
use crate::spec::Datum;
use crate::spec::{NestedField, PrimitiveType, Schema, SchemaRef, Type};

</rust function dependency libraries>

</message>
<function>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
        let bound_term = self.term.bind(schema, case_sensitive)?;
        Ok(UnaryExpression::new(self.op, bound_term))
    }
</function>
<translated function>
Your Python function, when translated to Rust, would return a `Result<Self::Bound>`. So for the translated function, you would need to ensure that this requirement is satisfied. Given the data available in your Python function and how it operates, a direct one to one translation might not be possible as it depends on how your `bind` and `as_bound` functions are defined in the Python environment. 

However, taking a shot at interpreting your Python code to Rust, you can consider the translation below:

```rust
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
    let bound_term = self.term.bind(schema, case_sensitive)?;
    self.as_bound(bound_term)
}
```

The Question Mark (`?`) is used to propagate errors. If the operation that precedes the "?" operator returns an error (i.e., if it does not satisfy the Ok variant of the Result), this error will be returned from the current function. 

This would assume that you have a method `as_bound` that takes in a parameter of `Self::Bound`. 

Please provide more context for a more accurate translation, especially the methods `bind` and `as_bound` in Python and how they are defined. This would also apply to `Schema` and `BoundUnaryPredicate` and their respective matches in the Rust environment. Functionality and behavior in Python and Rust might not align perfectly due to how the two languages operate differently.</translated function>Your Python function, when translated to Rust, would return a `Result<Self::Bound>`. So for the translated function, you would need to ensure that this requirement is satisfied. Given the data available in your Python function and how it operates, a direct one to one translation might not be possible as it depends on how your `bind` and `as_bound` functions are defined in the Python environment. 

However, taking a shot at interpreting your Python code to Rust, you can consider the translation below:

```rust
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
    let bound_term = self.term.bind(schema, case_sensitive)?;
    self.as_bound(bound_term)
}
```

The Question Mark (`?`) is used to propagate errors. If the operation that precedes the "?" operator returns an error (i.e., if it does not satisfy the Ok variant of the Result), this error will be returned from the current function. 

This would assume that you have a method `as_bound` that takes in a parameter of `Self::Bound`. 

Please provide more context for a more accurate translation, especially the methods `bind` and `as_bound` in Python and how they are defined. This would also apply to `Schema` and `BoundUnaryPredicate` and their respective matches in the Rust environment. Functionality and behavior in Python and Rust might not align perfectly due to how the two languages operate differently.
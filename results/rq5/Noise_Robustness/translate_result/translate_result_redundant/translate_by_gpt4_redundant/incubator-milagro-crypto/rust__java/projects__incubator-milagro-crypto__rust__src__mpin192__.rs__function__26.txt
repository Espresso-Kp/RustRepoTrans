<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int KANGAROO(byte[] E,byte[] F)
	{
		FP24 ge=FP24.fromBytes(E);
		FP24 gf=FP24.fromBytes(F);
		int[] distance = new int[TS];
		FP24 t=new FP24(gf);
		FP24[] table=new FP24[TS];
		int i,j,m,s,dn,dm,res,steps;

		s=1;
		for (m=0;m<TS;m++)
		{
			distance[m]=s;
			table[m]=new FP24(t);
			s*=2;
			t.usqr();
		}
		t.one();
		dn=0;
		for (j=0;j<TRAP;j++)
		{
			i=t.geta().geta().geta().getA().lastbits(20)%TS;
			t.mul(table[i]);
			dn+=distance[i];
		}
		gf.copy(t); gf.conj();
		steps=0; dm=0;
		res=0;
		while (dm-dn<MAXPIN)
		{
			steps++;
			if (steps>4*TRAP) break;
			i=ge.geta().geta().geta().getA().lastbits(20)%TS;
			ge.mul(table[i]);
			dm+=distance[i];
			if (ge.equals(t))
			{
				res=dm-dn;
				break;
			}
			if (ge.equals(gf))
			{
				res=dn-dm;
				break;
			}

		}
		if (steps>4*TRAP || dm-dn>=MAXPIN) {res=0; }    // Trap Failed  - probable invalid token
		return res;
	}
</java function>
<rust function signature>
pub fn kangaroo(e: &[u8], f: &[u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn from_bytes(w: &[u8]) -> FP24 {
        let mut t: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];
        let mb = big::MODBYTES as usize;

        for i in 0..mb {
            t[i] = w[i]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + mb]
        }
        let b = Big::from_bytes(&t);
        let c = FP2::new_bigs(a, b);

        for i in 0..mb {
            t[i] = w[i + 2 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 3 * mb]
        }
        let b = Big::from_bytes(&t);
        let d = FP2::new_bigs(a, b);

        let ea = FP4::new_fp2s(c, d);

        for i in 0..mb {
            t[i] = w[i + 4 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 5 * mb]
        }
        let b = Big::from_bytes(&t);
        let c = FP2::new_bigs(a, b);

        for i in 0..mb {
            t[i] = w[i + 6 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 7 * mb]
        }
        let b = Big::from_bytes(&t);
        let d = FP2::new_bigs(a, b);

        let eb = FP4::new_fp2s(c, d);

        let e = FP8::new_fp4s(ea, eb);

        for i in 0..mb {
            t[i] = w[i + 8 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 9 * mb]
        }
        let b = Big::from_bytes(&t);
        let c = FP2::new_bigs(a, b);

        for i in 0..mb {
            t[i] = w[i + 10 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 11 * mb]
        }
        let b = Big::from_bytes(&t);
        let d = FP2::new_bigs(a, b);

        let ea = FP4::new_fp2s(c, d);

        for i in 0..mb {
            t[i] = w[i + 12 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 13 * mb]
        }
        let b = Big::from_bytes(&t);
        let c = FP2::new_bigs(a, b);

        for i in 0..mb {
            t[i] = w[i + 14 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 15 * mb]
        }
        let b = Big::from_bytes(&t);
        let d = FP2::new_bigs(a, b);

        let eb = FP4::new_fp2s(c, d);

        let f = FP8::new_fp4s(ea, eb);

        for i in 0..mb {
            t[i] = w[i + 16 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 17 * mb]
        }
        let b = Big::from_bytes(&t);

        let c = FP2::new_bigs(a, b);

        for i in 0..mb {
            t[i] = w[i + 18 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 19 * mb]
        }
        let b = Big::from_bytes(&t);
        let d = FP2::new_bigs(a, b);

        let ea = FP4::new_fp2s(c, d);

        for i in 0..mb {
            t[i] = w[i + 20 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 21 * mb]
        }
        let b = Big::from_bytes(&t);

        let c = FP2::new_bigs(a, b);

        for i in 0..mb {
            t[i] = w[i + 22 * mb]
        }
        let a = Big::from_bytes(&t);
        for i in 0..mb {
            t[i] = w[i + 23 * mb]
        }
        let b = Big::from_bytes(&t);
        let d = FP2::new_bigs(a, b);

        let eb = FP4::new_fp2s(c, d);

        let g = FP8::new_fp4s(ea, eb);

        return FP24::new_fp8s(e, f, g);
    }

pub fn equals(&self, a: &FP) -> bool {
        let mut f = self.clone();
        let mut s = a.clone();
        f.reduce();
        s.reduce();
        if Big::comp(&(f.x), &(s.x)) == 0 {
            return true;
        }
        return false;
    }

pub fn geta(&self) -> FP4 {
        self.a.clone()
    }

pub fn conj(&mut self) {
        self.b.neg();
        self.norm();
    }

pub fn usqr(&mut self) {
        let mut a = self.geta();
        let mut b = self.getc();
        let mut c = self.getb();

        self.a.sqr();
        let mut d = self.geta();
        d.add(&self.a);
        self.a.add(&d);

        self.a.norm();
        a.nconj();

        a.dbl();
        self.a.add(&a);
        b.sqr();
        b.times_i();

        d = b.clone();
        d.add(&b);
        b.add(&d);
        b.norm();

        c.sqr();
        d = c.clone();
        d.add(&c);
        c.add(&d);
        c.norm();

        self.b.conj();
        self.b.dbl();
        self.c.nconj();

        self.c.dbl();
        self.b.add(&b);
        self.c.add(&c);
        self.stype = DENSE;
        self.reduce();
    }

pub fn mul(&mut self, b: &FP) {
        if i64::from(self.xes) * i64::from(b.xes) > i64::from(FEXCESS) {
            self.reduce()
        }

        let mut d = Big::mul(&(self.x), &(b.x));
        self.x = FP::modulo(&mut d);
        self.xes = 2;
    }

pub fn one(&mut self) {
        self.x.one();
        self.nres()
    }

pub fn lastbits(&mut self, n: usize) -> isize {
        let msk = ((1 << n) - 1) as Chunk;
        self.norm();
        (self.w[0] & msk) as isize
    }

pub struct FP24 {
    a: FP8,
    b: FP8,
    c: FP8,
    stype: usize,
}

pub const MAXPIN: i32 = 10000; // PIN less than this

pub const TS: usize = 10; 

pub const TRAP: usize = 200; // 200 for 4 digit PIN, 2000 for 6-digit PIN  - approx 2*sqrt(MAXPIN)


pub fn conj(&mut self) {
        self.b.neg();
        self.b.norm();
    }
pub struct FP24 {
    a: FP8,
    b: FP8,
    c: FP8,
    stype: usize,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp4::ECP4;
use super::fp24::FP24;
use super::fp8::FP8;
use super::pair192;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn kangaroo(e: &[u8], f: &[u8]) -> isize {
    let mut ge = FP24::from_bytes(e);
    let mut gf = FP24::from_bytes(f);
    let mut distance: [isize; TS] = [0; TS];
    let mut t = gf.clone();

    let mut table: Vec<FP24> = Vec::with_capacity(TS);
    let mut s: isize = 1;
    for m in 0..TS {
        distance[m] = s;
        table.push(t.clone());
        s *= 2;
        t.usqr();
    }
    t.one();
    let mut dn: isize = 0;
    let mut i: usize;
    for _ in 0..TRAP {
        i = (t.geta().geta().geta().geta().lastbits(20) % (TS as isize)) as usize;
        t.mul(&mut table[i]);
        dn += distance[i];
    }
    gf = t.clone();
    gf.conj();
    let mut steps: usize = 0;
    let mut dm: isize = 0;
    let mut res: isize = 0;
    while dm - dn < MAXPIN as isize {
        steps += 1;
        if steps > 4 * TRAP {
            break;
        }
        i = (ge.geta().geta().geta().geta().lastbits(20) % (TS as isize)) as usize;
        ge.mul(&mut table[i]);
        dm += distance[i];
        if ge.equals(&mut t) {
            res = dm - dn;
            break;
        }
        if ge.equals(&mut gf) {
            res = dn - dm;
            break;
        }
    }
    if steps > 4 * TRAP || dm - dn >= MAXPIN as isize {
        res = 0
    } // Trap Failed  - probable invalid token
    return res;
}
</function>
<translated function>
pub fn kangaroo(e: &[u8], f: &[u8]) -> isize {
    let ge = from_bytes(e);
    let gf = from_bytes(f);
    let mut distance: Vec<isize> = Vec::with_capacity(TS);
    let mut t = FP24 { a: gf.a.clone(), b: gf.b.clone(), c: gf.c.clone(), stype: gf.stype };
    let mut table: Vec<FP24> = Vec::with_capacity(TS);
    let mut s: isize = 1;
    let mut dn: isize;
    let mut dm: isize;
    let mut res: isize;
    let mut steps: isize;
    let mut i: usize;

    for m in 0..TS {
        distance.push(s);
        table.push(FP24 { a: t.a.clone(), b: t.b.clone(), c: t.c.clone(), stype: t.stype });
        s *= 2;
        t.usqr();
    }
    t.one();
    dn = 0;
    for _j in 0..TRAP {
        i = t.geta().geta().geta().getA().lastbits(20) as usize % TS;
        t.mul(&table[i]);
        dn += distance[i];
    }
    gf.copy(&t);
    gf.conj();
    steps = 0;
    dm = 0;
    res = 0;

    while dm - dn < MAXPIN as isize {
        steps += 1;
        if steps > 4 * TRAP as isize {
            break;
        }
        i = ge.geta().geta().geta().getA().lastbits(20) as usize % TS;
        ge.mul(&table[i]);
        dm += distance[i];
        if ge.equals(&t) {
            res = dm - dn;
            break;
        }
        if ge.equals(&gf) {
            res = dn - dm;
            break;
        }
    }
    if steps > 4 * TRAP as isize || dm - dn >= MAXPIN as isize {
        res = 0; 
    }
    res
}</translated function>pub fn kangaroo(e: &[u8], f: &[u8]) -> isize {
    let ge = from_bytes(e);
    let gf = from_bytes(f);
    let mut distance: Vec<isize> = Vec::with_capacity(TS);
    let mut t = FP24 { a: gf.a.clone(), b: gf.b.clone(), c: gf.c.clone(), stype: gf.stype };
    let mut table: Vec<FP24> = Vec::with_capacity(TS);
    let mut s: isize = 1;
    let mut dn: isize;
    let mut dm: isize;
    let mut res: isize;
    let mut steps: isize;
    let mut i: usize;

    for m in 0..TS {
        distance.push(s);
        table.push(FP24 { a: t.a.clone(), b: t.b.clone(), c: t.c.clone(), stype: t.stype });
        s *= 2;
        t.usqr();
    }
    t.one();
    dn = 0;
    for _j in 0..TRAP {
        i = t.geta().geta().geta().getA().lastbits(20) as usize % TS;
        t.mul(&table[i]);
        dn += distance[i];
    }
    gf.copy(&t);
    gf.conj();
    steps = 0;
    dm = 0;
    res = 0;

    while dm - dn < MAXPIN as isize {
        steps += 1;
        if steps > 4 * TRAP as isize {
            break;
        }
        i = ge.geta().geta().geta().getA().lastbits(20) as usize % TS;
        ge.mul(&table[i]);
        dm += distance[i];
        if ge.equals(&t) {
            res = dm - dn;
            break;
        }
        if ge.equals(&gf) {
            res = dn - dm;
            break;
        }
    }
    if steps > 4 * TRAP as isize || dm - dn >= MAXPIN as isize {
        res = 0; 
    }
    res
}
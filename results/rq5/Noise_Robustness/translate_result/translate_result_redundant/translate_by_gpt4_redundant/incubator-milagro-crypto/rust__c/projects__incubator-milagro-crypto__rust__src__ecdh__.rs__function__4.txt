<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
void KDF2(int sha,const octet *z,const octet *p,int olen,octet *key)
{
    /* NOTE: the parameter olen is the length of the output k in bytes */
    char h[64];
    octet H= {0,sizeof(h),h};
    int cthreshold;
    int hlen=sha;

    OCT_empty(key);

    cthreshold=ROUNDUP(olen,hlen);

    for (int counter=1; counter<=cthreshold; counter++)
    {
        ehashit(sha,z,counter,p,&H,0);
        if (key->len+hlen>olen)  OCT_jbytes(key,H.val,olen%hlen);
        else                     OCT_joctet(key,&H);
    }

}
</c function>
<rust function signature>
pub fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize, k: &mut [u8]) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn hashit(sha: usize, a: &[u8], n: usize, b: Option<&[u8]>, pad: usize, w: &mut [u8]) {
    let mut r: [u8; 64] = [0; 64];
    if sha == SHA256 {
        let mut h = HASH256::new();
        h.process_array(a);
        if n > 0 {
            h.process_num(n as i32)
        }
        if let Some(x) = b {
            h.process_array(x);
        }
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
    }
    if sha == SHA384 {
        let mut h = HASH384::new();
        h.process_array(a);
        if n > 0 {
            h.process_num(n as i32)
        }
        if let Some(x) = b {
            h.process_array(x);
        }
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
    }
    if sha == SHA512 {
        let mut h = HASH512::new();
        h.process_array(a);
        if n > 0 {
            h.process_num(n as i32)
        }
        if let Some(x) = b {
            h.process_array(x);
        }
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
    }

    if pad == 0 {
        for i in 0..sha {
            w[i] = r[i]
        }
    } else {
        if pad <= sha {
            for i in 0..pad {
                w[i] = r[i]
            }
        } else {
            for i in 0..sha {
                w[i + pad - sha] = r[i]
            }
            for i in 0..(pad - sha) {
                w[i] = 0
            }
        }
    }
}


fn hashit(sha: usize, n: usize, id: &[u8], w: &mut [u8]) -> bool {
    let mut r: [u8; 64] = [0; 64];
    let mut didit = false;
    if sha == SHA256 {
        let mut h = HASH256::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA384 {
        let mut h = HASH384::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA512 {
        let mut h = HASH512::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if !didit {
        return false;
    }

    let rm = big::MODBYTES as usize;

    if sha > rm {
        for i in 0..rm {
            w[i] = r[i]
        }
    } else {
        for i in 0..sha {
            w[i + rm - sha] = r[i]
        }
        for i in 0..(rm - sha) {
            w[i] = 0
        }
    }

    return true;
}
pub struct DBig {
    pub w: [Chunk; big::DNLEN],
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

</rust function dependency libraries>

</message>
<function>
pub fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize, k: &mut [u8]) {
    // NOTE: the parameter olen is the length of the output K in bytes
    let hlen = sha;
    let mut lk = 0;

    let mut cthreshold = olen / hlen;
    if olen % hlen != 0 {
        cthreshold += 1
    }

    for counter in 1..=cthreshold {
        let mut b: [u8; 64] = [0; 64];
        hashit(sha, z, counter, p, 0, &mut b);
        if lk + hlen > olen {
            for i in 0..(olen % hlen) {
                k[lk] = b[i];
                lk += 1
            }
        } else {
            for i in 0..hlen {
                k[lk] = b[i];
                lk += 1
            }
        }
    }
}
</function>
<translated function>
Here's the Rust equivalent of your provided C function:

```rust
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

pub fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize, k: &mut [u8]) {
    let mut h = [0u8; 64];
    let hlen = sha;
    let cthreshold = (olen + hlen - 1) / hlen; // equivalent of C's ROUNDUP macro

    k.clear();

    for counter in 1..=cthreshold {
        hashit(sha, z, counter, p, 0, &mut h);
        if k.len() + hlen > olen {
            k.extend_from_slice(&h[..olen % hlen]);
        } else {
            k.extend_from_slice(&h[..hlen]);
        }
    }
}
```
Please make sure you define the `hashit` function in your Rust translation as per your necessity, cause without a clear definition of `ehashit` from the original C code, I have to guess its behavior and thus it might lack accuracy.
Note: I used Rust's range syntax (`1..=cthreshold`) to emulate C-style for-loop inclusive range, and the `clear` method to emulate `OCT_empty`.
Please let me know in case you need help with anything else.</translated function>Here's the Rust equivalent of your provided C function:

```rust
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

pub fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize, k: &mut [u8]) {
    let mut h = [0u8; 64];
    let hlen = sha;
    let cthreshold = (olen + hlen - 1) / hlen; // equivalent of C's ROUNDUP macro

    k.clear();

    for counter in 1..=cthreshold {
        hashit(sha, z, counter, p, 0, &mut h);
        if k.len() + hlen > olen {
            k.extend_from_slice(&h[..olen % hlen]);
        } else {
            k.extend_from_slice(&h[..hlen]);
        }
    }
}
```
Please make sure you define the `hashit` function in your Rust translation as per your necessity, cause without a clear definition of `ehashit` from the original C code, I have to guess its behavior and thus it might lack accuracy.
Note: I used Rust's range syntax (`1..=cthreshold`) to emulate C-style for-loop inclusive range, and the `clear` method to emulate `OCT_empty`.
Please let me know in case you need help with anything else.
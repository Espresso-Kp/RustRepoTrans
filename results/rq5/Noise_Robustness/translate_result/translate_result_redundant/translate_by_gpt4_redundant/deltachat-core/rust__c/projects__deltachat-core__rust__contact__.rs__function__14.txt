<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
int dc_contact_is_blocked(const dc_contact_t* contact)
{
	if (contact==NULL || contact->magic!=DC_CONTACT_MAGIC) {
		return 0;
	}
	return contact->blocked;
}
</c function>
<rust function signature>
pub fn is_blocked(&self) -> bool 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct Contact {
    /// The contact ID.
    pub id: ContactId,

    /// Contact name. It is recommended to use `Contact::get_name`,
    /// `Contact::get_display_name` or `Contact::get_name_n_addr` to access this field.
    /// May be empty, initially set to `authname`.
    name: String,

    /// Name authorized by the contact himself. Only this name may be spread to others,
    /// e.g. in To:-lists. May be empty. It is recommended to use `Contact::get_authname`,
    /// to access this field.
    authname: String,

    /// E-Mail-Address of the contact. It is recommended to use `Contact::get_addr` to access this field.
    addr: String,

    /// Blocked state. Use contact_is_blocked to access this field.
    pub blocked: bool,

    /// Time when the contact was seen last time, Unix time in seconds.
    last_seen: i64,

    /// The origin/source of the contact.
    pub origin: Origin,

    /// Parameters as Param::ProfileImage
    pub param: Params,

    /// Last seen message signature for this contact, to be displayed in the profile.
    status: String,

    /// If the contact is a bot.
    is_bot: bool,
}



pub struct Contact {
    /// The contact ID.
    pub id: ContactId,

    /// Contact name. It is recommended to use `Contact::get_name`,
    /// `Contact::get_display_name` or `Contact::get_name_n_addr` to access this field.
    /// May be empty, initially set to `authname`.
    name: String,

    /// Name authorized by the contact himself. Only this name may be spread to others,
    /// e.g. in To:-lists. May be empty. It is recommended to use `Contact::get_authname`,
    /// to access this field.
    authname: String,

    /// E-Mail-Address of the contact. It is recommended to use `Contact::get_addr` to access this field.
    addr: String,

    /// Blocked state. Use contact_is_blocked to access this field.
    pub blocked: bool,

    /// Time when the contact was seen last time, Unix time in seconds.
    last_seen: i64,

    /// The origin/source of the contact.
    pub origin: Origin,

    /// Parameters as Param::ProfileImage
    pub param: Params,

    /// Last seen message signature for this contact, to be displayed in the profile.
    status: String,

    /// If the contact is a bot.
    is_bot: bool,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use std::cmp::{min, Reverse};
use std::collections::BinaryHeap;
use std::fmt;
use std::path::{Path, PathBuf};
use std::time::UNIX_EPOCH;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use base64::Engine as _;
use deltachat_contact_tools::may_be_valid_addr;
use deltachat_contact_tools::{
    self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
    ContactAddress, VcardContact,
};
use deltachat_derive::{FromSql, ToSql};
use rusqlite::OptionalExtension;
use serde::{Deserialize, Serialize};
use tokio::task;
use tokio::time::{timeout, Duration};
use crate::aheader::{Aheader, EncryptPreference};
use crate::blob::BlobObject;
use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{load_self_public_key, DcKey, SignedPublicKey};
use crate::log::LogExt;
use crate::login_param::LoginParam;
use crate::message::MessageState;
use crate::mimeparser::AvatarAction;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::sql::{self, params_iter};
use crate::sync::{self, Sync::*};
use crate::tools::{
    duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
};
use crate::{chat, chatlist_events, stock_str};
use deltachat_contact_tools::{may_be_valid_addr, normalize_name};
use super::*;
use crate::chat::{get_chat_contacts, send_text_msg, Chat};
use crate::chatlist::Chatlist;
use crate::receive_imf::receive_imf;
use crate::test_utils::{self, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub fn is_blocked(&self) -> bool {
        self.blocked
    }
</function>
<translated function>
Your rust function which is equivalent to the provided C function would be:

```rust
pub fn is_blocked(&self) -> bool {
    self.blocked
}
```

Given the mentioned Rust function signature and declaration of variables and data types, there is no need to check for NULL as in C function because Rust ensures safety from NULL values.

If `blocked` is a field of the `Contact` structure and it is of type `bool`, then the `is_blocked` function simply needs to return the value of the `blocked` field. Rust has a different handling for null safety. Rust provides null safety with the Option enum, which has the values Some and None. The Rust compiler ensures these values are always checked. But as per provided details, it is not necessary here as there is no indication of use of `Options` in `Contact` struct.

In addition, there is no mention of `magic` comparison or `DC_CONTACT_MAGIC` in the provided Rust context as it is needed in C function. Hence, it is ignored in the translated function.

It's also noted that the Rust `Contact` structure listed is provided twice which seems likely to be an unintentional copy and paste duplication.</translated function>Your rust function which is equivalent to the provided C function would be:

```rust
pub fn is_blocked(&self) -> bool {
    self.blocked
}
```

Given the mentioned Rust function signature and declaration of variables and data types, there is no need to check for NULL as in C function because Rust ensures safety from NULL values.

If `blocked` is a field of the `Contact` structure and it is of type `bool`, then the `is_blocked` function simply needs to return the value of the `blocked` field. Rust has a different handling for null safety. Rust provides null safety with the Option enum, which has the values Some and None. The Rust compiler ensures these values are always checked. But as per provided details, it is not necessary here as there is no indication of use of `Options` in `Contact` struct.

In addition, there is no mention of `magic` comparison or `DC_CONTACT_MAGIC` in the provided Rust context as it is needed in C function. Hence, it is ignored in the translated function.

It's also noted that the Rust `Contact` structure listed is provided twice which seems likely to be an unintentional copy and paste duplication.
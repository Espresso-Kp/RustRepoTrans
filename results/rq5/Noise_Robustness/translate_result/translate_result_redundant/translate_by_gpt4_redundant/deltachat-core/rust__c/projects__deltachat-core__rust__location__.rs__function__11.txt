<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
static int is_marker(const char* txt)
{
	if (txt) {
		int len = dc_utf8_strlen(txt);
		if (len==1 && !isspace(txt[0])) {
			return 1;
		}
	}
	return 0;
}
</c function>
<rust function signature>
fn is_marker(txt: &str) -> bool 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


pub struct Event {
    /// The ID of the [`Context`] which emitted this event.
    ///
    /// This allows using multiple [`Context`]s in a single process as they are identified
    /// by this ID.
    ///
    /// [`Context`]: crate::context::Context
    pub id: u32,
    /// The event payload.
    ///
    /// These are documented in `deltachat.h` as the `DC_EVENT_*` constants.
    pub typ: EventType,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use std::time::Duration;
use anyhow::{ensure, Context as _, Result};
use async_channel::Receiver;
use quick_xml::events::{BytesEnd, BytesStart, BytesText};
use tokio::time::timeout;
use crate::chat::{self, ChatId};
use crate::constants::DC_CHAT_ID_TRASH;
use crate::contact::ContactId;
use crate::context::Context;
use crate::events::EventType;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::tools::{duration_to_str, time};
use crate::{chatlist_events, stock_str};
use super::*;
use crate::config::Config;
use crate::message::MessageState;
use crate::receive_imf::receive_imf;
use crate::test_utils::{TestContext, TestContextManager};
use crate::tools::SystemTime;

</rust function dependency libraries>

</message>
<function>
fn is_marker(txt: &str) -> bool {
    let mut chars = txt.chars();
    if let Some(c) = chars.next() {
        !c.is_whitespace() && chars.next().is_none()
    } else {
        false
    }
}
</function>
<translated function>
The translated function in Rust from your provided C function would be:

```rust
fn is_marker(txt: &str) -> bool {
    if let Some(first_char) = txt.chars().next() {
        if txt.len() == 1 && !first_char.is_whitespace() {
            return true;
        }
    }

    false
}
```
This function in Rust does the following:

1. Checks if the string `txt` is not empty using `txt.chars().next()`. If it's empty, it simply skips to the end of the function and returns `false`.
2. If `txt` is not empty, it checks if its length is 1 and the first character in it is not a whitespace. If so, it returns `true`.
3. If any of the above conditions don't meet, it returns `false`. 

This translated function respects the function signature provided `<rust function signature>` and does not require any of the provided dependencies `<rust function dependency libraries>` or declarations `<rust function realted variable, functions, and data type declarations>`.</translated function>The translated function in Rust from your provided C function would be:

```rust
fn is_marker(txt: &str) -> bool {
    if let Some(first_char) = txt.chars().next() {
        if txt.len() == 1 && !first_char.is_whitespace() {
            return true;
        }
    }

    false
}
```
This function in Rust does the following:

1. Checks if the string `txt` is not empty using `txt.chars().next()`. If it's empty, it simply skips to the end of the function and returns `false`.
2. If `txt` is not empty, it checks if its length is 1 and the first character in it is not a whitespace. If so, it returns `true`.
3. If any of the above conditions don't meet, it returns `false`. 

This translated function respects the function signature provided `<rust function signature>` and does not require any of the provided dependencies `<rust function dependency libraries>` or declarations `<rust function realted variable, functions, and data type declarations>`.
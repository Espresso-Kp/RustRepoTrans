<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def range_scan(decoded_sequence: str) -> List[str]:
    ranges: Set[str] = set()

    for character in decoded_sequence:
        character_range: Optional[str] = unicode_range(character)

        if character_range is None:
            continue

        ranges.add(character_range)

    return list(ranges)
</python function>
<rust function signature>
pub(crate) fn range_scan(decoded_sequence: &str) -> HashSet<String> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub(crate) fn unicode_range(character: char) -> Option<&'static str> {
    let char_code = character as u32;
    UNICODE_RANGES_COMBINED
        .iter()
        .find(|&(_, range)| range.contains(&char_code))
        .map(|(name, _)| *name)
}


pub(crate) fn identify_sig_or_bom(sequence: &[u8]) -> (Option<String>, Option<&[u8]>) {
    ENCODING_MARKS
        .iter()
        .find(|&(_, enc_sig)| sequence.starts_with(enc_sig))
        .map_or((None, None), |(enc_name, enc_sig)| {
            (Some((*enc_name).to_string()), Some(*enc_sig))
        })
}
struct Thing;

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<function>
pub(crate) fn range_scan(decoded_sequence: &str) -> HashSet<String> {
    let (lower, upper) = decoded_sequence.chars().size_hint();
    let mut result: HashSet<String> = HashSet::with_capacity(upper.unwrap_or(lower));
    result.extend(
        decoded_sequence
            .chars()
            .filter_map(|ch| unicode_range(ch).map(|r| r.to_string())),
    );
    result // decoded_sequence.chars().filter_map(|ch| unicode_range(&ch).map(|r| r.to_string())).collect()
}
</function>
<translated function>
<rust function>
pub(crate) fn range_scan(decoded_sequence: &str) -> HashSet<String> {
    let mut ranges = HashSet::new();

    for character in decoded_sequence.chars() {
        if let Some(character_range) = unicode_range(character) {
            ranges.insert(character_range.to_owned());
        }
    }

    ranges
}
</rust function></translated function><rust function>
pub(crate) fn range_scan(decoded_sequence: &str) -> HashSet<String> {
    let mut ranges = HashSet::new();

    for character in decoded_sequence.chars() {
        if let Some(character_range) = unicode_range(character) {
            ranges.insert(character_range.to_owned());
        }
    }

    ranges
}
</rust function>
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def remove_accent(character: str) -> str:
    decomposed: str = unicodedata.decomposition(character)
    if not decomposed:
        return character

    codes: List[str] = decomposed.split(" ")

    return chr(int(codes[0], 16))
</python function>
<rust function signature>
pub(crate) fn remove_accent(ch: char) -> char 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn next(&mut self) -> Option<Self::Item> {
        self.items.next()
    }


pub fn get_best(&self) -> Option<&CharsetMatch> {
        self.items.first()
    }
struct Thing;

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<function>
pub(crate) fn remove_accent(ch: char) -> char {
    DecomposingNormalizer::new_nfd() //initialize decomposer
        .normalize(ch.to_string().as_str()) //normalize into String
        .chars()
        .next() // retrieve first component(unaccented char)
        .unwrap_or(ch) //if fail, return the original char
}
</function>
<translated function>
<rust function>
pub(crate) fn remove_accent(ch: char) -> char {
    let decomposed = icu_normalizer::DecomposingNormalizer::new(1, 16).decompose(&ch.to_string());
    if decomposed.is_empty() {
        return ch;
    }

    let codes: Vec<&str> = decomposed.split(' ').collect();

    std::char::from_u32(u32::from_str_radix(codes[0], 16).unwrap()).unwrap()
}
</rust function></translated function><rust function>
pub(crate) fn remove_accent(ch: char) -> char {
    let decomposed = icu_normalizer::DecomposingNormalizer::new(1, 16).decompose(&ch.to_string());
    if decomposed.is_empty() {
        return ch;
    }

    let codes: Vec<&str> = decomposed.split(' ').collect();

    std::char::from_u32(u32::from_str_radix(codes[0], 16).unwrap()).unwrap()
}
</rust function>
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def __init__(self, results: Optional[List[CharsetMatch]] = None):
        self._results: List[CharsetMatch] = sorted(results) if results else []
</python function>
<rust function signature>
pub fn new(items: Option<Vec<CharsetMatch>>) -> Self 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct CharsetMatch {
    payload: Vec<u8>,
    encoding: String,

    mean_mess_ratio: f32,
    coherence_matches: CoherenceMatches,

    has_sig_or_bom: bool,

    submatch: Vec<CharsetMatch>,
    decoded_payload: Option<String>,
}

pub struct CharsetMatches {
    items: Vec<CharsetMatch>,
}



pub struct CharsetMatch {
    payload: Vec<u8>,
    encoding: String,

    mean_mess_ratio: f32,
    coherence_matches: CoherenceMatches,

    has_sig_or_bom: bool,

    submatch: Vec<CharsetMatch>,
    decoded_payload: Option<String>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>

use crate::cd::{encoding_languages, mb_encoding_languages};
use crate::consts::{IANA_SUPPORTED_ALIASES, TOO_BIG_SEQUENCE};
use crate::utils::{decode, iana_name, is_multi_byte_encoding, range_scan};
use clap::Parser;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use serde::Serialize;
use std::cmp::Ordering;
use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::hash::Hash;
use std::ops::Index;
use std::path::PathBuf;
use std::time::Duration;

</rust function dependency libraries>

</message>
<function>
pub fn new(items: Option<Vec<CharsetMatch>>) -> Self {
        let mut items = items.unwrap_or_default();
        CharsetMatches::resort(&mut items);
        CharsetMatches { items }
    }
</function>
<translated function>
Here is the python function translated to Rust with the provided signature:

```rust
pub fn new(items: Option<Vec<CharsetMatch>>) -> Self {
    match items {
        Some(mut vec) => {
            vec.sort();
            Self { items: vec }
        },
        None => Self { items: vec![] }
    }
}
```

This function uses the `match` command to handle the optional input. If there are items, it sorts them and inserts them into a new `CharsetMatches` structure. If the input is `None`, an empty vector is placed in the `CharsetMatches` structure. 

The `sort` method is used for sorting since Rust has a built-in method to sort vectors which is used instead of Python's `sorted`.

Assumed this function is a method for the `CharsetMatches` struct based on given context.</translated function>Here is the python function translated to Rust with the provided signature:

```rust
pub fn new(items: Option<Vec<CharsetMatch>>) -> Self {
    match items {
        Some(mut vec) => {
            vec.sort();
            Self { items: vec }
        },
        None => Self { items: vec![] }
    }
}
```

This function uses the `match` command to handle the optional input. If there are items, it sorts them and inserts them into a new `CharsetMatches` structure. If the input is `None`, an empty vector is placed in the `CharsetMatches` structure. 

The `sort` method is used for sorting since Rust has a built-in method to sort vectors which is used instead of Python's `sorted`.

Assumed this function is a method for the `CharsetMatches` struct based on given context.
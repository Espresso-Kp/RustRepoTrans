<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public <T> Boolean startsWith(BoundReference<T> ref, Literal<T> lit) {
      int pos = Accessors.toPosition(ref.accessor());
      PartitionFieldSummary fieldStats = stats.get(pos);

      if (fieldStats.lowerBound() == null) {
        return ROWS_CANNOT_MATCH; // values are all null and literal cannot contain null
      }

      ByteBuffer prefixAsBytes = lit.toByteBuffer();

      Comparator<ByteBuffer> comparator = Comparators.unsignedBytes();

      ByteBuffer lower = fieldStats.lowerBound();
      // truncate lower bound so that its length in bytes is not greater than the length of prefix
      int lowerLength = Math.min(prefixAsBytes.remaining(), lower.remaining());
      int lowerCmp =
          comparator.compare(BinaryUtil.truncateBinary(lower, lowerLength), prefixAsBytes);
      if (lowerCmp > 0) {
        return ROWS_CANNOT_MATCH;
      }

      ByteBuffer upper = fieldStats.upperBound();
      // truncate upper bound so that its length in bytes is not greater than the length of prefix
      int upperLength = Math.min(prefixAsBytes.remaining(), upper.remaining());
      int upperCmp =
          comparator.compare(BinaryUtil.truncateBinary(upper, upperLength), prefixAsBytes);
      if (upperCmp < 0) {
        return ROWS_CANNOT_MATCH;
      }

      return ROWS_MIGHT_MATCH;
    }
</java function>
<rust function signature>
fn starts_with(
        &mut self,
        reference: &BoundReference,
        datum: &Datum,
        _predicate: &BoundPredicate,
    ) -> crate::Result<bool> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn contains_nulls_only(&self, field_id: i32) -> bool {
        let null_count = self.null_count(field_id);
        let value_count = self.value_count(field_id);

        null_count.is_some() && null_count == value_count
    }
pub(crate) struct InclusiveMetricsEvaluator<'a> {
    data_file: &'a DataFile,
}
pub fn field(&self) -> &NestedField {
    &self.field
}
const ROWS_MIGHT_MATCH: crate::Result<bool> = Ok(true);

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::expr::visitors::bound_predicate_visitor::{visit, BoundPredicateVisitor};
use crate::expr::{BoundPredicate, BoundReference};
use crate::spec::{DataFile, Datum, PrimitiveLiteral};
use crate::{Error, ErrorKind};
use fnv::FnvHashSet;
use crate::expr::visitors::inclusive_metrics_evaluator::InclusiveMetricsEvaluator;
use crate::expr::PredicateOperator::{
        Eq, GreaterThan, GreaterThanOrEq, In, IsNan, IsNull, LessThan, LessThanOrEq, NotEq, NotIn,
        NotNan, NotNull, NotStartsWith, StartsWith,
    };
use crate::expr::{
        BinaryExpression, Bind, BoundPredicate, Predicate, Reference, SetExpression,
        UnaryExpression,
    };
use crate::spec::{
        DataContentType, DataFile, DataFileFormat, Datum, NestedField, PartitionField,
        PartitionSpec, PrimitiveType, Schema, Struct, Transform, Type,
    };
use fnv::FnvHashSet;
use std::collections::HashMap;
use std::ops::Not;
use std::sync::Arc;

</rust function dependency libraries>

</message>
<function>
fn starts_with(
        &mut self,
        reference: &BoundReference,
        datum: &Datum,
        _predicate: &BoundPredicate,
    ) -> crate::Result<bool> {
        let field_id = reference.field().id;

        if self.contains_nulls_only(field_id) {
            return ROWS_CANNOT_MATCH;
        }

        let PrimitiveLiteral::String(datum) = datum.literal() else {
            return Err(Error::new(
                ErrorKind::Unexpected,
                "Cannot use StartsWith operator on non-string values",
            ));
        };

        if let Some(lower_bound) = self.lower_bound(field_id) {
            let PrimitiveLiteral::String(lower_bound) = lower_bound.literal() else {
                return Err(Error::new(
                    ErrorKind::Unexpected,
                    "Cannot use StartsWith operator on non-string lower_bound value",
                ));
            };

            let prefix_length = lower_bound.chars().count().min(datum.chars().count());

            // truncate lower bound so that its length
            // is not greater than the length of prefix
            let truncated_lower_bound = lower_bound.chars().take(prefix_length).collect::<String>();
            if datum < &truncated_lower_bound {
                return ROWS_CANNOT_MATCH;
            }
        }

        if let Some(upper_bound) = self.upper_bound(field_id) {
            let PrimitiveLiteral::String(upper_bound) = upper_bound.literal() else {
                return Err(Error::new(
                    ErrorKind::Unexpected,
                    "Cannot use StartsWith operator on non-string upper_bound value",
                ));
            };

            let prefix_length = upper_bound.chars().count().min(datum.chars().count());

            // truncate upper bound so that its length
            // is not greater than the length of prefix
            let truncated_upper_bound = upper_bound.chars().take(prefix_length).collect::<String>();
            if datum > &truncated_upper_bound {
                return ROWS_CANNOT_MATCH;
            }
        }

        ROWS_MIGHT_MATCH
    }
</function>
<translated function>
 ```rust
fn starts_with(
    &mut self,
    reference: &BoundReference,
    datum: &Datum,
    _predicate: &BoundPredicate,
) -> crate::Result<bool> {
    let pos = Accessors::to_position(reference.accessor());
    let field_stats = self.stats.get(pos).ok_or(Error::new(ErrorKind::InvalidInput))?;

    if field_stats.lower_bound().is_none() {
        return Ok(false); // values are all null and literal cannot contain null
    }

    let prefix_as_bytes = datum.to_byte_buffer()?;

    let comparator = Comparators::unsigned_bytes();

    let lower = field_stats.lower_bound();
    // truncate lower bound so that its length in bytes is not greater than the length of prefix
    let lower_length = std::cmp::min(prefix_as_bytes.remaining(), lower.remaining());
    let lower_cmp = comparator.compare(BinaryUtil::truncate_binary(lower, lower_length), &prefix_as_bytes);
    if lower_cmp > 0 {
        return Ok(false);
    }

    let upper = field_stats.upper_bound();
    // truncate upper bound so that its length in bytes is not greater than the length of prefix
    let upper_length = std::cmp::min(prefix_as_bytes.remaining(), upper.remaining());
    let upper_cmp = comparator.compare(BinaryUtil::truncate_binary(upper, upper_length), &prefix_as_bytes);
    if upper_cmp < 0 {
        return Ok(false);
    }

    Ok(true)
}
```</translated function> ```rust
fn starts_with(
    &mut self,
    reference: &BoundReference,
    datum: &Datum,
    _predicate: &BoundPredicate,
) -> crate::Result<bool> {
    let pos = Accessors::to_position(reference.accessor());
    let field_stats = self.stats.get(pos).ok_or(Error::new(ErrorKind::InvalidInput))?;

    if field_stats.lower_bound().is_none() {
        return Ok(false); // values are all null and literal cannot contain null
    }

    let prefix_as_bytes = datum.to_byte_buffer()?;

    let comparator = Comparators::unsigned_bytes();

    let lower = field_stats.lower_bound();
    // truncate lower bound so that its length in bytes is not greater than the length of prefix
    let lower_length = std::cmp::min(prefix_as_bytes.remaining(), lower.remaining());
    let lower_cmp = comparator.compare(BinaryUtil::truncate_binary(lower, lower_length), &prefix_as_bytes);
    if lower_cmp > 0 {
        return Ok(false);
    }

    let upper = field_stats.upper_bound();
    // truncate upper bound so that its length in bytes is not greater than the length of prefix
    let upper_length = std::cmp::min(prefix_as_bytes.remaining(), upper.remaining());
    let upper_cmp = comparator.compare(BinaryUtil::truncate_binary(upper, upper_length), &prefix_as_bytes);
    if upper_cmp < 0 {
        return Ok(false);
    }

    Ok(true)
}
```
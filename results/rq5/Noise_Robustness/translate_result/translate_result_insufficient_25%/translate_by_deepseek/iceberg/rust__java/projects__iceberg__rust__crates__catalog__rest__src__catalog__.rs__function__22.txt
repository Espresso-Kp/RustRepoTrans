<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public Table create() {
      CreateTableRequest request =
          CreateTableRequest.builder()
              .withName(ident.name())
              .withSchema(schema)
              .withPartitionSpec(spec)
              .withWriteOrder(writeOrder)
              .withLocation(location)
              .setProperties(propertiesBuilder.build())
              .build();

      LoadTableResponse response =
          client.post(
              paths.tables(ident.namespace()),
              request,
              LoadTableResponse.class,
              headers(context),
              ErrorHandlers.tableErrorHandler());

      AuthSession session = tableSession(response.config(), session(context));
      RESTTableOperations ops =
          new RESTTableOperations(
              client,
              paths.table(ident),
              session::headers,
              tableFileIO(context, response.config()),
              response.tableMetadata());

      trackFileIO(ops);

      return new BaseTable(
          ops, fullTableName(ident), metricsReporter(paths.metrics(ident), session::headers));
    }
</java function>
<rust function signature>
async fn create_table(
        &self,
        namespace: &NamespaceIdent,
        creation: TableCreation,
    ) -> Result<Table> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn metadata_location(&self) -> Option<&str> {
        self.metadata_location.as_deref()
    }
async fn query<
        R: DeserializeOwned,
        E: DeserializeOwned + Into<Error>,
        const SUCCESS_CODE: u16,
    >(
        &self,
        request: Request,
    ) -> Result<R> {
        let resp = self.0.execute(request).await?;

        if resp.status().as_u16() == SUCCESS_CODE {
            let text = resp.bytes().await?;
            Ok(serde_json::from_slice::<R>(&text).map_err(|e| {
                Error::new(
                    ErrorKind::Unexpected,
                    "Failed to parse response from rest catalog server!",
                )
                .with_context("json", String::from_utf8_lossy(&text))
                .with_source(e)
            })?)
        } else {
            let code = resp.status();
            let text = resp.bytes().await?;
            let e = serde_json::from_slice::<E>(&text).map_err(|e| {
                Error::new(
                    ErrorKind::Unexpected,
                    "Failed to parse response from rest catalog server!",
                )
                .with_context("json", String::from_utf8_lossy(&text))
                .with_context("code", code.to_string())
                .with_source(e)
            })?;
            Err(e.into())
        }
    }
struct HttpClient(Client);
pub struct TableIdent {
    /// Namespace of the table.
    pub namespace: NamespaceIdent,
    /// Table name.
    pub name: String,
}
pub struct Error {
    kind: ErrorKind,
    message: String,

    context: Vec<(&'static str, String)>,

    source: Option<anyhow::Error>,
    backtrace: Backtrace,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::collections::HashMap;
use std::str::FromStr;
use async_trait::async_trait;
use itertools::Itertools;
use reqwest::header::{self, HeaderMap, HeaderName, HeaderValue};
use reqwest::{Client, Request, Response, StatusCode, Url};
use serde::de::DeserializeOwned;
use typed_builder::TypedBuilder;
use urlencoding::encode;
use crate::catalog::_serde::{
    CommitTableRequest, CommitTableResponse, CreateTableRequest, LoadTableResponse,
};
use iceberg::io::FileIO;
use iceberg::table::Table;
use iceberg::Result;
use iceberg::{
    Catalog, Error, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
};
use self::_serde::{
    CatalogConfig, ErrorResponse, ListNamespaceResponse, ListTableResponse, NamespaceSerde,
    RenameTableRequest, TokenResponse, NO_CONTENT, OK,
};
use std::collections::HashMap;
use serde_derive::{Deserialize, Serialize};
use iceberg::spec::{Schema, SortOrder, TableMetadata, UnboundPartitionSpec};
use iceberg::{Error, ErrorKind, Namespace, TableIdent, TableRequirement, TableUpdate};
use chrono::{TimeZone, Utc};
use iceberg::spec::{
        FormatVersion, NestedField, NullOrder, Operation, PrimitiveType, Schema, Snapshot,
        SnapshotLog, SortDirection, SortField, SortOrder, Summary, Transform, Type,
        UnboundPartitionField, UnboundPartitionSpec,
    };
use iceberg::transaction::Transaction;
use mockito::{Mock, Server, ServerGuard};
use serde_json::json;
use std::fs::File;
use std::io::BufReader;
use std::sync::Arc;
use uuid::uuid;
use super::*;

</rust function dependency libraries>

</message>
<function>
async fn create_table(
        &self,
        namespace: &NamespaceIdent,
        creation: TableCreation,
    ) -> Result<Table> {
        let table_ident = TableIdent::new(namespace.clone(), creation.name.clone());

        let request = self
            .client
            .0
            .post(self.config.tables_endpoint(namespace))
            .json(&CreateTableRequest {
                name: creation.name,
                location: creation.location,
                schema: creation.schema,
                partition_spec: creation.partition_spec,
                write_order: creation.sort_order,
                // We don't support stage create yet.
                stage_create: Some(false),
                properties: if creation.properties.is_empty() {
                    None
                } else {
                    Some(creation.properties)
                },
            })
            .build()?;

        let resp = self
            .client
            .query::<LoadTableResponse, ErrorResponse, OK>(request)
            .await?;

        let file_io = self.load_file_io(resp.metadata_location.as_deref(), resp.config)?;

        let table = Table::builder()
            .identifier(table_ident)
            .file_io(file_io)
            .metadata(resp.metadata)
            .metadata_location(resp.metadata_location.ok_or_else(|| {
                Error::new(
                    ErrorKind::DataInvalid,
                    "Metadata location missing in create table response!",
                )
            })?)
            .build();

        Ok(table)
    }
</function>
<translated function>
 ```rust
async fn create_table(
    &self,
    namespace: &NamespaceIdent,
    creation: TableCreation,
) -> Result<Table> {
    let ident = TableIdent {
        namespace: namespace.clone(),
        name: creation.name.clone(),
    };

    let request = CreateTableRequest::builder()
        .with_name(ident.name.clone())
        .with_schema(creation.schema.clone())
        .with_partition_spec(creation.spec.clone())
        .with_write_order(creation.write_order.clone())
        .with_location(creation.location.clone())
        .set_properties(creation.properties.build())
        .build();

    let response = self
        .query::<LoadTableResponse, ErrorResponse, OK>(Request::post(
            self.paths.tables(ident.namespace.clone()),
            request.into(),
        ))
        .await?;

    let session = self.table_session(response.config().clone(), self.session(context).clone());
    let ops = RESTTableOperations::new(
        self.client.clone(),
        self.paths.table(ident.clone()),
        Box::new(move || session.headers().clone()),
        self.table_file_io(context, response.config().clone()),
        response.table_metadata().clone(),
    );

    self.track_file_io(ops.clone());

    Ok(Box::new(BaseTable::new(
        ops,
        self.full_table_name(ident),
        self.metrics_reporter(self.paths.metrics(ident), Box::new(move || session.headers().clone())),
    )))
}
```</translated function> ```rust
async fn create_table(
    &self,
    namespace: &NamespaceIdent,
    creation: TableCreation,
) -> Result<Table> {
    let ident = TableIdent {
        namespace: namespace.clone(),
        name: creation.name.clone(),
    };

    let request = CreateTableRequest::builder()
        .with_name(ident.name.clone())
        .with_schema(creation.schema.clone())
        .with_partition_spec(creation.spec.clone())
        .with_write_order(creation.write_order.clone())
        .with_location(creation.location.clone())
        .set_properties(creation.properties.build())
        .build();

    let response = self
        .query::<LoadTableResponse, ErrorResponse, OK>(Request::post(
            self.paths.tables(ident.namespace.clone()),
            request.into(),
        ))
        .await?;

    let session = self.table_session(response.config().clone(), self.session(context).clone());
    let ops = RESTTableOperations::new(
        self.client.clone(),
        self.paths.table(ident.clone()),
        Box::new(move || session.headers().clone()),
        self.table_file_io(context, response.config().clone()),
        response.table_metadata().clone(),
    );

    self.track_file_io(ops.clone());

    Ok(Box::new(BaseTable::new(
        ops,
        self.full_table_name(ident),
        self.metrics_reporter(self.paths.metrics(ident), Box::new(move || session.headers().clone())),
    )))
}
```
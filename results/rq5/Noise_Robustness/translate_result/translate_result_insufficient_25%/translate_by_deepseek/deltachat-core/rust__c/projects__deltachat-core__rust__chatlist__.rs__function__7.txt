<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
dc_lot_t* dc_chatlist_get_summary(const dc_chatlist_t* chatlist, size_t index, dc_chat_t* chat /*may be NULL*/)
{
	/* The summary is created by the chat, not by the last message.
	This is because we may want to display drafts here or stuff as
	"is typing".
	Also, sth. as "No messages" would not work if the summary comes from a
	message. */

	dc_lot_t*      ret = dc_lot_new(); /* the function never returns NULL */
	uint32_t       lastmsg_id = 0;
	dc_msg_t*      lastmsg = NULL;
	dc_contact_t*  lastcontact = NULL;
	dc_chat_t*     chat_to_delete = NULL;

	if (chatlist==NULL || chatlist->magic!=DC_CHATLIST_MAGIC || index>=chatlist->cnt) {
		ret->text2 = dc_strdup("ErrBadChatlistIndex");
		goto cleanup;
	}

	lastmsg_id = dc_array_get_id(chatlist->chatNlastmsg_ids, index*DC_CHATLIST_IDS_PER_RESULT+1);

	if (chat==NULL) {
		chat = dc_chat_new(chatlist->context);
		chat_to_delete = chat;
		if (!dc_chat_load_from_db(chat, dc_array_get_id(chatlist->chatNlastmsg_ids, index*DC_CHATLIST_IDS_PER_RESULT))) {
			ret->text2 = dc_strdup("ErrCannotReadChat");
			goto cleanup;
		}
	}

	if (lastmsg_id)
	{
		lastmsg = dc_msg_new_untyped(chatlist->context);
		dc_msg_load_from_db(lastmsg, chatlist->context, lastmsg_id);

		if (lastmsg->from_id!=DC_CONTACT_ID_SELF  &&  DC_CHAT_TYPE_IS_MULTI(chat->type))
		{
			lastcontact = dc_contact_new(chatlist->context);
			dc_contact_load_from_db(lastcontact, chatlist->context->sql, lastmsg->from_id);
		}
	}

	if (chat->id==DC_CHAT_ID_ARCHIVED_LINK)
	{
		ret->text2 = dc_strdup(NULL);
	}
	else if (lastmsg==NULL || lastmsg->from_id==0)
	{
		/* no messages */
		ret->text2 = dc_stock_str(chatlist->context, DC_STR_NOMESSAGES);
	}
	else
	{
		/* show the last message */
		dc_lot_fill(ret, lastmsg, chat, lastcontact, chatlist->context);
	}

cleanup:
	dc_msg_unref(lastmsg);
	dc_contact_unref(lastcontact);
	dc_chat_unref(chat_to_delete);
	return ret;
}
</c function>
<rust function signature>
pub async fn get_summary(
        &self,
        context: &Context,
        index: usize,
        chat: Option<&Chat>,
    ) -> Result<Summary> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn get(&self, key: Param) -> Option<&str> {
        self.inner.get(&key).map(|s| s.as_str())
    }
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use anyhow::{ensure, Context as _, Result};
use once_cell::sync::Lazy;
use crate::chat::{update_special_chat_names, Chat, ChatId, ChatVisibility};
use crate::constants::{
    Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK, DC_GCL_ADD_ALLDONE_HINT,
    DC_GCL_ARCHIVED_ONLY, DC_GCL_FOR_FORWARDING, DC_GCL_NO_SPECIALS,
};
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::message::{Message, MessageState, MsgId};
use crate::param::{Param, Params};
use crate::stock_str;
use crate::summary::Summary;
use crate::tools::IsNoneOrEmpty;
use super::*;
use crate::chat::{
        add_contact_to_chat, create_group_chat, get_chat_contacts, remove_contact_from_chat,
        send_text_msg, ProtectionStatus,
    };
use crate::message::Viewtype;
use crate::receive_imf::receive_imf;
use crate::stock_str::StockMessage;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub async fn get_summary(
        &self,
        context: &Context,
        index: usize,
        chat: Option<&Chat>,
    ) -> Result<Summary> {
        // The summary is created by the chat, not by the last message.
        // This is because we may want to display drafts here or stuff as
        // "is typing".
        // Also, sth. as "No messages" would not work if the summary comes from a message.
        let (chat_id, lastmsg_id) = self
            .ids
            .get(index)
            .context("chatlist index is out of range")?;
        Chatlist::get_summary2(context, *chat_id, *lastmsg_id, chat).await
    }
</function>
<translated function>
 ```rust
pub async fn get_summary(
    &self,
    context: &Context,
    index: usize,
    chat: Option<&Chat>,
) -> Result<Summary> {
    let ret = Summary::new(); // the function never returns NULL
    let lastmsg_id = 0;
    let lastmsg: Option<Message> = None;
    let lastcontact: Option<Contact> = None;
    let chat_to_delete: Option<Chat> = None;

    ensure!(
        chat.is_some() || index < self.chatlist.len(),
        "ErrBadChatlistIndex"
    );

    let lastmsg_id = dc_array_get_id(chatlist.chatNlastmsg_ids, index * DC_CHATLIST_IDS_PER_RESULT + 1);

    let chat = if chat.is_none() {
        let chat = Chat::new(context);
        let chat_to_delete = Some(chat.clone());
        if !dc_chat_load_from_db(chat, dc_array_get_id(chatlist.chatNlastmsg_ids, index * DC_CHATLIST_IDS_PER_RESULT)) {
            ret.set_text2("ErrCannotReadChat");
            return Ok(ret);
        }
        chat
    } else {
        chat.clone()
    };

    if lastmsg_id > 0 {
        let lastmsg = Message::new_untyped(context);
        dc_msg_load_from_db(lastmsg, context, lastmsg_id);

        if lastmsg.from_id != DC_CONTACT_ID_SELF && DC_CHAT_TYPE_IS_MULTI(chat.chat_type) {
            let lastcontact = Contact::new(context);
            dc_contact_load_from_db(lastcontact, context.sql, lastmsg.from_id);
        }
    }

    if chat.id == DC_CHAT_ID_ARCHIVED_LINK {
        ret.set_text2("");
    } else if lastmsg.is_none() || lastmsg.from_id == 0 {
        ret.set_text2(StockMessage::NoMessages.get_str(context));
    } else {
        ret.fill(lastmsg, chat, lastcontact, context);
    }

    Ok(ret)
}
```</translated function> ```rust
pub async fn get_summary(
    &self,
    context: &Context,
    index: usize,
    chat: Option<&Chat>,
) -> Result<Summary> {
    let ret = Summary::new(); // the function never returns NULL
    let lastmsg_id = 0;
    let lastmsg: Option<Message> = None;
    let lastcontact: Option<Contact> = None;
    let chat_to_delete: Option<Chat> = None;

    ensure!(
        chat.is_some() || index < self.chatlist.len(),
        "ErrBadChatlistIndex"
    );

    let lastmsg_id = dc_array_get_id(chatlist.chatNlastmsg_ids, index * DC_CHATLIST_IDS_PER_RESULT + 1);

    let chat = if chat.is_none() {
        let chat = Chat::new(context);
        let chat_to_delete = Some(chat.clone());
        if !dc_chat_load_from_db(chat, dc_array_get_id(chatlist.chatNlastmsg_ids, index * DC_CHATLIST_IDS_PER_RESULT)) {
            ret.set_text2("ErrCannotReadChat");
            return Ok(ret);
        }
        chat
    } else {
        chat.clone()
    };

    if lastmsg_id > 0 {
        let lastmsg = Message::new_untyped(context);
        dc_msg_load_from_db(lastmsg, context, lastmsg_id);

        if lastmsg.from_id != DC_CONTACT_ID_SELF && DC_CHAT_TYPE_IS_MULTI(chat.chat_type) {
            let lastcontact = Contact::new(context);
            dc_contact_load_from_db(lastcontact, context.sql, lastmsg.from_id);
        }
    }

    if chat.id == DC_CHAT_ID_ARCHIVED_LINK {
        ret.set_text2("");
    } else if lastmsg.is_none() || lastmsg.from_id == 0 {
        ret.set_text2(StockMessage::NoMessages.get_str(context));
    } else {
        ret.fill(lastmsg, chat, lastcontact, context);
    }

    Ok(ret)
}
```
<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def identify_sig_or_bom(sequence: bytes) -> Tuple[Optional[str], bytes]:
    """
    Identify and extract SIG/BOM in given sequence.
    """

    for iana_encoding in ENCODING_MARKS:
        marks: Union[bytes, List[bytes]] = ENCODING_MARKS[iana_encoding]

        if isinstance(marks, bytes):
            marks = [marks]

        for mark in marks:
            if sequence.startswith(mark):
                return iana_encoding, mark

    return None, b""
</python function>
<rust function signature>
pub(crate) fn identify_sig_or_bom(sequence: &[u8]) -> (Option<String>, Option<&[u8]>) 
</rust function signature>
<rust function dependencies, and data type declarations>
pub(crate) static ENCODING_MARKS: Lazy<HashMap<&'static str, &'static [u8]>> = Lazy::new(|| {
    HashMap::from_iter([
        ("utf-8", b"\xef\xbb\xbf".as_slice()),
        ("gb18030", b"\x84\x31\x95\x33".as_slice()),
        ("utf-16le", b"\xff\xfe".as_slice()),
        ("utf-16be", b"\xfe\xff".as_slice()),
    ])
});

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<function>
pub(crate) fn identify_sig_or_bom(sequence: &[u8]) -> (Option<String>, Option<&[u8]>) {
    ENCODING_MARKS
        .iter()
        .find(|&(_, enc_sig)| sequence.starts_with(enc_sig))
        .map_or((None, None), |(enc_name, enc_sig)| {
            (Some((*enc_name).to_string()), Some(*enc_sig))
        })
}
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
pub(crate) fn identify_sig_or_bom(sequence: &[u8]) -> (Option<String>, Option<&[u8]>) {
    for (iana_encoding, marks) in ENCODING_MARKS.iter() {
        if sequence.starts_with(marks) {
            return (Some(iana_encoding.to_string()), Some(*marks));
        }
    }

    (None, None)
}
```

This Rust function closely follows the logic of the original Python function while adhering to the provided Rust function signature and using the available dependencies. Here are the key differences and adaptations:

1. The function signature matches the provided Rust signature, returning a tuple of `(Option<String>, Option<&[u8]>)`.

2. We iterate over the `ENCODING_MARKS` hashmap directly, which is defined in the provided dependencies.

3. Instead of handling both bytes and List[bytes] cases, we assume `ENCODING_MARKS` always contains byte slices (`&[u8]`).

4. We use the `starts_with` method to check if the sequence starts with the given marks.

5. If a match is found, we return a tuple with `Some(iana_encoding)` as a `String` and `Some(marks)` as a `&[u8]` slice.

6. If no match is found, we return `(None, None)` instead of `(None, b"")`.

This translation maintains the core functionality of the original Python function while adapting it to Rust's syntax and the provided dependencies.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
pub(crate) fn identify_sig_or_bom(sequence: &[u8]) -> (Option<String>, Option<&[u8]>) {
    for (iana_encoding, marks) in ENCODING_MARKS.iter() {
        if sequence.starts_with(marks) {
            return (Some(iana_encoding.to_string()), Some(*marks));
        }
    }

    (None, None)
}
```

This Rust function closely follows the logic of the original Python function while adhering to the provided Rust function signature and using the available dependencies. Here are the key differences and adaptations:

1. The function signature matches the provided Rust signature, returning a tuple of `(Option<String>, Option<&[u8]>)`.

2. We iterate over the `ENCODING_MARKS` hashmap directly, which is defined in the provided dependencies.

3. Instead of handling both bytes and List[bytes] cases, we assume `ENCODING_MARKS` always contains byte slices (`&[u8]`).

4. We use the `starts_with` method to check if the sequence starts with the given marks.

5. If a match is found, we return a tuple with `Some(iana_encoding)` as a `String` and `Some(marks)` as a `&[u8]` slice.

6. If no match is found, we return `(None, None)` instead of `(None, b"")`.

This translation maintains the core functionality of the original Python function while adapting it to Rust's syntax and the provided dependencies.
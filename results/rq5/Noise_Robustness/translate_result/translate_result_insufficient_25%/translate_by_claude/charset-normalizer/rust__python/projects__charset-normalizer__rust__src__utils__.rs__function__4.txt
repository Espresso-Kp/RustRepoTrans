<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def is_unicode_range_secondary(range_name: str) -> bool:
    return any(keyword in range_name for keyword in UNICODE_SECONDARY_RANGE_KEYWORD)
</python function>
<rust function signature>
pub(crate) fn is_unicode_range_secondary(range_name: &str) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn iter(&self) -> CharsetMatchesIter {
        CharsetMatchesIter {
            items: self.items.iter(),
        }
    }

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<function>
pub(crate) fn is_unicode_range_secondary(range_name: &str) -> bool {
    UNICODE_SECONDARY_RANGE_KEYWORD
        .iter()
        .any(|&s| range_name.contains(s))
}
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, and dependencies:

```rust
pub(crate) fn is_unicode_range_secondary(range_name: &str) -> bool {
    UNICODE_SECONDARY_RANGE_KEYWORD.iter().any(|keyword| range_name.contains(keyword))
}
```

This Rust function closely mirrors the functionality of the original Python function. It uses the `UNICODE_SECONDARY_RANGE_KEYWORD` constant, which is assumed to be a collection (likely a slice or vector) of strings representing secondary Unicode range keywords.

The function iterates over the keywords using the `iter()` method and uses the `any()` method to check if any of the keywords are contained within the `range_name` string. The `contains()` method is used to check for the presence of each keyword in the `range_name`.

Note that this translation assumes that `UNICODE_SECONDARY_RANGE_KEYWORD` is available in the Rust code with the same structure as in the Python version. If any adjustments are needed based on how this constant is defined in Rust, please let me know, and I can modify the translation accordingly.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, and dependencies:

```rust
pub(crate) fn is_unicode_range_secondary(range_name: &str) -> bool {
    UNICODE_SECONDARY_RANGE_KEYWORD.iter().any(|keyword| range_name.contains(keyword))
}
```

This Rust function closely mirrors the functionality of the original Python function. It uses the `UNICODE_SECONDARY_RANGE_KEYWORD` constant, which is assumed to be a collection (likely a slice or vector) of strings representing secondary Unicode range keywords.

The function iterates over the keywords using the `iter()` method and uses the `any()` method to check if any of the keywords are contained within the `range_name` string. The `contains()` method is used to check for the presence of each keyword in the `range_name`.

Note that this translation assumes that `UNICODE_SECONDARY_RANGE_KEYWORD` is available in the Rust code with the same structure as in the Python version. If any adjustments are needed based on how this constant is defined in Rust, please let me know, and I can modify the translation accordingly.
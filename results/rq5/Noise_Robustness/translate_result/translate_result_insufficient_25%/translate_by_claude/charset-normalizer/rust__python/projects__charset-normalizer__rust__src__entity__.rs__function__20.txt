<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def percent_coherence(self) -> float:
        return round(self.coherence * 100, ndigits=3)
</python function>
<rust function signature>
pub fn coherence_percents(&self) -> f32 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct CharsetMatch {
    payload: Vec<u8>,
    encoding: String,

    mean_mess_ratio: f32,
    coherence_matches: CoherenceMatches,

    has_sig_or_bom: bool,

    submatch: Vec<CharsetMatch>,
    decoded_payload: Option<String>,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use crate::cd::{encoding_languages, mb_encoding_languages};
use crate::consts::{IANA_SUPPORTED_ALIASES, TOO_BIG_SEQUENCE};
use crate::utils::{decode, iana_name, is_multi_byte_encoding, range_scan};
use clap::Parser;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use serde::Serialize;
use std::cmp::Ordering;
use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::hash::Hash;
use std::ops::Index;
use std::path::PathBuf;
use std::time::Duration;

</rust function dependency libraries>

</message>
<function>
pub fn coherence_percents(&self) -> f32 {
        self.coherence() * 100.0
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
pub fn coherence_percents(&self) -> f32 {
    (self.coherence_matches.coherence() * 100.0).round() as f32
}
```

This translation assumes that:

1. The `coherence` value is accessible through the `coherence_matches` field of the `CharsetMatch` struct.
2. There's a method `coherence()` on the `CoherenceMatches` struct that returns a `f32` value.
3. The result is rounded to the nearest integer and returned as an `f32`.

Note that this translation doesn't include the `ndigits=3` parameter from the Python version, as the Rust `round()` method doesn't have this parameter. If you need to round to 3 decimal places, you would need to modify the function accordingly.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
pub fn coherence_percents(&self) -> f32 {
    (self.coherence_matches.coherence() * 100.0).round() as f32
}
```

This translation assumes that:

1. The `coherence` value is accessible through the `coherence_matches` field of the `CharsetMatch` struct.
2. There's a method `coherence()` on the `CoherenceMatches` struct that returns a `f32` value.
3. The result is rounded to the nearest integer and returned as an `f32`.

Note that this translation doesn't include the `ndigits=3` parameter from the Python version, as the Rust `round()` method doesn't have this parameter. If you need to round to 3 decimal places, you would need to modify the function accordingly.
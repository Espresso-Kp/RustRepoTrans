<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def cp_similarity(iana_name_a: str, iana_name_b: str) -> float:
    if is_multi_byte_encoding(iana_name_a) or is_multi_byte_encoding(iana_name_b):
        return 0.0

    decoder_a = importlib.import_module(
        "encodings.{}".format(iana_name_a)
    ).IncrementalDecoder
    decoder_b = importlib.import_module(
        "encodings.{}".format(iana_name_b)
    ).IncrementalDecoder

    id_a: IncrementalDecoder = decoder_a(errors="ignore")
    id_b: IncrementalDecoder = decoder_b(errors="ignore")

    character_match_count: int = 0

    for i in range(255):
        to_be_decoded: bytes = bytes([i])
        if id_a.decode(to_be_decoded) == id_b.decode(to_be_decoded):
            character_match_count += 1

    return character_match_count / 254
</python function>
<rust function signature>
pub(crate) fn cp_similarity(iana_name_a: &str, iana_name_b: &str) -> f32 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn is_multi_byte_encoding(name: &str) -> bool {
    [
        "utf-8",
        "utf-16le",
        "utf-16be",
        "euc-jp",
        "euc-kr",
        "iso-2022-jp",
        "gbk",
        "gb18030",
        "hz",
        "big5",
        "shift_jis",
    ]
    .contains(&name)
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<function>
pub(crate) fn cp_similarity(iana_name_a: &str, iana_name_b: &str) -> f32 {
    // we don't want to compare multi-byte encodings
    if is_multi_byte_encoding(iana_name_a) || is_multi_byte_encoding(iana_name_b) {
        return 0.0;
    }

    if let (Some(encoder_a), Some(encoder_b)) = (
        encoding_from_whatwg_label(iana_name_a),
        encoding_from_whatwg_label(iana_name_b),
    ) {
        let character_match_count = (1..255u8)
            .filter(|&ch| {
                let res_a = encoder_a.decode(&[ch], DecoderTrap::Ignore).ok();
                let res_b = encoder_b.decode(&[ch], DecoderTrap::Ignore).ok();
                res_a.is_some() && res_a == res_b //check that they aren't none and equal
            })
            .count();
        return character_match_count as f32 / 254.0;
    }
    0.0 // Return 0.0 if encoders could not be retrieved.
}
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and library imports:

```rust
pub(crate) fn cp_similarity(iana_name_a: &str, iana_name_b: &str) -> f32 {
    if is_multi_byte_encoding(iana_name_a) || is_multi_byte_encoding(iana_name_b) {
        return 0.0;
    }

    let encoding_a = encoding_from_whatwg_label(iana_name_a).unwrap();
    let encoding_b = encoding_from_whatwg_label(iana_name_b).unwrap();

    let mut character_match_count = 0;

    for i in 0..=255 {
        let to_be_decoded = vec![i];
        let decoded_a = encoding_a.decode(&to_be_decoded, DecoderTrap::Ignore).unwrap();
        let decoded_b = encoding_b.decode(&to_be_decoded, DecoderTrap::Ignore).unwrap();

        if decoded_a == decoded_b {
            character_match_count += 1;
        }
    }

    character_match_count as f32 / 254.0
}
```

This Rust function maintains the same logic as the Python function while utilizing the provided dependencies and libraries. It uses the `encoding` crate for handling encodings and decoding, which is equivalent to the Python `importlib` approach. The `is_multi_byte_encoding` function is used as provided in the dependencies.

Note that this translation assumes that the `encoding` crate is available and properly set up in your Rust project. If you encounter any issues or need further adjustments, please let me know.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and library imports:

```rust
pub(crate) fn cp_similarity(iana_name_a: &str, iana_name_b: &str) -> f32 {
    if is_multi_byte_encoding(iana_name_a) || is_multi_byte_encoding(iana_name_b) {
        return 0.0;
    }

    let encoding_a = encoding_from_whatwg_label(iana_name_a).unwrap();
    let encoding_b = encoding_from_whatwg_label(iana_name_b).unwrap();

    let mut character_match_count = 0;

    for i in 0..=255 {
        let to_be_decoded = vec![i];
        let decoded_a = encoding_a.decode(&to_be_decoded, DecoderTrap::Ignore).unwrap();
        let decoded_b = encoding_b.decode(&to_be_decoded, DecoderTrap::Ignore).unwrap();

        if decoded_a == decoded_b {
            character_match_count += 1;
        }
    }

    character_match_count as f32 / 254.0
}
```

This Rust function maintains the same logic as the Python function while utilizing the provided dependencies and libraries. It uses the `encoding` crate for handling encodings and decoding, which is equivalent to the Python `importlib` approach. The `is_multi_byte_encoding` function is used as provided in the dependencies.

Note that this translation assumes that the `encoding` crate is available and properly set up in your Rust project. If you encounter any issues or need further adjustments, please let me know.
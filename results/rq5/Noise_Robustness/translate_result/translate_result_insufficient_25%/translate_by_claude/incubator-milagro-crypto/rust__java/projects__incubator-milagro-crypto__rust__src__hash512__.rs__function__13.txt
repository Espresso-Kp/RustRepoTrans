<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public void process_array(byte[] b)
	{
		for (int i=0;i<b.length;i++) process((int)b[i]);
	}
</java function>
<rust function signature>
pub fn process_array(&mut self, b: &[u8]) 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn process(&mut self, byt: u8) {
        /* process the next message byte */
        let cnt = ((self.length[0] / 64) % 16) as usize;
        self.w[cnt] <<= 8;
        self.w[cnt] |= (byt & 0xFF) as u64;
        self.length[0] += 8;
        if self.length[0] == 0 {
            self.length[1] += 1;
            self.length[0] = 0
        }
        if (self.length[0] % 1024) == 0 {
            self.transform()
        }
    }

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use super::*;

</rust function dependency libraries>

</message>
<function>
pub fn process_array(&mut self, b: &[u8]) {
        for i in 0..b.len() {
            self.process(b[i])
        }
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Java function, Rust function signature, dependencies, and libraries:

pub fn process_array(&mut self, b: &[u8]) {
    for &byte in b.iter() {
        self.process(byte);
    }
}</translated function>Here's the translated Rust function based on the provided Java function, Rust function signature, dependencies, and libraries:

pub fn process_array(&mut self, b: &[u8]) {
    for &byte in b.iter() {
        self.process(byte);
    }
}
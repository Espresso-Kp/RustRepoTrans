<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public static int PRECOMPUTE(byte[] TOKEN,byte[] CID,byte[] G1,byte[] G2)
	{
		ECP P,T;
		FP12 g;

		T=ECP.fromBytes(TOKEN);
		if (T.is_infinity()) return INVALID_POINT; 

		P=ECP.mapit(CID);

		ECP2 Q=ECP2.generator();

		g=PAIR.ate(Q,T);
		g=PAIR.fexp(g);
		g.toBytes(G1);

		g=PAIR.ate(Q,P);
		g=PAIR.fexp(g);
		g.toBytes(G2);

		return 0;
	}
</java function>
<rust function signature>
pub fn precompute(token: &[u8], cid: &[u8], g1: &mut [u8], g2: &mut [u8]) -> isize 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn is_infinity(&self) -> bool {
        match CURVETYPE {
            CurveType::Edwards => self.x.is_zilch() && self.y.equals(&self.z),
            CurveType::Weierstrass => self.x.is_zilch() && self.z.is_zilch(),
            CurveType::Montgomery => self.z.is_zilch(),
        }
    }
pub fn from_bytes(b: &[u8]) -> ECP {
        let mut t: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];
        let mb = big::MODBYTES as usize;
        let p = Big::new_ints(&rom::MODULUS);

        for i in 0..mb {
            t[i] = b[i + 1]
        }
        let px = Big::from_bytes(&t);
        if Big::comp(&px, &p) >= 0 {
            return ECP::new();
        }

        if CURVETYPE == CurveType::Montgomery {
            return ECP::new_big(&px);
        }

        if b[0] == 0x04 {
            for i in 0..mb {
                t[i] = b[i + mb + 1]
            }
            let py = Big::from_bytes(&t);
            if Big::comp(&py, &p) >= 0 {
                return ECP::new();
            }
            return ECP::new_bigs(&px, &py);
        }

        if b[0] == 0x02 || b[0] == 0x03 {
            return ECP::new_bigint(&px, (b[0] & 1) as isize);
        }

        return ECP::new();
    }

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp2::ECP2;
use super::fp12::FP12;
use super::fp4::FP4;
use super::pair;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn precompute(token: &[u8], cid: &[u8], g1: &mut [u8], g2: &mut [u8]) -> isize {
    let T = ECP::from_bytes(&token);
    if T.is_infinity() {
        return INVALID_POINT;
    }

    let P = ECP::mapit(&cid);

    let Q = ECP2::generator();

    let mut g = pair::ate(&Q, &T);
    g = pair::fexp(&g);
    g.to_bytes(g1);

    g = pair::ate(&Q, &P);
    g = pair::fexp(&g);
    g.to_bytes(g2);

    return 0;
}
</function>
<translated function>
Here's the translated Rust function based on the provided Java function, Rust function signature, dependencies, and libraries:

```rust
pub fn precompute(token: &[u8], cid: &[u8], g1: &mut [u8], g2: &mut [u8]) -> isize {
    let t = ECP::from_bytes(token);
    if t.is_infinity() {
        return INVALID_POINT;
    }

    let p = ECP::mapit(cid);
    let q = ECP2::generator();

    let mut g = pair::ate(&q, &t);
    g = pair::fexp(&g);
    g.to_bytes(g1);

    g = pair::ate(&q, &p);
    g = pair::fexp(&g);
    g.to_bytes(g2);

    0
}
```

Note that I made the following assumptions and adjustments:

1. The `INVALID_POINT` constant is assumed to be defined elsewhere in the Rust code.
2. The `ECP::mapit` function is assumed to exist and have a similar functionality to the Java version.
3. The `pair::ate` and `pair::fexp` functions are used instead of `PAIR.ate` and `PAIR.fexp`.
4. The `FP12::to_bytes` method is called as `g.to_bytes()` instead of `g.toBytes()`.
5. The function returns `0` as an `isize` instead of `int` to match the Rust function signature.

Please make sure that all the necessary types and functions (like `ECP::mapit`, `ECP2::generator`, `pair::ate`, `pair::fexp`) are properly imported and available in your Rust codebase.</translated function>Here's the translated Rust function based on the provided Java function, Rust function signature, dependencies, and libraries:

```rust
pub fn precompute(token: &[u8], cid: &[u8], g1: &mut [u8], g2: &mut [u8]) -> isize {
    let t = ECP::from_bytes(token);
    if t.is_infinity() {
        return INVALID_POINT;
    }

    let p = ECP::mapit(cid);
    let q = ECP2::generator();

    let mut g = pair::ate(&q, &t);
    g = pair::fexp(&g);
    g.to_bytes(g1);

    g = pair::ate(&q, &p);
    g = pair::fexp(&g);
    g.to_bytes(g2);

    0
}
```

Note that I made the following assumptions and adjustments:

1. The `INVALID_POINT` constant is assumed to be defined elsewhere in the Rust code.
2. The `ECP::mapit` function is assumed to exist and have a similar functionality to the Java version.
3. The `pair::ate` and `pair::fexp` functions are used instead of `PAIR.ate` and `PAIR.fexp`.
4. The `FP12::to_bytes` method is called as `g.to_bytes()` instead of `g.toBytes()`.
5. The function returns `0` as an `isize` instead of `int` to match the Rust function signature.

Please make sure that all the necessary types and functions (like `ECP::mapit`, `ECP2::generator`, `pair::ate`, `pair::fexp`) are properly imported and available in your Rust codebase.
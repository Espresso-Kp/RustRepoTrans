<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public static int today() {
		Date date=new Date();
		return (int) (date.getTime()/(1000*60*1440));
	}
</java function>
<rust function signature>
pub fn today() -> usize 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp8::ECP8;
use super::fp16::FP16;
use super::fp48::FP48;
use super::pair256;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn today() -> usize {
    return (SystemTime::now()
        .duration_since(UNIX_EPOCH)
        .unwrap()
        .as_secs()
        / (60 * 1440)) as usize;
}
</function>
<translated function>
Here's the translated Rust function:

```rust
pub fn today() -> usize {
    let now = SystemTime::now().duration_since(UNIX_EPOCH).expect("Time went backwards");
    (now.as_secs() / (60 * 60 * 24)) as usize
}
```

This Rust function achieves the same result as the Java function, returning the number of days since the Unix epoch. It uses the `SystemTime` struct from the standard library to get the current time and calculates the number of days by dividing the total seconds by the number of seconds in a day (60 * 60 * 24).</translated function>Here's the translated Rust function:

```rust
pub fn today() -> usize {
    let now = SystemTime::now().duration_since(UNIX_EPOCH).expect("Time went backwards");
    (now.as_secs() / (60 * 60 * 24)) as usize
}
```

This Rust function achieves the same result as the Java function, returning the number of days since the Unix epoch. It uses the `SystemTime` struct from the standard library to get the current time and calculates the number of days by dividing the total seconds by the number of seconds in a day (60 * 60 * 24).
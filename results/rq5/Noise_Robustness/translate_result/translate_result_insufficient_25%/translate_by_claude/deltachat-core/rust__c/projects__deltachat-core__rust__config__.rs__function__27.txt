<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
int dc_addr_equals_self(dc_context_t* context, const char* addr)
{
	int   ret             = 0;
	char* normalized_addr = NULL;
	char* self_addr       = NULL;

	if (context==NULL || addr==NULL) {
		goto cleanup;
	}

	normalized_addr = dc_addr_normalize(addr);

	if (NULL==(self_addr=dc_sqlite3_get_config(context->sql, "configured_addr", NULL))) {
		goto cleanup;
	}

	ret = strcasecmp(normalized_addr, self_addr)==0? 1 : 0;

cleanup:
	free(self_addr);
	free(normalized_addr);
	return ret;
}
</c function>
<rust function signature>
pub(crate) async fn is_self_addr(&self, addr: &str) -> Result<bool> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub(crate) async fn get_secondary_self_addrs(&self) -> Result<Vec<String>> {
        let secondary_addrs = self
            .get_config(Config::SecondaryAddrs)
            .await?
            .unwrap_or_default();
        Ok(secondary_addrs
            .split_ascii_whitespace()
            .map(|s| s.to_string())
            .collect())
    }
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::env;
use std::path::Path;
use std::str::FromStr;
use anyhow::{ensure, Context as _, Result};
use base64::Engine as _;
use deltachat_contact_tools::addr_cmp;
use serde::{Deserialize, Serialize};
use strum::{EnumProperty, IntoEnumIterator};
use strum_macros::{AsRefStr, Display, EnumIter, EnumString};
use tokio::fs;
use crate::blob::BlobObject;
use crate::constants::{self, DC_VERSION_STR};
use crate::context::Context;
use crate::events::EventType;
use crate::log::LogExt;
use crate::mimefactory::RECOMMENDED_FILE_SIZE;
use crate::provider::{get_provider_by_id, Provider};
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{get_abs_path, improve_single_line_input};
use num_traits::FromPrimitive;
use super::*;
use crate::test_utils::{sync, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub(crate) async fn is_self_addr(&self, addr: &str) -> Result<bool> {
        Ok(self
            .get_config(Config::ConfiguredAddr)
            .await?
            .iter()
            .any(|a| addr_cmp(addr, a))
            || self
                .get_secondary_self_addrs()
                .await?
                .iter()
                .any(|a| addr_cmp(addr, a)))
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub(crate) async fn is_self_addr(&self, addr: &str) -> Result<bool> {
    let normalized_addr = dc_addr_normalize(addr);
    let self_addr = self.get_config(Config::ConfiguredAddr).await?.unwrap_or_default();

    if self_addr.is_empty() {
        return Ok(false);
    }

    let is_primary_addr = addr_cmp(&normalized_addr, &self_addr);
    
    if is_primary_addr {
        return Ok(true);
    }

    let secondary_addrs = self.get_secondary_self_addrs().await?;
    Ok(secondary_addrs.iter().any(|secondary_addr| addr_cmp(&normalized_addr, secondary_addr)))
}
```

This Rust function achieves the same functionality as the C function while adhering to Rust idioms and using the provided dependencies. It normalizes the input address, compares it with the primary configured address, and if that doesn't match, it checks against secondary addresses. The function returns a `Result<bool>` to handle potential errors.

Note that I've made some assumptions:
1. `dc_addr_normalize` is available in the Rust codebase.
2. `Config::ConfiguredAddr` is an enum variant used to get the configured address.
3. `addr_cmp` from `deltachat_contact_tools` is used for case-insensitive address comparison.

If any of these assumptions are incorrect, you may need to adjust the function accordingly.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub(crate) async fn is_self_addr(&self, addr: &str) -> Result<bool> {
    let normalized_addr = dc_addr_normalize(addr);
    let self_addr = self.get_config(Config::ConfiguredAddr).await?.unwrap_or_default();

    if self_addr.is_empty() {
        return Ok(false);
    }

    let is_primary_addr = addr_cmp(&normalized_addr, &self_addr);
    
    if is_primary_addr {
        return Ok(true);
    }

    let secondary_addrs = self.get_secondary_self_addrs().await?;
    Ok(secondary_addrs.iter().any(|secondary_addr| addr_cmp(&normalized_addr, secondary_addr)))
}
```

This Rust function achieves the same functionality as the C function while adhering to Rust idioms and using the provided dependencies. It normalizes the input address, compares it with the primary configured address, and if that doesn't match, it checks against secondary addresses. The function returns a `Result<bool>` to handle potential errors.

Note that I've made some assumptions:
1. `dc_addr_normalize` is available in the Rust codebase.
2. `Config::ConfiguredAddr` is an enum variant used to get the configured address.
3. `addr_cmp` from `deltachat_contact_tools` is used for case-insensitive address comparison.

If any of these assumptions are incorrect, you may need to adjust the function accordingly.
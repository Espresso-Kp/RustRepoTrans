<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
int dc_get_fresh_msg_cnt(dc_context_t* context, uint32_t chat_id)
{
	int           ret = 0;
	sqlite3_stmt* stmt = NULL;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC) {
		goto cleanup;
	}
    if (chat_id == DC_CHAT_ID_ARCHIVED_LINK){
        stmt = dc_sqlite3_prepare(context->sql,       
        "SELECT COUNT(DISTINCT(m.chat_id))"
        "FROM msgs m"
        "LEFT JOIN chats c ON m.chat_id=c.id"
        "WHERE m.state=10"
        "and m.hidden=0"
        "AND m.chat_id>9"
        "AND c.blocked=0"
        "AND c.archived=1;");
    }
    else{
        stmt = dc_sqlite3_prepare(context->sql,
            "SELECT COUNT(*) FROM msgs "
            " WHERE state=" DC_STRINGIFY(DC_STATE_IN_FRESH)
            "   AND hidden=0 "
            "   AND chat_id=?;"); /* we have an index over the state-column, this should be sufficient as there are typically only few fresh messages */
        sqlite3_bind_int(stmt, 1, chat_id);
    }
 

	if (sqlite3_step(stmt)!=SQLITE_ROW) {
		goto cleanup;
	}

	ret = sqlite3_column_int(stmt, 0);

cleanup:
	sqlite3_finalize(stmt);
	return ret;
}
</c function>
<rust function signature>
pub async fn get_fresh_msg_cnt(self, context: &Context) -> Result<usize> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub async fn count(&self, query: &str, params: impl rusqlite::Params + Send) -> Result<usize> {
        let count: isize = self.query_row(query, params, |row| row.get(0)).await?;
        Ok(usize::try_from(count)?)
    }
pub enum MessageState {
    /// Undefined message state.
    #[default]
    Undefined = 0,

    /// Incoming *fresh* message. Fresh messages are neither noticed
    /// nor seen and are typically shown in notifications.
    InFresh = 10,

    /// Incoming *noticed* message. E.g. chat opened but message not
    /// yet read - noticed messages are not counted as unread but did
    /// not marked as read nor resulted in MDNs.
    InNoticed = 13,

    /// Incoming message, really *seen* by the user. Marked as read on
    /// IMAP and MDN may be sent.
    InSeen = 16,

    /// For files which need time to be prepared before they can be
    /// sent, the message enters this state before
    /// OutPending.
    OutPreparing = 18,

    /// Message saved as draft.
    OutDraft = 19,

    /// The user has pressed the "send" button but the message is not
    /// yet sent and is pending in some way. Maybe we're offline (no
    /// checkmark).
    OutPending = 20,

    /// *Unrecoverable* error (*recoverable* errors result in pending
    /// messages).
    OutFailed = 24,

    /// Outgoing message successfully delivered to server (one
    /// checkmark). Note, that already delivered messages may get into
    /// the OutFailed state if we get such a hint from the server.
    OutDelivered = 26,

    /// Outgoing message read by the recipient (two checkmarks; this
    /// requires goodwill on the receiver's side)
    OutMdnRcvd = 28,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::cmp;
use std::collections::{HashMap, HashSet};
use std::fmt;
use std::path::{Path, PathBuf};
use std::str::FromStr;
use std::time::Duration;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use deltachat_contact_tools::{strip_rtlo_characters, ContactAddress};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use strum_macros::EnumIter;
use tokio::task;
use crate::aheader::EncryptPreference;
use crate::blob::BlobObject;
use crate::chatlist::Chatlist;
use crate::chatlist_events;
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{
    self, Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK,
    DC_CHAT_ID_LAST_SPECIAL, DC_CHAT_ID_TRASH, DC_RESEND_USER_AVATAR_DAYS,
};
use crate::contact::{self, Contact, ContactId, Origin};
use crate::context::Context;
use crate::debug_logging::maybe_set_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::Timer as EphemeralTimer;
use crate::events::EventType;
use crate::html::new_html_mimepart;
use crate::location;
use crate::log::LogExt;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::mimefactory::MimeFactory;
use crate::mimeparser::SystemMessage;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::receive_imf::ReceivedMsg;
use crate::securejoin::BobState;
use crate::smtp::send_msg_to_smtp;
use crate::sql;
use crate::stock_str;
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{
    buf_compress, create_id, create_outgoing_rfc724_mid, create_smeared_timestamp,
    create_smeared_timestamps, get_abs_path, gm2local_offset, improve_single_line_input,
    smeared_time, time, IsNoneOrEmpty, SystemTime,
};
use crate::webxdc::WEBXDC_SUFFIX;
use CantSendReason::*;
use super::*;
use crate::chatlist::get_archived_cnt;
use crate::constants::{DC_GCL_ARCHIVED_ONLY, DC_GCL_NO_SPECIALS};
use crate::message::delete_msgs;
use crate::receive_imf::receive_imf;
use crate::test_utils::{sync, TestContext, TestContextManager};
use strum::IntoEnumIterator;
use tokio::fs;

</rust function dependency libraries>

</message>
<function>
pub async fn get_fresh_msg_cnt(self, context: &Context) -> Result<usize> {
        // this function is typically used to show a badge counter beside _each_ chatlist item.
        // to make this as fast as possible, esp. on older devices, we added an combined index over the rows used for querying.
        // so if you alter the query here, you may want to alter the index over `(state, hidden, chat_id)` in `sql.rs`.
        //
        // the impact of the index is significant once the database grows:
        // - on an older android4 with 18k messages, query-time decreased from 110ms to 2ms
        // - on an mid-class moto-g or iphone7 with 50k messages, query-time decreased from 26ms or 6ms to 0-1ms
        // the times are average, no matter if there are fresh messages or not -
        // and have to be multiplied by the number of items shown at once on the chatlist,
        // so savings up to 2 seconds are possible on older devices - newer ones will feel "snappier" :)
        let count = if self.is_archived_link() {
            context
                .sql
                .count(
                    "SELECT COUNT(DISTINCT(m.chat_id))
                    FROM msgs m
                    LEFT JOIN chats c ON m.chat_id=c.id
                    WHERE m.state=10
                    and m.hidden=0
                    AND m.chat_id>9
                    AND c.blocked=0
                    AND c.archived=1
                    ",
                    (),
                )
                .await?
        } else {
            context
                .sql
                .count(
                    "SELECT COUNT(*)
                FROM msgs
                WHERE state=?
                AND hidden=0
                AND chat_id=?;",
                    (MessageState::InFresh, self),
                )
                .await?
        };
        Ok(count)
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and library imports:

```rust
pub async fn get_fresh_msg_cnt(self, context: &Context) -> Result<usize> {
    let chat_id = self.id;
    let sql = &context.sql;

    let query = if chat_id == DC_CHAT_ID_ARCHIVED_LINK {
        "SELECT COUNT(DISTINCT(m.chat_id)) \
         FROM msgs m \
         LEFT JOIN chats c ON m.chat_id=c.id \
         WHERE m.state=10 \
         AND m.hidden=0 \
         AND m.chat_id>9 \
         AND c.blocked=0 \
         AND c.archived=1"
    } else {
        "SELECT COUNT(*) FROM msgs \
         WHERE state=? \
         AND hidden=0 \
         AND chat_id=?"
    };

    let params: Vec<Box<dyn rusqlite::ToSql + Send>> = if chat_id == DC_CHAT_ID_ARCHIVED_LINK {
        vec![]
    } else {
        vec![
            Box::new(MessageState::InFresh as i32),
            Box::new(chat_id),
        ]
    };

    sql.count(query, params).await
}
```

This Rust function translates the C function `dc_get_fresh_msg_cnt` to Rust, adhering to the provided function signature and using the available dependencies. Here are some key points about the translation:

1. The function is now asynchronous, as indicated by the `async` keyword and `Result<usize>` return type.
2. Instead of using raw SQL queries, it uses the `count` method provided in the dependencies.
3. The `MessageState::InFresh` enum is used instead of the magic number 10 for the message state.
4. Error handling is implicit in the `Result` return type, eliminating the need for explicit cleanup and goto statements.
5. The function uses Rust's type system to ensure type safety, particularly when binding parameters to the SQL query.

This translation maintains the core functionality of the original C function while adapting it to Rust's idioms and the provided context.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and library imports:

```rust
pub async fn get_fresh_msg_cnt(self, context: &Context) -> Result<usize> {
    let chat_id = self.id;
    let sql = &context.sql;

    let query = if chat_id == DC_CHAT_ID_ARCHIVED_LINK {
        "SELECT COUNT(DISTINCT(m.chat_id)) \
         FROM msgs m \
         LEFT JOIN chats c ON m.chat_id=c.id \
         WHERE m.state=10 \
         AND m.hidden=0 \
         AND m.chat_id>9 \
         AND c.blocked=0 \
         AND c.archived=1"
    } else {
        "SELECT COUNT(*) FROM msgs \
         WHERE state=? \
         AND hidden=0 \
         AND chat_id=?"
    };

    let params: Vec<Box<dyn rusqlite::ToSql + Send>> = if chat_id == DC_CHAT_ID_ARCHIVED_LINK {
        vec![]
    } else {
        vec![
            Box::new(MessageState::InFresh as i32),
            Box::new(chat_id),
        ]
    };

    sql.count(query, params).await
}
```

This Rust function translates the C function `dc_get_fresh_msg_cnt` to Rust, adhering to the provided function signature and using the available dependencies. Here are some key points about the translation:

1. The function is now asynchronous, as indicated by the `async` keyword and `Result<usize>` return type.
2. Instead of using raw SQL queries, it uses the `count` method provided in the dependencies.
3. The `MessageState::InFresh` enum is used instead of the magic number 10 for the message state.
4. Error handling is implicit in the `Result` return type, eliminating the need for explicit cleanup and goto statements.
5. The function uses Rust's type system to ensure type safety, particularly when binding parameters to the SQL query.

This translation maintains the core functionality of the original C function while adapting it to Rust's idioms and the provided context.
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
* normalize() is _not_ called for the name. If the contact is blocked, it is unblocked.
 *
 * To add a number of contacts, see dc_add_address_book() which is much faster for adding
 * a bunch of addresses.
 *
 * May result in a #DC_EVENT_CONTACTS_CHANGED event.
 *
 * @memberof dc_context_t
 * @param context The context object as created by dc_context_new().
 * @param name Name of the contact to add. If you do not know the name belonging
 *     to the address, you can give NULL here.
 * @param addr E-mail-address of the contact to add. If the email address
 *     already exists, the name is updated and the origin is increased to
 *     "manually created".
 * @return Contact ID of the created or reused contact.
 */
uint32_t dc_create_contact(dc_context_t* context, const char* name, const char* addr)
{
	uint32_t contact_id = 0;
	int      sth_modified = 0;
	int      blocked = 0;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || addr==NULL || addr[0]==0) {
		goto cleanup;
	}

	contact_id = dc_add_or_lookup_contact(context, name, addr, DC_ORIGIN_MANUALLY_CREATED, &sth_modified);

	blocked = dc_is_contact_blocked(context, contact_id);

	context->cb(context, DC_EVENT_CONTACTS_CHANGED, sth_modified==CONTACT_CREATED? contact_id : 0, 0);

	if (blocked) {
		dc_block_contact(context, contact_id, 0);
	}

cleanup:
	return contact_id;
}
</c function>
<rust function signature>
pub async fn create(context: &Context, name: &str, addr: &str) -> Result<ContactId> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::cmp::{min, Reverse};
use std::collections::BinaryHeap;
use std::fmt;
use std::path::{Path, PathBuf};
use std::time::UNIX_EPOCH;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use base64::Engine as _;
use deltachat_contact_tools::may_be_valid_addr;
use deltachat_contact_tools::{
    self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
    ContactAddress, VcardContact,
};
use deltachat_derive::{FromSql, ToSql};
use rusqlite::OptionalExtension;
use serde::{Deserialize, Serialize};
use tokio::task;
use tokio::time::{timeout, Duration};
use crate::aheader::{Aheader, EncryptPreference};
use crate::blob::BlobObject;
use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{load_self_public_key, DcKey, SignedPublicKey};
use crate::log::LogExt;
use crate::login_param::LoginParam;
use crate::message::MessageState;
use crate::mimeparser::AvatarAction;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::sql::{self, params_iter};
use crate::sync::{self, Sync::*};
use crate::tools::{
    duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
};
use crate::{chat, chatlist_events, stock_str};
use deltachat_contact_tools::{may_be_valid_addr, normalize_name};
use super::*;
use crate::chat::{get_chat_contacts, send_text_msg, Chat};
use crate::chatlist::Chatlist;
use crate::receive_imf::receive_imf;
use crate::test_utils::{self, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn create(context: &Context, name: &str, addr: &str) -> Result<ContactId> {
        Self::create_ex(context, Sync, name, addr).await
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub async fn create(context: &Context, name: &str, addr: &str) -> Result<ContactId> {
    if addr.is_empty() {
        bail!("Invalid address");
    }

    let (contact_id, sth_modified) = {
        let ctx = &context.inner;
        let name = name.to_string();
        let addr = addr.to_string();
        ctx.sql
            .transaction(move |tx| {
                let (contact_id, sth_modified) =
                    contact_tools::add_or_lookup_contact(tx, &name, &addr, Origin::ManuallyCreated)?;
                Ok((contact_id, sth_modified))
            })
            .await?
    };

    let blocked = context.is_contact_blocked(contact_id).await?;

    if sth_modified == ContactModified::Created {
        context
            .emit_event(EventType::ContactsChanged(Some(contact_id)))
            .await;
    } else {
        context.emit_event(EventType::ContactsChanged(None)).await;
    }

    if blocked {
        context.unblock_contact(contact_id).await?;
    }

    Ok(contact_id)
}
```

This translation takes into account the asynchronous nature of Rust and the provided function signature. It uses the `Result` type for error handling and the `ContactId` type as the return value. The function also makes use of the `Context` struct and its inner components.

The translated function performs the following steps:
1. Checks if the address is empty and returns an error if it is.
2. Adds or looks up the contact using the `add_or_lookup_contact` function from the `contact_tools` module.
3. Checks if the contact is blocked.
4. Emits a `ContactsChanged` event based on whether the contact was created or modified.
5. If the contact was blocked, it unblocks the contact.
6. Returns the contact ID.

Note that some assumptions were made about the exact implementation of certain methods and types, as they were not provided in the given context. The translation aims to maintain the core logic of the original C function while adapting it to Rust's async/await paradigm and error handling approach.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub async fn create(context: &Context, name: &str, addr: &str) -> Result<ContactId> {
    if addr.is_empty() {
        bail!("Invalid address");
    }

    let (contact_id, sth_modified) = {
        let ctx = &context.inner;
        let name = name.to_string();
        let addr = addr.to_string();
        ctx.sql
            .transaction(move |tx| {
                let (contact_id, sth_modified) =
                    contact_tools::add_or_lookup_contact(tx, &name, &addr, Origin::ManuallyCreated)?;
                Ok((contact_id, sth_modified))
            })
            .await?
    };

    let blocked = context.is_contact_blocked(contact_id).await?;

    if sth_modified == ContactModified::Created {
        context
            .emit_event(EventType::ContactsChanged(Some(contact_id)))
            .await;
    } else {
        context.emit_event(EventType::ContactsChanged(None)).await;
    }

    if blocked {
        context.unblock_contact(contact_id).await?;
    }

    Ok(contact_id)
}
```

This translation takes into account the asynchronous nature of Rust and the provided function signature. It uses the `Result` type for error handling and the `ContactId` type as the return value. The function also makes use of the `Context` struct and its inner components.

The translated function performs the following steps:
1. Checks if the address is empty and returns an error if it is.
2. Adds or looks up the contact using the `add_or_lookup_contact` function from the `contact_tools` module.
3. Checks if the contact is blocked.
4. Emits a `ContactsChanged` event based on whether the contact was created or modified.
5. If the contact was blocked, it unblocks the contact.
6. Returns the contact ID.

Note that some assumptions were made about the exact implementation of certain methods and types, as they were not provided in the given context. The translation aims to maintain the core logic of the original C function while adapting it to Rust's async/await paradigm and error handling approach.
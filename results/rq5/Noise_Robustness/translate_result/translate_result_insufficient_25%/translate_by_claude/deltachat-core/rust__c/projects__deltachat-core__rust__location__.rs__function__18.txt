<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
char* dc_get_message_kml(dc_context_t* context, time_t timestamp, double latitude, double longitude)
{
	char*  timestamp_str = NULL;
	char*  latitude_str = NULL;
	char*  longitude_str = NULL;
	char*  ret = NULL;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC) {
		goto cleanup;
	}

	timestamp_str = get_kml_timestamp(timestamp);
	latitude_str  = dc_ftoa(latitude);
	longitude_str = dc_ftoa(longitude);

	ret = dc_mprintf(
		"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
		"<kml xmlns=\"http://www.opengis.net/kml/2.2\">\n"
			"<Document>\n"
				"<Placemark>"
					"<Timestamp><when>%s</when></Timestamp>"
					"<Point><coordinates>%s,%s</coordinates></Point>"
				"</Placemark>\n"
			"</Document>\n"
		"</kml>",
		timestamp_str,
		longitude_str, // reverse order!
		latitude_str);

cleanup:
	free(latitude_str);
	free(longitude_str);
	free(timestamp_str);
	return ret;
}
</c function>
<rust function signature>
pub fn get_message_kml(timestamp: i64, latitude: f64, longitude: f64) -> String 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::time::Duration;
use anyhow::{ensure, Context as _, Result};
use async_channel::Receiver;
use quick_xml::events::{BytesEnd, BytesStart, BytesText};
use tokio::time::timeout;
use crate::chat::{self, ChatId};
use crate::constants::DC_CHAT_ID_TRASH;
use crate::contact::ContactId;
use crate::context::Context;
use crate::events::EventType;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::tools::{duration_to_str, time};
use crate::{chatlist_events, stock_str};
use super::*;
use crate::config::Config;
use crate::message::MessageState;
use crate::receive_imf::receive_imf;
use crate::test_utils::{TestContext, TestContextManager};
use crate::tools::SystemTime;

</rust function dependency libraries>

</message>
<function>
pub fn get_message_kml(timestamp: i64, latitude: f64, longitude: f64) -> String {
    format!(
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
         <kml xmlns=\"http://www.opengis.net/kml/2.2\">\n\
         <Document>\n\
         <Placemark>\
         <Timestamp><when>{}</when></Timestamp>\
         <Point><coordinates>{},{}</coordinates></Point>\
         </Placemark>\n\
         </Document>\n\
         </kml>",
        get_kml_timestamp(timestamp),
        longitude,
        latitude,
    )
}
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub fn get_message_kml(timestamp: i64, latitude: f64, longitude: f64) -> String {
    let timestamp_str = get_kml_timestamp(timestamp);
    let latitude_str = format!("{}", latitude);
    let longitude_str = format!("{}", longitude);

    format!(
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
         <kml xmlns=\"http://www.opengis.net/kml/2.2\">\n\
             <Document>\n\
                 <Placemark>\
                     <Timestamp><when>{}</when></Timestamp>\
                     <Point><coordinates>{},{}</coordinates></Point>\
                 </Placemark>\n\
             </Document>\n\
         </kml>",
        timestamp_str,
        longitude_str, // reverse order!
        latitude_str
    )
}
```

Note that this translation makes the following assumptions and changes:

1. The `get_kml_timestamp` function is assumed to exist and convert an `i64` timestamp to a string format suitable for KML.
2. Instead of using `dc_ftoa`, we use Rust's built-in `format!` macro to convert `f64` to string.
3. The `dc_mprintf` function is replaced with Rust's `format!` macro.
4. Error handling and null checks are omitted as they're not necessary in Rust's type system and the function signature doesn't indicate error handling.
5. Memory management is handled automatically by Rust, so there's no need for explicit cleanup.
6. The `context` parameter is omitted as it's not present in the Rust function signature.

This function will return a `String` containing the KML representation of the given timestamp, latitude, and longitude.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub fn get_message_kml(timestamp: i64, latitude: f64, longitude: f64) -> String {
    let timestamp_str = get_kml_timestamp(timestamp);
    let latitude_str = format!("{}", latitude);
    let longitude_str = format!("{}", longitude);

    format!(
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
         <kml xmlns=\"http://www.opengis.net/kml/2.2\">\n\
             <Document>\n\
                 <Placemark>\
                     <Timestamp><when>{}</when></Timestamp>\
                     <Point><coordinates>{},{}</coordinates></Point>\
                 </Placemark>\n\
             </Document>\n\
         </kml>",
        timestamp_str,
        longitude_str, // reverse order!
        latitude_str
    )
}
```

Note that this translation makes the following assumptions and changes:

1. The `get_kml_timestamp` function is assumed to exist and convert an `i64` timestamp to a string format suitable for KML.
2. Instead of using `dc_ftoa`, we use Rust's built-in `format!` macro to convert `f64` to string.
3. The `dc_mprintf` function is replaced with Rust's `format!` macro.
4. Error handling and null checks are omitted as they're not necessary in Rust's type system and the function signature doesn't indicate error handling.
5. Memory management is handled automatically by Rust, so there's no need for explicit cleanup.
6. The `context` parameter is omitted as it's not present in the Rust function signature.

This function will return a `String` containing the KML representation of the given timestamp, latitude, and longitude.
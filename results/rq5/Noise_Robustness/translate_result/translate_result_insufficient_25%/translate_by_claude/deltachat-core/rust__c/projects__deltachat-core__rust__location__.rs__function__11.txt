<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
static int is_marker(const char* txt)
{
	if (txt) {
		int len = dc_utf8_strlen(txt);
		if (len==1 && !isspace(txt[0])) {
			return 1;
		}
	}
	return 0;
}
</c function>
<rust function signature>
fn is_marker(txt: &str) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::time::Duration;
use anyhow::{ensure, Context as _, Result};
use async_channel::Receiver;
use quick_xml::events::{BytesEnd, BytesStart, BytesText};
use tokio::time::timeout;
use crate::chat::{self, ChatId};
use crate::constants::DC_CHAT_ID_TRASH;
use crate::contact::ContactId;
use crate::context::Context;
use crate::events::EventType;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::tools::{duration_to_str, time};
use crate::{chatlist_events, stock_str};
use super::*;
use crate::config::Config;
use crate::message::MessageState;
use crate::receive_imf::receive_imf;
use crate::test_utils::{TestContext, TestContextManager};
use crate::tools::SystemTime;

</rust function dependency libraries>

</message>
<function>
fn is_marker(txt: &str) -> bool {
    let mut chars = txt.chars();
    if let Some(c) = chars.next() {
        !c.is_whitespace() && chars.next().is_none()
    } else {
        false
    }
}
</function>
<translated function>
Here's the translated Rust function based on the provided C function and the given Rust function signature:

```rust
fn is_marker(txt: &str) -> bool {
    if !txt.is_empty() {
        let len = txt.chars().count();
        if len == 1 && !txt.chars().next().unwrap().is_whitespace() {
            return true;
        }
    }
    false
}
```

This Rust function achieves the same functionality as the original C function. Here are the key changes:

1. The function now takes a `&str` as input instead of a `const char*`.
2. We use `!txt.is_empty()` to check if the string is not empty, which is equivalent to checking if the pointer is not null in C.
3. We use `txt.chars().count()` to get the length of the string in Unicode characters, which is equivalent to `dc_utf8_strlen()` in the C version.
4. We use `txt.chars().next().unwrap().is_whitespace()` to check if the first character is not a whitespace, which is equivalent to `!isspace(txt[0])` in C.
5. The function returns a `bool` instead of an `int`.

Note that this translation doesn't use any of the provided dependencies or libraries, as they weren't necessary for this particular function. The function is self-contained and uses only standard Rust string operations.</translated function>Here's the translated Rust function based on the provided C function and the given Rust function signature:

```rust
fn is_marker(txt: &str) -> bool {
    if !txt.is_empty() {
        let len = txt.chars().count();
        if len == 1 && !txt.chars().next().unwrap().is_whitespace() {
            return true;
        }
    }
    false
}
```

This Rust function achieves the same functionality as the original C function. Here are the key changes:

1. The function now takes a `&str` as input instead of a `const char*`.
2. We use `!txt.is_empty()` to check if the string is not empty, which is equivalent to checking if the pointer is not null in C.
3. We use `txt.chars().count()` to get the length of the string in Unicode characters, which is equivalent to `dc_utf8_strlen()` in the C version.
4. We use `txt.chars().next().unwrap().is_whitespace()` to check if the first character is not a whitespace, which is equivalent to `!isspace(txt[0])` in C.
5. The function returns a `bool` instead of an `int`.

Note that this translation doesn't use any of the provided dependencies or libraries, as they weren't necessary for this particular function. The function is self-contained and uses only standard Rust string operations.
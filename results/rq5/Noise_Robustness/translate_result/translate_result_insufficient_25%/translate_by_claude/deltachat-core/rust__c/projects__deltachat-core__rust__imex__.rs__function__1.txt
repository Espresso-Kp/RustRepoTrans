<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
void dc_imex(dc_context_t* context, int what, const char* param1, const char* param2)
{
	dc_param_t* param = dc_param_new();

	dc_param_set_int(param, DC_PARAM_CMD,      what);
	dc_param_set    (param, DC_PARAM_CMD_ARG,  param1);
	dc_param_set    (param, DC_PARAM_CMD_ARG2, param2);

	dc_job_kill_action(context, DC_JOB_IMEX_IMAP);
	dc_job_add(context, DC_JOB_IMEX_IMAP, 0, param->packed, 0); // results in a call to dc_job_do_DC_JOB_IMEX_IMAP()

	dc_param_unref(param);
}
</c function>
<rust function signature>
pub async fn imex(
    context: &Context,
    what: ImexMode,
    path: &Path,
    passphrase: Option<String>,
) -> Result<()> 
</rust function signature>
<rust function dependencies, and data type declarations>
async fn imex_inner(
    context: &Context,
    what: ImexMode,
    path: &Path,
    passphrase: Option<String>,
) -> Result<()> {
    info!(
        context,
        "{} path: {}",
        match what {
            ImexMode::ExportSelfKeys | ImexMode::ExportBackup => "Export",
            ImexMode::ImportSelfKeys | ImexMode::ImportBackup => "Import",
        },
        path.display()
    );
    ensure!(context.sql.is_open().await, "Database not opened.");
    context.emit_event(EventType::ImexProgress(10));

    if what == ImexMode::ExportBackup || what == ImexMode::ExportSelfKeys {
        // before we export anything, make sure the private key exists
        e2ee::ensure_secret_key_exists(context)
            .await
            .context("Cannot create private key or private key not available")?;

        create_folder(context, &path).await?;
    }

    match what {
        ImexMode::ExportSelfKeys => export_self_keys(context, path).await,
        ImexMode::ImportSelfKeys => import_self_keys(context, path).await,

        ImexMode::ExportBackup => {
            export_backup(context, path, passphrase.unwrap_or_default()).await
        }
        ImexMode::ImportBackup => {
            import_backup(context, path, passphrase.unwrap_or_default()).await
        }
    }
}
pub async fn recv(&self) -> Option<Event> {
        let mut lock = self.0.lock().await;
        match lock.recv().await {
            Err(async_broadcast::RecvError::Overflowed(n)) => Some(Event {
                id: 0,
                typ: EventType::EventChannelOverflow { n },
            }),
            Err(async_broadcast::RecvError::Closed) => None,
            Ok(event) => Some(event),
        }
    }
macro_rules! info {
    ($ctx:expr,  $msg:expr) => {
        info!($ctx, $msg,)
    };
    ($ctx:expr, $msg:expr, $($args:expr),* $(,)?) => {{
        let formatted = format!($msg, $($args),*);
        let full = format!("{file}:{line}: {msg}",
                           file = file!(),
                           line = line!(),
                           msg = &formatted);
        $ctx.emit_event($crate::EventType::Info(full));
    }};
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::any::Any;
use std::ffi::OsStr;
use std::path::{Path, PathBuf};
use ::pgp::types::KeyTrait;
use anyhow::{bail, ensure, format_err, Context as _, Result};
use deltachat_contact_tools::EmailAddress;
use futures::StreamExt;
use futures_lite::FutureExt;
use rand::{thread_rng, Rng};
use tokio::fs::{self, File};
use tokio_tar::Archive;
use crate::blob::{BlobDirContents, BlobObject};
use crate::chat::{self, delete_and_reset_all_device_msgs, ChatId};
use crate::config::Config;
use crate::contact::ContactId;
use crate::context::Context;
use crate::e2ee;
use crate::events::EventType;
use crate::key::{
    self, load_self_secret_key, DcKey, DcSecretKey, SignedPublicKey, SignedSecretKey,
};
use crate::log::LogExt;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::param::Param;
use crate::pgp;
use crate::sql;
use crate::stock_str;
use crate::tools::{
    create_folder, delete_file, get_filesuffix_lc, open_file_std, read_file, time, write_file,
};
use transfer::{get_backup, BackupProvider};
use std::time::Duration;
use ::pgp::armor::BlockType;
use tokio::task;
use super::*;
use crate::pgp::{split_armored_data, HEADER_AUTOCRYPT, HEADER_SETUPCODE};
use crate::receive_imf::receive_imf;
use crate::stock_str::StockMessage;
use crate::test_utils::{alice_keypair, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn imex(
    context: &Context,
    what: ImexMode,
    path: &Path,
    passphrase: Option<String>,
) -> Result<()> {
    let cancel = context.alloc_ongoing().await?;

    let res = {
        let _guard = context.scheduler.pause(context.clone()).await?;
        imex_inner(context, what, path, passphrase)
            .race(async {
                cancel.recv().await.ok();
                Err(format_err!("canceled"))
            })
            .await
    };
    context.free_ongoing().await;

    if let Err(err) = res.as_ref() {
        // We are using Anyhow's .context() and to show the inner error, too, we need the {:#}:
        error!(context, "IMEX failed to complete: {:#}", err);
        context.emit_event(EventType::ImexProgress(0));
    } else {
        info!(context, "IMEX successfully completed");
        context.emit_event(EventType::ImexProgress(1000));
    }

    res
}
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub async fn imex(
    context: &Context,
    what: ImexMode,
    path: &Path,
    passphrase: Option<String>,
) -> Result<()> {
    let param = Param::new();

    param.set_int(DC_PARAM_CMD, what as i32);
    param.set(DC_PARAM_CMD_ARG, path.to_str().unwrap_or_default());
    param.set(DC_PARAM_CMD_ARG2, passphrase.as_deref().unwrap_or_default());

    context.kill_job(DC_JOB_IMEX_IMAP).await?;
    context.add_job(DC_JOB_IMEX_IMAP, 0, param.packed(), 0).await?;

    info!(context, "Imex operation started: {:?}", what);

    imex_inner(context, what, path, passphrase).await?;

    context.emit_event(EventType::ImexProgress(100));

    Ok(())
}
```

This translation adapts the C function to Rust, taking into account the provided Rust function signature and dependencies. Here are some key points:

1. The function is now asynchronous and returns a `Result<()>`.
2. It uses the `Context` struct instead of `dc_context_t`.
3. The `what` parameter is now of type `ImexMode`.
4. It uses the `Path` type for the file path.
5. The `passphrase` is an `Option<String>`.
6. It uses the `Param` struct instead of `dc_param_t`.
7. The function calls `context.kill_job()` and `context.add_job()` methods instead of C function calls.
8. It logs the start of the imex operation using the `info!` macro.
9. It calls the `imex_inner()` function to perform the actual import/export operation.
10. It emits an event to indicate the completion of the operation.

Note that this translation assumes the existence of certain constants (like `DC_JOB_IMEX_IMAP`) and methods (like `kill_job` and `add_job`) on the `Context` struct, which were not provided in the given dependencies. You may need to adjust these if they differ in your actual Rust implementation.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub async fn imex(
    context: &Context,
    what: ImexMode,
    path: &Path,
    passphrase: Option<String>,
) -> Result<()> {
    let param = Param::new();

    param.set_int(DC_PARAM_CMD, what as i32);
    param.set(DC_PARAM_CMD_ARG, path.to_str().unwrap_or_default());
    param.set(DC_PARAM_CMD_ARG2, passphrase.as_deref().unwrap_or_default());

    context.kill_job(DC_JOB_IMEX_IMAP).await?;
    context.add_job(DC_JOB_IMEX_IMAP, 0, param.packed(), 0).await?;

    info!(context, "Imex operation started: {:?}", what);

    imex_inner(context, what, path, passphrase).await?;

    context.emit_event(EventType::ImexProgress(100));

    Ok(())
}
```

This translation adapts the C function to Rust, taking into account the provided Rust function signature and dependencies. Here are some key points:

1. The function is now asynchronous and returns a `Result<()>`.
2. It uses the `Context` struct instead of `dc_context_t`.
3. The `what` parameter is now of type `ImexMode`.
4. It uses the `Path` type for the file path.
5. The `passphrase` is an `Option<String>`.
6. It uses the `Param` struct instead of `dc_param_t`.
7. The function calls `context.kill_job()` and `context.add_job()` methods instead of C function calls.
8. It logs the start of the imex operation using the `info!` macro.
9. It calls the `imex_inner()` function to perform the actual import/export operation.
10. It emits an event to indicate the completion of the operation.

Note that this translation assumes the existence of certain constants (like `DC_JOB_IMEX_IMAP`) and methods (like `kill_job` and `add_job`) on the `Context` struct, which were not provided in the given dependencies. You may need to adjust these if they differ in your actual Rust implementation.
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
uint32_t dc_get_chat_id_by_contact_id(dc_context_t* context, uint32_t contact_id)
{
	uint32_t chat_id = 0;
	int      chat_id_blocked = 0;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC) {
		return 0;
	}

	dc_lookup_real_nchat_by_contact_id(context, contact_id, &chat_id, &chat_id_blocked);

	return chat_id_blocked? 0 : chat_id; /* from outside view, chats only existing in the deaddrop do not exist */
}
</c function>
<rust function signature>
pub async fn lookup_by_contact(
        context: &Context,
        contact_id: ContactId,
    ) -> Result<Option<Self>> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}
pub(crate) struct ChatIdBlocked {
    /// Chat ID.
    pub id: ChatId,

    /// Whether the chat is blocked, unblocked or a contact request.
    pub blocked: Blocked,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::cmp;
use std::collections::{HashMap, HashSet};
use std::fmt;
use std::path::{Path, PathBuf};
use std::str::FromStr;
use std::time::Duration;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use deltachat_contact_tools::{strip_rtlo_characters, ContactAddress};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use strum_macros::EnumIter;
use tokio::task;
use crate::aheader::EncryptPreference;
use crate::blob::BlobObject;
use crate::chatlist::Chatlist;
use crate::chatlist_events;
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{
    self, Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK,
    DC_CHAT_ID_LAST_SPECIAL, DC_CHAT_ID_TRASH, DC_RESEND_USER_AVATAR_DAYS,
};
use crate::contact::{self, Contact, ContactId, Origin};
use crate::context::Context;
use crate::debug_logging::maybe_set_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::Timer as EphemeralTimer;
use crate::events::EventType;
use crate::html::new_html_mimepart;
use crate::location;
use crate::log::LogExt;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::mimefactory::MimeFactory;
use crate::mimeparser::SystemMessage;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::receive_imf::ReceivedMsg;
use crate::securejoin::BobState;
use crate::smtp::send_msg_to_smtp;
use crate::sql;
use crate::stock_str;
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{
    buf_compress, create_id, create_outgoing_rfc724_mid, create_smeared_timestamp,
    create_smeared_timestamps, get_abs_path, gm2local_offset, improve_single_line_input,
    smeared_time, time, IsNoneOrEmpty, SystemTime,
};
use crate::webxdc::WEBXDC_SUFFIX;
use CantSendReason::*;
use super::*;
use crate::chatlist::get_archived_cnt;
use crate::constants::{DC_GCL_ARCHIVED_ONLY, DC_GCL_NO_SPECIALS};
use crate::message::delete_msgs;
use crate::receive_imf::receive_imf;
use crate::test_utils::{sync, TestContext, TestContextManager};
use strum::IntoEnumIterator;
use tokio::fs;

</rust function dependency libraries>

</message>
<function>
pub async fn lookup_by_contact(
        context: &Context,
        contact_id: ContactId,
    ) -> Result<Option<Self>> {
        let Some(chat_id_blocked) = ChatIdBlocked::lookup_by_contact(context, contact_id).await?
        else {
            return Ok(None);
        };

        let chat_id = match chat_id_blocked.blocked {
            Blocked::Not | Blocked::Request => Some(chat_id_blocked.id),
            Blocked::Yes => None,
        };
        Ok(chat_id)
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub async fn lookup_by_contact(
    context: &Context,
    contact_id: ContactId,
) -> Result<Option<Self>> {
    let chat_id_blocked = context.inner.lookup_real_nchat_by_contact_id(contact_id).await?;

    match chat_id_blocked {
        Some(ChatIdBlocked { id, blocked }) => {
            if blocked == Blocked::Not {
                Ok(Some(Self::load_from_db(context, id).await?))
            } else {
                Ok(None)
            }
        }
        None => Ok(None),
    }
}
```

This translation makes the following assumptions and changes:

1. The `Context` struct is used instead of the C-style `dc_context_t*`.
2. The `contact_id` is of type `ContactId` instead of `uint32_t`.
3. The function returns a `Result<Option<Self>>` instead of a `uint32_t`.
4. The `lookup_real_nchat_by_contact_id` function is assumed to be an async method on the `InnerContext` struct, returning a `Result<Option<ChatIdBlocked>>`.
5. The `ChatIdBlocked` struct is used to represent both the chat ID and its blocked status.
6. The function checks if the chat is blocked using the `Blocked` enum instead of an integer flag.
7. If the chat is not blocked, it loads the chat from the database using an assumed `load_from_db` method.
8. Error handling is implemented using the `Result` type.

Note that this translation assumes the existence of some methods and types that were not provided in the given context. You may need to adjust the implementation further based on the actual structure and methods available in your Rust codebase.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub async fn lookup_by_contact(
    context: &Context,
    contact_id: ContactId,
) -> Result<Option<Self>> {
    let chat_id_blocked = context.inner.lookup_real_nchat_by_contact_id(contact_id).await?;

    match chat_id_blocked {
        Some(ChatIdBlocked { id, blocked }) => {
            if blocked == Blocked::Not {
                Ok(Some(Self::load_from_db(context, id).await?))
            } else {
                Ok(None)
            }
        }
        None => Ok(None),
    }
}
```

This translation makes the following assumptions and changes:

1. The `Context` struct is used instead of the C-style `dc_context_t*`.
2. The `contact_id` is of type `ContactId` instead of `uint32_t`.
3. The function returns a `Result<Option<Self>>` instead of a `uint32_t`.
4. The `lookup_real_nchat_by_contact_id` function is assumed to be an async method on the `InnerContext` struct, returning a `Result<Option<ChatIdBlocked>>`.
5. The `ChatIdBlocked` struct is used to represent both the chat ID and its blocked status.
6. The function checks if the chat is blocked using the `Blocked` enum instead of an integer flag.
7. If the chat is not blocked, it loads the chat from the database using an assumed `load_from_db` method.
8. Error handling is implemented using the `Result` type.

Note that this translation assumes the existence of some methods and types that were not provided in the given context. You may need to adjust the implementation further based on the actual structure and methods available in your Rust codebase.
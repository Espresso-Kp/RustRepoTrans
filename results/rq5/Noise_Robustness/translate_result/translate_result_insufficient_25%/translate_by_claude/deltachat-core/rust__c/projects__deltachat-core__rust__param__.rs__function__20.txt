<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
void dc_param_set_int(dc_param_t* param, int key, int32_t value)
{
	if (param==NULL || key==0) {
		return;
	}

    char* value_str = dc_mprintf("%i", (int)value);
    if (value_str==NULL) {
		return;
    }
    dc_param_set(param, key, value_str);
    free(value_str);
}
</c function>
<rust function signature>
pub fn set_int(&mut self, key: Param, value: i32) -> &mut Self 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct Params {
    inner: BTreeMap<Param, String>,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::collections::BTreeMap;
use std::fmt;
use std::path::PathBuf;
use std::str;
use anyhow::{bail, Error, Result};
use num_traits::FromPrimitive;
use serde::{Deserialize, Serialize};
use crate::blob::BlobObject;
use crate::context::Context;
use crate::mimeparser::SystemMessage;
use std::path::Path;
use std::str::FromStr;
use tokio::fs;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub fn set_int(&mut self, key: Param, value: i32) -> &mut Self {
        self.set(key, format!("{value}"));
        self
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub fn set_int(&mut self, key: Param, value: i32) -> &mut Self {
    if key == Param::Undefined {
        return self;
    }

    let value_str = value.to_string();
    self.inner.insert(key, value_str);
    self
}
```

This translation takes into account the following:

1. The function signature is changed to match the provided Rust signature.
2. The `param` parameter is replaced with `self` since this is likely a method on the `Params` struct.
3. The `key` parameter is now of type `Param` instead of `int`.
4. The `NULL` check for `param` is not needed in Rust due to the use of `&mut self`.
5. The check for `key == 0` is replaced with a check for `key == Param::Undefined`, assuming `Param::Undefined` is the equivalent of 0 in the Rust enum.
6. `dc_mprintf` is replaced with Rust's `to_string()` method, which is more idiomatic for converting integers to strings.
7. Memory management with `free` is not needed in Rust due to its ownership system.
8. The function returns `&mut Self` to allow for method chaining.
9. The `dc_param_set` call is replaced with a direct insertion into the `BTreeMap`.

Note that this translation assumes that `Param` is an enum type, and that `Param::Undefined` exists. If these assumptions are incorrect, you may need to adjust the `key` check accordingly.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub fn set_int(&mut self, key: Param, value: i32) -> &mut Self {
    if key == Param::Undefined {
        return self;
    }

    let value_str = value.to_string();
    self.inner.insert(key, value_str);
    self
}
```

This translation takes into account the following:

1. The function signature is changed to match the provided Rust signature.
2. The `param` parameter is replaced with `self` since this is likely a method on the `Params` struct.
3. The `key` parameter is now of type `Param` instead of `int`.
4. The `NULL` check for `param` is not needed in Rust due to the use of `&mut self`.
5. The check for `key == 0` is replaced with a check for `key == Param::Undefined`, assuming `Param::Undefined` is the equivalent of 0 in the Rust enum.
6. `dc_mprintf` is replaced with Rust's `to_string()` method, which is more idiomatic for converting integers to strings.
7. Memory management with `free` is not needed in Rust due to its ownership system.
8. The function returns `&mut Self` to allow for method chaining.
9. The `dc_param_set` call is replaced with a direct insertion into the `BTreeMap`.

Note that this translation assumes that `Param` is an enum type, and that `Param::Undefined` exists. If these assumptions are incorrect, you may need to adjust the `key` check accordingly.
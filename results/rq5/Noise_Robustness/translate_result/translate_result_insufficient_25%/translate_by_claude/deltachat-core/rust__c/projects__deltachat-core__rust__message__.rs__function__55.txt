<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
int dc_msg_is_forwarded(const dc_msg_t* msg)
{
	if (msg==NULL || msg->magic!=DC_MSG_MAGIC) {
		return 0;
	}
	return dc_param_get_int(msg->param, DC_PARAM_FORWARDED, 0)? 1 : 0;
}
</c function>
<rust function signature>
pub fn is_forwarded(&self) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn get_int(&self, key: Param) -> Option<i32> {
        self.get(key).and_then(|s| s.parse().ok())
    }

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::collections::BTreeSet;
use std::path::{Path, PathBuf};
use anyhow::{ensure, format_err, Context as _, Result};
use deltachat_contact_tools::{parse_vcard, VcardContact};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use tokio::{fs, io};
use crate::blob::BlobObject;
use crate::chat::{Chat, ChatId, ChatIdBlocked};
use crate::chatlist_events;
use crate::config::Config;
use crate::constants::{
    Blocked, Chattype, VideochatType, DC_CHAT_ID_TRASH, DC_DESIRED_TEXT_LEN, DC_MSG_ID_LAST_SPECIAL,
};
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::debug_logging::set_debug_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::{start_ephemeral_timers_msgids, Timer as EphemeralTimer};
use crate::events::EventType;
use crate::imap::markseen_on_imap_table;
use crate::location::delete_poi_location;
use crate::mimeparser::{parse_message_id, SystemMessage};
use crate::param::{Param, Params};
use crate::pgp::split_armored_data;
use crate::reaction::get_msg_reactions;
use crate::sql;
use crate::summary::Summary;
use crate::tools::{
    buf_compress, buf_decompress, get_filebytes, get_filemeta, gm2local_offset, read_file, time,
    timestamp_to_str, truncate,
};
use MessageState::*;
use MessageState::*;
use num_traits::FromPrimitive;
use super::*;
use crate::chat::{
        self, add_contact_to_chat, marknoticed_chat, send_text_msg, ChatItem, ProtectionStatus,
    };
use crate::chatlist::Chatlist;
use crate::config::Config;
use crate::reaction::send_reaction;
use crate::receive_imf::receive_imf;
use crate::test_utils as test;
use crate::test_utils::{TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub fn is_forwarded(&self) -> bool {
        0 != self.param.get_int(Param::Forwarded).unwrap_or_default()
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub fn is_forwarded(&self) -> bool {
    self.param
        .get_int(Param::Forwarded)
        .map_or(false, |value| value != 0)
}
```

This Rust function achieves the same functionality as the original C function:

1. It uses the `self` parameter instead of taking a `msg` argument, as it's implemented as a method.
2. It directly accesses the `param` field of `self`, assuming it's a struct with a `param` field of type `Params`.
3. It uses the `get_int` method from the provided dependencies to retrieve the value associated with `Param::Forwarded`.
4. The function returns a `bool` instead of an `int`, as specified in the Rust function signature.
5. It uses the `map_or` method to handle the `Option<i32>` returned by `get_int`. If the value is `None`, it returns `false`. Otherwise, it checks if the value is non-zero and returns `true` if it is, `false` otherwise.

This implementation assumes that `Param::Forwarded` is defined and corresponds to the `DC_PARAM_FORWARDED` used in the C function.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub fn is_forwarded(&self) -> bool {
    self.param
        .get_int(Param::Forwarded)
        .map_or(false, |value| value != 0)
}
```

This Rust function achieves the same functionality as the original C function:

1. It uses the `self` parameter instead of taking a `msg` argument, as it's implemented as a method.
2. It directly accesses the `param` field of `self`, assuming it's a struct with a `param` field of type `Params`.
3. It uses the `get_int` method from the provided dependencies to retrieve the value associated with `Param::Forwarded`.
4. The function returns a `bool` instead of an `int`, as specified in the Rust function signature.
5. It uses the `map_or` method to handle the `Option<i32>` returned by `get_int`. If the value is `None`, it returns `false`. Otherwise, it checks if the value is non-zero and returns `true` if it is, `false` otherwise.

This implementation assumes that `Param::Forwarded` is defined and corresponds to the `DC_PARAM_FORWARDED` used in the C function.
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
*     so you have to free it using dc_msg_unref() as usual.
 * @return The ID of the message that is being prepared.
 */
uint32_t dc_prepare_msg(dc_context_t* context, uint32_t chat_id, dc_msg_t* msg)
{
	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || msg==NULL || chat_id<=DC_CHAT_ID_LAST_SPECIAL) {
		return 0;
	}

	msg->state = DC_STATE_OUT_PREPARING;
	uint32_t msg_id = prepare_msg_common(context, chat_id, msg);

	context->cb(context, DC_EVENT_MSGS_CHANGED, msg->chat_id, msg->id);
	if (dc_param_exists(msg->param, DC_PARAM_SET_LATITUDE)) {
		context->cb(context, DC_EVENT_LOCATION_CHANGED, DC_CONTACT_ID_SELF, 0);
	}

	return msg_id;
}
</c function>
<rust function signature>
pub async fn prepare_msg(context: &Context, chat_id: ChatId, msg: &mut Message) -> Result<MsgId> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn emit_msgs_changed(&self, chat_id: ChatId, msg_id: MsgId) {
        self.emit_event(EventType::MsgsChanged { chat_id, msg_id });
        chatlist_events::emit_chatlist_changed(self);
        chatlist_events::emit_chatlist_item_changed(self, chat_id);
    }
pub struct ChatId(u32);

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::cmp;
use std::collections::{HashMap, HashSet};
use std::fmt;
use std::path::{Path, PathBuf};
use std::str::FromStr;
use std::time::Duration;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use deltachat_contact_tools::{strip_rtlo_characters, ContactAddress};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use strum_macros::EnumIter;
use tokio::task;
use crate::aheader::EncryptPreference;
use crate::blob::BlobObject;
use crate::chatlist::Chatlist;
use crate::chatlist_events;
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{
    self, Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK,
    DC_CHAT_ID_LAST_SPECIAL, DC_CHAT_ID_TRASH, DC_RESEND_USER_AVATAR_DAYS,
};
use crate::contact::{self, Contact, ContactId, Origin};
use crate::context::Context;
use crate::debug_logging::maybe_set_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::Timer as EphemeralTimer;
use crate::events::EventType;
use crate::html::new_html_mimepart;
use crate::location;
use crate::log::LogExt;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::mimefactory::MimeFactory;
use crate::mimeparser::SystemMessage;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::receive_imf::ReceivedMsg;
use crate::securejoin::BobState;
use crate::smtp::send_msg_to_smtp;
use crate::sql;
use crate::stock_str;
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{
    buf_compress, create_id, create_outgoing_rfc724_mid, create_smeared_timestamp,
    create_smeared_timestamps, get_abs_path, gm2local_offset, improve_single_line_input,
    smeared_time, time, IsNoneOrEmpty, SystemTime,
};
use crate::webxdc::WEBXDC_SUFFIX;
use CantSendReason::*;
use super::*;
use crate::chatlist::get_archived_cnt;
use crate::constants::{DC_GCL_ARCHIVED_ONLY, DC_GCL_NO_SPECIALS};
use crate::message::delete_msgs;
use crate::receive_imf::receive_imf;
use crate::test_utils::{sync, TestContext, TestContextManager};
use strum::IntoEnumIterator;
use tokio::fs;

</rust function dependency libraries>

</message>
<function>
pub async fn prepare_msg(context: &Context, chat_id: ChatId, msg: &mut Message) -> Result<MsgId> {
    ensure!(
        !chat_id.is_special(),
        "Cannot prepare message for special chat"
    );

    let msg_id = prepare_msg_common(context, chat_id, msg, MessageState::OutPreparing).await?;
    context.emit_msgs_changed(msg.chat_id, msg.id);

    Ok(msg_id)
}
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub async fn prepare_msg(context: &Context, chat_id: ChatId, msg: &mut Message) -> Result<MsgId> {
    if chat_id.0 <= DC_CHAT_ID_LAST_SPECIAL {
        return Ok(MsgId::new(0));
    }

    msg.state = MessageState::OutPreparing;
    let msg_id = prepare_msg_common(context, chat_id, msg).await?;

    context.emit_msgs_changed(chat_id, msg.id);
    if msg.param.exists(Param::SetLatitude) {
        context.emit_event(EventType::LocationChanged {
            contact_id: ContactId::SELF,
            msg_id: MsgId::new(0),
        });
    }

    Ok(msg_id)
}
```

Note that I've made the following adjustments and assumptions:

1. The function is now async and returns a Result<MsgId> instead of a uint32_t.
2. The null checks for context and msg are not necessary in Rust due to the type system.
3. The magic number check for context is not included, as it's not typically used in Rust.
4. The `prepare_msg_common` function is assumed to be an async function that returns a Result<MsgId>.
5. The `emit_msgs_changed` and `emit_event` methods are used instead of the C callback function.
6. The `DC_CONTACT_ID_SELF` is replaced with `ContactId::SELF`.
7. The `DC_PARAM_SET_LATITUDE` is replaced with `Param::SetLatitude`.
8. The `exists` method is used instead of `dc_param_exists`.

Please note that some of the exact equivalents (like `prepare_msg_common`) are not provided in the given dependencies, so I assumed their existence and signature based on the context. You may need to adjust these if the actual implementations differ.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub async fn prepare_msg(context: &Context, chat_id: ChatId, msg: &mut Message) -> Result<MsgId> {
    if chat_id.0 <= DC_CHAT_ID_LAST_SPECIAL {
        return Ok(MsgId::new(0));
    }

    msg.state = MessageState::OutPreparing;
    let msg_id = prepare_msg_common(context, chat_id, msg).await?;

    context.emit_msgs_changed(chat_id, msg.id);
    if msg.param.exists(Param::SetLatitude) {
        context.emit_event(EventType::LocationChanged {
            contact_id: ContactId::SELF,
            msg_id: MsgId::new(0),
        });
    }

    Ok(msg_id)
}
```

Note that I've made the following adjustments and assumptions:

1. The function is now async and returns a Result<MsgId> instead of a uint32_t.
2. The null checks for context and msg are not necessary in Rust due to the type system.
3. The magic number check for context is not included, as it's not typically used in Rust.
4. The `prepare_msg_common` function is assumed to be an async function that returns a Result<MsgId>.
5. The `emit_msgs_changed` and `emit_event` methods are used instead of the C callback function.
6. The `DC_CONTACT_ID_SELF` is replaced with `ContactId::SELF`.
7. The `DC_PARAM_SET_LATITUDE` is replaced with `Param::SetLatitude`.
8. The `exists` method is used instead of `dc_param_exists`.

Please note that some of the exact equivalents (like `prepare_msg_common`) are not provided in the given dependencies, so I assumed their existence and signature based on the context. You may need to adjust these if the actual implementations differ.
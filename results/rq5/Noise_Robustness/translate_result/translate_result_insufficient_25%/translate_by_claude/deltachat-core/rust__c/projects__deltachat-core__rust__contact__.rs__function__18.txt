<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
void dc_block_contact(dc_context_t* context, uint32_t contact_id, int new_blocking)
{
	int           send_event = 0;
	dc_contact_t* contact = dc_contact_new(context);
	sqlite3_stmt* stmt = NULL;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || contact_id<=DC_CONTACT_ID_LAST_SPECIAL) {
		goto cleanup;
	}

		if (dc_contact_load_from_db(contact, context->sql, contact_id)
		 && contact->blocked!=new_blocking)
		{
			stmt = dc_sqlite3_prepare(context->sql,
				"UPDATE contacts SET blocked=? WHERE id=?;");
			sqlite3_bind_int(stmt, 1, new_blocking);
			sqlite3_bind_int(stmt, 2, contact_id);
			if (sqlite3_step(stmt)!=SQLITE_DONE) {
				goto cleanup;
			}
			sqlite3_finalize(stmt);
			stmt = NULL;

			/* also (un)block all chats with _only_ this contact - we do not delete them to allow a non-destructive blocking->unblocking.
			(Maybe, beside normal chats (type=100) we should also block group chats with only this user.
			However, I'm not sure about this point; it may be confusing if the user wants to add other people;
			this would result in recreating the same group...) */
			stmt = dc_sqlite3_prepare(context->sql,
				"UPDATE chats SET blocked=? WHERE type=? AND id IN (SELECT chat_id FROM chats_contacts WHERE contact_id=?);");
			sqlite3_bind_int(stmt, 1, new_blocking);
			sqlite3_bind_int(stmt, 2, DC_CHAT_TYPE_SINGLE);
			sqlite3_bind_int(stmt, 3, contact_id);
			if (sqlite3_step(stmt)!=SQLITE_DONE) {
				goto cleanup;
			}

			/* mark all messages from the blocked contact as being noticed (this is to remove the deaddrop popup) */
			dc_marknoticed_contact(context, contact_id);

			send_event = 1;
		}

	if (send_event) {
		context->cb(context, DC_EVENT_CONTACTS_CHANGED, 0, 0);
	}

cleanup:
	sqlite3_finalize(stmt);
	dc_contact_unref(contact);
}
</c function>
<rust function signature>
pub async fn block(context: &Context, id: ContactId) -> Result<()> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct ContactId(u32);

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::cmp::{min, Reverse};
use std::collections::BinaryHeap;
use std::fmt;
use std::path::{Path, PathBuf};
use std::time::UNIX_EPOCH;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use base64::Engine as _;
use deltachat_contact_tools::may_be_valid_addr;
use deltachat_contact_tools::{
    self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
    ContactAddress, VcardContact,
};
use deltachat_derive::{FromSql, ToSql};
use rusqlite::OptionalExtension;
use serde::{Deserialize, Serialize};
use tokio::task;
use tokio::time::{timeout, Duration};
use crate::aheader::{Aheader, EncryptPreference};
use crate::blob::BlobObject;
use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{load_self_public_key, DcKey, SignedPublicKey};
use crate::log::LogExt;
use crate::login_param::LoginParam;
use crate::message::MessageState;
use crate::mimeparser::AvatarAction;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::sql::{self, params_iter};
use crate::sync::{self, Sync::*};
use crate::tools::{
    duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
};
use crate::{chat, chatlist_events, stock_str};
use deltachat_contact_tools::{may_be_valid_addr, normalize_name};
use super::*;
use crate::chat::{get_chat_contacts, send_text_msg, Chat};
use crate::chatlist::Chatlist;
use crate::receive_imf::receive_imf;
use crate::test_utils::{self, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn block(context: &Context, id: ContactId) -> Result<()> {
        set_blocked(context, Sync, id, true).await
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub async fn block(context: &Context, id: ContactId) -> Result<()> {
    let mut send_event = false;
    let contact = Contact::load_from_db(context, id).await?;

    if contact.is_blocked() != true {
        context.sql.transaction(|transaction| {
            transaction.execute(
                "UPDATE contacts SET blocked=? WHERE id=?;",
                params![true, id.0],
            )?;

            transaction.execute(
                "UPDATE chats SET blocked=? WHERE type=? AND id IN (SELECT chat_id FROM chats_contacts WHERE contact_id=?);",
                params![true, Chattype::Single as i32, id.0],
            )?;

            Ok(())
        }).await?;

        // Mark all messages from the blocked contact as being noticed
        context.marknoticed_contact(id).await?;

        send_event = true;
    }

    if send_event {
        context.emit_event(EventType::ContactsChanged);
    }

    Ok(())
}
```

This Rust function translation makes the following assumptions and changes:

1. The `Context` struct is assumed to have a `sql` field for database operations.
2. The `Contact` struct is assumed to have a `load_from_db` method and an `is_blocked` method.
3. The `marknoticed_contact` method is assumed to exist on the `Context` struct.
4. The `emit_event` method is used to send events, replacing the C callback mechanism.
5. Error handling is done using Rust's `Result` type.
6. The function is made async to accommodate potential asynchronous database operations.
7. The `sqlite3_stmt` preparation and finalization are replaced with Rust's `execute` method on the transaction.
8. The `DC_CHAT_TYPE_SINGLE` constant is replaced with `Chattype::Single`.
9. The `goto cleanup` pattern is replaced with Rust's more idiomatic error handling.

Please note that this translation may need further adjustments depending on the exact implementation details of your Rust codebase and the available methods on the `Context` and `Contact` structs.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub async fn block(context: &Context, id: ContactId) -> Result<()> {
    let mut send_event = false;
    let contact = Contact::load_from_db(context, id).await?;

    if contact.is_blocked() != true {
        context.sql.transaction(|transaction| {
            transaction.execute(
                "UPDATE contacts SET blocked=? WHERE id=?;",
                params![true, id.0],
            )?;

            transaction.execute(
                "UPDATE chats SET blocked=? WHERE type=? AND id IN (SELECT chat_id FROM chats_contacts WHERE contact_id=?);",
                params![true, Chattype::Single as i32, id.0],
            )?;

            Ok(())
        }).await?;

        // Mark all messages from the blocked contact as being noticed
        context.marknoticed_contact(id).await?;

        send_event = true;
    }

    if send_event {
        context.emit_event(EventType::ContactsChanged);
    }

    Ok(())
}
```

This Rust function translation makes the following assumptions and changes:

1. The `Context` struct is assumed to have a `sql` field for database operations.
2. The `Contact` struct is assumed to have a `load_from_db` method and an `is_blocked` method.
3. The `marknoticed_contact` method is assumed to exist on the `Context` struct.
4. The `emit_event` method is used to send events, replacing the C callback mechanism.
5. Error handling is done using Rust's `Result` type.
6. The function is made async to accommodate potential asynchronous database operations.
7. The `sqlite3_stmt` preparation and finalization are replaced with Rust's `execute` method on the transaction.
8. The `DC_CHAT_TYPE_SINGLE` constant is replaced with `Chattype::Single`.
9. The `goto cleanup` pattern is replaced with Rust's more idiomatic error handling.

Please note that this translation may need further adjustments depending on the exact implementation details of your Rust codebase and the available methods on the `Context` and `Contact` structs.
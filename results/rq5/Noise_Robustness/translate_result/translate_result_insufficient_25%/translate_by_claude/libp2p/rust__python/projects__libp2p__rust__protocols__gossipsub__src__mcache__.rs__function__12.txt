<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def __init__(self, gossip_size: int, history_size: int) -> None:
        self.gossip_size = gossip_size

        # (seqno, from_id) -> rpc message
        self.msgs = dict()

        self.iwant_counts = dict()
        
        # max length of history_size. each item is a list of CacheEntry.
        # messages lost upon shift().
        self.history = [[] for _ in range(history_size)]
</python function>
<rust function signature>
pub(crate) fn new(gossip: usize, history_capacity: usize) -> Self 
</rust function signature>
<rust function dependencies, and data type declarations>
pub(crate) struct MessageCache {
    msgs: HashMap<MessageId, (RawMessage, HashSet<PeerId>)>,
    /// For every message and peer the number of times this peer asked for the message
    iwant_counts: HashMap<MessageId, HashMap<PeerId, u32>>,
    history: Vec<Vec<CacheEntry>>,
    /// The number of indices in the cache history used for gossiping. That means that a message
    /// won't get gossiped anymore when shift got called `gossip` many times after inserting the
    /// message in the cache.
    gossip: usize,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use crate::topic::TopicHash;
use crate::types::{MessageId, RawMessage};
use libp2p_identity::PeerId;
use std::collections::hash_map::Entry;
use std::fmt::Debug;
use std::{
    collections::{HashMap, HashSet},
    fmt,
};
use super::*;
use crate::IdentTopic as Topic;

</rust function dependency libraries>

</message>
<function>
pub(crate) fn new(gossip: usize, history_capacity: usize) -> Self {
        MessageCache {
            gossip,
            msgs: HashMap::default(),
            iwant_counts: HashMap::default(),
            history: vec![Vec::new(); history_capacity],
        }
    }
</function>
<translated function>
pub(crate) fn new(gossip: usize, history_capacity: usize) -> Self {
    MessageCache {
        msgs: HashMap::new(),
        iwant_counts: HashMap::new(),
        history: vec![Vec::new(); history_capacity],
        gossip,
    }
}</translated function>pub(crate) fn new(gossip: usize, history_capacity: usize) -> Self {
    MessageCache {
        msgs: HashMap::new(),
        iwant_counts: HashMap::new(),
        history: vec![Vec::new(); history_capacity],
        gossip,
    }
}
<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def addrs(self, peer_id: ID) -> List[Multiaddr]:
        """
        :param peer_id: peer ID to get addrs for
        :return: list of addrs
        :raise PeerStoreError: if peer ID not found
        """
        if peer_id in self.peer_data_map:
            return self.peer_data_map[peer_id].get_addrs()
        raise PeerStoreError("peer ID not found")
</python function>
<rust function signature>
pub fn get(&mut self, peer: &PeerId) -> impl Iterator<Item = Multiaddr> + '_ 
</rust function signature>
<rust function dependencies, and data type declarations>
fn iter(&self) -> impl Iterator<Item = &Multiaddr> {
        self.inner.iter().map(|(a, _)| a)
    }

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use crate::behaviour::FromSwarm;
use crate::{DialError, DialFailure, NewExternalAddrOfPeer};
use libp2p_core::Multiaddr;
use libp2p_identity::PeerId;
use lru::LruCache;
use std::num::NonZeroUsize;
use super::*;
use std::io;
use crate::ConnectionId;
use libp2p_core::{
        multiaddr::Protocol,
        transport::{memory::MemoryTransportError, TransportError},
    };
use once_cell::sync::Lazy;

</rust function dependency libraries>

</message>
<function>
pub fn get(&mut self, peer: &PeerId) -> impl Iterator<Item = Multiaddr> + '_ {
        self.0
            .get(peer)
            .into_iter()
            .flat_map(|c| c.iter().map(|(m, ())| m))
            .cloned()
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

pub fn get(&mut self, peer: &PeerId) -> impl Iterator<Item = Multiaddr> + '_ {
    match self.peer_data_map.get(peer) {
        Some(peer_data) => peer_data.get_addrs().into_iter(),
        None => {
            // Since we can't raise an exception in Rust, we'll return an empty iterator
            // and potentially log the error or handle it in another way
            // For now, we'll just return an empty iterator
            std::iter::empty()
        }
    }
}</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

pub fn get(&mut self, peer: &PeerId) -> impl Iterator<Item = Multiaddr> + '_ {
    match self.peer_data_map.get(peer) {
        Some(peer_data) => peer_data.get_addrs().into_iter(),
        None => {
            // Since we can't raise an exception in Rust, we'll return an empty iterator
            // and potentially log the error or handle it in another way
            // For now, we'll just return an empty iterator
            std::iter::empty()
        }
    }
}
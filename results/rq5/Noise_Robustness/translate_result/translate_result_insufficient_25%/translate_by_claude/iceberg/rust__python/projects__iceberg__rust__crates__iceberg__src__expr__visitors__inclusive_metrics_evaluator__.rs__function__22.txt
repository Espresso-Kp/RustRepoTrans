<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def visit_not_starts_with(self, term: BoundTerm[L], literal: Literal[L]) -> bool:
        field = term.ref().field
        field_id: int = field.field_id

        if self._may_contain_null(field_id):
            return ROWS_MIGHT_MATCH

        if not isinstance(field.field_type, PrimitiveType):
            raise ValueError(f"Expected PrimitiveType: {field.field_type}")

        prefix = str(literal.value)
        len_prefix = len(prefix)

        # not_starts_with will match unless all values must start with the prefix. This happens when
        # the lower and upper bounds both start with the prefix.
        if (lower_bound_bytes := self.lower_bounds.get(field_id)) and (upper_bound_bytes := self.upper_bounds.get(field_id)):
            lower_bound = str(from_bytes(field.field_type, lower_bound_bytes))
            upper_bound = str(from_bytes(field.field_type, upper_bound_bytes))

            # if lower is shorter than the prefix then lower doesn't start with the prefix
            if len(lower_bound) < len_prefix:
                return ROWS_MIGHT_MATCH

            if lower_bound[:len_prefix] == prefix:
                # if upper is shorter than the prefix then upper can't start with the prefix
                if len(upper_bound) < len_prefix:
                    return ROWS_MIGHT_MATCH

                if upper_bound[:len_prefix] == prefix:
                    return ROWS_CANNOT_MATCH

        return ROWS_MIGHT_MATCH
</python function>
<rust function signature>
fn not_starts_with(
        &mut self,
        reference: &BoundReference,
        datum: &Datum,
        _predicate: &BoundPredicate,
    ) -> crate::Result<bool> 
</rust function signature>
<rust function dependencies, and data type declarations>
fn contains_nulls_only(&self, field_id: i32) -> bool {
        let null_count = self.null_count(field_id);
        let value_count = self.value_count(field_id);

        null_count.is_some() && null_count == value_count
    }
fn lower_bound(&self, field_id: i32) -> Option<&Datum> {
        self.data_file.lower_bounds.get(&field_id)
    }
pub struct BoundReference {
    // This maybe different from [`name`] filed in [`NestedField`] since this contains full path.
    // For example, if the field is `a.b.c`, then `field.name` is `c`, but `original_name` is `a.b.c`.
    column_name: String,
    field: NestedFieldRef,
    accessor: StructAccessorRef,
}
pub struct Error {
    kind: ErrorKind,
    message: String,

    context: Vec<(&'static str, String)>,

    source: Option<anyhow::Error>,
    backtrace: Backtrace,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use crate::expr::visitors::bound_predicate_visitor::{visit, BoundPredicateVisitor};
use crate::expr::{BoundPredicate, BoundReference};
use crate::spec::{DataFile, Datum, PrimitiveLiteral};
use crate::{Error, ErrorKind};
use fnv::FnvHashSet;
use crate::expr::visitors::inclusive_metrics_evaluator::InclusiveMetricsEvaluator;
use crate::expr::PredicateOperator::{
        Eq, GreaterThan, GreaterThanOrEq, In, IsNan, IsNull, LessThan, LessThanOrEq, NotEq, NotIn,
        NotNan, NotNull, NotStartsWith, StartsWith,
    };
use crate::expr::{
        BinaryExpression, Bind, BoundPredicate, Predicate, Reference, SetExpression,
        UnaryExpression,
    };
use crate::spec::{
        DataContentType, DataFile, DataFileFormat, Datum, NestedField, PartitionField,
        PartitionSpec, PrimitiveType, Schema, Struct, Transform, Type,
    };
use fnv::FnvHashSet;
use std::collections::HashMap;
use std::ops::Not;
use std::sync::Arc;

</rust function dependency libraries>

</message>
<function>
fn not_starts_with(
        &mut self,
        reference: &BoundReference,
        datum: &Datum,
        _predicate: &BoundPredicate,
    ) -> crate::Result<bool> {
        let field_id = reference.field().id;

        if self.may_contain_null(field_id) {
            return ROWS_MIGHT_MATCH;
        }

        // notStartsWith will match unless all values must start with the prefix.
        // This happens when the lower and upper bounds both start with the prefix.

        let PrimitiveLiteral::String(prefix) = datum.literal() else {
            return Err(Error::new(
                ErrorKind::Unexpected,
                "Cannot use StartsWith operator on non-string values",
            ));
        };

        let Some(lower_bound) = self.lower_bound(field_id) else {
            return ROWS_MIGHT_MATCH;
        };

        let PrimitiveLiteral::String(lower_bound_str) = lower_bound.literal() else {
            return Err(Error::new(
                ErrorKind::Unexpected,
                "Cannot use NotStartsWith operator on non-string lower_bound value",
            ));
        };

        if lower_bound_str < prefix {
            // if lower is shorter than the prefix then lower doesn't start with the prefix
            return ROWS_MIGHT_MATCH;
        }

        let prefix_len = prefix.chars().count();

        if lower_bound_str.chars().take(prefix_len).collect::<String>() == *prefix {
            // lower bound matches the prefix

            let Some(upper_bound) = self.upper_bound(field_id) else {
                return ROWS_MIGHT_MATCH;
            };

            let PrimitiveLiteral::String(upper_bound) = upper_bound.literal() else {
                return Err(Error::new(
                    ErrorKind::Unexpected,
                    "Cannot use NotStartsWith operator on non-string upper_bound value",
                ));
            };

            // if upper is shorter than the prefix then upper can't start with the prefix
            if upper_bound.chars().count() < prefix_len {
                return ROWS_MIGHT_MATCH;
            }

            if upper_bound.chars().take(prefix_len).collect::<String>() == *prefix {
                // both bounds match the prefix, so all rows must match the
                // prefix and therefore do not satisfy the predicate
                return ROWS_CANNOT_MATCH;
            }
        }

        ROWS_MIGHT_MATCH
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and library imports:

```rust
fn not_starts_with(
    &mut self,
    reference: &BoundReference,
    datum: &Datum,
    _predicate: &BoundPredicate,
) -> crate::Result<bool> {
    let field_id = reference.field.id();

    if self.contains_nulls_only(field_id) {
        return Ok(true);
    }

    let field_type = reference.field.field_type();
    if !matches!(field_type, Type::Primitive(_)) {
        return Err(Error::new(
            ErrorKind::DataInvalid,
            format!("Expected PrimitiveType: {:?}", field_type),
        ));
    }

    let prefix = match datum {
        Datum::String(s) => s,
        _ => return Err(Error::new(ErrorKind::DataInvalid, "Expected string literal")),
    };
    let len_prefix = prefix.len();

    if let (Some(lower_bound), Some(upper_bound)) = (
        self.lower_bound(field_id),
        self.data_file.upper_bounds.get(&field_id),
    ) {
        let lower_bound_str = lower_bound.to_string();
        let upper_bound_str = upper_bound.to_string();

        if lower_bound_str.len() < len_prefix {
            return Ok(true);
        }

        if lower_bound_str.starts_with(prefix) {
            if upper_bound_str.len() < len_prefix {
                return Ok(true);
            }

            if upper_bound_str.starts_with(prefix) {
                return Ok(false);
            }
        }
    }

    Ok(true)
}
```

This Rust function follows the provided signature and attempts to replicate the logic of the Python function. It uses the provided dependencies and data types, such as `BoundReference`, `Datum`, and `Error`. The function handles potential errors and returns a `Result<bool>` as per the Rust function signature.

Note that some aspects of the original Python function, such as `from_bytes`, have been omitted as there wasn't a direct equivalent in the provided Rust dependencies. The function assumes that `Datum` can be converted to a string representation directly.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and library imports:

```rust
fn not_starts_with(
    &mut self,
    reference: &BoundReference,
    datum: &Datum,
    _predicate: &BoundPredicate,
) -> crate::Result<bool> {
    let field_id = reference.field.id();

    if self.contains_nulls_only(field_id) {
        return Ok(true);
    }

    let field_type = reference.field.field_type();
    if !matches!(field_type, Type::Primitive(_)) {
        return Err(Error::new(
            ErrorKind::DataInvalid,
            format!("Expected PrimitiveType: {:?}", field_type),
        ));
    }

    let prefix = match datum {
        Datum::String(s) => s,
        _ => return Err(Error::new(ErrorKind::DataInvalid, "Expected string literal")),
    };
    let len_prefix = prefix.len();

    if let (Some(lower_bound), Some(upper_bound)) = (
        self.lower_bound(field_id),
        self.data_file.upper_bounds.get(&field_id),
    ) {
        let lower_bound_str = lower_bound.to_string();
        let upper_bound_str = upper_bound.to_string();

        if lower_bound_str.len() < len_prefix {
            return Ok(true);
        }

        if lower_bound_str.starts_with(prefix) {
            if upper_bound_str.len() < len_prefix {
                return Ok(true);
            }

            if upper_bound_str.starts_with(prefix) {
                return Ok(false);
            }
        }
    }

    Ok(true)
}
```

This Rust function follows the provided signature and attempts to replicate the logic of the Python function. It uses the provided dependencies and data types, such as `BoundReference`, `Datum`, and `Error`. The function handles potential errors and returns a `Result<bool>` as per the Rust function signature.

Note that some aspects of the original Python function, such as `from_bytes`, have been omitted as there wasn't a direct equivalent in the provided Rust dependencies. The function assumes that `Datum` can be converted to a string representation directly.
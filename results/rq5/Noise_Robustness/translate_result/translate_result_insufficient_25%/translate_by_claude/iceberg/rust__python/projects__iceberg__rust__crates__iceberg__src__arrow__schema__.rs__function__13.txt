<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def pyarrow_to_schema(schema: pa.Schema, name_mapping: Optional[NameMapping] = None) -> Schema:
    has_ids = visit_pyarrow(schema, _HasIds())
    if has_ids:
        visitor = _ConvertToIceberg()
    elif name_mapping is not None:
        visitor = _ConvertToIceberg(name_mapping=name_mapping)
    else:
        raise ValueError(
            "Parquet file does not have field-ids and the Iceberg table does not have 'schema.name-mapping.default' defined"
        )
    return visit_pyarrow(schema, visitor)
</python function>
<rust function signature>
pub fn arrow_schema_to_schema(schema: &ArrowSchema) -> Result<Schema> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct Schema {
    r#struct: StructType,
    schema_id: SchemaId,
    highest_field_id: i32,
    identifier_field_ids: HashSet<i32>,

    alias_to_id: BiHashMap<String, i32>,
    id_to_field: HashMap<i32, NestedFieldRef>,

    name_to_id: HashMap<String, i32>,
    lowercase_name_to_id: HashMap<String, i32>,
    id_to_name: HashMap<i32, String>,

    field_id_to_accessor: HashMap<i32, Arc<StructAccessor>>,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use crate::error::Result;
use crate::spec::{
    Datum, ListType, MapType, NestedField, NestedFieldRef, PrimitiveLiteral, PrimitiveType, Schema,
    SchemaVisitor, StructType, Type,
};
use crate::{Error, ErrorKind};
use arrow_array::types::{validate_decimal_precision_and_scale, Decimal128Type};
use arrow_array::{
    BooleanArray, Datum as ArrowDatum, Float32Array, Float64Array, Int32Array, Int64Array,
};
use arrow_schema::{DataType, Field, Fields, Schema as ArrowSchema, TimeUnit};
use bitvec::macros::internal::funty::Fundamental;
use parquet::arrow::PARQUET_FIELD_ID_META_KEY;
use rust_decimal::prelude::ToPrimitive;
use std::collections::HashMap;
use std::sync::Arc;
use super::*;
use crate::spec::Schema;
use arrow_schema::DataType;
use arrow_schema::Field;
use arrow_schema::Schema as ArrowSchema;
use arrow_schema::TimeUnit;
use std::collections::HashMap;
use std::sync::Arc;

</rust function dependency libraries>

</message>
<function>
pub fn arrow_schema_to_schema(schema: &ArrowSchema) -> Result<Schema> {
    let mut visitor = ArrowSchemaConverter::new();
    visit_schema(schema, &mut visitor)
}
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
pub fn arrow_schema_to_schema(schema: &ArrowSchema) -> Result<Schema> {
    let visitor = ConvertToIceberg::new();
    visit_arrow_schema(schema, &visitor)
}

struct ConvertToIceberg {
    field_id: i32,
}

impl ConvertToIceberg {
    fn new() -> Self {
        ConvertToIceberg { field_id: 1000 }
    }
}

impl SchemaVisitor for ConvertToIceberg {
    type T = Result<NestedFieldRef>;

    fn visit_primitive(&mut self, field: &Field) -> Self::T {
        let field_id = self.field_id;
        self.field_id += 1;

        let primitive_type = match field.data_type() {
            DataType::Boolean => PrimitiveType::Boolean,
            DataType::Int32 => PrimitiveType::Int,
            DataType::Int64 => PrimitiveType::Long,
            DataType::Float32 => PrimitiveType::Float,
            DataType::Float64 => PrimitiveType::Double,
            DataType::Decimal128(precision, scale) => {
                validate_decimal_precision_and_scale(*precision, *scale)?;
                PrimitiveType::Decimal {
                    precision: *precision as u32,
                    scale: *scale as u32,
                }
            }
            DataType::Date32 => PrimitiveType::Date,
            DataType::Time64(TimeUnit::Microsecond) => PrimitiveType::Time,
            DataType::Timestamp(TimeUnit::Microsecond, _) => PrimitiveType::Timestamp,
            DataType::Binary => PrimitiveType::Binary,
            DataType::LargeBinary => PrimitiveType::Binary,
            DataType::Utf8 => PrimitiveType::String,
            DataType::LargeUtf8 => PrimitiveType::String,
            _ => return Err(Error::new(ErrorKind::DataTypeNotSupported, format!("Unsupported data type: {:?}", field.data_type()))),
        };

        Ok(Arc::new(NestedField::new(
            field_id,
            field.is_nullable(),
            field.name(),
            Type::Primitive(primitive_type),
        )))
    }

    fn visit_struct(&mut self, field: &Field, fields: &Fields) -> Self::T {
        let field_id = self.field_id;
        self.field_id += 1;

        let mut struct_fields = Vec::new();
        for nested_field in fields {
            let nested_field_ref = self.visit_field(nested_field)?;
            struct_fields.push(nested_field_ref);
        }

        Ok(Arc::new(NestedField::new(
            field_id,
            field.is_nullable(),
            field.name(),
            Type::Struct(StructType::new(struct_fields)),
        )))
    }

    fn visit_list(&mut self, field: &Field, item_field: &Field) -> Self::T {
        let field_id = self.field_id;
        self.field_id += 1;

        let element_field = self.visit_field(item_field)?;
        Ok(Arc::new(NestedField::new(
            field_id,
            field.is_nullable(),
            field.name(),
            Type::List(ListType::new(field_id + 1, element_field)),
        )))
    }

    fn visit_map(&mut self, field: &Field, key_field: &Field, value_field: &Field) -> Self::T {
        let field_id = self.field_id;
        self.field_id += 1;

        let key_field = self.visit_field(key_field)?;
        let value_field = self.visit_field(value_field)?;
        Ok(Arc::new(Ne</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
pub fn arrow_schema_to_schema(schema: &ArrowSchema) -> Result<Schema> {
    let visitor = ConvertToIceberg::new();
    visit_arrow_schema(schema, &visitor)
}

struct ConvertToIceberg {
    field_id: i32,
}

impl ConvertToIceberg {
    fn new() -> Self {
        ConvertToIceberg { field_id: 1000 }
    }
}

impl SchemaVisitor for ConvertToIceberg {
    type T = Result<NestedFieldRef>;

    fn visit_primitive(&mut self, field: &Field) -> Self::T {
        let field_id = self.field_id;
        self.field_id += 1;

        let primitive_type = match field.data_type() {
            DataType::Boolean => PrimitiveType::Boolean,
            DataType::Int32 => PrimitiveType::Int,
            DataType::Int64 => PrimitiveType::Long,
            DataType::Float32 => PrimitiveType::Float,
            DataType::Float64 => PrimitiveType::Double,
            DataType::Decimal128(precision, scale) => {
                validate_decimal_precision_and_scale(*precision, *scale)?;
                PrimitiveType::Decimal {
                    precision: *precision as u32,
                    scale: *scale as u32,
                }
            }
            DataType::Date32 => PrimitiveType::Date,
            DataType::Time64(TimeUnit::Microsecond) => PrimitiveType::Time,
            DataType::Timestamp(TimeUnit::Microsecond, _) => PrimitiveType::Timestamp,
            DataType::Binary => PrimitiveType::Binary,
            DataType::LargeBinary => PrimitiveType::Binary,
            DataType::Utf8 => PrimitiveType::String,
            DataType::LargeUtf8 => PrimitiveType::String,
            _ => return Err(Error::new(ErrorKind::DataTypeNotSupported, format!("Unsupported data type: {:?}", field.data_type()))),
        };

        Ok(Arc::new(NestedField::new(
            field_id,
            field.is_nullable(),
            field.name(),
            Type::Primitive(primitive_type),
        )))
    }

    fn visit_struct(&mut self, field: &Field, fields: &Fields) -> Self::T {
        let field_id = self.field_id;
        self.field_id += 1;

        let mut struct_fields = Vec::new();
        for nested_field in fields {
            let nested_field_ref = self.visit_field(nested_field)?;
            struct_fields.push(nested_field_ref);
        }

        Ok(Arc::new(NestedField::new(
            field_id,
            field.is_nullable(),
            field.name(),
            Type::Struct(StructType::new(struct_fields)),
        )))
    }

    fn visit_list(&mut self, field: &Field, item_field: &Field) -> Self::T {
        let field_id = self.field_id;
        self.field_id += 1;

        let element_field = self.visit_field(item_field)?;
        Ok(Arc::new(NestedField::new(
            field_id,
            field.is_nullable(),
            field.name(),
            Type::List(ListType::new(field_id + 1, element_field)),
        )))
    }

    fn visit_map(&mut self, field: &Field, key_field: &Field, value_field: &Field) -> Self::T {
        let field_id = self.field_id;
        self.field_id += 1;

        let key_field = self.visit_field(key_field)?;
        let value_field = self.visit_field(value_field)?;
        Ok(Arc::new(Ne
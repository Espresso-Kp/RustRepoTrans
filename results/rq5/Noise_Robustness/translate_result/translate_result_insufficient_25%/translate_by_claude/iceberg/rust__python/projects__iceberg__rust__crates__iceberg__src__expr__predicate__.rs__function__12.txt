<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def bind(self, schema: Schema, case_sensitive: bool = True) -> BoundSetPredicate[L]:
        bound_term = self.term.bind(schema, case_sensitive)
        return self.as_bound(bound_term, {lit.to(bound_term.ref().field.field_type) for lit in self.literals})
</python function>
<rust function signature>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct SetExpression<T> {
    /// Operator of this predicate, must be set operator, such as `IN`, `NOT IN`, etc.
    op: PredicateOperator,
    /// Term of this predicate, for example, `a` in `a in (1, 2, 3)`.
    term: T,
    /// Literals of this predicate, for example, `(1, 2, 3)` in `a in (1, 2, 3)`.
    literals: FnvHashSet<Datum>,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::fmt::{Debug, Display, Formatter};
use std::ops::Not;
use array_init::array_init;
use fnv::FnvHashSet;
use itertools::Itertools;
use crate::error::Result;
use crate::expr::{Bind, BoundReference, PredicateOperator, Reference};
use crate::spec::{Datum, SchemaRef};
use crate::{Error, ErrorKind};
use std::ops::Not;
use std::sync::Arc;
use crate::expr::Bind;
use crate::expr::Predicate::{AlwaysFalse, AlwaysTrue};
use crate::expr::Reference;
use crate::spec::Datum;
use crate::spec::{NestedField, PrimitiveType, Schema, SchemaRef, Type};

</rust function dependency libraries>

</message>
<function>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
        let bound_term = self.term.bind(schema.clone(), case_sensitive)?;
        Ok(SetExpression::new(
            self.op,
            bound_term,
            self.literals.clone(),
        ))
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
    let bound_term = self.term.bind(schema.clone(), case_sensitive)?;
    let bound_literals = self.literals
        .iter()
        .map(|lit| lit.to(bound_term.ref_().field.field_type()))
        .collect::<Result<FnvHashSet<_>>>()?;

    Ok(self.as_bound(bound_term, bound_literals))
}
```

Note that I made some adjustments to fit Rust's syntax and error handling:

1. The `bind` method on `self.term` returns a `Result`, so we use the `?` operator to propagate any errors.
2. We use `iter()` and `map()` to transform the literals, collecting them into a `FnvHashSet`.
3. The `to` method on each literal might fail, so we use `collect::<Result<FnvHashSet<_>>>()` to collect the results and propagate any errors.
4. We wrap the final result in `Ok()` to match the `Result<Self::Bound>` return type.

Also, note that I assumed `self.as_bound` exists and has a similar signature to the Python version. If this method doesn't exist or has a different signature in Rust, you may need to adjust that part of the code accordingly.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
    let bound_term = self.term.bind(schema.clone(), case_sensitive)?;
    let bound_literals = self.literals
        .iter()
        .map(|lit| lit.to(bound_term.ref_().field.field_type()))
        .collect::<Result<FnvHashSet<_>>>()?;

    Ok(self.as_bound(bound_term, bound_literals))
}
```

Note that I made some adjustments to fit Rust's syntax and error handling:

1. The `bind` method on `self.term` returns a `Result`, so we use the `?` operator to propagate any errors.
2. We use `iter()` and `map()` to transform the literals, collecting them into a `FnvHashSet`.
3. The `to` method on each literal might fail, so we use `collect::<Result<FnvHashSet<_>>>()` to collect the results and propagate any errors.
4. We wrap the final result in `Ok()` to match the `Result<Self::Bound>` return type.

Also, note that I assumed `self.as_bound` exists and has a similar signature to the Python version. If this method doesn't exist or has a different signature in Rust, you may need to adjust that part of the code accordingly.
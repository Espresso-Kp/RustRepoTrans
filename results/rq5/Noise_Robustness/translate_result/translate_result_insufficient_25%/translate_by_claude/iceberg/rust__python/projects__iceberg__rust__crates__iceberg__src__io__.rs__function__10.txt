<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def new_output(self, location: str) -> FsspecOutputFile:
        """Get an FsspecOutputFile instance to write bytes to the file at the given location.

        Args:
            location (str): A URI or a path to a local file.

        Returns:
            FsspecOutputFile: An FsspecOutputFile instance for the given location.
        """
        uri = urlparse(location)
        fs = self.get_fs(uri.scheme)
        return FsspecOutputFile(location=location, fs=fs)
</python function>
<rust function signature>
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct OutputFile {
    op: Operator,
    // Absolution path of file.
    path: String,
    // Relative path of file to uri, starts at [`relative_path_pos`]
    relative_path_pos: usize,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>



use bytes::Bytes;
use std::ops::Range;
use std::{collections::HashMap, sync::Arc};
use crate::{error::Result, Error, ErrorKind};
use once_cell::sync::Lazy;
use opendal::{Operator, Scheme};
use url::Url;
use std::io::Write;
use std::{fs::File, path::Path};
use futures::io::AllowStdIo;
use futures::AsyncReadExt;
use tempfile::TempDir;
use super::{FileIO, FileIOBuilder};

</rust function dependency libraries>

</message>
<function>
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> {
        let (op, relative_path) = self.inner.create_operator(&path)?;
        let path = path.as_ref().to_string();
        let relative_path_pos = path.len() - relative_path.len();
        Ok(OutputFile {
            op,
            path,
            relative_path_pos,
        })
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> {
    let path_str = path.as_ref();
    let url = Url::parse(path_str).map_err(|e| Error::new(ErrorKind::InvalidInput, e))?;

    let scheme = url.scheme();
    let op = self.get_operator(scheme)?;

    let relative_path_pos = url.path().len() - url.path().trim_start_matches('/').len();

    Ok(OutputFile {
        op,
        path: path_str.to_string(),
        relative_path_pos,
    })
}
```

This Rust function does the following:

1. It takes a `path` parameter that implements `AsRef<str>`.
2. It parses the input path as a URL using `Url::parse()`.
3. It extracts the scheme from the URL.
4. It calls `self.get_operator()` (assuming this method exists in the struct) to get the appropriate `Operator` for the given scheme.
5. It calculates the `relative_path_pos` by finding the position where the path starts in the URL.
6. Finally, it returns an `OutputFile` struct wrapped in a `Result`.

Note that this translation assumes:
- The existence of a `get_operator()` method in the struct, which returns an `Operator` based on the scheme.
- The `Error` and `ErrorKind` types are available and used for error handling.
- The `OutputFile` struct is defined as provided in the dependencies.

The function uses the provided dependencies and libraries, particularly `url::Url` for URL parsing and `opendal::Operator` for the operator field in `OutputFile`.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> {
    let path_str = path.as_ref();
    let url = Url::parse(path_str).map_err(|e| Error::new(ErrorKind::InvalidInput, e))?;

    let scheme = url.scheme();
    let op = self.get_operator(scheme)?;

    let relative_path_pos = url.path().len() - url.path().trim_start_matches('/').len();

    Ok(OutputFile {
        op,
        path: path_str.to_string(),
        relative_path_pos,
    })
}
```

This Rust function does the following:

1. It takes a `path` parameter that implements `AsRef<str>`.
2. It parses the input path as a URL using `Url::parse()`.
3. It extracts the scheme from the URL.
4. It calls `self.get_operator()` (assuming this method exists in the struct) to get the appropriate `Operator` for the given scheme.
5. It calculates the `relative_path_pos` by finding the position where the path starts in the URL.
6. Finally, it returns an `OutputFile` struct wrapped in a `Result`.

Note that this translation assumes:
- The existence of a `get_operator()` method in the struct, which returns an `Operator` based on the scheme.
- The `Error` and `ErrorKind` types are available and used for error handling.
- The `OutputFile` struct is defined as provided in the dependencies.

The function uses the provided dependencies and libraries, particularly `url::Url` for URL parsing and `opendal::Operator` for the operator field in `OutputFile`.
<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int GET_CLIENT_PERMIT(int sha,int date,byte[] S,byte[] CID,byte[] CTT)
	{
		byte[] h=hashit(sha,date,CID,EFS);
		ECP P=ECP.mapit(h);

		BIG s=BIG.fromBytes(S);
		ECP OP=PAIR.G1mul(P,s);

		OP.toBytes(CTT,false);
		return 0;
	}
</java function>
<rust function signature>
pub fn get_client_permit(sha: usize, date: usize, s: &[u8], cid: &[u8], ctt: &mut [u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn mapit(h: &[u8]) -> ECP {
        let q = Big::new_ints(&rom::MODULUS);
        let mut x = Big::from_bytes(h);
        x.rmod(&q);
        let mut P: ECP;

        loop {
            loop {
                if CURVETYPE != CurveType::Montgomery {
                    P = ECP::new_bigint(&x, 0);
                } else {
                    P = ECP::new_big(&x);
                }
                x.inc(1);
                x.norm();
                if !P.is_infinity() {
                    break;
                }
            }
            P.cfp();
            if !P.is_infinity() {
                break;
            }
        }

        return P;
    }
pub const MODBYTES: usize = 32;

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp2::ECP2;
use super::fp12::FP12;
use super::fp4::FP4;
use super::pair;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn get_client_permit(sha: usize, date: usize, s: &[u8], cid: &[u8], ctt: &mut [u8]) -> isize {
    const RM: usize = big::MODBYTES as usize;
    let mut h: [u8; RM] = [0; RM];
    hashit(sha, date, cid, &mut h);
    let P = ECP::mapit(&h);

    let mut sc = Big::from_bytes(s);
    pair::g1mul(&P, &mut sc).to_bytes(ctt, false);
    return 0;
}
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn get_client_permit(sha: usize, date: usize, s: &[u8], cid: &[u8], ctt: &mut [u8]) -> isize {
    let h = hashit(sha, date, cid, EFS);
    let P = ECP::mapit(&h);

    let mut s_big = Big::from_bytes(s);
    let mut OP = ECP::new_bigint(&s_big, 0);
    OP = ECP::mul(&P, &OP);

    OP.to_bytes(ctt, false);
    0
}
```
Note that I've assumed that `hashit` is a function that takes four arguments and returns a byte array, and that `EFS` is a constant or variable that is in scope. I've also assumed that `ECP::mul` is a method that takes two `ECP` instances and returns a new `ECP` instance. If these assumptions are incorrect, please let me know and I'll be happy to revise the translation.</translated function>Here is the translated Rust function:
```rust
pub fn get_client_permit(sha: usize, date: usize, s: &[u8], cid: &[u8], ctt: &mut [u8]) -> isize {
    let h = hashit(sha, date, cid, EFS);
    let P = ECP::mapit(&h);

    let mut s_big = Big::from_bytes(s);
    let mut OP = ECP::new_bigint(&s_big, 0);
    OP = ECP::mul(&P, &OP);

    OP.to_bytes(ctt, false);
    0
}
```
Note that I've assumed that `hashit` is a function that takes four arguments and returns a byte array, and that `EFS` is a constant or variable that is in scope. I've also assumed that `ECP::mul` is a method that takes two `ECP` instances and returns a new `ECP` instance. If these assumptions are incorrect, please let me know and I'll be happy to revise the translation.
<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int GET_SERVER_SECRET(byte[] S,byte[] SST)
	{
		ECP4 Q=ECP4.generator();
		BIG s=BIG.fromBytes(S);
		Q=PAIR192.G2mul(Q,s);
		Q.toBytes(SST);
		return 0;
	}
</java function>
<rust function signature>
pub fn get_server_secret(s: &[u8], sst: &mut [u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn from_bytes(b: &[u8]) -> Big {
        Big::from_byte_array(b, 0)
    }

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp4::ECP4;
use super::fp24::FP24;
use super::fp8::FP8;
use super::pair192;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn get_server_secret(s: &[u8], sst: &mut [u8]) -> isize {
    let mut Q = ECP4::generator();
    let mut sc = Big::from_bytes(s);
    Q = pair192::g2mul(&mut Q, &mut sc);
    Q.to_bytes(sst);
    return 0;
}
</function>
<translated function>
Here is the translated Rust function:
```rust
use super::ecp;
use super::ecp4::ECP4;
use super::big::Big;

pub fn get_server_secret(s: &[u8], sst: &mut [u8]) -> isize {
    let q = ECP4::generator();
    let s = Big::from_bytes(s);
    let q = pair192::G2mul(q, s);
    q.to_bytes(sst);
    0
}
```
Note that I've assumed that the `pair192` module is already defined elsewhere in the codebase, and that it exports a `G2mul` function that takes an `ECP4` and a `Big` as input and returns a new `ECP4`. If this is not the case, you may need to modify the code accordingly.</translated function>Here is the translated Rust function:
```rust
use super::ecp;
use super::ecp4::ECP4;
use super::big::Big;

pub fn get_server_secret(s: &[u8], sst: &mut [u8]) -> isize {
    let q = ECP4::generator();
    let s = Big::from_bytes(s);
    let q = pair192::G2mul(q, s);
    q.to_bytes(sst);
    0
}
```
Note that I've assumed that the `pair192` module is already defined elsewhere in the codebase, and that it exports a `G2mul` function that takes an `ECP4` and a `Big` as input and returns a new `ECP4`. If this is not the case, you may need to modify the code accordingly.
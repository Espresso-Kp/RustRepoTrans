<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public void process_array(byte[] b)
	{
		for (int i=0;i<b.length;i++) process((int)b[i]);
	}
</java function>
<rust function signature>
pub fn process_array(&mut self, b: &[u8]) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct HASH384 {
    length: [u64; 2],
    h: [u64; 8],
    w: [u64; 80],
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use super::*;

</rust function dependency libraries>

</message>
<function>
pub fn process_array(&mut self, b: &[u8]) {
        for i in 0..b.len() {
            self.process(b[i])
        }
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn process_array(&mut self, b: &[u8]) {
    for &byte in b {
        process((byte as u32) as u64);
    }
}
```
Note that I assumed the `process` function is defined elsewhere in the codebase, and I used the `&` operator to dereference the `byte` variable in the loop, since Rust's `for` loop expects a reference to the loop variable. I also cast the `u8` byte to a `u64` using the `as` keyword, since the `process` function likely expects a `u64` argument.</translated function>Here is the translated Rust function:
```rust
pub fn process_array(&mut self, b: &[u8]) {
    for &byte in b {
        process((byte as u32) as u64);
    }
}
```
Note that I assumed the `process` function is defined elsewhere in the codebase, and I used the `&` operator to dereference the `byte` variable in the loop, since Rust's `for` loop expects a reference to the loop variable. I also cast the `u8` byte to a `u64` using the `as` keyword, since the `process` function likely expects a `u64` argument.
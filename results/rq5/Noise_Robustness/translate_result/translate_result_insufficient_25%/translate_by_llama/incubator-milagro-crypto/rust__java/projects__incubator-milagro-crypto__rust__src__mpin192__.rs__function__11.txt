<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int RANDOM_GENERATE(RAND rng,byte[] S)
	{
		BIG s;
		BIG r=new BIG(ROM.CURVE_Order);
		s=BIG.randomnum(r,rng);
		//if (ROM.AES_S>0)
		//{
		//	s.mod2m(2*ROM.AES_S);
		//}
		s.toBytes(S);
		return 0;
	}
</java function>
<rust function signature>
pub fn random_generate(rng: &mut RAND, s: &mut [u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn to_bytes(&self, b: &mut [u8]) {
        self.to_byte_array(b, 0)
    }
pub fn randomnum(q: &Big, rng: &mut RAND) -> Big {
        let mut d = DBig::new();
        let mut j = 0;
        let mut r: u8 = 0;
        let t = q.clone();
        for _ in 0..2 * t.nbits() {
            if j == 0 {
                r = rng.getbyte();
            } else {
                r >>= 1
            }

            let b = (r as Chunk) & 1;
            d.shl(1);
            d.w[0] += b;
            j += 1;
            j &= 7;
        }
        let m = d.dmod(q);
        m
    }

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp4::ECP4;
use super::fp24::FP24;
use super::fp8::FP8;
use super::pair192;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn random_generate(rng: &mut RAND, s: &mut [u8]) -> isize {
    let r = Big::new_ints(&rom::CURVE_ORDER);
    let sc = Big::randomnum(&r, rng);
    sc.to_bytes(s);
    return 0;
}
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn random_generate(rng: &mut RAND, s: &mut [u8]) -> isize {
    let mut r = Big::new(rom::CURVE_ORDER);
    let mut s = Big::randomnum(&r, rng);
    // if rom::AES_S > 0 {
    //     s.mod2m(2 * rom::AES_S);
    // }
    s.to_bytes(s);
    0
}
```
Note that I've assumed that `rom::CURVE_ORDER` is a constant, and that `rom::AES_S` is also a constant. If these are not constants, you may need to modify the code accordingly.

Also, I've used the `Big` type from the `super::big` module, as specified in the Rust function declarations.</translated function>Here is the translated Rust function:
```rust
pub fn random_generate(rng: &mut RAND, s: &mut [u8]) -> isize {
    let mut r = Big::new(rom::CURVE_ORDER);
    let mut s = Big::randomnum(&r, rng);
    // if rom::AES_S > 0 {
    //     s.mod2m(2 * rom::AES_S);
    // }
    s.to_bytes(s);
    0
}
```
Note that I've assumed that `rom::CURVE_ORDER` is a constant, and that `rom::AES_S` is also a constant. If these are not constants, you may need to modify the code accordingly.

Also, I've used the `Big` type from the `super::big` module, as specified in the Rust function declarations.
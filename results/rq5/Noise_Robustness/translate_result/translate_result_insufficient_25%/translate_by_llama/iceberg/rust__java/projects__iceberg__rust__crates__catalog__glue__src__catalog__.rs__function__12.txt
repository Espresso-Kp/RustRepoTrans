<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public Table loadTable(SessionContext context, TableIdentifier identifier) {
    checkIdentifierIsValid(identifier);

    MetadataTableType metadataType;
    LoadTableResponse response;
    TableIdentifier loadedIdent;
    try {
      response = loadInternal(context, identifier, snapshotMode);
      loadedIdent = identifier;
      metadataType = null;

    } catch (NoSuchTableException original) {
      metadataType = MetadataTableType.from(identifier.name());
      if (metadataType != null) {
        // attempt to load a metadata table using the identifier's namespace as the base table
        TableIdentifier baseIdent = TableIdentifier.of(identifier.namespace().levels());
        try {
          response = loadInternal(context, baseIdent, snapshotMode);
          loadedIdent = baseIdent;
        } catch (NoSuchTableException ignored) {
          // the base table does not exist
          throw original;
        }
      } else {
        // name is not a metadata table
        throw original;
      }
    }

    TableIdentifier finalIdentifier = loadedIdent;
    AuthSession session = tableSession(response.config(), session(context));
    TableMetadata tableMetadata;

    if (snapshotMode == SnapshotMode.REFS) {
      tableMetadata =
          TableMetadata.buildFrom(response.tableMetadata())
              .withMetadataLocation(response.metadataLocation())
              .setPreviousFileLocation(null)
              .setSnapshotsSupplier(
                  () ->
                      loadInternal(context, finalIdentifier, SnapshotMode.ALL)
                          .tableMetadata()
                          .snapshots())
              .discardChanges()
              .build();
    } else {
      tableMetadata = response.tableMetadata();
    }

    RESTTableOperations ops =
        new RESTTableOperations(
            client,
            paths.table(finalIdentifier),
            session::headers,
            tableFileIO(context, response.config()),
            tableMetadata);

    trackFileIO(ops);

    BaseTable table =
        new BaseTable(
            ops,
            fullTableName(finalIdentifier),
            metricsReporter(paths.metrics(finalIdentifier), session::headers));
    if (metadataType != null) {
      return MetadataTableUtils.createMetadataTableInstance(table, metadataType);
    }

    return table;
  }
</java function>
<rust function signature>
async fn load_table(&self, table: &TableIdent) -> Result<Table> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn identifier(&self) -> &TableIdent {
        &self.identifier
    }
pub fn metadata_location(&self) -> Option<&str> {
        self.metadata_location.as_deref()
    }
pub fn new_input(&self, path: impl AsRef<str>) -> Result<InputFile> {
        let (op, relative_path) = self.inner.create_operator(&path)?;
        let path = path.as_ref().to_string();
        let relative_path_pos = path.len() - relative_path.len();
        Ok(InputFile {
            op,
            path,
            relative_path_pos,
        })
    }
pub fn file_io(&self) -> FileIO {
        self.file_io.clone()
    }
pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
        Self {
            kind,
            message: message.into(),
            context: Vec::default(),

            source: None,
            // `Backtrace::capture()` will check if backtrace has been enabled
            // internally. It's zero cost if backtrace is disabled.
            backtrace: Backtrace::capture(),
        }
    }
pub fn new(name: String) -> Self {
        Self(vec![name])
    }

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use async_trait::async_trait;
use aws_sdk_glue::types::TableInput;
use iceberg::io::FileIO;
use iceberg::spec::{TableMetadata, TableMetadataBuilder};
use iceberg::table::Table;
use iceberg::{
    Catalog, Error, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
    TableIdent,
};
use std::{collections::HashMap, fmt::Debug};
use typed_builder::TypedBuilder;
use crate::error::{from_aws_build_error, from_aws_sdk_error};
use crate::utils::{
    convert_to_database, convert_to_glue_table, convert_to_namespace, create_metadata_location,
    create_sdk_config, get_default_table_location, get_metadata_location, validate_namespace,
};
use crate::with_catalog_id;

</rust function dependency libraries>

</message>
<function>
async fn load_table(&self, table: &TableIdent) -> Result<Table> {
        let db_name = validate_namespace(table.namespace())?;
        let table_name = table.name();

        let builder = self
            .client
            .0
            .get_table()
            .database_name(&db_name)
            .name(table_name);
        let builder = with_catalog_id!(builder, self.config);

        let glue_table_output = builder.send().await.map_err(from_aws_sdk_error)?;

        match glue_table_output.table() {
            None => Err(Error::new(
                ErrorKind::Unexpected,
                format!(
                    "Table object for database: {} and table: {} does not exist",
                    db_name, table_name
                ),
            )),
            Some(table) => {
                let metadata_location = get_metadata_location(&table.parameters)?;

                let input_file = self.file_io.new_input(&metadata_location)?;
                let metadata_content = input_file.read().await?;
                let metadata = serde_json::from_slice::<TableMetadata>(&metadata_content)?;

                let table = Table::builder()
                    .file_io(self.file_io())
                    .metadata_location(metadata_location)
                    .metadata(metadata)
                    .identifier(TableIdent::new(
                        NamespaceIdent::new(db_name),
                        table_name.to_owned(),
                    ))
                    .build();

                Ok(table)
            }
        }
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
async fn load_table(&self, table: &TableIdent) -> Result<Table> {
    let identifier = table.identifier();
    let metadata_type = if let Some(metadata_type) = MetadataTableType::from(identifier.name()) {
        metadata_type
    } else {
        return Err(Error::new(ErrorKind::NoSuchTable, format!("Table not found: {}", identifier.name())));
    };

    let base_ident = TableIdent::of(identifier.namespace().levels());
    let response = match load_internal(self, &base_ident, SnapshotMode::REFS).await {
        Ok(response) => response,
        Err(_) => {
            let response = load_internal(self, table, SnapshotMode::REFS).await?;
            loaded_ident = table;
            metadata_type = None;
            response
        }
    };

    let loaded_ident = match metadata_type {
        Some(_) => base_ident,
        None => table,
    };

    let table_metadata = if let SnapshotMode::REFS = snapshot_mode {
        TableMetadataBuilder::from(response.table_metadata())
           .with_metadata_location(response.metadata_location())
           .set_previous_file_location(None)
           .set_snapshots_supplier(|| {
                load_internal(self, loaded_ident, SnapshotMode::ALL).await?.table_metadata().snapshots()
            })
           .discard_changes()
           .build()
    } else {
        response.table_metadata()
    };

    let session = table_session(response.config(), self.session());
    let ops = RESTTableOperations::new(
        self.client(),
        paths::table(loaded_ident),
        session::headers,
        self.file_io(),
        table_metadata,
    );

    track_file_io(ops);

    let table = BaseTable::new(
        ops,
        full_table_name(loaded_ident),
        metrics_reporter(paths::metrics(loaded_ident), session::headers),
    );

    if let Some(metadata_type) = metadata_type {
        Ok(MetadataTableUtils::create_metadata_table_instance(table, metadata_type))
    } else {
        Ok(table)
    }
}
```
Note that I've assumed that the `load_internal` function is an async function that returns a `Result` type, and that the `table_session` function returns a `Session` type. I've also assumed that the `RESTTableOperations` and `BaseTable` types are defined elsewhere in the codebase. If these assumptions are incorrect, please let me know and I'll be happy to adjust the translation accordingly.</translated function>Here is the translated Rust function:
```rust
async fn load_table(&self, table: &TableIdent) -> Result<Table> {
    let identifier = table.identifier();
    let metadata_type = if let Some(metadata_type) = MetadataTableType::from(identifier.name()) {
        metadata_type
    } else {
        return Err(Error::new(ErrorKind::NoSuchTable, format!("Table not found: {}", identifier.name())));
    };

    let base_ident = TableIdent::of(identifier.namespace().levels());
    let response = match load_internal(self, &base_ident, SnapshotMode::REFS).await {
        Ok(response) => response,
        Err(_) => {
            let response = load_internal(self, table, SnapshotMode::REFS).await?;
            loaded_ident = table;
            metadata_type = None;
            response
        }
    };

    let loaded_ident = match metadata_type {
        Some(_) => base_ident,
        None => table,
    };

    let table_metadata = if let SnapshotMode::REFS = snapshot_mode {
        TableMetadataBuilder::from(response.table_metadata())
           .with_metadata_location(response.metadata_location())
           .set_previous_file_location(None)
           .set_snapshots_supplier(|| {
                load_internal(self, loaded_ident, SnapshotMode::ALL).await?.table_metadata().snapshots()
            })
           .discard_changes()
           .build()
    } else {
        response.table_metadata()
    };

    let session = table_session(response.config(), self.session());
    let ops = RESTTableOperations::new(
        self.client(),
        paths::table(loaded_ident),
        session::headers,
        self.file_io(),
        table_metadata,
    );

    track_file_io(ops);

    let table = BaseTable::new(
        ops,
        full_table_name(loaded_ident),
        metrics_reporter(paths::metrics(loaded_ident), session::headers),
    );

    if let Some(metadata_type) = metadata_type {
        Ok(MetadataTableUtils::create_metadata_table_instance(table, metadata_type))
    } else {
        Ok(table)
    }
}
```
Note that I've assumed that the `load_internal` function is an async function that returns a `Result` type, and that the `table_session` function returns a `Session` type. I've also assumed that the `RESTTableOperations` and `BaseTable` types are defined elsewhere in the codebase. If these assumptions are incorrect, please let me know and I'll be happy to adjust the translation accordingly.
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def write(self, b: bytes) -> None:
        self._output_stream.write(b)
</python function>
<rust function signature>
async fn write(&mut self, bs: Bytes) -> Result<()> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct OutputFile {
    op: Operator,
    // Absolution path of file.
    path: String,
    // Relative path of file to uri, starts at [`relative_path_pos`]
    relative_path_pos: usize,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use bytes::Bytes;
use std::ops::Range;
use std::{collections::HashMap, sync::Arc};
use crate::{error::Result, Error, ErrorKind};
use once_cell::sync::Lazy;
use opendal::{Operator, Scheme};
use url::Url;
use std::io::Write;
use std::{fs::File, path::Path};
use futures::io::AllowStdIo;
use futures::AsyncReadExt;
use tempfile::TempDir;
use super::{FileIO, FileIOBuilder};

</rust function dependency libraries>

</message>
<function>
async fn write(&mut self, bs: Bytes) -> Result<()> {
        Ok(opendal::Writer::write(self, bs).await?)
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
async fn write(&mut self, bs: Bytes) -> Result<()> {
    self._output_stream.write(bs).await
}
```
Note that I assumed `self._output_stream` is a field of the struct that implements the `Write` trait, and that it has an `async write` method. If that's not the case, you may need to adjust the code accordingly.

Also, I used the `Result` type from the `crate` (i.e., the current crate) as specified in the dependencies. If you want to use a different `Result` type, you'll need to adjust the code accordingly.</translated function>Here is the translated Rust function:
```rust
async fn write(&mut self, bs: Bytes) -> Result<()> {
    self._output_stream.write(bs).await
}
```
Note that I assumed `self._output_stream` is a field of the struct that implements the `Write` trait, and that it has an `async write` method. If that's not the case, you may need to adjust the code accordingly.

Also, I used the `Result` type from the `crate` (i.e., the current crate) as specified in the dependencies. If you want to use a different `Result` type, you'll need to adjust the code accordingly.
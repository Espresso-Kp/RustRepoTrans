<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def write(self, encoder: BinaryEncoder, _: Any) -> None:
        self.writer.write(encoder, self.value)
</python function>
<rust function signature>
async fn write(&mut self, batch: RecordBatch) -> Result<()> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct DataFileWriter<B: FileWriterBuilder> {
    inner_writer: Option<B::R>,
    partition_value: Struct,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::spec::{DataContentType, DataFile, Struct};
use crate::writer::file_writer::FileWriter;
use crate::writer::CurrentFileStatus;
use crate::writer::{file_writer::FileWriterBuilder, IcebergWriter, IcebergWriterBuilder};
use crate::Result;
use arrow_array::RecordBatch;
use itertools::Itertools;
use std::{collections::HashMap, sync::Arc};
use arrow_array::{types::Int64Type, ArrayRef, Int64Array, RecordBatch, StructArray};
use parquet::{arrow::PARQUET_FIELD_ID_META_KEY, file::properties::WriterProperties};
use tempfile::TempDir;
use crate::{
        io::FileIOBuilder,
        spec::DataFileFormat,
        writer::{
            base_writer::data_file_writer::{DataFileWriterBuilder, DataFileWriterConfig},
            file_writer::{
                location_generator::{test::MockLocationGenerator, DefaultFileNameGenerator},
                ParquetWriterBuilder,
            },
            tests::check_parquet_data_file,
            IcebergWriter, IcebergWriterBuilder,
        },
    };

</rust function dependency libraries>

</message>
<function>
async fn write(&mut self, batch: RecordBatch) -> Result<()> {
        self.inner_writer.as_mut().unwrap().write(&batch).await
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
async fn write(&mut self, batch: RecordBatch) -> Result<()> {
    self.writer.write(batch, self.partition_value.clone())
}
```
Note that I assumed `self.writer` is a field of the struct `DataFileWriter` and `self.partition_value` is a field of the same struct. I also assumed that `self.writer` has a `write` method that takes a `RecordBatch` and a `Struct` as arguments. If this is not the case, please provide more information about the `write` method and its signature.</translated function>Here is the translated Rust function:
```rust
async fn write(&mut self, batch: RecordBatch) -> Result<()> {
    self.writer.write(batch, self.partition_value.clone())
}
```
Note that I assumed `self.writer` is a field of the struct `DataFileWriter` and `self.partition_value` is a field of the same struct. I also assumed that `self.writer` has a `write` method that takes a `RecordBatch` and a `Struct` as arguments. If this is not the case, please provide more information about the `write` method and its signature.
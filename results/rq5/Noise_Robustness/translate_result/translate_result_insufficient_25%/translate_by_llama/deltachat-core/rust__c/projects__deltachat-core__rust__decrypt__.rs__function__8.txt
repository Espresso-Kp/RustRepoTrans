<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
static int has_decrypted_pgp_armor(const char* str__, int str_bytes)
{
	const unsigned char* str_end = (const unsigned char*)str__+str_bytes;
	const unsigned char* p=(const unsigned char*)str__;
	while (p < str_end) {
		if (*p > ' ') {
			break;
		}
		p++;
		str_bytes--;
	}
	if (str_bytes>26 && strncmp((const char*)p, "-----BEGIN PGP MESSAGE-----", 27)==0) {
		return 1;
	}
	return 0;
}
</c function>
<rust function signature>
fn has_decrypted_pgp_armor(input: &[u8]) -> bool 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::collections::HashSet;
use std::str::FromStr;
use anyhow::Result;
use deltachat_contact_tools::addr_cmp;
use mailparse::ParsedMail;
use crate::aheader::Aheader;
use crate::authres::handle_authres;
use crate::authres::{self, DkimResults};
use crate::context::Context;
use crate::headerdef::{HeaderDef, HeaderDefMap};
use crate::key::{DcKey, Fingerprint, SignedPublicKey, SignedSecretKey};
use crate::peerstate::Peerstate;
use crate::pgp;
use super::*;
use crate::receive_imf::receive_imf;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
fn has_decrypted_pgp_armor(input: &[u8]) -> bool {
    if let Some(index) = input.iter().position(|b| *b > b' ') {
        if input.len() - index > 26 {
            let start = index;
            let end = start + 27;

            return &input[start..end] == b"-----BEGIN PGP MESSAGE-----";
        }
    }

    false
}
</function>
<translated function>
Here is the translated Rust function:
```rust
fn has_decrypted_pgp_armor(input: &[u8]) -> bool {
    let str_end = &input[input.len()];
    let mut p = input.as_ptr();
    while p < str_end.as_ptr() {
        if *p > b''{
            break;
        }
        p = p.offset(1);
    }
    if input.len() > 26 && input[..26].starts_with(b"-----BEGIN PGP MESSAGE-----") {
        true
    } else {
        false
    }
}
```</translated function>Here is the translated Rust function:
```rust
fn has_decrypted_pgp_armor(input: &[u8]) -> bool {
    let str_end = &input[input.len()];
    let mut p = input.as_ptr();
    while p < str_end.as_ptr() {
        if *p > b''{
            break;
        }
        p = p.offset(1);
    }
    if input.len() > 26 && input[..26].starts_with(b"-----BEGIN PGP MESSAGE-----") {
        true
    } else {
        false
    }
}
```
<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
char* dc_addr_normalize(const char* addr)
{
	char* addr_normalized = dc_strdup(addr);
	dc_trim(addr_normalized);
	if (strncmp(addr_normalized, "mailto:", 7)==0) {
		char* old = addr_normalized;
		addr_normalized = dc_strdup(&old[7]);
		free(old);
		dc_trim(addr_normalized);
	}
	return addr_normalized;
}
</c function>
<rust function signature>
fn normalize_addr(addr: &str) -> &str 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::collections::HashMap;
use anyhow::Result;
use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};
use serde::Deserialize;
use crate::config::Config;
use crate::context::Context;
use crate::provider;
use crate::provider::Oauth2Authorizer;
use crate::socks::Socks5Config;
use crate::tools::time;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
fn normalize_addr(addr: &str) -> &str {
    let normalized = addr.trim();
    normalized.trim_start_matches("mailto:")
}
</function>
<translated function>
Here is the translated Rust function:
```rust
use std::ffi::OsString;
use std::mem;
use std::str;

fn normalize_addr(addr: &str) -> &str {
    let addr_normalized = addr.to_string_lossy().into_owned();
    let addr_normalized = addr_normalized.trim();
    if addr_normalized.starts_with("mailto:") {
        let old = addr_normalized.clone();
        let addr_normalized = old.trim_start_matches("mailto:");
        let addr_normalized = addr_normalized.trim();
        mem::drop(old);
    }
    addr_normalized.as_str()
}
```
Note that I've used the `to_string_lossy()` method to convert the `&str` to a `String`, and then `into_owned()` to get a `String` that can be modified. I've also used `trim()` to remove whitespace from the start and end of the string, and `starts_with()` to check if the string starts with "mailto:". The `trim_start_matches()` method is used to remove the "mailto:" prefix, and `mem::drop()` is used to drop the temporary `old` string. Finally, I've returned a reference to the normalized string using `as_str()`.</translated function>Here is the translated Rust function:
```rust
use std::ffi::OsString;
use std::mem;
use std::str;

fn normalize_addr(addr: &str) -> &str {
    let addr_normalized = addr.to_string_lossy().into_owned();
    let addr_normalized = addr_normalized.trim();
    if addr_normalized.starts_with("mailto:") {
        let old = addr_normalized.clone();
        let addr_normalized = old.trim_start_matches("mailto:");
        let addr_normalized = addr_normalized.trim();
        mem::drop(old);
    }
    addr_normalized.as_str()
}
```
Note that I've used the `to_string_lossy()` method to convert the `&str` to a `String`, and then `into_owned()` to get a `String` that can be modified. I've also used `trim()` to remove whitespace from the start and end of the string, and `starts_with()` to check if the string starts with "mailto:". The `trim_start_matches()` method is used to remove the "mailto:" prefix, and `mem::drop()` is used to drop the temporary `old` string. Finally, I've returned a reference to the normalized string using `as_str()`.
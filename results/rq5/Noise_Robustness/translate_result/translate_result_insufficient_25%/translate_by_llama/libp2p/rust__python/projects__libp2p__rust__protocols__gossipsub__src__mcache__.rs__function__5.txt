<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def get(self, mid: Tuple[bytes, bytes]) -> Optional[rpc_pb2.Message]:
        """
        Get a message from the mcache.

        :param mid: (seqno, from_id) of the message to get.
        :return: The rpc message associated with this mid
        """
        if mid in self.msgs:
            return self.msgs[mid]

        return None
</python function>
<rust function signature>
pub(crate) fn get(&self, message_id: &MessageId) -> Option<&RawMessage> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub(crate) struct MessageCache {
    msgs: HashMap<MessageId, (RawMessage, HashSet<PeerId>)>,
    /// For every message and peer the number of times this peer asked for the message
    iwant_counts: HashMap<MessageId, HashMap<PeerId, u32>>,
    history: Vec<Vec<CacheEntry>>,
    /// The number of indices in the cache history used for gossiping. That means that a message
    /// won't get gossiped anymore when shift got called `gossip` many times after inserting the
    /// message in the cache.
    gossip: usize,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::topic::TopicHash;
use crate::types::{MessageId, RawMessage};
use libp2p_identity::PeerId;
use std::collections::hash_map::Entry;
use std::fmt::Debug;
use std::{
    collections::{HashMap, HashSet},
    fmt,
};
use super::*;
use crate::IdentTopic as Topic;

</rust function dependency libraries>

</message>
<function>
pub(crate) fn get(&self, message_id: &MessageId) -> Option<&RawMessage> {
        self.msgs.get(message_id).map(|(message, _)| message)
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
pub(crate) fn get(&self, message_id: &MessageId) -> Option<&RawMessage> {
    self.msgs.entry(message_id).and_then(|entry| entry.get_reference())
}
```
Note that I assumed `msgs` is a `HashMap` with `MessageId` as the key and a tuple of `(RawMessage, HashSet<PeerId>)` as the value. I also assumed that `get_reference` is a method on the `Entry` type that returns a reference to the value if it exists, or `None` if it doesn't. If this is not the case, please let me know and I'll adjust the translation accordingly.</translated function>Here is the translated Rust function:
```rust
pub(crate) fn get(&self, message_id: &MessageId) -> Option<&RawMessage> {
    self.msgs.entry(message_id).and_then(|entry| entry.get_reference())
}
```
Note that I assumed `msgs` is a `HashMap` with `MessageId` as the key and a tuple of `(RawMessage, HashSet<PeerId>)` as the value. I also assumed that `get_reference` is a method on the `Entry` type that returns a reference to the value if it exists, or `None` if it doesn't. If this is not the case, please let me know and I'll adjust the translation accordingly.
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def bind(self, schema: Schema, case_sensitive: bool = True) -> BoundUnaryPredicate[Any]:
        bound_term = self.term.bind(schema, case_sensitive)
        return self.as_bound(bound_term)
</python function>
<rust function signature>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct UnaryExpression<T> {
    /// Operator of this predicate, must be single operand operator.
    op: PredicateOperator,
    /// Term of this predicate, for example, `a` in `a IS NULL`.
    term: T,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::fmt::{Debug, Display, Formatter};
use std::ops::Not;
use array_init::array_init;
use fnv::FnvHashSet;
use itertools::Itertools;
use crate::error::Result;
use crate::expr::{Bind, BoundReference, PredicateOperator, Reference};
use crate::spec::{Datum, SchemaRef};
use crate::{Error, ErrorKind};
use std::ops::Not;
use std::sync::Arc;
use crate::expr::Bind;
use crate::expr::Predicate::{AlwaysFalse, AlwaysTrue};
use crate::expr::Reference;
use crate::spec::Datum;
use crate::spec::{NestedField, PrimitiveType, Schema, SchemaRef, Type};

</rust function dependency libraries>

</message>
<function>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
        let bound_term = self.term.bind(schema, case_sensitive)?;
        Ok(UnaryExpression::new(self.op, bound_term))
    }
</function>
<translated function>
In Rust, you would translate the Python function in the following way:

```rust
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
    let bound_term = self.term.bind(&schema, case_sensitive)?;
    self.as_bound(bound_term)
}
```

This Rust function does the same thing as the Python function: it takes a reference to self, a schema, and a boolean indicating case sensitivity, and binds the term of the unary expression to the schema using the provided case sensitivity parameter, then returns the result of calling `as_bound` with the result of the call to `bind`.

The `?` operator after the call to `bind` in Rust is used for error handling: it means that if the call to `bind` returns an `Err` result, then the `Err` will be immediately returned from the method. Otherwise, it unwraps the `Ok` result, allowing you to continue using the `bound_term`.

Note: It's assumed that `as_bound` method and `Bound` associated type are defined in the context of your provided types.</translated function>In Rust, you would translate the Python function in the following way:

```rust
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
    let bound_term = self.term.bind(&schema, case_sensitive)?;
    self.as_bound(bound_term)
}
```

This Rust function does the same thing as the Python function: it takes a reference to self, a schema, and a boolean indicating case sensitivity, and binds the term of the unary expression to the schema using the provided case sensitivity parameter, then returns the result of calling `as_bound` with the result of the call to `bind`.

The `?` operator after the call to `bind` in Rust is used for error handling: it means that if the call to `bind` returns an `Err` result, then the `Err` will be immediately returned from the method. Otherwise, it unwraps the `Ok` result, allowing you to continue using the `bound_term`.

Note: It's assumed that `as_bound` method and `Bound` associated type are defined in the context of your provided types.
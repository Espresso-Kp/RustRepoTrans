<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def visit_starts_with(self, term: BoundTerm[L], literal: Literal[L]) -> bool:
        field = term.ref().field
        field_id: int = field.field_id

        if self._contains_nulls_only(field_id):
            return ROWS_CANNOT_MATCH

        if not isinstance(field.field_type, PrimitiveType):
            raise ValueError(f"Expected PrimitiveType: {field.field_type}")

        prefix = str(literal.value)
        len_prefix = len(prefix)

        if lower_bound_bytes := self.lower_bounds.get(field_id):
            lower_bound = str(from_bytes(field.field_type, lower_bound_bytes))

            # truncate lower bound so that its length is not greater than the length of prefix
            if lower_bound and lower_bound[:len_prefix] > prefix:
                return ROWS_CANNOT_MATCH

        if upper_bound_bytes := self.upper_bounds.get(field_id):
            upper_bound = str(from_bytes(field.field_type, upper_bound_bytes))

            # truncate upper bound so that its length is not greater than the length of prefix
            if upper_bound is not None and upper_bound[:len_prefix] < prefix:
                return ROWS_CANNOT_MATCH

        return ROWS_MIGHT_MATCH
</python function>
<rust function signature>
fn starts_with(
        &mut self,
        reference: &BoundReference,
        datum: &Datum,
        _predicate: &BoundPredicate,
    ) -> crate::Result<bool> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn upper_bound(&self, field_id: i32) -> Option<&Datum> {
        self.data_file.upper_bounds.get(&field_id)
    }
pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
        Self {
            kind,
            message: message.into(),
            context: Vec::default(),

            source: None,
            // `Backtrace::capture()` will check if backtrace has been enabled
            // internally. It's zero cost if backtrace is disabled.
            backtrace: Backtrace::capture(),
        }
    }
pub enum PrimitiveLiteral {
    /// 0x00 for false, non-zero byte for true
    Boolean(bool),
    /// Stored as 4-byte little-endian
    Int(i32),
    /// Stored as 8-byte little-endian
    Long(i64),
    /// Stored as 4-byte little-endian
    Float(OrderedFloat<f32>),
    /// Stored as 8-byte little-endian
    Double(OrderedFloat<f64>),
    /// Stores days from the 1970-01-01 in an 4-byte little-endian int
    Date(i32),
    /// Stores microseconds from midnight in an 8-byte little-endian long
    Time(i64),
    /// Timestamp without timezone
    Timestamp(i64),
    /// Timestamp with timezone
    Timestamptz(i64),
    /// UTF-8 bytes (without length)
    String(String),
    /// 16-byte big-endian value
    UUID(Uuid),
    /// Binary value
    Fixed(Vec<u8>),
    /// Binary value (without length)
    Binary(Vec<u8>),
    /// Stores unscaled value as big int. According to iceberg spec, the precision must less than 38(`MAX_DECIMAL_PRECISION`) , so i128 is suit here.
    Decimal(i128),
}
pub struct NestedField {
    /// Id unique in table schema
    pub id: i32,
    /// Field Name
    pub name: String,
    /// Optional or required
    pub required: bool,
    /// Datatype
    pub field_type: Box<Type>,
    /// Fields may have an optional comment or doc string.
    pub doc: Option<String>,
    /// Used to populate the field’s value for all records that were written before the field was added to the schema
    pub initial_default: Option<Literal>,
    /// Used to populate the field’s value for any records written after the field was added to the schema, if the writer does not supply the field’s value
    pub write_default: Option<Literal>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::expr::visitors::bound_predicate_visitor::{visit, BoundPredicateVisitor};
use crate::expr::{BoundPredicate, BoundReference};
use crate::spec::{DataFile, Datum, PrimitiveLiteral};
use crate::{Error, ErrorKind};
use fnv::FnvHashSet;
use crate::expr::visitors::inclusive_metrics_evaluator::InclusiveMetricsEvaluator;
use crate::expr::PredicateOperator::{
        Eq, GreaterThan, GreaterThanOrEq, In, IsNan, IsNull, LessThan, LessThanOrEq, NotEq, NotIn,
        NotNan, NotNull, NotStartsWith, StartsWith,
    };
use crate::expr::{
        BinaryExpression, Bind, BoundPredicate, Predicate, Reference, SetExpression,
        UnaryExpression,
    };
use crate::spec::{
        DataContentType, DataFile, DataFileFormat, Datum, NestedField, PartitionField,
        PartitionSpec, PrimitiveType, Schema, Struct, Transform, Type,
    };
use fnv::FnvHashSet;
use std::collections::HashMap;
use std::ops::Not;
use std::sync::Arc;

</rust function dependency libraries>

</message>
<function>
fn starts_with(
        &mut self,
        reference: &BoundReference,
        datum: &Datum,
        _predicate: &BoundPredicate,
    ) -> crate::Result<bool> {
        let field_id = reference.field().id;

        if self.contains_nulls_only(field_id) {
            return ROWS_CANNOT_MATCH;
        }

        let PrimitiveLiteral::String(datum) = datum.literal() else {
            return Err(Error::new(
                ErrorKind::Unexpected,
                "Cannot use StartsWith operator on non-string values",
            ));
        };

        if let Some(lower_bound) = self.lower_bound(field_id) {
            let PrimitiveLiteral::String(lower_bound) = lower_bound.literal() else {
                return Err(Error::new(
                    ErrorKind::Unexpected,
                    "Cannot use StartsWith operator on non-string lower_bound value",
                ));
            };

            let prefix_length = lower_bound.chars().count().min(datum.chars().count());

            // truncate lower bound so that its length
            // is not greater than the length of prefix
            let truncated_lower_bound = lower_bound.chars().take(prefix_length).collect::<String>();
            if datum < &truncated_lower_bound {
                return ROWS_CANNOT_MATCH;
            }
        }

        if let Some(upper_bound) = self.upper_bound(field_id) {
            let PrimitiveLiteral::String(upper_bound) = upper_bound.literal() else {
                return Err(Error::new(
                    ErrorKind::Unexpected,
                    "Cannot use StartsWith operator on non-string upper_bound value",
                ));
            };

            let prefix_length = upper_bound.chars().count().min(datum.chars().count());

            // truncate upper bound so that its length
            // is not greater than the length of prefix
            let truncated_upper_bound = upper_bound.chars().take(prefix_length).collect::<String>();
            if datum > &truncated_upper_bound {
                return ROWS_CANNOT_MATCH;
            }
        }

        ROWS_MIGHT_MATCH
    }
</function>
<translated function>
Below is the translation of the Python function `visit_starts_with()` to Rust.

```rust
fn starts_with(
        &mut self,
        term: &BoundTerm,
        literal: &Literal,
    ) -> crate::Result<bool> {
        let field = term.ref().field;
        let field_id: i32 = field.field_id;
        
        if self.contains_nulls_only(field_id)? {
            return Err(crate::Error::new(
                crate::ErrorKind::InvalidInput,
                "Rows cannot match",
            ));
        }

        match field.field_type.as_ref() {
            Type::Integer | Type::Long | Type::String 
            | Type::Float | Type::Double => (),
            _ => return Err(crate::Error::new(
                crate::ErrorKind::InvalidInput,
                format!("Expected PrimitiveType: {}", &field.field_type)
            ))
        }

        let prefix = match literal.value() {
            PrimitiveLiteral::String(s) => s.to_string(),
            _ => return Err(crate::Error::new(
                crate::ErrorKind::InvalidInput,
                "Literal value is not a string",
            ))
        };
        
        let len_prefix = prefix.len();

        if let Some(lower_bound_bytes) = self.lower_bounds.get(&field_id) {
            let lower_bound = str::from_utf8(lower_bound_bytes)?;

            if lower_bound.get(..len_prefix).unwrap_or("") > &prefix {
                return Err(crate::Error::new(
                    crate::ErrorKind::InvalidInput,
                    "Rows cannot match",
                ));
            }
        }

        if let Some(upper_bound_bytes) = self.upper_bounds.get(&field_id) {
            let upper_bound = str::from_utf8(upper_bound_bytes)?;

            if upper_bound.get(..len_prefix).unwrap_or("") < &prefix {
                return Err(crate::Error::new(
                    crate::ErrorKind::InvalidInput,
                    "Rows cannot match",
                ));
            }
        }

        Ok(true)
    }
```
The Python function `visit_start_with()` raises a `ValueError` when the conditions are not met, while in the above translated Rust version, it returns an `Err` with an `Error` struct instance holding the same message.

Also note that `ROWS_MIGHT_MATCH` and `ROWS_CANNOT_MATCH` are just string constants in Python, but in Rust, we use `Ok(true)` and `Err()` respectively to either return successfully (indicating that rows might match) or return with an error if rows cannot match.

Please ensure to adjust the above code according to the exact structures and enum definitions in your project as it might differ.</translated function>Below is the translation of the Python function `visit_starts_with()` to Rust.

```rust
fn starts_with(
        &mut self,
        term: &BoundTerm,
        literal: &Literal,
    ) -> crate::Result<bool> {
        let field = term.ref().field;
        let field_id: i32 = field.field_id;
        
        if self.contains_nulls_only(field_id)? {
            return Err(crate::Error::new(
                crate::ErrorKind::InvalidInput,
                "Rows cannot match",
            ));
        }

        match field.field_type.as_ref() {
            Type::Integer | Type::Long | Type::String 
            | Type::Float | Type::Double => (),
            _ => return Err(crate::Error::new(
                crate::ErrorKind::InvalidInput,
                format!("Expected PrimitiveType: {}", &field.field_type)
            ))
        }

        let prefix = match literal.value() {
            PrimitiveLiteral::String(s) => s.to_string(),
            _ => return Err(crate::Error::new(
                crate::ErrorKind::InvalidInput,
                "Literal value is not a string",
            ))
        };
        
        let len_prefix = prefix.len();

        if let Some(lower_bound_bytes) = self.lower_bounds.get(&field_id) {
            let lower_bound = str::from_utf8(lower_bound_bytes)?;

            if lower_bound.get(..len_prefix).unwrap_or("") > &prefix {
                return Err(crate::Error::new(
                    crate::ErrorKind::InvalidInput,
                    "Rows cannot match",
                ));
            }
        }

        if let Some(upper_bound_bytes) = self.upper_bounds.get(&field_id) {
            let upper_bound = str::from_utf8(upper_bound_bytes)?;

            if upper_bound.get(..len_prefix).unwrap_or("") < &prefix {
                return Err(crate::Error::new(
                    crate::ErrorKind::InvalidInput,
                    "Rows cannot match",
                ));
            }
        }

        Ok(true)
    }
```
The Python function `visit_start_with()` raises a `ValueError` when the conditions are not met, while in the above translated Rust version, it returns an `Err` with an `Error` struct instance holding the same message.

Also note that `ROWS_MIGHT_MATCH` and `ROWS_CANNOT_MATCH` are just string constants in Python, but in Rust, we use `Ok(true)` and `Err()` respectively to either return successfully (indicating that rows might match) or return with an error if rows cannot match.

Please ensure to adjust the above code according to the exact structures and enum definitions in your project as it might differ.
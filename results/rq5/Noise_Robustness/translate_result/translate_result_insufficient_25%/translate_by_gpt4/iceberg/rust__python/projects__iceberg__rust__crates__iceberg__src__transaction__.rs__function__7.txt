<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def remove_properties(self, *removals: str) -> Transaction:
        """Remove properties.

        Args:
            removals: Properties to be removed.

        Returns:
            The alter table builder.
        """
        return self._apply((RemovePropertiesUpdate(removals=removals),))
</python function>
<rust function signature>
pub fn remove_properties(mut self, keys: Vec<String>) -> Result<Self> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn append_updates(&mut self, updates: Vec<TableUpdate>) -> Result<()> {
        for update in &updates {
            for up in &self.updates {
                if discriminant(up) == discriminant(update) {
                    return Err(Error::new(
                        ErrorKind::DataInvalid,
                        format!(
                            "Cannot apply update with same type at same time: {:?}",
                            update
                        ),
                    ));
                }
            }
        }
        self.updates.extend(updates);
        Ok(())
    }

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::error::Result;
use crate::spec::{FormatVersion, NullOrder, SortDirection, SortField, SortOrder, Transform};
use crate::table::Table;
use crate::TableUpdate::UpgradeFormatVersion;
use crate::{Catalog, Error, ErrorKind, TableCommit, TableRequirement, TableUpdate};
use std::cmp::Ordering;
use std::collections::HashMap;
use std::mem::discriminant;
use crate::io::FileIO;
use crate::spec::{FormatVersion, TableMetadata};
use crate::table::Table;
use crate::transaction::Transaction;
use crate::{TableIdent, TableRequirement, TableUpdate};
use std::collections::HashMap;
use std::fs::File;
use std::io::BufReader;

</rust function dependency libraries>

</message>
<function>
pub fn remove_properties(mut self, keys: Vec<String>) -> Result<Self> {
        self.append_updates(vec![TableUpdate::RemoveProperties { removals: keys }])?;
        Ok(self)
    }
</function>
<translated function>
Based on your instructions, here is the translated Rust function:

```rust
pub fn remove_properties(mut self, keys: Vec<String>) -> Result<Self> {
    let updates = keys
        .into_iter()
        .map(|key| TableUpdate::RemovePropertiesUpdate(key))
        .collect();

    self.append_updates(updates)?;

    Ok(self)
}
```
Please, note that it's assumed that the `RemovePropertiesUpdate` type is part of your `TableUpdate` enum and takes `String` as a parameter. You might need to adjust it based on your actual project structure.
Also, keep in mind that Python allows modifying the original object (self in Python generally refers to the object itself where it's called), which might cause some differences between Python & Rust translated function. Here it's assumed that updated self object should be returned as a result.</translated function>Based on your instructions, here is the translated Rust function:

```rust
pub fn remove_properties(mut self, keys: Vec<String>) -> Result<Self> {
    let updates = keys
        .into_iter()
        .map(|key| TableUpdate::RemovePropertiesUpdate(key))
        .collect();

    self.append_updates(updates)?;

    Ok(self)
}
```
Please, note that it's assumed that the `RemovePropertiesUpdate` type is part of your `TableUpdate` enum and takes `String` as a parameter. You might need to adjust it based on your actual project structure.
Also, keep in mind that Python allows modifying the original object (self in Python generally refers to the object itself where it's called), which might cause some differences between Python & Rust translated function. Here it's assumed that updated self object should be returned as a result.
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def new_output(self, location: str) -> FsspecOutputFile:
        """Get an FsspecOutputFile instance to write bytes to the file at the given location.

        Args:
            location (str): A URI or a path to a local file.

        Returns:
            FsspecOutputFile: An FsspecOutputFile instance for the given location.
        """
        uri = urlparse(location)
        fs = self.get_fs(uri.scheme)
        return FsspecOutputFile(location=location, fs=fs)
</python function>
<rust function signature>
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct OutputFile {
    op: Operator,
    // Absolution path of file.
    path: String,
    // Relative path of file to uri, starts at [`relative_path_pos`]
    relative_path_pos: usize,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use bytes::Bytes;
use std::ops::Range;
use std::{collections::HashMap, sync::Arc};
use crate::{error::Result, Error, ErrorKind};
use once_cell::sync::Lazy;
use opendal::{Operator, Scheme};
use url::Url;
use std::io::Write;
use std::{fs::File, path::Path};
use futures::io::AllowStdIo;
use futures::AsyncReadExt;
use tempfile::TempDir;
use super::{FileIO, FileIOBuilder};

</rust function dependency libraries>

</message>
<function>
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> {
        let (op, relative_path) = self.inner.create_operator(&path)?;
        let path = path.as_ref().to_string();
        let relative_path_pos = path.len() - relative_path.len();
        Ok(OutputFile {
            op,
            path,
            relative_path_pos,
        })
    }
</function>
<translated function>
Your Rust function might look like this:

```Rust
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> {
    // Parse the location to an URL
    let uri = Url::parse(path.as_ref())?;

    // Get the filesystem scheme from the URI
    let scheme = Scheme::from_str(uri.scheme()).map_err(|_| Error::new(ErrorKind::Other, "Unsupported filesystem scheme"))?;

    // Instantiate an Operator
    let operator = Operator::new(scheme, uri)?;

    // Create the OutputFile
    Ok(OutputFile {
        op: operator,
        path: path.as_ref().to_string(),
        relative_path_pos: uri.path().len(),
    })
}
```

This function will:
1. Parse the given `path` into a `Url`
2. Derive the filesystem `Scheme` from the parsed URL
3. Instantiate an `Operator` based on the derived `Scheme`
4. Return an `OutputFile` instance created with the `path` and  `Operator` instance.

Please ensure you handle errors appropriately in your application as this function simply returns an error if anything goes wrong. This may not be appropriate for all use-cases.</translated function>Your Rust function might look like this:

```Rust
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> {
    // Parse the location to an URL
    let uri = Url::parse(path.as_ref())?;

    // Get the filesystem scheme from the URI
    let scheme = Scheme::from_str(uri.scheme()).map_err(|_| Error::new(ErrorKind::Other, "Unsupported filesystem scheme"))?;

    // Instantiate an Operator
    let operator = Operator::new(scheme, uri)?;

    // Create the OutputFile
    Ok(OutputFile {
        op: operator,
        path: path.as_ref().to_string(),
        relative_path_pos: uri.path().len(),
    })
}
```

This function will:
1. Parse the given `path` into a `Url`
2. Derive the filesystem `Scheme` from the parsed URL
3. Instantiate an `Operator` based on the derived `Scheme`
4. Return an `OutputFile` instance created with the `path` and  `Operator` instance.

Please ensure you handle errors appropriately in your application as this function simply returns an error if anything goes wrong. This may not be appropriate for all use-cases.
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def prune_columns(schema: Schema, selected: Set[int], select_full_types: bool = True) -> Schema:
    """Prunes a column by only selecting a set of field-ids.

    Args:
        schema: The schema to be pruned.
        selected: The field-ids to be included.
        select_full_types: Return the full struct when a subset is recorded

    Returns:
        The pruned schema.
    """
    result = visit(schema.as_struct(), _PruneColumnsVisitor(selected, select_full_types))
    return Schema(
        *(result or StructType()).fields,
        schema_id=schema.schema_id,
        identifier_field_ids=list(selected.intersection(schema.identifier_field_ids)),
    )
</python function>
<rust function signature>
pub fn prune_columns(
    schema: &Schema,
    selected: impl IntoIterator<Item = i32>,
    select_full_types: bool,
) -> Result<Type> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn visit_schema<V: SchemaVisitor>(schema: &Schema, visitor: &mut V) -> Result<V::T> {
    let result = visit_struct(&schema.r#struct, visitor)?;
    visitor.schema(schema, result)
}
struct PruneColumn {
    selected: HashSet<i32>,
    select_full_types: bool,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::error::Result;
use crate::expr::accessor::StructAccessor;
use crate::spec::datatypes::{
    ListType, MapType, NestedFieldRef, PrimitiveType, StructType, Type, LIST_FILED_NAME,
    MAP_KEY_FIELD_NAME, MAP_VALUE_FIELD_NAME,
};
use crate::{ensure_data_valid, Error, ErrorKind};
use bimap::BiHashMap;
use itertools::{zip_eq, Itertools};
use serde::{Deserialize, Serialize};
use std::collections::{HashMap, HashSet};
use std::fmt::{Display, Formatter};
use std::sync::Arc;
use _serde::SchemaEnum;
use super::NestedField;
use serde::{Deserialize, Serialize};
use crate::{spec::StructType, Error, Result};
use super::{Schema, DEFAULT_SCHEMA_ID};
use crate::spec::datatypes::Type::{List, Map, Primitive, Struct};
use crate::spec::datatypes::{
        ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, StructType, Type,
    };
use crate::spec::schema::Schema;
use crate::spec::schema::_serde::{SchemaEnum, SchemaV1, SchemaV2};
use crate::spec::values::Map as MapValue;
use crate::spec::{prune_columns, Datum, Literal};
use std::collections::{HashMap, HashSet};
use super::DEFAULT_SCHEMA_ID;

</rust function dependency libraries>

</message>
<function>
pub fn prune_columns(
    schema: &Schema,
    selected: impl IntoIterator<Item = i32>,
    select_full_types: bool,
) -> Result<Type> {
    let mut visitor = PruneColumn::new(HashSet::from_iter(selected), select_full_types);
    let result = visit_schema(schema, &mut visitor);

    match result {
        Ok(s) => {
            if let Some(struct_type) = s {
                Ok(struct_type)
            } else {
                Ok(Type::Struct(StructType::default()))
            }
        }
        Err(e) => Err(e),
    }
}
</function>
<translated function>
Here's how the Python method could be translated to Rust according to your instructions:

```rust
pub fn prune_columns(
    schema: &Schema,
    selected: impl IntoIterator<Item = i32>,
    select_full_types: bool,
) -> Result<Type> 
{
    let selected_ids = selected.into_iter().collect::<HashSet<_>>();
    let mut visitor = PruneColumn {
        selected: selected_ids,
        select_full_types: select_full_types,
    };

    let result = visit_schema(schema, &mut visitor)?;

    let fields = match result {
        Some(t) => t.fields(),
        None => Vec::new(),
    };
    
    let mut schema_id = schema.schema_id().to_string();
    
    let mut identifier_field_ids = schema
        .identifier_field_ids()
        .iter()
        .filter(|&id| visitor.selected.contains(id))
        .cloned()
        .collect::<Vec<_>>();

    Ok(Type::StructType {
        fields: fields,
        schema_id: schema_id,
        identifier_field_ids: identifier_field_ids,
    })
}
```
Please note that I'm assuming `visit_schema` and `Type::StructType` from your declarations. Also this is assuming that `Schema` has `schema_id` and `identifier_field_ids` methods, and `Type::StructType` accepts a list of fields, a schema id, and a list of identifier field ids.

This translation might not be perfect as Python and Rust have different paradigms, but I've tried to keep the logic and structure as close to the original Python code as possible. In Rust, we define structs to use them as custom types and can have methods associated with them, unlike Python, so there's more to it than just a one-to-one translation of the code.</translated function>Here's how the Python method could be translated to Rust according to your instructions:

```rust
pub fn prune_columns(
    schema: &Schema,
    selected: impl IntoIterator<Item = i32>,
    select_full_types: bool,
) -> Result<Type> 
{
    let selected_ids = selected.into_iter().collect::<HashSet<_>>();
    let mut visitor = PruneColumn {
        selected: selected_ids,
        select_full_types: select_full_types,
    };

    let result = visit_schema(schema, &mut visitor)?;

    let fields = match result {
        Some(t) => t.fields(),
        None => Vec::new(),
    };
    
    let mut schema_id = schema.schema_id().to_string();
    
    let mut identifier_field_ids = schema
        .identifier_field_ids()
        .iter()
        .filter(|&id| visitor.selected.contains(id))
        .cloned()
        .collect::<Vec<_>>();

    Ok(Type::StructType {
        fields: fields,
        schema_id: schema_id,
        identifier_field_ids: identifier_field_ids,
    })
}
```
Please note that I'm assuming `visit_schema` and `Type::StructType` from your declarations. Also this is assuming that `Schema` has `schema_id` and `identifier_field_ids` methods, and `Type::StructType` accepts a list of fields, a schema id, and a list of identifier field ids.

This translation might not be perfect as Python and Rust have different paradigms, but I've tried to keep the logic and structure as close to the original Python code as possible. In Rust, we define structs to use them as custom types and can have methods associated with them, unlike Python, so there's more to it than just a one-to-one translation of the code.
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def schema(self) -> Schema:
        """Return the schema for this table."""
        return next(schema for schema in self.schemas if schema.schema_id == self.current_schema_id)
</python function>
<rust function signature>
fn schema(&self) -> ArrowSchemaRef 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub(crate) struct IcebergTableProvider {
    /// A table in the catalog.
    table: Table,
    /// A reference-counted arrow `Schema`.
    schema: ArrowSchemaRef,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::{any::Any, sync::Arc};
use async_trait::async_trait;
use datafusion::error::Result as DFResult;
use datafusion::{
    arrow::datatypes::SchemaRef as ArrowSchemaRef,
    datasource::{TableProvider, TableType},
    execution::context,
    logical_expr::Expr,
    physical_plan::ExecutionPlan,
};
use iceberg::{
    arrow::schema_to_arrow_schema, table::Table, Catalog, NamespaceIdent, Result, TableIdent,
};
use crate::physical_plan::scan::IcebergTableScan;

</rust function dependency libraries>

</message>
<function>
fn schema(&self) -> ArrowSchemaRef {
        self.schema.clone()
    }
</function>
<translated function>
Based on the provided Python function and rust related variables, here's the corresponding Rust function:

```rust
fn schema(&self) -> ArrowSchemaRef {
    for schema in &self.table.schemas {
        if schema.schema_id == self.table.current_schema_id {
            return schema.clone();
        }
    }
    panic!("schema not found");
}
```

This function iterates over the `schemas` vector in `table` and returns the first schema where `schema_id` equals `current_schema_id`. If no such schema is found, it will panic. 

Please note that your Rust structures and functions may need a field for holding the current schema id similar to the Python version. This field was named `current_schema_id` and used in the Rust function. If your environment has a different setup, please adjust accordingly.</translated function>Based on the provided Python function and rust related variables, here's the corresponding Rust function:

```rust
fn schema(&self) -> ArrowSchemaRef {
    for schema in &self.table.schemas {
        if schema.schema_id == self.table.current_schema_id {
            return schema.clone();
        }
    }
    panic!("schema not found");
}
```

This function iterates over the `schemas` vector in `table` and returns the first schema where `schema_id` equals `current_schema_id`. If no such schema is found, it will panic. 

Please note that your Rust structures and functions may need a field for holding the current schema id similar to the Python version. This field was named `current_schema_id` and used in the Rust function. If your environment has a different setup, please adjust accordingly.
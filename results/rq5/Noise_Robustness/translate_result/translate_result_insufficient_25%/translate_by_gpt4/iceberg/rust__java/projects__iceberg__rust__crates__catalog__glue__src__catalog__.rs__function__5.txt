<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public void createNamespace(Namespace namespace, Map<String, String> metadata) {
    try {
      glue.createDatabase(
          CreateDatabaseRequest.builder()
              .catalogId(awsProperties.glueCatalogId())
              .databaseInput(
                  IcebergToGlueConverter.toDatabaseInput(
                      namespace, metadata, awsProperties.glueCatalogSkipNameValidation()))
              .build());
      LOG.info("Created namespace: {}", namespace);
    } catch (software.amazon.awssdk.services.glue.model.AlreadyExistsException e) {
      throw new AlreadyExistsException(
          "Cannot create namespace %s because it already exists in Glue", namespace);
    }
  }
</java function>
<rust function signature>
async fn create_namespace(
        &self,
        namespace: &NamespaceIdent,
        properties: HashMap<String, String>,
    ) -> Result<Namespace> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub(crate) fn convert_to_database(
    namespace: &NamespaceIdent,
    properties: &HashMap<String, String>,
) -> Result<DatabaseInput> {
    let db_name = validate_namespace(namespace)?;
    let mut builder = DatabaseInput::builder().name(db_name);

    for (k, v) in properties.iter() {
        match k.as_ref() {
            DESCRIPTION => {
                builder = builder.description(v);
            }
            LOCATION => {
                builder = builder.location_uri(v);
            }
            _ => {
                builder = builder.parameters(k, v);
            }
        }
    }

    builder.build().map_err(from_aws_build_error)
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use async_trait::async_trait;
use aws_sdk_glue::types::TableInput;
use iceberg::io::FileIO;
use iceberg::spec::{TableMetadata, TableMetadataBuilder};
use iceberg::table::Table;
use iceberg::{
    Catalog, Error, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
    TableIdent,
};
use std::{collections::HashMap, fmt::Debug};
use typed_builder::TypedBuilder;
use crate::error::{from_aws_build_error, from_aws_sdk_error};
use crate::utils::{
    convert_to_database, convert_to_glue_table, convert_to_namespace, create_metadata_location,
    create_sdk_config, get_default_table_location, get_metadata_location, validate_namespace,
};
use crate::with_catalog_id;

</rust function dependency libraries>

</message>
<function>
async fn create_namespace(
        &self,
        namespace: &NamespaceIdent,
        properties: HashMap<String, String>,
    ) -> Result<Namespace> {
        let db_input = convert_to_database(namespace, &properties)?;

        let builder = self.client.0.create_database().database_input(db_input);
        let builder = with_catalog_id!(builder, self.config);

        builder.send().await.map_err(from_aws_sdk_error)?;

        Ok(Namespace::with_properties(namespace.clone(), properties))
    }
</function>
<translated function>
Here is how the Java function translates to Rust:

```rust
async fn create_namespace(
    &self,
    namespace: &NamespaceIdent,
    properties: HashMap<String, String>,
) -> Result<Namespace> {

    let database_input = convert_to_database(namespace, &properties)?;

    glue::CreateDatabaseRqBuilder::default()
        .catalog_id(self.aws_properties.glue_catalog_id)
        .database_input(database_input.clone())
        .build()
        .map_err(from_aws_build_error)
        .and_then(|request| self.glue.create_database(request).result())
        .map_err(from_aws_sdk_error)
        .and_then(|_| {
            log::info!("Created namespace: {:?}", namespace);
            Ok(convert_to_namespace(namespace, &database_input))
        })

}
```

This Rust function does essentially the same thing as the Java one:

1. It translates the `NamespaceIdent` into a Glue `DatabaseInput` using the provided properties.
2. It constructs a `CreateDatabaseRequest` with the `DatabaseInput` and the catalog ID.
3. It sends the request to Glue using the `create_database` method.
4. If the request is successful, it logs the creation of the namespace and returns a `Namespace` object created from `DatabaseInput`. In case of errors, it directly returns the error.</translated function>Here is how the Java function translates to Rust:

```rust
async fn create_namespace(
    &self,
    namespace: &NamespaceIdent,
    properties: HashMap<String, String>,
) -> Result<Namespace> {

    let database_input = convert_to_database(namespace, &properties)?;

    glue::CreateDatabaseRqBuilder::default()
        .catalog_id(self.aws_properties.glue_catalog_id)
        .database_input(database_input.clone())
        .build()
        .map_err(from_aws_build_error)
        .and_then(|request| self.glue.create_database(request).result())
        .map_err(from_aws_sdk_error)
        .and_then(|_| {
            log::info!("Created namespace: {:?}", namespace);
            Ok(convert_to_namespace(namespace, &database_input))
        })

}
```

This Rust function does essentially the same thing as the Java one:

1. It translates the `NamespaceIdent` into a Glue `DatabaseInput` using the provided properties.
2. It constructs a `CreateDatabaseRequest` with the `DatabaseInput` and the catalog ID.
3. It sends the request to Glue using the `create_database` method.
4. If the request is successful, it logs the creation of the namespace and returns a `Namespace` object created from `DatabaseInput`. In case of errors, it directly returns the error.
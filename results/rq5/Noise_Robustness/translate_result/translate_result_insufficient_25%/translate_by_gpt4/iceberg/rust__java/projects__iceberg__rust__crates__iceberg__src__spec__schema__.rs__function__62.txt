<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public Type map(Types.MapType map, Type ignored, Type valueResult) {
    if (selected.contains(map.valueId())) {
      if (selectFullTypes) {
        return map;
      } else if (map.valueType().isStructType()) {
        Type projectedStruct = projectSelectedStruct(valueResult);
        return projectMap(map, projectedStruct);
      } else {
        Preconditions.checkArgument(
            map.valueType().isPrimitiveType(),
            "Cannot explicitly project List or Map types, Map value %s of type %s was selected",
            map.valueId(),
            map.valueType());
        return map;
      }
    } else if (valueResult != null) {
      return projectMap(map, valueResult);
    } else if (selected.contains(map.keyId())) {
      // right now, maps can't be selected without values
      return map;
    }
    return null;
  }
</java function>
<rust function signature>
fn map(
        &mut self,
        map: &MapType,
        _key_value: Option<Type>,
        value: Option<Type>,
    ) -> Result<Option<Type>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn is_primitive(&self) -> bool {
        matches!(self, Type::Primitive(_))
    }
pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
        Self {
            kind,
            message: message.into(),
            context: Vec::default(),

            source: None,
            // `Backtrace::capture()` will check if backtrace has been enabled
            // internally. It's zero cost if backtrace is disabled.
            backtrace: Backtrace::capture(),
        }
    }
struct PruneColumn {
    selected: HashSet<i32>,
    select_full_types: bool,
}
pub enum ErrorKind {
    /// Iceberg don't know what happened here, and no actions other than
    /// just returning it back. For example, iceberg returns an internal
    /// service error.
    Unexpected,

    /// Iceberg data is invalid.
    ///
    /// This error is returned when we try to read a table from iceberg but
    /// failed to parse it's metadata or data file correctly.
    ///
    /// The table could be invalid or corrupted.
    DataInvalid,
    /// Iceberg feature is not supported.
    ///
    /// This error is returned when given iceberg feature is not supported.
    FeatureUnsupported,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::error::Result;
use crate::expr::accessor::StructAccessor;
use crate::spec::datatypes::{
    ListType, MapType, NestedFieldRef, PrimitiveType, StructType, Type, LIST_FILED_NAME,
    MAP_KEY_FIELD_NAME, MAP_VALUE_FIELD_NAME,
};
use crate::{ensure_data_valid, Error, ErrorKind};
use bimap::BiHashMap;
use itertools::{zip_eq, Itertools};
use serde::{Deserialize, Serialize};
use std::collections::{HashMap, HashSet};
use std::fmt::{Display, Formatter};
use std::sync::Arc;
use _serde::SchemaEnum;
use super::NestedField;
use serde::{Deserialize, Serialize};
use crate::{spec::StructType, Error, Result};
use super::{Schema, DEFAULT_SCHEMA_ID};
use crate::spec::datatypes::Type::{List, Map, Primitive, Struct};
use crate::spec::datatypes::{
        ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, StructType, Type,
    };
use crate::spec::schema::Schema;
use crate::spec::schema::_serde::{SchemaEnum, SchemaV1, SchemaV2};
use crate::spec::values::Map as MapValue;
use crate::spec::{prune_columns, Datum, Literal};
use std::collections::{HashMap, HashSet};
use super::DEFAULT_SCHEMA_ID;

</rust function dependency libraries>

</message>
<function>
fn map(
        &mut self,
        map: &MapType,
        _key_value: Option<Type>,
        value: Option<Type>,
    ) -> Result<Option<Type>> {
        if self.selected.contains(&map.value_field.id) {
            if self.select_full_types {
                Ok(Some(Type::Map(map.clone())))
            } else if map.value_field.field_type.is_struct() {
                let projected_struct =
                    PruneColumn::project_selected_struct(Some(value.unwrap())).unwrap();
                return Ok(Some(Type::Map(PruneColumn::project_map(
                    map,
                    Type::Struct(projected_struct),
                )?)));
            } else if map.value_field.field_type.is_primitive() {
                return Ok(Some(Type::Map(map.clone())));
            } else {
                return Err(Error::new(
                        ErrorKind::DataInvalid,
                        format!("Cannot explicitly project List or Map types, Map value {} of type {} was selected", map.value_field.id, map.value_field.field_type),
                    ));
            }
        } else if let Some(value_result) = value {
            return Ok(Some(Type::Map(PruneColumn::project_map(
                map,
                value_result,
            )?)));
        } else if self.selected.contains(&map.key_field.id) {
            Ok(Some(Type::Map(map.clone())))
        } else {
            Ok(None)
        }
    }
</function>
<translated function>
Here is the equivalent rust function for the provided Java function.

```rust
fn map(
    &mut self,
    map: &MapType,
    _key_value: Option<Type>,
    value: Option<Type>,
) -> Result<Option<Type>> {
    if self.selected.contains(&map.value_id()) {
        if self.select_full_types {
            return Ok(Some(Type::Map(map.clone())));
        } else if matches!(map.value_type().borrow(), Type::Struct(_)) {
            let projected_struct = self.project_selected_struct(value);
            return Ok(Some(self.project_map(map, projected_struct.unwrap())?));
        } else {
            ensure_data_valid!(
                map.value_type().is_primitive(),
                "Cannot explicitly project List or Map types, Map value {} of type {:?} was selected",
                map.value_id(),
                map.value_type()
            );
            return Ok(Some(Type::Map(map.clone())));
        }
    } else if value.is_some() {
        return Ok(Some(self.project_map(map, value.unwrap())?));
    } else if self.selected.contains(&map.key_id()) {
        // right now, maps can't be selected without values
        return Ok(Some(Type::Map(map.clone())));
    }
    Ok(None)
}
```

Please note this function depends on two additional functions `project_selected_struct` and `project_map` which are assumed to be present in the codebase.

The use of the macros `ensure_data_valid!` would require the below declaration:

```rust
macro_rules! ensure_data_valid {
    ($predicate:expr, $err_msg:literal $(,$args:expr)*) => {
        if !$predicate {
            return Err(Error::new(
                ErrorKind::DataInvalid,
                format!($err_msg $(,$args)*),
            ));
        }
    };
}
```

Make sure that you have defined Equivalence and Hashing rules for your MapType as we are using it in HashSet and comparing it.</translated function>Here is the equivalent rust function for the provided Java function.

```rust
fn map(
    &mut self,
    map: &MapType,
    _key_value: Option<Type>,
    value: Option<Type>,
) -> Result<Option<Type>> {
    if self.selected.contains(&map.value_id()) {
        if self.select_full_types {
            return Ok(Some(Type::Map(map.clone())));
        } else if matches!(map.value_type().borrow(), Type::Struct(_)) {
            let projected_struct = self.project_selected_struct(value);
            return Ok(Some(self.project_map(map, projected_struct.unwrap())?));
        } else {
            ensure_data_valid!(
                map.value_type().is_primitive(),
                "Cannot explicitly project List or Map types, Map value {} of type {:?} was selected",
                map.value_id(),
                map.value_type()
            );
            return Ok(Some(Type::Map(map.clone())));
        }
    } else if value.is_some() {
        return Ok(Some(self.project_map(map, value.unwrap())?));
    } else if self.selected.contains(&map.key_id()) {
        // right now, maps can't be selected without values
        return Ok(Some(Type::Map(map.clone())));
    }
    Ok(None)
}
```

Please note this function depends on two additional functions `project_selected_struct` and `project_map` which are assumed to be present in the codebase.

The use of the macros `ensure_data_valid!` would require the below declaration:

```rust
macro_rules! ensure_data_valid {
    ($predicate:expr, $err_msg:literal $(,$args:expr)*) => {
        if !$predicate {
            return Err(Error::new(
                ErrorKind::DataInvalid,
                format!($err_msg $(,$args)*),
            ));
        }
    };
}
```

Make sure that you have defined Equivalence and Hashing rules for your MapType as we are using it in HashSet and comparing it.
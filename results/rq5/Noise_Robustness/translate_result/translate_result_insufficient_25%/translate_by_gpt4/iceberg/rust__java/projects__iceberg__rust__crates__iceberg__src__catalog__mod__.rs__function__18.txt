<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public TableMetadata.Builder applyTo(TableMetadata.Builder metadataBuilder) {
      return metadataBuilder.assignUUID(uuid);
    }
</java function>
<rust function signature>
pub fn apply(self, builder: TableMetadataBuilder) -> Result<TableMetadataBuilder> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct TableMetadataBuilder(TableMetadata);

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::spec::{
    FormatVersion, Schema, Snapshot, SnapshotReference, SortOrder, TableMetadataBuilder,
    UnboundPartitionSpec,
};
use crate::table::Table;
use crate::{Error, ErrorKind, Result};
use async_trait::async_trait;
use serde_derive::{Deserialize, Serialize};
use std::collections::HashMap;
use std::fmt::Debug;
use std::mem::take;
use std::ops::Deref;
use typed_builder::TypedBuilder;
use urlencoding::encode;
use uuid::Uuid;
use crate::spec::{
        FormatVersion, NestedField, NullOrder, Operation, PrimitiveType, Schema, Snapshot,
        SnapshotReference, SnapshotRetention, SortDirection, SortField, SortOrder, Summary,
        TableMetadataBuilder, Transform, Type, UnboundPartitionField, UnboundPartitionSpec,
    };
use crate::{NamespaceIdent, TableCreation, TableIdent, TableRequirement, TableUpdate};
use serde::de::DeserializeOwned;
use serde::Serialize;
use std::collections::HashMap;
use std::fmt::Debug;
use uuid::uuid;

</rust function dependency libraries>

</message>
<function>
pub fn apply(self, builder: TableMetadataBuilder) -> Result<TableMetadataBuilder> {
        match self {
            TableUpdate::AssignUuid { uuid } => builder.assign_uuid(uuid),
            _ => unimplemented!(),
        }
    }
</function>
<translated function>
<rust function>
pub fn apply_to(self, metadata_builder: TableMetadataBuilder) -> TableMetadataBuilder {
    metadata_builder.assign_uuid(self.uuid)
}
</rust function></translated function><rust function>
pub fn apply_to(self, metadata_builder: TableMetadataBuilder) -> TableMetadataBuilder {
    metadata_builder.assign_uuid(self.uuid)
}
</rust function>
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def remove_conn(self, swarm_conn: SwarmConn) -> None:
        """
        Simply remove the connection from Swarm's records, without closing
        the connection.
        """
        peer_id = swarm_conn.muxed_conn.peer_id
        if peer_id not in self.connections:
            return
        del self.connections[peer_id]
</python function>
<rust function signature>
fn remove(&mut self, k: &Key) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct MemoryStore {
    /// The identity of the peer owning the store.
    local_key: kbucket::Key<PeerId>,
    /// The configuration of the store.
    config: MemoryStoreConfig,
    /// The stored (regular) records.
    records: HashMap<Key, Record>,
    /// The stored provider records.
    providers: HashMap<Key, SmallVec<[ProviderRecord; K_VALUE.get()]>>,
    /// The set of all provider records for the node identified by `local_key`.
    ///
    /// Must be kept in sync with `providers`.
    provided: HashSet<ProviderRecord>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use super::*;
use crate::kbucket;
use smallvec::SmallVec;
use std::collections::{hash_map, hash_set, HashMap, HashSet};
use std::iter;
use super::*;
use crate::SHA_256_MH;
use quickcheck::*;
use rand::Rng;

</rust function dependency libraries>

</message>
<function>
fn remove(&mut self, k: &Key) {
        self.records.remove(k);
    }
</function>
<translated function>
Based on the given Python and Rust code, the translated Rust function should look like this:

<rust function result>
fn remove(&mut self, k: &Key) {
    if !self.records.contains_key(k) {
        return;
    }

    self.records.remove(k);
}
</rust function result> 

Please note that the Python `SwarmCon` is translated as `Key` in Rust as per provided signatures. Further, in Rust we use `HashMap` methods such as `contains_key()` and `remove()` for checking the existence of a key and removing it from the map, which are equivalent to Python's `in` operator and `del` statement respectively.</translated function>Based on the given Python and Rust code, the translated Rust function should look like this:

<rust function result>
fn remove(&mut self, k: &Key) {
    if !self.records.contains_key(k) {
        return;
    }

    self.records.remove(k);
}
</rust function result> 

Please note that the Python `SwarmCon` is translated as `Key` in Rust as per provided signatures. Further, in Rust we use `HashMap` methods such as `contains_key()` and `remove()` for checking the existence of a key and removing it from the map, which are equivalent to Python's `in` operator and `del` statement respectively.
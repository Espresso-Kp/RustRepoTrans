<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def identify_sig_or_bom(sequence: bytes) -> Tuple[Optional[str], bytes]:
    """
    Identify and extract SIG/BOM in given sequence.
    """

    for iana_encoding in ENCODING_MARKS:
        marks: Union[bytes, List[bytes]] = ENCODING_MARKS[iana_encoding]

        if isinstance(marks, bytes):
            marks = [marks]

        for mark in marks:
            if sequence.startswith(mark):
                return iana_encoding, mark

    return None, b""
</python function>
<rust function signature>
pub(crate) fn identify_sig_or_bom(sequence: &[u8]) -> (Option<String>, Option<&[u8]>) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub(crate) static ENCODING_MARKS: Lazy<HashMap<&'static str, &'static [u8]>> = Lazy::new(|| {
    HashMap::from_iter([
        ("utf-8", b"\xef\xbb\xbf".as_slice()),
        ("gb18030", b"\x84\x31\x95\x33".as_slice()),
        ("utf-16le", b"\xff\xfe".as_slice()),
        ("utf-16be", b"\xfe\xff".as_slice()),
    ])
});

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<function>
pub(crate) fn identify_sig_or_bom(sequence: &[u8]) -> (Option<String>, Option<&[u8]>) {
    ENCODING_MARKS
        .iter()
        .find(|&(_, enc_sig)| sequence.starts_with(enc_sig))
        .map_or((None, None), |(enc_name, enc_sig)| {
            (Some((*enc_name).to_string()), Some(*enc_sig))
        })
}
</function>
<translated function>
Here is the python function translated to rust:

```rust
use std::collections::HashMap;
use once_cell::sync::Lazy;
use std::iter::FromIterator;

pub(crate) fn identify_sig_or_bom(sequence: &[u8]) -> (Option<String>, Option<&[u8]>) {
    for (iana_encoding, &mark) in ENCODING_MARKS.iter() {
        if sequence.starts_with(mark) {
            return (Some(iana_encoding.to_string()), Some(mark));
        }
    }
    (None, None)
}
```

Please note that the `marks` has been changed to a single `[u8]` instead of an array/list of `[u8]`. This is because Rust's data types are statically typed, which means we can't just change a `[u8]` to array of `[u8]`. Furthermore, this requires the `ENCODING_MARKS` to be a `HashMap<&'static str, &'static [u8]>` directly. 

In the python code, the `marks` could either be `bytes` or `[bytes]`, and in order to align this with the proper `HashMap` declaration in Rust, I have gone with the assumption that the `marks` is a single `[u8]` referred as `byte slice` in Rust. If you need to check multiple marks in the encoding, then the `marks` definition and the following logic of checking need to be modified.</translated function>Here is the python function translated to rust:

```rust
use std::collections::HashMap;
use once_cell::sync::Lazy;
use std::iter::FromIterator;

pub(crate) fn identify_sig_or_bom(sequence: &[u8]) -> (Option<String>, Option<&[u8]>) {
    for (iana_encoding, &mark) in ENCODING_MARKS.iter() {
        if sequence.starts_with(mark) {
            return (Some(iana_encoding.to_string()), Some(mark));
        }
    }
    (None, None)
}
```

Please note that the `marks` has been changed to a single `[u8]` instead of an array/list of `[u8]`. This is because Rust's data types are statically typed, which means we can't just change a `[u8]` to array of `[u8]`. Furthermore, this requires the `ENCODING_MARKS` to be a `HashMap<&'static str, &'static [u8]>` directly. 

In the python code, the `marks` could either be `bytes` or `[bytes]`, and in order to align this with the proper `HashMap` declaration in Rust, I have gone with the assumption that the `marks` is a single `[u8]` referred as `byte slice` in Rust. If you need to check multiple marks in the encoding, then the `marks` definition and the following logic of checking need to be modified.
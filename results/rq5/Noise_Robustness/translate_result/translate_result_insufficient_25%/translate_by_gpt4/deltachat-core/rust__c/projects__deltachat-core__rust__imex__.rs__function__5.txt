<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
char* dc_create_setup_code(dc_context_t* context)
{
	#define         CODE_ELEMS 9
	uint16_t        random_val = 0;
	int             i = 0;
	dc_strbuilder_t ret;
	dc_strbuilder_init(&ret, 0);

	for (i = 0; i < CODE_ELEMS; i++)
	{
		do
		{
			if (!RAND_bytes((unsigned char*)&random_val, sizeof(uint16_t))) {
				dc_log_warning(context, 0, "Falling back to pseudo-number generation for the setup code.");
				RAND_pseudo_bytes((unsigned char*)&random_val, sizeof(uint16_t));
			}
		}
		while (random_val > 60000); /* make sure the modulo below does not reduce entropy (range is 0..65535, a module 10000 would make appearing values <=535 one time more often than other values) */

		random_val = random_val % 10000; /* force all blocks into the range 0..9999 */

		dc_strbuilder_catf(&ret, "%s%04i", i?"-":"", (int)random_val);
	}

	return ret.buf;
}
</c function>
<rust function signature>
pub fn create_setup_code(_context: &Context) -> String 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::any::Any;
use std::ffi::OsStr;
use std::path::{Path, PathBuf};
use ::pgp::types::KeyTrait;
use anyhow::{bail, ensure, format_err, Context as _, Result};
use deltachat_contact_tools::EmailAddress;
use futures::StreamExt;
use futures_lite::FutureExt;
use rand::{thread_rng, Rng};
use tokio::fs::{self, File};
use tokio_tar::Archive;
use crate::blob::{BlobDirContents, BlobObject};
use crate::chat::{self, delete_and_reset_all_device_msgs, ChatId};
use crate::config::Config;
use crate::contact::ContactId;
use crate::context::Context;
use crate::e2ee;
use crate::events::EventType;
use crate::key::{
    self, load_self_secret_key, DcKey, DcSecretKey, SignedPublicKey, SignedSecretKey,
};
use crate::log::LogExt;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::param::Param;
use crate::pgp;
use crate::sql;
use crate::stock_str;
use crate::tools::{
    create_folder, delete_file, get_filesuffix_lc, open_file_std, read_file, time, write_file,
};
use transfer::{get_backup, BackupProvider};
use std::time::Duration;
use ::pgp::armor::BlockType;
use tokio::task;
use super::*;
use crate::pgp::{split_armored_data, HEADER_AUTOCRYPT, HEADER_SETUPCODE};
use crate::receive_imf::receive_imf;
use crate::stock_str::StockMessage;
use crate::test_utils::{alice_keypair, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub fn create_setup_code(_context: &Context) -> String {
    let mut random_val: u16;
    let mut rng = thread_rng();
    let mut ret = String::new();

    for i in 0..9 {
        loop {
            random_val = rng.gen();
            if random_val as usize <= 60000 {
                break;
            }
        }
        random_val = (random_val as usize % 10000) as u16;
        ret += &format!(
            "{}{:04}",
            if 0 != i { "-" } else { "" },
            random_val as usize
        );
    }

    ret
}
</function>
<translated function>
In the function translation from C to Rust, notice that `RAND_bytes` method is replaced by the `rand::thread_rng.gen_range` method to generate a random number between an upper and lower limit.

```rust
pub fn create_setup_code(_context: &Context) -> String {
    use rand::Rng;
    
    const CODE_ELEMS: usize = 9;
    
    let mut ret = String::new();

    for i in 0..CODE_ELEMS {
        let mut random_val: u16;

        // Loop until a random number less than 60000 is generated
        loop {
            random_val = rand::thread_rng().gen_range(0..65536);
            if random_val <= 60000 {
                break;
            } else {
                _context.inner.warning(EventType::GetInfo, "Falling back to pseudo-number generation for the setup code.", "");
            }
        }

        // Force all blocks into the range 0..9999
        random_val = random_val % 10000;

        // Add to string with leading zeroes and hyphen if not first element
        if i == 0 {
            ret.push_str(format!("{:04}", random_val).as_str());
        } else {
            ret.push_str(format!("-{:04}", random_val).as_str());
        }
    }

    ret
}

```

Here `_context.inner.warning` takes place of `dc_log_warning` method from C. This is because `dc_log_warning` is replaced by the `warning` method in the `events::InnerContext` struct in Rust. The `dc_log_warning` usually formats a warning message and logs it, similar behaviour us achieved in Rust variant by calling `warning` with a formatted message. Note that additional work may be needed elsewhere to properly pass in or manage the `Context` and to deal fully reproduce the C behavior. 

The C function generates a random number, continues if it's less than 60000, quits otherwise, making a log message warning about falling back to pseudo-number generation. In the Rust code, `rand::thread_rng().gen_range(0..65536)` generates the random number. The `warning` function makes a log message warning. This loop continues until a value less than 60000 is generated. 

The C function then performs modulo operation to force all blocks into the range 0..9999. The Rust function does the same operation. 

The next step is to append the formatted random number into the string. The C function does this using `dc_strbuilder_catf`, while the Rust function uses `push_str` along with `format!`. The `-` hyphen is added only to elements which are not the first one, consistent with the C function. 

`ret.buf` in C function is returned by the function and it is equivalent to returning `ret` string in Rust.</translated function>In the function translation from C to Rust, notice that `RAND_bytes` method is replaced by the `rand::thread_rng.gen_range` method to generate a random number between an upper and lower limit.

```rust
pub fn create_setup_code(_context: &Context) -> String {
    use rand::Rng;
    
    const CODE_ELEMS: usize = 9;
    
    let mut ret = String::new();

    for i in 0..CODE_ELEMS {
        let mut random_val: u16;

        // Loop until a random number less than 60000 is generated
        loop {
            random_val = rand::thread_rng().gen_range(0..65536);
            if random_val <= 60000 {
                break;
            } else {
                _context.inner.warning(EventType::GetInfo, "Falling back to pseudo-number generation for the setup code.", "");
            }
        }

        // Force all blocks into the range 0..9999
        random_val = random_val % 10000;

        // Add to string with leading zeroes and hyphen if not first element
        if i == 0 {
            ret.push_str(format!("{:04}", random_val).as_str());
        } else {
            ret.push_str(format!("-{:04}", random_val).as_str());
        }
    }

    ret
}

```

Here `_context.inner.warning` takes place of `dc_log_warning` method from C. This is because `dc_log_warning` is replaced by the `warning` method in the `events::InnerContext` struct in Rust. The `dc_log_warning` usually formats a warning message and logs it, similar behaviour us achieved in Rust variant by calling `warning` with a formatted message. Note that additional work may be needed elsewhere to properly pass in or manage the `Context` and to deal fully reproduce the C behavior. 

The C function generates a random number, continues if it's less than 60000, quits otherwise, making a log message warning about falling back to pseudo-number generation. In the Rust code, `rand::thread_rng().gen_range(0..65536)` generates the random number. The `warning` function makes a log message warning. This loop continues until a value less than 60000 is generated. 

The C function then performs modulo operation to force all blocks into the range 0..9999. The Rust function does the same operation. 

The next step is to append the formatted random number into the string. The C function does this using `dc_strbuilder_catf`, while the Rust function uses `push_str` along with `format!`. The `-` hyphen is added only to elements which are not the first one, consistent with the C function. 

`ret.buf` in C function is returned by the function and it is equivalent to returning `ret` string in Rust.
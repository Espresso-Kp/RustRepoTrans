<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
int dc_addr_equals_self(dc_context_t* context, const char* addr)
{
	int   ret             = 0;
	char* normalized_addr = NULL;
	char* self_addr       = NULL;

	if (context==NULL || addr==NULL) {
		goto cleanup;
	}

	normalized_addr = dc_addr_normalize(addr);

	if (NULL==(self_addr=dc_sqlite3_get_config(context->sql, "configured_addr", NULL))) {
		goto cleanup;
	}

	ret = strcasecmp(normalized_addr, self_addr)==0? 1 : 0;

cleanup:
	free(self_addr);
	free(normalized_addr);
	return ret;
}
</c function>
<rust function signature>
pub(crate) async fn is_self_addr(&self, addr: &str) -> Result<bool> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub(crate) async fn get_secondary_self_addrs(&self) -> Result<Vec<String>> {
        let secondary_addrs = self
            .get_config(Config::SecondaryAddrs)
            .await?
            .unwrap_or_default();
        Ok(secondary_addrs
            .split_ascii_whitespace()
            .map(|s| s.to_string())
            .collect())
    }
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::env;
use std::path::Path;
use std::str::FromStr;
use anyhow::{ensure, Context as _, Result};
use base64::Engine as _;
use deltachat_contact_tools::addr_cmp;
use serde::{Deserialize, Serialize};
use strum::{EnumProperty, IntoEnumIterator};
use strum_macros::{AsRefStr, Display, EnumIter, EnumString};
use tokio::fs;
use crate::blob::BlobObject;
use crate::constants::{self, DC_VERSION_STR};
use crate::context::Context;
use crate::events::EventType;
use crate::log::LogExt;
use crate::mimefactory::RECOMMENDED_FILE_SIZE;
use crate::provider::{get_provider_by_id, Provider};
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{get_abs_path, improve_single_line_input};
use num_traits::FromPrimitive;
use super::*;
use crate::test_utils::{sync, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub(crate) async fn is_self_addr(&self, addr: &str) -> Result<bool> {
        Ok(self
            .get_config(Config::ConfiguredAddr)
            .await?
            .iter()
            .any(|a| addr_cmp(addr, a))
            || self
                .get_secondary_self_addrs()
                .await?
                .iter()
                .any(|a| addr_cmp(addr, a)))
    }
</function>
<translated function>
Here is the translated Rust function based on the provided C function, Rust function signature, related variables, functions, given data type declarations, and the dependency libraries:

```rust
use deltachat_contact_tools::normalize_addr;

pub(crate) async fn is_self_addr(&self, addr: &str) -> Result<bool> {
    if addr.is_empty() {
        return Ok(false);
    }

    let normalized_addr = normalize_addr(addr);

    let self_addr = self
        .inner
        .get_config(Config::Addr)
        .await?;

    if self_addr.is_none() {
        return Ok(false);
    }

    let result = addr_cmp(normalized_addr, self_addr.unwrap()) == 0;

    Ok(result)
}
```
Note:
1. This code assumes that the `normalize_addr` function is equivalent to `dc_addr_normalize` in the C function.
2. The `addr_cmp` function is equivalent to `strcasecmp` in the C function.
3. Function `dc_sqlite3_get_config` should be replaced with `get_config`.
4. Freeing of memory (`free(self_addr); free(normalized_addr);`) is not required in Rust as it is a garbage collected language.
5. Rust does not have a `goto` statement. Therefore, the guard clauses are handled with early returns in Rust.
6. The `async` keyword in the function signature implies that this function is asynchronous so it should be called within the context of an asynchronous task or coroutine.
7. The function now returns a `Result<bool>` rather than simply a bool, where `Result` is a Rust `enum` that represents either success (`Ok`) or failure (`Err`). Please handle this when calling this function elsewhere in your code.
8. The `self` keyword in Rust methods is equivalent to `this` keyword in C++ and is equivalent to the `context` argument in your original C function. 
9. Config::Addr is assumed to be equivalent to "configured_addr" in C code. You might need to replace this with the appropriate value depending on the actual configuration value you want to retrieve.
10. The code `self.inner` is used assuming that the `inner` field in `Context` struct holds the state/context for the application (like `dc_context_t` in C). 

For your code to compile and work correctly, you should ensure these assumptions are right.</translated function>Here is the translated Rust function based on the provided C function, Rust function signature, related variables, functions, given data type declarations, and the dependency libraries:

```rust
use deltachat_contact_tools::normalize_addr;

pub(crate) async fn is_self_addr(&self, addr: &str) -> Result<bool> {
    if addr.is_empty() {
        return Ok(false);
    }

    let normalized_addr = normalize_addr(addr);

    let self_addr = self
        .inner
        .get_config(Config::Addr)
        .await?;

    if self_addr.is_none() {
        return Ok(false);
    }

    let result = addr_cmp(normalized_addr, self_addr.unwrap()) == 0;

    Ok(result)
}
```
Note:
1. This code assumes that the `normalize_addr` function is equivalent to `dc_addr_normalize` in the C function.
2. The `addr_cmp` function is equivalent to `strcasecmp` in the C function.
3. Function `dc_sqlite3_get_config` should be replaced with `get_config`.
4. Freeing of memory (`free(self_addr); free(normalized_addr);`) is not required in Rust as it is a garbage collected language.
5. Rust does not have a `goto` statement. Therefore, the guard clauses are handled with early returns in Rust.
6. The `async` keyword in the function signature implies that this function is asynchronous so it should be called within the context of an asynchronous task or coroutine.
7. The function now returns a `Result<bool>` rather than simply a bool, where `Result` is a Rust `enum` that represents either success (`Ok`) or failure (`Err`). Please handle this when calling this function elsewhere in your code.
8. The `self` keyword in Rust methods is equivalent to `this` keyword in C++ and is equivalent to the `context` argument in your original C function. 
9. Config::Addr is assumed to be equivalent to "configured_addr" in C code. You might need to replace this with the appropriate value depending on the actual configuration value you want to retrieve.
10. The code `self.inner` is used assuming that the `inner` field in `Context` struct holds the state/context for the application (like `dc_context_t` in C). 

For your code to compile and work correctly, you should ensure these assumptions are right.
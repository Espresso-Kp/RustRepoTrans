<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
dc_lot_t* dc_chatlist_get_summary(const dc_chatlist_t* chatlist, size_t index, dc_chat_t* chat /*may be NULL*/)
{
	/* The summary is created by the chat, not by the last message.
	This is because we may want to display drafts here or stuff as
	"is typing".
	Also, sth. as "No messages" would not work if the summary comes from a
	message. */

	dc_lot_t*      ret = dc_lot_new(); /* the function never returns NULL */
	uint32_t       lastmsg_id = 0;
	dc_msg_t*      lastmsg = NULL;
	dc_contact_t*  lastcontact = NULL;
	dc_chat_t*     chat_to_delete = NULL;

	if (chatlist==NULL || chatlist->magic!=DC_CHATLIST_MAGIC || index>=chatlist->cnt) {
		ret->text2 = dc_strdup("ErrBadChatlistIndex");
		goto cleanup;
	}

	lastmsg_id = dc_array_get_id(chatlist->chatNlastmsg_ids, index*DC_CHATLIST_IDS_PER_RESULT+1);

	if (chat==NULL) {
		chat = dc_chat_new(chatlist->context);
		chat_to_delete = chat;
		if (!dc_chat_load_from_db(chat, dc_array_get_id(chatlist->chatNlastmsg_ids, index*DC_CHATLIST_IDS_PER_RESULT))) {
			ret->text2 = dc_strdup("ErrCannotReadChat");
			goto cleanup;
		}
	}

	if (lastmsg_id)
	{
		lastmsg = dc_msg_new_untyped(chatlist->context);
		dc_msg_load_from_db(lastmsg, chatlist->context, lastmsg_id);

		if (lastmsg->from_id!=DC_CONTACT_ID_SELF  &&  DC_CHAT_TYPE_IS_MULTI(chat->type))
		{
			lastcontact = dc_contact_new(chatlist->context);
			dc_contact_load_from_db(lastcontact, chatlist->context->sql, lastmsg->from_id);
		}
	}

	if (chat->id==DC_CHAT_ID_ARCHIVED_LINK)
	{
		ret->text2 = dc_strdup(NULL);
	}
	else if (lastmsg==NULL || lastmsg->from_id==0)
	{
		/* no messages */
		ret->text2 = dc_stock_str(chatlist->context, DC_STR_NOMESSAGES);
	}
	else
	{
		/* show the last message */
		dc_lot_fill(ret, lastmsg, chat, lastcontact, chatlist->context);
	}

cleanup:
	dc_msg_unref(lastmsg);
	dc_contact_unref(lastcontact);
	dc_chat_unref(chat_to_delete);
	return ret;
}
</c function>
<rust function signature>
pub async fn get_summary(
        &self,
        context: &Context,
        index: usize,
        chat: Option<&Chat>,
    ) -> Result<Summary> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn get(&self, key: Param) -> Option<&str> {
        self.inner.get(&key).map(|s| s.as_str())
    }
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use anyhow::{ensure, Context as _, Result};
use once_cell::sync::Lazy;
use crate::chat::{update_special_chat_names, Chat, ChatId, ChatVisibility};
use crate::constants::{
    Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK, DC_GCL_ADD_ALLDONE_HINT,
    DC_GCL_ARCHIVED_ONLY, DC_GCL_FOR_FORWARDING, DC_GCL_NO_SPECIALS,
};
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::message::{Message, MessageState, MsgId};
use crate::param::{Param, Params};
use crate::stock_str;
use crate::summary::Summary;
use crate::tools::IsNoneOrEmpty;
use super::*;
use crate::chat::{
        add_contact_to_chat, create_group_chat, get_chat_contacts, remove_contact_from_chat,
        send_text_msg, ProtectionStatus,
    };
use crate::message::Viewtype;
use crate::receive_imf::receive_imf;
use crate::stock_str::StockMessage;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub async fn get_summary(
        &self,
        context: &Context,
        index: usize,
        chat: Option<&Chat>,
    ) -> Result<Summary> {
        // The summary is created by the chat, not by the last message.
        // This is because we may want to display drafts here or stuff as
        // "is typing".
        // Also, sth. as "No messages" would not work if the summary comes from a message.
        let (chat_id, lastmsg_id) = self
            .ids
            .get(index)
            .context("chatlist index is out of range")?;
        Chatlist::get_summary2(context, *chat_id, *lastmsg_id, chat).await
    }
</function>
<translated function>
Here is the C function translated into Rust:

```rust
pub async fn get_summary(
    &self,
    context: &Context,
    index: usize,
    chat: Option<&Chat>,
) -> Result<Summary> {
    let mut ret = Summary::new();
    let mut lastmsg_id = 0;
    let mut lastmsg: Option<&Message> = None;
    let mut lastcontact: Option<&Contact> = None;
    let mut chat_to_delete: Option<&Chat> = None;

    ensure!(
        self.magic == DC_CHATLIST_MAGIC && index < self.cnt,
        "ErrBadChatlistIndex"
    );

    lastmsg_id = self.chatNlastmsg_ids.get(index * DC_CHATLIST_IDS_PER_RESULT + 1);

    let chat = match chat {
        Some(chat) => chat,
        None => {
            let chat = Chat::new(context);
            chat_to_delete = Some(&chat);
            if !chat.load_from_db(lastmsg_id.unwrap_or_default()) {
                ensure!(false, "ErrCannotLoadChat");
            };
            &chat
        }
    };

    if lastmsg_id.is_some() {
        let msg = Message::new_untyped(context);
        msg.load_from_db(lastmsg_id.unwrap());
        lastmsg = Some(&msg);

        if lastmsg.unwrap().from_id != DC_CONTACT_ID_SELF && DC_CHAT_TYPE_IS_MULTI(chat.typ) {
            let contact = Contact::new(context);
            contact.load_from_db(lastmsg.unwrap().from_id);
            lastcontact = Some(&contact);
        }
    }

    if chat.id == DC_CHAT_ID_ARCHIVED_LINK {
        ret.text2 = "".to_string();
    } else if lastmsg.is_none() || lastmsg.unwrap().from_id == 0 {
        ret.text2 = stock_str::dc_stock_str(context, StockMessage::NoMessages).await;
    } else {
        ret.fill(lastmsg.unwrap(), chat, lastcontact, context).await?;
    }

    remove_reference(lastmsg);
    remove_reference(lastcontact);
    remove_reference(chat_to_delete);

    Ok(ret)
}
```

Note: In Rust, there are no exact equivalents to `dc_msg_unref`, `dc_contact_unref`, and `dc_chat_unref`. To mimic these, we simply let the Rust borrow checker handle this by letting the borrowed values go out of scope. The function `remove_reference` may not exist in Rust, as it is not needed due to Rust's ownership system.</translated function>Here is the C function translated into Rust:

```rust
pub async fn get_summary(
    &self,
    context: &Context,
    index: usize,
    chat: Option<&Chat>,
) -> Result<Summary> {
    let mut ret = Summary::new();
    let mut lastmsg_id = 0;
    let mut lastmsg: Option<&Message> = None;
    let mut lastcontact: Option<&Contact> = None;
    let mut chat_to_delete: Option<&Chat> = None;

    ensure!(
        self.magic == DC_CHATLIST_MAGIC && index < self.cnt,
        "ErrBadChatlistIndex"
    );

    lastmsg_id = self.chatNlastmsg_ids.get(index * DC_CHATLIST_IDS_PER_RESULT + 1);

    let chat = match chat {
        Some(chat) => chat,
        None => {
            let chat = Chat::new(context);
            chat_to_delete = Some(&chat);
            if !chat.load_from_db(lastmsg_id.unwrap_or_default()) {
                ensure!(false, "ErrCannotLoadChat");
            };
            &chat
        }
    };

    if lastmsg_id.is_some() {
        let msg = Message::new_untyped(context);
        msg.load_from_db(lastmsg_id.unwrap());
        lastmsg = Some(&msg);

        if lastmsg.unwrap().from_id != DC_CONTACT_ID_SELF && DC_CHAT_TYPE_IS_MULTI(chat.typ) {
            let contact = Contact::new(context);
            contact.load_from_db(lastmsg.unwrap().from_id);
            lastcontact = Some(&contact);
        }
    }

    if chat.id == DC_CHAT_ID_ARCHIVED_LINK {
        ret.text2 = "".to_string();
    } else if lastmsg.is_none() || lastmsg.unwrap().from_id == 0 {
        ret.text2 = stock_str::dc_stock_str(context, StockMessage::NoMessages).await;
    } else {
        ret.fill(lastmsg.unwrap(), chat, lastcontact, context).await?;
    }

    remove_reference(lastmsg);
    remove_reference(lastcontact);
    remove_reference(chat_to_delete);

    Ok(ret)
}
```

Note: In Rust, there are no exact equivalents to `dc_msg_unref`, `dc_contact_unref`, and `dc_chat_unref`. To mimic these, we simply let the Rust borrow checker handle this by letting the borrowed values go out of scope. The function `remove_reference` may not exist in Rust, as it is not needed due to Rust's ownership system.
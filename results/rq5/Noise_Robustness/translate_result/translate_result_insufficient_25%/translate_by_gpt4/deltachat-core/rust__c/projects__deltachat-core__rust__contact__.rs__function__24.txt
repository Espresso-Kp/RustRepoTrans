<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
* Known and unblocked contacts will be returned by dc_get_contacts().
 *
 * To validate an e-mail address independently of the contact database
 * use dc_may_be_valid_addr().
 *
 * @memberof dc_context_t
 * @param context The context object as created by dc_context_new().
 * @param addr The e-mail-address to check.
 * @return 1=address is a contact in use, 0=address is not a contact in use.
 */
uint32_t dc_lookup_contact_id_by_addr(dc_context_t* context, const char* addr)
{
	int           contact_id = 0;
	char*         addr_normalized = NULL;
	char*         addr_self = NULL;
	sqlite3_stmt* stmt = NULL;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || addr==NULL || addr[0]==0) {
		goto cleanup;
	}

	addr_normalized = dc_addr_normalize(addr);

	addr_self = dc_sqlite3_get_config(context->sql, "configured_addr", "");
	if (strcasecmp(addr_normalized, addr_self)==0) {
		contact_id = DC_CONTACT_ID_SELF;
		goto cleanup;
	}

	stmt = dc_sqlite3_prepare(context->sql,
		"SELECT id FROM contacts"
		" WHERE addr=?1 COLLATE NOCASE"
		" AND id>?2 AND origin>=?3 AND blocked=0;");
	sqlite3_bind_text(stmt, 1, (const char*)addr_normalized, -1, SQLITE_STATIC);
	sqlite3_bind_int (stmt, 2, DC_CONTACT_ID_LAST_SPECIAL);
	sqlite3_bind_int (stmt, 3, DC_ORIGIN_MIN_CONTACT_LIST);
	if (sqlite3_step(stmt)==SQLITE_ROW) {
		contact_id = sqlite3_column_int(stmt, 0);
	}

cleanup:
	sqlite3_finalize(stmt);
	free(addr_normalized);
	free(addr_self);
	return contact_id;
}
</c function>
<rust function signature>
pub async fn lookup_id_by_addr(
        context: &Context,
        addr: &str,
        min_origin: Origin,
    ) -> Result<Option<ContactId>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::cmp::{min, Reverse};
use std::collections::BinaryHeap;
use std::fmt;
use std::path::{Path, PathBuf};
use std::time::UNIX_EPOCH;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use base64::Engine as _;
use deltachat_contact_tools::may_be_valid_addr;
use deltachat_contact_tools::{
    self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
    ContactAddress, VcardContact,
};
use deltachat_derive::{FromSql, ToSql};
use rusqlite::OptionalExtension;
use serde::{Deserialize, Serialize};
use tokio::task;
use tokio::time::{timeout, Duration};
use crate::aheader::{Aheader, EncryptPreference};
use crate::blob::BlobObject;
use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{load_self_public_key, DcKey, SignedPublicKey};
use crate::log::LogExt;
use crate::login_param::LoginParam;
use crate::message::MessageState;
use crate::mimeparser::AvatarAction;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::sql::{self, params_iter};
use crate::sync::{self, Sync::*};
use crate::tools::{
    duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
};
use crate::{chat, chatlist_events, stock_str};
use deltachat_contact_tools::{may_be_valid_addr, normalize_name};
use super::*;
use crate::chat::{get_chat_contacts, send_text_msg, Chat};
use crate::chatlist::Chatlist;
use crate::receive_imf::receive_imf;
use crate::test_utils::{self, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn lookup_id_by_addr(
        context: &Context,
        addr: &str,
        min_origin: Origin,
    ) -> Result<Option<ContactId>> {
        Self::lookup_id_by_addr_ex(context, addr, min_origin, Some(Blocked::Not)).await
    }
</function>
<translated function>
Here is your translated C function `dc_lookup_contact_id_by_addr(dc_context_t* context, const char* addr)` to Rust:

```rust
pub async fn lookup_id_by_addr(
        context: &Context,
        addr: &str,
        min_origin: Origin,
    ) -> Result<Option<ContactId>> 
{
    let mut contact_id: Option<ContactId> = None;
    let addr_normalized: Option<String> = addr_normalize(addr);
    let addr_self: Option<String> = context.sql.get_config_str(context, "configured_addr").await?;

    if addr_normalized.is_none() || addr_self.is_none() || addr_self.unwrap().eq_ignore_ascii_case(&addr_normalized.unwrap()) {
        return Ok(None);
    }

    let stmt = context.sql.prepare(
        "SELECT id FROM contacts
        WHERE addr=?1 COLLATE NOCASE
        AND id>?2 AND origin>=?3 AND blocked=0;",
    ).await?;

    stmt.bind_text(1, &addr_normalized.unwrap())?;
    stmt.bind_int(2, DC_CONTACT_ID_LAST_SPECIAL)?;
    stmt.bind_int(3, DC_ORIGIN_MIN_CONTACT_LIST)?;

    if let rusqlite::Row = stmt.query_map([], |row| {
        let contact_id: i32 = row.get(0)?;
        Ok(contact_id)
    })? {
        contact_id = Some(Ok(contact_id));
    }

    Ok(contact_id)
}
```

Note: This code assumes you have suitable equivalents for `dc_addr_normalize()`, `dc_sqlite3_get_config()`, `DC_CONTACT_ID_SELF`, `dc_sqlite3_prepare()`, and `DC_ORIGIN_MIN_CONTACT_LIST` in your Rust code. Additionally, it assumes that your `Context` has a `sql` field with methods that can `get_config_str`, `prepare`, `bind_text`, and `bind_int`. If some of these don't exist in your Rust code, you will need to write equivalent code yourself.

This translation might need some adjustments according to the actual structure and types of your existing Rust code. Please review and test it thoroughly to make sure it works as expected. Lastly, remember that dealing with strings can often bring up unicode-related issues when porting C code to Rust.</translated function>Here is your translated C function `dc_lookup_contact_id_by_addr(dc_context_t* context, const char* addr)` to Rust:

```rust
pub async fn lookup_id_by_addr(
        context: &Context,
        addr: &str,
        min_origin: Origin,
    ) -> Result<Option<ContactId>> 
{
    let mut contact_id: Option<ContactId> = None;
    let addr_normalized: Option<String> = addr_normalize(addr);
    let addr_self: Option<String> = context.sql.get_config_str(context, "configured_addr").await?;

    if addr_normalized.is_none() || addr_self.is_none() || addr_self.unwrap().eq_ignore_ascii_case(&addr_normalized.unwrap()) {
        return Ok(None);
    }

    let stmt = context.sql.prepare(
        "SELECT id FROM contacts
        WHERE addr=?1 COLLATE NOCASE
        AND id>?2 AND origin>=?3 AND blocked=0;",
    ).await?;

    stmt.bind_text(1, &addr_normalized.unwrap())?;
    stmt.bind_int(2, DC_CONTACT_ID_LAST_SPECIAL)?;
    stmt.bind_int(3, DC_ORIGIN_MIN_CONTACT_LIST)?;

    if let rusqlite::Row = stmt.query_map([], |row| {
        let contact_id: i32 = row.get(0)?;
        Ok(contact_id)
    })? {
        contact_id = Some(Ok(contact_id));
    }

    Ok(contact_id)
}
```

Note: This code assumes you have suitable equivalents for `dc_addr_normalize()`, `dc_sqlite3_get_config()`, `DC_CONTACT_ID_SELF`, `dc_sqlite3_prepare()`, and `DC_ORIGIN_MIN_CONTACT_LIST` in your Rust code. Additionally, it assumes that your `Context` has a `sql` field with methods that can `get_config_str`, `prepare`, `bind_text`, and `bind_int`. If some of these don't exist in your Rust code, you will need to write equivalent code yourself.

This translation might need some adjustments according to the actual structure and types of your existing Rust code. Please review and test it thoroughly to make sure it works as expected. Lastly, remember that dealing with strings can often bring up unicode-related issues when porting C code to Rust.
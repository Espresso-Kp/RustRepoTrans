<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
* normalize() is _not_ called for the name. If the contact is blocked, it is unblocked.
 *
 * To add a number of contacts, see dc_add_address_book() which is much faster for adding
 * a bunch of addresses.
 *
 * May result in a #DC_EVENT_CONTACTS_CHANGED event.
 *
 * @memberof dc_context_t
 * @param context The context object as created by dc_context_new().
 * @param name Name of the contact to add. If you do not know the name belonging
 *     to the address, you can give NULL here.
 * @param addr E-mail-address of the contact to add. If the email address
 *     already exists, the name is updated and the origin is increased to
 *     "manually created".
 * @return Contact ID of the created or reused contact.
 */
uint32_t dc_create_contact(dc_context_t* context, const char* name, const char* addr)
{
	uint32_t contact_id = 0;
	int      sth_modified = 0;
	int      blocked = 0;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || addr==NULL || addr[0]==0) {
		goto cleanup;
	}

	contact_id = dc_add_or_lookup_contact(context, name, addr, DC_ORIGIN_MANUALLY_CREATED, &sth_modified);

	blocked = dc_is_contact_blocked(context, contact_id);

	context->cb(context, DC_EVENT_CONTACTS_CHANGED, sth_modified==CONTACT_CREATED? contact_id : 0, 0);

	if (blocked) {
		dc_block_contact(context, contact_id, 0);
	}

cleanup:
	return contact_id;
}
</c function>
<rust function signature>
pub async fn create(context: &Context, name: &str, addr: &str) -> Result<ContactId> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::cmp::{min, Reverse};
use std::collections::BinaryHeap;
use std::fmt;
use std::path::{Path, PathBuf};
use std::time::UNIX_EPOCH;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use base64::Engine as _;
use deltachat_contact_tools::may_be_valid_addr;
use deltachat_contact_tools::{
    self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
    ContactAddress, VcardContact,
};
use deltachat_derive::{FromSql, ToSql};
use rusqlite::OptionalExtension;
use serde::{Deserialize, Serialize};
use tokio::task;
use tokio::time::{timeout, Duration};
use crate::aheader::{Aheader, EncryptPreference};
use crate::blob::BlobObject;
use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{load_self_public_key, DcKey, SignedPublicKey};
use crate::log::LogExt;
use crate::login_param::LoginParam;
use crate::message::MessageState;
use crate::mimeparser::AvatarAction;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::sql::{self, params_iter};
use crate::sync::{self, Sync::*};
use crate::tools::{
    duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
};
use crate::{chat, chatlist_events, stock_str};
use deltachat_contact_tools::{may_be_valid_addr, normalize_name};
use super::*;
use crate::chat::{get_chat_contacts, send_text_msg, Chat};
use crate::chatlist::Chatlist;
use crate::receive_imf::receive_imf;
use crate::test_utils::{self, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn create(context: &Context, name: &str, addr: &str) -> Result<ContactId> {
        Self::create_ex(context, Sync, name, addr).await
    }
</function>
<translated function>
Here is your translated function:

```rust
pub async fn create_contact(context: &Context, name: &str, addr: &str) -> Result<ContactId> {
    let mut contact_id: ContactId = 0;
    let mut sth_modified = false;
    let mut blocked = false;

    if context.is_null() || addr.is_empty(){
        bail!("Invalid context or empty address");
    }

    match dc_add_or_lookup_contact(context, name, addr, Origin::ManuallyCreated).await {
        Ok((id, modified)) => {
            contact_id = id;
            sth_modified = modified;
        }
        Err(err) => {
            error!(context, "Cannot add/lookup contact: {}", err);
            return Err(err.into());
        }
    }

    blocked = dc_is_contact_blocked(context, contact_id).await?;
        
    if sth_modified {
        contact::handle_event(context, contact_id).await?;
    }
        
    if blocked {
        dc_block_contact(context, contact_id, 0).await?;
    }
        
    Ok(contact_id)
}
```

Please note:

1. The translated function is `async` due to the fact that Rust uses async I/O operations instead of synchronous (blocking) I/O operations. This should be noted especially around the `create_contact` function, you should use `.await` syntax since it's async operation.
   
2. The original function from C did not provide any information on error handling. So, it's translated into `Result<>` in rust to indicate any errors which might occur in this function. Thus, instead of using `goto`, `bail!()` is used, which is a shorthand for something like return Err(format!("{}")).

3. The C function `dc_add_or_lookup_contact()` returns multiple values. When translated into Rust, it is assumed that this function will return a `Result` with a tuple containing the `contact_id` and a `bool` indicating whether something was modified.

4. The `context` object in Rust uses an `Arc` to have shared ownership across multiple parts of your code.

5. For comparing the string in Rust it uses `is_empty` which is equivalent to `addr[0] == 0` in C.

6. You should update the `dc_add_or_lookup_contact()`, `dc_is_contact_blocked()` and `dc_block_contact()` functions in Rust according to your requirements of asynchronous operations and error handling.</translated function>Here is your translated function:

```rust
pub async fn create_contact(context: &Context, name: &str, addr: &str) -> Result<ContactId> {
    let mut contact_id: ContactId = 0;
    let mut sth_modified = false;
    let mut blocked = false;

    if context.is_null() || addr.is_empty(){
        bail!("Invalid context or empty address");
    }

    match dc_add_or_lookup_contact(context, name, addr, Origin::ManuallyCreated).await {
        Ok((id, modified)) => {
            contact_id = id;
            sth_modified = modified;
        }
        Err(err) => {
            error!(context, "Cannot add/lookup contact: {}", err);
            return Err(err.into());
        }
    }

    blocked = dc_is_contact_blocked(context, contact_id).await?;
        
    if sth_modified {
        contact::handle_event(context, contact_id).await?;
    }
        
    if blocked {
        dc_block_contact(context, contact_id, 0).await?;
    }
        
    Ok(contact_id)
}
```

Please note:

1. The translated function is `async` due to the fact that Rust uses async I/O operations instead of synchronous (blocking) I/O operations. This should be noted especially around the `create_contact` function, you should use `.await` syntax since it's async operation.
   
2. The original function from C did not provide any information on error handling. So, it's translated into `Result<>` in rust to indicate any errors which might occur in this function. Thus, instead of using `goto`, `bail!()` is used, which is a shorthand for something like return Err(format!("{}")).

3. The C function `dc_add_or_lookup_contact()` returns multiple values. When translated into Rust, it is assumed that this function will return a `Result` with a tuple containing the `contact_id` and a `bool` indicating whether something was modified.

4. The `context` object in Rust uses an `Arc` to have shared ownership across multiple parts of your code.

5. For comparing the string in Rust it uses `is_empty` which is equivalent to `addr[0] == 0` in C.

6. You should update the `dc_add_or_lookup_contact()`, `dc_is_contact_blocked()` and `dc_block_contact()` functions in Rust according to your requirements of asynchronous operations and error handling.
<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
char* dc_imex_has_backup(dc_context_t* context, const char* dir_name)
{
	char*          ret = NULL;
	time_t         ret_backup_time = 0;
	DIR*           dir_handle = NULL;
	struct dirent* dir_entry = NULL;
	int            prefix_len = strlen(DC_BAK_PREFIX);
	int            suffix_len = strlen(DC_BAK_SUFFIX);
	char*          curr_pathNfilename = NULL;
	dc_sqlite3_t*  test_sql = NULL;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC) {
		return NULL;
	}

	if ((dir_handle=opendir(dir_name))==NULL) {
		dc_log_info(context, 0, "Backup check: Cannot open directory \"%s\".", dir_name); /* this is not an error - eg. the directory may not exist or the user has not given us access to read data from the storage */
		goto cleanup;
	}

	while ((dir_entry=readdir(dir_handle))!=NULL) {
		const char* name = dir_entry->d_name; /* name without path; may also be `.` or `..` */
		int name_len = strlen(name);
		if (name_len > prefix_len && strncmp(name, DC_BAK_PREFIX, prefix_len)==0
		 && name_len > suffix_len && strncmp(&name[name_len-suffix_len-1], "." DC_BAK_SUFFIX, suffix_len)==0)
		{
			free(curr_pathNfilename);
			curr_pathNfilename = dc_mprintf("%s/%s", dir_name, name);

			dc_sqlite3_unref(test_sql);
			if ((test_sql=dc_sqlite3_new(context/*for logging only*/))!=NULL
			 && dc_sqlite3_open(test_sql, curr_pathNfilename, DC_OPEN_READONLY))
			{
				time_t curr_backup_time = dc_sqlite3_get_config_int(test_sql, "backup_time", 0); /* reading the backup time also checks if the database is readable and the table `config` exists */
				if (curr_backup_time > 0
				 && curr_backup_time > ret_backup_time/*use the newest if there are multiple backup*/)
				{
					/* set return value to the tested database name */
					free(ret);
					ret = curr_pathNfilename;
					ret_backup_time = curr_backup_time;
					curr_pathNfilename = NULL;
				}
			}
		}
	}

cleanup:
	if (dir_handle) { closedir(dir_handle); }
	free(curr_pathNfilename);
	dc_sqlite3_unref(test_sql);
	return ret;
}
</c function>
<rust function signature>
pub async fn has_backup(_context: &Context, dir_name: &Path) -> Result<String> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::any::Any;
use std::ffi::OsStr;
use std::path::{Path, PathBuf};
use ::pgp::types::KeyTrait;
use anyhow::{bail, ensure, format_err, Context as _, Result};
use deltachat_contact_tools::EmailAddress;
use futures::StreamExt;
use futures_lite::FutureExt;
use rand::{thread_rng, Rng};
use tokio::fs::{self, File};
use tokio_tar::Archive;
use crate::blob::{BlobDirContents, BlobObject};
use crate::chat::{self, delete_and_reset_all_device_msgs, ChatId};
use crate::config::Config;
use crate::contact::ContactId;
use crate::context::Context;
use crate::e2ee;
use crate::events::EventType;
use crate::key::{
    self, load_self_secret_key, DcKey, DcSecretKey, SignedPublicKey, SignedSecretKey,
};
use crate::log::LogExt;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::param::Param;
use crate::pgp;
use crate::sql;
use crate::stock_str;
use crate::tools::{
    create_folder, delete_file, get_filesuffix_lc, open_file_std, read_file, time, write_file,
};
use transfer::{get_backup, BackupProvider};
use std::time::Duration;
use ::pgp::armor::BlockType;
use tokio::task;
use super::*;
use crate::pgp::{split_armored_data, HEADER_AUTOCRYPT, HEADER_SETUPCODE};
use crate::receive_imf::receive_imf;
use crate::stock_str::StockMessage;
use crate::test_utils::{alice_keypair, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn has_backup(_context: &Context, dir_name: &Path) -> Result<String> {
    let mut dir_iter = tokio::fs::read_dir(dir_name).await?;
    let mut newest_backup_name = "".to_string();
    let mut newest_backup_path: Option<PathBuf> = None;

    while let Ok(Some(dirent)) = dir_iter.next_entry().await {
        let path = dirent.path();
        let name = dirent.file_name();
        let name: String = name.to_string_lossy().into();
        if name.starts_with("delta-chat")
            && name.ends_with(".tar")
            && (newest_backup_name.is_empty() || name > newest_backup_name)
        {
            // We just use string comparison to determine which backup is newer.
            // This works fine because the filenames have the form `delta-chat-backup-2023-10-18-00-foo@example.com.tar`
            newest_backup_path = Some(path);
            newest_backup_name = name;
        }
    }

    match newest_backup_path {
        Some(path) => Ok(path.to_string_lossy().into_owned()),
        None => bail!("no backup found in {}", dir_name.display()),
    }
}
</function>
<translated function>
In your provided Rust function declaration, you have the type of result as Result<String>. So, I'm going to make our rust function return Result<Option<String>, Error> where returning Ok(None) will signify that no backup is found which is equivalent to returning NULL in the C function.

```rust
pub async fn has_backup(context: &Context, dir_name: &Path) -> Result<Option<String>, Error> {
    let prefix = DC_BAK_PREFIX; // This should track with actual defining
    let suffix = DC_BAK_SUFFIX; // This should track with actual defining

    let dir_name_string = dir_name.to_str().unwrap_or_default();

    let dir_entry = tokio::fs::read_dir(dir_name).await?;

    let mut ret: Option<String> = None;
    let mut ret_backup_time: i64 = 0;

    while let Ok(Some(dir)) = dir_entry.next_entry().await {
        let name = dir.file_name();
        let name_string = name.to_str().unwrap_or_default();

        if name_string.starts_with(prefix) && name_string.ends_with(suffix) {
            let curr_path = format!("{}/{}", dir_name_string, name_string);

            let conn = sql::Connection::open(OpenFlags::SQLITE_OPEN_READ_ONLY, &curr_path, &context.sql).await?;

            let curr_backup_time: i64 = match conn.get_config_int(context, "backup_time").await {
                Some(time) => time,
                None => continue,
            };

            if curr_backup_time > 0 && curr_backup_time > ret_backup_time {
                ret_backup_time = curr_backup_time;
                ret = Some(curr_path);
            }
        }
    }

    Ok(ret)
}
```
In the provided C code the database connection is closed right after we are done with it, but that is not needed in the Rust version as the connection will automatically be closed when it goes out of scope and is dropped by Rust's automatic memory management.

Please review if the utility methods like sql::Connection::open and conn.get_config_int are actually existing and you are comfortable with the error handling here.

Also know that this is using the tokio for its async run time and functionality around async file IO. If you are not currently using tokio as your async runtime this will need some modifications.</translated function>In your provided Rust function declaration, you have the type of result as Result<String>. So, I'm going to make our rust function return Result<Option<String>, Error> where returning Ok(None) will signify that no backup is found which is equivalent to returning NULL in the C function.

```rust
pub async fn has_backup(context: &Context, dir_name: &Path) -> Result<Option<String>, Error> {
    let prefix = DC_BAK_PREFIX; // This should track with actual defining
    let suffix = DC_BAK_SUFFIX; // This should track with actual defining

    let dir_name_string = dir_name.to_str().unwrap_or_default();

    let dir_entry = tokio::fs::read_dir(dir_name).await?;

    let mut ret: Option<String> = None;
    let mut ret_backup_time: i64 = 0;

    while let Ok(Some(dir)) = dir_entry.next_entry().await {
        let name = dir.file_name();
        let name_string = name.to_str().unwrap_or_default();

        if name_string.starts_with(prefix) && name_string.ends_with(suffix) {
            let curr_path = format!("{}/{}", dir_name_string, name_string);

            let conn = sql::Connection::open(OpenFlags::SQLITE_OPEN_READ_ONLY, &curr_path, &context.sql).await?;

            let curr_backup_time: i64 = match conn.get_config_int(context, "backup_time").await {
                Some(time) => time,
                None => continue,
            };

            if curr_backup_time > 0 && curr_backup_time > ret_backup_time {
                ret_backup_time = curr_backup_time;
                ret = Some(curr_path);
            }
        }
    }

    Ok(ret)
}
```
In the provided C code the database connection is closed right after we are done with it, but that is not needed in the Rust version as the connection will automatically be closed when it goes out of scope and is dropped by Rust's automatic memory management.

Please review if the utility methods like sql::Connection::open and conn.get_config_int are actually existing and you are comfortable with the error handling here.

Also know that this is using the tokio for its async run time and functionality around async file IO. If you are not currently using tokio as your async runtime this will need some modifications.
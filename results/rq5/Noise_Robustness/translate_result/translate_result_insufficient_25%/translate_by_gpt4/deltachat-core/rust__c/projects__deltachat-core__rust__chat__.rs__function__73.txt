<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
* using dc_set_chat_profile_image().
 * For normal chats, this is the image set by each remote user on their own
 * using dc_set_config(context, "selfavatar", image).
 *
 * @memberof dc_chat_t
 * @param chat The chat object.
 * @return Path and file if the profile image, if any.
 *     NULL otherwise.
 *     Must be free()'d after usage.
 */
char* dc_chat_get_profile_image(const dc_chat_t* chat)
{
	char*         image_rel = NULL;
	char*         image_abs = NULL;
	dc_array_t*   contacts = NULL;
	dc_contact_t* contact = NULL;

	if (chat==NULL || chat->magic!=DC_CHAT_MAGIC) {
		goto cleanup;
	}

	image_rel = dc_param_get(chat->param, DC_PARAM_PROFILE_IMAGE, NULL);
	if (image_rel && image_rel[0]) {
		image_abs = dc_get_abs_path(chat->context, image_rel);
	}
    else if (chat-id == DC_CHAT_ID_ARCHIVED_LINK) {
        image_rel = dc_get_archive_icon(chat->context);
        if (image_rel){
            image_abs = dc_get_abs_path(chat->context, image_rel); 
        }
    }
	else if(chat->type==DC_CHAT_TYPE_SINGLE) {
		contacts = dc_get_chat_contacts(chat->context, chat->id);
		if (contacts->count >= 1) {
			contact = dc_get_contact(chat->context, contacts->array[0]);
			image_abs = dc_contact_get_profile_image(contact);
		}
	}
    else if(chat->type==DC_CHAT_TYPE_BROADCAST) {
		image_rel = dc_get_broadcast_icon(chat->context);
        if (image_rel){
            image_abs = dc_get_abs_path(chat->context, image_rel); 
        }
	}

cleanup:
	free(image_rel);
	dc_array_unref(contacts);
	dc_contact_unref(contact);
	return image_abs;
}
</c function>
<rust function signature>
pub async fn get_profile_image(&self, context: &Context) -> Result<Option<PathBuf>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub(crate) async fn get_broadcast_icon(context: &Context) -> Result<String> {
    if let Some(icon) = context.sql.get_raw_config("icon-broadcast").await? {
        return Ok(icon);
    }

    let icon = include_bytes!("../assets/icon-broadcast.png");
    let blob = BlobObject::create(context, "icon-broadcast.png", icon).await?;
    let icon = blob.as_name().to_string();
    context
        .sql
        .set_raw_config("icon-broadcast", Some(&icon))
        .await?;
    Ok(icon)
}
pub fn new<S: AsRef<OsStr> + ?Sized>(s: &S) -> &Path {
        unsafe { &*(s.as_ref() as *const OsStr as *const Path) }
    }
pub struct Chat {
    /// Database ID.
    pub id: ChatId,

    /// Chat type, e.g. 1:1 chat, group chat, mailing list.
    pub typ: Chattype,

    /// Chat name.
    pub name: String,

    /// Whether the chat is archived or pinned.
    pub visibility: ChatVisibility,

    /// Group ID. For [`Chattype::Mailinglist`] -- mailing list address. Empty for 1:1 chats and
    /// ad-hoc groups.
    pub grpid: String,

    /// Whether the chat is blocked, unblocked or a contact request.
    pub blocked: Blocked,

    /// Additional chat parameters stored in the database.
    pub param: Params,

    /// If location streaming is enabled in the chat.
    is_sending_locations: bool,

    /// Duration of the chat being muted.
    pub mute_duration: MuteDuration,

    /// If the chat is protected (verified).
    pub(crate) protected: ProtectionStatus,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::cmp;
use std::collections::{HashMap, HashSet};
use std::fmt;
use std::path::{Path, PathBuf};
use std::str::FromStr;
use std::time::Duration;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use deltachat_contact_tools::{strip_rtlo_characters, ContactAddress};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use strum_macros::EnumIter;
use tokio::task;
use crate::aheader::EncryptPreference;
use crate::blob::BlobObject;
use crate::chatlist::Chatlist;
use crate::chatlist_events;
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{
    self, Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK,
    DC_CHAT_ID_LAST_SPECIAL, DC_CHAT_ID_TRASH, DC_RESEND_USER_AVATAR_DAYS,
};
use crate::contact::{self, Contact, ContactId, Origin};
use crate::context::Context;
use crate::debug_logging::maybe_set_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::Timer as EphemeralTimer;
use crate::events::EventType;
use crate::html::new_html_mimepart;
use crate::location;
use crate::log::LogExt;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::mimefactory::MimeFactory;
use crate::mimeparser::SystemMessage;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::receive_imf::ReceivedMsg;
use crate::securejoin::BobState;
use crate::smtp::send_msg_to_smtp;
use crate::sql;
use crate::stock_str;
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{
    buf_compress, create_id, create_outgoing_rfc724_mid, create_smeared_timestamp,
    create_smeared_timestamps, get_abs_path, gm2local_offset, improve_single_line_input,
    smeared_time, time, IsNoneOrEmpty, SystemTime,
};
use crate::webxdc::WEBXDC_SUFFIX;
use CantSendReason::*;
use super::*;
use crate::chatlist::get_archived_cnt;
use crate::constants::{DC_GCL_ARCHIVED_ONLY, DC_GCL_NO_SPECIALS};
use crate::message::delete_msgs;
use crate::receive_imf::receive_imf;
use crate::test_utils::{sync, TestContext, TestContextManager};
use strum::IntoEnumIterator;
use tokio::fs;

</rust function dependency libraries>

</message>
<function>
pub async fn get_profile_image(&self, context: &Context) -> Result<Option<PathBuf>> {
        if let Some(image_rel) = self.param.get(Param::ProfileImage) {
            if !image_rel.is_empty() {
                return Ok(Some(get_abs_path(context, Path::new(&image_rel))));
            }
        } else if self.id.is_archived_link() {
            if let Ok(image_rel) = get_archive_icon(context).await {
                return Ok(Some(get_abs_path(context, Path::new(&image_rel))));
            }
        } else if self.typ == Chattype::Single {
            let contacts = get_chat_contacts(context, self.id).await?;
            if let Some(contact_id) = contacts.first() {
                if let Ok(contact) = Contact::get_by_id(context, *contact_id).await {
                    return contact.get_profile_image(context).await;
                }
            }
        } else if self.typ == Chattype::Broadcast {
            if let Ok(image_rel) = get_broadcast_icon(context).await {
                return Ok(Some(get_abs_path(context, Path::new(&image_rel))));
            }
        }
        Ok(None)
    }
</function>
<translated function>
Here is the translated C function into Rust:

```rust
pub async fn get_profile_image(&self, context: &Context) -> Result<Option<PathBuf>> {
    let mut image_rel = None;
    let mut image_abs = None;
    let contacts = None;
    let contact = None;

    if self.id.is_unset() || self.typ == Chattype::Undefined {
        return Ok(None);
    }
    image_rel = self.param.get(Param::ProfileImage);

    if image_rel.is_some() && !image_rel.as_ref().unwrap().is_empty() {
        image_abs = get_abs_path(context, image_rel.unwrap().as_str());
    } 
    else if self.id == ChatId::new(DC_CHAT_ID_ARCHIVED_LINK) {
        let image_rel_temp = get_broadcast_icon(context).await?;
        if image_rel_temp {
            image_abs = get_abs_path(context, image_rel_temp.as_str()); 
        }
    } 
    else if self.typ == Chattype::Single {
        let contacts = context.get_chat_contacts(self.id).await?;
        if contacts.len() >= 1 {
            let contact = match Contact::get_by_id(context, contacts[0]).await {
                Ok(contact) => contact,
                Err(err) => {
                    warn!(context, "Could not load contact, skipping: {}", err);
                    continue;
                }
            };
            image_abs = contact.get_profile_image(context).await;
        }
    } 
    else if self.typ == Chattype::Broadcast {
        let image_rel_temp = get_broadcast_icon(context).await?;
        if image_rel_temp {
            image_abs = get_abs_path(context, image_rel_temp.as_str()); 
        }
    }
    Ok(image_abs)
}
```

Notice: This code may not work correctly, because it depends on other parts of your project. You may need to adjust it based on your context.</translated function>Here is the translated C function into Rust:

```rust
pub async fn get_profile_image(&self, context: &Context) -> Result<Option<PathBuf>> {
    let mut image_rel = None;
    let mut image_abs = None;
    let contacts = None;
    let contact = None;

    if self.id.is_unset() || self.typ == Chattype::Undefined {
        return Ok(None);
    }
    image_rel = self.param.get(Param::ProfileImage);

    if image_rel.is_some() && !image_rel.as_ref().unwrap().is_empty() {
        image_abs = get_abs_path(context, image_rel.unwrap().as_str());
    } 
    else if self.id == ChatId::new(DC_CHAT_ID_ARCHIVED_LINK) {
        let image_rel_temp = get_broadcast_icon(context).await?;
        if image_rel_temp {
            image_abs = get_abs_path(context, image_rel_temp.as_str()); 
        }
    } 
    else if self.typ == Chattype::Single {
        let contacts = context.get_chat_contacts(self.id).await?;
        if contacts.len() >= 1 {
            let contact = match Contact::get_by_id(context, contacts[0]).await {
                Ok(contact) => contact,
                Err(err) => {
                    warn!(context, "Could not load contact, skipping: {}", err);
                    continue;
                }
            };
            image_abs = contact.get_profile_image(context).await;
        }
    } 
    else if self.typ == Chattype::Broadcast {
        let image_rel_temp = get_broadcast_icon(context).await?;
        if image_rel_temp {
            image_abs = get_abs_path(context, image_rel_temp.as_str()); 
        }
    }
    Ok(image_abs)
}
```

Notice: This code may not work correctly, because it depends on other parts of your project. You may need to adjust it based on your context.
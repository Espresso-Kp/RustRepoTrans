<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int CLIENT_1(int sha,int date,byte[] CLIENT_ID,RAND rng,byte[] X,int pin,byte[] TOKEN,byte[] SEC,byte[] xID,byte[] xCID,byte[] PERMIT)
	{
		BIG r=new BIG(ROM.CURVE_Order);
		BIG x;
		if (rng!=null)
		{
			x=BIG.randomnum(r,rng);
			//if (ROM.AES_S>0)
			//{
			//	x.mod2m(2*ROM.AES_S);
			//}
			x.toBytes(X);
		}
		else
		{
			x=BIG.fromBytes(X);
		}
		ECP P,T,W;
		BIG px;
//		byte[] t=new byte[EFS];

		byte[] h=hashit(sha,0,CLIENT_ID,EFS);
		P=ECP.mapit(h);
	
		T=ECP.fromBytes(TOKEN);
		if (T.is_infinity()) return INVALID_POINT;

		pin%=MAXPIN;
		W=P.pinmul(pin,PBLEN);
		T.add(W);
		if (date!=0)
		{
			W=ECP.fromBytes(PERMIT);
			if (W.is_infinity()) return INVALID_POINT;
			T.add(W);
			h=hashit(sha,date,h,EFS);
			W=ECP.mapit(h);
			if (xID!=null)
			{
				P=PAIR192.G1mul(P,x);
				P.toBytes(xID,false);
				W=PAIR192.G1mul(W,x);
				P.add(W); //P.affine();
			}
			else
			{
				P.add(W); //P.affine();
				P=PAIR192.G1mul(P,x);
			}
			if (xCID!=null) P.toBytes(xCID,false);
		}
		else
		{
			if (xID!=null)
			{
				P=PAIR192.G1mul(P,x);
				P.toBytes(xID,false);
			}
		}

		//T.affine();
		T.toBytes(SEC,false);
		return 0;
	}
</java function>
<rust function signature>
pub fn client_1(
    sha: usize,
    date: usize,
    client_id: &[u8],
    rng: Option<&mut RAND>,
    x: &mut [u8],
    pin: usize,
    token: &[u8],
    sec: &mut [u8],
    xid: Option<&mut [u8]>,
    xcid: Option<&mut [u8]>,
    permit: Option<&[u8]>,
) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn hashit(sha: usize, n: usize, id: &[u8], w: &mut [u8]) -> bool {
    let mut r: [u8; 64] = [0; 64];
    let mut didit = false;
    if sha == SHA256 {
        let mut h = HASH256::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA384 {
        let mut h = HASH384::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA512 {
        let mut h = HASH512::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if !didit {
        return false;
    }

    let rm = big::MODBYTES as usize;

    if sha > rm {
        for i in 0..rm {
            w[i] = r[i]
        }
    } else {
        for i in 0..sha {
            w[i + rm - sha] = r[i]
        }
        for i in 0..(rm - sha) {
            w[i] = 0
        }
    }

    return true;
}
pub fn new_ints(a: &[Chunk]) -> Big {
        let mut s = Big::new();
        for i in 0..NLEN {
            s.w[i] = a[i]
        }
        s
    }
pub struct Big {
    pub w: [Chunk; NLEN],
}
pub struct RAND {
    ira: [u32; RAND_NK], /* random number...   */
    rndptr: usize,
    borrow: u32,
    pool_ptr: usize,
    pool: [u8; 32],
}
pub const PBLEN: i32 = 14;

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp4::ECP4;
use super::fp24::FP24;
use super::fp8::FP8;
use super::pair192;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn client_1(
    sha: usize,
    date: usize,
    client_id: &[u8],
    rng: Option<&mut RAND>,
    x: &mut [u8],
    pin: usize,
    token: &[u8],
    sec: &mut [u8],
    xid: Option<&mut [u8]>,
    xcid: Option<&mut [u8]>,
    permit: Option<&[u8]>,
) -> isize {
    let r = Big::new_ints(&rom::CURVE_ORDER);

    let mut sx: Big;

    if let Some(rd) = rng {
        sx = Big::randomnum(&r, rd);
        sx.to_bytes(x);
    } else {
        sx = Big::from_bytes(x);
    }

    const RM: usize = big::MODBYTES as usize;
    let mut h: [u8; RM] = [0; RM];

    hashit(sha, 0, &client_id, &mut h);
    let mut P = ECP::mapit(&h);

    let mut T = ECP::from_bytes(&token);
    if T.is_infinity() {
        return INVALID_POINT;
    }

    let mut W = P.pinmul((pin as i32) % MAXPIN, PBLEN);
    T.add(&mut W);
    if date != 0 {
        if let Some(rpermit) = permit {
            W = ECP::from_bytes(&rpermit);
        }
        if W.is_infinity() {
            return INVALID_POINT;
        }
        T.add(&mut W);
        let mut h2: [u8; RM] = [0; RM];
        hashit(sha, date, &h, &mut h2);
        W = ECP::mapit(&h2);
        if let Some(mut rxid) = xid {
            P = pair192::g1mul(&mut P, &mut sx);
            P.to_bytes(&mut rxid, false);
            W = pair192::g1mul(&mut W, &mut sx);
            P.add(&mut W);
        } else {
            P.add(&mut W);
            P = pair192::g1mul(&mut P, &mut sx);
        }
        if let Some(mut rxcid) = xcid {
            P.to_bytes(&mut rxcid, false)
        }
    } else {
        if let Some(mut rxid) = xid {
            P = pair192::g1mul(&mut P, &mut sx);
            P.to_bytes(&mut rxid, false);
        }
    }

    T.to_bytes(sec, false);
    return 0;
}
</function>
<translated function>
The translation to Rust would be:

```rust
pub fn client_1(
    sha: usize,
    date: usize,
    client_id: &[u8],
    rng: Option<&mut RAND>,
    x: &mut [u8],
    pin: usize,
    token: &[u8],
    sec: &mut [u8],
    xid: Option<&mut [u8]>,
    xcid: Option<&mut [u8]>,
    permit: Option<&[u8]>,
) -> isize {
    
    let r = Big::new_ints(&rom::CURVE_ORDER);
    let mut big_x;
    match rng {
        Some(rng_val) => {
            big_x = Big::randomnum(&r, rng_val as &mut RAND);
            // if rom::AES_S > 0 {
            //     big_x.mod2m(2 * rom::AES_S);
            // }
            x.copy_from_slice(&big_x.to_bytes());
        }
        None => {
            big_x = Big::frombytes(&x);
        }
    }
    
    let mut p;
    let mut t;
    let mut w;
    
    let mut h = [0u8; ecp::EFS];
    hashit(sha, 0, &client_id, &mut h);
    p = ECP::mapit(&h);

    t = ECP::frombytes(&token);
    if t.is_infinity() { return INVALID_POINT; }

    let pin = pin%MAXPIN;
    w = p.pinmul(pin as i32, PBLEN);
    t.add(&w);
    if date != 0 {
        match permit {
            Some(permit_val) => {
                w = ECP::frombytes(&permit_val);
                if w.is_infinity() { return INVALID_POINT; }
                t.add(&w);
                h = hashit(sha,date,h,EFS);
                w = ECP::mapit(&h);
                match xid {
                    Some(xid_val) => {
                        p = pair192::g1mul(&p, &big_x);
                        p.tobytes(xid_val, false);
                        w = pair192::g1mul(&w, &big_x);
                        p.add(&w);
                    }
                    None => {
                        p.add(&w);
                        p = pair192::g1mul(&p, &big_x);
                    }
                }
                if let Some(xcid_val) = xcid {
                    p.tobytes(xcid_val, false);
                }
            }
            None => {}
        }
    }
    else {
        if let Some(xid_val) = xid {
            p = pair192::g1mul(&p, &big_x);
            p.tobytes(xid_val, false);
        }
    }

    t.tobytes(sec, false);
    return 0;
}
```
This function translation keeps consistent signatures with the Java method by matching variable and parameter types, utilizes Rust Option for nullable parameters, and employs Rust pattern matching for null checks.</translated function>The translation to Rust would be:

```rust
pub fn client_1(
    sha: usize,
    date: usize,
    client_id: &[u8],
    rng: Option<&mut RAND>,
    x: &mut [u8],
    pin: usize,
    token: &[u8],
    sec: &mut [u8],
    xid: Option<&mut [u8]>,
    xcid: Option<&mut [u8]>,
    permit: Option<&[u8]>,
) -> isize {
    
    let r = Big::new_ints(&rom::CURVE_ORDER);
    let mut big_x;
    match rng {
        Some(rng_val) => {
            big_x = Big::randomnum(&r, rng_val as &mut RAND);
            // if rom::AES_S > 0 {
            //     big_x.mod2m(2 * rom::AES_S);
            // }
            x.copy_from_slice(&big_x.to_bytes());
        }
        None => {
            big_x = Big::frombytes(&x);
        }
    }
    
    let mut p;
    let mut t;
    let mut w;
    
    let mut h = [0u8; ecp::EFS];
    hashit(sha, 0, &client_id, &mut h);
    p = ECP::mapit(&h);

    t = ECP::frombytes(&token);
    if t.is_infinity() { return INVALID_POINT; }

    let pin = pin%MAXPIN;
    w = p.pinmul(pin as i32, PBLEN);
    t.add(&w);
    if date != 0 {
        match permit {
            Some(permit_val) => {
                w = ECP::frombytes(&permit_val);
                if w.is_infinity() { return INVALID_POINT; }
                t.add(&w);
                h = hashit(sha,date,h,EFS);
                w = ECP::mapit(&h);
                match xid {
                    Some(xid_val) => {
                        p = pair192::g1mul(&p, &big_x);
                        p.tobytes(xid_val, false);
                        w = pair192::g1mul(&w, &big_x);
                        p.add(&w);
                    }
                    None => {
                        p.add(&w);
                        p = pair192::g1mul(&p, &big_x);
                    }
                }
                if let Some(xcid_val) = xcid {
                    p.tobytes(xcid_val, false);
                }
            }
            None => {}
        }
    }
    else {
        if let Some(xid_val) = xid {
            p = pair192::g1mul(&p, &big_x);
            p.tobytes(xid_val, false);
        }
    }

    t.tobytes(sec, false);
    return 0;
}
```
This function translation keeps consistent signatures with the Java method by matching variable and parameter types, utilizes Rust Option for nullable parameters, and employs Rust pattern matching for null checks.
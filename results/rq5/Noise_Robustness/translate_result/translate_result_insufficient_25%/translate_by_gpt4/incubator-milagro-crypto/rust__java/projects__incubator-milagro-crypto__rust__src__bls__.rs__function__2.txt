<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int KEY_PAIR_GENERATE(RAND RNG,byte[] S,byte[] W)
	{
		BIG r,s;
		ECP G,WP;
		int res=0;
	//	byte[] T=new byte[EFS];

		G=ECP.generator();

		r=new BIG(ROM.CURVE_Order);

		if (RNG==null)
		{
			s=BIG.fromBytes(S);
			s.mod(r);
		}
		else
		{
			s=BIG.randomnum(r,RNG);
		}

		//if (ROM.AES_S>0)
		//{
		//	s.mod2m(2*ROM.AES_S);
		//}
		s.toBytes(S);

		WP=G.mul(s);
		WP.toBytes(W,false);  // To use point compression on public keys, change to true 

		return res;
	}
</java function>
<rust function signature>
pub fn key_pair_generate(mut rng: &mut RAND, s: &mut [u8], w: &mut [u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn new_ints(a: &[Chunk]) -> Big {
        let mut s = Big::new();
        for i in 0..NLEN {
            s.w[i] = a[i]
        }
        s
    }
pub const BLS_FAIL: isize = -1;

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use super::big;
use super::big::Big;
use super::ecp::ECP;
use super::ecp2::ECP2;
use super::pair;
use super::rom;
use crate::rand::RAND;
use crate::sha3::SHA3;
use crate::sha3::SHAKE256;
use std::str;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn key_pair_generate(mut rng: &mut RAND, s: &mut [u8], w: &mut [u8]) -> isize {
    let q = Big::new_ints(&rom::CURVE_ORDER);
    let g = ECP2::generator();
    let sc = Big::randomnum(&q, &mut rng);
    sc.to_bytes(s);
    pair::g2mul(&g, &sc).to_bytes(w);
    BLS_OK
}
</function>
<translated function>
Based on the information provided by you, here is the Java function translated to Rust:

<rust function>

```rust
pub fn key_pair_generate(mut rng: &mut RAND, s: &mut [u8], w: &mut [u8]) -> isize {
    let r = Big::new_ints(&rom::CURVE_ORDER);
    let g = ECP::generator();
    let mut s_big = Big::new();

    if rng.is_null() {
        s_big = Big::frombytes(s);
        s_big.rmod(&r);
    } else {
        s_big = Big::randomnum(&r, rng);
    }

    s_big.tobytes(s);

    let wp = g.mul(&s_big);
    wp.tobytes(w, false);
  
    0
}
```

</rust function>

This function does the following:

1. It generates a big integer from the curve order.
2. Grabs the elliptic curve generator point.
3. If the `rand` variable `rng` is null, it creates a big integer from the bytes in `s` and takes the modulus of this big integer with `r`. This means that `s` is converted to a big integer, and this big integer is then reduced modulo `r`.
4. If `rng` is not null, it creates a random big integer `s_big` that is less than `r`.
5. Convert `s_big` to bytes and store it in `s`.
6. It then multiplies the elliptic curve generator point `g` by `s_big` to get `wp`.
7. Convert `wp` to bytes and store it in `w`.
8. Finally, it returns 0, signifying success. If something went wrong, you might want to return an error code instead.</translated function>Based on the information provided by you, here is the Java function translated to Rust:

<rust function>

```rust
pub fn key_pair_generate(mut rng: &mut RAND, s: &mut [u8], w: &mut [u8]) -> isize {
    let r = Big::new_ints(&rom::CURVE_ORDER);
    let g = ECP::generator();
    let mut s_big = Big::new();

    if rng.is_null() {
        s_big = Big::frombytes(s);
        s_big.rmod(&r);
    } else {
        s_big = Big::randomnum(&r, rng);
    }

    s_big.tobytes(s);

    let wp = g.mul(&s_big);
    wp.tobytes(w, false);
  
    0
}
```

</rust function>

This function does the following:

1. It generates a big integer from the curve order.
2. Grabs the elliptic curve generator point.
3. If the `rand` variable `rng` is null, it creates a big integer from the bytes in `s` and takes the modulus of this big integer with `r`. This means that `s` is converted to a big integer, and this big integer is then reduced modulo `r`.
4. If `rng` is not null, it creates a random big integer `s_big` that is less than `r`.
5. Convert `s_big` to bytes and store it in `s`.
6. It then multiplies the elliptic curve generator point `g` by `s_big` to get `wp`.
7. Convert `wp` to bytes and store it in `w`.
8. Finally, it returns 0, signifying success. If something went wrong, you might want to return an error code instead.
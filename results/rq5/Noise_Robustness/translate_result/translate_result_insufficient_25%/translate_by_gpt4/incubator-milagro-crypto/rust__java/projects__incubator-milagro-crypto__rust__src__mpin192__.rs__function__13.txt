<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int GET_G1_MULTIPLE(RAND rng, int type,byte[] X,byte[] G,byte[] W)
	{
		BIG x;
		BIG r=new BIG(ROM.CURVE_Order);
		if (rng!=null)
		{
			x=BIG.randomnum(r,rng);
			//if (ROM.AES_S>0)
			//{
			//	x.mod2m(2*ROM.AES_S);
			//}
			x.toBytes(X);
		}
		else
		{
			x=BIG.fromBytes(X);
		}
		ECP P;
		if (type==0)
		{
			P=ECP.fromBytes(G);
			if (P.is_infinity()) return INVALID_POINT;
		}
		else
			P=ECP.mapit(G);

		PAIR192.G1mul(P,x).toBytes(W,false);
		return 0;
	}
</java function>
<rust function signature>
pub fn get_g1_multiple(
    rng: Option<&mut RAND>,
    typ: usize,
    x: &mut [u8],
    g: &[u8],
    w: &mut [u8],
) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn is_infinity(&self) -> bool {
        let xx = self.getpx();
        let zz = self.getpz();
        return xx.is_zilch() && zz.is_zilch();
    }
pub fn new_ints(a: &[Chunk]) -> Big {
        let mut s = Big::new();
        for i in 0..NLEN {
            s.w[i] = a[i]
        }
        s
    }
pub fn mapit(h: &[u8]) -> ECP {
        let q = Big::new_ints(&rom::MODULUS);
        let mut x = Big::from_bytes(h);
        x.rmod(&q);
        let mut P: ECP;

        loop {
            loop {
                if CURVETYPE != CurveType::Montgomery {
                    P = ECP::new_bigint(&x, 0);
                } else {
                    P = ECP::new_big(&x);
                }
                x.inc(1);
                x.norm();
                if !P.is_infinity() {
                    break;
                }
            }
            P.cfp();
            if !P.is_infinity() {
                break;
            }
        }

        return P;
    }
pub const INVALID_POINT: isize = -14;

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp4::ECP4;
use super::fp24::FP24;
use super::fp8::FP8;
use super::pair192;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn get_g1_multiple(
    rng: Option<&mut RAND>,
    typ: usize,
    x: &mut [u8],
    g: &[u8],
    w: &mut [u8],
) -> isize {
    let mut sx: Big;
    let r = Big::new_ints(&rom::CURVE_ORDER);

    if let Some(rd) = rng {
        sx = Big::randomnum(&r, rd);
        sx.to_bytes(x);
    } else {
        sx = Big::from_bytes(x);
    }
    let mut P: ECP;

    if typ == 0 {
        P = ECP::from_bytes(g);
        if P.is_infinity() {
            return INVALID_POINT;
        }
    } else {
        P = ECP::mapit(g)
    }

    pair192::g1mul(&mut P, &mut sx).to_bytes(w, false);
    return 0;
}
</function>
<translated function>
Here is your Java function translated to Rust:

```rust
use super::pair192;

pub fn get_g1_multiple(
    rng: Option<&mut RAND>,
    typ: usize,
    x: &mut [u8],
    g: &[u8],
    w: &mut [u8],
) -> isize {
    let r = Big::new_ints(&rom::CURVE_Order);
    let mut rng_val = rng.clone(); // To bypass move error
    let x_bigval = match rng_val {
        Some(rng) => {
            let mut x_val = Big::randomnum(&r, rng);
            x_val.toBytes(x);
            x_val
        }
        None => {
            Big::fromBytes(x)
        }
    };

    let mut p: ECP;
    if typ == 0 {
        p = ECP::fromBytes(g);
        if p.is_infinity() {
            return INVALID_POINT;
        }
    }
    else {
        p = ECP::mapit(g);
    }

    pair192::G1mul(&p, &x_bigval).toBytes(w, false);
    return 0;
}
```
Note that this translation assumes that all of the methods you're using on `big::Big` and `ecp::ECP` (like `randomnum`, `toBytes`, `fromBytes`, and `is_infinity`) are properly implemented in Rust. If they're not, you'll also need to translate those methods from Java to Rust.</translated function>Here is your Java function translated to Rust:

```rust
use super::pair192;

pub fn get_g1_multiple(
    rng: Option<&mut RAND>,
    typ: usize,
    x: &mut [u8],
    g: &[u8],
    w: &mut [u8],
) -> isize {
    let r = Big::new_ints(&rom::CURVE_Order);
    let mut rng_val = rng.clone(); // To bypass move error
    let x_bigval = match rng_val {
        Some(rng) => {
            let mut x_val = Big::randomnum(&r, rng);
            x_val.toBytes(x);
            x_val
        }
        None => {
            Big::fromBytes(x)
        }
    };

    let mut p: ECP;
    if typ == 0 {
        p = ECP::fromBytes(g);
        if p.is_infinity() {
            return INVALID_POINT;
        }
    }
    else {
        p = ECP::mapit(g);
    }

    pair192::G1mul(&p, &x_bigval).toBytes(w, false);
    return 0;
}
```
Note that this translation assumes that all of the methods you're using on `big::Big` and `ecp::ECP` (like `randomnum`, `toBytes`, `fromBytes`, and `is_infinity`) are properly implemented in Rust. If they're not, you'll also need to translate those methods from Java to Rust.
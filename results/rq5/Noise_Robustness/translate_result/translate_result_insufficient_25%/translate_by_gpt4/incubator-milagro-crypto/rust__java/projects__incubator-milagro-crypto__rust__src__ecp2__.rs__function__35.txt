<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static ECP2 mapit(byte[] h)
	{
		BIG q=new BIG(ROM.Modulus);
		BIG x=BIG.fromBytes(h);
		BIG one=new BIG(1);
		FP2 X;
		ECP2 Q;
		x.mod(q);
		while (true)
		{
			X=new FP2(one,x);
			Q=new ECP2(X);
			if (!Q.is_infinity()) break;
			x.inc(1); x.norm();
		}

		BIG Fra=new BIG(ROM.Fra);
		BIG Frb=new BIG(ROM.Frb);
		X=new FP2(Fra,Frb);

		if (ECP.SEXTIC_TWIST==ECP.M_TYPE)
		{
			X.inverse();
			X.norm();
		}

		x=new BIG(ROM.CURVE_Bnx);

/* Fast Hashing to G2 - Fuentes-Castaneda, Knapp and Rodriguez-Henriquez */

		if (ECP.CURVE_PAIRING_TYPE==ECP.BN)
		{
			ECP2 T,K;

			T=new ECP2(); T.copy(Q);
			T=T.mul(x); 
			
			if (ECP.SIGN_OF_X==ECP.NEGATIVEX)
			{
				T.neg();
			}	
			K=new ECP2(); K.copy(T);
			K.dbl(); K.add(T); //K.affine();

			K.frob(X);
			Q.frob(X); Q.frob(X); Q.frob(X);
			Q.add(T); Q.add(K);
			T.frob(X); T.frob(X);
			Q.add(T);

		}

/* Efficient hash maps to G2 on BLS curves - Budroni, Pintore */
/* Q -> x2Q -xQ -Q +F(xQ -Q) +F(F(2Q)) */

		if (ECP.CURVE_PAIRING_TYPE==ECP.BLS)
		{
		//	ECP2 xQ,x2Q;
		//	xQ=new ECP2();
		//	x2Q=new ECP2();

			ECP2 xQ=Q.mul(x);
			ECP2 x2Q=xQ.mul(x);

			if (ECP.SIGN_OF_X==ECP.NEGATIVEX)
			{
				xQ.neg();
			}	

			x2Q.sub(xQ);
			x2Q.sub(Q);

			xQ.sub(Q);
			xQ.frob(X);

			Q.dbl();
			Q.frob(X);
			Q.frob(X);

			Q.add(x2Q);
			Q.add(xQ);
		}
		Q.affine();
		return Q;
	}
</java function>
<rust function signature>
pub fn clear_cofactor(&mut self) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn neg(&mut self) {
        self.y.norm();
        self.y.neg();
        self.y.norm();
    }
pub fn new_bigs(c: Big, d: Big) -> FP2 {
        FP2 {
            a: FP::new_big(c),
            b: FP::new_big(d),
        }
    }
pub const CURVE_PAIRING_TYPE: CurvePairingType = CurvePairingType::Bn;
pub enum SexticTwist {
    Not,
    DType,
    MType,
}
pub const FRB: [Chunk; NLEN] = [
    0x82193F90D5922A,
    0x8B6DB2C08850C5,
    0x2F57B96AC8DC17,
    0x1ED1837503EAB2,
    0x9EBEE69,
];

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use super::big;
use super::big::Big;
use super::ecp;
use super::fp2::FP2;
use super::rom;
use crate::types::{CurvePairingType, SexticTwist, SignOfX};
use std::fmt;
use std::str::SplitWhitespace;

</rust function dependency libraries>

</message>
<function>
pub fn clear_cofactor(&mut self) {
        let mut X = FP2::new_bigs(Big::new_ints(&rom::FRA), Big::new_ints(&rom::FRB));
        if ecp::SEXTIC_TWIST == SexticTwist::MType {
            X.inverse();
            X.norm();
        }
        let x = Big::new_ints(&rom::CURVE_BNX);

        if ecp::CURVE_PAIRING_TYPE == CurvePairingType::Bn {
            let mut T = self.mul(&x);
            if ecp::SIGN_OF_X == SignOfX::NegativeX {
                T.neg();
            }
            let mut K = T.clone();
            K.dbl();
            K.add(&T);

            K.frob(&X);
            self.frob(&X);
            self.frob(&X);
            self.frob(&X);
            self.add(&T);
            self.add(&K);
            T.frob(&X);
            T.frob(&X);
            self.add(&T);
        }
        if ecp::CURVE_PAIRING_TYPE == CurvePairingType::Bls {
            let mut xQ = self.mul(&x);
            let mut x2Q = xQ.mul(&x);

            if ecp::SIGN_OF_X == SignOfX::NegativeX {
                xQ.neg();
            }
            x2Q.sub(&xQ);
            x2Q.sub(&self);

            xQ.sub(&self);
            xQ.frob(&X);

            self.dbl();
            self.frob(&X);
            self.frob(&X);

            self.add(&x2Q);
            self.add(&xQ);
        }

        self.affine();
    }
</function>
<translated function>
Here is the translation of the Java function to Rust:

```Rust
pub fn mapit(h: &[u8]) -> EcP2 {
    let q = Big::new_ints(&mut rom::MODULUS);
    let mut x = Big::frombytes(h);
    let one = Big::new_int(1);
    let mut X;
    let mut Q;
    let mut X2;
    x.rmod(&q);

    loop {
        X = FP2::new_bigs(one.clone(), x.clone());
        Q = ECP2::new_fp2(&X);

        if !Q.is_infinity() {
            break;
        }

        x.inc(1);
        x.norm();
    }
    
    let mut Fra = Big::new_ints(&mut rom::FRA);
    let mut Frb = Big::new_ints(&mut rom::FRB);
    X = FP2::new_bigs(FRA, FRB);

    if rom::SEXTIC_TWIST == SexticTwist::MType {
        X.inverse();
        X.norm();
    }

    x = Big::new_ints(&mut rom::CURVE_Bnx);

    if rom::CURVE_PAIRING_TYPE == CurvePairingType::Bn {
        let mut T;
        let mut K;
        
        T = Q.mul(&x);
        
        if rom::SIGN_OF_X == SignOfX::NEGATIVEX {
            T.neg();
        }
        
        K = T;
        K.dbl();
        K.add(&T);

        K.frob(&X);
        Q.frob(&X); 
        Q.frob(&X); 
        Q.frob(&X);
        Q.add(&T); 
        Q.add(&K);
        T.frob(&X); 
        T.frob(&X);
        Q.add(&T);
    }

    if rom::CURVE_PAIRING_TYPE == CurvePairingType::Bls {
        let mut xQ = Q.mul(&x);
        let mut x2Q = xQ.mul(&x);

        if rom::SIGN_OF_X == SignOfX::NEGATIVEX {
            xQ.neg();
        }   
        
        x2Q.sub(&xQ);
        x2Q.sub(&Q);

        xQ.sub(&Q);
        xQ.frob(&X);

        Q.dbl();
        Q.frob(&X);
        Q.frob(&X);

        Q.add(&x2Q);
        Q.add(&xQ);
    }

    Q.affine();
    Q
}
``` 

This Rust function does the same operations that the Java function does by using the same logic, only the syntax has changed to fit into Rust's design. Use this function to map a byte array (`h`) into a point (`Q`) in an elliptic curve (`EcP2`). The function linearly search for a non-infinity point x, then curve point is transformed and finally the point is mapped. </translated function>Here is the translation of the Java function to Rust:

```Rust
pub fn mapit(h: &[u8]) -> EcP2 {
    let q = Big::new_ints(&mut rom::MODULUS);
    let mut x = Big::frombytes(h);
    let one = Big::new_int(1);
    let mut X;
    let mut Q;
    let mut X2;
    x.rmod(&q);

    loop {
        X = FP2::new_bigs(one.clone(), x.clone());
        Q = ECP2::new_fp2(&X);

        if !Q.is_infinity() {
            break;
        }

        x.inc(1);
        x.norm();
    }
    
    let mut Fra = Big::new_ints(&mut rom::FRA);
    let mut Frb = Big::new_ints(&mut rom::FRB);
    X = FP2::new_bigs(FRA, FRB);

    if rom::SEXTIC_TWIST == SexticTwist::MType {
        X.inverse();
        X.norm();
    }

    x = Big::new_ints(&mut rom::CURVE_Bnx);

    if rom::CURVE_PAIRING_TYPE == CurvePairingType::Bn {
        let mut T;
        let mut K;
        
        T = Q.mul(&x);
        
        if rom::SIGN_OF_X == SignOfX::NEGATIVEX {
            T.neg();
        }
        
        K = T;
        K.dbl();
        K.add(&T);

        K.frob(&X);
        Q.frob(&X); 
        Q.frob(&X); 
        Q.frob(&X);
        Q.add(&T); 
        Q.add(&K);
        T.frob(&X); 
        T.frob(&X);
        Q.add(&T);
    }

    if rom::CURVE_PAIRING_TYPE == CurvePairingType::Bls {
        let mut xQ = Q.mul(&x);
        let mut x2Q = xQ.mul(&x);

        if rom::SIGN_OF_X == SignOfX::NEGATIVEX {
            xQ.neg();
        }   
        
        x2Q.sub(&xQ);
        x2Q.sub(&Q);

        xQ.sub(&Q);
        xQ.frob(&X);

        Q.dbl();
        Q.frob(&X);
        Q.frob(&X);

        Q.add(&x2Q);
        Q.add(&xQ);
    }

    Q.affine();
    Q
}
``` 

This Rust function does the same operations that the Java function does by using the same logic, only the syntax has changed to fit into Rust's design. Use this function to map a byte array (`h`) into a point (`Q`) in an elliptic curve (`EcP2`). The function linearly search for a non-infinity point x, then curve point is transformed and finally the point is mapped. 
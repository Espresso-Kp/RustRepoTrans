<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int GET_G1_MULTIPLE(RAND rng, int type,byte[] X,byte[] G,byte[] W)
	{
		BIG x;
		BIG r=new BIG(ROM.CURVE_Order);
		if (rng!=null)
		{
			x=BIG.randomnum(r,rng);
			//if (ROM.AES_S>0)
			//{
			//	x.mod2m(2*ROM.AES_S);
			//}
			x.toBytes(X);
		}
		else
		{
			x=BIG.fromBytes(X);
		}
		ECP P;
		if (type==0)
		{
			P=ECP.fromBytes(G);
			if (P.is_infinity()) return INVALID_POINT;
		}
		else
			P=ECP.mapit(G);

		PAIR.G1mul(P,x).toBytes(W,false);
		return 0;
	}
</java function>
<rust function signature>
pub fn get_g1_multiple(
    rng: Option<&mut RAND>,
    typ: usize,
    x: &mut [u8],
    g: &[u8],
    w: &mut [u8],
) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn randomnum(q: &Big, rng: &mut RAND) -> Big {
        let mut d = DBig::new();
        let mut j = 0;
        let mut r: u8 = 0;
        let t = q.clone();
        for _ in 0..2 * t.nbits() {
            if j == 0 {
                r = rng.getbyte();
            } else {
                r >>= 1
            }

            let b = (r as Chunk) & 1;
            d.shl(1);
            d.w[0] += b;
            j += 1;
            j &= 7;
        }
        let m = d.dmod(q);
        m
    }
pub fn from_bytes(b: &[u8]) -> Big {
        Big::from_byte_array(b, 0)
    }
pub fn g1mul(P: &ECP, e: &Big) -> ECP {
    if rom::USE_GLV {
        let mut R = P.clone();
        let mut Q = P.clone();
        Q.affine();
        let q = Big::new_ints(&rom::CURVE_ORDER);
        let mut cru = FP::new_big(Big::new_ints(&rom::CURVE_CRU));
        let mut u = glv(e);
        Q.mulx(&mut cru);

        let mut np = u[0].nbits();
        let mut t: Big = Big::modneg(&u[0], &q);
        let mut nn = t.nbits();
        if nn < np {
            u[0] = t.clone();
            R.neg();
        }

        np = u[1].nbits();
        t = Big::modneg(&u[1], &q);
        nn = t.nbits();
        if nn < np {
            u[1] = t;
            Q.neg();
        }
        u[0].norm();
        u[1].norm();
        R.mul2(&u[0], &Q, &u[1])
    } else {
        P.mul(e)
    }
}
pub const INVALID_POINT: isize = -14;

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp2::ECP2;
use super::fp12::FP12;
use super::fp4::FP4;
use super::pair;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn get_g1_multiple(
    rng: Option<&mut RAND>,
    typ: usize,
    x: &mut [u8],
    g: &[u8],
    w: &mut [u8],
) -> isize {
    let mut sx: Big;
    let r = Big::new_ints(&rom::CURVE_ORDER);

    if let Some(rd) = rng {
        sx = Big::randomnum(&r, rd);
        sx.to_bytes(x);
    } else {
        sx = Big::from_bytes(x);
    }
    let P: ECP;

    if typ == 0 {
        P = ECP::from_bytes(g);
        if P.is_infinity() {
            return INVALID_POINT;
        }
    } else {
        P = ECP::mapit(g)
    }

    pair::g1mul(&P, &mut sx).to_bytes(w, false);
    return 0;
}
</function>
<translated function>
Here is your translated function:

```rust
use super::big::Big;
use super::ecp::ECP;
use super::rand::RAND;
use super::rom::USE_GLV;
use super::*;

pub fn get_g1_multiple(
    rng: Option<&mut RAND>,
    typ: usize,
    x: &mut [u8],
    g: &[u8],
    w: &mut [u8],
) -> isize {
    let r = Big::new_ints(&rom::CURVE_ORDER);
    let mut x_big;
    if let Some(rng) = rng {
        x_big = randomnum(&r, rng);
        let t = x_big.to_byte_array();
        for i in 0..x.len() {
            x[i] = t[i];
        }
    } else {
        x_big = Big::from_byte_array(x, 0);
    }
    let mut p;
    if typ == 0 {
        p = ECP::frombytes(&g);
        if p.is_infinity() {
            return INVALID_POINT;
        }
    } else {
        p = ECP::mapit(&g);
    }
    let res = g1mul(&p, &x_big);
    let t = res.to_byte_array();
    for i in 0..w.len() {
        w[i] = t[i];
    }
    0
}
```</translated function>Here is your translated function:

```rust
use super::big::Big;
use super::ecp::ECP;
use super::rand::RAND;
use super::rom::USE_GLV;
use super::*;

pub fn get_g1_multiple(
    rng: Option<&mut RAND>,
    typ: usize,
    x: &mut [u8],
    g: &[u8],
    w: &mut [u8],
) -> isize {
    let r = Big::new_ints(&rom::CURVE_ORDER);
    let mut x_big;
    if let Some(rng) = rng {
        x_big = randomnum(&r, rng);
        let t = x_big.to_byte_array();
        for i in 0..x.len() {
            x[i] = t[i];
        }
    } else {
        x_big = Big::from_byte_array(x, 0);
    }
    let mut p;
    if typ == 0 {
        p = ECP::frombytes(&g);
        if p.is_infinity() {
            return INVALID_POINT;
        }
    } else {
        p = ECP::mapit(&g);
    }
    let res = g1mul(&p, &x_big);
    let t = res.to_byte_array();
    for i in 0..w.len() {
        w[i] = t[i];
    }
    0
}
```
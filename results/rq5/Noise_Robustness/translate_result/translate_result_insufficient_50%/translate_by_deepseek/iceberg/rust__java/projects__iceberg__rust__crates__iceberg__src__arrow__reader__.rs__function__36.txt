<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static Expression or(Expression left, Expression right) {
    Preconditions.checkNotNull(left, "Left expression cannot be null.");
    Preconditions.checkNotNull(right, "Right expression cannot be null.");
    if (left == alwaysTrue() || right == alwaysTrue()) {
      return alwaysTrue();
    } else if (left == alwaysFalse()) {
      return right;
    } else if (right == alwaysFalse()) {
      return left;
    }
    return new Or(left, right);
  }
</java function>
<rust function signature>
fn or(
        &mut self,
        mut lhs: Box<PredicateResult>,
        mut rhs: Box<PredicateResult>,
    ) -> Result<Box<PredicateResult>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
struct PredicateConverter<'a> {
    /// The Parquet schema descriptor.
    pub parquet_schema: &'a SchemaDescriptor,
    /// The map between field id and leaf column index in Parquet schema.
    pub column_map: &'a HashMap<i32, usize>,
    /// The required column indices in Parquet schema for the predicates.
    pub column_indices: &'a Vec<usize>,
}
type PredicateResult =
    dyn FnMut(RecordBatch) -> std::result::Result<BooleanArray, ArrowError> + Send + 'static;

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use crate::error::Result;
use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
use arrow_array::{ArrayRef, BooleanArray, RecordBatch};
use arrow_ord::cmp::{eq, gt, gt_eq, lt, lt_eq, neq};
use arrow_schema::{ArrowError, DataType, SchemaRef as ArrowSchemaRef};
use async_stream::try_stream;
use bytes::Bytes;
use fnv::FnvHashSet;
use futures::future::BoxFuture;
use futures::stream::StreamExt;
use futures::{try_join, TryFutureExt};
use parquet::arrow::arrow_reader::{ArrowPredicateFn, RowFilter};
use parquet::arrow::async_reader::{AsyncFileReader, MetadataLoader};
use parquet::arrow::{ParquetRecordBatchStreamBuilder, ProjectionMask, PARQUET_FIELD_ID_META_KEY};
use parquet::file::metadata::ParquetMetaData;
use parquet::schema::types::{SchemaDescriptor, Type as ParquetType};
use std::collections::{HashMap, HashSet};
use std::ops::Range;
use std::str::FromStr;
use std::sync::Arc;
use crate::arrow::{arrow_schema_to_schema, get_arrow_datum};
use crate::expr::visitors::bound_predicate_visitor::{visit, BoundPredicateVisitor};
use crate::expr::{BoundPredicate, BoundReference};
use crate::io::{FileIO, FileMetadata, FileRead};
use crate::scan::{ArrowRecordBatchStream, FileScanTaskStream};
use crate::spec::{Datum, SchemaRef};
use crate::{Error, ErrorKind};
use crate::arrow::reader::CollectFieldIdVisitor;
use crate::expr::visitors::bound_predicate_visitor::visit;
use crate::expr::{Bind, Reference};
use crate::spec::{NestedField, PrimitiveType, Schema, SchemaRef, Type};
use std::collections::HashSet;
use std::sync::Arc;

</rust function dependency libraries>

</message>
<function>
fn or(
        &mut self,
        mut lhs: Box<PredicateResult>,
        mut rhs: Box<PredicateResult>,
    ) -> Result<Box<PredicateResult>> {
        Ok(Box::new(move |batch| {
            let left = lhs(batch.clone())?;
            let right = rhs(batch)?;
            or(&left, &right)
        }))
    }
</function>
<translated function>
 ```rust
fn or(
    &mut self,
    mut lhs: Box<PredicateResult>,
    mut rhs: Box<PredicateResult>,
) -> Result<Box<PredicateResult>> {
    if lhs.is_null() || rhs.is_null() {
        return Err(ArrowError::General("PredicateResult is null".to_string()).into());
    }

    if lhs == always_true() || rhs == always_true() {
        return Ok(always_true());
    } else if lhs == always_false() {
        return Ok(rhs);
    } else if rhs == always_false() {
        return Ok(lhs);
    }

    Ok(Box::new(|batch: RecordBatch| {
        let lhs_result = lhs(batch.clone());
        let rhs_result = rhs(batch.clone());

        match (lhs_result, rhs_result) {
            (Ok(ref lhs_array), Ok(ref rhs_array)) if lhs_array.len() == rhs_array.len() => {
                let lhs_data = lhs_array.values();
                let rhs_data = rhs_array.values();
                let mut result_data = Vec::with_capacity(lhs_data.len());

                for i in 0..lhs_data.len() {
                    result_data.push(lhs_data[i] || rhs_data[i]);
                }

                Ok(BooleanArray::from(result_data))
            }
            _ => Err(ArrowError::General("Mismatched array lengths".to_string())),
        }
    }))
}

fn always_true() -> Box<PredicateResult> {
    Box::new(|_| Ok(BooleanArray::from(vec![true])))
}

fn always_false() -> Box<PredicateResult> {
    Box::new(|_| Ok(BooleanArray::from(vec![false])))
}
```</translated function> ```rust
fn or(
    &mut self,
    mut lhs: Box<PredicateResult>,
    mut rhs: Box<PredicateResult>,
) -> Result<Box<PredicateResult>> {
    if lhs.is_null() || rhs.is_null() {
        return Err(ArrowError::General("PredicateResult is null".to_string()).into());
    }

    if lhs == always_true() || rhs == always_true() {
        return Ok(always_true());
    } else if lhs == always_false() {
        return Ok(rhs);
    } else if rhs == always_false() {
        return Ok(lhs);
    }

    Ok(Box::new(|batch: RecordBatch| {
        let lhs_result = lhs(batch.clone());
        let rhs_result = rhs(batch.clone());

        match (lhs_result, rhs_result) {
            (Ok(ref lhs_array), Ok(ref rhs_array)) if lhs_array.len() == rhs_array.len() => {
                let lhs_data = lhs_array.values();
                let rhs_data = rhs_array.values();
                let mut result_data = Vec::with_capacity(lhs_data.len());

                for i in 0..lhs_data.len() {
                    result_data.push(lhs_data[i] || rhs_data[i]);
                }

                Ok(BooleanArray::from(result_data))
            }
            _ => Err(ArrowError::General("Mismatched array lengths".to_string())),
        }
    }))
}

fn always_true() -> Box<PredicateResult> {
    Box::new(|_| Ok(BooleanArray::from(vec![true])))
}

fn always_false() -> Box<PredicateResult> {
    Box::new(|_| Ok(BooleanArray::from(vec![false])))
}
```
<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public void renameTable(TableIdentifier from, TableIdentifier to) {
    // check new namespace exists
    if (!namespaceExists(to.namespace())) {
      throw new NoSuchNamespaceException(
          "Cannot rename %s to %s because namespace %s does not exist", from, to, to.namespace());
    }
    // keep metadata
    Table fromTable = null;
    String fromTableDbName =
        IcebergToGlueConverter.getDatabaseName(from, awsProperties.glueCatalogSkipNameValidation());
    String fromTableName =
        IcebergToGlueConverter.getTableName(from, awsProperties.glueCatalogSkipNameValidation());
    String toTableDbName =
        IcebergToGlueConverter.getDatabaseName(to, awsProperties.glueCatalogSkipNameValidation());
    String toTableName =
        IcebergToGlueConverter.getTableName(to, awsProperties.glueCatalogSkipNameValidation());
    try {
      GetTableResponse response =
          glue.getTable(
              GetTableRequest.builder()
                  .catalogId(awsProperties.glueCatalogId())
                  .databaseName(fromTableDbName)
                  .name(fromTableName)
                  .build());
      fromTable = response.table();
    } catch (EntityNotFoundException e) {
      throw new NoSuchTableException(
          e, "Cannot rename %s because the table does not exist in Glue", from);
    }

    // use the same Glue info to create the new table, pointing to the old metadata
    TableInput.Builder tableInputBuilder =
        TableInput.builder()
            .owner(fromTable.owner())
            .tableType(fromTable.tableType())
            .parameters(fromTable.parameters())
            .storageDescriptor(fromTable.storageDescriptor());

    glue.createTable(
        CreateTableRequest.builder()
            .catalogId(awsProperties.glueCatalogId())
            .databaseName(toTableDbName)
            .tableInput(tableInputBuilder.name(toTableName).build())
            .build());
    LOG.info("created rename destination table {}", to);

    try {
      dropTable(from, false);
    } catch (Exception e) {
      // rollback, delete renamed table
      LOG.error(
          "Fail to drop old table {} after renaming to {}, rollback to use the old table",
          from,
          to,
          e);
      glue.deleteTable(
          DeleteTableRequest.builder()
              .catalogId(awsProperties.glueCatalogId())
              .databaseName(toTableDbName)
              .name(toTableName)
              .build());
      throw e;
    }

    LOG.info("Successfully renamed table from {} to {}", from, to);
  }
</java function>
<rust function signature>
async fn rename_table(&self, src: &TableIdent, dest: &TableIdent) -> Result<()> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub(crate) fn validate_namespace(namespace: &NamespaceIdent) -> Result<String> {
    let name = namespace.as_ref();

    if name.len() != 1 {
        return Err(Error::new(
            ErrorKind::DataInvalid,
            format!(
                "Invalid database name: {:?}, hierarchical namespaces are not supported",
                namespace
            ),
        ));
    }

    let name = name[0].clone();

    if name.is_empty() {
        return Err(Error::new(
            ErrorKind::DataInvalid,
            "Invalid database, provided namespace is empty.",
        ));
    }

    Ok(name)
}
fn build(file_io_builder: FileIOBuilder) -> Result<Self> {
        let scheme_str = file_io_builder.scheme_str.unwrap_or("".to_string());
        let scheme = Self::parse_scheme(&scheme_str)?;
        let mut new_props = HashMap::default();
        new_props.insert("root".to_string(), DEFAULT_ROOT_PATH.to_string());

        match scheme {
            Scheme::Fs => Ok(Self::LocalFs {
                op: Operator::via_map(Scheme::Fs, new_props)?,
            }),
            Scheme::S3 => {
                for prop in file_io_builder.props {
                    if let Some(op_key) = S3_CONFIG_MAPPING.get(prop.0.as_str()) {
                        new_props.insert(op_key.to_string(), prop.1);
                    }
                }

                Ok(Self::S3 {
                    scheme_str,
                    props: new_props,
                })
            }
            _ => Err(Error::new(
                ErrorKind::FeatureUnsupported,
                format!("Constructing file io from scheme: {scheme} not supported now",),
            )),
        }
    }
pub fn new(kind: ErrorKind, message: impl Into<String>) -> Self {
        Self {
            kind,
            message: message.into(),
            context: Vec::default(),

            source: None,
            // `Backtrace::capture()` will check if backtrace has been enabled
            // internally. It's zero cost if backtrace is disabled.
            backtrace: Backtrace::capture(),
        }
    }
struct GlueClient(aws_sdk_glue::Client);
pub struct Error {
    kind: ErrorKind,
    message: String,

    context: Vec<(&'static str, String)>,

    source: Option<anyhow::Error>,
    backtrace: Backtrace,
}
pub enum ErrorKind {
    /// Iceberg don't know what happened here, and no actions other than
    /// just returning it back. For example, iceberg returns an internal
    /// service error.
    Unexpected,

    /// Iceberg data is invalid.
    ///
    /// This error is returned when we try to read a table from iceberg but
    /// failed to parse it's metadata or data file correctly.
    ///
    /// The table could be invalid or corrupted.
    DataInvalid,
    /// Iceberg feature is not supported.
    ///
    /// This error is returned when given iceberg feature is not supported.
    FeatureUnsupported,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use async_trait::async_trait;
use aws_sdk_glue::types::TableInput;
use iceberg::io::FileIO;
use iceberg::spec::{TableMetadata, TableMetadataBuilder};
use iceberg::table::Table;
use iceberg::{
    Catalog, Error, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
    TableIdent,
};
use std::{collections::HashMap, fmt::Debug};
use typed_builder::TypedBuilder;
use crate::error::{from_aws_build_error, from_aws_sdk_error};
use crate::utils::{
    convert_to_database, convert_to_glue_table, convert_to_namespace, create_metadata_location,
    create_sdk_config, get_default_table_location, get_metadata_location, validate_namespace,
};
use crate::with_catalog_id;

</rust function dependency libraries>

</message>
<function>
async fn rename_table(&self, src: &TableIdent, dest: &TableIdent) -> Result<()> {
        let src_db_name = validate_namespace(src.namespace())?;
        let dest_db_name = validate_namespace(dest.namespace())?;

        let src_table_name = src.name();
        let dest_table_name = dest.name();

        let builder = self
            .client
            .0
            .get_table()
            .database_name(&src_db_name)
            .name(src_table_name);
        let builder = with_catalog_id!(builder, self.config);

        let glue_table_output = builder.send().await.map_err(from_aws_sdk_error)?;

        match glue_table_output.table() {
            None => Err(Error::new(
                ErrorKind::Unexpected,
                format!(
                    "'Table' object for database: {} and table: {} does not exist",
                    src_db_name, src_table_name
                ),
            )),
            Some(table) => {
                let rename_table_input = TableInput::builder()
                    .name(dest_table_name)
                    .set_parameters(table.parameters.clone())
                    .set_storage_descriptor(table.storage_descriptor.clone())
                    .set_table_type(table.table_type.clone())
                    .set_description(table.description.clone())
                    .build()
                    .map_err(from_aws_build_error)?;

                let builder = self
                    .client
                    .0
                    .create_table()
                    .database_name(&dest_db_name)
                    .table_input(rename_table_input);
                let builder = with_catalog_id!(builder, self.config);

                builder.send().await.map_err(from_aws_sdk_error)?;

                let drop_src_table_result = self.drop_table(src).await;

                match drop_src_table_result {
                    Ok(_) => Ok(()),
                    Err(_) => {
                        let err_msg_src_table = format!(
                            "Failed to drop old table {}.{}.",
                            src_db_name, src_table_name
                        );

                        let drop_dest_table_result = self.drop_table(dest).await;

                        match drop_dest_table_result {
                            Ok(_) => Err(Error::new(
                                ErrorKind::Unexpected,
                                format!(
                                    "{} Rolled back table creation for {}.{}.",
                                    err_msg_src_table, dest_db_name, dest_table_name
                                ),
                            )),
                            Err(_) => Err(Error::new(
                                ErrorKind::Unexpected,
                                format!(
                                    "{} Failed to roll back table creation for {}.{}. Please clean up manually.",
                                    err_msg_src_table, dest_db_name, dest_table_name
                                ),
                            )),
                        }
                    }
                }
            }
        }
    }
</function>
<translated function>
 ```rust
async fn rename_table(&self, src: &TableIdent, dest: &TableIdent) -> Result<()> {
    // Check if the new namespace exists
    validate_namespace(&dest.namespace)?;

    let from_table_db_name = convert_to_database(&src);
    let from_table_name = src.table_name.clone();
    let to_table_db_name = convert_to_database(&dest);
    let to_table_name = dest.table_name.clone();

    // Get the table from Glue
    let glue_client = aws_sdk_glue::Client::new(create_sdk_config());
    let get_table_response = glue_client
        .get_table()
        .catalog_id(self.aws_properties.glue_catalog_id.clone())
        .database_name(from_table_db_name.clone())
        .name(from_table_name.clone())
        .send()
        .await
        .map_err(|e| {
            Error::new(
                ErrorKind::Unexpected,
                format!(
                    "Cannot rename {} to {} because namespace {} does not exist",
                    src, dest, dest.namespace
                ),
            )
        })?;

    let from_table = get_table_response.table().ok_or_else(|| {
        Error::new(
            ErrorKind::Unexpected,
            format!("Cannot rename {} because the table does not exist in Glue", src),
        )
    })?;

    // Create the new table with the same Glue info
    let table_input_builder = TableInput::builder()
        .owner(from_table.owner().unwrap_or_default())
        .table_type(from_table.table_type().unwrap_or_default())
        .parameters(from_table.parameters().unwrap_or_default())
        .storage_descriptor(from_table.storage_descriptor().unwrap_or_default());

    glue_client
        .create_table()
        .catalog_id(self.aws_properties.glue_catalog_id.clone())
        .database_name(to_table_db_name.clone())
        .table_input(table_input_builder.name(to_table_name.clone()).build())
        .send()
        .await
        .map_err(|e| {
            Error::new(
                ErrorKind::Unexpected,
                format!("Failed to create new table for renaming: {}", e),
            )
        })?;

    // Drop the old table
    self.drop_table(src, false).await?;

    Ok(())
}
```</translated function> ```rust
async fn rename_table(&self, src: &TableIdent, dest: &TableIdent) -> Result<()> {
    // Check if the new namespace exists
    validate_namespace(&dest.namespace)?;

    let from_table_db_name = convert_to_database(&src);
    let from_table_name = src.table_name.clone();
    let to_table_db_name = convert_to_database(&dest);
    let to_table_name = dest.table_name.clone();

    // Get the table from Glue
    let glue_client = aws_sdk_glue::Client::new(create_sdk_config());
    let get_table_response = glue_client
        .get_table()
        .catalog_id(self.aws_properties.glue_catalog_id.clone())
        .database_name(from_table_db_name.clone())
        .name(from_table_name.clone())
        .send()
        .await
        .map_err(|e| {
            Error::new(
                ErrorKind::Unexpected,
                format!(
                    "Cannot rename {} to {} because namespace {} does not exist",
                    src, dest, dest.namespace
                ),
            )
        })?;

    let from_table = get_table_response.table().ok_or_else(|| {
        Error::new(
            ErrorKind::Unexpected,
            format!("Cannot rename {} because the table does not exist in Glue", src),
        )
    })?;

    // Create the new table with the same Glue info
    let table_input_builder = TableInput::builder()
        .owner(from_table.owner().unwrap_or_default())
        .table_type(from_table.table_type().unwrap_or_default())
        .parameters(from_table.parameters().unwrap_or_default())
        .storage_descriptor(from_table.storage_descriptor().unwrap_or_default());

    glue_client
        .create_table()
        .catalog_id(self.aws_properties.glue_catalog_id.clone())
        .database_name(to_table_db_name.clone())
        .table_input(table_input_builder.name(to_table_name.clone()).build())
        .send()
        .await
        .map_err(|e| {
            Error::new(
                ErrorKind::Unexpected,
                format!("Failed to create new table for renaming: {}", e),
            )
        })?;

    // Drop the old table
    self.drop_table(src, false).await?;

    Ok(())
}
```
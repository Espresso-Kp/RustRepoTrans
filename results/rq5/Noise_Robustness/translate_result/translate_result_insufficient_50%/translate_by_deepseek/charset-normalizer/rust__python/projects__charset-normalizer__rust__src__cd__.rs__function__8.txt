<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def filter_alt_coherence_matches(results: CoherenceMatches) -> CoherenceMatches:
    """
    We shall NOT return "English" in CoherenceMatches because it is an alternative
    of "English". This function only keeps the best match and remove the em-dash in it.
    """
    index_results: Dict[str, List[float]] = dict()

    for result in results:
        language, ratio = result
        no_em_name: str = language.replace("", "")

        if no_em_name not in index_results:
            index_results[no_em_name] = []

        index_results[no_em_name].append(ratio)

    if any(len(index_results[e]) > 1 for e in index_results):
        filtered_results: CoherenceMatches = []

        for language in index_results:
            filtered_results.append((language, max(index_results[language])))

        return filtered_results

    return results
</python function>
<rust function signature>
pub(crate) fn filter_alt_coherence_matches(results: &CoherenceMatches) -> CoherenceMatches 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct CoherenceMatch {
    pub language: &'static Language,
    pub score: f32,
}
pub enum Language {
    English,
    German,
    French,
    Dutch,
    Italian,
    Polish,
    Spanish,
    Russian,
    Japanese,
    Portuguese,
    Swedish,
    Chinese,
    Ukrainian,
    Norwegian,
    Finnish,
    Vietnamese,
    Czech,
    Hungarian,
    Korean,
    Indonesian,
    Turkish,
    Romanian,
    Farsi,
    Arabic,
    Danish,
    Serbian,
    Lithuanian,
    Slovene,
    Slovak,
    Hebrew,
    Bulgarian,
    Croatian,
    Hindi,
    Estonian,
    Thai,
    Greek,
    Tamil,
    Kazakh,
    Unknown,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use crate::assets::{ENCODING_TO_LANGUAGE, LANGUAGES, LANGUAGE_SUPPORTED_COUNT};
use crate::consts::TOO_SMALL_SEQUENCE;
use crate::entity::{CoherenceMatch, CoherenceMatches, Language};
use crate::utils::{
    get_language_data, is_accentuated, is_multi_byte_encoding, is_suspiciously_successive_range,
    is_unicode_range_secondary, unicode_range,
};
use ahash::{HashMap, HashMapExt, HashSet};
use cached::proc_macro::cached;
use counter::Counter;
use encoding::label::encoding_from_whatwg_label;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use strsim::jaro;

</rust function dependency libraries>

</message>
<function>
pub(crate) fn filter_alt_coherence_matches(results: &CoherenceMatches) -> CoherenceMatches {
    let mut index: HashMap<&Language, f32> = HashMap::with_capacity(results.len());
    for result in results {
        let score = index.entry(result.language).or_default();
        *score = result.score.max(*score);
    }
    index
        .into_iter()
        .map(|(language, score)| CoherenceMatch { language, score })
        .collect()
}
</function>
<translated function>
 ```rust
use crate::assets::{ENCODING_TO_LANGUAGE, LANGUAGES, LANGUAGE_SUPPORTED_COUNT};
use crate::consts::TOO_SMALL_SEQUENCE;
use crate::entity::{CoherenceMatch, CoherenceMatches, Language};
use crate::utils::{
    get_language_data, is_accentuated, is_multi_byte_encoding, is_suspiciously_successive_range,
    is_unicode_range_secondary, unicode_range,
};
use ahash::{HashMap, HashMapExt, HashSet};
use cached::proc_macro::cached;
use counter::Counter;
use encoding::label::encoding_from_whatwg_label;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use strsim::jaro;

pub(crate) fn filter_alt_coherence_matches(results: &CoherenceMatches) -> CoherenceMatches {
    let mut index_results: HashMap<Language, Vec<f32>> = HashMap::new();

    for result in results {
        let CoherenceMatch { language, score } = result;
        let no_em_name = language.replace("", "");

        if !index_results.contains_key(language) {
            index_results.insert(*language, Vec::new());
        }

        if let Some(entry) = index_results.get_mut(language) {
            entry.push(*score);
        }
    }

    let mut filtered_results: CoherenceMatches = Vec::new();

    for (language, scores) in index_results {
        if scores.len() > 1 {
            filtered_results.push(CoherenceMatch {
                language: language,
                score: *scores.iter().max_by_key(|&&s| OrderedFloat(s)).unwrap(),
            });
        } else {
            filtered_results.push(CoherenceMatch {
                language: language,
                score: *scores[0],
            });
        }
    }

    if filtered_results.len() < results.len() {
        filtered_results
    } else {
        results.clone()
    }
}
```</translated function> ```rust
use crate::assets::{ENCODING_TO_LANGUAGE, LANGUAGES, LANGUAGE_SUPPORTED_COUNT};
use crate::consts::TOO_SMALL_SEQUENCE;
use crate::entity::{CoherenceMatch, CoherenceMatches, Language};
use crate::utils::{
    get_language_data, is_accentuated, is_multi_byte_encoding, is_suspiciously_successive_range,
    is_unicode_range_secondary, unicode_range,
};
use ahash::{HashMap, HashMapExt, HashSet};
use cached::proc_macro::cached;
use counter::Counter;
use encoding::label::encoding_from_whatwg_label;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use strsim::jaro;

pub(crate) fn filter_alt_coherence_matches(results: &CoherenceMatches) -> CoherenceMatches {
    let mut index_results: HashMap<Language, Vec<f32>> = HashMap::new();

    for result in results {
        let CoherenceMatch { language, score } = result;
        let no_em_name = language.replace("", "");

        if !index_results.contains_key(language) {
            index_results.insert(*language, Vec::new());
        }

        if let Some(entry) = index_results.get_mut(language) {
            entry.push(*score);
        }
    }

    let mut filtered_results: CoherenceMatches = Vec::new();

    for (language, scores) in index_results {
        if scores.len() > 1 {
            filtered_results.push(CoherenceMatch {
                language: language,
                score: *scores.iter().max_by_key(|&&s| OrderedFloat(s)).unwrap(),
            });
        } else {
            filtered_results.push(CoherenceMatch {
                language: language,
                score: *scores[0],
            });
        }
    }

    if filtered_results.len() < results.len() {
        filtered_results
    } else {
        results.clone()
    }
}
```
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def __lt__(self, other: object) -> bool:
        """
        Implemented to make sorted available upon CharsetMatches items.
        """
        if not isinstance(other, CharsetMatch):
            raise ValueError

        chaos_difference: float = abs(self.chaos - other.chaos)
        coherence_difference: float = abs(self.coherence - other.coherence)

        # Below 1% difference --> Use Coherence
        if chaos_difference < 0.01 and coherence_difference > 0.02:
            return self.coherence > other.coherence
        elif chaos_difference < 0.01 and coherence_difference <= 0.02:
            # When having a difficult decision, use the result that decoded as many multi-byte as possible.
            # preserve RAM usage!
            if len(self._payload) >= TOO_BIG_SEQUENCE:
                return self.chaos < other.chaos
            return self.multi_byte_usage > other.multi_byte_usage

        return self.chaos < other.chaos
</python function>
<rust function signature>
fn partial_cmp(&self, other: &Self) -> Option<Ordering> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn coherence(&self) -> f32 {
        self.coherence_matches
            .first()
            .map(|lang| lang.score)
            .unwrap_or_default()
    }
pub struct CharsetMatch {
    payload: Vec<u8>,
    encoding: String,

    mean_mess_ratio: f32,
    coherence_matches: CoherenceMatches,

    has_sig_or_bom: bool,

    submatch: Vec<CharsetMatch>,
    decoded_payload: Option<String>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use crate::cd::{encoding_languages, mb_encoding_languages};
use crate::consts::{IANA_SUPPORTED_ALIASES, TOO_BIG_SEQUENCE};
use crate::utils::{decode, iana_name, is_multi_byte_encoding, range_scan};
use clap::Parser;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use serde::Serialize;
use std::cmp::Ordering;
use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::hash::Hash;
use std::ops::Index;
use std::path::PathBuf;
use std::time::Duration;

</rust function dependency libraries>

</message>
<function>
fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        let mess_difference = (self.mean_mess_ratio - other.mean_mess_ratio).abs();
        let coherence_a = self.coherence();
        let coherence_b = other.coherence();
        let coherence_difference = (coherence_a - coherence_b).abs();

        // Below 1% difference --> Use Coherence
        if mess_difference < 0.01 {
            if coherence_difference > 0.02 {
                return coherence_b.partial_cmp(&coherence_a);
            }
            let multibyte_usage_a = self.multi_byte_usage();
            let multibyte_usage_b = other.multi_byte_usage();
            let multibyte_usage_delta = (multibyte_usage_a - multibyte_usage_b).abs();
            if multibyte_usage_delta > f32::EPSILON {
                return multibyte_usage_b.partial_cmp(&multibyte_usage_a);
            }
        }
        self.mean_mess_ratio.partial_cmp(&other.mean_mess_ratio)
    }
</function>
<translated function>
 ```rust
fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
    if !other.is_charset_match() {
        panic!("Other is not a CharsetMatch");
    }

    let chaos_difference = (self.chaos - other.chaos).abs();
    let coherence_difference = (self.coherence() - other.coherence()).abs();

    if chaos_difference < 0.01 && coherence_difference > 0.02 {
        return Some(self.coherence().partial_cmp(&other.coherence()).unwrap());
    } else if chaos_difference < 0.01 && coherence_difference <= 0.02 {
        if self.payload.len() >= TOO_BIG_SEQUENCE {
            return Some(self.chaos.partial_cmp(&other.chaos).unwrap());
        }
        return Some(self.multi_byte_usage.partial_cmp(&other.multi_byte_usage).unwrap());
    }

    Some(self.chaos.partial_cmp(&other.chaos).unwrap())
}
```</translated function> ```rust
fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
    if !other.is_charset_match() {
        panic!("Other is not a CharsetMatch");
    }

    let chaos_difference = (self.chaos - other.chaos).abs();
    let coherence_difference = (self.coherence() - other.coherence()).abs();

    if chaos_difference < 0.01 && coherence_difference > 0.02 {
        return Some(self.coherence().partial_cmp(&other.coherence()).unwrap());
    } else if chaos_difference < 0.01 && coherence_difference <= 0.02 {
        if self.payload.len() >= TOO_BIG_SEQUENCE {
            return Some(self.chaos.partial_cmp(&other.chaos).unwrap());
        }
        return Some(self.multi_byte_usage.partial_cmp(&other.multi_byte_usage).unwrap());
    }

    Some(self.chaos.partial_cmp(&other.chaos).unwrap())
}
```
<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int GET_CLIENT_PERMIT(int sha,int date,byte[] S,byte[] CID,byte[] CTT)
	{
		byte[] h=hashit(sha,date,CID,EFS);
		ECP P=ECP.mapit(h);

		BIG s=BIG.fromBytes(S);
		ECP OP=PAIR256.G1mul(P,s);

		OP.toBytes(CTT,false);
		return 0;
	}
</java function>
<rust function signature>
pub fn get_client_permit(sha: usize, date: usize, s: &[u8], cid: &[u8], ctt: &mut [u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn hashit(sha: usize, n: usize, id: &[u8], w: &mut [u8]) -> bool {
    let mut r: [u8; 64] = [0; 64];
    let mut didit = false;
    if sha == SHA256 {
        let mut h = HASH256::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA384 {
        let mut h = HASH384::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA512 {
        let mut h = HASH512::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if !didit {
        return false;
    }

    let rm = big::MODBYTES as usize;

    if sha > rm {
        for i in 0..rm {
            w[i] = r[i]
        }
    } else {
        for i in 0..sha {
            w[i + rm - sha] = r[i]
        }
        for i in 0..(rm - sha) {
            w[i] = 0
        }
    }

    return true;
}
pub fn mapit(h: &[u8]) -> ECP {
        let q = Big::new_ints(&rom::MODULUS);
        let mut x = Big::from_bytes(h);
        x.rmod(&q);
        let mut P: ECP;

        loop {
            loop {
                if CURVETYPE != CurveType::Montgomery {
                    P = ECP::new_bigint(&x, 0);
                } else {
                    P = ECP::new_big(&x);
                }
                x.inc(1);
                x.norm();
                if !P.is_infinity() {
                    break;
                }
            }
            P.cfp();
            if !P.is_infinity() {
                break;
            }
        }

        return P;
    }
pub fn from_bytes(b: &[u8]) -> Big {
        Big::from_byte_array(b, 0)
    }
pub const MODBYTES: usize = 32;

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp8::ECP8;
use super::fp16::FP16;
use super::fp48::FP48;
use super::pair256;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn get_client_permit(sha: usize, date: usize, s: &[u8], cid: &[u8], ctt: &mut [u8]) -> isize {
    const RM: usize = big::MODBYTES as usize;
    let mut h: [u8; RM] = [0; RM];
    hashit(sha, date, cid, &mut h);
    let mut P = ECP::mapit(&h);

    let mut sc = Big::from_bytes(s);
    pair256::g1mul(&mut P, &mut sc).to_bytes(ctt, false);
    return 0;
}
</function>
<translated function>
 ```rust
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp8::ECP8;
use super::fp16::FP16;
use super::fp48::FP48;
use super::pair256;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use std::time::SystemTime;
use std::time::UNIX_EPOCH;

pub fn get_client_permit(sha: usize, date: usize, s: &[u8], cid: &[u8], ctt: &mut [u8]) -> isize {
    let h = hashit(sha, date, cid, ctt);
    let p = mapit(&h);

    let s = from_bytes(s);
    let op = PAIR256::g1mul(&p, &s);

    op.to_bytes(ctt, false);
    0
}

fn hashit(sha: usize, date: usize, id: &[u8], w: &mut [u8]) -> Vec<u8> {
    let mut r: [u8; 64] = [0; 64];
    let mut didit = false;
    if sha == SHA256 {
        let mut h = HASH256::new();
        if date > 0 {
            h.process_num(date as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA384 {
        let mut h = HASH384::new();
        if date > 0 {
            h.process_num(date as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA512 {
        let mut h = HASH512::new();
        if date > 0 {
            h.process_num(date as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if !didit {
        return vec![];
    }

    let rm = big::MODBYTES as usize;

    if sha > rm {
        for i in 0..rm {
            w[i] = r[i]
        }
    } else {
        for i in 0..sha {
            w[i + rm - sha] = r[i]
        }
        for i in 0..(rm - sha) {
            w[i] = 0
        }
    }

    r.to_vec()
}

pub fn mapit(h: &[u8]) -> ECP {
    let q = Big::new_ints(&rom::MODULUS);
    let mut x = Big::from_bytes(h);
    x.rmod(&q);
    let mut p: ECP;

    loop {
        loop {
            if CURVETYPE != CurveType::Montgomery {
                p = ECP::new_bigint(&x, 0);
            } else {
                p = ECP::new_big(&x);
            }
            x.inc(1);
            x.norm();
            if !p.is_infinity() {
                break;
            }
        }
        p.cfp();
        if !p.is_infinity() {
            break;
        }
    }

    p
}

pub fn from_bytes(b: &[u8]) -> Big {
    Big::from_byte_array(b, 0)
}

pub const MODBYTES: usize = 32;
```</translated function> ```rust
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp8::ECP8;
use super::fp16::FP16;
use super::fp48::FP48;
use super::pair256;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use std::time::SystemTime;
use std::time::UNIX_EPOCH;

pub fn get_client_permit(sha: usize, date: usize, s: &[u8], cid: &[u8], ctt: &mut [u8]) -> isize {
    let h = hashit(sha, date, cid, ctt);
    let p = mapit(&h);

    let s = from_bytes(s);
    let op = PAIR256::g1mul(&p, &s);

    op.to_bytes(ctt, false);
    0
}

fn hashit(sha: usize, date: usize, id: &[u8], w: &mut [u8]) -> Vec<u8> {
    let mut r: [u8; 64] = [0; 64];
    let mut didit = false;
    if sha == SHA256 {
        let mut h = HASH256::new();
        if date > 0 {
            h.process_num(date as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA384 {
        let mut h = HASH384::new();
        if date > 0 {
            h.process_num(date as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA512 {
        let mut h = HASH512::new();
        if date > 0 {
            h.process_num(date as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if !didit {
        return vec![];
    }

    let rm = big::MODBYTES as usize;

    if sha > rm {
        for i in 0..rm {
            w[i] = r[i]
        }
    } else {
        for i in 0..sha {
            w[i + rm - sha] = r[i]
        }
        for i in 0..(rm - sha) {
            w[i] = 0
        }
    }

    r.to_vec()
}

pub fn mapit(h: &[u8]) -> ECP {
    let q = Big::new_ints(&rom::MODULUS);
    let mut x = Big::from_bytes(h);
    x.rmod(&q);
    let mut p: ECP;

    loop {
        loop {
            if CURVETYPE != CurveType::Montgomery {
                p = ECP::new_bigint(&x, 0);
            } else {
                p = ECP::new_big(&x);
            }
            x.inc(1);
            x.norm();
            if !p.is_infinity() {
                break;
            }
        }
        p.cfp();
        if !p.is_infinity() {
            break;
        }
    }

    p
}

pub fn from_bytes(b: &[u8]) -> Big {
    Big::from_byte_array(b, 0)
}

pub const MODBYTES: usize = 32;
```
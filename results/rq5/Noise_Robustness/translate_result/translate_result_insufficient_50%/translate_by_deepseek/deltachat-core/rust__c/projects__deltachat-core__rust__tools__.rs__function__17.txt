<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
int dc_get_filemeta(const void* buf_start, size_t buf_bytes, uint32_t* ret_width, uint32_t *ret_height)
{
	/* Strategy:
	reading GIF dimensions requires the first 10 bytes of the file
	reading PNG dimensions requires the first 24 bytes of the file
	reading JPEG dimensions requires scanning through jpeg chunks
	In all formats, the file is at least 24 bytes big, so we'll read that always
	inspired by http://www.cplusplus.com/forum/beginner/45217/ */
	const unsigned char* buf = buf_start;
	if (buf_bytes<24) {
		return 0;
	}

	/* For JPEGs, we need to check the first bytes of each DCT chunk. */
	if (buf[0]==0xFF && buf[1]==0xD8 && buf[2]==0xFF)
	{
		long pos = 2;
		while (buf[pos]==0xFF)
		{
			if (buf[pos+1]==0xC0 || buf[pos+1]==0xC1 || buf[pos+1]==0xC2 || buf[pos+1]==0xC3 || buf[pos+1]==0xC9 || buf[pos+1]==0xCA || buf[pos+1]==0xCB) {
				*ret_height = (buf[pos+5]<<8) + buf[pos+6]; /* sic! height is first */
				*ret_width  = (buf[pos+7]<<8) + buf[pos+8];
				return 1;
			}
			pos += 2+(buf[pos+2]<<8)+buf[pos+3];
			if (pos+12>buf_bytes) { break; }
		}
	}

	/* GIF: first three bytes say "GIF", next three give version number. Then dimensions */
	if (buf[0]=='G' && buf[1]=='I' && buf[2]=='F')
	{
		*ret_width  = buf[6] + (buf[7]<<8);
		*ret_height = buf[8] + (buf[9]<<8);
		return 1;
	}

	/* PNG: the first frame is by definition an IHDR frame, which gives dimensions */
	if (buf[0]==0x89 && buf[1]=='P' && buf[2]=='N' && buf[3]=='G' && buf[4]==0x0D && buf[5]==0x0A && buf[6]==0x1A && buf[7]==0x0A
	 && buf[12]=='I' && buf[13]=='H' && buf[14]=='D' && buf[15]=='R')
	{
		*ret_width  = (buf[16]<<24) + (buf[17]<<16) + (buf[18]<<8) + (buf[19]<<0);
		*ret_height = (buf[20]<<24) + (buf[21]<<16) + (buf[22]<<8) + (buf[23]<<0);
		return 1;
	}

	return 0;
}
</c function>
<rust function signature>
pub fn get_filemeta(buf: &[u8]) -> Result<(u32, u32)> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use std::borrow::Cow;
use std::io::{Cursor, Write};
use std::mem;
use std::path::{Path, PathBuf};
use std::str::from_utf8;
use std::time::Duration;
use std::time::SystemTime as Time;
use std::time::SystemTime;
use anyhow::{bail, Context as _, Result};
use base64::Engine as _;
use chrono::{Local, NaiveDateTime, NaiveTime, TimeZone};
use deltachat_contact_tools::{strip_rtlo_characters, EmailAddress};
use deltachat_time::SystemTimeTools as SystemTime;
use futures::{StreamExt, TryStreamExt};
use mailparse::dateparse;
use mailparse::headers::Headers;
use mailparse::MailHeaderMap;
use rand::{thread_rng, Rng};
use tokio::{fs, io};
use url::Url;
use crate::chat::{add_device_msg, add_device_msg_with_importance};
use crate::constants::{DC_ELLIPSIS, DC_OUTDATED_WARNING_DAYS};
use crate::context::Context;
use crate::events::EventType;
use crate::message::{Message, Viewtype};
use crate::stock_str;
use chrono::NaiveDate;
use proptest::prelude::*;
use super::*;
use crate::chatlist::Chatlist;
use crate::{chat, test_utils};
use crate::{receive_imf::receive_imf, test_utils::TestContext};
use super::*;

</rust function dependency libraries>

</message>
<function>
pub fn get_filemeta(buf: &[u8]) -> Result<(u32, u32)> {
    let image = image::io::Reader::new(Cursor::new(buf)).with_guessed_format()?;
    let dimensions = image.into_dimensions()?;
    Ok(dimensions)
}
</function>
<translated function>
 ```rust
pub fn get_filemeta(buf: &[u8]) -> Result<(u32, u32)> {
    if buf.len() < 24 {
        return Ok((0, 0));
    }

    if buf[0] == 0xFF && buf[1] == 0xD8 && buf[2] == 0xFF {
        let mut pos = 2;
        while buf[pos] == 0xFF {
            if buf[pos + 1] == 0xC0 || buf[pos + 1] == 0xC1 || buf[pos + 1] == 0xC2 || buf[pos + 1] == 0xC3 || buf[pos + 1] == 0xC9 || buf[pos + 1] == 0xCA || buf[pos + 1] == 0xCB {
                let height = (buf[pos + 5] as u32) << 8 | buf[pos + 6] as u32;
                let width = (buf[pos + 7] as u32) << 8 | buf[pos + 8] as u32;
                return Ok((width, height));
            }
            pos += 2 + ((buf[pos + 2] as u32) << 8 | buf[pos + 3] as u32);
            if pos + 12 > buf.len() as u32 {
                break;
            }
        }
    }

    if buf[0] == b'G' && buf[1] == b'I' && buf[2] == b'F' {
        let width = buf[6] as u32 + (buf[7] as u32) << 8;
        let height = buf[8] as u32 + (buf[9] as u32) << 8;
        return Ok((width, height));
    }

    if buf[0] == 0x89 && buf[1] == b'P' && buf[2] == b'N' && buf[3] == b'G' && buf[4] == 0x0D && buf[5] == 0x0A && buf[6] == 0x1A && buf[7] == 0x0A
        && buf[12] == b'I' && buf[13] == b'H' && buf[14] == b'D' && buf[15] == b'R' {
        let width = (buf[16] as u32) << 24 | (buf[17] as u32) << 16 | (buf[18] as u32) << 8 | (buf[19] as u32);
        let height = (buf[20] as u32) << 24 | (buf[21] as u32) << 16 | (buf[22] as u32) << 8 | (buf[23] as u32);
        return Ok((width, height));
    }

    Ok((0, 0))
}
```</translated function> ```rust
pub fn get_filemeta(buf: &[u8]) -> Result<(u32, u32)> {
    if buf.len() < 24 {
        return Ok((0, 0));
    }

    if buf[0] == 0xFF && buf[1] == 0xD8 && buf[2] == 0xFF {
        let mut pos = 2;
        while buf[pos] == 0xFF {
            if buf[pos + 1] == 0xC0 || buf[pos + 1] == 0xC1 || buf[pos + 1] == 0xC2 || buf[pos + 1] == 0xC3 || buf[pos + 1] == 0xC9 || buf[pos + 1] == 0xCA || buf[pos + 1] == 0xCB {
                let height = (buf[pos + 5] as u32) << 8 | buf[pos + 6] as u32;
                let width = (buf[pos + 7] as u32) << 8 | buf[pos + 8] as u32;
                return Ok((width, height));
            }
            pos += 2 + ((buf[pos + 2] as u32) << 8 | buf[pos + 3] as u32);
            if pos + 12 > buf.len() as u32 {
                break;
            }
        }
    }

    if buf[0] == b'G' && buf[1] == b'I' && buf[2] == b'F' {
        let width = buf[6] as u32 + (buf[7] as u32) << 8;
        let height = buf[8] as u32 + (buf[9] as u32) << 8;
        return Ok((width, height));
    }

    if buf[0] == 0x89 && buf[1] == b'P' && buf[2] == b'N' && buf[3] == b'G' && buf[4] == 0x0D && buf[5] == 0x0A && buf[6] == 0x1A && buf[7] == 0x0A
        && buf[12] == b'I' && buf[13] == b'H' && buf[14] == b'D' && buf[15] == b'R' {
        let width = (buf[16] as u32) << 24 | (buf[17] as u32) << 16 | (buf[18] as u32) << 8 | (buf[19] as u32);
        let height = (buf[20] as u32) << 24 | (buf[21] as u32) << 16 | (buf[22] as u32) << 8 | (buf[23] as u32);
        return Ok((width, height));
    }

    Ok((0, 0))
}
```
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def is_multi_byte_encoding(name: str) -> bool:
    """
    Verify is a specific encoding is a multi byte one based on it IANA name
    """
    return name in {
        "utf-8",
        "utf-16le",
        "utf-16be",
        "euc-jp",
        "euc-kr",
        "iso-2022-jp",
        "gbk",
        "gb18030",
        "hz",
        "big5",
        "shift_jis",
    }
</python function>
<rust function signature>
pub fn is_multi_byte_encoding(name: &str) -> bool 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<function>
pub fn is_multi_byte_encoding(name: &str) -> bool {
    [
        "utf-8",
        "utf-16le",
        "utf-16be",
        "euc-jp",
        "euc-kr",
        "iso-2022-jp",
        "gbk",
        "gb18030",
        "hz",
        "big5",
        "shift_jis",
    ]
    .contains(&name)
}
</function>
<translated function>
The Python function `is_multi_byte_encoding` checks if the given encoding name is included in a specific set of multi-byte encoding names. In Rust, this would look like:

```rust
pub fn is_multi_byte_encoding(name: &str) -> bool {
    let multi_byte_encodings = [
        "utf-8",
        "utf-16le",
        "utf-16be",
        "euc-jp",
        "euc-kr",
        "iso-2022-jp",
        "gbk",
        "gb18030",
        "hz",
        "big5",
        "shift_jis",
    ];
    multi_byte_encodings.contains(&name)
}
```
This Rust function does the same checks as the Python function. Note that the Rust function does not use any of the provided imported libraries or variables. The function is simply a translation of the Python function to Rust, comparing the `name` argument to each of the encodings defined in an array.</translated function>The Python function `is_multi_byte_encoding` checks if the given encoding name is included in a specific set of multi-byte encoding names. In Rust, this would look like:

```rust
pub fn is_multi_byte_encoding(name: &str) -> bool {
    let multi_byte_encodings = [
        "utf-8",
        "utf-16le",
        "utf-16be",
        "euc-jp",
        "euc-kr",
        "iso-2022-jp",
        "gbk",
        "gb18030",
        "hz",
        "big5",
        "shift_jis",
    ];
    multi_byte_encodings.contains(&name)
}
```
This Rust function does the same checks as the Python function. Note that the Rust function does not use any of the provided imported libraries or variables. The function is simply a translation of the Python function to Rust, comparing the `name` argument to each of the encodings defined in an array.
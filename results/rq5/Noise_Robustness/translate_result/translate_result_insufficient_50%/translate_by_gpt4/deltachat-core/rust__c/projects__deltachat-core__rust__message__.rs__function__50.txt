<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
dc_lot_t* dc_msg_get_summary(const dc_msg_t* msg, const dc_chat_t* chat)
{
	dc_lot_t*      ret = dc_lot_new();
	dc_contact_t*  contact = NULL;
	dc_chat_t*     chat_to_delete = NULL;

	if (msg==NULL || msg->magic!=DC_MSG_MAGIC) {
		goto cleanup;
	}

	if (chat==NULL) {
		if ((chat_to_delete=dc_get_chat(msg->context, msg->chat_id))==NULL) {
			goto cleanup;
		}
		chat = chat_to_delete;
	}

	if (msg->from_id!=DC_CONTACT_ID_SELF && DC_CHAT_TYPE_IS_MULTI(chat->type)) {
		contact = dc_get_contact(chat->context, msg->from_id);
	}

	dc_lot_fill(ret, msg, chat, contact, msg->context);

cleanup:
	dc_contact_unref(contact);
	dc_chat_unref(chat_to_delete);
	return ret;
}
</c function>
<rust function signature>
pub async fn get_summary(&self, context: &Context, chat: Option<&Chat>) -> Result<Summary> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}
pub struct Summary {
    /// Part displayed before ":", such as an username or a string "Draft".
    pub prefix: Option<SummaryPrefix>,

    /// Summary text, always present.
    pub text: String,

    /// Message timestamp.
    pub timestamp: i64,

    /// Message state.
    pub state: MessageState,

    /// Message preview image path
    pub thumbnail_path: Option<String>,
}
pub struct ContactId(u32);
impl ContactId {
    /// Undefined contact. Used as a placeholder for trashed messages.
    pub const UNDEFINED: ContactId = ContactId::new(0);

    /// The owner of the account.
    ///
    /// The email-address is set by `set_config` using "addr".
    pub const SELF: ContactId = ContactId::new(1);

    /// ID of the contact for info messages.
    pub const INFO: ContactId = ContactId::new(2);

    /// ID of the contact for device messages.
    pub const DEVICE: ContactId = ContactId::new(5);
    pub(crate) const LAST_SPECIAL: ContactId = ContactId::new(9);

    /// Address to go with [`ContactId::DEVICE`].
    ///
    /// This is used by APIs which need to return an email address for this contact.
    pub const DEVICE_ADDR: &'static str = "device@localhost";
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use std::collections::BTreeSet;
use std::path::{Path, PathBuf};
use anyhow::{ensure, format_err, Context as _, Result};
use deltachat_contact_tools::{parse_vcard, VcardContact};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use tokio::{fs, io};
use crate::blob::BlobObject;
use crate::chat::{Chat, ChatId, ChatIdBlocked};
use crate::chatlist_events;
use crate::config::Config;
use crate::constants::{
    Blocked, Chattype, VideochatType, DC_CHAT_ID_TRASH, DC_DESIRED_TEXT_LEN, DC_MSG_ID_LAST_SPECIAL,
};
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::debug_logging::set_debug_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::{start_ephemeral_timers_msgids, Timer as EphemeralTimer};
use crate::events::EventType;
use crate::imap::markseen_on_imap_table;
use crate::location::delete_poi_location;
use crate::mimeparser::{parse_message_id, SystemMessage};
use crate::param::{Param, Params};
use crate::pgp::split_armored_data;
use crate::reaction::get_msg_reactions;
use crate::sql;
use crate::summary::Summary;
use crate::tools::{
    buf_compress, buf_decompress, get_filebytes, get_filemeta, gm2local_offset, read_file, time,
    timestamp_to_str, truncate,
};
use MessageState::*;
use MessageState::*;
use num_traits::FromPrimitive;
use super::*;
use crate::chat::{
        self, add_contact_to_chat, marknoticed_chat, send_text_msg, ChatItem, ProtectionStatus,
    };
use crate::chatlist::Chatlist;
use crate::config::Config;
use crate::reaction::send_reaction;
use crate::receive_imf::receive_imf;
use crate::test_utils as test;
use crate::test_utils::{TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn get_summary(&self, context: &Context, chat: Option<&Chat>) -> Result<Summary> {
        let chat_loaded: Chat;
        let chat = if let Some(chat) = chat {
            chat
        } else {
            let chat = Chat::load_from_db(context, self.chat_id).await?;
            chat_loaded = chat;
            &chat_loaded
        };

        let contact = if self.from_id != ContactId::SELF {
            match chat.typ {
                Chattype::Group | Chattype::Broadcast | Chattype::Mailinglist => {
                    Some(Contact::get_by_id(context, self.from_id).await?)
                }
                Chattype::Single => None,
            }
        } else {
            None
        };

        Summary::new(context, self, chat, contact.as_ref()).await
    }
</function>
<translated function>
Here is the translated Rust function:

```rust
use crate::chat::Chat;
use crate::context::Context;
use crate::summary::Summary;
use anyhow::Result;
use deltachat_contact_tools::ContactId;
use std::sync::Arc;

pub async fn get_summary(&self, context: &Context, chat: Option<&Chat>) -> Result<Summary> {
    let mut ret = Summary::new(); // Initialized a new Summary instance as the result
    let mut contact: Option<&ContactId> = None;
    let mut chat_to_delete: Option<Chat> = None;

    if self == Arc::new(Context::new()) || self.inner.magic != DC_MSG_MAGIC {
        goto cleanup: {
            dc_contact_unref(contact); // Assume that "dc_contact_unref" has been mapped to a similar function
            dc_chat_unref(chat_to_delete); // Assume that "dc_chat_unref" has been mapped to a similar function
            return ret;
        }
    }

    match chat {
        Some(chat) => {
            if self.from_id != ContactId::SELF && DC_CHAT_TYPE_IS_MULTI(chat.type) {
               contact = dc_get_contact(chat.context, self.from_id); // Assume that "dc_get_contact" has been mapped to a similar function
            }

            // Assume that "dc_lot_fill" has been mapped to a similar function and the "fill" function is available 
            ret.fill(self, chat, contact, context); 
            goto cleanup: {
                dc_contact_unref(contact);
                dc_chat_unref(chat_to_delete);
                return ret;
            }
        },
        None => {
            let chat_id = self.chat_id;
            if let Some(chat) = context.get_chat(chat_id).await {
                chat_to_delete = Some(chat);
            } else {
                goto cleanup: {
                    dc_contact_unref(contact);
                    dc_chat_unref(chat_to_delete);
                    return ret;
                }
            }
            
            if self.from_id != ContactId::SELF && DC_CHAT_TYPE_IS_MULTI(chat.to_delete.inner.type_) {
               contact = dc_get_contact(chat.context, self.from_id);
            }

            ret.fill(self, &chat_to_delete.unwrap(), contact, context);
            goto cleanup: {
                dc_contact_unref(contact);
                dc_chat_unref(chat_to_delete);
                return ret;
            }
        }
    }

}
```

Explanation:
- The provided "dc_msg_get_summary" C function is translated into the Rust function "get_summary".
- The function signature sets the self reference to the context and an optional chat reference as parameters.
- The return type is set to the Summary newtype.  The function "get_summary" returns a new Summary.
- The RestDef is a placeholder for all the remaining needed declartions.
- The syntax of "dc_msg_get_summary" C function is mapped to similar syntax in rust. E.g., the "->" operator in C is mapped to "." operator in Rust.
- For handling null values in Rust, Option Enum is used. The "null" value in C is mapped to "None" in Rust.

For the provided C function to be translated into rust, we have assumed that several functions including "dc_get_contact", "dc_get_chat", "fill" and "type" exist in the rust program and are accessible with similar functionalities.</translated function>Here is the translated Rust function:

```rust
use crate::chat::Chat;
use crate::context::Context;
use crate::summary::Summary;
use anyhow::Result;
use deltachat_contact_tools::ContactId;
use std::sync::Arc;

pub async fn get_summary(&self, context: &Context, chat: Option<&Chat>) -> Result<Summary> {
    let mut ret = Summary::new(); // Initialized a new Summary instance as the result
    let mut contact: Option<&ContactId> = None;
    let mut chat_to_delete: Option<Chat> = None;

    if self == Arc::new(Context::new()) || self.inner.magic != DC_MSG_MAGIC {
        goto cleanup: {
            dc_contact_unref(contact); // Assume that "dc_contact_unref" has been mapped to a similar function
            dc_chat_unref(chat_to_delete); // Assume that "dc_chat_unref" has been mapped to a similar function
            return ret;
        }
    }

    match chat {
        Some(chat) => {
            if self.from_id != ContactId::SELF && DC_CHAT_TYPE_IS_MULTI(chat.type) {
               contact = dc_get_contact(chat.context, self.from_id); // Assume that "dc_get_contact" has been mapped to a similar function
            }

            // Assume that "dc_lot_fill" has been mapped to a similar function and the "fill" function is available 
            ret.fill(self, chat, contact, context); 
            goto cleanup: {
                dc_contact_unref(contact);
                dc_chat_unref(chat_to_delete);
                return ret;
            }
        },
        None => {
            let chat_id = self.chat_id;
            if let Some(chat) = context.get_chat(chat_id).await {
                chat_to_delete = Some(chat);
            } else {
                goto cleanup: {
                    dc_contact_unref(contact);
                    dc_chat_unref(chat_to_delete);
                    return ret;
                }
            }
            
            if self.from_id != ContactId::SELF && DC_CHAT_TYPE_IS_MULTI(chat.to_delete.inner.type_) {
               contact = dc_get_contact(chat.context, self.from_id);
            }

            ret.fill(self, &chat_to_delete.unwrap(), contact, context);
            goto cleanup: {
                dc_contact_unref(contact);
                dc_chat_unref(chat_to_delete);
                return ret;
            }
        }
    }

}
```

Explanation:
- The provided "dc_msg_get_summary" C function is translated into the Rust function "get_summary".
- The function signature sets the self reference to the context and an optional chat reference as parameters.
- The return type is set to the Summary newtype.  The function "get_summary" returns a new Summary.
- The RestDef is a placeholder for all the remaining needed declartions.
- The syntax of "dc_msg_get_summary" C function is mapped to similar syntax in rust. E.g., the "->" operator in C is mapped to "." operator in Rust.
- For handling null values in Rust, Option Enum is used. The "null" value in C is mapped to "None" in Rust.

For the provided C function to be translated into rust, we have assumed that several functions including "dc_get_contact", "dc_get_chat", "fill" and "type" exist in the rust program and are accessible with similar functionalities.
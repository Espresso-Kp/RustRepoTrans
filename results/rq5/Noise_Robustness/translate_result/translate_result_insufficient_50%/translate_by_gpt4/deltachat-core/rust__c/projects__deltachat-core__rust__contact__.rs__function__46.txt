<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
* Same as dc_contact_is_verified() but allows speeding up things
 * by adding the peerstate belonging to the contact.
 * If you do not have the peerstate available, it is loaded automatically.
 *
 * @private @memberof dc_context_t
 */
int dc_contact_is_verified_ex(dc_contact_t* contact, const dc_apeerstate_t* peerstate)
{
	int              contact_verified = DC_NOT_VERIFIED;
	dc_apeerstate_t* peerstate_to_delete = NULL;

	if (contact==NULL || contact->magic!=DC_CONTACT_MAGIC) {
		goto cleanup;
	}

	if (contact->id==DC_CONTACT_ID_SELF) {
		contact_verified = DC_BIDIRECT_VERIFIED;
		goto cleanup; // we're always sort of secured-verified as we could verify the key on this device any time with the key on this device
	}

	if (peerstate==NULL) {
		peerstate_to_delete = dc_apeerstate_new(contact->context);
		if (!dc_apeerstate_load_by_addr(peerstate_to_delete, contact->context->sql, contact->addr)) {
			goto cleanup;
		}
		peerstate = peerstate_to_delete;
	}

	contact_verified = peerstate->verified_key? DC_BIDIRECT_VERIFIED : 0;

cleanup:
	dc_apeerstate_unref(peerstate_to_delete);
	return contact_verified;
}
</c function>
<rust function signature>
pub async fn is_verified(&self, context: &Context) -> Result<bool> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub(crate) async fn is_backward_verified(&self, context: &Context) -> Result<bool> {
        let Some(backward_verified_key_id) = self.backward_verified_key_id else {
            return Ok(false);
        };

        let self_key_id = context.get_config_i64(Config::KeyId).await?;

        let backward_verified = backward_verified_key_id == self_key_id;
        Ok(backward_verified)
    }
pub async fn from_addr(context: &Context, addr: &str) -> Result<Option<Peerstate>> {
        if context.is_self_addr(addr).await? {
            return Ok(None);
        }
        let query = "SELECT addr, last_seen, last_seen_autocrypt, prefer_encrypted, public_key, \
                     gossip_timestamp, gossip_key, public_key_fingerprint, gossip_key_fingerprint, \
                     verified_key, verified_key_fingerprint, \
                     verifier, \
                     secondary_verified_key, secondary_verified_key_fingerprint, \
                     secondary_verifier, \
                     backward_verified_key_id \
                     FROM acpeerstates \
                     WHERE addr=? COLLATE NOCASE LIMIT 1;";
        Self::from_stmt(context, query, (addr,)).await
    }
pub struct ContactId(u32);
impl ContactId {
    /// Undefined contact. Used as a placeholder for trashed messages.
    pub const UNDEFINED: ContactId = ContactId::new(0);

    /// The owner of the account.
    ///
    /// The email-address is set by `set_config` using "addr".
    pub const SELF: ContactId = ContactId::new(1);

    /// ID of the contact for info messages.
    pub const INFO: ContactId = ContactId::new(2);

    /// ID of the contact for device messages.
    pub const DEVICE: ContactId = ContactId::new(5);
    pub(crate) const LAST_SPECIAL: ContactId = ContactId::new(9);

    /// Address to go with [`ContactId::DEVICE`].
    ///
    /// This is used by APIs which need to return an email address for this contact.
    pub const DEVICE_ADDR: &'static str = "device@localhost";
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use std::cmp::{min, Reverse};
use std::collections::BinaryHeap;
use std::fmt;
use std::path::{Path, PathBuf};
use std::time::UNIX_EPOCH;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use base64::Engine as _;
use deltachat_contact_tools::may_be_valid_addr;
use deltachat_contact_tools::{
    self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
    ContactAddress, VcardContact,
};
use deltachat_derive::{FromSql, ToSql};
use rusqlite::OptionalExtension;
use serde::{Deserialize, Serialize};
use tokio::task;
use tokio::time::{timeout, Duration};
use crate::aheader::{Aheader, EncryptPreference};
use crate::blob::BlobObject;
use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{load_self_public_key, DcKey, SignedPublicKey};
use crate::log::LogExt;
use crate::login_param::LoginParam;
use crate::message::MessageState;
use crate::mimeparser::AvatarAction;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::sql::{self, params_iter};
use crate::sync::{self, Sync::*};
use crate::tools::{
    duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
};
use crate::{chat, chatlist_events, stock_str};
use deltachat_contact_tools::{may_be_valid_addr, normalize_name};
use super::*;
use crate::chat::{get_chat_contacts, send_text_msg, Chat};
use crate::chatlist::Chatlist;
use crate::receive_imf::receive_imf;
use crate::test_utils::{self, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn is_verified(&self, context: &Context) -> Result<bool> {
        // We're always sort of secured-verified as we could verify the key on this device any time with the key
        // on this device
        if self.id == ContactId::SELF {
            return Ok(true);
        }

        let Some(peerstate) = Peerstate::from_addr(context, &self.addr).await? else {
            return Ok(false);
        };

        let forward_verified = peerstate.is_using_verified_key();
        let backward_verified = peerstate.is_backward_verified(context).await?;
        Ok(forward_verified && backward_verified)
    }
</function>
<translated function>
Based on your provided C function and related Rust function signature, below is the function in Rust.

```rust
use crate::peerstate::Peerstate;
use anyhow::Result;
use crate::context::Context;

pub async fn is_verified(&self, context: &Context) -> Result<bool> {
    let mut contact_verified: bool = false;

    if self.magic != DC_CONTACT_MAGIC {
        return Ok(contact_verified);
    }

    if self.id == ContactId::SELF {
        contact_verified = true;
        return Ok(contact_verified);
    }

    let peerstate = match &self.peerstate {
        Some(peerstate) => peerstate,
        None => {
            // Create new Peerstate if not exist
            let peerstate_to_delete = Peerstate::new(self.context);
            match Peerstate::from_addr(self.context, self.addr).await {
                Ok(Some(peerstate_to_delete)) => peerstate_to_delete,
                _ => return Ok(contact_verified),
            }
        }
    };

    contact_verified = match peerstate.verified_key {
        Some(_) => true,
        None => false,
    };

    Ok(contact_verified)
}
```

Please note that I made these assumptions:

- `DC_CONTACT_MAGIC` is a constant and it represents valid contact magic number.
- `self.context` and `self.addr` are properties of the struct this method is implemented for.
- `DC_CONTACT_ID_SELF` and `self.id == ContactId::SELF` represent the same condition in both codes.
- `DC_BIDIRECT_VERIFIED` equals to `true` in Rust, the same as `DC_NOT_VERIFIED` which equals to `false`.
- `self.peerstate` - I assumed that the `peerstate` object recognised in the C code could be a field of the contact object. You might need to adjust this point to fit the actual circumstances. 

Please understand that due to the complexity and specific context of the application, the above translation might not work as expected and may need some modifications. For the complete and correct Rust code, it would be ideal to understand more details about data structures and their relationships in your actual application.
</translated function>Based on your provided C function and related Rust function signature, below is the function in Rust.

```rust
use crate::peerstate::Peerstate;
use anyhow::Result;
use crate::context::Context;

pub async fn is_verified(&self, context: &Context) -> Result<bool> {
    let mut contact_verified: bool = false;

    if self.magic != DC_CONTACT_MAGIC {
        return Ok(contact_verified);
    }

    if self.id == ContactId::SELF {
        contact_verified = true;
        return Ok(contact_verified);
    }

    let peerstate = match &self.peerstate {
        Some(peerstate) => peerstate,
        None => {
            // Create new Peerstate if not exist
            let peerstate_to_delete = Peerstate::new(self.context);
            match Peerstate::from_addr(self.context, self.addr).await {
                Ok(Some(peerstate_to_delete)) => peerstate_to_delete,
                _ => return Ok(contact_verified),
            }
        }
    };

    contact_verified = match peerstate.verified_key {
        Some(_) => true,
        None => false,
    };

    Ok(contact_verified)
}
```

Please note that I made these assumptions:

- `DC_CONTACT_MAGIC` is a constant and it represents valid contact magic number.
- `self.context` and `self.addr` are properties of the struct this method is implemented for.
- `DC_CONTACT_ID_SELF` and `self.id == ContactId::SELF` represent the same condition in both codes.
- `DC_BIDIRECT_VERIFIED` equals to `true` in Rust, the same as `DC_NOT_VERIFIED` which equals to `false`.
- `self.peerstate` - I assumed that the `peerstate` object recognised in the C code could be a field of the contact object. You might need to adjust this point to fit the actual circumstances. 

Please understand that due to the complexity and specific context of the application, the above translation might not work as expected and may need some modifications. For the complete and correct Rust code, it would be ideal to understand more details about data structures and their relationships in your actual application.

<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
dc_param_t* dc_param_new()
{
	dc_param_t* param = NULL;

	if ((param=calloc(1, sizeof(dc_param_t)))==NULL) {
		exit(28); /* cannot allocate little memory, unrecoverable error */
	}

	param->packed = calloc(1, 1);

    return param;
}
</c function>
<rust function signature>
pub fn new() -> Self 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct Params {
    inner: BTreeMap<Param, String>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use std::collections::BTreeMap;
use std::fmt;
use std::path::PathBuf;
use std::str;
use anyhow::{bail, Error, Result};
use num_traits::FromPrimitive;
use serde::{Deserialize, Serialize};
use crate::blob::BlobObject;
use crate::context::Context;
use crate::mimeparser::SystemMessage;
use std::path::Path;
use std::str::FromStr;
use tokio::fs;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub fn new() -> Self {
        Default::default()
    }
</function>
<translated function>
According to given C function and Rust requirements, the equivalent Rust translation to construct the `Params` struct might be:

```rust
pub struct Params {
    inner: std::collections::BTreeMap<Param, String>,
}

impl Params {
    pub fn new() -> Self {
        Params {
            inner: std::collections::BTreeMap::new(),
        }
    }
}
```

The C function `dc_param_new` is creating a new `dc_param_t` object and allocating memory for it. It fails by exiting with code 28 if it can't allocate memory. In Rust, memory allocation failures are unrecoverable errors which abort the current thread. The `new()` method in Rust is equivalent to `dc_param_new` constructor in C language.

In addition, `param->packed = calloc(1, 1);` line is allocation a single byte of memory and assigning to `packed`. In the case of Rust, we typically do not need to do this ourselves because Rust's `BTreeMap` handles its own memory. This translation assumes that the `Params` struct is a direct equivalent to `dc_param_t`. 

It's important to note that more complex behavior in the original C function may require appropriate equivalent Rust concepts. Please share more context if you need a more detailed or different translation.</translated function>According to given C function and Rust requirements, the equivalent Rust translation to construct the `Params` struct might be:

```rust
pub struct Params {
    inner: std::collections::BTreeMap<Param, String>,
}

impl Params {
    pub fn new() -> Self {
        Params {
            inner: std::collections::BTreeMap::new(),
        }
    }
}
```

The C function `dc_param_new` is creating a new `dc_param_t` object and allocating memory for it. It fails by exiting with code 28 if it can't allocate memory. In Rust, memory allocation failures are unrecoverable errors which abort the current thread. The `new()` method in Rust is equivalent to `dc_param_new` constructor in C language.

In addition, `param->packed = calloc(1, 1);` line is allocation a single byte of memory and assigning to `packed`. In the case of Rust, we typically do not need to do this ourselves because Rust's `BTreeMap` handles its own memory. This translation assumes that the `Params` struct is a direct equivalent to `dc_param_t`. 

It's important to note that more complex behavior in the original C function may require appropriate equivalent Rust concepts. Please share more context if you need a more detailed or different translation.
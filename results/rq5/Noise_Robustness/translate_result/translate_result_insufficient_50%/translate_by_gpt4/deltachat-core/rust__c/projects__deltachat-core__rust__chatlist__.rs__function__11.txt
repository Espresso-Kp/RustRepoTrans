<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
int dc_get_archived_cnt(dc_context_t* context)
{
	int ret = 0;
	sqlite3_stmt* stmt = dc_sqlite3_prepare(context->sql,
		"SELECT COUNT(*) FROM chats WHERE blocked=0 AND archived=1;");
	if (sqlite3_step(stmt)==SQLITE_ROW) {
		ret = sqlite3_column_int(stmt, 0);
	}
	sqlite3_finalize(stmt);
	return ret;
}
</c function>
<rust function signature>
pub async fn get_archived_cnt(context: &Context) -> Result<usize> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}
pub enum Blocked {
    #[default]
    Not = 0,
    Yes = 1,
    Request = 2,
}
pub enum ChatVisibility {
    /// Chat is neither archived nor pinned.
    Normal = 0,

    /// Chat is archived.
    Archived = 1,

    /// Chat is pinned to the top of the chatlist.
    Pinned = 2,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use anyhow::{ensure, Context as _, Result};
use once_cell::sync::Lazy;
use crate::chat::{update_special_chat_names, Chat, ChatId, ChatVisibility};
use crate::constants::{
    Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK, DC_GCL_ADD_ALLDONE_HINT,
    DC_GCL_ARCHIVED_ONLY, DC_GCL_FOR_FORWARDING, DC_GCL_NO_SPECIALS,
};
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::message::{Message, MessageState, MsgId};
use crate::param::{Param, Params};
use crate::stock_str;
use crate::summary::Summary;
use crate::tools::IsNoneOrEmpty;
use super::*;
use crate::chat::{
        add_contact_to_chat, create_group_chat, get_chat_contacts, remove_contact_from_chat,
        send_text_msg, ProtectionStatus,
    };
use crate::message::Viewtype;
use crate::receive_imf::receive_imf;
use crate::stock_str::StockMessage;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub async fn get_archived_cnt(context: &Context) -> Result<usize> {
    let count = context
        .sql
        .count(
            "SELECT COUNT(*) FROM chats WHERE blocked!=? AND archived=?;",
            (Blocked::Yes, ChatVisibility::Archived),
        )
        .await?;
    Ok(count)
}
</function>
<translated function>
Here is your requested translation of the given C function into a Rust function:

<rust function>
```rust
pub async fn get_archived_cnt(context: &Context) -> Result<usize> {
    let query = context.sql.prepare(
        "SELECT COUNT(*) 
        FROM chats 
        WHERE blocked = ? 
        AND archived = ?;"
    ).await?;

    query.bind(1, Blocked::Not as i32)?;
    query.bind(2, ChatVisibility::Archived as i32)?;

    if let Ok(row) = query.query_row(NO_PARAMS, |row| row.get::<_, i64>(0)) {
        Ok(row as usize)
    } else {
        Ok(0)
    }
}
```
</rust function>
Please note that the efficient use of the above function requires efficient handling of the database transactions and concurrency in the actual Rust code which is not presented in the given context. However, the basic translation holds. 

Also, note that "NO_PARAMS" is a constant placeholder from the "rusqlite" crate that's used when a query doesn't need any parameters. If your project doesn't use "rusqlite", you might need to write it a bit differently.

Use #![feature(or_patterns)] in the lib.rs of your project if there are complaints regarding the Or Patterns not being recognized by the rust compiler. 

Lastly, please properly organize the "crate::tools::IsNoneOrEmpty;", "crate::chat::{...}" and "crate::message::Viewtype", "crate::test_utils::TestContext"; imports as they were not used in the function.</translated function>Here is your requested translation of the given C function into a Rust function:

<rust function>
```rust
pub async fn get_archived_cnt(context: &Context) -> Result<usize> {
    let query = context.sql.prepare(
        "SELECT COUNT(*) 
        FROM chats 
        WHERE blocked = ? 
        AND archived = ?;"
    ).await?;

    query.bind(1, Blocked::Not as i32)?;
    query.bind(2, ChatVisibility::Archived as i32)?;

    if let Ok(row) = query.query_row(NO_PARAMS, |row| row.get::<_, i64>(0)) {
        Ok(row as usize)
    } else {
        Ok(0)
    }
}
```
</rust function>
Please note that the efficient use of the above function requires efficient handling of the database transactions and concurrency in the actual Rust code which is not presented in the given context. However, the basic translation holds. 

Also, note that "NO_PARAMS" is a constant placeholder from the "rusqlite" crate that's used when a query doesn't need any parameters. If your project doesn't use "rusqlite", you might need to write it a bit differently.

Use #![feature(or_patterns)] in the lib.rs of your project if there are complaints regarding the Or Patterns not being recognized by the rust compiler. 

Lastly, please properly organize the "crate::tools::IsNoneOrEmpty;", "crate::chat::{...}" and "crate::message::Viewtype", "crate::test_utils::TestContext"; imports as they were not used in the function.
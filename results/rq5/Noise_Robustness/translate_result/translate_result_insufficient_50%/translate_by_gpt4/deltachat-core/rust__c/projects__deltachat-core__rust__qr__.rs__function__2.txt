<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
dc_lot_t* dc_check_qr(dc_context_t* context, const char* qr)
{
	char*            payload = NULL;
	char*            addr = NULL; // must be normalized, if set
	char*            fingerprint = NULL; // must be normalized, if set
	char*            name = NULL;
	char*            invitenumber = NULL;
	char*            auth = NULL;
	dc_apeerstate_t* peerstate = dc_apeerstate_new(context);
	dc_lot_t*        qr_parsed = dc_lot_new();
	uint32_t         chat_id = 0;
	char*            device_msg = NULL;
	char*            grpid = NULL;
	char*            grpname = NULL;

	qr_parsed->state = 0;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || qr==NULL) {
		goto cleanup;
	}

	dc_log_info(context, 0, "Scanned QR code: %s", qr);

	/* split parameters from the qr code*/

	if (strncasecmp(qr, DC_OPENPGP4FPR_SCHEME, strlen(DC_OPENPGP4FPR_SCHEME))==0)
	{
		/* scheme: OPENPGP4FPR:FINGERPRINT#a=ADDR&n=NAME&i=INVITENUMBER&s=AUTH
		       or: OPENPGP4FPR:FINGERPRINT#a=ADDR&g=GROUPNAME&x=GROUPID&i=INVITENUMBER&s=AUTH */

		payload  = dc_strdup(&qr[strlen(DC_OPENPGP4FPR_SCHEME)]);
		char* fragment = strchr(payload, '#'); /* must not be freed, only a pointer inside payload */
		if (fragment)
		{
			*fragment = 0;
			fragment++;

			dc_param_t* param = dc_param_new();
			dc_param_set_urlencoded(param, fragment);

			addr = dc_param_get(param, 'a', NULL);
			if (addr) {
				char* urlencoded = dc_param_get(param, 'n', NULL);
				if(urlencoded) {
					name = dc_urldecode(urlencoded);
					dc_normalize_name(name);
					free(urlencoded);
				}

				invitenumber  = dc_param_get(param, 'i', NULL);
				auth          = dc_param_get(param, 's', NULL);

				grpid  = dc_param_get(param, 'x', NULL);
				if (grpid) {
					urlencoded = dc_param_get(param, 'g', NULL);
					if (urlencoded) {
						grpname = dc_urldecode(urlencoded);
						free(urlencoded);
					}
				}
			}

			dc_param_unref(param);
		}

		fingerprint = dc_normalize_fingerprint(payload);
	}
	else if (strncasecmp(qr, MAILTO_SCHEME, strlen(MAILTO_SCHEME))==0)
	{
		/* scheme: mailto:addr...?subject=...&body=... */
		payload = dc_strdup(&qr[strlen(MAILTO_SCHEME)]);
		char* query = strchr(payload, '?'); /* must not be freed, only a pointer inside payload */
		if (query) {
			*query = 0;
		}
		addr = dc_strdup(payload);
	}
	else if (strncasecmp(qr, SMTP_SCHEME, strlen(SMTP_SCHEME))==0)
	{
		/* scheme: `SMTP:addr...:subject...:body...` */
		payload = dc_strdup(&qr[strlen(SMTP_SCHEME)]);
		char* colon = strchr(payload, ':'); /* must not be freed, only a pointer inside payload */
		if (colon) {
			*colon = 0;
		}
		addr = dc_strdup(payload);
	}
	else if (strncasecmp(qr, MATMSG_SCHEME, strlen(MATMSG_SCHEME))==0)
	{
		/* scheme: `MATMSG:TO:addr...;SUB:subject...;BODY:body...;` - there may or may not be linebreaks after the fields */
		char* to = strstr(qr, "TO:"); /* does not work when the text `TO:` is used in subject/body _and_ TO: is not the first field. we ignore this case. */
		if (to) {
			addr = dc_strdup(&to[3]);
			char* semicolon = strchr(addr, ';');
			if (semicolon) { *semicolon = 0; }
		}
		else {
			qr_parsed->state = DC_QR_ERROR;
			qr_parsed->text1 = dc_strdup("Bad e-mail address.");
			goto cleanup;
		}
	}
	else if (strncasecmp(qr, VCARD_BEGIN, strlen(VCARD_BEGIN))==0)
	{
		/* scheme: `VCARD:BEGIN\nN:last name;first name;...;\nEMAIL:addr...;` */
		carray* lines = dc_split_into_lines(qr);
		for (int i = 0; i < carray_count(lines); i++) {
			char* key   = (char*)carray_get(lines, i); dc_trim(key);
			char* value = strchr(key, ':');
			if (value) {
				*value = 0;
				value++;
				char* semicolon = strchr(key, ';'); if (semicolon) { *semicolon = 0; } /* handle `EMAIL;type=work:` stuff */
				if (strcasecmp(key, "EMAIL")==0) {
					semicolon = strchr(value, ';'); if (semicolon) { *semicolon = 0; } /* use the first EMAIL */
					addr = dc_strdup(value);
				}
				else if (strcasecmp(key, "N")==0) {
					semicolon = strchr(value, ';'); if (semicolon) { semicolon = strchr(semicolon+1, ';'); if (semicolon) { *semicolon = 0; } } /* the N format is `lastname;prename;wtf;title` - skip everything after the second semicolon */
					name = dc_strdup(value);
					dc_str_replace(&name, ";", ","); /* the format "lastname,prename" is handled by dc_normalize_name() */
					dc_normalize_name(name);
				}
			}
		}
		dc_free_splitted_lines(lines);
	}

	/* check the paramters */

	if (addr) {
		char* temp = dc_urldecode(addr);      free(addr); addr = temp; /* urldecoding is needed at least for OPENPGP4FPR but should not hurt in the other cases */
		      temp = dc_addr_normalize(addr); free(addr); addr = temp;

		if (!dc_may_be_valid_addr(addr)) {
			qr_parsed->state = DC_QR_ERROR;
			qr_parsed->text1 = dc_strdup("Bad e-mail address.");
			goto cleanup;
		}
	}

	if (fingerprint) {
		if (strlen(fingerprint) != 40) {
			qr_parsed->state = DC_QR_ERROR;
			qr_parsed->text1 = dc_strdup("Bad fingerprint length in QR code.");
			goto cleanup;
		}
	}

	/* let's see what we can do with the parameters */

	if (fingerprint)
	{
		/* fingerprint set ... */

		if (addr==NULL || invitenumber==NULL || auth==NULL)
		{
			// _only_ fingerprint set ...
			// (we could also do this before/instead of a secure-join, however, this may require complicated questions in the ui)
			if (dc_apeerstate_load_by_fingerprint(peerstate, context->sql, fingerprint)) {
				qr_parsed->state = DC_QR_FPR_OK;
				qr_parsed->id    = dc_add_or_lookup_contact(context, NULL, peerstate->addr, DC_ORIGIN_UNHANDLED_QR_SCAN, NULL);

				dc_create_or_lookup_nchat_by_contact_id(context, qr_parsed->id, DC_CHAT_DEADDROP_BLOCKED, &chat_id, NULL);
				device_msg = dc_mprintf("%s verified.", peerstate->addr);
			}
			else {
				qr_parsed->text1 = dc_format_fingerprint(fingerprint);
				qr_parsed->state = DC_QR_FPR_WITHOUT_ADDR;
			}
		}
		else
		{
			// fingerprint + addr set, secure-join requested
			// do not comapre the fingerprint already - it may have changed - errors are catched later more proberly.
			// (theroretically, there is also the state "addr=set, fingerprint=set, invitenumber=0", however, currently, we won't get into this state)
			if (grpid && grpname) {
				qr_parsed->state = DC_QR_ASK_VERIFYGROUP;
				qr_parsed->text1 = dc_strdup(grpname);
				qr_parsed->text2 = dc_strdup(grpid);
			}
			else {
				qr_parsed->state = DC_QR_ASK_VERIFYCONTACT;
			}

			qr_parsed->id            = dc_add_or_lookup_contact(context, name, addr, DC_ORIGIN_UNHANDLED_QR_SCAN, NULL);
			qr_parsed->fingerprint   = dc_strdup(fingerprint);
			qr_parsed->invitenumber  = dc_strdup(invitenumber);
			qr_parsed->auth          = dc_strdup(auth);
		}
	}
	else if (addr)
	{
        qr_parsed->state = DC_QR_ADDR;
		qr_parsed->id    = dc_add_or_lookup_contact(context, name, addr, DC_ORIGIN_UNHANDLED_QR_SCAN, NULL);
	}
	else if (strstr(qr, "http://")==qr || strstr(qr, "https://")==qr)
	{
		qr_parsed->state = DC_QR_URL;
		qr_parsed->text1 = dc_strdup(qr);
	}
	else
	{
        qr_parsed->state = DC_QR_TEXT;
		qr_parsed->text1 = dc_strdup(qr);
	}

	if (device_msg) {
		dc_add_device_msg(context, chat_id, device_msg);
	}

cleanup:
	free(addr);
	free(fingerprint);
	dc_apeerstate_unref(peerstate);
	free(payload);
	free(name);
	free(invitenumber);
	free(auth);
	free(device_msg);
	free(grpname);
	free(grpid);
	return qr_parsed;
}
</c function>
<rust function signature>
pub async fn check_qr(context: &Context, qr: &str) -> Result<Qr> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn decode_backup(qr: &str) -> Result<Qr> {
    let payload = qr
        .strip_prefix(DCBACKUP_SCHEME)
        .ok_or_else(|| anyhow!("invalid DCBACKUP scheme"))?;
    let ticket: iroh::provider::Ticket = payload.parse().context("invalid DCBACKUP payload")?;
    Ok(Qr::Backup { ticket })
}
async fn decode_matmsg(context: &Context, qr: &str) -> Result<Qr> {
    // Does not work when the text `TO:` is used in subject/body _and_ TO: is not the first field.
    // we ignore this case.
    let addr = if let Some(to_index) = qr.find("TO:") {
        let addr = qr[to_index + 3..].trim();
        if let Some(semi_index) = addr.find(';') {
            addr[..semi_index].trim()
        } else {
            addr
        }
    } else {
        bail!("Invalid MATMSG found");
    };

    let addr = normalize_address(addr)?;
    let name = "";
    Qr::from_address(context, name, &addr, None).await
}
async fn decode_smtp(context: &Context, qr: &str) -> Result<Qr> {
    let payload = &qr[SMTP_SCHEME.len()..];

    let addr = if let Some(query_index) = payload.find(':') {
        &payload[..query_index]
    } else {
        bail!("Invalid SMTP found");
    };

    let addr = normalize_address(addr)?;
    let name = "";
    Qr::from_address(context, name, &addr, None).await
}
async fn decode_vcard(context: &Context, qr: &str) -> Result<Qr> {
    let name = VCARD_NAME_RE
        .captures(qr)
        .and_then(|caps| {
            let last_name = caps.get(1)?.as_str().trim();
            let first_name = caps.get(2)?.as_str().trim();

            Some(format!("{first_name} {last_name}"))
        })
        .unwrap_or_default();

    let addr = if let Some(caps) = VCARD_EMAIL_RE.captures(qr) {
        normalize_address(caps[2].trim())?
    } else {
        bail!("Bad e-mail address");
    };

    Qr::from_address(context, &name, &addr, None).await
}
fn starts_with_ignore_case(string: &str, pattern: &str) -> bool {
    string.to_lowercase().starts_with(&pattern.to_lowercase())
}
fn decode_webrtc_instance(_context: &Context, qr: &str) -> Result<Qr> {
    let payload = qr
        .get(DCWEBRTC_SCHEME.len()..)
        .context("invalid DCWEBRTC payload")?;

    let (_type, url) = Message::parse_webrtc_instance(payload);
    let url = url::Url::parse(&url).context("Invalid WebRTC instance")?;

    if url.scheme() == "http" || url.scheme() == "https" {
        Ok(Qr::WebrtcInstance {
            domain: url
                .host_str()
                .context("can't extract WebRTC instance domain")?
                .to_string(),
            instance_pattern: payload.to_string(),
        })
    } else {
        bail!("Bad URL scheme for WebRTC instance: {:?}", url.scheme());
    }
}
// yes: uppercase
const IDELTACHAT_SCHEME: &str = "https://i.delta.chat/#";
const IDELTACHAT_NOSLASH_SCHEME: &str = "https://i.delta.chat#";
const DCACCOUNT_SCHEME: &str = "DCACCOUNT:";
pub(super) const DCLOGIN_SCHEME: &str = "DCLOGIN:";
const HTTP_SCHEME: &str = "http://";
const HTTPS_SCHEME: &str = "https://";

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use std::collections::BTreeMap;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use dclogin_scheme::LoginOptions;
use deltachat_contact_tools::{addr_normalize, may_be_valid_addr, ContactAddress};
use once_cell::sync::Lazy;
use percent_encoding::percent_decode_str;
use serde::Deserialize;
use self::dclogin_scheme::configure_from_login_qr;
use crate::chat::{get_chat_id_by_grpid, ChatIdBlocked};
use crate::config::Config;
use crate::constants::Blocked;
use crate::contact::{Contact, ContactId, Origin};
use crate::context::Context;
use crate::events::EventType;
use crate::key::Fingerprint;
use crate::message::Message;
use crate::peerstate::Peerstate;
use crate::socks::Socks5Config;
use crate::token;
use crate::tools::validate_id;
use iroh_old as iroh;
use super::*;
use crate::aheader::EncryptPreference;
use crate::chat::{create_group_chat, ProtectionStatus};
use crate::key::DcKey;
use crate::securejoin::get_securejoin_qr;
use crate::test_utils::{alice_keypair, TestContext};

</rust function dependency libraries>

</message>
<function>
pub async fn check_qr(context: &Context, qr: &str) -> Result<Qr> {
    let qrcode = if starts_with_ignore_case(qr, OPENPGP4FPR_SCHEME) {
        decode_openpgp(context, qr)
            .await
            .context("failed to decode OPENPGP4FPR QR code")?
    } else if qr.starts_with(IDELTACHAT_SCHEME) {
        decode_ideltachat(context, IDELTACHAT_SCHEME, qr).await?
    } else if qr.starts_with(IDELTACHAT_NOSLASH_SCHEME) {
        decode_ideltachat(context, IDELTACHAT_NOSLASH_SCHEME, qr).await?
    } else if starts_with_ignore_case(qr, DCACCOUNT_SCHEME) {
        decode_account(qr)?
    } else if starts_with_ignore_case(qr, DCLOGIN_SCHEME) {
        dclogin_scheme::decode_login(qr)?
    } else if starts_with_ignore_case(qr, DCWEBRTC_SCHEME) {
        decode_webrtc_instance(context, qr)?
    } else if starts_with_ignore_case(qr, DCBACKUP_SCHEME) {
        decode_backup(qr)?
    } else if qr.starts_with(MAILTO_SCHEME) {
        decode_mailto(context, qr).await?
    } else if qr.starts_with(SMTP_SCHEME) {
        decode_smtp(context, qr).await?
    } else if qr.starts_with(MATMSG_SCHEME) {
        decode_matmsg(context, qr).await?
    } else if qr.starts_with(VCARD_SCHEME) {
        decode_vcard(context, qr).await?
    } else if qr.starts_with(HTTP_SCHEME) || qr.starts_with(HTTPS_SCHEME) {
        Qr::Url {
            url: qr.to_string(),
        }
    } else {
        Qr::Text {
            text: qr.to_string(),
        }
    };
    Ok(qrcode)
}
</function>
<translated function>
pub async fn check_qr(context: &Context, qr: &str) -> Result<Qr> {
    if let Ok(login) = LoginOptions::scan(qr) {
        return Ok(Qr::Configure {
            login: login.to_login_param(),
        });
    }

    for &scheme in &[
        DCBACKUP_SCHEME,
        ADVANCED_SETUP_FILE_SCHEME,
        DCACCOUNT_SCHEME,
        DCLOGIN_SCHEME,
    ] {
        if starts_with_ignore_case(qr, scheme) {
            let safe_qr = if starts_with_ignore_case(qr, DCACCOUNT_SCHEME) {
                qr.replace("deltaAccount:", "DCAccount:")
            } else if starts_with_ignore_case(qr, DC_LOGIN_SCHEME) {
                qr.replace("deltaLogin:", "DCLogin:")
            } else {
                qr.to_owned()
            };

            let payload = &safe_qr[scheme.len()..];

            match scheme {
                DCBACKUP_SCHEME => return decode_backup(&payload),
                DCACCOUNT_SCHEME | DCLOGIN_SCHEME => {
                    /* the entered file was a masterbackup code */
                    let res = context.recover_account(password).await;

                    if let Err(ref err) = res {
                        error!(
                            context,
                            "Failed to import master backup: {}.", err
                        );
                        securejoin_failed(context, qr_scan);
                    }
                    return decode_login_param(&payload),
                }
                ADVANCED_SETUP_FILE_SCHEME => return decode_setupfile(destination_folder, &payload),
                _ => unreachable!(),
            }
        }
    }

    /* We have a failed secure join QR code scan
        // just create a setup-contact code
        let scanned_code = qr.as_str();
        // scanned_code=Secure-Join:Request:'FA8-l1bOvEM
        // scanned_code=Secure-Join:Response:'FA8-l1bOvEM
    */

    let e = match qr {
        QRVCARD_DEVCODE_SCHEME => {
            ensure!(vcard_qr.begins_with(VCARD_BEGIN), "begins with VCARD_BEGIN")
            return decode_vcard(context, &vcard_qr).await,
        },
        MATMSG_SCHEME => return decode_matmsg(context, &mailto_qr).await,
        MAILTO_SCHEME => return decode_mailto(context, &mailto_qr).await,
        SMTP_SCHEME => return decode_smtp(context, smtp_qr).await,
        VCARD_BEGIN => {
            vcard_qr = dc_strdup(qr);
            qr = vcard_qr;
            let ok = dc_vcardlot_parse(&mut vcard, qr);
            ensure!(ok == 0, "not a valid QR code");
        },
        _ => {},
    };

    if starts_with_ignore_case(qr, IDELTACHAT_SCHEME)
        || starts_with_ignore_case(qr, IDELTACHAT_NOSLASH_SCHEME)
    {
        return decode_webrtc_instance(context, qr);
    }

    if starts_with_ignore_case(qr, HTTP_SCHEME) || starts_with_ignore_case(qr, HTTPS_SCHEME) {
        return Ok(Qr::Url { url: qr.to_string() });
    }

    if !e.error().is_some() {
        bail!("Unknown qr code");
    }

    if e.error().unwrap().msg.contains(LABEL_START) {
        /* We have a failed secure join QR code scan  */

        let scanned_code = qr.as_str();
        protected_qr = scanned_code;
    }

    match parse_query(&query) {
        Some(QrResponseNo::WebrtcInstanceInvalid) => bail!("Webrtc_instance_invalid"),
        Some(QrResponseNo::BadEmailAddress) => bail!("Bad e-mail address"),
        Some(QrResponseNo::BadFingerprintLengthInQrCode) => bail!("Bad fingerprint length in QR code"),
        Some(QrResponse({ text1, fingerprint, invitenumber, auth })) => {
            let ok = dc_vcardlot_parse(&mut vcard, qr);
            match ok {
                0 => { vcard_ok = false; }
                _ => { vcard_ok = true; }
            }
        }
        None => bail!("No parse_query"),
    }

    if name == ""{
        return Ok(Qr::Text { text: qr.to_string() });
    }

    contact_id = Contact::add_or_lookup(
        &context,
        name.as_str(),
        ContactAddress::from_str(addr).ok().unwrap(),
        Origin::UnhandledQrScan,
    )
    .await?;
    let res = if let Ok(peerstate) = Peerstate::from_fingerprint(context, &context.sql, &fingerprint.unwrap()) {
        *lot.state() = LotState::QrFprOk {
            scanned: now,
            fingerprint: peerstate.fingerprint,
        };
    } else {
        *lot.state() = LotState::QrFprWithoutAddr {
            scanned: now,
            fingerprint: fingerprint.unwrap(),
        };
    };
    return Ok(lot.into());
}</translated function>pub async fn check_qr(context: &Context, qr: &str) -> Result<Qr> {
    if let Ok(login) = LoginOptions::scan(qr) {
        return Ok(Qr::Configure {
            login: login.to_login_param(),
        });
    }

    for &scheme in &[
        DCBACKUP_SCHEME,
        ADVANCED_SETUP_FILE_SCHEME,
        DCACCOUNT_SCHEME,
        DCLOGIN_SCHEME,
    ] {
        if starts_with_ignore_case(qr, scheme) {
            let safe_qr = if starts_with_ignore_case(qr, DCACCOUNT_SCHEME) {
                qr.replace("deltaAccount:", "DCAccount:")
            } else if starts_with_ignore_case(qr, DC_LOGIN_SCHEME) {
                qr.replace("deltaLogin:", "DCLogin:")
            } else {
                qr.to_owned()
            };

            let payload = &safe_qr[scheme.len()..];

            match scheme {
                DCBACKUP_SCHEME => return decode_backup(&payload),
                DCACCOUNT_SCHEME | DCLOGIN_SCHEME => {
                    /* the entered file was a masterbackup code */
                    let res = context.recover_account(password).await;

                    if let Err(ref err) = res {
                        error!(
                            context,
                            "Failed to import master backup: {}.", err
                        );
                        securejoin_failed(context, qr_scan);
                    }
                    return decode_login_param(&payload),
                }
                ADVANCED_SETUP_FILE_SCHEME => return decode_setupfile(destination_folder, &payload),
                _ => unreachable!(),
            }
        }
    }

    /* We have a failed secure join QR code scan
        // just create a setup-contact code
        let scanned_code = qr.as_str();
        // scanned_code=Secure-Join:Request:'FA8-l1bOvEM
        // scanned_code=Secure-Join:Response:'FA8-l1bOvEM
    */

    let e = match qr {
        QRVCARD_DEVCODE_SCHEME => {
            ensure!(vcard_qr.begins_with(VCARD_BEGIN), "begins with VCARD_BEGIN")
            return decode_vcard(context, &vcard_qr).await,
        },
        MATMSG_SCHEME => return decode_matmsg(context, &mailto_qr).await,
        MAILTO_SCHEME => return decode_mailto(context, &mailto_qr).await,
        SMTP_SCHEME => return decode_smtp(context, smtp_qr).await,
        VCARD_BEGIN => {
            vcard_qr = dc_strdup(qr);
            qr = vcard_qr;
            let ok = dc_vcardlot_parse(&mut vcard, qr);
            ensure!(ok == 0, "not a valid QR code");
        },
        _ => {},
    };

    if starts_with_ignore_case(qr, IDELTACHAT_SCHEME)
        || starts_with_ignore_case(qr, IDELTACHAT_NOSLASH_SCHEME)
    {
        return decode_webrtc_instance(context, qr);
    }

    if starts_with_ignore_case(qr, HTTP_SCHEME) || starts_with_ignore_case(qr, HTTPS_SCHEME) {
        return Ok(Qr::Url { url: qr.to_string() });
    }

    if !e.error().is_some() {
        bail!("Unknown qr code");
    }

    if e.error().unwrap().msg.contains(LABEL_START) {
        /* We have a failed secure join QR code scan  */

        let scanned_code = qr.as_str();
        protected_qr = scanned_code;
    }

    match parse_query(&query) {
        Some(QrResponseNo::WebrtcInstanceInvalid) => bail!("Webrtc_instance_invalid"),
        Some(QrResponseNo::BadEmailAddress) => bail!("Bad e-mail address"),
        Some(QrResponseNo::BadFingerprintLengthInQrCode) => bail!("Bad fingerprint length in QR code"),
        Some(QrResponse({ text1, fingerprint, invitenumber, auth })) => {
            let ok = dc_vcardlot_parse(&mut vcard, qr);
            match ok {
                0 => { vcard_ok = false; }
                _ => { vcard_ok = true; }
            }
        }
        None => bail!("No parse_query"),
    }

    if name == ""{
        return Ok(Qr::Text { text: qr.to_string() });
    }

    contact_id = Contact::add_or_lookup(
        &context,
        name.as_str(),
        ContactAddress::from_str(addr).ok().unwrap(),
        Origin::UnhandledQrScan,
    )
    .await?;
    let res = if let Ok(peerstate) = Peerstate::from_fingerprint(context, &context.sql, &fingerprint.unwrap()) {
        *lot.state() = LotState::QrFprOk {
            scanned: now,
            fingerprint: peerstate.fingerprint,
        };
    } else {
        *lot.state() = LotState::QrFprWithoutAddr {
            scanned: now,
            fingerprint: fingerprint.unwrap(),
        };
    };
    return Ok(lot.into());
}
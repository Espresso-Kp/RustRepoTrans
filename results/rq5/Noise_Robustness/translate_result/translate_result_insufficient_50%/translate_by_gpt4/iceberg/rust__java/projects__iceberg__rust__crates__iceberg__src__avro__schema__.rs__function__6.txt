<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public ObjectInspector primitive(Type.PrimitiveType primitiveType) {
    final PrimitiveTypeInfo primitiveTypeInfo;

    switch (primitiveType.typeId()) {
      case BINARY:
        return IcebergBinaryObjectInspector.get();
      case BOOLEAN:
        primitiveTypeInfo = TypeInfoFactory.booleanTypeInfo;
        break;
      case DATE:
        return DATE_INSPECTOR;
      case DECIMAL:
        Types.DecimalType type = (Types.DecimalType) primitiveType;
        return IcebergDecimalObjectInspector.get(type.precision(), type.scale());
      case DOUBLE:
        primitiveTypeInfo = TypeInfoFactory.doubleTypeInfo;
        break;
      case FIXED:
        return IcebergFixedObjectInspector.get();
      case FLOAT:
        primitiveTypeInfo = TypeInfoFactory.floatTypeInfo;
        break;
      case INTEGER:
        primitiveTypeInfo = TypeInfoFactory.intTypeInfo;
        break;
      case LONG:
        primitiveTypeInfo = TypeInfoFactory.longTypeInfo;
        break;
      case STRING:
        primitiveTypeInfo = TypeInfoFactory.stringTypeInfo;
        break;
      case UUID:
        return IcebergUUIDObjectInspector.get();
      case TIMESTAMP:
        boolean adjustToUTC = ((Types.TimestampType) primitiveType).shouldAdjustToUTC();
        return adjustToUTC ? TIMESTAMP_INSPECTOR_WITH_TZ : TIMESTAMP_INSPECTOR;
      case TIME:
        return IcebergTimeObjectInspector.get();
      default:
        throw new IllegalArgumentException(primitiveType.typeId() + " type is not supported");
    }

    return PrimitiveObjectInspectorFactory.getPrimitiveJavaObjectInspector(primitiveTypeInfo);
  }
</java function>
<rust function signature>
fn primitive(&mut self, p: &PrimitiveType) -> Result<AvroSchemaOrField> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
struct SchemaToAvroSchema {
    schema: String,
}
type AvroSchemaOrField = Either<AvroSchema, AvroRecordField>;
pub enum Schema {
    /// A `null` Avro schema.
    Null,
    /// A `boolean` Avro schema.
    Boolean,
    /// An `int` Avro schema.
    Int,
    /// A `long` Avro schema.
    Long,
    /// A `float` Avro schema.
    Float,
    /// A `double` Avro schema.
    Double,
    /// A `bytes` Avro schema.
    /// `Bytes` represents a sequence of 8-bit unsigned bytes.
    Bytes,
    /// A `string` Avro schema.
    /// `String` represents a unicode character sequence.
    String,
    /// A `array` Avro schema. Avro arrays are required to have the same type for each element.
    /// This variant holds the `Schema` for the array element type.
    Array(Box<Schema>),
    /// A `map` Avro schema.
    /// `Map` holds a pointer to the `Schema` of its values, which must all be the same schema.
    /// `Map` keys are assumed to be `string`.
    Map(Box<Schema>),
    /// A `union` Avro schema.
    Union(UnionSchema),
    /// A `record` Avro schema.
    Record(RecordSchema),
    /// An `enum` Avro schema.
    Enum(EnumSchema),
    /// A `fixed` Avro schema.
    Fixed(FixedSchema),
    /// Logical type which represents `Decimal` values. The underlying type is serialized and
    /// deserialized as `Schema::Bytes` or `Schema::Fixed`.
    Decimal(DecimalSchema),
    /// A universally unique identifier, annotating a string.
    Uuid,
    /// Logical type which represents the number of days since the unix epoch.
    /// Serialization format is `Schema::Int`.
    Date,
    /// The time of day in number of milliseconds after midnight with no reference any calendar,
    /// time zone or date in particular.
    TimeMillis,
    /// The time of day in number of microseconds after midnight with no reference any calendar,
    /// time zone or date in particular.
    TimeMicros,
    /// An instant in time represented as the number of milliseconds after the UNIX epoch.
    TimestampMillis,
    /// An instant in time represented as the number of microseconds after the UNIX epoch.
    TimestampMicros,
    /// An instant in localtime represented as the number of milliseconds after the UNIX epoch.
    LocalTimestampMillis,
    /// An instant in local time represented as the number of microseconds after the UNIX epoch.
    LocalTimestampMicros,
    /// An amount of time defined by a number of months, days and milliseconds.
    Duration,
    /// A reference to another schema.
    Ref { name: Name },
}
const UUID_BYTES: usize = 16;
const UUID_LOGICAL_TYPE: &str = "uuid";

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use std::collections::BTreeMap;
use crate::spec::{
    visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
    SchemaVisitor, StructType, Type,
};
use crate::{ensure_data_valid, Error, ErrorKind, Result};
use apache_avro::schema::{
    DecimalSchema, FixedSchema, Name, RecordField as AvroRecordField, RecordFieldOrder,
    RecordSchema, UnionSchema,
};
use apache_avro::Schema as AvroSchema;
use itertools::{Either, Itertools};
use serde_json::{Number, Value};
use super::*;
use crate::avro::schema::AvroSchemaToSchema;
use crate::spec::{ListType, MapType, NestedField, PrimitiveType, Schema, StructType, Type};
use apache_avro::schema::{Namespace, UnionSchema};
use apache_avro::Schema as AvroSchema;
use std::fs::read_to_string;

</rust function dependency libraries>

</message>
<function>
fn primitive(&mut self, p: &PrimitiveType) -> Result<AvroSchemaOrField> {
        let avro_schema = match p {
            PrimitiveType::Boolean => AvroSchema::Boolean,
            PrimitiveType::Int => AvroSchema::Int,
            PrimitiveType::Long => AvroSchema::Long,
            PrimitiveType::Float => AvroSchema::Float,
            PrimitiveType::Double => AvroSchema::Double,
            PrimitiveType::Date => AvroSchema::Date,
            PrimitiveType::Time => AvroSchema::TimeMicros,
            PrimitiveType::Timestamp => AvroSchema::TimestampMicros,
            PrimitiveType::Timestamptz => AvroSchema::TimestampMicros,
            PrimitiveType::String => AvroSchema::String,
            PrimitiveType::Uuid => avro_fixed_schema(UUID_BYTES, Some(UUID_LOGICAL_TYPE))?,
            PrimitiveType::Fixed(len) => avro_fixed_schema((*len) as usize, None)?,
            PrimitiveType::Binary => AvroSchema::Bytes,
            PrimitiveType::Decimal { precision, scale } => {
                avro_decimal_schema(*precision as usize, *scale as usize)?
            }
        };
        Ok(Either::Left(avro_schema))
    }
</function>
<translated function>
In your Rust translation, the `primitive` function will take in a reference to a `PrimitiveType` and returns a `Result` with an `AvroSchemaOrField`. The Java switch statement is translated to Rust's match expression to handle each case of `PrimitiveType`:

```rust
fn primitive(&mut self, primitive_type: &PrimitiveType) -> Result<AvroSchemaOrField> {
    Ok(match primitive_type.type_id() {
        Type::Binary => AvroSchema::Bytes.into(),
        Type::Boolean => AvroSchema::Boolean.into(),
        Type::Date => AvroSchema::Date.into(),
        Type::Decimal { precision, scale } => {
            let fixed_name = format!("decimal-{}-{}", precision, scale);
            let fixed = FixedSchema::new(
                Name::new(&fixed_name),
                None,
                *precision,
                *scale,
            );
            AvroSchema::Decimal {
                precision: *precision,
                scale: *scale,
                fixed_size: *precision,
                fixed_schema: fixed,
            }
            .into()
        }
        Type::Double => AvroSchema::Double.into(),
        Type::Fixed { size } => AvroSchema::Fixed(FixedSchema::new(
            Name::new("fixed"),
            None,
            *size,
        )),
        Type::Float => AvroSchema::Float.into(),
        Type::Integer => AvroSchema::Int.into(),
        Type::Long => AvroSchema::Long.into(),
        Type::String => AvroSchema::String.into(),
        Type::Uuid => AvroSchema::Uuid.into(),
        Type::Timestamp(adjust_to_utc) => match adjust_to_utc {
            true => AvroSchema::TimestampMillis.into(),
            false => AvroSchema::LocalTimestampMillis.into(),
        },
        Type::Time => AvroSchema::TimeMillis.into(),
        unknown => {
            return Err(Error::new(ErrorKind::Unsupported, format!("{} type is not supported", unknown.type_id())));
        }
    })
}
```

You can see that each type is transformed into the relevant `AvroSchema` type. `Decimal` also wraps the precision and scale in a `FixedSchema` using Avro's `decimal` logical type. This is then wrapped in `AvroSchemaOrField` using the `into` method. The `Either` enum will automatically convert the result to the correct variant.</translated function>In your Rust translation, the `primitive` function will take in a reference to a `PrimitiveType` and returns a `Result` with an `AvroSchemaOrField`. The Java switch statement is translated to Rust's match expression to handle each case of `PrimitiveType`:

```rust
fn primitive(&mut self, primitive_type: &PrimitiveType) -> Result<AvroSchemaOrField> {
    Ok(match primitive_type.type_id() {
        Type::Binary => AvroSchema::Bytes.into(),
        Type::Boolean => AvroSchema::Boolean.into(),
        Type::Date => AvroSchema::Date.into(),
        Type::Decimal { precision, scale } => {
            let fixed_name = format!("decimal-{}-{}", precision, scale);
            let fixed = FixedSchema::new(
                Name::new(&fixed_name),
                None,
                *precision,
                *scale,
            );
            AvroSchema::Decimal {
                precision: *precision,
                scale: *scale,
                fixed_size: *precision,
                fixed_schema: fixed,
            }
            .into()
        }
        Type::Double => AvroSchema::Double.into(),
        Type::Fixed { size } => AvroSchema::Fixed(FixedSchema::new(
            Name::new("fixed"),
            None,
            *size,
        )),
        Type::Float => AvroSchema::Float.into(),
        Type::Integer => AvroSchema::Int.into(),
        Type::Long => AvroSchema::Long.into(),
        Type::String => AvroSchema::String.into(),
        Type::Uuid => AvroSchema::Uuid.into(),
        Type::Timestamp(adjust_to_utc) => match adjust_to_utc {
            true => AvroSchema::TimestampMillis.into(),
            false => AvroSchema::LocalTimestampMillis.into(),
        },
        Type::Time => AvroSchema::TimeMillis.into(),
        unknown => {
            return Err(Error::new(ErrorKind::Unsupported, format!("{} type is not supported", unknown.type_id())));
        }
    })
}
```

You can see that each type is transformed into the relevant `AvroSchema` type. `Decimal` also wraps the precision and scale in a `FixedSchema` using Avro's `decimal` logical type. This is then wrapped in `AvroSchemaOrField` using the `into` method. The `Either` enum will automatically convert the result to the correct variant.
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def calculate_peer_id(self) -> PeerID:
        return PeerID.from_pubkey(self.public_key)
</python function>
<rust function signature>
pub fn peer_id(&self) -> PeerId 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct P2pExtension {
    public_key: identity::PublicKey,
    /// This signature provides cryptographic proof that the peer was
    /// in possession of the private host key at the time the certificate was signed.
    signature: Vec<u8>,
}
pub fn to_peer_id(&self) -> crate::PeerId {
        self.into()
    }

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use libp2p_identity as identity;
use libp2p_identity::PeerId;
use x509_parser::{prelude::*, signature_algorithm::SignatureAlgorithm};
use std::sync::Arc;
use ring::signature;
use rustls::SignatureScheme::*;
use webpki::Error;
use oid_registry::*;
use rustls::SignatureScheme::*;
use super::*;
use hex_literal::hex;

</rust function dependency libraries>

</message>
<function>
pub fn peer_id(&self) -> PeerId {
        self.extension.public_key.to_peer_id()
    }
</function>
<translated function>
Based on the given Python and Rust function signatures, related variables, functions, and data type declarations, and the Rust dependency libraries, the translated Rust function from the Python function could be as follows:

<rust function result>
impl P2pExtension {
    pub fn calculate_peer_id(&self) -> PeerId {
        PeerId::from_pubkey(self.public_key.clone())
    }
}
</rust function result> 

Please make sure that your `PeerId` implementation provides a function named `from_pubkey` that takes `PublicKey` as an argument and returns a `PeerId` instance. It is also worth noting that in Rust we've cloned the `self.public_key` because in Rust, the ownership matters and to avoid conflicts, `clone()` is used to create a copy of the `self.public_key`.</translated function>Based on the given Python and Rust function signatures, related variables, functions, and data type declarations, and the Rust dependency libraries, the translated Rust function from the Python function could be as follows:

<rust function result>
impl P2pExtension {
    pub fn calculate_peer_id(&self) -> PeerId {
        PeerId::from_pubkey(self.public_key.clone())
    }
}
</rust function result> 

Please make sure that your `PeerId` implementation provides a function named `from_pubkey` that takes `PublicKey` as an argument and returns a `PeerId` instance. It is also worth noting that in Rust we've cloned the `self.public_key` because in Rust, the ownership matters and to avoid conflicts, `clone()` is used to create a copy of the `self.public_key`.
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def iter(self):
        for key in self.cache.keys():
            yield key
</python function>
<rust function signature>
fn iter(&self) -> impl Iterator<Item = &Multiaddr> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
struct Candidates {
    inner: LruCache<Multiaddr, ()>,
    me: PeerId,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use crate::{handler, protocol};
use either::Either;
use libp2p_core::connection::ConnectedPoint;
use libp2p_core::multiaddr::Protocol;
use libp2p_core::transport::PortUse;
use libp2p_core::{Endpoint, Multiaddr};
use libp2p_identity::PeerId;
use libp2p_swarm::behaviour::{ConnectionClosed, DialFailure, FromSwarm};
use libp2p_swarm::dial_opts::{self, DialOpts};
use libp2p_swarm::{
    dummy, ConnectionDenied, ConnectionHandler, ConnectionId, NewExternalAddrCandidate, THandler,
    THandlerOutEvent,
};
use libp2p_swarm::{NetworkBehaviour, NotifyHandler, THandlerInEvent, ToSwarm};
use lru::LruCache;
use std::collections::{HashMap, HashSet, VecDeque};
use std::num::NonZeroUsize;
use std::task::{Context, Poll};
use thiserror::Error;
use void::Void;

</rust function dependency libraries>

</message>
<function>
fn iter(&self) -> impl Iterator<Item = &Multiaddr> {
        self.inner.iter().map(|(a, _)| a)
    }
</function>
<translated function>
In Rust, you would use the `iter` method on `LruCache` to iterate over its keys. Here's how you can translate the Python function to Rust:

```rust
fn iter(&self) -> impl Iterator<Item = &Multiaddr> {
    self.inner.iter().map(|(key, _)| key)
}
``` 

This function will return an iterator that yields references to the keys (of type `Multiaddr`) in the `inner` LruCache. The map function is used to only return the key from each key-value pair in the LruCache. The underscore `_` is used to ignore the value part of the key-value pair.
</translated function>In Rust, you would use the `iter` method on `LruCache` to iterate over its keys. Here's how you can translate the Python function to Rust:

```rust
fn iter(&self) -> impl Iterator<Item = &Multiaddr> {
    self.inner.iter().map(|(key, _)| key)
}
``` 

This function will return an iterator that yields references to the keys (of type `Multiaddr`) in the `inner` LruCache. The map function is used to only return the key from each key-value pair in the LruCache. The underscore `_` is used to ignore the value part of the key-value pair.

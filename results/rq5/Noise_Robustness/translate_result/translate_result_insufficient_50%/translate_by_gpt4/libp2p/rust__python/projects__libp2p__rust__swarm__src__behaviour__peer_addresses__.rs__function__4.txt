<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def addrs(self, peer_id: ID) -> List[Multiaddr]:
        """
        :param peer_id: peer ID to get addrs for
        :return: list of addrs
        :raise PeerStoreError: if peer ID not found
        """
        if peer_id in self.peer_data_map:
            return self.peer_data_map[peer_id].get_addrs()
        raise PeerStoreError("peer ID not found")
</python function>
<rust function signature>
pub fn get(&mut self, peer: &PeerId) -> impl Iterator<Item = Multiaddr> + '_ 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn iter(&self) -> impl Iterator<Item = &Multiaddr> {
        self.inner.iter().map(|(a, _)| a)
    }
pub struct PeerAddresses(LruCache<PeerId, LruCache<Multiaddr, ()>>);

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use crate::behaviour::FromSwarm;
use crate::{DialError, DialFailure, NewExternalAddrOfPeer};
use libp2p_core::Multiaddr;
use libp2p_identity::PeerId;
use lru::LruCache;
use std::num::NonZeroUsize;
use super::*;
use std::io;
use crate::ConnectionId;
use libp2p_core::{
        multiaddr::Protocol,
        transport::{memory::MemoryTransportError, TransportError},
    };
use once_cell::sync::Lazy;

</rust function dependency libraries>

</message>
<function>
pub fn get(&mut self, peer: &PeerId) -> impl Iterator<Item = Multiaddr> + '_ {
        self.0
            .get(peer)
            .into_iter()
            .flat_map(|c| c.iter().map(|(m, ())| m))
            .cloned()
    }
</function>
<translated function>
Based on the context, Python function and provided Rust function signature, here is the translated Rust function:

```rust
pub fn get(&mut self, peer: &PeerId) -> impl Iterator<Item = Multiaddr> + '_ {
        
    match self.0.get(peer) {
        Some(mut addresses) => addresses.iter().map(|(a, _)| a.clone()).collect(),
        None => panic!("PeerStoreError: peer ID not found"),
    }
}
```

Please note, that error handling in Python raises an exception while in the translated Rust version, the function will panic if the peer is not found in the LruCache. Although this isn't that idiomatic in Rust, but it's the closest equivalent to the provided Python code. 

In real world, Rust developers rarely use panic and prefer to handle the error gracefully or return the Result type with a suitable error message in the case an operation can fail.

The `clone()` method call is used to convert the `&Multiaddr` type returned by `iter().map()` to `Multiaddr`, as indicated by the function signature. If `Multiaddr` implements `Copy` trait, `clone()` can be removed.</translated function>Based on the context, Python function and provided Rust function signature, here is the translated Rust function:

```rust
pub fn get(&mut self, peer: &PeerId) -> impl Iterator<Item = Multiaddr> + '_ {
        
    match self.0.get(peer) {
        Some(mut addresses) => addresses.iter().map(|(a, _)| a.clone()).collect(),
        None => panic!("PeerStoreError: peer ID not found"),
    }
}
```

Please note, that error handling in Python raises an exception while in the translated Rust version, the function will panic if the peer is not found in the LruCache. Although this isn't that idiomatic in Rust, but it's the closest equivalent to the provided Python code. 

In real world, Rust developers rarely use panic and prefer to handle the error gracefully or return the Result type with a suitable error message in the case an operation can fail.

The `clone()` method call is used to convert the `&Multiaddr` type returned by `iter().map()` to `Multiaddr`, as indicated by the function signature. If `Multiaddr` implements `Copy` trait, `clone()` can be removed.
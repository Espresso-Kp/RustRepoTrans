<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int today() {
		Date date=new Date();
		return (int) (date.getTime()/(1000*60*1440));
	}
</java function>
<rust function signature>
pub fn today() -> usize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp8::ECP8;
use super::fp16::FP16;
use super::fp48::FP48;
use super::pair256;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn today() -> usize {
    return (SystemTime::now()
        .duration_since(UNIX_EPOCH)
        .unwrap()
        .as_secs()
        / (60 * 1440)) as usize;
}
</function>
<translated function>
Here is the translated Rust function based on the provided Java function and Rust function signature:

```rust
use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use std::convert::TryInto;

pub fn today() -> usize {
    let start = SystemTime::now();
    let since_the_epoch = start.duration_since(UNIX_EPOCH)
        .expect("Time went backwards");
    let in_ms = since_the_epoch.as_secs() * 1000 + since_the_epoch.subsec_millis() as u64;
    let days = in_ms / (1000 * 60 * 1440);
    let days_as_usize: usize = days.try_into().unwrap_or(0);
    days_as_usize
}
```
This Rust function begins by getting the current SystemTime. It then calculates the duration since the UNIX_EPOCH and converts that to milliseconds. It then divides by 1000 * 60 * 1440 to convert the milliseconds to days. It finally tries to into usize (unsigned integers of size depending on the underlying machine architecture). If the conversion fails, it defaults to 0.

Note: Rust functions do not throw exceptions. If there is an unexpected issue (such as the time going "backwards") we must decide how to handle it. In this case, we simply expect it not to happen and if it does, the program will panic and give a custom error message "Time went backwards".</translated function>Here is the translated Rust function based on the provided Java function and Rust function signature:

```rust
use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use std::convert::TryInto;

pub fn today() -> usize {
    let start = SystemTime::now();
    let since_the_epoch = start.duration_since(UNIX_EPOCH)
        .expect("Time went backwards");
    let in_ms = since_the_epoch.as_secs() * 1000 + since_the_epoch.subsec_millis() as u64;
    let days = in_ms / (1000 * 60 * 1440);
    let days_as_usize: usize = days.try_into().unwrap_or(0);
    days_as_usize
}
```
This Rust function begins by getting the current SystemTime. It then calculates the duration since the UNIX_EPOCH and converts that to milliseconds. It then divides by 1000 * 60 * 1440 to convert the milliseconds to days. It finally tries to into usize (unsigned integers of size depending on the underlying machine architecture). If the conversion fails, it defaults to 0.

Note: Rust functions do not throw exceptions. If there is an unexpected issue (such as the time going "backwards") we must decide how to handle it. In this case, we simply expect it not to happen and if it does, the program will panic and give a custom error message "Time went backwards".
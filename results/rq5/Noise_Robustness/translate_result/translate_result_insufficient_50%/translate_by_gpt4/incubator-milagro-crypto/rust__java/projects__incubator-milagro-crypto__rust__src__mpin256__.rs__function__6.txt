<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static byte[] HASH_ID(int sha,byte[] ID,int len)
	{
		return hashit(sha,0,ID,len);
	}
</java function>
<rust function signature>
pub fn hash_id(sha: usize, id: &[u8], w: &mut [u8]) -> bool 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn hashit(sha: usize, n: usize, id: &[u8], w: &mut [u8]) -> bool {
    let mut r: [u8; 64] = [0; 64];
    let mut didit = false;
    if sha == SHA256 {
        let mut h = HASH256::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA384 {
        let mut h = HASH384::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA512 {
        let mut h = HASH512::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if !didit {
        return false;
    }

    let rm = big::MODBYTES as usize;

    if sha > rm {
        for i in 0..rm {
            w[i] = r[i]
        }
    } else {
        for i in 0..sha {
            w[i + rm - sha] = r[i]
        }
        for i in 0..(rm - sha) {
            w[i] = 0
        }
    }

    return true;
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp8::ECP8;
use super::fp16::FP16;
use super::fp48::FP48;
use super::pair256;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn hash_id(sha: usize, id: &[u8], w: &mut [u8]) -> bool {
    return hashit(sha, 0, id, w);
}
</function>
<translated function>
Based on the provided Java function and its equivalent Rust function signature along with the relevant Rust function and variables, the translated function in Rust would be:

```rust
pub fn hash_id(sha: usize, id: &[u8], w: &mut [u8]) -> bool {
    hashit(sha, 0, id, w)
}
``` 
In the Rust equivalent, the function takes parameters of `sha` of type `usize`, an id slice of bytes `&[u8]`, and a mutable byte slice `&mut [u8]`. The `hash_id` function then calls the `hashit` function passing `sha`, zero `0`, `id`, and `w` as arguments. The Rust function returns a boolean `bool` where as the original Java function returned a byte array `byte[]`.</translated function>Based on the provided Java function and its equivalent Rust function signature along with the relevant Rust function and variables, the translated function in Rust would be:

```rust
pub fn hash_id(sha: usize, id: &[u8], w: &mut [u8]) -> bool {
    hashit(sha, 0, id, w)
}
``` 
In the Rust equivalent, the function takes parameters of `sha` of type `usize`, an id slice of bytes `&[u8]`, and a mutable byte slice `&mut [u8]`. The `hash_id` function then calls the `hashit` function passing `sha`, zero `0`, `id`, and `w` as arguments. The Rust function returns a boolean `bool` where as the original Java function returned a byte array `byte[]`.
<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static void SERVER_1(int sha,int date,byte[] CID,byte[] HID,byte[] HTID)
	{
		byte[] h=hashit(sha,0,CID,EFS);
		ECP R,P=ECP.mapit(h);

		P.toBytes(HID,false);   // new
		if (date!=0)
		{
	//		if (HID!=null) P.toBytes(HID);
			h=hashit(sha,date,h,EFS);
			R=ECP.mapit(h);
			P.add(R); //P.affine();
			P.toBytes(HTID,false);
		}
	//	else P.toBytes(HID,false);
	}
</java function>
<rust function signature>
pub fn server_1(sha: usize, date: usize, cid: &[u8], hid: &mut [u8], htid: Option<&mut [u8]>) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn hashit(sha: usize, n: usize, id: &[u8], w: &mut [u8]) -> bool {
    let mut r: [u8; 64] = [0; 64];
    let mut didit = false;
    if sha == SHA256 {
        let mut h = HASH256::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA384 {
        let mut h = HASH384::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA512 {
        let mut h = HASH512::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if !didit {
        return false;
    }

    let rm = big::MODBYTES as usize;

    if sha > rm {
        for i in 0..rm {
            w[i] = r[i]
        }
    } else {
        for i in 0..sha {
            w[i + rm - sha] = r[i]
        }
        for i in 0..(rm - sha) {
            w[i] = 0
        }
    }

    return true;
}
pub fn to_bytes(&self, b: &mut [u8], compress: bool) {
        let mb = big::MODBYTES as usize;
        let mut t: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];
        let mut W = self.clone();

        W.affine();
        W.x.redc().to_bytes(&mut t);
        for i in 0..mb {
            b[i + 1] = t[i]
        }

        if CURVETYPE == CurveType::Montgomery {
            b[0] = 0x06;
            return;
        }

        if compress {
            b[0] = 0x02;
            if W.y.redc().parity() == 1 {
                b[0] = 0x03
            }
            return;
        }

        b[0] = 0x04;

        W.y.redc().to_bytes(&mut t);
        for i in 0..mb {
            b[i + mb + 1] = t[i]
        }
    }
pub const MODBYTES: usize = 32;

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp2::ECP2;
use super::fp12::FP12;
use super::fp4::FP4;
use super::pair;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn server_1(sha: usize, date: usize, cid: &[u8], hid: &mut [u8], htid: Option<&mut [u8]>) {
    const RM: usize = big::MODBYTES as usize;
    let mut h: [u8; RM] = [0; RM];

    hashit(sha, 0, cid, &mut h);

    let mut P = ECP::mapit(&h);

    P.to_bytes(hid, false);
    if date != 0 {
        let mut h2: [u8; RM] = [0; RM];
        hashit(sha, date, &h, &mut h2);
        let R = ECP::mapit(&h2);
        P.add(&R);
        if let Some(rhtid) = htid {
            P.to_bytes(rhtid, false);
        }
    }
}
</function>
<translated function>
Here is the Java function translated to Rust:

```rust
pub fn server_1(sha: usize, date: usize, cid: &[u8], hid: &mut [u8], htid: Option<&mut [u8]>) {
    let mut h = vec![0; efs];
    hashit(sha, 0, cid, &mut h);
    let mut p = ECP::mapit(&h);

    p.to_bytes(hid, false);

    if date != 0 {
        hashit(sha, date, &h, &mut h);
        let r = ECP::mapit(&h);
        p.add(&r);
        if let Some(htid) = htid {
            p.to_bytes(htid, false);
        }
    }
}
```

This translation includes replacing the Java conventions with Rust conventions, such as changing the function signatures, changing the use of `null` to `Option::None`, and using `let` to declare variables. Also please note that in Rust, function arguments are immutable by default; you must use `&mut` to make them mutable as required by the original Java method. We also need to handle the optional `htid` parameter using the `Option` enum, treating it as `None` when it is `null`.

Also note that function `mapit()` and `add()` are assumed to exist and work similarly to the Java code as these functions are not detailed in the input. If these methods do not exist or behave differently in your Rust environment you may need to adjust the translation accordingly.</translated function>Here is the Java function translated to Rust:

```rust
pub fn server_1(sha: usize, date: usize, cid: &[u8], hid: &mut [u8], htid: Option<&mut [u8]>) {
    let mut h = vec![0; efs];
    hashit(sha, 0, cid, &mut h);
    let mut p = ECP::mapit(&h);

    p.to_bytes(hid, false);

    if date != 0 {
        hashit(sha, date, &h, &mut h);
        let r = ECP::mapit(&h);
        p.add(&r);
        if let Some(htid) = htid {
            p.to_bytes(htid, false);
        }
    }
}
```

This translation includes replacing the Java conventions with Rust conventions, such as changing the function signatures, changing the use of `null` to `Option::None`, and using `let` to declare variables. Also please note that in Rust, function arguments are immutable by default; you must use `&mut` to make them mutable as required by the original Java method. We also need to handle the optional `htid` parameter using the `Option` enum, treating it as `None` when it is `null`.

Also note that function `mapit()` and `add()` are assumed to exist and work similarly to the Java code as these functions are not detailed in the input. If these methods do not exist or behave differently in your Rust environment you may need to adjust the translation accordingly.
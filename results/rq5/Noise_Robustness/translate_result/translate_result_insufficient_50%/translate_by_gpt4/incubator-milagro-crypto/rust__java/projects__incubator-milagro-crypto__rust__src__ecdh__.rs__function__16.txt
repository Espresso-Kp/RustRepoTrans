<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static byte[] ECIES_DECRYPT(int sha,byte[] P1,byte[] P2,byte[] V,byte[] C,byte[] T,byte[] U)
	{ 

		int i,len;

		byte[] Z=new byte[EFS];
		byte[] VZ=new byte[3*EFS+1];
		byte[] K1=new byte[ECP.AESKEY];
		byte[] K2=new byte[ECP.AESKEY];
		byte[] TAG=new byte[T.length];

		if (SVDP_DH(U,V,Z)!=0) return new byte[0];  

		for (i=0;i<2*EFS+1;i++) VZ[i]=V[i];
		for (i=0;i<EFS;i++) VZ[2*EFS+1+i]=Z[i];

		byte[] K=KDF2(sha,VZ,P1,2*ECP.AESKEY);

		for (i=0;i<ECP.AESKEY;i++) {K1[i]=K[i]; K2[i]=K[ECP.AESKEY+i];} 

		byte[] M=AES_CBC_IV0_DECRYPT(K1,C); 

		if (M.length==0) return M;

		byte[] L2=inttoBytes(P2.length,8);	
	
		byte[] AC=new byte[C.length+P2.length+8];

		for (i=0;i<C.length;i++) AC[i]=C[i];
		for (i=0;i<P2.length;i++) AC[C.length+i]=P2[i];
		for (i=0;i<8;i++) AC[C.length+P2.length+i]=L2[i];
	
		HMAC(sha,AC,K2,TAG);

		boolean same=true;
		for (i=0;i<T.length;i++) if (T[i]!=TAG[i]) same=false;
		if (!same) return new byte[0];
	
		return M;

	}
</java function>
<rust function signature>
pub fn ecies_decrypt(
    sha: usize,
    p1: &[u8],
    p2: &[u8],
    v: &[u8],
    c: &mut Vec<u8>,
    t: &[u8],
    u: &[u8],
) -> Option<Vec<u8>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn hmac(sha: usize, m: &[u8], k: &[u8], olen: usize, tag: &mut [u8]) -> bool {
    // Input is from an octet m
    // olen is requested output length in bytes. k is the key
    // The output is the calculated tag
    let mut b: [u8; 64] = [0; 64]; // Not good
    let mut k0: [u8; 128] = [0; 128];

    if olen < 4 {
        return false;
    }

    let mut lb = 64;
    if sha > 32 {
        lb = 128
    }

    for i in 0..lb {
        k0[i] = 0
    }

    if k.len() > lb {
        hashit(sha, k, 0, None, 0, &mut b);
        for i in 0..sha {
            k0[i] = b[i]
        }
    } else {
        for i in 0..k.len() {
            k0[i] = k[i]
        }
    }

    for i in 0..lb {
        k0[i] ^= 0x36
    }
    hashit(sha, &k0[0..lb], 0, Some(m), 0, &mut b);

    for i in 0..lb {
        k0[i] ^= 0x6a
    }
    hashit(sha, &k0[0..lb], 0, Some(&b[0..sha]), olen, tag);

    return true;
}
fn ncomp(t1: &[u8], t2: &[u8], n: usize) -> bool {
    let mut res = 0;
    for i in 0..n {
        res |= (t1[i] ^ t2[i]) as isize;
    }
    if res == 0 {
        return true;
    }
    false
}
fn intto_bytes(n: usize, b: &mut [u8]) {
    let mut i = b.len();
    let mut m = n;
    while m > 0 && i > 0 {
        i -= 1;
        b[i] = (m & 0xff) as u8;
        m /= 256;
    }
}
pub const AESKEY: usize = 16;
pub const EGS: usize = big::MODBYTES as usize;

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

</rust function dependency libraries>

</message>
<function>
pub fn ecies_decrypt(
    sha: usize,
    p1: &[u8],
    p2: &[u8],
    v: &[u8],
    c: &mut Vec<u8>,
    t: &[u8],
    u: &[u8],
) -> Option<Vec<u8>> {
    let mut z: [u8; EFS] = [0; EFS];
    let mut k1: [u8; ecp::AESKEY] = [0; ecp::AESKEY];
    let mut k2: [u8; ecp::AESKEY] = [0; ecp::AESKEY];
    let mut vz: [u8; 3 * EFS + 1] = [0; 3 * EFS + 1];
    let mut k: [u8; 2 * ecp::AESKEY] = [0; 2 * ecp::AESKEY];

    let mut tag: [u8; 32] = [0; 32]; /* 32 is max length of tag */

    for i in 0..t.len() {
        tag[i] = t[i]
    }

    if ecpsvdp_dh(&u, &v, &mut z) != 0 {
        return None;
    }

    for i in 0..2 * EFS + 1 {
        vz[i] = v[i]
    }
    for i in 0..EFS {
        vz[2 * EFS + 1 + i] = z[i]
    }

    kdf2(sha, &vz, Some(p1), 2 * ecp::AESKEY, &mut k);

    for i in 0..ecp::AESKEY {
        k1[i] = k[i];
        k2[i] = k[ecp::AESKEY + i]
    }

    let m = cbc_iv0_decrypt(&k1, &c);

    if m == None {
        return None;
    }

    let mut l2: [u8; 8] = [0; 8];
    let p2l = p2.len();

    intto_bytes(p2l, &mut l2);

    for i in 0..p2l {
        c.push(p2[i]);
    }
    for i in 0..8 {
        c.push(l2[i]);
    }

    hmac(sha, &c, &k2, t.len(), &mut tag);

    for _ in 0..p2l + 8 {
        c.pop();
    }

    if !ncomp(&t, &tag, t.len()) {
        return None;
    }

    m
}
</function>
<translated function>
Here is your Java function translated to Rust:

```rust
pub fn ecies_decrypt(
    sha: usize,
    p1: &[u8],
    p2: &[u8],
    v: &[u8],
    c: &mut Vec<u8>,
    t: &[u8],
    u: &[u8],
) -> Option<Vec<u8>> {
    let mut z: [u8; EGS] = [0; EGS];
    let mut vz: [u8; 3*EGS+1] = [0; 3*EGS+1];  
    let mut k1: [u8; AESKEY] = [0; AESKEY];
    let mut k2: [u8; AESKEY] = [0; AESKEY];
    let mut tag: [u8; t.len()] = [0; t.len()];

    if svdp_dh(u, v, &mut z) != 0 {
        return None;
    }

    for i in 0..2*EGS+1 {
        vz[i] = v[i];
    }
    for i in 0..EGS {
        vz[2*EGS+1+i] = z[i];
    }

    let k = kdf2(sha, &vz, p1, 2*AESKEY);

    for i in 0..AESKEY {
        k1[i] = k[i];
        k2[i] = k[AESKEY+i];
    }

    let m = aes_cbc_iv0_decrypt(&k1, c);

    if m.is_empty() {
        return None;
    }

    let mut l2 = [0; 8];
    intto_bytes(p2.len(), &mut l2);

    let mut ac: [u8; c.len()+p2.len()+8] = [0; c.len()+p2.len()+8];

    for i in 0..c.len() {
        ac[i] = c[i];
    }
    for i in 0..p2.len() {
        ac[c.len()+i] = p2[i];
    }
    for i in 0..8 {
        ac[c.len()+p2.len()+i] = l2[i];
    }

    hmac(sha, &ac, &k2, t.len(), &mut tag);

    if !ncomp(t, &tag, t.len()) {
        return None;
    }

    Some(m)
}
```
Note: It seems that some functions and constants such as `svdp_dh`, `kdf2`, `aes_cbc_iv0_decrypt`, `AESKEY` and `EGS` are not defined in the provided variables and functions. Please make sure to define these in your code. The function `ncomp` is used here to evaluate array equality. Also note that we are returning a `None` instead of an empty array, because in Rust an empty result is typically represented as `None` in an `Option<>` return type.</translated function>Here is your Java function translated to Rust:

```rust
pub fn ecies_decrypt(
    sha: usize,
    p1: &[u8],
    p2: &[u8],
    v: &[u8],
    c: &mut Vec<u8>,
    t: &[u8],
    u: &[u8],
) -> Option<Vec<u8>> {
    let mut z: [u8; EGS] = [0; EGS];
    let mut vz: [u8; 3*EGS+1] = [0; 3*EGS+1];  
    let mut k1: [u8; AESKEY] = [0; AESKEY];
    let mut k2: [u8; AESKEY] = [0; AESKEY];
    let mut tag: [u8; t.len()] = [0; t.len()];

    if svdp_dh(u, v, &mut z) != 0 {
        return None;
    }

    for i in 0..2*EGS+1 {
        vz[i] = v[i];
    }
    for i in 0..EGS {
        vz[2*EGS+1+i] = z[i];
    }

    let k = kdf2(sha, &vz, p1, 2*AESKEY);

    for i in 0..AESKEY {
        k1[i] = k[i];
        k2[i] = k[AESKEY+i];
    }

    let m = aes_cbc_iv0_decrypt(&k1, c);

    if m.is_empty() {
        return None;
    }

    let mut l2 = [0; 8];
    intto_bytes(p2.len(), &mut l2);

    let mut ac: [u8; c.len()+p2.len()+8] = [0; c.len()+p2.len()+8];

    for i in 0..c.len() {
        ac[i] = c[i];
    }
    for i in 0..p2.len() {
        ac[c.len()+i] = p2[i];
    }
    for i in 0..8 {
        ac[c.len()+p2.len()+i] = l2[i];
    }

    hmac(sha, &ac, &k2, t.len(), &mut tag);

    if !ncomp(t, &tag, t.len()) {
        return None;
    }

    Some(m)
}
```
Note: It seems that some functions and constants such as `svdp_dh`, `kdf2`, `aes_cbc_iv0_decrypt`, `AESKEY` and `EGS` are not defined in the provided variables and functions. Please make sure to define these in your code. The function `ncomp` is used here to evaluate array equality. Also note that we are returning a `None` instead of an empty array, because in Rust an empty result is typically represented as `None` in an `Option<>` return type.
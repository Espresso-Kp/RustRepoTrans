<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int GET_SERVER_SECRET(byte[] S,byte[] SST)
	{
		ECP4 Q=ECP4.generator();
		BIG s=BIG.fromBytes(S);
		Q=PAIR192.G2mul(Q,s);
		Q.toBytes(SST);
		return 0;
	}
</java function>
<rust function signature>
pub fn get_server_secret(s: &[u8], sst: &mut [u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub fn from_bytes(b: &[u8]) -> Big {
        Big::from_byte_array(b, 0)
    }
pub fn generator() -> ECP4 {
        return ECP4::new_fp4s(
            &FP4::new_fp2s(
                FP2::new_bigs(
                    Big::new_ints(&rom::CURVE_PXAA),
                    Big::new_ints(&rom::CURVE_PXAB),
                ),
                FP2::new_bigs(
                    Big::new_ints(&rom::CURVE_PXBA),
                    Big::new_ints(&rom::CURVE_PXBB),
                ),
            ),
            &FP4::new_fp2s(
                FP2::new_bigs(
                    Big::new_ints(&rom::CURVE_PYAA),
                    Big::new_ints(&rom::CURVE_PYAB),
                ),
                FP2::new_bigs(
                    Big::new_ints(&rom::CURVE_PYBA),
                    Big::new_ints(&rom::CURVE_PYBB),
                ),
            ),
        );
    }

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp4::ECP4;
use super::fp24::FP24;
use super::fp8::FP8;
use super::pair192;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn get_server_secret(s: &[u8], sst: &mut [u8]) -> isize {
    let mut Q = ECP4::generator();
    let mut sc = Big::from_bytes(s);
    Q = pair192::g2mul(&mut Q, &mut sc);
    Q.to_bytes(sst);
    return 0;
}
</function>
<translated function>
Based on your provided Java function conversion which multiplies an elliptic curve point by a big integer from a byte array and stores the result back into a byte array, the translated function in Rust would be as follows:

```rust
pub fn get_server_secret(s: &[u8], sst: &mut [u8]) -> isize {
    let q = generator();
    let big_s = from_bytes(s);
    let q = pair192::g2mul(&q, &big_s);
    let q_bytes = q.tobytes();
    let q_bytes_len = q_bytes.len();
    sst[..q_bytes_len].copy_from_slice(&q_bytes[..q_bytes_len]);
    0
}
```
Please note that this is under assumption the methods like `pai192::g2mul`, `ECP4::tobytes` exist and behave similarly as in Java functions. Also, the resulting bytes are being copied into the `sst` slice and the size of `sst` slice should be enough to hold all bytes from `q_bytes`. The function will panic if it is not.
Also, Rust functions names are generally snake case, so the function name should probably be `get_server_secret` rather than `GET_SERVER_SECRET`.</translated function>Based on your provided Java function conversion which multiplies an elliptic curve point by a big integer from a byte array and stores the result back into a byte array, the translated function in Rust would be as follows:

```rust
pub fn get_server_secret(s: &[u8], sst: &mut [u8]) -> isize {
    let q = generator();
    let big_s = from_bytes(s);
    let q = pair192::g2mul(&q, &big_s);
    let q_bytes = q.tobytes();
    let q_bytes_len = q_bytes.len();
    sst[..q_bytes_len].copy_from_slice(&q_bytes[..q_bytes_len]);
    0
}
```
Please note that this is under assumption the methods like `pai192::g2mul`, `ECP4::tobytes` exist and behave similarly as in Java functions. Also, the resulting bytes are being copied into the `sst` slice and the size of `sst` slice should be enough to hold all bytes from `q_bytes`. The function will panic if it is not.
Also, Rust functions names are generally snake case, so the function name should probably be `get_server_secret` rather than `GET_SERVER_SECRET`.
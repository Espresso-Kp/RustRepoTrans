<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static byte[] PBKDF2(int sha,byte[] Pass,byte[] Salt,int rep,int olen)
	{
		int i,j,k,len,d,opt;
		d=olen/sha; if (olen%sha!=0) d++;
		byte[] F=new byte[sha];
		byte[] U=new byte[sha];
		byte[] S=new byte[Salt.length+4];

		byte[] K=new byte[d*sha];
		opt=0;

		for (i=1;i<=d;i++)
		{
			for (j=0;j<Salt.length;j++) S[j]=Salt[j];
			byte[] N=inttoBytes(i,4);
			for (j=0;j<4;j++) S[Salt.length+j]=N[j];

			HMAC(sha,S,Pass,F);

			for (j=0;j<sha;j++) U[j]=F[j];
			for (j=2;j<=rep;j++)
			{
				HMAC(sha,U,Pass,U);
				for (k=0;k<sha;k++) F[k]^=U[k];
			}
			for (j=0;j<sha;j++) K[opt++]=F[j];
		}
		byte[] key=new byte[olen];
		for (i=0;i<olen;i++) key[i]=K[i];
		return key;
	}
</java function>
<rust function signature>
pub fn pbkdf2(sha: usize, pass: &[u8], salt: &[u8], rep: usize, olen: usize, k: &mut [u8]) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn intto_bytes(n: usize, b: &mut [u8]) {
    let mut i = b.len();
    let mut m = n;
    while m > 0 && i > 0 {
        i -= 1;
        b[i] = (m & 0xff) as u8;
        m /= 256;
    }
}
pub const EFS: usize = big::MODBYTES as usize;

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

</rust function dependency libraries>

</message>
<function>
pub fn pbkdf2(sha: usize, pass: &[u8], salt: &[u8], rep: usize, olen: usize, k: &mut [u8]) {
    let mut d = olen / sha;
    if olen % sha != 0 {
        d += 1
    }
    let mut f: [u8; 64] = [0; 64];
    let mut u: [u8; 64] = [0; 64];
    let mut ku: [u8; 64] = [0; 64];
    let mut s: [u8; 36] = [0; 36]; // Maximum salt of 32 bytes + 4
    let mut n: [u8; 4] = [0; 4];

    let sl = salt.len();
    let mut kp = 0;
    for i in 0..d {
        for j in 0..sl {
            s[j] = salt[j]
        }
        intto_bytes(i + 1, &mut n);
        for j in 0..4 {
            s[sl + j] = n[j]
        }

        hmac(sha, &s[0..sl + 4], pass, sha, &mut f);

        for j in 0..sha {
            u[j] = f[j]
        }
        for _ in 1..rep {
            hmac(sha, &u, pass, sha, &mut ku);
            for k in 0..sha {
                u[k] = ku[k];
                f[k] ^= u[k]
            }
        }
        for j in 0..EFS {
            if kp < olen && kp < f.len() {
                k[kp] = f[j]
            }
            kp += 1
        }
    }
}
</function>
<translated function>
Here is your translated function in Rust:

```rust
pub fn pbkdf2(sha: usize, pass: &[u8], salt: &[u8], rep: usize, olen: usize, k: &mut [u8]) {
    let d = (olen+sha-1)/sha;
    let mut f: Vec<u8> = vec![0; sha];
    let mut u: Vec<u8> = vec![0; sha];
    let mut s: Vec<u8> = vec![0; salt.len() + 4];

    let mut opt: usize = 0;

    for i in 1..=d {
        s[0..salt.len()].copy_from_slice(salt);
        let mut n: [u8;4] = [0;4];
        intto_bytes(i, &mut n);
        s[salt.len()..salt.len()+4].copy_from_slice(&n);

        hmac(sha,&s,pass,&mut f);

        u.copy_from_slice(&f);
        for _ in 2..=rep {
            hmac(sha,&u,pass,&mut u);
            for k in 0..sha {
                f[k] ^= u[k];
            }
        }
        for j in 0..sha {
            k[opt] = f[j];
            opt += 1;
        }
    }
}
```
Note: The Rust language implementation of `pbkdf2` does not return anything, unlike Java. The reason is that in Rust, the last argument `k` is mutable, and it stores the output of the function. Also, the `HMAC` function is replaced by its lowercase correspondence `hmac`, because in Rust it's common to use snake case for function names.

Please make sure to implement the `hmac` function according to your cryptographic needs, as it is not provided within the context here.</translated function>Here is your translated function in Rust:

```rust
pub fn pbkdf2(sha: usize, pass: &[u8], salt: &[u8], rep: usize, olen: usize, k: &mut [u8]) {
    let d = (olen+sha-1)/sha;
    let mut f: Vec<u8> = vec![0; sha];
    let mut u: Vec<u8> = vec![0; sha];
    let mut s: Vec<u8> = vec![0; salt.len() + 4];

    let mut opt: usize = 0;

    for i in 1..=d {
        s[0..salt.len()].copy_from_slice(salt);
        let mut n: [u8;4] = [0;4];
        intto_bytes(i, &mut n);
        s[salt.len()..salt.len()+4].copy_from_slice(&n);

        hmac(sha,&s,pass,&mut f);

        u.copy_from_slice(&f);
        for _ in 2..=rep {
            hmac(sha,&u,pass,&mut u);
            for k in 0..sha {
                f[k] ^= u[k];
            }
        }
        for j in 0..sha {
            k[opt] = f[j];
            opt += 1;
        }
    }
}
```
Note: The Rust language implementation of `pbkdf2` does not return anything, unlike Java. The reason is that in Rust, the last argument `k` is mutable, and it stores the output of the function. Also, the `HMAC` function is replaced by its lowercase correspondence `hmac`, because in Rust it's common to use snake case for function names.

Please make sure to implement the `hmac` function according to your cryptographic needs, as it is not provided within the context here.
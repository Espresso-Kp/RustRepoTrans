<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
void RAND_clean(csprng *rng)
{
    /* kill internal state */
    int i;
    rng->pool_ptr=rng->rndptr=0;
    for (i=0; i<32; i++) rng->pool[i]=0;
    for (i=0; i<NK; i++) rng->ira[i]=0;
    rng->borrow=0;
}
</c function>
<rust function signature>
pub fn clean(&mut self) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct RAND {
    ira: [u32; RAND_NK], /* random number...   */
    rndptr: usize,
    borrow: u32,
    pool_ptr: usize,
    pool: [u8; 32],
}
const RAND_NK: usize = 21;

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use crate::hash256::HASH256;

</rust function dependency libraries>

</message>
<function>
pub fn clean(&mut self) {
        self.pool_ptr = 0;
        self.rndptr = 0;
        for i in 0..32 {
            self.pool[i] = 0
        }
        for i in 0..RAND_NK {
            self.ira[i] = 0
        }
        self.borrow = 0;
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
impl RAND {
    pub fn clean(&mut self) {
        self.pool_ptr = 0;
        self.rndptr = 0;
        for i in 0..32 {
            self.pool[i] = 0;
        }
        for i in 0..RAND_NK {
            self.ira[i] = 0;
        }
        self.borrow = 0;
    }
}
```
Note that I've assumed that `RAND` is a struct, and `clean` is an associated function (i.e., a method on the `RAND` struct). I've also used the `impl` keyword to define the `clean` method on the `RAND` struct.</translated function>Here is the translated Rust function:
```rust
impl RAND {
    pub fn clean(&mut self) {
        self.pool_ptr = 0;
        self.rndptr = 0;
        for i in 0..32 {
            self.pool[i] = 0;
        }
        for i in 0..RAND_NK {
            self.ira[i] = 0;
        }
        self.borrow = 0;
    }
}
```
Note that I've assumed that `RAND` is a struct, and `clean` is an associated function (i.e., a method on the `RAND` struct). I've also used the `impl` keyword to define the `clean` method on the `RAND` struct.
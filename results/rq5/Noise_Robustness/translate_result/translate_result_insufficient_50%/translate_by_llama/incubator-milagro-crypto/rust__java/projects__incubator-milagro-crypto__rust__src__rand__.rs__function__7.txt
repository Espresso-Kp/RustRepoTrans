<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public void seed(int rawlen,byte[] raw)
	{ /* initialise from at least 128 byte string of raw random entropy */
		int i;
		byte [] digest;
		byte [] b=new byte[4];
		HASH256 sh=new HASH256();
		pool_ptr=0;
		for (i=0;i<NK;i++) ira[i]=0;
		if (rawlen>0)
		{
			for (i=0;i<rawlen;i++)
				sh.process(raw[i]);
			digest=sh.hash();

/* initialise PRNG from distilled randomness */

			for (i=0;i<8;i++) 
			{
				b[0]=digest[4*i]; b[1]=digest[4*i+1]; b[2]=digest[4*i+2]; b[3]=digest[4*i+3];
				sirand(pack(b));
			}
		}
		fill_pool();
	}
</java function>
<rust function signature>
pub fn seed(&mut self, rawlen: usize, raw: &[u8]) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn sirand(&mut self, seed: u32) {
        let mut m: u32 = 1;
        let mut sd = seed;
        self.borrow = 0;
        self.rndptr = 0;
        self.ira[0] ^= sd;
        for i in 1..RAND_NK {
            /* fill initialisation vector */
            let inn = (RAND_NV * i) % RAND_NK;
            self.ira[inn] ^= m; /* note XOR */
            let t = m;
            m = sd.wrapping_sub(m);
            sd = t;
        }
        for _ in 0..10000 {
            self.sbrand();
        } /* "warm-up" & stir the generator */
    }
fn fill_pool(&mut self) {
        let mut sh = HASH256::new();
        for _ in 0..128 {
            sh.process((self.sbrand() & 0xff) as u8)
        }
        let w = sh.hash();
        for i in 0..32 {
            self.pool[i] = w[i]
        }
        self.pool_ptr = 0;
    }
pub fn new() -> HASH256 {
        let mut nh = HASH256 {
            length: [0; 2],
            h: [0; 8],
            w: [0; 64],
        };
        nh.init();
        return nh;
    }
pub struct RAND {
    ira: [u32; RAND_NK], /* random number...   */
    rndptr: usize,
    borrow: u32,
    pool_ptr: usize,
    pool: [u8; 32],
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use crate::hash256::HASH256;

</rust function dependency libraries>

</message>
<function>
pub fn seed(&mut self, rawlen: usize, raw: &[u8]) {
        /* initialise from at least 128 byte string of raw random entropy */
        let mut b: [u8; 4] = [0; 4];
        let mut sh = HASH256::new();
        self.pool_ptr = 0;

        for i in 0..RAND_NK {
            self.ira[i] = 0
        }
        if rawlen > 0 {
            for i in 0..rawlen {
                sh.process(raw[i]);
            }
            let digest = sh.hash();

            /* initialise PRNG from distilled randomness */

            for i in 0..8 {
                b[0] = digest[4 * i];
                b[1] = digest[4 * i + 1];
                b[2] = digest[4 * i + 2];
                b[3] = digest[4 * i + 3];
                self.sirand(RAND::pack(b));
            }
        }
        self.fill_pool();
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
impl RAND {
    pub fn seed(&mut self, rawlen: usize, raw: &[u8]) {
        let mut sh = HASH256::new();
        for i in 0..rawlen {
            sh.process(raw[i]);
        }
        let digest = sh.hash();
        for i in 0..8 {
            let b = [digest[4 * i], digest[4 * i + 1], digest[4 * i + 2], digest[4 * i + 3]];
            self.sirand(pack(b));
        }
        self.fill_pool();
    }
}
```
Note that I assumed the `pack` function is defined elsewhere in the codebase, as it is not provided in the given Rust code snippet. If that's not the case, you'll need to define it or replace it with the correct function.</translated function>Here is the translated Rust function:
```rust
impl RAND {
    pub fn seed(&mut self, rawlen: usize, raw: &[u8]) {
        let mut sh = HASH256::new();
        for i in 0..rawlen {
            sh.process(raw[i]);
        }
        let digest = sh.hash();
        for i in 0..8 {
            let b = [digest[4 * i], digest[4 * i + 1], digest[4 * i + 2], digest[4 * i + 3]];
            self.sirand(pack(b));
        }
        self.fill_pool();
    }
}
```
Note that I assumed the `pack` function is defined elsewhere in the codebase, as it is not provided in the given Rust code snippet. If that's not the case, you'll need to define it or replace it with the correct function.
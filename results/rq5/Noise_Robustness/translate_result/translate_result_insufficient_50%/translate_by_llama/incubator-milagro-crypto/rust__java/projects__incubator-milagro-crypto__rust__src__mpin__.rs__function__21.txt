<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static void SERVER_1(int sha,int date,byte[] CID,byte[] HID,byte[] HTID)
	{
		byte[] h=hashit(sha,0,CID,EFS);
		ECP R,P=ECP.mapit(h);

		P.toBytes(HID,false);   // new
		if (date!=0)
		{
	//		if (HID!=null) P.toBytes(HID);
			h=hashit(sha,date,h,EFS);
			R=ECP.mapit(h);
			P.add(R); //P.affine();
			P.toBytes(HTID,false);
		}
	//	else P.toBytes(HID,false);
	}
</java function>
<rust function signature>
pub fn server_1(sha: usize, date: usize, cid: &[u8], hid: &mut [u8], htid: Option<&mut [u8]>) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn hashit(sha: usize, n: usize, id: &[u8], w: &mut [u8]) -> bool {
    let mut r: [u8; 64] = [0; 64];
    let mut didit = false;
    if sha == SHA256 {
        let mut h = HASH256::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA384 {
        let mut h = HASH384::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if sha == SHA512 {
        let mut h = HASH512::new();
        if n > 0 {
            h.process_num(n as i32)
        }
        h.process_array(id);
        let hs = h.hash();
        for i in 0..sha {
            r[i] = hs[i];
        }
        didit = true;
    }
    if !didit {
        return false;
    }

    let rm = big::MODBYTES as usize;

    if sha > rm {
        for i in 0..rm {
            w[i] = r[i]
        }
    } else {
        for i in 0..sha {
            w[i + rm - sha] = r[i]
        }
        for i in 0..(rm - sha) {
            w[i] = 0
        }
    }

    return true;
}
pub fn to_bytes(&self, b: &mut [u8], compress: bool) {
        let mb = big::MODBYTES as usize;
        let mut t: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];
        let mut W = self.clone();

        W.affine();
        W.x.redc().to_bytes(&mut t);
        for i in 0..mb {
            b[i + 1] = t[i]
        }

        if CURVETYPE == CurveType::Montgomery {
            b[0] = 0x06;
            return;
        }

        if compress {
            b[0] = 0x02;
            if W.y.redc().parity() == 1 {
                b[0] = 0x03
            }
            return;
        }

        b[0] = 0x04;

        W.y.redc().to_bytes(&mut t);
        for i in 0..mb {
            b[i + mb + 1] = t[i]
        }
    }
pub const MODBYTES: usize = 32;

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp2::ECP2;
use super::fp12::FP12;
use super::fp4::FP4;
use super::pair;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn server_1(sha: usize, date: usize, cid: &[u8], hid: &mut [u8], htid: Option<&mut [u8]>) {
    const RM: usize = big::MODBYTES as usize;
    let mut h: [u8; RM] = [0; RM];

    hashit(sha, 0, cid, &mut h);

    let mut P = ECP::mapit(&h);

    P.to_bytes(hid, false);
    if date != 0 {
        let mut h2: [u8; RM] = [0; RM];
        hashit(sha, date, &h, &mut h2);
        let R = ECP::mapit(&h2);
        P.add(&R);
        if let Some(rhtid) = htid {
            P.to_bytes(rhtid, false);
        }
    }
}
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn server_1(sha: usize, date: usize, cid: &[u8], hid: &mut [u8], htid: Option<&mut [u8]>) {
    let mut h = [0; 64];
    let mut didit = false;
    if sha == SHA256 {
        let mut h256 = HASH256::new();
        if date!= 0 {
            h256.process_num(date as i32);
        }
        h256.process_array(cid);
        let hs = h256.hash();
        for i in 0..sha {
            h[i] = hs[i];
        }
        didit = true;
    } else if sha == SHA384 {
        let mut h384 = HASH384::new();
        if date!= 0 {
            h384.process_num(date as i32);
        }
        h384.process_array(cid);
        let hs = h384.hash();
        for i in 0..sha {
            h[i] = hs[i];
        }
        didit = true;
    } else if sha == SHA512 {
        let mut h512 = HASH512::new();
        if date!= 0 {
            h512.process_num(date as i32);
        }
        h512.process_array(cid);
        let hs = h512.hash();
        for i in 0..sha {
            h[i] = hs[i];
        }
        didit = true;
    }
    if!didit {
        return;
    }

    let rm = big::MODBYTES as usize;
    if sha > rm {
        for i in 0..rm {
            hid[i] = h[i];
        }
    } else {
        for i in 0..sha {
            hid[i + rm - sha] = h[i];
        }
        for i in 0..(rm - sha) {
            hid[i] = 0;
        }
    }

    if date!= 0 {
        let mut R = ECP::mapit(&h);
        let mut P = ECP::mapit(&h);
        P.add(&R);
        P.to_bytes(htid.as_mut().unwrap(), false);
    } else {
        P.to_bytes(hid, false);
    }
}
```
Note that I've assumed that `ECP::mapit` takes a `&[u8]` as input, and that `P.add` takes another `ECP` instance as input. I've also assumed that `P.to_bytes` takes a `&mut [u8]` and a `bool` as input. If these assumptions are incorrect, please let me know and I'll adjust the code accordingly.</translated function>Here is the translated Rust function:
```rust
pub fn server_1(sha: usize, date: usize, cid: &[u8], hid: &mut [u8], htid: Option<&mut [u8]>) {
    let mut h = [0; 64];
    let mut didit = false;
    if sha == SHA256 {
        let mut h256 = HASH256::new();
        if date!= 0 {
            h256.process_num(date as i32);
        }
        h256.process_array(cid);
        let hs = h256.hash();
        for i in 0..sha {
            h[i] = hs[i];
        }
        didit = true;
    } else if sha == SHA384 {
        let mut h384 = HASH384::new();
        if date!= 0 {
            h384.process_num(date as i32);
        }
        h384.process_array(cid);
        let hs = h384.hash();
        for i in 0..sha {
            h[i] = hs[i];
        }
        didit = true;
    } else if sha == SHA512 {
        let mut h512 = HASH512::new();
        if date!= 0 {
            h512.process_num(date as i32);
        }
        h512.process_array(cid);
        let hs = h512.hash();
        for i in 0..sha {
            h[i] = hs[i];
        }
        didit = true;
    }
    if!didit {
        return;
    }

    let rm = big::MODBYTES as usize;
    if sha > rm {
        for i in 0..rm {
            hid[i] = h[i];
        }
    } else {
        for i in 0..sha {
            hid[i + rm - sha] = h[i];
        }
        for i in 0..(rm - sha) {
            hid[i] = 0;
        }
    }

    if date!= 0 {
        let mut R = ECP::mapit(&h);
        let mut P = ECP::mapit(&h);
        P.add(&R);
        P.to_bytes(htid.as_mut().unwrap(), false);
    } else {
        P.to_bytes(hid, false);
    }
}
```
Note that I've assumed that `ECP::mapit` takes a `&[u8]` as input, and that `P.add` takes another `ECP` instance as input. I've also assumed that `P.to_bytes` takes a `&mut [u8]` and a `bool` as input. If these assumptions are incorrect, please let me know and I'll adjust the code accordingly.
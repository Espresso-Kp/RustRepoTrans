<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
dc_param_t* dc_param_new()
{
	dc_param_t* param = NULL;

	if ((param=calloc(1, sizeof(dc_param_t)))==NULL) {
		exit(28); /* cannot allocate little memory, unrecoverable error */
	}

	param->packed = calloc(1, 1);

    return param;
}
</c function>
<rust function signature>
pub fn new() -> Self 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct Params {
    inner: BTreeMap<Param, String>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use std::collections::BTreeMap;
use std::fmt;
use std::path::PathBuf;
use std::str;
use anyhow::{bail, Error, Result};
use num_traits::FromPrimitive;
use serde::{Deserialize, Serialize};
use crate::blob::BlobObject;
use crate::context::Context;
use crate::mimeparser::SystemMessage;
use std::path::Path;
use std::str::FromStr;
use tokio::fs;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub fn new() -> Self {
        Default::default()
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
use std::collections::BTreeMap;
use std::alloc;

pub struct Params {
    inner: BTreeMap<Param, String>,
}

impl Params {
    pub fn new() -> Result<Self> {
        let param = alloc::alloc_zeroed::<Self>();
        if param.is_null() {
            bail!("cannot allocate memory");
        }
        param.inner = BTreeMap::new();
        Ok(param)
    }
}
```
Note that I've used the `alloc` module to allocate memory for the `Params` struct, and the `bail!` macro from the `anyhow` crate to handle the error case. I've also assumed that the `Param` type is defined elsewhere in the codebase. If you'd like me to include a definition for `Param`, please let me know!</translated function>Here is the translated Rust function:
```rust
use std::collections::BTreeMap;
use std::alloc;

pub struct Params {
    inner: BTreeMap<Param, String>,
}

impl Params {
    pub fn new() -> Result<Self> {
        let param = alloc::alloc_zeroed::<Self>();
        if param.is_null() {
            bail!("cannot allocate memory");
        }
        param.inner = BTreeMap::new();
        Ok(param)
    }
}
```
Note that I've used the `alloc` module to allocate memory for the `Params` struct, and the `bail!` macro from the `anyhow` crate to handle the error case. I've also assumed that the `Param` type is defined elsewhere in the codebase. If you'd like me to include a definition for `Param`, please let me know!
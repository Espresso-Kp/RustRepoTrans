<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def remove_conn(self, swarm_conn: SwarmConn) -> None:
        """
        Simply remove the connection from Swarm's records, without closing
        the connection.
        """
        peer_id = swarm_conn.muxed_conn.peer_id
        if peer_id not in self.connections:
            return
        del self.connections[peer_id]
</python function>
<rust function signature>
fn remove(&mut self, k: &Key) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
pub struct MemoryStore {
    /// The identity of the peer owning the store.
    local_key: kbucket::Key<PeerId>,
    /// The configuration of the store.
    config: MemoryStoreConfig,
    /// The stored (regular) records.
    records: HashMap<Key, Record>,
    /// The stored provider records.
    providers: HashMap<Key, SmallVec<[ProviderRecord; K_VALUE.get()]>>,
    /// The set of all provider records for the node identified by `local_key`.
    ///
    /// Must be kept in sync with `providers`.
    provided: HashSet<ProviderRecord>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use super::*;
use crate::kbucket;
use smallvec::SmallVec;
use std::collections::{hash_map, hash_set, HashMap, HashSet};
use std::iter;
use super::*;
use crate::SHA_256_MH;
use quickcheck::*;
use rand::Rng;

</rust function dependency libraries>

</message>
<function>
fn remove(&mut self, k: &Key) {
        self.records.remove(k);
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
fn remove(&mut self, peer_id: &PeerId) {
    if!self.records.contains_key(peer_id) {
        return;
    }
    self.records.remove(peer_id);
}
```
Note that I've assumed that `PeerId` is a type that can be used as a key in the `HashMap`, and that `Record` is a type that can be removed from the map. If this is not the case, you may need to modify the code accordingly.

Also, I've used `contains_key` to check if the `peer_id` is present in the `records` map, which is a more idiomatic way to do this in Rust compared to the Python code.</translated function>Here is the translated Rust function:
```rust
fn remove(&mut self, peer_id: &PeerId) {
    if!self.records.contains_key(peer_id) {
        return;
    }
    self.records.remove(peer_id);
}
```
Note that I've assumed that `PeerId` is a type that can be used as a key in the `HashMap`, and that `Record` is a type that can be removed from the map. If this is not the case, you may need to modify the code accordingly.

Also, I've used `contains_key` to check if the `peer_id` is present in the `records` map, which is a more idiomatic way to do this in Rust compared to the Python code.
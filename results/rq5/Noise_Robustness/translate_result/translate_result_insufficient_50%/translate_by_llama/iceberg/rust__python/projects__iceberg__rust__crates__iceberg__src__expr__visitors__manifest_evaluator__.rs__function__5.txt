<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def visit_or(self, left_result: bool, right_result: bool) -> bool:
        return left_result or right_result
</python function>
<rust function signature>
fn or(&mut self, lhs: bool, rhs: bool) -> crate::Result<bool> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
struct ManifestFilterVisitor<'a> {
    manifest_evaluator: &'a ManifestEvaluator,
    partitions: &'a Vec<FieldSummary>,
}

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use crate::expr::visitors::bound_predicate_visitor::{visit, BoundPredicateVisitor};
use crate::expr::{BoundPredicate, BoundReference};
use crate::spec::{Datum, FieldSummary, ManifestFile, PrimitiveLiteral, Type};
use crate::Result;
use crate::{Error, ErrorKind};
use fnv::FnvHashSet;
use crate::expr::visitors::manifest_evaluator::ManifestEvaluator;
use crate::expr::{
        BinaryExpression, Bind, Predicate, PredicateOperator, Reference, SetExpression,
        UnaryExpression,
    };
use crate::spec::{
        Datum, FieldSummary, ManifestContentType, ManifestFile, NestedField, PrimitiveType, Schema,
        SchemaRef, Type,
    };
use crate::Result;
use fnv::FnvHashSet;
use std::ops::Not;
use std::sync::Arc;

</rust function dependency libraries>

</message>
<function>
fn or(&mut self, lhs: bool, rhs: bool) -> crate::Result<bool> {
        Ok(lhs || rhs)
    }
</function>
<translated function>
```rust
fn or(&mut self, lhs: bool, rhs: bool) -> crate::Result<bool> {
    Ok(lhs || rhs)
}
```</translated function>```rust
fn or(&mut self, lhs: bool, rhs: bool) -> crate::Result<bool> {
    Ok(lhs || rhs)
}
```
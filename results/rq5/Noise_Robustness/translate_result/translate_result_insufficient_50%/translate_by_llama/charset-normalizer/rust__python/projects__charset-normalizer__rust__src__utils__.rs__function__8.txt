<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def is_multi_byte_encoding(name: str) -> bool:
    """
    Verify is a specific encoding is a multi byte one based on it IANA name
    """
    return name in {
        "utf-8",
        "utf-16le",
        "utf-16be",
        "euc-jp",
        "euc-kr",
        "iso-2022-jp",
        "gbk",
        "gb18030",
        "hz",
        "big5",
        "shift_jis",
    }
</python function>
<rust function signature>
pub fn is_multi_byte_encoding(name: &str) -> bool 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<function>
pub fn is_multi_byte_encoding(name: &str) -> bool {
    [
        "utf-8",
        "utf-16le",
        "utf-16be",
        "euc-jp",
        "euc-kr",
        "iso-2022-jp",
        "gbk",
        "gb18030",
        "hz",
        "big5",
        "shift_jis",
    ]
    .contains(&name)
}
</function>
<translated function>
Here is the translated Rust function:
```rust
use ahash::{HashSet, HashSetExt};
use encoding::{Encoding, EncodingRef};

pub fn is_multi_byte_encoding(name: &str) -> bool {
    let multi_byte_encodings = HashSet::from([
        "utf-8",
        "utf-16le",
        "utf-16be",
        "euc-jp",
        "euc-kr",
        "iso-2022-jp",
        "gbk",
        "gb18030",
        "hz",
        "big5",
        "shift_jis",
    ]);

    multi_byte_encodings.contains(name)
}
```
Note that I used the `ahash` crate to create a `HashSet` of multi-byte encoding names, as it provides a more efficient and safe way to store and look up values. I also used the `encoding` crate to import the `Encoding` and `EncodingRef` types, which are used to represent encodings in the `encoding` crate.</translated function>Here is the translated Rust function:
```rust
use ahash::{HashSet, HashSetExt};
use encoding::{Encoding, EncodingRef};

pub fn is_multi_byte_encoding(name: &str) -> bool {
    let multi_byte_encodings = HashSet::from([
        "utf-8",
        "utf-16le",
        "utf-16be",
        "euc-jp",
        "euc-kr",
        "iso-2022-jp",
        "gbk",
        "gb18030",
        "hz",
        "big5",
        "shift_jis",
    ]);

    multi_byte_encodings.contains(name)
}
```
Note that I used the `ahash` crate to create a `HashSet` of multi-byte encoding names, as it provides a more efficient and safe way to store and look up values. I also used the `encoding` crate to import the `Encoding` and `EncodingRef` types, which are used to represent encodings in the `encoding` crate.
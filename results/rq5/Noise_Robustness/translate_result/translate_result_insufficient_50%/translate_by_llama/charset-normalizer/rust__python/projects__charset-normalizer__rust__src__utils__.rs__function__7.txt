<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def remove_accent(character: str) -> str:
    decomposed: str = unicodedata.decomposition(character)
    if not decomposed:
        return character

    codes: List[str] = decomposed.split(" ")

    return chr(int(codes[0], 16))
</python function>
<rust function signature>
pub(crate) fn remove_accent(ch: char) -> char 
</rust function signature>
<rust function realted variable, functions, and data type declarations>
fn next(&mut self) -> Option<Self::Item> {
        self.items.next()
    }

</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>


use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<function>
pub(crate) fn remove_accent(ch: char) -> char {
    DecomposingNormalizer::new_nfd() //initialize decomposer
        .normalize(ch.to_string().as_str()) //normalize into String
        .chars()
        .next() // retrieve first component(unaccented char)
        .unwrap_or(ch) //if fail, return the original char
}
</function>
<translated function>
Here is the translated Rust function:
```rust
use std::char;
use std::convert::TryFrom;
use icu_normalizer::DecomposingNormalizer;

pub(crate) fn remove_accent(ch: char) -> char {
    let decomposed = DecomposingNormalizer::new().decompose(ch);
    if decomposed.is_empty() {
        return ch;
    }

    let codes = decomposed.split_whitespace();
    let code = codes.next().unwrap();
    char::from_u32(TryFrom::try_from(code).unwrap()).unwrap()
}
```
Note that I've used the `icu_normalizer` crate to perform Unicode decomposition, as it is a more robust and accurate implementation than the `unicodedata` module in Python. I've also used the `TryFrom` trait to convert the decomposed code point to a `u32` value, and then to a `char` value using the `char::from_u32` function.</translated function>Here is the translated Rust function:
```rust
use std::char;
use std::convert::TryFrom;
use icu_normalizer::DecomposingNormalizer;

pub(crate) fn remove_accent(ch: char) -> char {
    let decomposed = DecomposingNormalizer::new().decompose(ch);
    if decomposed.is_empty() {
        return ch;
    }

    let codes = decomposed.split_whitespace();
    let code = codes.next().unwrap();
    char::from_u32(TryFrom::try_from(code).unwrap()).unwrap()
}
```
Note that I've used the `icu_normalizer` crate to perform Unicode decomposition, as it is a more robust and accurate implementation than the `unicodedata` module in Python. I've also used the `TryFrom` trait to convert the decomposed code point to a `u32` value, and then to a `char` value using the `char::from_u32` function.
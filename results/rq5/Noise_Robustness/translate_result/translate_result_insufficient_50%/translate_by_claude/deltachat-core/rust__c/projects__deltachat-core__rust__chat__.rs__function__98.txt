<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
void dc_lookup_real_nchat_by_contact_id(dc_context_t* context, uint32_t contact_id, uint32_t* ret_chat_id, int* ret_chat_blocked)
{
	/* checks for "real" chats or self-chat */
	sqlite3_stmt* stmt = NULL;

	if (ret_chat_id)      { *ret_chat_id = 0;      }
	if (ret_chat_blocked) { *ret_chat_blocked = 0; }

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || context->sql->cobj==NULL) {
		return; /* no database, no chats - this is no error (needed eg. for information) */
	}

	stmt = dc_sqlite3_prepare(context->sql,
			"SELECT c.id, c.blocked"
			" FROM chats c"
			" INNER JOIN chats_contacts j ON c.id=j.chat_id"
			" WHERE c.type=" DC_STRINGIFY(DC_CHAT_TYPE_SINGLE) " AND c.id>" DC_STRINGIFY(DC_CHAT_ID_LAST_SPECIAL) " AND j.contact_id=?;");
	sqlite3_bind_int(stmt, 1, contact_id);
	if (sqlite3_step(stmt)==SQLITE_ROW) {
		if (ret_chat_id)      { *ret_chat_id      = sqlite3_column_int(stmt, 0); }
		if (ret_chat_blocked) { *ret_chat_blocked = sqlite3_column_int(stmt, 1); }
	}
	sqlite3_finalize(stmt);
}
</c function>
<rust function signature>
pub async fn lookup_by_contact(
        context: &Context,
        contact_id: ContactId,
    ) -> Result<Option<Self>> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub async fn is_open(&self) -> bool {
        self.pool.read().await.is_some()
    }
pub async fn query_row_optional<T, F>(
        &self,
        sql: &str,
        params: impl rusqlite::Params + Send,
        f: F,
    ) -> Result<Option<T>>
    where
        F: Send + FnOnce(&rusqlite::Row) -> rusqlite::Result<T>,
        T: Send + 'static,
    {
        self.call(move |conn| match conn.query_row(sql.as_ref(), params, f) {
            Ok(res) => Ok(Some(res)),
            Err(rusqlite::Error::QueryReturnedNoRows) => Ok(None),
            Err(rusqlite::Error::InvalidColumnType(_, _, rusqlite::types::Type::Null)) => Ok(None),
            Err(err) => Err(err.into()),
        })
        .await
    }
pub struct ChatId(u32);
pub struct ContactId(u32);

</rust function dependencies and data type declarations>
<rust function dependency libraries>


use std::cmp;
use std::collections::{HashMap, HashSet};
use std::fmt;
use std::path::{Path, PathBuf};
use std::str::FromStr;
use std::time::Duration;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use deltachat_contact_tools::{strip_rtlo_characters, ContactAddress};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use strum_macros::EnumIter;
use tokio::task;
use crate::aheader::EncryptPreference;
use crate::blob::BlobObject;
use crate::chatlist::Chatlist;
use crate::chatlist_events;
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{
    self, Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK,
    DC_CHAT_ID_LAST_SPECIAL, DC_CHAT_ID_TRASH, DC_RESEND_USER_AVATAR_DAYS,
};
use crate::contact::{self, Contact, ContactId, Origin};
use crate::context::Context;
use crate::debug_logging::maybe_set_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::Timer as EphemeralTimer;
use crate::events::EventType;
use crate::html::new_html_mimepart;
use crate::location;
use crate::log::LogExt;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::mimefactory::MimeFactory;
use crate::mimeparser::SystemMessage;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::receive_imf::ReceivedMsg;
use crate::securejoin::BobState;
use crate::smtp::send_msg_to_smtp;
use crate::sql;
use crate::stock_str;
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{
    buf_compress, create_id, create_outgoing_rfc724_mid, create_smeared_timestamp,
    create_smeared_timestamps, get_abs_path, gm2local_offset, improve_single_line_input,
    smeared_time, time, IsNoneOrEmpty, SystemTime,
};
use crate::webxdc::WEBXDC_SUFFIX;
use CantSendReason::*;
use super::*;
use crate::chatlist::get_archived_cnt;
use crate::constants::{DC_GCL_ARCHIVED_ONLY, DC_GCL_NO_SPECIALS};
use crate::message::delete_msgs;
use crate::receive_imf::receive_imf;
use crate::test_utils::{sync, TestContext, TestContextManager};
use strum::IntoEnumIterator;
use tokio::fs;

</rust function dependency libraries>

</message>
<function>
pub async fn lookup_by_contact(
        context: &Context,
        contact_id: ContactId,
    ) -> Result<Option<Self>> {
        ensure!(context.sql.is_open().await, "Database not available");
        ensure!(
            contact_id != ContactId::UNDEFINED,
            "Invalid contact id requested"
        );

        context
            .sql
            .query_row_optional(
                "SELECT c.id, c.blocked
                   FROM chats c
                  INNER JOIN chats_contacts j
                          ON c.id=j.chat_id
                  WHERE c.type=100  -- 100 = Chattype::Single
                    AND c.id>9      -- 9 = DC_CHAT_ID_LAST_SPECIAL
                    AND j.contact_id=?;",
                (contact_id,),
                |row| {
                    let id: ChatId = row.get(0)?;
                    let blocked: Blocked = row.get(1)?;
                    Ok(ChatIdBlocked { id, blocked })
                },
            )
            .await
            .map_err(Into::into)
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub async fn lookup_by_contact(
    context: &Context,
    contact_id: ContactId,
) -> Result<Option<Self>> {
    if !context.is_open().await {
        return Ok(None);
    }

    let sql = format!(
        "SELECT c.id, c.blocked \
         FROM chats c \
         INNER JOIN chats_contacts j ON c.id=j.chat_id \
         WHERE c.type={} AND c.id>{} AND j.contact_id=?;",
        Chattype::Single as i32,
        DC_CHAT_ID_LAST_SPECIAL
    );

    context
        .sql
        .query_row_optional(
            &sql,
            [contact_id.to_u32()],
            |row| {
                let chat_id = ChatId::new(row.get(0)?);
                let blocked = row.get::<_, i32>(1)? != 0;
                Ok(Self {
                    id: chat_id,
                    blocked,
                    ..Default::default()
                })
            },
        )
        .await
}
```

This Rust function translates the functionality of the C function `dc_lookup_real_nchat_by_contact_id` while adhering to the provided Rust function signature and using the available dependencies and data types.

Key changes and considerations:

1. The function now returns a `Result<Option<Self>>` instead of using out parameters.
2. We use the `is_open()` method to check if the context is valid and the database is accessible.
3. The SQL query is constructed using Rust's string formatting, incorporating the `Chattype::Single` enum and `DC_CHAT_ID_LAST_SPECIAL` constant.
4. We use the `query_row_optional` method to execute the SQL query and handle the result.
5. The `ChatId` and `blocked` status are extracted from the query result and used to construct a new `Self` instance (assuming `Self` represents a chat struct).
6. Error handling is implicit in the `Result` type, and the `Option` allows for the case where no matching chat is found.

Note that this translation assumes the existence of certain methods and types (e.g., `ChatId::new`, `contact_id.to_u32()`) which were not explicitly provided in the dependencies. You may need to adjust these if they differ in your actual implementation.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub async fn lookup_by_contact(
    context: &Context,
    contact_id: ContactId,
) -> Result<Option<Self>> {
    if !context.is_open().await {
        return Ok(None);
    }

    let sql = format!(
        "SELECT c.id, c.blocked \
         FROM chats c \
         INNER JOIN chats_contacts j ON c.id=j.chat_id \
         WHERE c.type={} AND c.id>{} AND j.contact_id=?;",
        Chattype::Single as i32,
        DC_CHAT_ID_LAST_SPECIAL
    );

    context
        .sql
        .query_row_optional(
            &sql,
            [contact_id.to_u32()],
            |row| {
                let chat_id = ChatId::new(row.get(0)?);
                let blocked = row.get::<_, i32>(1)? != 0;
                Ok(Self {
                    id: chat_id,
                    blocked,
                    ..Default::default()
                })
            },
        )
        .await
}
```

This Rust function translates the functionality of the C function `dc_lookup_real_nchat_by_contact_id` while adhering to the provided Rust function signature and using the available dependencies and data types.

Key changes and considerations:

1. The function now returns a `Result<Option<Self>>` instead of using out parameters.
2. We use the `is_open()` method to check if the context is valid and the database is accessible.
3. The SQL query is constructed using Rust's string formatting, incorporating the `Chattype::Single` enum and `DC_CHAT_ID_LAST_SPECIAL` constant.
4. We use the `query_row_optional` method to execute the SQL query and handle the result.
5. The `ChatId` and `blocked` status are extracted from the query result and used to construct a new `Self` instance (assuming `Self` represents a chat struct).
6. Error handling is implicit in the `Result` type, and the `Option` allows for the case where no matching chat is found.

Note that this translation assumes the existence of certain methods and types (e.g., `ChatId::new`, `contact_id.to_u32()`) which were not explicitly provided in the dependencies. You may need to adjust these if they differ in your actual implementation.
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
* See dc_set_draft() for more details about drafts.
 *
 * @memberof dc_context_t
 * @param context The context as created by dc_context_new().
 * @param chat_id The chat ID to get the draft for.
 * @return Message object.
 *     Can be passed directly to dc_send_msg().
 *     Must be freed using dc_msg_unref() after usage.
 *     If there is no draft, NULL is returned.
 */
dc_msg_t* dc_get_draft(dc_context_t* context, uint32_t chat_id)
{
	uint32_t  draft_msg_id = 0;
	dc_msg_t* draft_msg = NULL;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC
	 || chat_id<=DC_CHAT_ID_LAST_SPECIAL) {
		return NULL;
	}

	draft_msg_id = get_draft_msg_id(context, chat_id);
	if (draft_msg_id==0) {
		return NULL;
	}

	draft_msg = dc_msg_new_untyped(context);
	if (!dc_msg_load_from_db(draft_msg, context, draft_msg_id)) {
		dc_msg_unref(draft_msg);
		return NULL;
	}

	return draft_msg;
}
</c function>
<rust function signature>
pub async fn get_draft(self, context: &Context) -> Result<Option<Message>> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}
pub struct ChatId(u32);
pub struct Message {
    /// Message ID.
    pub(crate) id: MsgId,

    /// `From:` contact ID.
    pub(crate) from_id: ContactId,

    /// ID of the first contact in the `To:` header.
    pub(crate) to_id: ContactId,

    /// ID of the chat message belongs to.
    pub(crate) chat_id: ChatId,

    /// Type of the message.
    pub(crate) viewtype: Viewtype,

    /// State of the message.
    pub(crate) state: MessageState,
    pub(crate) download_state: DownloadState,

    /// Whether the message is hidden.
    pub(crate) hidden: bool,
    pub(crate) timestamp_sort: i64,
    pub(crate) timestamp_sent: i64,
    pub(crate) timestamp_rcvd: i64,
    pub(crate) ephemeral_timer: EphemeralTimer,
    pub(crate) ephemeral_timestamp: i64,
    pub(crate) text: String,

    /// Message subject.
    ///
    /// If empty, a default subject will be generated when sending.
    pub(crate) subject: String,

    /// `Message-ID` header value.
    pub(crate) rfc724_mid: String,

    /// `In-Reply-To` header value.
    pub(crate) in_reply_to: Option<String>,
    pub(crate) is_dc_message: MessengerMessage,
    pub(crate) mime_modified: bool,
    pub(crate) chat_blocked: Blocked,
    pub(crate) location_id: u32,
    pub(crate) error: Option<String>,
    pub(crate) param: Params,
}
pub async fn load_from_db(context: &Context, id: MsgId) -> Result<Message> {
        let message = Self::load_from_db_optional(context, id)
            .await?
            .with_context(|| format!("Message {id} does not exist"))?;
        Ok(message)
    }

</rust function dependencies and data type declarations>
<rust function dependency libraries>


use std::cmp;
use std::collections::{HashMap, HashSet};
use std::fmt;
use std::path::{Path, PathBuf};
use std::str::FromStr;
use std::time::Duration;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use deltachat_contact_tools::{strip_rtlo_characters, ContactAddress};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use strum_macros::EnumIter;
use tokio::task;
use crate::aheader::EncryptPreference;
use crate::blob::BlobObject;
use crate::chatlist::Chatlist;
use crate::chatlist_events;
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{
    self, Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK,
    DC_CHAT_ID_LAST_SPECIAL, DC_CHAT_ID_TRASH, DC_RESEND_USER_AVATAR_DAYS,
};
use crate::contact::{self, Contact, ContactId, Origin};
use crate::context::Context;
use crate::debug_logging::maybe_set_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::Timer as EphemeralTimer;
use crate::events::EventType;
use crate::html::new_html_mimepart;
use crate::location;
use crate::log::LogExt;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::mimefactory::MimeFactory;
use crate::mimeparser::SystemMessage;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::receive_imf::ReceivedMsg;
use crate::securejoin::BobState;
use crate::smtp::send_msg_to_smtp;
use crate::sql;
use crate::stock_str;
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{
    buf_compress, create_id, create_outgoing_rfc724_mid, create_smeared_timestamp,
    create_smeared_timestamps, get_abs_path, gm2local_offset, improve_single_line_input,
    smeared_time, time, IsNoneOrEmpty, SystemTime,
};
use crate::webxdc::WEBXDC_SUFFIX;
use CantSendReason::*;
use super::*;
use crate::chatlist::get_archived_cnt;
use crate::constants::{DC_GCL_ARCHIVED_ONLY, DC_GCL_NO_SPECIALS};
use crate::message::delete_msgs;
use crate::receive_imf::receive_imf;
use crate::test_utils::{sync, TestContext, TestContextManager};
use strum::IntoEnumIterator;
use tokio::fs;

</rust function dependency libraries>

</message>
<function>
pub async fn get_draft(self, context: &Context) -> Result<Option<Message>> {
        if self.is_special() {
            return Ok(None);
        }
        match self.get_draft_msg_id(context).await? {
            Some(draft_msg_id) => {
                let msg = Message::load_from_db(context, draft_msg_id).await?;
                Ok(Some(msg))
            }
            None => Ok(None),
        }
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub async fn get_draft(self, context: &Context) -> Result<Option<Message>> {
    let chat_id = self.id;

    if chat_id <= DC_CHAT_ID_LAST_SPECIAL {
        return Ok(None);
    }

    let draft_msg_id = get_draft_msg_id(context, chat_id).await?;
    if draft_msg_id == MsgId::new(0) {
        return Ok(None);
    }

    match Message::load_from_db(context, draft_msg_id).await {
        Ok(draft_msg) => Ok(Some(draft_msg)),
        Err(_) => Ok(None),
    }
}
```

Note that I've made some assumptions and changes to adapt the C function to Rust:

1. The `self` parameter is assumed to be a `Chat` struct containing the `id` field.
2. The `get_draft_msg_id` function is assumed to be an asynchronous function that returns a `Result<MsgId>`.
3. Instead of returning `NULL` for errors or no draft, we return `Ok(None)`.
4. The `DC_CONTEXT_MAGIC` check is omitted as it's not typically used in Rust.
5. Error handling is done using Rust's `Result` type.
6. The `load_from_db` method is called on the `Message` struct instead of using a separate function.
7. Memory management (like `dc_msg_unref`) is not needed in Rust due to its ownership system.

Please note that you may need to adjust this function further based on the exact implementation details of your Rust codebase, especially regarding error handling and the specific types used.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub async fn get_draft(self, context: &Context) -> Result<Option<Message>> {
    let chat_id = self.id;

    if chat_id <= DC_CHAT_ID_LAST_SPECIAL {
        return Ok(None);
    }

    let draft_msg_id = get_draft_msg_id(context, chat_id).await?;
    if draft_msg_id == MsgId::new(0) {
        return Ok(None);
    }

    match Message::load_from_db(context, draft_msg_id).await {
        Ok(draft_msg) => Ok(Some(draft_msg)),
        Err(_) => Ok(None),
    }
}
```

Note that I've made some assumptions and changes to adapt the C function to Rust:

1. The `self` parameter is assumed to be a `Chat` struct containing the `id` field.
2. The `get_draft_msg_id` function is assumed to be an asynchronous function that returns a `Result<MsgId>`.
3. Instead of returning `NULL` for errors or no draft, we return `Ok(None)`.
4. The `DC_CONTEXT_MAGIC` check is omitted as it's not typically used in Rust.
5. Error handling is done using Rust's `Result` type.
6. The `load_from_db` method is called on the `Message` struct instead of using a separate function.
7. Memory management (like `dc_msg_unref`) is not needed in Rust due to its ownership system.

Please note that you may need to adjust this function further based on the exact implementation details of your Rust codebase, especially regarding error handling and the specific types used.
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
char* dc_param_get(const dc_param_t* param, int key, const char* def)
{
	char* p1 = NULL;
	char* p2 = NULL;
	char  bak = 0;
	char* ret = NULL;

	if (param==NULL || key==0) {
		return def? dc_strdup(def) : NULL;
	}

	p1 = find_param(param->packed, key, &p2);
	if (p1==NULL) {
		return def? dc_strdup(def) : NULL;
	}

	p1 += 2; /* skip key and "=" (safe as find_param checks for its existance) */

	bak = *p2;
	*p2 = 0;
	ret = dc_strdup(p1);
	dc_rtrim(ret); /* to be safe with '\r' characters ... */
	*p2 = bak;
	return ret;
}
</c function>
<rust function signature>
pub fn get(&self, key: Param) -> Option<&str> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct Params {
    inner: BTreeMap<Param, String>,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>


use std::collections::BTreeMap;
use std::fmt;
use std::path::PathBuf;
use std::str;
use anyhow::{bail, Error, Result};
use num_traits::FromPrimitive;
use serde::{Deserialize, Serialize};
use crate::blob::BlobObject;
use crate::context::Context;
use crate::mimeparser::SystemMessage;
use std::path::Path;
use std::str::FromStr;
use tokio::fs;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub fn get(&self, key: Param) -> Option<&str> {
        self.inner.get(&key).map(|s| s.as_str())
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

pub fn get(&self, key: Param) -> Option<&str> {
    self.inner.get(&key).map(|s| s.as_str())
}

This Rust function is a simplified version of the C function, taking advantage of Rust's built-in data structures and safety features. Here's a breakdown of the changes:

1. The function now uses the `&self` parameter to access the `Params` struct's `inner` field, which is a `BTreeMap<Param, String>`.
2. Instead of manually searching for the parameter, we use the `BTreeMap`'s `get` method to retrieve the value associated with the given `key`.
3. The `Option<&str>` return type allows us to return `None` if the key is not found, eliminating the need for a default value parameter.
4. We use the `map` method to convert the `Option<&String>` returned by `get` into an `Option<&str>`.

This implementation is more idiomatic Rust and takes advantage of the language's safety features and the `BTreeMap` data structure.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

pub fn get(&self, key: Param) -> Option<&str> {
    self.inner.get(&key).map(|s| s.as_str())
}

This Rust function is a simplified version of the C function, taking advantage of Rust's built-in data structures and safety features. Here's a breakdown of the changes:

1. The function now uses the `&self` parameter to access the `Params` struct's `inner` field, which is a `BTreeMap<Param, String>`.
2. Instead of manually searching for the parameter, we use the `BTreeMap`'s `get` method to retrieve the value associated with the given `key`.
3. The `Option<&str>` return type allows us to return `None` if the key is not found, eliminating the need for a default value parameter.
4. We use the `map` method to convert the `Option<&String>` returned by `get` into an `Option<&str>`.

This implementation is more idiomatic Rust and takes advantage of the language's safety features and the `BTreeMap` data structure.
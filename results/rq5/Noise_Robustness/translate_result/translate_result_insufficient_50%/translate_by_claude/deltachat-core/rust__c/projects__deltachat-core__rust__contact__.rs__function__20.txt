<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
* normalize() is _not_ called for the name. If the contact is blocked, it is unblocked.
 *
 * To add a number of contacts, see dc_add_address_book() which is much faster for adding
 * a bunch of addresses.
 *
 * May result in a #DC_EVENT_CONTACTS_CHANGED event.
 *
 * @memberof dc_context_t
 * @param context The context object as created by dc_context_new().
 * @param name Name of the contact to add. If you do not know the name belonging
 *     to the address, you can give NULL here.
 * @param addr E-mail-address of the contact to add. If the email address
 *     already exists, the name is updated and the origin is increased to
 *     "manually created".
 * @return Contact ID of the created or reused contact.
 */
uint32_t dc_create_contact(dc_context_t* context, const char* name, const char* addr)
{
	uint32_t contact_id = 0;
	int      sth_modified = 0;
	int      blocked = 0;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || addr==NULL || addr[0]==0) {
		goto cleanup;
	}

	contact_id = dc_add_or_lookup_contact(context, name, addr, DC_ORIGIN_MANUALLY_CREATED, &sth_modified);

	blocked = dc_is_contact_blocked(context, contact_id);

	context->cb(context, DC_EVENT_CONTACTS_CHANGED, sth_modified==CONTACT_CREATED? contact_id : 0, 0);

	if (blocked) {
		dc_block_contact(context, contact_id, 0);
	}

cleanup:
	return contact_id;
}
</c function>
<rust function signature>
pub async fn create(context: &Context, name: &str, addr: &str) -> Result<ContactId> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct Contact {
    /// The contact ID.
    pub id: ContactId,

    /// Contact name. It is recommended to use `Contact::get_name`,
    /// `Contact::get_display_name` or `Contact::get_name_n_addr` to access this field.
    /// May be empty, initially set to `authname`.
    name: String,

    /// Name authorized by the contact himself. Only this name may be spread to others,
    /// e.g. in To:-lists. May be empty. It is recommended to use `Contact::get_authname`,
    /// to access this field.
    authname: String,

    /// E-Mail-Address of the contact. It is recommended to use `Contact::get_addr` to access this field.
    addr: String,

    /// Blocked state. Use contact_is_blocked to access this field.
    pub blocked: bool,

    /// Time when the contact was seen last time, Unix time in seconds.
    last_seen: i64,

    /// The origin/source of the contact.
    pub origin: Origin,

    /// Parameters as Param::ProfileImage
    pub param: Params,

    /// Last seen message signature for this contact, to be displayed in the profile.
    status: String,

    /// If the contact is a bot.
    is_bot: bool,
}
pub struct Context {
    pub(crate) inner: Arc<InnerContext>,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>


use std::cmp::{min, Reverse};
use std::collections::BinaryHeap;
use std::fmt;
use std::path::{Path, PathBuf};
use std::time::UNIX_EPOCH;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use base64::Engine as _;
use deltachat_contact_tools::may_be_valid_addr;
use deltachat_contact_tools::{
    self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
    ContactAddress, VcardContact,
};
use deltachat_derive::{FromSql, ToSql};
use rusqlite::OptionalExtension;
use serde::{Deserialize, Serialize};
use tokio::task;
use tokio::time::{timeout, Duration};
use crate::aheader::{Aheader, EncryptPreference};
use crate::blob::BlobObject;
use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{load_self_public_key, DcKey, SignedPublicKey};
use crate::log::LogExt;
use crate::login_param::LoginParam;
use crate::message::MessageState;
use crate::mimeparser::AvatarAction;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::sql::{self, params_iter};
use crate::sync::{self, Sync::*};
use crate::tools::{
    duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
};
use crate::{chat, chatlist_events, stock_str};
use deltachat_contact_tools::{may_be_valid_addr, normalize_name};
use super::*;
use crate::chat::{get_chat_contacts, send_text_msg, Chat};
use crate::chatlist::Chatlist;
use crate::receive_imf::receive_imf;
use crate::test_utils::{self, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn create(context: &Context, name: &str, addr: &str) -> Result<ContactId> {
        Self::create_ex(context, Sync, name, addr).await
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub async fn create(context: &Context, name: &str, addr: &str) -> Result<ContactId> {
    if addr.is_empty() {
        bail!("Invalid address");
    }

    let (contact_id, sth_modified) = context.inner.add_or_lookup_contact(name, addr, Origin::ManuallyCreated).await?;

    let blocked = context.inner.is_contact_blocked(contact_id).await?;

    if sth_modified == CONTACT_CREATED {
        context.inner.emit_event(EventType::ContactsChanged, Some(contact_id), None);
    } else {
        context.inner.emit_event(EventType::ContactsChanged, None, None);
    }

    if blocked {
        context.inner.unblock_contact(contact_id).await?;
    }

    Ok(contact_id)
}
```

This translated function follows the provided Rust function signature and uses the dependencies and libraries provided. Here are the key changes and assumptions made:

1. The function is now asynchronous and returns a `Result<ContactId>`.
2. Error handling is done using the `anyhow` crate, with `bail!` for early returns on errors.
3. The `Context` struct is used instead of the C `dc_context_t*`.
4. The `add_or_lookup_contact` method is assumed to exist on the `InnerContext` and return a tuple of `(ContactId, i32)`.
5. The `is_contact_blocked` and `unblock_contact` methods are assumed to exist on the `InnerContext`.
6. The `emit_event` method is used to emit the `ContactsChanged` event.
7. The `CONTACT_CREATED` constant is assumed to be defined elsewhere in the Rust codebase.
8. The `Origin::ManuallyCreated` enum is used instead of the C `DC_ORIGIN_MANUALLY_CREATED` constant.

Note that some assumptions were made about the existence of certain methods and constants. You may need to adjust the implementation if these assumptions are incorrect or if additional functionality is required.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

```rust
pub async fn create(context: &Context, name: &str, addr: &str) -> Result<ContactId> {
    if addr.is_empty() {
        bail!("Invalid address");
    }

    let (contact_id, sth_modified) = context.inner.add_or_lookup_contact(name, addr, Origin::ManuallyCreated).await?;

    let blocked = context.inner.is_contact_blocked(contact_id).await?;

    if sth_modified == CONTACT_CREATED {
        context.inner.emit_event(EventType::ContactsChanged, Some(contact_id), None);
    } else {
        context.inner.emit_event(EventType::ContactsChanged, None, None);
    }

    if blocked {
        context.inner.unblock_contact(contact_id).await?;
    }

    Ok(contact_id)
}
```

This translated function follows the provided Rust function signature and uses the dependencies and libraries provided. Here are the key changes and assumptions made:

1. The function is now asynchronous and returns a `Result<ContactId>`.
2. Error handling is done using the `anyhow` crate, with `bail!` for early returns on errors.
3. The `Context` struct is used instead of the C `dc_context_t*`.
4. The `add_or_lookup_contact` method is assumed to exist on the `InnerContext` and return a tuple of `(ContactId, i32)`.
5. The `is_contact_blocked` and `unblock_contact` methods are assumed to exist on the `InnerContext`.
6. The `emit_event` method is used to emit the `ContactsChanged` event.
7. The `CONTACT_CREATED` constant is assumed to be defined elsewhere in the Rust codebase.
8. The `Origin::ManuallyCreated` enum is used instead of the C `DC_ORIGIN_MANUALLY_CREATED` constant.

Note that some assumptions were made about the existence of certain methods and constants. You may need to adjust the implementation if these assumptions are incorrect or if additional functionality is required.
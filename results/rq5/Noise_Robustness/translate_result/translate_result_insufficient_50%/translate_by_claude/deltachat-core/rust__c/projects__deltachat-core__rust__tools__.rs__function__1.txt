<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
void dc_truncate_str(char* buf, int approx_chars)
{
	if (approx_chars > 0 && strlen(buf) > approx_chars+strlen(DC_EDITORIAL_ELLIPSE))
	{
		char* p = &buf[approx_chars + 1]; /* null-terminate string at the desired length */
		*p = 0;

		if (strchr(buf, ' ')!=NULL) {
			while (p[-1]!=' ' && p[-1]!='\n') { /* rewind to the previous space, avoid half utf-8 characters */
				p--;
				*p = 0;
			}
		}

		strcat(p, DC_EDITORIAL_ELLIPSE);
	}
}
</c function>
<rust function signature>
pub(crate) fn truncate(buf: &str, approx_chars: usize) -> Cow<str> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub(crate) const DC_ELLIPSIS: &str = "[...]";

</rust function dependencies and data type declarations>
<rust function dependency libraries>


use std::borrow::Cow;
use std::io::{Cursor, Write};
use std::mem;
use std::path::{Path, PathBuf};
use std::str::from_utf8;
use std::time::Duration;
use std::time::SystemTime as Time;
use std::time::SystemTime;
use anyhow::{bail, Context as _, Result};
use base64::Engine as _;
use chrono::{Local, NaiveDateTime, NaiveTime, TimeZone};
use deltachat_contact_tools::{strip_rtlo_characters, EmailAddress};
use deltachat_time::SystemTimeTools as SystemTime;
use futures::{StreamExt, TryStreamExt};
use mailparse::dateparse;
use mailparse::headers::Headers;
use mailparse::MailHeaderMap;
use rand::{thread_rng, Rng};
use tokio::{fs, io};
use url::Url;
use crate::chat::{add_device_msg, add_device_msg_with_importance};
use crate::constants::{DC_ELLIPSIS, DC_OUTDATED_WARNING_DAYS};
use crate::context::Context;
use crate::events::EventType;
use crate::message::{Message, Viewtype};
use crate::stock_str;
use chrono::NaiveDate;
use proptest::prelude::*;
use super::*;
use crate::chatlist::Chatlist;
use crate::{chat, test_utils};
use crate::{receive_imf::receive_imf, test_utils::TestContext};
use super::*;

</rust function dependency libraries>

</message>
<function>
pub(crate) fn truncate(buf: &str, approx_chars: usize) -> Cow<str> {
    let count = buf.chars().count();
    if count > approx_chars + DC_ELLIPSIS.len() {
        let end_pos = buf
            .char_indices()
            .nth(approx_chars)
            .map(|(n, _)| n)
            .unwrap_or_default();

        if let Some(index) = buf[..end_pos].rfind(|c| c == ' ' || c == '\n') {
            Cow::Owned(format!("{}{}", &buf[..=index], DC_ELLIPSIS))
        } else {
            Cow::Owned(format!("{}{}", &buf[..end_pos], DC_ELLIPSIS))
        }
    } else {
        Cow::Borrowed(buf)
    }
}
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

pub(crate) fn truncate(buf: &str, approx_chars: usize) -> Cow<str> {
    if approx_chars > 0 && buf.len() > approx_chars + DC_ELLIPSIS.len() {
        let mut result = String::from(&buf[..approx_chars + 1]);
        
        if result.contains(' ') {
            while !result.is_empty() && !result.ends_with(' ') && !result.ends_with('\n') {
                result.pop();
            }
        }
        
        result.push_str(DC_ELLIPSIS);
        Cow::Owned(result)
    } else {
        Cow::Borrowed(buf)
    }
}</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, dependencies, and libraries:

pub(crate) fn truncate(buf: &str, approx_chars: usize) -> Cow<str> {
    if approx_chars > 0 && buf.len() > approx_chars + DC_ELLIPSIS.len() {
        let mut result = String::from(&buf[..approx_chars + 1]);
        
        if result.contains(' ') {
            while !result.is_empty() && !result.ends_with(' ') && !result.ends_with('\n') {
                result.pop();
            }
        }
        
        result.push_str(DC_ELLIPSIS);
        Cow::Owned(result)
    } else {
        Cow::Borrowed(buf)
    }
}
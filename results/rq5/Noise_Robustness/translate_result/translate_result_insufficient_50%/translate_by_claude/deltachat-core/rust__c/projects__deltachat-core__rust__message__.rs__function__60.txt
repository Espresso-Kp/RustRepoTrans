<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
int dc_msg_is_setupmessage(const dc_msg_t* msg)
{
	if (msg==NULL || msg->magic!=DC_MSG_MAGIC || msg->type!=DC_MSG_FILE) {
		return 0;
	}

	return dc_param_get_int(msg->param, DC_PARAM_CMD, 0)==DC_CMD_AUTOCRYPT_SETUP_MESSAGE? 1 : 0;
}
</c function>
<rust function signature>
pub fn is_setupmessage(&self) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn get_cmd(&self) -> SystemMessage {
        self.get_int(Param::Cmd)
            .and_then(SystemMessage::from_i32)
            .unwrap_or_default()
    }
pub enum SystemMessage {
    /// Unknown type of system message.
    #[default]
    Unknown = 0,

    /// Group name changed.
    GroupNameChanged = 2,

    /// Group avatar changed.
    GroupImageChanged = 3,

    /// Member was added to the group.
    MemberAddedToGroup = 4,

    /// Member was removed from the group.
    MemberRemovedFromGroup = 5,

    /// Autocrypt Setup Message.
    AutocryptSetupMessage = 6,

    /// Secure-join message.
    SecurejoinMessage = 7,

    /// Location streaming is enabled.
    LocationStreamingEnabled = 8,

    /// Location-only message.
    LocationOnly = 9,

    /// Chat ephemeral message timer is changed.
    EphemeralTimerChanged = 10,

    /// "Messages are guaranteed to be end-to-end encrypted from now on."
    ChatProtectionEnabled = 11,

    /// "%1$s sent a message from another device."
    ChatProtectionDisabled = 12,

    /// Message can't be sent because of `Invalid unencrypted mail to <>`
    /// which is sent by chatmail servers.
    InvalidUnencryptedMail = 13,

    /// 1:1 chats info message telling that SecureJoin has started and the user should wait for it
    /// to complete.
    SecurejoinWait = 14,

    /// 1:1 chats info message telling that SecureJoin is still running, but the user may already
    /// send messages.
    SecurejoinWaitTimeout = 15,

    /// Self-sent-message that contains only json used for multi-device-sync;
    /// if possible, we attach that to other messages as for locations.
    MultiDeviceSync = 20,

    /// Sync message that contains a json payload
    /// sent to the other webxdc instances
    /// These messages are not shown in the chat.
    WebxdcStatusUpdate = 30,

    /// Webxdc info added with `info` set in `send_webxdc_status_update()`.
    WebxdcInfoMessage = 32,

    /// This message contains a users iroh node address.
    IrohNodeAddr = 40,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>


use std::collections::BTreeSet;
use std::path::{Path, PathBuf};
use anyhow::{ensure, format_err, Context as _, Result};
use deltachat_contact_tools::{parse_vcard, VcardContact};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use tokio::{fs, io};
use crate::blob::BlobObject;
use crate::chat::{Chat, ChatId, ChatIdBlocked};
use crate::chatlist_events;
use crate::config::Config;
use crate::constants::{
    Blocked, Chattype, VideochatType, DC_CHAT_ID_TRASH, DC_DESIRED_TEXT_LEN, DC_MSG_ID_LAST_SPECIAL,
};
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::debug_logging::set_debug_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::{start_ephemeral_timers_msgids, Timer as EphemeralTimer};
use crate::events::EventType;
use crate::imap::markseen_on_imap_table;
use crate::location::delete_poi_location;
use crate::mimeparser::{parse_message_id, SystemMessage};
use crate::param::{Param, Params};
use crate::pgp::split_armored_data;
use crate::reaction::get_msg_reactions;
use crate::sql;
use crate::summary::Summary;
use crate::tools::{
    buf_compress, buf_decompress, get_filebytes, get_filemeta, gm2local_offset, read_file, time,
    timestamp_to_str, truncate,
};
use MessageState::*;
use MessageState::*;
use num_traits::FromPrimitive;
use super::*;
use crate::chat::{
        self, add_contact_to_chat, marknoticed_chat, send_text_msg, ChatItem, ProtectionStatus,
    };
use crate::chatlist::Chatlist;
use crate::config::Config;
use crate::reaction::send_reaction;
use crate::receive_imf::receive_imf;
use crate::test_utils as test;
use crate::test_utils::{TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub fn is_setupmessage(&self) -> bool {
        if self.viewtype != Viewtype::File {
            return false;
        }

        self.param.get_cmd() == SystemMessage::AutocryptSetupMessage
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function and Rust dependencies:

```rust
pub fn is_setupmessage(&self) -> bool {
    if self.get_viewtype() != Viewtype::File {
        return false;
    }

    self.get_cmd() == SystemMessage::AutocryptSetupMessage
}
```

This Rust function achieves the same functionality as the original C function:

1. It checks if the message type is a file (equivalent to `DC_MSG_FILE` in C).
2. If it is a file, it then checks if the command parameter is set to `AutocryptSetupMessage` (equivalent to `DC_CMD_AUTOCRYPT_SETUP_MESSAGE` in C).

The function uses the provided `get_cmd()` method to retrieve the command parameter and compares it with the `SystemMessage::AutocryptSetupMessage` enum variant. It also assumes that there's a `get_viewtype()` method available to check the message type.

Note that this translation assumes that the `self` parameter in the Rust function signature refers to a struct representing a message, similar to the `dc_msg_t*` in the C function. The null check and magic number check from the C function are not included, as they are likely handled differently in the Rust implementation or not necessary due to Rust's safety guarantees.</translated function>Here's the translated Rust function based on the provided C function and Rust dependencies:

```rust
pub fn is_setupmessage(&self) -> bool {
    if self.get_viewtype() != Viewtype::File {
        return false;
    }

    self.get_cmd() == SystemMessage::AutocryptSetupMessage
}
```

This Rust function achieves the same functionality as the original C function:

1. It checks if the message type is a file (equivalent to `DC_MSG_FILE` in C).
2. If it is a file, it then checks if the command parameter is set to `AutocryptSetupMessage` (equivalent to `DC_CMD_AUTOCRYPT_SETUP_MESSAGE` in C).

The function uses the provided `get_cmd()` method to retrieve the command parameter and compares it with the `SystemMessage::AutocryptSetupMessage` enum variant. It also assumes that there's a `get_viewtype()` method available to check the message type.

Note that this translation assumes that the `self` parameter in the Rust function signature refers to a struct representing a message, similar to the `dc_msg_t*` in the C function. The null check and magic number check from the C function are not included, as they are likely handled differently in the Rust implementation or not necessary due to Rust's safety guarantees.
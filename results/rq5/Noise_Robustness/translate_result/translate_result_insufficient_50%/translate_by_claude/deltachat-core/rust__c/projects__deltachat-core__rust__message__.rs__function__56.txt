<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
int dc_msg_is_info(const dc_msg_t* msg)
{
	if (msg==NULL || msg->magic!=DC_MSG_MAGIC) {
		return 0;
	}

	int cmd = dc_param_get_int(msg->param, DC_PARAM_CMD, 0);

	if (msg->from_id==DC_CONTACT_ID_INFO
	 || msg->to_id==DC_CONTACT_ID_INFO
	 || (cmd && cmd!=DC_CMD_AUTOCRYPT_SETUP_MESSAGE)) {
		return 1;
	}

	return 0;
}
</c function>
<rust function signature>
pub fn is_info(&self) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct Message {
    /// Message ID.
    pub(crate) id: MsgId,

    /// `From:` contact ID.
    pub(crate) from_id: ContactId,

    /// ID of the first contact in the `To:` header.
    pub(crate) to_id: ContactId,

    /// ID of the chat message belongs to.
    pub(crate) chat_id: ChatId,

    /// Type of the message.
    pub(crate) viewtype: Viewtype,

    /// State of the message.
    pub(crate) state: MessageState,
    pub(crate) download_state: DownloadState,

    /// Whether the message is hidden.
    pub(crate) hidden: bool,
    pub(crate) timestamp_sort: i64,
    pub(crate) timestamp_sent: i64,
    pub(crate) timestamp_rcvd: i64,
    pub(crate) ephemeral_timer: EphemeralTimer,
    pub(crate) ephemeral_timestamp: i64,
    pub(crate) text: String,

    /// Message subject.
    ///
    /// If empty, a default subject will be generated when sending.
    pub(crate) subject: String,

    /// `Message-ID` header value.
    pub(crate) rfc724_mid: String,

    /// `In-Reply-To` header value.
    pub(crate) in_reply_to: Option<String>,
    pub(crate) is_dc_message: MessengerMessage,
    pub(crate) mime_modified: bool,
    pub(crate) chat_blocked: Blocked,
    pub(crate) location_id: u32,
    pub(crate) error: Option<String>,
    pub(crate) param: Params,
}
impl ContactId {
    /// Undefined contact. Used as a placeholder for trashed messages.
    pub const UNDEFINED: ContactId = ContactId::new(0);

    /// The owner of the account.
    ///
    /// The email-address is set by `set_config` using "addr".
    pub const SELF: ContactId = ContactId::new(1);

    /// ID of the contact for info messages.
    pub const INFO: ContactId = ContactId::new(2);

    /// ID of the contact for device messages.
    pub const DEVICE: ContactId = ContactId::new(5);
    pub(crate) const LAST_SPECIAL: ContactId = ContactId::new(9);

    /// Address to go with [`ContactId::DEVICE`].
    ///
    /// This is used by APIs which need to return an email address for this contact.
    pub const DEVICE_ADDR: &'static str = "device@localhost";
}
pub enum SystemMessage {
    /// Unknown type of system message.
    #[default]
    Unknown = 0,

    /// Group name changed.
    GroupNameChanged = 2,

    /// Group avatar changed.
    GroupImageChanged = 3,

    /// Member was added to the group.
    MemberAddedToGroup = 4,

    /// Member was removed from the group.
    MemberRemovedFromGroup = 5,

    /// Autocrypt Setup Message.
    AutocryptSetupMessage = 6,

    /// Secure-join message.
    SecurejoinMessage = 7,

    /// Location streaming is enabled.
    LocationStreamingEnabled = 8,

    /// Location-only message.
    LocationOnly = 9,

    /// Chat ephemeral message timer is changed.
    EphemeralTimerChanged = 10,

    /// "Messages are guaranteed to be end-to-end encrypted from now on."
    ChatProtectionEnabled = 11,

    /// "%1$s sent a message from another device."
    ChatProtectionDisabled = 12,

    /// Message can't be sent because of `Invalid unencrypted mail to <>`
    /// which is sent by chatmail servers.
    InvalidUnencryptedMail = 13,

    /// 1:1 chats info message telling that SecureJoin has started and the user should wait for it
    /// to complete.
    SecurejoinWait = 14,

    /// 1:1 chats info message telling that SecureJoin is still running, but the user may already
    /// send messages.
    SecurejoinWaitTimeout = 15,

    /// Self-sent-message that contains only json used for multi-device-sync;
    /// if possible, we attach that to other messages as for locations.
    MultiDeviceSync = 20,

    /// Sync message that contains a json payload
    /// sent to the other webxdc instances
    /// These messages are not shown in the chat.
    WebxdcStatusUpdate = 30,

    /// Webxdc info added with `info` set in `send_webxdc_status_update()`.
    WebxdcInfoMessage = 32,

    /// This message contains a users iroh node address.
    IrohNodeAddr = 40,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>


use std::collections::BTreeSet;
use std::path::{Path, PathBuf};
use anyhow::{ensure, format_err, Context as _, Result};
use deltachat_contact_tools::{parse_vcard, VcardContact};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use tokio::{fs, io};
use crate::blob::BlobObject;
use crate::chat::{Chat, ChatId, ChatIdBlocked};
use crate::chatlist_events;
use crate::config::Config;
use crate::constants::{
    Blocked, Chattype, VideochatType, DC_CHAT_ID_TRASH, DC_DESIRED_TEXT_LEN, DC_MSG_ID_LAST_SPECIAL,
};
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::debug_logging::set_debug_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::{start_ephemeral_timers_msgids, Timer as EphemeralTimer};
use crate::events::EventType;
use crate::imap::markseen_on_imap_table;
use crate::location::delete_poi_location;
use crate::mimeparser::{parse_message_id, SystemMessage};
use crate::param::{Param, Params};
use crate::pgp::split_armored_data;
use crate::reaction::get_msg_reactions;
use crate::sql;
use crate::summary::Summary;
use crate::tools::{
    buf_compress, buf_decompress, get_filebytes, get_filemeta, gm2local_offset, read_file, time,
    timestamp_to_str, truncate,
};
use MessageState::*;
use MessageState::*;
use num_traits::FromPrimitive;
use super::*;
use crate::chat::{
        self, add_contact_to_chat, marknoticed_chat, send_text_msg, ChatItem, ProtectionStatus,
    };
use crate::chatlist::Chatlist;
use crate::config::Config;
use crate::reaction::send_reaction;
use crate::receive_imf::receive_imf;
use crate::test_utils as test;
use crate::test_utils::{TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub fn is_info(&self) -> bool {
        let cmd = self.param.get_cmd();
        self.from_id == ContactId::INFO
            || self.to_id == ContactId::INFO
            || cmd != SystemMessage::Unknown && cmd != SystemMessage::AutocryptSetupMessage
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function and Rust dependencies:

```rust
pub fn is_info(&self) -> bool {
    let cmd = self.param.get_int(Param::Cmd).unwrap_or(0);

    self.from_id == ContactId::INFO
        || self.to_id == ContactId::INFO
        || (cmd != 0 && cmd != SystemMessage::AutocryptSetupMessage as i32)
}
```

This Rust function closely follows the logic of the original C function while utilizing the provided Rust structs and enums. Here are the key changes and explanations:

1. The null check on `msg` is not needed in Rust because `self` is guaranteed to be non-null.
2. The `magic` check is omitted as it's not applicable in the Rust implementation.
3. `dc_param_get_int` is replaced with `self.param.get_int(Param::Cmd)`, assuming `Param::Cmd` corresponds to `DC_PARAM_CMD`.
4. `DC_CONTACT_ID_INFO` is replaced with `ContactId::INFO`.
5. `DC_CMD_AUTOCRYPT_SETUP_MESSAGE` is replaced with `SystemMessage::AutocryptSetupMessage as i32`.
6. The function returns a `bool` instead of an `int`.

This implementation assumes that the `Message` struct has `from_id`, `to_id`, and `param` fields, and that `param` is of type `Params` with a `get_int` method. It also assumes that `ContactId` and `SystemMessage` are available in the current scope.</translated function>Here's the translated Rust function based on the provided C function and Rust dependencies:

```rust
pub fn is_info(&self) -> bool {
    let cmd = self.param.get_int(Param::Cmd).unwrap_or(0);

    self.from_id == ContactId::INFO
        || self.to_id == ContactId::INFO
        || (cmd != 0 && cmd != SystemMessage::AutocryptSetupMessage as i32)
}
```

This Rust function closely follows the logic of the original C function while utilizing the provided Rust structs and enums. Here are the key changes and explanations:

1. The null check on `msg` is not needed in Rust because `self` is guaranteed to be non-null.
2. The `magic` check is omitted as it's not applicable in the Rust implementation.
3. `dc_param_get_int` is replaced with `self.param.get_int(Param::Cmd)`, assuming `Param::Cmd` corresponds to `DC_PARAM_CMD`.
4. `DC_CONTACT_ID_INFO` is replaced with `ContactId::INFO`.
5. `DC_CMD_AUTOCRYPT_SETUP_MESSAGE` is replaced with `SystemMessage::AutocryptSetupMessage as i32`.
6. The function returns a `bool` instead of an `int`.

This implementation assumes that the `Message` struct has `from_id`, `to_id`, and `param` fields, and that `param` is of type `Params` with a `get_int` method. It also assumes that `ContactId` and `SystemMessage` are available in the current scope.
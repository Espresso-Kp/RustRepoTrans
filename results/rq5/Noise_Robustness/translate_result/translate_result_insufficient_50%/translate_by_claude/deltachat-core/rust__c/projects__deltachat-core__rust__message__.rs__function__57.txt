<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
int dc_msg_get_info_type(const dc_msg_t* msg)
{
	return dc_param_get_int(msg->param, DC_PARAM_CMD, 0);
}
</c function>
<rust function signature>
pub fn get_info_type(&self) -> SystemMessage 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn get_cmd(&self) -> SystemMessage {
        self.get_int(Param::Cmd)
            .and_then(SystemMessage::from_i32)
            .unwrap_or_default()
    }
pub struct Message {
    /// Message ID.
    pub(crate) id: MsgId,

    /// `From:` contact ID.
    pub(crate) from_id: ContactId,

    /// ID of the first contact in the `To:` header.
    pub(crate) to_id: ContactId,

    /// ID of the chat message belongs to.
    pub(crate) chat_id: ChatId,

    /// Type of the message.
    pub(crate) viewtype: Viewtype,

    /// State of the message.
    pub(crate) state: MessageState,
    pub(crate) download_state: DownloadState,

    /// Whether the message is hidden.
    pub(crate) hidden: bool,
    pub(crate) timestamp_sort: i64,
    pub(crate) timestamp_sent: i64,
    pub(crate) timestamp_rcvd: i64,
    pub(crate) ephemeral_timer: EphemeralTimer,
    pub(crate) ephemeral_timestamp: i64,
    pub(crate) text: String,

    /// Message subject.
    ///
    /// If empty, a default subject will be generated when sending.
    pub(crate) subject: String,

    /// `Message-ID` header value.
    pub(crate) rfc724_mid: String,

    /// `In-Reply-To` header value.
    pub(crate) in_reply_to: Option<String>,
    pub(crate) is_dc_message: MessengerMessage,
    pub(crate) mime_modified: bool,
    pub(crate) chat_blocked: Blocked,
    pub(crate) location_id: u32,
    pub(crate) error: Option<String>,
    pub(crate) param: Params,
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>


use std::collections::BTreeSet;
use std::path::{Path, PathBuf};
use anyhow::{ensure, format_err, Context as _, Result};
use deltachat_contact_tools::{parse_vcard, VcardContact};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use tokio::{fs, io};
use crate::blob::BlobObject;
use crate::chat::{Chat, ChatId, ChatIdBlocked};
use crate::chatlist_events;
use crate::config::Config;
use crate::constants::{
    Blocked, Chattype, VideochatType, DC_CHAT_ID_TRASH, DC_DESIRED_TEXT_LEN, DC_MSG_ID_LAST_SPECIAL,
};
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::debug_logging::set_debug_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::{start_ephemeral_timers_msgids, Timer as EphemeralTimer};
use crate::events::EventType;
use crate::imap::markseen_on_imap_table;
use crate::location::delete_poi_location;
use crate::mimeparser::{parse_message_id, SystemMessage};
use crate::param::{Param, Params};
use crate::pgp::split_armored_data;
use crate::reaction::get_msg_reactions;
use crate::sql;
use crate::summary::Summary;
use crate::tools::{
    buf_compress, buf_decompress, get_filebytes, get_filemeta, gm2local_offset, read_file, time,
    timestamp_to_str, truncate,
};
use MessageState::*;
use MessageState::*;
use num_traits::FromPrimitive;
use super::*;
use crate::chat::{
        self, add_contact_to_chat, marknoticed_chat, send_text_msg, ChatItem, ProtectionStatus,
    };
use crate::chatlist::Chatlist;
use crate::config::Config;
use crate::reaction::send_reaction;
use crate::receive_imf::receive_imf;
use crate::test_utils as test;
use crate::test_utils::{TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub fn get_info_type(&self) -> SystemMessage {
        self.param.get_cmd()
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function and the given Rust dependencies and function signature:

```rust
pub fn get_info_type(&self) -> SystemMessage {
    self.get_cmd()
}
```

This translation takes into account the following:

1. The Rust function signature specifies that it should return a `SystemMessage` type instead of an `int`.
2. The `get_cmd()` method is available in the Rust dependencies, which seems to be the equivalent of `dc_param_get_int(msg->param, DC_PARAM_CMD, 0)` in the C function.
3. The `get_cmd()` method already handles the conversion to `SystemMessage` and provides a default value if needed, so we don't need to add any additional error handling or default value logic.

The translated function simply calls `self.get_cmd()` to retrieve the system message type, which matches the behavior of the original C function while adhering to the provided Rust function signature and dependencies.</translated function>Here's the translated Rust function based on the provided C function and the given Rust dependencies and function signature:

```rust
pub fn get_info_type(&self) -> SystemMessage {
    self.get_cmd()
}
```

This translation takes into account the following:

1. The Rust function signature specifies that it should return a `SystemMessage` type instead of an `int`.
2. The `get_cmd()` method is available in the Rust dependencies, which seems to be the equivalent of `dc_param_get_int(msg->param, DC_PARAM_CMD, 0)` in the C function.
3. The `get_cmd()` method already handles the conversion to `SystemMessage` and provides a default value if needed, so we don't need to add any additional error handling or default value logic.

The translated function simply calls `self.get_cmd()` to retrieve the system message type, which matches the behavior of the original C function while adhering to the provided Rust function signature and dependencies.
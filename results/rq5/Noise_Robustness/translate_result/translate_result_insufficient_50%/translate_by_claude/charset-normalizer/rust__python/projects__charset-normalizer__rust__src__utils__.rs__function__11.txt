<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def is_cp_similar(iana_name_a: str, iana_name_b: str) -> bool:
    """
    Determine if two code page are at least 80% similar. IANA_SUPPORTED_SIMILAR dict was generated using
    the function cp_similarity.
    """
    return (
        iana_name_a in IANA_SUPPORTED_SIMILAR
        and iana_name_b in IANA_SUPPORTED_SIMILAR[iana_name_a]
    )
</python function>
<rust function signature>
pub(crate) fn is_cp_similar(iana_name_a: &str, iana_name_b: &str) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>
pub static IANA_SUPPORTED_SIMILAR: Lazy<HashMap<&'static str, Vec<&'static str>>> =
    Lazy::new(|| {
        HashMap::from_iter([
            ("windows-1252", vec!["iso-8859-15", "windows-1254"]),
            ("windows-1253", vec!["iso-8859-7"]),
            ("windows-1254", vec!["iso-8859-15", "windows-1252"]),
            ("windows-1257", vec!["iso-8859-13"]),
            (
                "iso-8859-10",
                vec![
                    "iso-8859-14",
                    "iso-8859-15",
                    "iso-8859-4",
                    "windows-1254",
                    "windows-1252",
                ],
            ),
            ("iso-8859-13", vec!["windows-1257"]),
            (
                "iso-8859-14",
                vec![
                    "iso-8859-10",
                    "iso-8859-15",
                    "iso-8859-16",
                    "iso-8859-3",
                    "windows-1254",
                    "windows-1252",
                ],
            ),
            (
                "iso-8859-15",
                vec![
                    "windows-1252",
                    "windows-1254",
                    "iso-8859-10",
                    "iso-8859-14",
                    "iso-8859-16",
                    "iso-8859-3",
                ],
            ),
            (
                "iso-8859-16",
                vec![
                    "iso-8859-14",
                    "iso-8859-15",
                    "iso-8859-2",
                    "iso-8859-3",
                    "windows-1254",
                    "windows-1252",
                ],
            ),
            ("iso-8859-2", vec!["iso-8859-16", "iso-8859-4"]),
            (
                "iso-8859-3",
                vec![
                    "iso-8859-14",
                    "iso-8859-15",
                    "iso-8859-16",
                    "windows-1254",
                    "windows-1252",
                ],
            ),
            (
                "iso-8859-4",
                vec!["iso-8859-10", "iso-8859-2", "windows-1254", "windows-1252"],
            ),
            ("iso-8859-7", vec!["windows-1253"]),
            (
                "windows-1254",
                vec![
                    "windows-1252",
                    "windows-1258",
                    "iso-8859-10",
                    "iso-8859-14",
                    "iso-8859-15",
                    "iso-8859-16",
                    "iso-8859-3",
                    "iso-8859-4",
                ],
            ),
            (
                "windows-1252",
                vec![
                    "windows-1254",
                    "windows-1258",
                    "iso-8859-10",
                    "iso-8859-14",
                    "iso-8859-15",
                    "iso-8859-16",
                    "iso-8859-3",
                    "iso-8859-4",
                ],
            ),
        ])
    });

</rust function dependencies and data type declarations>
<rust function dependency libraries>


use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<function>
pub(crate) fn is_cp_similar(iana_name_a: &str, iana_name_b: &str) -> bool {
    IANA_SUPPORTED_SIMILAR.contains_key(iana_name_a)
        && IANA_SUPPORTED_SIMILAR[iana_name_a].contains(&iana_name_b)
}
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
pub(crate) fn is_cp_similar(iana_name_a: &str, iana_name_b: &str) -> bool {
    IANA_SUPPORTED_SIMILAR
        .get(iana_name_a)
        .map_or(false, |similar_encodings| similar_encodings.contains(&iana_name_b))
}
```

This Rust function achieves the same functionality as the Python function:

1. It takes two string slices (`&str`) as input, representing the IANA names of two code pages.
2. It uses the `IANA_SUPPORTED_SIMILAR` static `HashMap` to check for similarity.
3. It returns a boolean indicating whether the two code pages are at least 80% similar.

The function uses the `get` method on `IANA_SUPPORTED_SIMILAR` to retrieve the vector of similar encodings for `iana_name_a`. If `iana_name_a` is found in the map, it then checks if `iana_name_b` is contained in the vector of similar encodings. If `iana_name_a` is not found in the map, or if `iana_name_b` is not in the vector of similar encodings, the function returns `false`.

This implementation makes use of the `IANA_SUPPORTED_SIMILAR` dependency as requested, and follows Rust idioms for working with `Option` types and collections.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
pub(crate) fn is_cp_similar(iana_name_a: &str, iana_name_b: &str) -> bool {
    IANA_SUPPORTED_SIMILAR
        .get(iana_name_a)
        .map_or(false, |similar_encodings| similar_encodings.contains(&iana_name_b))
}
```

This Rust function achieves the same functionality as the Python function:

1. It takes two string slices (`&str`) as input, representing the IANA names of two code pages.
2. It uses the `IANA_SUPPORTED_SIMILAR` static `HashMap` to check for similarity.
3. It returns a boolean indicating whether the two code pages are at least 80% similar.

The function uses the `get` method on `IANA_SUPPORTED_SIMILAR` to retrieve the vector of similar encodings for `iana_name_a`. If `iana_name_a` is found in the map, it then checks if `iana_name_b` is contained in the vector of similar encodings. If `iana_name_a` is not found in the map, or if `iana_name_b` is not in the vector of similar encodings, the function returns `false`.

This implementation makes use of the `IANA_SUPPORTED_SIMILAR` dependency as requested, and follows Rust idioms for working with `Option` types and collections.
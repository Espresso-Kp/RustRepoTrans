<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def unicode_range_languages(primary_range: str) -> List[str]:
    """
    Return inferred languages used with a unicode range.
    """
    languages: List[str] = []

    for language, characters in FREQUENCIES.items():
        for character in characters:
            if unicode_range(character) == primary_range:
                languages.append(language)
                break

    return languages
</python function>
<rust function signature>
pub(crate) fn unicode_range_languages(primary_range: &str) -> Vec<&'static Language> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub(crate) fn unicode_range(character: char) -> Option<&'static str> {
    let char_code = character as u32;
    UNICODE_RANGES_COMBINED
        .iter()
        .find(|&(_, range)| range.contains(&char_code))
        .map(|(name, _)| *name)
}
pub fn iter(&self) -> CharsetMatchesIter {
        CharsetMatchesIter {
            items: self.items.iter(),
        }
    }

</rust function dependencies and data type declarations>
<rust function dependency libraries>


use crate::assets::{ENCODING_TO_LANGUAGE, LANGUAGES, LANGUAGE_SUPPORTED_COUNT};
use crate::consts::TOO_SMALL_SEQUENCE;
use crate::entity::{CoherenceMatch, CoherenceMatches, Language};
use crate::utils::{
    get_language_data, is_accentuated, is_multi_byte_encoding, is_suspiciously_successive_range,
    is_unicode_range_secondary, unicode_range,
};
use ahash::{HashMap, HashMapExt, HashSet};
use cached::proc_macro::cached;
use counter::Counter;
use encoding::label::encoding_from_whatwg_label;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use strsim::jaro;

</rust function dependency libraries>

</message>
<function>
pub(crate) fn unicode_range_languages(primary_range: &str) -> Vec<&'static Language> {
    LANGUAGES
        .iter()
        .filter_map(|(language, characters, _, _)| {
            characters
                .chars()
                .find(|char| unicode_range(*char).unwrap_or_default() == primary_range)
                .map(|_| language)
        })
        .collect::<Vec<&Language>>()
}
</function>
<translated function>
Here's the translated Rust function based on the provided information:

pub(crate) fn unicode_range_languages(primary_range: &str) -> Vec<&'static Language> {
    let mut languages = Vec::new();

    for language in LANGUAGES.iter() {
        if let Some(characters) = get_language_data(language) {
            for &character in characters {
                if let Some(range) = unicode_range(character) {
                    if range == primary_range {
                        languages.push(language);
                        break;
                    }
                }
            }
        }
    }

    languages
}</translated function>Here's the translated Rust function based on the provided information:

pub(crate) fn unicode_range_languages(primary_range: &str) -> Vec<&'static Language> {
    let mut languages = Vec::new();

    for language in LANGUAGES.iter() {
        if let Some(characters) = get_language_data(language) {
            for &character in characters {
                if let Some(range) = unicode_range(character) {
                    if range == primary_range {
                        languages.push(language);
                        break;
                    }
                }
            }
        }
    }

    languages
}
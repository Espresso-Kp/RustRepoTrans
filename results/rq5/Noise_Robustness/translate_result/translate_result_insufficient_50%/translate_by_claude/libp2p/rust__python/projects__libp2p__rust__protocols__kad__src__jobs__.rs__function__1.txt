<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def is_running(self) -> bool:
        return self.is_started and not self.is_finished
</python function>
<rust function signature>
fn is_running(&self) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>
struct PeriodicJob<T> {
    interval: Duration,
    state: PeriodicJobState<T>,
}
enum PeriodicJobState<T> {
    Running(T),
    Waiting(Delay, Instant),
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>


use crate::record::{self, store::RecordStore, ProviderRecord, Record};
use futures::prelude::*;
use futures_timer::Delay;
use libp2p_identity::PeerId;
use std::collections::HashSet;
use std::pin::Pin;
use std::task::{Context, Poll};
use std::time::Duration;
use std::vec;
use web_time::Instant;
use super::*;
use crate::record::store::MemoryStore;
use futures::{executor::block_on, future::poll_fn};
use quickcheck::*;
use rand::Rng;

</rust function dependency libraries>

</message>
<function>
fn is_running(&self) -> bool {
        match self.state {
            PeriodicJobState::Running(..) => true,
            PeriodicJobState::Waiting(..) => false,
        }
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
fn is_running(&self) -> bool {
    match self.state {
        PeriodicJobState::Running(_) => true,
        PeriodicJobState::Waiting(_, _) => false,
    }
}
```

This translation assumes that the `is_running` method is implemented for the `PeriodicJob<T>` struct. The function checks the `state` field of the `PeriodicJob<T>` struct to determine if the job is running. If the state is `PeriodicJobState::Running`, it returns `true`, otherwise it returns `false`.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
fn is_running(&self) -> bool {
    match self.state {
        PeriodicJobState::Running(_) => true,
        PeriodicJobState::Waiting(_, _) => false,
    }
}
```

This translation assumes that the `is_running` method is implemented for the `PeriodicJob<T>` struct. The function checks the `state` field of the `PeriodicJob<T>` struct to determine if the job is running. If the state is `PeriodicJobState::Running`, it returns `true`, otherwise it returns `false`.
<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public static int EXTRACT_PIN(int sha,byte[] CID,int pin,byte[] TOKEN)
	{
		ECP P=ECP.fromBytes(TOKEN);
		if (P.is_infinity()) return INVALID_POINT;
		byte[] h=hashit(sha,0,CID,EFS);
		ECP R=ECP.mapit(h);


		pin%=MAXPIN;

		R=R.pinmul(pin,PBLEN);
		P.sub(R); //P.affine();

		P.toBytes(TOKEN,false);

		return 0;
	}
</java function>
<rust function signature>
pub fn extract_pin(sha: usize, cid: &[u8], pin: i32, token: &mut [u8]) -> isize 
</rust function signature>
<rust function dependencies, and data type declarations>
pub fn extract_factor(
    sha: usize,
    cid: &[u8],
    factor: i32,
    facbits: i32,
    token: &mut [u8],
) -> isize {
    let mut P = ECP::from_bytes(&token);
    const RM: usize = big::MODBYTES as usize;
    let mut h: [u8; RM] = [0; RM];
    if P.is_infinity() {
        return INVALID_POINT;
    }
    hashit(sha, 0, cid, &mut h);
    let mut R = ECP::mapit(&h);

    R = R.pinmul(factor, facbits);
    P.sub(&R);

    P.to_bytes(token, false);

    return 0;
}

</rust function dependencies and data type declarations>
<rust function dependency libraries>


use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp2::ECP2;
use super::fp12::FP12;
use super::fp4::FP4;
use super::pair;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn extract_pin(sha: usize, cid: &[u8], pin: i32, token: &mut [u8]) -> isize {
    return extract_factor(sha, cid, pin % MAXPIN, PBLEN, token);
}
</function>
<translated function>
Here's the translated Rust function based on the provided Java function, Rust function signature, dependencies, and libraries:

```rust
pub fn extract_pin(sha: usize, cid: &[u8], pin: i32, token: &mut [u8]) -> isize {
    let mut P = ECP::from_bytes(token);
    if P.is_infinity() {
        return INVALID_POINT;
    }

    let mut h = [0u8; big::MODBYTES as usize];
    hashit(sha, 0, cid, &mut h);
    let mut R = ECP::mapit(&h);

    let pin = pin % MAXPIN;

    R = R.pinmul(pin, PBLEN);
    P.sub(&R);

    P.to_bytes(token, false);

    0
}
```

This translation maintains the structure and logic of the original Java function while adapting it to Rust syntax and the provided function signature. It uses the dependencies and data types declared in the Rust environment, such as `ECP`, `hashit`, and the constants `INVALID_POINT`, `MAXPIN`, and `PBLEN`. The function also uses the provided Rust libraries, although they are not directly referenced in this specific function.</translated function>Here's the translated Rust function based on the provided Java function, Rust function signature, dependencies, and libraries:

```rust
pub fn extract_pin(sha: usize, cid: &[u8], pin: i32, token: &mut [u8]) -> isize {
    let mut P = ECP::from_bytes(token);
    if P.is_infinity() {
        return INVALID_POINT;
    }

    let mut h = [0u8; big::MODBYTES as usize];
    hashit(sha, 0, cid, &mut h);
    let mut R = ECP::mapit(&h);

    let pin = pin % MAXPIN;

    R = R.pinmul(pin, PBLEN);
    P.sub(&R);

    P.to_bytes(token, false);

    0
}
```

This translation maintains the structure and logic of the original Java function while adapting it to Rust syntax and the provided function signature. It uses the dependencies and data types declared in the Rust environment, such as `ECP`, `hashit`, and the constants `INVALID_POINT`, `MAXPIN`, and `PBLEN`. The function also uses the provided Rust libraries, although they are not directly referenced in this specific function.
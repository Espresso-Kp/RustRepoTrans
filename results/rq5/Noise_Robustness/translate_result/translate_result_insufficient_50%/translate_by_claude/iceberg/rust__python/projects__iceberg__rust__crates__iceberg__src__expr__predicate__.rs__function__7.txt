<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def bind(self, schema: Schema, case_sensitive: bool = True) -> BoundUnaryPredicate[Any]:
        bound_term = self.term.bind(schema, case_sensitive)
        return self.as_bound(bound_term)
</python function>
<rust function signature>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> 
</rust function signature>
<rust function dependencies, and data type declarations>
pub struct UnaryExpression<T> {
    /// Operator of this predicate, must be single operand operator.
    op: PredicateOperator,
    /// Term of this predicate, for example, `a` in `a IS NULL`.
    term: T,
}
pub(crate) fn new(op: PredicateOperator, term: T) -> Self {
        debug_assert!(op.is_unary());
        Self { op, term }
    }

</rust function dependencies and data type declarations>
<rust function dependency libraries>


use std::fmt::{Debug, Display, Formatter};
use std::ops::Not;
use array_init::array_init;
use fnv::FnvHashSet;
use itertools::Itertools;
use crate::error::Result;
use crate::expr::{Bind, BoundReference, PredicateOperator, Reference};
use crate::spec::{Datum, SchemaRef};
use crate::{Error, ErrorKind};
use std::ops::Not;
use std::sync::Arc;
use crate::expr::Bind;
use crate::expr::Predicate::{AlwaysFalse, AlwaysTrue};
use crate::expr::Reference;
use crate::spec::Datum;
use crate::spec::{NestedField, PrimitiveType, Schema, SchemaRef, Type};

</rust function dependency libraries>

</message>
<function>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
        let bound_term = self.term.bind(schema, case_sensitive)?;
        Ok(UnaryExpression::new(self.op, bound_term))
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
    let bound_term = self.term.bind(schema, case_sensitive)?;
    Ok(self.as_bound(bound_term))
}
```

This translation assumes that:

1. `self.term` implements the `Bind` trait, which has a `bind` method.
2. `self.as_bound` is a method that takes the bound term and returns `Self::Bound`.
3. The `Result` type is used to handle potential errors during binding.

Note that the Rust version uses the `?` operator to propagate errors from the `bind` method call on `self.term`. The final result is wrapped in `Ok()` to match the `Result` return type specified in the function signature.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, dependencies, and libraries:

```rust
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
    let bound_term = self.term.bind(schema, case_sensitive)?;
    Ok(self.as_bound(bound_term))
}
```

This translation assumes that:

1. `self.term` implements the `Bind` trait, which has a `bind` method.
2. `self.as_bound` is a method that takes the bound term and returns `Self::Bound`.
3. The `Result` type is used to handle potential errors during binding.

Note that the Rust version uses the `?` operator to propagate errors from the `bind` method call on `self.term`. The final result is wrapped in `Ok()` to match the `Result` return type specified in the function signature.
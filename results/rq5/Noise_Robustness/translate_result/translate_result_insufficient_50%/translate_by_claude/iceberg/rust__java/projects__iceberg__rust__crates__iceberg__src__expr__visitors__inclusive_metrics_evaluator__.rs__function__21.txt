<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public <T> Boolean startsWith(BoundReference<T> ref, Literal<T> lit) {
      int pos = Accessors.toPosition(ref.accessor());
      PartitionFieldSummary fieldStats = stats.get(pos);

      if (fieldStats.lowerBound() == null) {
        return ROWS_CANNOT_MATCH; // values are all null and literal cannot contain null
      }

      ByteBuffer prefixAsBytes = lit.toByteBuffer();

      Comparator<ByteBuffer> comparator = Comparators.unsignedBytes();

      ByteBuffer lower = fieldStats.lowerBound();
      // truncate lower bound so that its length in bytes is not greater than the length of prefix
      int lowerLength = Math.min(prefixAsBytes.remaining(), lower.remaining());
      int lowerCmp =
          comparator.compare(BinaryUtil.truncateBinary(lower, lowerLength), prefixAsBytes);
      if (lowerCmp > 0) {
        return ROWS_CANNOT_MATCH;
      }

      ByteBuffer upper = fieldStats.upperBound();
      // truncate upper bound so that its length in bytes is not greater than the length of prefix
      int upperLength = Math.min(prefixAsBytes.remaining(), upper.remaining());
      int upperCmp =
          comparator.compare(BinaryUtil.truncateBinary(upper, upperLength), prefixAsBytes);
      if (upperCmp < 0) {
        return ROWS_CANNOT_MATCH;
      }

      return ROWS_MIGHT_MATCH;
    }
</java function>
<rust function signature>
fn starts_with(
        &mut self,
        reference: &BoundReference,
        datum: &Datum,
        _predicate: &BoundPredicate,
    ) -> crate::Result<bool> 
</rust function signature>
<rust function dependencies, and data type declarations>
fn contains_nulls_only(&self, field_id: i32) -> bool {
        let null_count = self.null_count(field_id);
        let value_count = self.value_count(field_id);

        null_count.is_some() && null_count == value_count
    }
pub(crate) struct InclusiveMetricsEvaluator<'a> {
    data_file: &'a DataFile,
}
pub fn field(&self) -> &NestedField {
    &self.field
}
pub enum ErrorKind {
    /// Iceberg don't know what happened here, and no actions other than
    /// just returning it back. For example, iceberg returns an internal
    /// service error.
    Unexpected,

    /// Iceberg data is invalid.
    ///
    /// This error is returned when we try to read a table from iceberg but
    /// failed to parse it's metadata or data file correctly.
    ///
    /// The table could be invalid or corrupted.
    DataInvalid,
    /// Iceberg feature is not supported.
    ///
    /// This error is returned when given iceberg feature is not supported.
    FeatureUnsupported,
}
pub enum PrimitiveLiteral {
    /// 0x00 for false, non-zero byte for true
    Boolean(bool),
    /// Stored as 4-byte little-endian
    Int(i32),
    /// Stored as 8-byte little-endian
    Long(i64),
    /// Stored as 4-byte little-endian
    Float(OrderedFloat<f32>),
    /// Stored as 8-byte little-endian
    Double(OrderedFloat<f64>),
    /// Stores days from the 1970-01-01 in an 4-byte little-endian int
    Date(i32),
    /// Stores microseconds from midnight in an 8-byte little-endian long
    Time(i64),
    /// Timestamp without timezone
    Timestamp(i64),
    /// Timestamp with timezone
    Timestamptz(i64),
    /// UTF-8 bytes (without length)
    String(String),
    /// 16-byte big-endian value
    UUID(Uuid),
    /// Binary value
    Fixed(Vec<u8>),
    /// Binary value (without length)
    Binary(Vec<u8>),
    /// Stores unscaled value as big int. According to iceberg spec, the precision must less than 38(`MAX_DECIMAL_PRECISION`) , so i128 is suit here.
    Decimal(i128),
}
pub struct Error {
    kind: ErrorKind,
    message: String,

    context: Vec<(&'static str, String)>,

    source: Option<anyhow::Error>,
    backtrace: Backtrace,
}
const ROWS_MIGHT_MATCH: crate::Result<bool> = Ok(true);
const ROWS_CANNOT_MATCH: crate::Result<bool> = Ok(false);

</rust function dependencies and data type declarations>
<rust function dependency libraries>


use crate::expr::visitors::bound_predicate_visitor::{visit, BoundPredicateVisitor};
use crate::expr::{BoundPredicate, BoundReference};
use crate::spec::{DataFile, Datum, PrimitiveLiteral};
use crate::{Error, ErrorKind};
use fnv::FnvHashSet;
use crate::expr::visitors::inclusive_metrics_evaluator::InclusiveMetricsEvaluator;
use crate::expr::PredicateOperator::{
        Eq, GreaterThan, GreaterThanOrEq, In, IsNan, IsNull, LessThan, LessThanOrEq, NotEq, NotIn,
        NotNan, NotNull, NotStartsWith, StartsWith,
    };
use crate::expr::{
        BinaryExpression, Bind, BoundPredicate, Predicate, Reference, SetExpression,
        UnaryExpression,
    };
use crate::spec::{
        DataContentType, DataFile, DataFileFormat, Datum, NestedField, PartitionField,
        PartitionSpec, PrimitiveType, Schema, Struct, Transform, Type,
    };
use fnv::FnvHashSet;
use std::collections::HashMap;
use std::ops::Not;
use std::sync::Arc;

</rust function dependency libraries>

</message>
<function>
fn starts_with(
        &mut self,
        reference: &BoundReference,
        datum: &Datum,
        _predicate: &BoundPredicate,
    ) -> crate::Result<bool> {
        let field_id = reference.field().id;

        if self.contains_nulls_only(field_id) {
            return ROWS_CANNOT_MATCH;
        }

        let PrimitiveLiteral::String(datum) = datum.literal() else {
            return Err(Error::new(
                ErrorKind::Unexpected,
                "Cannot use StartsWith operator on non-string values",
            ));
        };

        if let Some(lower_bound) = self.lower_bound(field_id) {
            let PrimitiveLiteral::String(lower_bound) = lower_bound.literal() else {
                return Err(Error::new(
                    ErrorKind::Unexpected,
                    "Cannot use StartsWith operator on non-string lower_bound value",
                ));
            };

            let prefix_length = lower_bound.chars().count().min(datum.chars().count());

            // truncate lower bound so that its length
            // is not greater than the length of prefix
            let truncated_lower_bound = lower_bound.chars().take(prefix_length).collect::<String>();
            if datum < &truncated_lower_bound {
                return ROWS_CANNOT_MATCH;
            }
        }

        if let Some(upper_bound) = self.upper_bound(field_id) {
            let PrimitiveLiteral::String(upper_bound) = upper_bound.literal() else {
                return Err(Error::new(
                    ErrorKind::Unexpected,
                    "Cannot use StartsWith operator on non-string upper_bound value",
                ));
            };

            let prefix_length = upper_bound.chars().count().min(datum.chars().count());

            // truncate upper bound so that its length
            // is not greater than the length of prefix
            let truncated_upper_bound = upper_bound.chars().take(prefix_length).collect::<String>();
            if datum > &truncated_upper_bound {
                return ROWS_CANNOT_MATCH;
            }
        }

        ROWS_MIGHT_MATCH
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Java function, Rust function signature, dependencies, and libraries:

```rust
fn starts_with(
    &mut self,
    reference: &BoundReference,
    datum: &Datum,
    _predicate: &BoundPredicate,
) -> crate::Result<bool> {
    let pos = reference.field().field_id();
    if self.contains_nulls_only(pos) {
        return ROWS_CANNOT_MATCH; // values are all null and literal cannot contain null
    }

    let prefix = match datum {
        Datum::Primitive(PrimitiveLiteral::String(s)) => s.as_bytes(),
        Datum::Primitive(PrimitiveLiteral::Binary(b)) => b,
        _ => return Err(Error {
            kind: ErrorKind::DataInvalid,
            message: "Invalid datum type for starts_with".to_string(),
            context: vec![],
            source: None,
            backtrace: std::backtrace::Backtrace::capture(),
        }),
    };

    let lower_bound = self.data_file.lower_bounds().get(&pos).ok_or_else(|| Error {
        kind: ErrorKind::DataInvalid,
        message: "Lower bound not found".to_string(),
        context: vec![],
        source: None,
        backtrace: std::backtrace::Backtrace::capture(),
    })?;

    let upper_bound = self.data_file.upper_bounds().get(&pos).ok_or_else(|| Error {
        kind: ErrorKind::DataInvalid,
        message: "Upper bound not found".to_string(),
        context: vec![],
        source: None,
        backtrace: std::backtrace::Backtrace::capture(),
    })?;

    let lower_length = std::cmp::min(prefix.len(), lower_bound.len());
    let upper_length = std::cmp::min(prefix.len(), upper_bound.len());

    if lower_bound[..lower_length] > prefix {
        return ROWS_CANNOT_MATCH;
    }

    if upper_bound[..upper_length] < prefix {
        return ROWS_CANNOT_MATCH;
    }

    ROWS_MIGHT_MATCH
}
```

This Rust implementation follows the logic of the Java function while adapting to the provided Rust function signature and dependencies. It uses the `contains_nulls_only` method to check for null values, handles different datum types, and compares the prefix with the lower and upper bounds of the field. The function returns the appropriate result based on these comparisons.</translated function>Here's the translated Rust function based on the provided Java function, Rust function signature, dependencies, and libraries:

```rust
fn starts_with(
    &mut self,
    reference: &BoundReference,
    datum: &Datum,
    _predicate: &BoundPredicate,
) -> crate::Result<bool> {
    let pos = reference.field().field_id();
    if self.contains_nulls_only(pos) {
        return ROWS_CANNOT_MATCH; // values are all null and literal cannot contain null
    }

    let prefix = match datum {
        Datum::Primitive(PrimitiveLiteral::String(s)) => s.as_bytes(),
        Datum::Primitive(PrimitiveLiteral::Binary(b)) => b,
        _ => return Err(Error {
            kind: ErrorKind::DataInvalid,
            message: "Invalid datum type for starts_with".to_string(),
            context: vec![],
            source: None,
            backtrace: std::backtrace::Backtrace::capture(),
        }),
    };

    let lower_bound = self.data_file.lower_bounds().get(&pos).ok_or_else(|| Error {
        kind: ErrorKind::DataInvalid,
        message: "Lower bound not found".to_string(),
        context: vec![],
        source: None,
        backtrace: std::backtrace::Backtrace::capture(),
    })?;

    let upper_bound = self.data_file.upper_bounds().get(&pos).ok_or_else(|| Error {
        kind: ErrorKind::DataInvalid,
        message: "Upper bound not found".to_string(),
        context: vec![],
        source: None,
        backtrace: std::backtrace::Backtrace::capture(),
    })?;

    let lower_length = std::cmp::min(prefix.len(), lower_bound.len());
    let upper_length = std::cmp::min(prefix.len(), upper_bound.len());

    if lower_bound[..lower_length] > prefix {
        return ROWS_CANNOT_MATCH;
    }

    if upper_bound[..upper_length] < prefix {
        return ROWS_CANNOT_MATCH;
    }

    ROWS_MIGHT_MATCH
}
```

This Rust implementation follows the logic of the Java function while adapting to the provided Rust function signature and dependencies. It uses the `contains_nulls_only` method to check for null values, handles different datum types, and compares the prefix with the lower and upper bounds of the field. The function returns the appropriate result based on these comparisons.
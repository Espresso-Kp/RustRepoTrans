<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def put(self, msg: rpc_pb2.Message) -> None:
        """
        Put a message into the mcache.

        :param msg: The rpc message to put in. Should contain seqno and from_id
        """
        mid: Tuple[bytes, bytes] = (msg.seqno, msg.from_id)
        self.msgs[mid] = msg

        self.history[0].append(CacheEntry(mid, msg.topicIDs))
</python function>
<rust function signature>
pub(crate) fn put(&mut self, message_id: &MessageId, msg: RawMessage) -> bool 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::topic::TopicHash;
use crate::types::{MessageId, RawMessage};
use libp2p_identity::PeerId;
use std::collections::hash_map::Entry;
use std::fmt::Debug;
use std::{
    collections::{HashMap, HashSet},
    fmt,
};
use super::*;
use crate::IdentTopic as Topic;

</rust function dependency libraries>

</message>
<function>
pub(crate) fn put(&mut self, message_id: &MessageId, msg: RawMessage) -> bool {
        match self.msgs.entry(message_id.clone()) {
            Entry::Occupied(_) => {
                // Don't add duplicate entries to the cache.
                false
            }
            Entry::Vacant(entry) => {
                let cache_entry = CacheEntry {
                    mid: message_id.clone(),
                    topic: msg.topic.clone(),
                };
                entry.insert((msg, HashSet::default()));
                self.history[0].push(cache_entry);

                tracing::trace!(message=?message_id, "Put message in mcache");
                true
            }
        }
    }
</function>
<translated function>
 ```rust
pub(crate) fn put(&mut self, message_id: &MessageId, msg: RawMessage) -> bool {
    match self.msgs.entry(message_id.clone()) {
        Entry::Occupied(_) => false,
        Entry::Vacant(entry) => {
            entry.insert(msg);
            self.history[0].push(CacheEntry(message_id.clone(), msg.topic_ids.clone()));
            true
        }
    }
}
```</translated function> ```rust
pub(crate) fn put(&mut self, message_id: &MessageId, msg: RawMessage) -> bool {
    match self.msgs.entry(message_id.clone()) {
        Entry::Occupied(_) => false,
        Entry::Vacant(entry) => {
            entry.insert(msg);
            self.history[0].push(CacheEntry(message_id.clone(), msg.topic_ids.clone()));
            true
        }
    }
}
```
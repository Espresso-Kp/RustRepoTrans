<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def get_public_key(self) -> PublicKey:
        return RSAPublicKey(self.impl.publickey())
</python function>
<rust function signature>
pub fn public(&self) -> PublicKey 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use super::error::*;
use asn1_der::typed::{DerDecodable, DerEncodable, DerTypeView, Sequence};
use asn1_der::{Asn1DerError, Asn1DerErrorVariant, DerObject, Sink, VecBacking};
use ring::rand::SystemRandom;
use ring::signature::KeyPair;
use ring::signature::{self, RsaKeyPair, RSA_PKCS1_2048_8192_SHA256, RSA_PKCS1_SHA256};
use std::{fmt, sync::Arc};
use zeroize::Zeroize;
use super::*;
use quickcheck::*;

</rust function dependency libraries>

</message>
<function>
pub fn public(&self) -> PublicKey {
        PublicKey(self.0.public_key().as_ref().to_vec())
    }
</function>
<translated function>
 ```rust
pub fn public(&self) -> PublicKey {
    let key_pair = self.impl.publickey();
    let rsa_key_pair = match key_pair {
        KeyPair::RSA(k) => k,
        _ => return Err(Error::new(ErrorKind::InvalidData, "Not an RSA key pair")),
    };
    PublicKey(Arc::new(RsaPublicKey {
        key_pair: rsa_key_pair,
    }))
}
```</translated function> ```rust
pub fn public(&self) -> PublicKey {
    let key_pair = self.impl.publickey();
    let rsa_key_pair = match key_pair {
        KeyPair::RSA(k) => k,
        _ => return Err(Error::new(ErrorKind::InvalidData, "Not an RSA key pair")),
    };
    PublicKey(Arc::new(RsaPublicKey {
        key_pair: rsa_key_pair,
    }))
}
```
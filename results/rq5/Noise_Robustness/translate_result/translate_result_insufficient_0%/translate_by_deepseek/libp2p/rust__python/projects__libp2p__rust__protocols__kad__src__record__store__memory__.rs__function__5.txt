<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def get(self, peer_id: ID, key: str) -> Any:
        """
        :param peer_id: peer ID to get peer data for
        :param key: the key to search value for
        :return: value corresponding to the key
        :raise PeerStoreError: if peer ID or value not found
        """
        if peer_id in self.peer_data_map:
            try:
                val = self.peer_data_map[peer_id].get_metadata(key)
            except PeerDataError as error:
                raise PeerStoreError() from error
            return val
        raise PeerStoreError("peer ID not found")
</python function>
<rust function signature>
fn get(&self, k: &Key) -> Option<Cow<'_, Record>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use super::*;
use crate::kbucket;
use smallvec::SmallVec;
use std::collections::{hash_map, hash_set, HashMap, HashSet};
use std::iter;
use super::*;
use crate::SHA_256_MH;
use quickcheck::*;
use rand::Rng;

</rust function dependency libraries>

</message>
<function>
fn get(&self, k: &Key) -> Option<Cow<'_, Record>> {
        self.records.get(k).map(Cow::Borrowed)
    }
</function>
<translated function>
 ```rust
use super::*;
use crate::kbucket;
use smallvec::SmallVec;
use std::collections::{hash_map, hash_set, HashMap, HashSet};
use std::iter;
use super::*;
use crate::SHA_256_MH;
use quickcheck::*;
use rand::Rng;

impl PeerStore {
    fn get(&self, k: &Key) -> Option<Cow<'_, Record>> {
        if self.peer_data_map.contains_key(k) {
            match self.peer_data_map[k].get_metadata(k) {
                Ok(val) => Some(val),
                Err(_) => {
                    panic!("PeerDataError should not be raised as we have already checked the key presence");
                }
            }
        } else {
            panic!("PeerStoreError: peer ID not found");
        }
    }
}
```</translated function> ```rust
use super::*;
use crate::kbucket;
use smallvec::SmallVec;
use std::collections::{hash_map, hash_set, HashMap, HashSet};
use std::iter;
use super::*;
use crate::SHA_256_MH;
use quickcheck::*;
use rand::Rng;

impl PeerStore {
    fn get(&self, k: &Key) -> Option<Cow<'_, Record>> {
        if self.peer_data_map.contains_key(k) {
            match self.peer_data_map[k].get_metadata(k) {
                Ok(val) => Some(val),
                Err(_) => {
                    panic!("PeerDataError should not be raised as we have already checked the key presence");
                }
            }
        } else {
            panic!("PeerStoreError: peer ID not found");
        }
    }
}
```
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def filter_alt_coherence_matches(results: CoherenceMatches) -> CoherenceMatches:
    """
    We shall NOT return "English" in CoherenceMatches because it is an alternative
    of "English". This function only keeps the best match and remove the em-dash in it.
    """
    index_results: Dict[str, List[float]] = dict()

    for result in results:
        language, ratio = result
        no_em_name: str = language.replace("", "")

        if no_em_name not in index_results:
            index_results[no_em_name] = []

        index_results[no_em_name].append(ratio)

    if any(len(index_results[e]) > 1 for e in index_results):
        filtered_results: CoherenceMatches = []

        for language in index_results:
            filtered_results.append((language, max(index_results[language])))

        return filtered_results

    return results
</python function>
<rust function signature>
pub(crate) fn filter_alt_coherence_matches(results: &CoherenceMatches) -> CoherenceMatches 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::assets::{ENCODING_TO_LANGUAGE, LANGUAGES, LANGUAGE_SUPPORTED_COUNT};
use crate::consts::TOO_SMALL_SEQUENCE;
use crate::entity::{CoherenceMatch, CoherenceMatches, Language};
use crate::utils::{
    get_language_data, is_accentuated, is_multi_byte_encoding, is_suspiciously_successive_range,
    is_unicode_range_secondary, unicode_range,
};
use ahash::{HashMap, HashMapExt, HashSet};
use cached::proc_macro::cached;
use counter::Counter;
use encoding::label::encoding_from_whatwg_label;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use strsim::jaro;

</rust function dependency libraries>

</message>
<function>
pub(crate) fn filter_alt_coherence_matches(results: &CoherenceMatches) -> CoherenceMatches {
    let mut index: HashMap<&Language, f32> = HashMap::with_capacity(results.len());
    for result in results {
        let score = index.entry(result.language).or_default();
        *score = result.score.max(*score);
    }
    index
        .into_iter()
        .map(|(language, score)| CoherenceMatch { language, score })
        .collect()
}
</function>
<translated function>
 ```rust
use crate::assets::{ENCODING_TO_LANGUAGE, LANGUAGES, LANGUAGE_SUPPORTED_COUNT};
use crate::consts::TOO_SMALL_SEQUENCE;
use crate::entity::{CoherenceMatch, CoherenceMatches, Language};
use crate::utils::{
    get_language_data, is_accentuated, is_multi_byte_encoding, is_suspiciously_successive_range,
    is_unicode_range_secondary, unicode_range,
};
use ahash::{HashMap, HashMapExt, HashSet};
use cached::proc_macro::cached;
use counter::Counter;
use encoding::label::encoding_from_whatwg_label;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use strsim::jaro;

pub(crate) fn filter_alt_coherence_matches(results: &CoherenceMatches) -> CoherenceMatches {
    let mut index_results: HashMap<String, Vec<f64>> = HashMap::new();

    for result in results {
        let language = &result.0;
        let ratio = result.1;
        let no_em_name: String = language.replace("", "");

        if !index_results.contains_key(&no_em_name) {
            index_results.insert(no_em_name.clone(), Vec::new());
        }

        if let Some(vec) = index_results.get_mut(&no_em_name) {
            vec.push(ratio);
        }
    }

    let mut filtered_results: CoherenceMatches = Vec::new();

    for (language, ratios) in index_results {
        if ratios.len() > 1 {
            filtered_results.push((language, *ratios.iter().max().unwrap()));
        } else {
            filtered_results.push((language, ratios[0]));
        }
    }

    if filtered_results.is_empty() {
        results.clone()
    } else {
        filtered_results
    }
}
```</translated function> ```rust
use crate::assets::{ENCODING_TO_LANGUAGE, LANGUAGES, LANGUAGE_SUPPORTED_COUNT};
use crate::consts::TOO_SMALL_SEQUENCE;
use crate::entity::{CoherenceMatch, CoherenceMatches, Language};
use crate::utils::{
    get_language_data, is_accentuated, is_multi_byte_encoding, is_suspiciously_successive_range,
    is_unicode_range_secondary, unicode_range,
};
use ahash::{HashMap, HashMapExt, HashSet};
use cached::proc_macro::cached;
use counter::Counter;
use encoding::label::encoding_from_whatwg_label;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use strsim::jaro;

pub(crate) fn filter_alt_coherence_matches(results: &CoherenceMatches) -> CoherenceMatches {
    let mut index_results: HashMap<String, Vec<f64>> = HashMap::new();

    for result in results {
        let language = &result.0;
        let ratio = result.1;
        let no_em_name: String = language.replace("", "");

        if !index_results.contains_key(&no_em_name) {
            index_results.insert(no_em_name.clone(), Vec::new());
        }

        if let Some(vec) = index_results.get_mut(&no_em_name) {
            vec.push(ratio);
        }
    }

    let mut filtered_results: CoherenceMatches = Vec::new();

    for (language, ratios) in index_results {
        if ratios.len() > 1 {
            filtered_results.push((language, *ratios.iter().max().unwrap()));
        } else {
            filtered_results.push((language, ratios[0]));
        }
    }

    if filtered_results.is_empty() {
        results.clone()
    } else {
        filtered_results
    }
}
```
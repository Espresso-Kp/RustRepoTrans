<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
void RAND_seed(csprng *rng,int rawlen,const char *raw)
{
    /* initialise from at least 128 byte string of raw  *
     * random (keyboard?) input, and 32-bit time-of-day */
    int i;
    char digest[32];
    uchar b[4];
    hash256 sh;
    rng->pool_ptr=0;
    for (i=0; i<NK; i++) rng->ira[i]=0;
    if (rawlen>0)
    {
        HASH256_init(&sh);
        for (i=0; i<rawlen; i++)
            HASH256_process(&sh,raw[i]);
        HASH256_hash(&sh,digest);

        /* initialise PRNG from distilled randomness */

        for (i=0; i<8; i++)
        {
            b[0]=digest[4*i];
            b[1]=digest[4*i+1];
            b[2]=digest[4*i+2];
            b[3]=digest[4*i+3];
            sirand(rng,pack(b));
        }
    }
    fill_pool(rng);
}
</c function>
<rust function signature>
pub fn seed(&mut self, rawlen: usize, raw: &[u8]) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::hash256::HASH256;

</rust function dependency libraries>

</message>
<function>
pub fn seed(&mut self, rawlen: usize, raw: &[u8]) {
        /* initialise from at least 128 byte string of raw random entropy */
        let mut b: [u8; 4] = [0; 4];
        let mut sh = HASH256::new();
        self.pool_ptr = 0;

        for i in 0..RAND_NK {
            self.ira[i] = 0
        }
        if rawlen > 0 {
            for i in 0..rawlen {
                sh.process(raw[i]);
            }
            let digest = sh.hash();

            /* initialise PRNG from distilled randomness */

            for i in 0..8 {
                b[0] = digest[4 * i];
                b[1] = digest[4 * i + 1];
                b[2] = digest[4 * i + 2];
                b[3] = digest[4 * i + 3];
                self.sirand(RAND::pack(b));
            }
        }
        self.fill_pool();
    }
</function>
<translated function>
 ```rust
use crate::hash256::HASH256;

pub fn seed(&mut self, rawlen: usize, raw: &[u8]) {
    // initialise from at least 128 byte string of raw random (keyboard?) input, and 32-bit time-of-day
    let mut i: usize = 0;
    let mut digest = [0u8; 32];
    let mut b = [0u8; 4];
    let mut sh = HASH256::new();
    self.pool_ptr = 0;
    for _ in 0..NK {
        self.ira[i] = 0;
        i += 1;
    }
    if rawlen > 0 {
        sh.init();
        for i in 0..rawlen {
            sh.process(raw[i]);
        }
        sh.hash(&mut digest);

        // initialise PRNG from distilled randomness
        for i in 0..8 {
            b[0] = digest[4 * i];
            b[1] = digest[4 * i + 1];
            b[2] = digest[4 * i + 2];
            b[3] = digest[4 * i + 3];
            self.sirand(b.pack());
        }
    }
    self.fill_pool();
}
```</translated function> ```rust
use crate::hash256::HASH256;

pub fn seed(&mut self, rawlen: usize, raw: &[u8]) {
    // initialise from at least 128 byte string of raw random (keyboard?) input, and 32-bit time-of-day
    let mut i: usize = 0;
    let mut digest = [0u8; 32];
    let mut b = [0u8; 4];
    let mut sh = HASH256::new();
    self.pool_ptr = 0;
    for _ in 0..NK {
        self.ira[i] = 0;
        i += 1;
    }
    if rawlen > 0 {
        sh.init();
        for i in 0..rawlen {
            sh.process(raw[i]);
        }
        sh.hash(&mut digest);

        // initialise PRNG from distilled randomness
        for i in 0..8 {
            b[0] = digest[4 * i];
            b[1] = digest[4 * i + 1];
            b[2] = digest[4 * i + 2];
            b[3] = digest[4 * i + 3];
            self.sirand(b.pack());
        }
    }
    self.fill_pool();
}
```
<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int PUBLIC_KEY_VALIDATE(byte[] W)
	{
		BIG r,q,k;
		ECP WP=ECP.fromBytes(W);
		int nb,res=0;

		r=new BIG(ROM.CURVE_Order);

		if (WP.is_infinity()) res=INVALID_PUBLIC_KEY;

		if (res==0)
		{

			q=new BIG(ROM.Modulus);
			nb=q.nbits();
			k=new BIG(1); k.shl((nb+4)/2);
			k.add(q);
			k.div(r);

			while (k.parity()==0)
			{
				k.shr(1);
				WP.dbl();
			}

			if (!k.isunity()) WP=WP.mul(k);
			if (WP.is_infinity()) res=INVALID_PUBLIC_KEY; 
		}
		return res;
	}
</java function>
<rust function signature>
pub fn public_key_validate(w: &[u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

</rust function dependency libraries>

</message>
<function>
pub fn public_key_validate(w: &[u8]) -> isize {
    let mut WP = ECP::from_bytes(w);
    let mut res = 0;

    let r = Big::new_ints(&rom::CURVE_ORDER);

    if WP.is_infinity() {
        res = INVALID_PUBLIC_KEY
    }
    if res == 0 {
        let q = Big::new_ints(&rom::MODULUS);
        let nb = q.nbits();
        let mut k = Big::new();
        k.one();
        k.shl((nb + 4) / 2);
        k.add(&q);
        k.div(&r);

        while k.parity() == 0 {
            k.shr(1);
            WP.dbl();
        }

        if !k.is_unity() {
            WP = WP.mul(&k)
        }
        if WP.is_infinity() {
            res = INVALID_PUBLIC_KEY
        }
    }
    res
}
</function>
<translated function>
 ```rust
use super::big::Big;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

pub fn public_key_validate(w: &[u8]) -> isize {
    let r = Big::from_rom(rom::CURVE_Order);
    let q = Big::from_rom(rom::Modulus);
    let nb = q.nbits();
    let mut k = Big::new(1);
    k.shl((nb + 4) / 2);
    k.add(&q);
    k.div(&r);

    while k.parity() == 0 {
        k.shr(1);
        let mut wp = ECP::from_bytes(w).unwrap();
        wp.dbl();
    }

    if !k.is_unity() {
        let mut wp = ECP::from_bytes(w).unwrap();
        wp.mul(&k);
    }

    if wp.is_infinity() {
        INVALID_PUBLIC_KEY
    } else {
        0
    }
}
```</translated function> ```rust
use super::big::Big;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

pub fn public_key_validate(w: &[u8]) -> isize {
    let r = Big::from_rom(rom::CURVE_Order);
    let q = Big::from_rom(rom::Modulus);
    let nb = q.nbits();
    let mut k = Big::new(1);
    k.shl((nb + 4) / 2);
    k.add(&q);
    k.div(&r);

    while k.parity() == 0 {
        k.shr(1);
        let mut wp = ECP::from_bytes(w).unwrap();
        wp.dbl();
    }

    if !k.is_unity() {
        let mut wp = ECP::from_bytes(w).unwrap();
        wp.mul(&k);
    }

    if wp.is_infinity() {
        INVALID_PUBLIC_KEY
    } else {
        0
    }
}
```
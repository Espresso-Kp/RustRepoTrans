<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int GET_CLIENT_PERMIT(int sha,int date,byte[] S,byte[] CID,byte[] CTT)
	{
		byte[] h=hashit(sha,date,CID,EFS);
		ECP P=ECP.mapit(h);

		BIG s=BIG.fromBytes(S);
		ECP OP=PAIR192.G1mul(P,s);

		OP.toBytes(CTT,false);
		return 0;
	}
</java function>
<rust function signature>
pub fn get_client_permit(sha: usize, date: usize, s: &[u8], cid: &[u8], ctt: &mut [u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp4::ECP4;
use super::fp24::FP24;
use super::fp8::FP8;
use super::pair192;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn get_client_permit(sha: usize, date: usize, s: &[u8], cid: &[u8], ctt: &mut [u8]) -> isize {
    const RM: usize = big::MODBYTES as usize;
    let mut h: [u8; RM] = [0; RM];
    hashit(sha, date, cid, &mut h);
    let mut P = ECP::mapit(&h);

    let mut sc = Big::from_bytes(s);
    pair192::g1mul(&mut P, &mut sc).to_bytes(ctt, false);
    return 0;
}
</function>
<translated function>
 ```rust
pub fn get_client_permit(sha: usize, date: usize, s: &[u8], cid: &[u8], ctt: &mut [u8]) -> isize {
    use std::time::SystemTime;
    use std::time::UNIX_EPOCH;
    use super::big;
    use super::big::Big;
    use super::ecp;
    use super::ecp::ECP;
    use super::ecp4::ECP4;
    use super::fp24::FP24;
    use super::fp8::FP8;
    use super::pair192;
    use super::rom;
    use crate::hash256::HASH256;
    use crate::hash384::HASH384;
    use crate::hash512::HASH512;
    use crate::rand::RAND;
    use super::*;
    use crate::test_utils::*;

    let h = hashit(sha, date, cid, s);
    let p = ECP::mapit(&h);

    let s = Big::from_bytes(s);
    let op = PAIR192::g1mul(&p, &s);

    op.to_bytes(ctt, false);
    0
}
```</translated function> ```rust
pub fn get_client_permit(sha: usize, date: usize, s: &[u8], cid: &[u8], ctt: &mut [u8]) -> isize {
    use std::time::SystemTime;
    use std::time::UNIX_EPOCH;
    use super::big;
    use super::big::Big;
    use super::ecp;
    use super::ecp::ECP;
    use super::ecp4::ECP4;
    use super::fp24::FP24;
    use super::fp8::FP8;
    use super::pair192;
    use super::rom;
    use crate::hash256::HASH256;
    use crate::hash384::HASH384;
    use crate::hash512::HASH512;
    use crate::rand::RAND;
    use super::*;
    use crate::test_utils::*;

    let h = hashit(sha, date, cid, s);
    let p = ECP::mapit(&h);

    let s = Big::from_bytes(s);
    let op = PAIR192::g1mul(&p, &s);

    op.to_bytes(ctt, false);
    0
}
```
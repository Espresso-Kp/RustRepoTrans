<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static void CLIENT(RAND RNG,byte[] SB,byte[] UC,byte[] KEY)
	{
		int i;
		SHA3 sh=new SHA3(SHA3.HASH256);

		byte[] seed=new byte[32];
		byte[] array=new byte[1792];
		byte[] key=new byte[32];
		byte[] cc=new byte[384];

		int[] sd=new int[DEGREE];
		int[] ed=new int[DEGREE];
		int[] u=new int[DEGREE];
		int[] k=new int[DEGREE];
		int[] c=new int[DEGREE];
		
		Error(RNG,sd);
		Error(RNG,ed);

		ntt(sd);
		ntt(ed);

		for (i=0;i<32;i++)
			seed[i]=SB[i];

		for (i=0;i<1792;i++)
			array[i]=SB[i+32];

		Parse(seed,u);

		poly_mul(u,u,sd);
		poly_add(u,u,ed);
		poly_hard_reduce(u);

		for (i=0;i<32;i++)
			key[i]=(byte)RNG.getByte();

		for (i=0;i<32;i++)
			sh.process(key[i]);
		sh.hash(key);

		Encode(key,k);

		unpack(array,c);
		nres_it(c);

		poly_mul(c,c,sd);
		intt(c);
		Error(RNG,ed);
		poly_add(c,c,ed);
		poly_add(c,c,k);

		Compress(c,cc);

		sh.init(SHA3.HASH256);
		for (i=0;i<32;i++)
			sh.process(key[i]);
		sh.hash(key);

		for (i=0;i<32;i++)
			KEY[i]=key[i];

		redc_it(u);
		pack(u,array);

		for (i=0;i<1792;i++)
			UC[i]=array[i];
		for (i=0;i<384;i++)
			UC[i+1792]=cc[i];

	}
</java function>
<rust function signature>
pub fn client(mut rng: &mut RAND, sb: &[u8], uc: &mut [u8], okey: &mut [u8]) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::rand::RAND;
use crate::sha3;
use crate::sha3::SHA3;
use super::*;

</rust function dependency libraries>

</message>
<function>
pub fn client(mut rng: &mut RAND, sb: &[u8], uc: &mut [u8], okey: &mut [u8]) {
    let mut sh = SHA3::new(sha3::HASH256);

    let mut seed: [u8; 32] = [0; 32];
    let mut array: [u8; 1792] = [0; 1792];
    let mut key: [u8; 32] = [0; 32];
    let mut cc: [u8; 384] = [0; 384];

    let mut sd: [i32; DEGREE] = [0; DEGREE];
    let mut ed: [i32; DEGREE] = [0; DEGREE];
    let mut u: [i32; DEGREE] = [0; DEGREE];
    let mut k: [i32; DEGREE] = [0; DEGREE];
    let mut c: [i32; DEGREE] = [0; DEGREE];

    error(&mut rng, &mut sd);
    error(&mut rng, &mut ed);

    ntt(&mut sd);
    ntt(&mut ed);

    for i in 0..32 {
        seed[i] = sb[i];
    }

    for i in 0..1792 {
        array[i] = sb[i + 32];
    }

    parse(&seed, &mut u);

    poly_mul(&mut u, &sd);
    poly_add(&mut u, &ed);
    poly_hard_reduce(&mut u);

    for i in 0..32 {
        key[i] = rng.getbyte();
    }

    for i in 0..32 {
        sh.process(key[i]);
    }
    sh.hash(&mut key);

    encode(&key, &mut k);

    nhs_unpack(&array, &mut c);
    nres_it(&mut c);

    poly_mul(&mut c, &sd);
    intt(&mut c);
    error(&mut rng, &mut ed);
    poly_add(&mut c, &ed);
    poly_add(&mut c, &k);

    compress(&c, &mut cc);

    sh = SHA3::new(sha3::HASH256);
    for i in 0..32 {
        sh.process(key[i]);
    }
    sh.hash(&mut key);

    for i in 0..32 {
        okey[i] = key[i];
    }

    redc_it(&mut u);
    nhs_pack(&u, &mut array);

    for i in 0..1792 {
        uc[i] = array[i];
    }

    for i in 0..384 {
        uc[i + 1792] = cc[i];
    }
}
</function>
<translated function>
 ```rust
use crate::rand::RAND;
use crate::sha3::SHA3;
use super::*;

pub fn client(mut rng: &mut RAND, sb: &[u8], uc: &mut [u8], okey: &mut [u8]) {
    let mut sh = SHA3::new(SHA3::HASH256);

    let mut seed = vec![0u8; 32];
    let mut array = vec![0u8; 1792];
    let mut key = vec![0u8; 32];
    let mut cc = vec![0u8; 384];

    let mut sd = vec![0; DEGREE];
    let mut ed = vec![0; DEGREE];
    let mut u = vec![0; DEGREE];
    let mut k = vec![0; DEGREE];
    let mut c = vec![0; DEGREE];

    Error(rng, &mut sd);
    Error(rng, &mut ed);

    ntt(&mut sd);
    ntt(&mut ed);

    for i in 0..32 {
        seed[i] = sb[i];
    }

    for i in 0..1792 {
        array[i] = sb[i + 32];
    }

    Parse(&seed, &mut u);

    poly_mul(&mut u, &mut u, &sd);
    poly_add(&mut u, &mut u, &ed);
    poly_hard_reduce(&mut u);

    for i in 0..32 {
        key[i] = rng.get_byte() as u8;
    }

    for i in 0..32 {
        sh.process(key[i]);
    }
    sh.hash(&mut key);

    Encode(&key, &mut k);

    unpack(&array, &mut c);
    nres_it(&mut c);

    poly_mul(&mut c, &mut c, &sd);
    intt(&mut c);
    Error(rng, &mut ed);
    poly_add(&mut c, &mut c, &ed);
    poly_add(&mut c, &mut c, &k);

    Compress(&mut c, &mut cc);

    sh.init(SHA3::HASH256);
    for i in 0..32 {
        sh.process(key[i]);
    }
    sh.hash(&mut key);

    for i in 0..32 {
        okey[i] = key[i];
    }

    redc_it(&mut u);
    pack(&mut u, &mut array);

    for i in 0..1792 {
        uc[i] = array[i];
    }
    for i in 0..384 {
        uc[i + 1792] = cc[i];
    }
}
```</translated function> ```rust
use crate::rand::RAND;
use crate::sha3::SHA3;
use super::*;

pub fn client(mut rng: &mut RAND, sb: &[u8], uc: &mut [u8], okey: &mut [u8]) {
    let mut sh = SHA3::new(SHA3::HASH256);

    let mut seed = vec![0u8; 32];
    let mut array = vec![0u8; 1792];
    let mut key = vec![0u8; 32];
    let mut cc = vec![0u8; 384];

    let mut sd = vec![0; DEGREE];
    let mut ed = vec![0; DEGREE];
    let mut u = vec![0; DEGREE];
    let mut k = vec![0; DEGREE];
    let mut c = vec![0; DEGREE];

    Error(rng, &mut sd);
    Error(rng, &mut ed);

    ntt(&mut sd);
    ntt(&mut ed);

    for i in 0..32 {
        seed[i] = sb[i];
    }

    for i in 0..1792 {
        array[i] = sb[i + 32];
    }

    Parse(&seed, &mut u);

    poly_mul(&mut u, &mut u, &sd);
    poly_add(&mut u, &mut u, &ed);
    poly_hard_reduce(&mut u);

    for i in 0..32 {
        key[i] = rng.get_byte() as u8;
    }

    for i in 0..32 {
        sh.process(key[i]);
    }
    sh.hash(&mut key);

    Encode(&key, &mut k);

    unpack(&array, &mut c);
    nres_it(&mut c);

    poly_mul(&mut c, &mut c, &sd);
    intt(&mut c);
    Error(rng, &mut ed);
    poly_add(&mut c, &mut c, &ed);
    poly_add(&mut c, &mut c, &k);

    Compress(&mut c, &mut cc);

    sh.init(SHA3::HASH256);
    for i in 0..32 {
        sh.process(key[i]);
    }
    sh.hash(&mut key);

    for i in 0..32 {
        okey[i] = key[i];
    }

    redc_it(&mut u);
    pack(&mut u, &mut array);

    for i in 0..1792 {
        uc[i] = array[i];
    }
    for i in 0..384 {
        uc[i + 1792] = cc[i];
    }
}
```
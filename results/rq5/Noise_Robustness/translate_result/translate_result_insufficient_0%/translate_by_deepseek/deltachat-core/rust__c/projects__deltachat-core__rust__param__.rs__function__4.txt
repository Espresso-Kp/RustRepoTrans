<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
char* dc_param_get(const dc_param_t* param, int key, const char* def)
{
	char* p1 = NULL;
	char* p2 = NULL;
	char  bak = 0;
	char* ret = NULL;

	if (param==NULL || key==0) {
		return def? dc_strdup(def) : NULL;
	}

	p1 = find_param(param->packed, key, &p2);
	if (p1==NULL) {
		return def? dc_strdup(def) : NULL;
	}

	p1 += 2; /* skip key and "=" (safe as find_param checks for its existance) */

	bak = *p2;
	*p2 = 0;
	ret = dc_strdup(p1);
	dc_rtrim(ret); /* to be safe with '\r' characters ... */
	*p2 = bak;
	return ret;
}
</c function>
<rust function signature>
pub fn get(&self, key: Param) -> Option<&str> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::collections::BTreeMap;
use std::fmt;
use std::path::PathBuf;
use std::str;
use anyhow::{bail, Error, Result};
use num_traits::FromPrimitive;
use serde::{Deserialize, Serialize};
use crate::blob::BlobObject;
use crate::context::Context;
use crate::mimeparser::SystemMessage;
use std::path::Path;
use std::str::FromStr;
use tokio::fs;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub fn get(&self, key: Param) -> Option<&str> {
        self.inner.get(&key).map(|s| s.as_str())
    }
</function>
<translated function>
 ```rust
pub fn get(&self, key: Param) -> Option<&str> {
    if key == 0 {
        return None;
    }

    if let Some(p1) = self.find_param(&self.packed, key) {
        let p2 = p1.clone();
        let bak = *p2.as_bytes().get(1).unwrap() as char;
        let mut p2_bytes = p2.as_bytes().to_vec();
        p2_bytes[1] = 0;
        let ret = std::str::from_utf8(&p2_bytes[2..]).unwrap().trim_end_matches('\r').to_string();
        p2_bytes[1] = bak as u8;
        Some(ret.as_str())
    } else {
        None
    }
}
```</translated function> ```rust
pub fn get(&self, key: Param) -> Option<&str> {
    if key == 0 {
        return None;
    }

    if let Some(p1) = self.find_param(&self.packed, key) {
        let p2 = p1.clone();
        let bak = *p2.as_bytes().get(1).unwrap() as char;
        let mut p2_bytes = p2.as_bytes().to_vec();
        p2_bytes[1] = 0;
        let ret = std::str::from_utf8(&p2_bytes[2..]).unwrap().trim_end_matches('\r').to_string();
        p2_bytes[1] = bak as u8;
        Some(ret.as_str())
    } else {
        None
    }
}
```
<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
static void replace_in_uri(char** uri, const char* key, const char* value)
{
	if (uri && key && value) {
		char* value_urlencoded = dc_urlencode(value);
		dc_str_replace(uri, key, value_urlencoded);
		free(value_urlencoded);
	}
}
</c function>
<rust function signature>
fn replace_in_uri(uri: &str, key: &str, value: &str) -> String 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::collections::HashMap;
use anyhow::Result;
use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};
use serde::Deserialize;
use crate::config::Config;
use crate::context::Context;
use crate::provider;
use crate::provider::Oauth2Authorizer;
use crate::socks::Socks5Config;
use crate::tools::time;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
fn replace_in_uri(uri: &str, key: &str, value: &str) -> String {
    let value_urlencoded = utf8_percent_encode(value, NON_ALPHANUMERIC).to_string();
    uri.replace(key, &value_urlencoded)
}
</function>
<translated function>
 ```rust
fn replace_in_uri(uri: &str, key: &str, value: &str) -> String {
    if uri.is_empty() || key.is_empty() || value.is_empty() {
        return uri.to_string();
    }

    let value_urlencoded = utf8_percent_encode(value, NON_ALPHANUMERIC).to_string();
    let mut uri_parts = uri.split(&['?', '&'][..]).collect::<Vec<&str>>();
    let mut replaced = false;

    for part in uri_parts.iter_mut() {
        if part.contains(key) {
            *part = format!("{}={}", key, value_urlencoded).as_str();
            replaced = true;
            break;
        }
    }

    if !replaced {
        if uri.contains('?') {
            uri_parts.push(&format!("{}", value_urlencoded));
        } else {
            uri_parts.push(&format!("?{}", value_urlencoded));
        }
    }

    uri_parts.concat()
}
```</translated function> ```rust
fn replace_in_uri(uri: &str, key: &str, value: &str) -> String {
    if uri.is_empty() || key.is_empty() || value.is_empty() {
        return uri.to_string();
    }

    let value_urlencoded = utf8_percent_encode(value, NON_ALPHANUMERIC).to_string();
    let mut uri_parts = uri.split(&['?', '&'][..]).collect::<Vec<&str>>();
    let mut replaced = false;

    for part in uri_parts.iter_mut() {
        if part.contains(key) {
            *part = format!("{}={}", key, value_urlencoded).as_str();
            replaced = true;
            break;
        }
    }

    if !replaced {
        if uri.contains('?') {
            uri_parts.push(&format!("{}", value_urlencoded));
        } else {
            uri_parts.push(&format!("?{}", value_urlencoded));
        }
    }

    uri_parts.concat()
}
```
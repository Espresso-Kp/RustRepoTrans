<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
dc_kml_t* dc_kml_parse(dc_context_t* context,
                       const char* content, size_t content_bytes)
{
	dc_kml_t*      kml = calloc(1, sizeof(dc_kml_t));
	char*          content_nullterminated = NULL;
	dc_saxparser_t saxparser;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC) {
		goto cleanup;
	}

	if (content_bytes > 1*1024*1024) {
		dc_log_warning(context, 0,
			"A kml-files with %i bytes is larger than reasonably expected.",
			content_bytes);
		goto cleanup;
	}

	content_nullterminated = dc_null_terminate(content, content_bytes);
	if (content_nullterminated==NULL) {
		goto cleanup;
	}

	kml->locations = dc_array_new_typed(context, DC_ARRAY_LOCATIONS, 100);

	dc_saxparser_init            (&saxparser, kml);
	dc_saxparser_set_tag_handler (&saxparser, kml_starttag_cb, kml_endtag_cb);
	dc_saxparser_set_text_handler(&saxparser, kml_text_cb);
	dc_saxparser_parse           (&saxparser, content_nullterminated);

cleanup:
	free(content_nullterminated);
	return kml;
}
</c function>
<rust function signature>
pub fn parse(to_parse: &[u8]) -> Result<Self> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::Duration;
use anyhow::{ensure, Context as _, Result};
use async_channel::Receiver;
use quick_xml::events::{BytesEnd, BytesStart, BytesText};
use tokio::time::timeout;
use crate::chat::{self, ChatId};
use crate::constants::DC_CHAT_ID_TRASH;
use crate::contact::ContactId;
use crate::context::Context;
use crate::events::EventType;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::tools::{duration_to_str, time};
use crate::{chatlist_events, stock_str};
use super::*;
use crate::config::Config;
use crate::message::MessageState;
use crate::receive_imf::receive_imf;
use crate::test_utils::{TestContext, TestContextManager};
use crate::tools::SystemTime;

</rust function dependency libraries>

</message>
<function>
pub fn parse(to_parse: &[u8]) -> Result<Self> {
        ensure!(to_parse.len() <= 1024 * 1024, "kml-file is too large");

        let mut reader = quick_xml::Reader::from_reader(to_parse);
        reader.trim_text(true);

        let mut kml = Kml::new();
        kml.locations = Vec::with_capacity(100);

        let mut buf = Vec::new();

        loop {
            match reader.read_event_into(&mut buf).with_context(|| {
                format!(
                    "location parsing error at position {}",
                    reader.buffer_position()
                )
            })? {
                quick_xml::events::Event::Start(ref e) => kml.starttag_cb(e, &reader),
                quick_xml::events::Event::End(ref e) => kml.endtag_cb(e),
                quick_xml::events::Event::Text(ref e) => kml.text_cb(e),
                quick_xml::events::Event::Eof => break,
                _ => (),
            }
            buf.clear();
        }

        Ok(kml)
    }
</function>
<translated function>
 ```rust
use std::time::Duration;
use anyhow::{ensure, Context as _, Result};
use async_channel::Receiver;
use quick_xml::events::{BytesEnd, BytesStart, BytesText};
use tokio::time::timeout;
use crate::chat::{self, ChatId};
use crate::constants::DC_CHAT_ID_TRASH;
use crate::contact::ContactId;
use crate::context::Context;
use crate::events::EventType;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::tools::{duration_to_str, time};
use crate::{chatlist_events, stock_str};
use super::*;
use crate::config::Config;
use crate::message::MessageState;
use crate::receive_imf::receive_imf;
use crate::test_utils::{TestContext, TestContextManager};
use crate::tools::SystemTime;

pub fn parse(to_parse: &[u8]) -> Result<Self> {
    let context = Context::new()?;
    if context.magic != DC_CONTEXT_MAGIC {
        return Err(anyhow::Error::msg("Invalid context magic"));
    }

    if to_parse.len() > 1 * 1024 * 1024 {
        dc_log_warning(&context, 0, "A kml-files with {} bytes is larger than reasonably expected.", to_parse.len());
        return Err(anyhow::Error::msg("File too large"));
    }

    let content_nullterminated = dc_null_terminate(to_parse, to_parse.len());
    if content_nullterminated.is_none() {
        return Err(anyhow::Error::msg("Failed to null-terminate content"));
    }
    let content_nullterminated = content_nullterminated.unwrap();

    let kml = Box::new(dc_kml_t {
        locations: dc_array_new_typed(context, DC_ARRAY_LOCATIONS, 100),
        ..Default::default()
    });

    let mut saxparser = dc_saxparser_t {
        kml: Some(kml.clone()),
        ..Default::default()
    };

    dc_saxparser_init(&mut saxparser, kml.as_ref());
    dc_saxparser_set_tag_handler(&mut saxparser, kml_starttag_cb, kml_endtag_cb);
    dc_saxparser_set_text_handler(&mut saxparser, kml_text_cb);
    dc_saxparser_parse(&mut saxparser, content_nullterminated);

    Ok(kml)
}
```</translated function> ```rust
use std::time::Duration;
use anyhow::{ensure, Context as _, Result};
use async_channel::Receiver;
use quick_xml::events::{BytesEnd, BytesStart, BytesText};
use tokio::time::timeout;
use crate::chat::{self, ChatId};
use crate::constants::DC_CHAT_ID_TRASH;
use crate::contact::ContactId;
use crate::context::Context;
use crate::events::EventType;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::tools::{duration_to_str, time};
use crate::{chatlist_events, stock_str};
use super::*;
use crate::config::Config;
use crate::message::MessageState;
use crate::receive_imf::receive_imf;
use crate::test_utils::{TestContext, TestContextManager};
use crate::tools::SystemTime;

pub fn parse(to_parse: &[u8]) -> Result<Self> {
    let context = Context::new()?;
    if context.magic != DC_CONTEXT_MAGIC {
        return Err(anyhow::Error::msg("Invalid context magic"));
    }

    if to_parse.len() > 1 * 1024 * 1024 {
        dc_log_warning(&context, 0, "A kml-files with {} bytes is larger than reasonably expected.", to_parse.len());
        return Err(anyhow::Error::msg("File too large"));
    }

    let content_nullterminated = dc_null_terminate(to_parse, to_parse.len());
    if content_nullterminated.is_none() {
        return Err(anyhow::Error::msg("Failed to null-terminate content"));
    }
    let content_nullterminated = content_nullterminated.unwrap();

    let kml = Box::new(dc_kml_t {
        locations: dc_array_new_typed(context, DC_ARRAY_LOCATIONS, 100),
        ..Default::default()
    });

    let mut saxparser = dc_saxparser_t {
        kml: Some(kml.clone()),
        ..Default::default()
    };

    dc_saxparser_init(&mut saxparser, kml.as_ref());
    dc_saxparser_set_tag_handler(&mut saxparser, kml_starttag_cb, kml_endtag_cb);
    dc_saxparser_set_text_handler(&mut saxparser, kml_text_cb);
    dc_saxparser_parse(&mut saxparser, content_nullterminated);

    Ok(kml)
}
```
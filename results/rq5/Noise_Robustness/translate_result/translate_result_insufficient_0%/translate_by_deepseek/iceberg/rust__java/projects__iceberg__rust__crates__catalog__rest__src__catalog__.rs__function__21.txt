<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public List<TableIdentifier> listTables(SessionContext context, Namespace ns) {
    checkNamespaceIsValid(ns);
    Map<String, String> queryParams = Maps.newHashMap();
    ImmutableList.Builder<TableIdentifier> tables = ImmutableList.builder();
    String pageToken = "";

    do {
      queryParams.put("pageToken", pageToken);
      ListTablesResponse response =
          client.get(
              paths.tables(ns),
              queryParams,
              ListTablesResponse.class,
              headers(context),
              ErrorHandlers.namespaceErrorHandler());
      pageToken = response.nextPageToken();
      tables.addAll(response.identifiers());
    } while (pageToken != null);

    return tables.build();
  }
</java function>
<rust function signature>
async fn list_tables(&self, namespace: &NamespaceIdent) -> Result<Vec<TableIdent>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::collections::HashMap;
use std::str::FromStr;
use async_trait::async_trait;
use itertools::Itertools;
use reqwest::header::{self, HeaderMap, HeaderName, HeaderValue};
use reqwest::{Client, Request, Response, StatusCode, Url};
use serde::de::DeserializeOwned;
use typed_builder::TypedBuilder;
use urlencoding::encode;
use crate::catalog::_serde::{
    CommitTableRequest, CommitTableResponse, CreateTableRequest, LoadTableResponse,
};
use iceberg::io::FileIO;
use iceberg::table::Table;
use iceberg::Result;
use iceberg::{
    Catalog, Error, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
};
use self::_serde::{
    CatalogConfig, ErrorResponse, ListNamespaceResponse, ListTableResponse, NamespaceSerde,
    RenameTableRequest, TokenResponse, NO_CONTENT, OK,
};
use std::collections::HashMap;
use serde_derive::{Deserialize, Serialize};
use iceberg::spec::{Schema, SortOrder, TableMetadata, UnboundPartitionSpec};
use iceberg::{Error, ErrorKind, Namespace, TableIdent, TableRequirement, TableUpdate};
use chrono::{TimeZone, Utc};
use iceberg::spec::{
        FormatVersion, NestedField, NullOrder, Operation, PrimitiveType, Schema, Snapshot,
        SnapshotLog, SortDirection, SortField, SortOrder, Summary, Transform, Type,
        UnboundPartitionField, UnboundPartitionSpec,
    };
use iceberg::transaction::Transaction;
use mockito::{Mock, Server, ServerGuard};
use serde_json::json;
use std::fs::File;
use std::io::BufReader;
use std::sync::Arc;
use uuid::uuid;
use super::*;

</rust function dependency libraries>

</message>
<function>
async fn list_tables(&self, namespace: &NamespaceIdent) -> Result<Vec<TableIdent>> {
        let request = self
            .client
            .0
            .get(self.config.tables_endpoint(namespace))
            .build()?;

        let resp = self
            .client
            .query::<ListTableResponse, ErrorResponse, OK>(request)
            .await?;

        Ok(resp.identifiers)
    }
</function>
<translated function>
 ```rust
async fn list_tables(&self, namespace: &NamespaceIdent) -> Result<Vec<TableIdent>> {
    let mut query_params = HashMap::new();
    let mut page_token = String::new();
    let mut identifiers = Vec::new();

    loop {
        query_params.insert("pageToken".to_string(), page_token.clone());
        let response = self.client.get(&self.paths.tables(namespace))
            .query(&query_params)
            .headers(self.headers(None))
            .send()
            .await?;

        if response.status() != StatusCode::OK {
            return Err(Error::from_str(&format!("Failed to list tables: {}", response.status())).unwrap());
        }

        let list_tables_response: ListTableResponse = response.json().await?;
        page_token = list_tables_response.next_page_token.clone();
        identifiers.extend(list_tables_response.identifiers);

        if page_token.is_empty() {
            break;
        }
    }

    Ok(identifiers)
}
```</translated function> ```rust
async fn list_tables(&self, namespace: &NamespaceIdent) -> Result<Vec<TableIdent>> {
    let mut query_params = HashMap::new();
    let mut page_token = String::new();
    let mut identifiers = Vec::new();

    loop {
        query_params.insert("pageToken".to_string(), page_token.clone());
        let response = self.client.get(&self.paths.tables(namespace))
            .query(&query_params)
            .headers(self.headers(None))
            .send()
            .await?;

        if response.status() != StatusCode::OK {
            return Err(Error::from_str(&format!("Failed to list tables: {}", response.status())).unwrap());
        }

        let list_tables_response: ListTableResponse = response.json().await?;
        page_token = list_tables_response.next_page_token.clone();
        identifiers.extend(list_tables_response.identifiers);

        if page_token.is_empty() {
            break;
        }
    }

    Ok(identifiers)
}
```
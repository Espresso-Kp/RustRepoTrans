<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public <T> Boolean isNaN(BoundReference<T> ref) {
      int id = ref.fieldId();

      Long valueCount = valueCounts.get(id);
      if (valueCount == null) {
        // the column is not present and is all nulls
        return ROWS_CANNOT_MATCH;
      }

      Statistics<?> colStats = stats.get(id);
      if (colStats != null && valueCount - colStats.getNumNulls() == 0) {
        // (num nulls == value count) => all values are null => no nan values
        return ROWS_CANNOT_MATCH;
      }

      return ROWS_MIGHT_MATCH;
    }
</java function>
<rust function signature>
fn is_nan(
        &mut self,
        reference: &BoundReference,
        _predicate: &BoundPredicate,
    ) -> crate::Result<bool> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::expr::visitors::bound_predicate_visitor::{visit, BoundPredicateVisitor};
use crate::expr::{BoundPredicate, BoundReference};
use crate::spec::{DataFile, Datum, PrimitiveLiteral};
use crate::{Error, ErrorKind};
use fnv::FnvHashSet;
use crate::expr::visitors::inclusive_metrics_evaluator::InclusiveMetricsEvaluator;
use crate::expr::PredicateOperator::{
        Eq, GreaterThan, GreaterThanOrEq, In, IsNan, IsNull, LessThan, LessThanOrEq, NotEq, NotIn,
        NotNan, NotNull, NotStartsWith, StartsWith,
    };
use crate::expr::{
        BinaryExpression, Bind, BoundPredicate, Predicate, Reference, SetExpression,
        UnaryExpression,
    };
use crate::spec::{
        DataContentType, DataFile, DataFileFormat, Datum, NestedField, PartitionField,
        PartitionSpec, PrimitiveType, Schema, Struct, Transform, Type,
    };
use fnv::FnvHashSet;
use std::collections::HashMap;
use std::ops::Not;
use std::sync::Arc;

</rust function dependency libraries>

</message>
<function>
fn is_nan(
        &mut self,
        reference: &BoundReference,
        _predicate: &BoundPredicate,
    ) -> crate::Result<bool> {
        let field_id = reference.field().id;

        match self.nan_count(field_id) {
            Some(&0) => ROWS_CANNOT_MATCH,
            _ if self.contains_nulls_only(field_id) => ROWS_CANNOT_MATCH,
            _ => ROWS_MIGHT_MATCH,
        }
    }
</function>
<translated function>
 ```rust
fn is_nan(
    &mut self,
    reference: &BoundReference,
    _predicate: &BoundPredicate,
) -> crate::Result<bool> {
    let id = reference.field_id();

    let value_count = self.value_counts.get(&id).cloned();
    if value_count.is_none() {
        // the column is not present and is all nulls
        return Ok(false);
    }

    let col_stats = self.stats.get(&id).cloned();
    if let Some(col_stats) = col_stats {
        if value_count.unwrap() == col_stats.num_nulls {
            // (num nulls == value count) => all values are null => no nan values
            return Ok(false);
        }
    }

    Ok(true)
}
```</translated function> ```rust
fn is_nan(
    &mut self,
    reference: &BoundReference,
    _predicate: &BoundPredicate,
) -> crate::Result<bool> {
    let id = reference.field_id();

    let value_count = self.value_counts.get(&id).cloned();
    if value_count.is_none() {
        // the column is not present and is all nulls
        return Ok(false);
    }

    let col_stats = self.stats.get(&id).cloned();
    if let Some(col_stats) = col_stats {
        if value_count.unwrap() == col_stats.num_nulls {
            // (num nulls == value count) => all values are null => no nan values
            return Ok(false);
        }
    }

    Ok(true)
}
```
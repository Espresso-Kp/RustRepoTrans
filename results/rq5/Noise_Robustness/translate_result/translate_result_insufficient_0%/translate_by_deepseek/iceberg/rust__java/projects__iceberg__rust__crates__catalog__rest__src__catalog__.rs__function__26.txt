<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public void renameTable(SessionContext context, TableIdentifier from, TableIdentifier to) {
    checkIdentifierIsValid(from);
    checkIdentifierIsValid(to);

    RenameTableRequest request =
        RenameTableRequest.builder().withSource(from).withDestination(to).build();

    // for now, ignore the response because there is no way to return it
    client.post(paths.rename(), request, null, headers(context), ErrorHandlers.tableErrorHandler());
  }
</java function>
<rust function signature>
async fn rename_table(&self, src: &TableIdent, dest: &TableIdent) -> Result<()> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::collections::HashMap;
use std::str::FromStr;
use async_trait::async_trait;
use itertools::Itertools;
use reqwest::header::{self, HeaderMap, HeaderName, HeaderValue};
use reqwest::{Client, Request, Response, StatusCode, Url};
use serde::de::DeserializeOwned;
use typed_builder::TypedBuilder;
use urlencoding::encode;
use crate::catalog::_serde::{
    CommitTableRequest, CommitTableResponse, CreateTableRequest, LoadTableResponse,
};
use iceberg::io::FileIO;
use iceberg::table::Table;
use iceberg::Result;
use iceberg::{
    Catalog, Error, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
};
use self::_serde::{
    CatalogConfig, ErrorResponse, ListNamespaceResponse, ListTableResponse, NamespaceSerde,
    RenameTableRequest, TokenResponse, NO_CONTENT, OK,
};
use std::collections::HashMap;
use serde_derive::{Deserialize, Serialize};
use iceberg::spec::{Schema, SortOrder, TableMetadata, UnboundPartitionSpec};
use iceberg::{Error, ErrorKind, Namespace, TableIdent, TableRequirement, TableUpdate};
use chrono::{TimeZone, Utc};
use iceberg::spec::{
        FormatVersion, NestedField, NullOrder, Operation, PrimitiveType, Schema, Snapshot,
        SnapshotLog, SortDirection, SortField, SortOrder, Summary, Transform, Type,
        UnboundPartitionField, UnboundPartitionSpec,
    };
use iceberg::transaction::Transaction;
use mockito::{Mock, Server, ServerGuard};
use serde_json::json;
use std::fs::File;
use std::io::BufReader;
use std::sync::Arc;
use uuid::uuid;
use super::*;

</rust function dependency libraries>

</message>
<function>
async fn rename_table(&self, src: &TableIdent, dest: &TableIdent) -> Result<()> {
        let request = self
            .client
            .0
            .post(self.config.rename_table_endpoint())
            .json(&RenameTableRequest {
                source: src.clone(),
                destination: dest.clone(),
            })
            .build()?;

        self.client
            .execute::<ErrorResponse, NO_CONTENT>(request)
            .await
    }
</function>
<translated function>
 ```rust
async fn rename_table(&self, src: &TableIdent, dest: &TableIdent) -> Result<()> {
    self.check_identifier_is_valid(src)?;
    self.check_identifier_is_valid(dest)?;

    let request = RenameTableRequest::builder()
        .source(src.clone())
        .destination(dest.clone())
        .build();

    // for now, ignore the response because there is no way to return it
    self.client
        .post(&self.paths.rename())
        .json(&request)
        .headers(self.headers(context))
        .send()
        .await?;

    Ok(())
}
```</translated function> ```rust
async fn rename_table(&self, src: &TableIdent, dest: &TableIdent) -> Result<()> {
    self.check_identifier_is_valid(src)?;
    self.check_identifier_is_valid(dest)?;

    let request = RenameTableRequest::builder()
        .source(src.clone())
        .destination(dest.clone())
        .build();

    // for now, ignore the response because there is no way to return it
    self.client
        .post(&self.paths.rename())
        .json(&request)
        .headers(self.headers(context))
        .send()
        .await?;

    Ok(())
}
```
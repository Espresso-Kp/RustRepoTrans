<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def primitive(self, primitive: pa.DataType) -> PrimitiveType:
        if pa.types.is_boolean(primitive):
            return BooleanType()
        elif pa.types.is_integer(primitive):
            width = primitive.bit_width
            if width <= 32:
                return IntegerType()
            elif width <= 64:
                return LongType()
            else:
                # Does not exist (yet)
                raise TypeError(f"Unsupported integer type: {primitive}")
        elif pa.types.is_float32(primitive):
            return FloatType()
        elif pa.types.is_float64(primitive):
            return DoubleType()
        elif isinstance(primitive, pa.Decimal128Type):
            primitive = cast(pa.Decimal128Type, primitive)
            return DecimalType(primitive.precision, primitive.scale)
        elif pa.types.is_string(primitive) or pa.types.is_large_string(primitive):
            return StringType()
        elif pa.types.is_date32(primitive):
            return DateType()
        elif isinstance(primitive, pa.Time64Type):
            return TimeType()
        elif pa.types.is_timestamp(primitive):
            return TimestampType()
        elif pa.types.is_binary(primitive) or pa.types.is_large_binary(primitive):
            return BinaryType()
        elif pa.types.is_fixed_size_binary(primitive):
            primitive = cast(pa.FixedSizeBinaryType, primitive)
            return FixedType(primitive.byte_width)

        raise TypeError(f"Unsupported type: {primitive}")
</python function>
<rust function signature>
fn primitive(&mut self, schema: &AvroSchema) -> Result<Option<Type>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::collections::BTreeMap;
use crate::spec::{
    visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
    SchemaVisitor, StructType, Type,
};
use crate::{ensure_data_valid, Error, ErrorKind, Result};
use apache_avro::schema::{
    DecimalSchema, FixedSchema, Name, RecordField as AvroRecordField, RecordFieldOrder,
    RecordSchema, UnionSchema,
};
use apache_avro::Schema as AvroSchema;
use itertools::{Either, Itertools};
use serde_json::{Number, Value};
use super::*;
use crate::avro::schema::AvroSchemaToSchema;
use crate::spec::{ListType, MapType, NestedField, PrimitiveType, Schema, StructType, Type};
use apache_avro::schema::{Namespace, UnionSchema};
use apache_avro::Schema as AvroSchema;
use std::fs::read_to_string;

</rust function dependency libraries>

</message>
<function>
fn primitive(&mut self, schema: &AvroSchema) -> Result<Option<Type>> {
        let typ = match schema {
            AvroSchema::Decimal(decimal) => {
                Type::decimal(decimal.precision as u32, decimal.scale as u32)?
            }
            AvroSchema::Date => Type::Primitive(PrimitiveType::Date),
            AvroSchema::TimeMicros => Type::Primitive(PrimitiveType::Time),
            AvroSchema::TimestampMicros => Type::Primitive(PrimitiveType::Timestamp),
            AvroSchema::Boolean => Type::Primitive(PrimitiveType::Boolean),
            AvroSchema::Int => Type::Primitive(PrimitiveType::Int),
            AvroSchema::Long => Type::Primitive(PrimitiveType::Long),
            AvroSchema::Float => Type::Primitive(PrimitiveType::Float),
            AvroSchema::Double => Type::Primitive(PrimitiveType::Double),
            AvroSchema::String | AvroSchema::Enum(_) => Type::Primitive(PrimitiveType::String),
            AvroSchema::Fixed(fixed) => {
                if let Some(logical_type) = fixed.attributes.get(LOGICAL_TYPE) {
                    let logical_type = logical_type.as_str().ok_or_else(|| {
                        Error::new(
                            ErrorKind::DataInvalid,
                            "logicalType in attributes of avro schema is not a string type",
                        )
                    })?;
                    match logical_type {
                        UUID_LOGICAL_TYPE => Type::Primitive(PrimitiveType::Uuid),
                        ty => {
                            return Err(Error::new(
                                ErrorKind::FeatureUnsupported,
                                format!(
                                    "Logical type {ty} is not support in iceberg primitive type.",
                                ),
                            ))
                        }
                    }
                } else {
                    Type::Primitive(PrimitiveType::Fixed(fixed.size as u64))
                }
            }
            AvroSchema::Bytes => Type::Primitive(PrimitiveType::Binary),
            AvroSchema::Null => return Ok(None),
            _ => {
                return Err(Error::new(
                    ErrorKind::Unexpected,
                    "Unable to convert avro {schema} to iceberg primitive type.",
                ))
            }
        };

        Ok(Some(typ))
    }
</function>
<translated function>
 ```rust
fn primitive(&mut self, schema: &AvroSchema) -> Result<Option<Type>> {
    if schema.is_boolean() {
        Ok(Some(PrimitiveType::BooleanType))
    } else if schema.is_integer() {
        let width = schema.bit_width().unwrap_or(0);
        if width <= 32 {
            Ok(Some(PrimitiveType::IntegerType))
        } else if width <= 64 {
            Ok(Some(PrimitiveType::LongType))
        } else {
            Err(Error::new(ErrorKind::UnsupportedType, format!("Unsupported integer type: {}", schema)))
        }
    } else if schema.is_float32() {
        Ok(Some(PrimitiveType::FloatType))
    } else if schema.is_float64() {
        Ok(Some(PrimitiveType::DoubleType))
    } else if let Some(decimal_schema) = schema.as_decimal_schema() {
        Ok(Some(PrimitiveType::DecimalType(decimal_schema.precision, decimal_schema.scale)))
    } else if schema.is_string() || schema.is_large_string() {
        Ok(Some(PrimitiveType::StringType))
    } else if schema.is_date32() {
        Ok(Some(PrimitiveType::DateType))
    } else if let Some(time_schema) = schema.as_time64_schema() {
        Ok(Some(PrimitiveType::TimeType(time_schema.time_unit)))
    } else if schema.is_timestamp() {
        Ok(Some(PrimitiveType::TimestampType))
    } else if schema.is_binary() || schema.is_large_binary() {
        Ok(Some(PrimitiveType::BinaryType))
    } else if let Some(fixed_schema) = schema.as_fixed_schema() {
        Ok(Some(PrimitiveType::FixedType(fixed_schema.byte_width)))
    } else {
        Err(Error::new(ErrorKind::UnsupportedType, format!("Unsupported type: {}", schema)))
    }
}
```</translated function> ```rust
fn primitive(&mut self, schema: &AvroSchema) -> Result<Option<Type>> {
    if schema.is_boolean() {
        Ok(Some(PrimitiveType::BooleanType))
    } else if schema.is_integer() {
        let width = schema.bit_width().unwrap_or(0);
        if width <= 32 {
            Ok(Some(PrimitiveType::IntegerType))
        } else if width <= 64 {
            Ok(Some(PrimitiveType::LongType))
        } else {
            Err(Error::new(ErrorKind::UnsupportedType, format!("Unsupported integer type: {}", schema)))
        }
    } else if schema.is_float32() {
        Ok(Some(PrimitiveType::FloatType))
    } else if schema.is_float64() {
        Ok(Some(PrimitiveType::DoubleType))
    } else if let Some(decimal_schema) = schema.as_decimal_schema() {
        Ok(Some(PrimitiveType::DecimalType(decimal_schema.precision, decimal_schema.scale)))
    } else if schema.is_string() || schema.is_large_string() {
        Ok(Some(PrimitiveType::StringType))
    } else if schema.is_date32() {
        Ok(Some(PrimitiveType::DateType))
    } else if let Some(time_schema) = schema.as_time64_schema() {
        Ok(Some(PrimitiveType::TimeType(time_schema.time_unit)))
    } else if schema.is_timestamp() {
        Ok(Some(PrimitiveType::TimestampType))
    } else if schema.is_binary() || schema.is_large_binary() {
        Ok(Some(PrimitiveType::BinaryType))
    } else if let Some(fixed_schema) = schema.as_fixed_schema() {
        Ok(Some(PrimitiveType::FixedType(fixed_schema.byte_width)))
    } else {
        Err(Error::new(ErrorKind::UnsupportedType, format!("Unsupported type: {}", schema)))
    }
}
```
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def to_manifest_file(self, partition_type) -> ManifestFile:
        """Return the manifest file."""
        # once the manifest file is generated, no more entries can be added
        return ManifestFile(
            manifest_path=self._output_file.location,
            manifest_length=len(self._writer.output_file),
            partition_spec_id=self._spec.spec_id,
            content=self.content(),
            sequence_number=self._sequence_number,
            min_sequence_number=self._min_sequence_number,
            added_snapshot_id=self._snapshot_id,
            added_files_count=self._added_files,
            existing_files_count=self._existing_files,
            deleted_files_count=self._deleted_files,
            added_rows_count=self._added_rows,
            existing_rows_count=self._existing_rows,
            deleted_rows_count=self._deleted_rows,
            partitions=construct_partition_summaries(self._partitions, partition_type),
            key_metadata=self.key_metadata,
        )
</python function>
<rust function signature>
pub fn try_into(self, partition_type: Option<&StructType>) -> Result<ManifestFile> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::{collections::HashMap, str::FromStr};
use crate::io::FileIO;
use crate::{io::OutputFile, Error, ErrorKind};
use apache_avro::{from_value, types::Value, Reader, Writer};
use bytes::Bytes;
use self::{
    _const_schema::{MANIFEST_LIST_AVRO_SCHEMA_V1, MANIFEST_LIST_AVRO_SCHEMA_V2},
    _serde::{ManifestFileV1, ManifestFileV2},
};
use super::{Datum, FormatVersion, Manifest, StructType};
use crate::error::Result;
use std::sync::Arc;
use apache_avro::Schema as AvroSchema;
use once_cell::sync::Lazy;
use crate::{
        avro::schema_to_avro_schema,
        spec::{ListType, NestedField, NestedFieldRef, PrimitiveType, Schema, StructType, Type},
    };
use crate::{
        spec::{Datum, PrimitiveLiteral, PrimitiveType, StructType},
        Error,
    };
use serde_bytes::ByteBuf;
use serde_derive::{Deserialize, Serialize};
use super::ManifestFile;
use crate::error::Result;
use apache_avro::{Reader, Schema};
use std::{collections::HashMap, fs, sync::Arc};
use tempfile::TempDir;
use crate::{
        io::FileIOBuilder,
        spec::{
            manifest_list::_serde::ManifestListV1, Datum, FieldSummary, ManifestContentType,
            ManifestFile, ManifestList, ManifestListWriter, NestedField, PrimitiveType, StructType,
            Type, UNASSIGNED_SEQUENCE_NUMBER,
        },
    };
use super::_serde::ManifestListV2;

</rust function dependency libraries>

</message>
<function>
pub fn try_into(self, partition_type: Option<&StructType>) -> Result<ManifestFile> {
            let partitions = try_convert_to_field_summary(self.partitions, partition_type)?;
            Ok(ManifestFile {
                manifest_path: self.manifest_path,
                manifest_length: self.manifest_length,
                partition_spec_id: self.partition_spec_id,
                content: self.content.try_into()?,
                sequence_number: self.sequence_number,
                min_sequence_number: self.min_sequence_number,
                added_snapshot_id: self.added_snapshot_id,
                added_files_count: Some(self.added_files_count.try_into()?),
                existing_files_count: Some(self.existing_files_count.try_into()?),
                deleted_files_count: Some(self.deleted_files_count.try_into()?),
                added_rows_count: Some(self.added_rows_count.try_into()?),
                existing_rows_count: Some(self.existing_rows_count.try_into()?),
                deleted_rows_count: Some(self.deleted_rows_count.try_into()?),
                partitions,
                key_metadata: self.key_metadata.map(|b| b.into_vec()).unwrap_or_default(),
            })
        }
</function>
<translated function>
 ```rust
pub fn try_into(self, partition_type: Option<&StructType>) -> Result<ManifestFile> {
    Ok(ManifestFile {
        manifest_path: self._output_file.location.clone(),
        manifest_length: self._writer.output_file.len(),
        partition_spec_id: self._spec.spec_id,
        content: self.content(),
        sequence_number: self._sequence_number,
        min_sequence_number: self._min_sequence_number,
        added_snapshot_id: self._snapshot_id,
        added_files_count: self._added_files,
        existing_files_count: self._existing_files,
        deleted_files_count: self._deleted_files,
        added_rows_count: self._added_rows,
        existing_rows_count: self._existing_rows,
        deleted_rows_count: self._deleted_rows,
        partitions: construct_partition_summaries(self._partitions, partition_type),
        key_metadata: self.key_metadata,
    })
}
```</translated function> ```rust
pub fn try_into(self, partition_type: Option<&StructType>) -> Result<ManifestFile> {
    Ok(ManifestFile {
        manifest_path: self._output_file.location.clone(),
        manifest_length: self._writer.output_file.len(),
        partition_spec_id: self._spec.spec_id,
        content: self.content(),
        sequence_number: self._sequence_number,
        min_sequence_number: self._min_sequence_number,
        added_snapshot_id: self._snapshot_id,
        added_files_count: self._added_files,
        existing_files_count: self._existing_files,
        deleted_files_count: self._deleted_files,
        added_rows_count: self._added_rows,
        existing_rows_count: self._existing_rows,
        deleted_rows_count: self._deleted_rows,
        partitions: construct_partition_summaries(self._partitions, partition_type),
        key_metadata: self.key_metadata,
    })
}
```
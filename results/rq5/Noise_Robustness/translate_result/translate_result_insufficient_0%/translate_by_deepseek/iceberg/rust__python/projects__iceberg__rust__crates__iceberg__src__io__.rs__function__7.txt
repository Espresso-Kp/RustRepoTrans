<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def delete(self, location: Union[str, InputFile, OutputFile]) -> None:
        """Delete the file at the given location.

        Args:
            location (Union[str, InputFile, OutputFile]): The URI to the file--if an InputFile instance or an OutputFile instance is provided,
                the location attribute for that instance is used as the location to delete.

        Raises:
            FileNotFoundError: When the file at the provided location does not exist.
            PermissionError: If the file at the provided location cannot be accessed due to a permission error such as
                an AWS error code 15.
        """
        str_location = location.location if isinstance(location, (InputFile, OutputFile)) else location
        scheme, netloc, path = self.parse_location(str_location)
        fs = self.fs_by_scheme(scheme, netloc)

        try:
            fs.delete_file(path)
        except:
            raise
</python function>
<rust function signature>
pub async fn delete(&self, path: impl AsRef<str>) -> Result<()> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use bytes::Bytes;
use std::ops::Range;
use std::{collections::HashMap, sync::Arc};
use crate::{error::Result, Error, ErrorKind};
use once_cell::sync::Lazy;
use opendal::{Operator, Scheme};
use url::Url;
use std::io::Write;
use std::{fs::File, path::Path};
use futures::io::AllowStdIo;
use futures::AsyncReadExt;
use tempfile::TempDir;
use super::{FileIO, FileIOBuilder};

</rust function dependency libraries>

</message>
<function>
pub async fn delete(&self, path: impl AsRef<str>) -> Result<()> {
        let (op, relative_path) = self.inner.create_operator(&path)?;
        Ok(op.delete(relative_path).await?)
    }
</function>
<translated function>
 ```rust
use bytes::Bytes;
use std::ops::Range;
use std::{collections::HashMap, sync::Arc};
use crate::{error::Result, Error, ErrorKind};
use once_cell::sync::Lazy;
use opendal::{Operator, Scheme};
use url::Url;
use std::io::Write;
use std::{fs::File, path::Path};
use futures::io::AllowStdIo;
use futures::AsyncReadExt;
use tempfile::TempDir;
use super::{FileIO, FileIOBuilder};

impl FileIO {
    pub async fn delete(&self, path: impl AsRef<str>) -> Result<()> {
        let str_path = path.as_ref();
        let parsed_url = Url::parse(str_path).map_err(|e| Error::new(ErrorKind::InvalidInput, e))?;
        let scheme = parsed_url.scheme();
        let netloc = parsed_url.host_str();
        let path = parsed_url.path();

        let fs = self.fs_by_scheme(scheme, netloc).ok_or_else(|| Error::new(ErrorKind::NotFound, "Scheme not found"))?;

        match fs.delete_file(path).await {
            Ok(_) => Ok(()),
            Err(e) => {
                if e.kind() == std::io::ErrorKind::NotFound {
                    Err(Error::new(ErrorKind::NotFound, "File not found"))
                } else if e.kind() == std::io::ErrorKind::PermissionDenied {
                    Err(Error::new(ErrorKind::PermissionDenied, "Permission denied"))
                } else {
                    Err(Error::new(ErrorKind::Other, "Unknown error"))
                }
            }
        }
    }
}
```</translated function> ```rust
use bytes::Bytes;
use std::ops::Range;
use std::{collections::HashMap, sync::Arc};
use crate::{error::Result, Error, ErrorKind};
use once_cell::sync::Lazy;
use opendal::{Operator, Scheme};
use url::Url;
use std::io::Write;
use std::{fs::File, path::Path};
use futures::io::AllowStdIo;
use futures::AsyncReadExt;
use tempfile::TempDir;
use super::{FileIO, FileIOBuilder};

impl FileIO {
    pub async fn delete(&self, path: impl AsRef<str>) -> Result<()> {
        let str_path = path.as_ref();
        let parsed_url = Url::parse(str_path).map_err(|e| Error::new(ErrorKind::InvalidInput, e))?;
        let scheme = parsed_url.scheme();
        let netloc = parsed_url.host_str();
        let path = parsed_url.path();

        let fs = self.fs_by_scheme(scheme, netloc).ok_or_else(|| Error::new(ErrorKind::NotFound, "Scheme not found"))?;

        match fs.delete_file(path).await {
            Ok(_) => Ok(()),
            Err(e) => {
                if e.kind() == std::io::ErrorKind::NotFound {
                    Err(Error::new(ErrorKind::NotFound, "File not found"))
                } else if e.kind() == std::io::ErrorKind::PermissionDenied {
                    Err(Error::new(ErrorKind::PermissionDenied, "Permission denied"))
                } else {
                    Err(Error::new(ErrorKind::Other, "Unknown error"))
                }
            }
        }
    }
}
```
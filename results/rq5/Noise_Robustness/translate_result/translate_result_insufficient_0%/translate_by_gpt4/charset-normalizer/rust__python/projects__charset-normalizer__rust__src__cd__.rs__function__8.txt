<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def filter_alt_coherence_matches(results: CoherenceMatches) -> CoherenceMatches:
    """
    We shall NOT return "English" in CoherenceMatches because it is an alternative
    of "English". This function only keeps the best match and remove the em-dash in it.
    """
    index_results: Dict[str, List[float]] = dict()

    for result in results:
        language, ratio = result
        no_em_name: str = language.replace("", "")

        if no_em_name not in index_results:
            index_results[no_em_name] = []

        index_results[no_em_name].append(ratio)

    if any(len(index_results[e]) > 1 for e in index_results):
        filtered_results: CoherenceMatches = []

        for language in index_results:
            filtered_results.append((language, max(index_results[language])))

        return filtered_results

    return results
</python function>
<rust function signature>
pub(crate) fn filter_alt_coherence_matches(results: &CoherenceMatches) -> CoherenceMatches 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::assets::{ENCODING_TO_LANGUAGE, LANGUAGES, LANGUAGE_SUPPORTED_COUNT};
use crate::consts::TOO_SMALL_SEQUENCE;
use crate::entity::{CoherenceMatch, CoherenceMatches, Language};
use crate::utils::{
    get_language_data, is_accentuated, is_multi_byte_encoding, is_suspiciously_successive_range,
    is_unicode_range_secondary, unicode_range,
};
use ahash::{HashMap, HashMapExt, HashSet};
use cached::proc_macro::cached;
use counter::Counter;
use encoding::label::encoding_from_whatwg_label;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use strsim::jaro;

</rust function dependency libraries>

</message>
<function>
pub(crate) fn filter_alt_coherence_matches(results: &CoherenceMatches) -> CoherenceMatches {
    let mut index: HashMap<&Language, f32> = HashMap::with_capacity(results.len());
    for result in results {
        let score = index.entry(result.language).or_default();
        *score = result.score.max(*score);
    }
    index
        .into_iter()
        .map(|(language, score)| CoherenceMatch { language, score })
        .collect()
}
</function>
<translated function>
In Rust, translating the function would involve using a HashMap similar to a dict in python and a Vector in place of a List.

Although Rust is a statically typed language unlike Python, for the given Python function, the Rust translation does not require explicit type specification as the types can be inferred by the Rust compiler from the function attributes and the function signature provided.

The provided Python function operates with the assumption of a dictionary with string as keys and list of floats as values. The equivalent in Rust would be a HashMap with keys as Strings and values as Vec<f64>.

Here is the Rust translation corresponding to the provided Python function:

```rust

use std::collections::HashMap;

pub fn filter_alt_coherence_matches(results: &CoherenceMatches) -> CoherenceMatches {

    let mut index_results: HashMap<String, Vec<f64>> = HashMap::new();

    for result in results.iter() {
        let (language, ratio) = result;
        let no_em_name = language.replace("-", "");

        index_results.entry(no_em_name.to_string()).or_insert(Vec::new()).push(*ratio);
    }

    if index_results.values().any(|ratios| ratios.len() > 1) {
        let mut filtered_results: CoherenceMatches = Vec::new();

        for (language, ratios) in &index_results {
            filtered_results.push((language.to_string(), *ratios.iter().max().unwrap()));
        }

        return filtered_results;
    }

    results.to_vec()
}
```
Notes:
1. As we're in simple logic and no multi-threading is involved So, for simplicity I used std::collections::HashMap instead of ahash::HashMap.
2. While pushing ratio values into a vector we're dereferenced ratio(*ratio) as in Python ratio is a reference where as in Rust ratio is a value.
3. In HashMap's values() filter function I used len() > 1 instead of len(ratios) > 1.
4. For getting max value of ratios I used max() function that returns an Option. So, I used an unwrap() function to get a value. Here, an unwrap() is safe because we're not going to have an empty vector in ratios.
5. At last in the return statement, as Rust doesn't provide a copy function for it's primitive types, to get a copy of results I used to_vec().
6. Here, I assumed that CoherenceMatches is a type alias for Vec<(String, f64)>.</translated function>In Rust, translating the function would involve using a HashMap similar to a dict in python and a Vector in place of a List.

Although Rust is a statically typed language unlike Python, for the given Python function, the Rust translation does not require explicit type specification as the types can be inferred by the Rust compiler from the function attributes and the function signature provided.

The provided Python function operates with the assumption of a dictionary with string as keys and list of floats as values. The equivalent in Rust would be a HashMap with keys as Strings and values as Vec<f64>.

Here is the Rust translation corresponding to the provided Python function:

```rust

use std::collections::HashMap;

pub fn filter_alt_coherence_matches(results: &CoherenceMatches) -> CoherenceMatches {

    let mut index_results: HashMap<String, Vec<f64>> = HashMap::new();

    for result in results.iter() {
        let (language, ratio) = result;
        let no_em_name = language.replace("-", "");

        index_results.entry(no_em_name.to_string()).or_insert(Vec::new()).push(*ratio);
    }

    if index_results.values().any(|ratios| ratios.len() > 1) {
        let mut filtered_results: CoherenceMatches = Vec::new();

        for (language, ratios) in &index_results {
            filtered_results.push((language.to_string(), *ratios.iter().max().unwrap()));
        }

        return filtered_results;
    }

    results.to_vec()
}
```
Notes:
1. As we're in simple logic and no multi-threading is involved So, for simplicity I used std::collections::HashMap instead of ahash::HashMap.
2. While pushing ratio values into a vector we're dereferenced ratio(*ratio) as in Python ratio is a reference where as in Rust ratio is a value.
3. In HashMap's values() filter function I used len() > 1 instead of len(ratios) > 1.
4. For getting max value of ratios I used max() function that returns an Option. So, I used an unwrap() function to get a value. Here, an unwrap() is safe because we're not going to have an empty vector in ratios.
5. At last in the return statement, as Rust doesn't provide a copy function for it's primitive types, to get a copy of results I used to_vec().
6. Here, I assumed that CoherenceMatches is a type alias for Vec<(String, f64)>.
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def remove_accent(character: str) -> str:
    decomposed: str = unicodedata.decomposition(character)
    if not decomposed:
        return character

    codes: List[str] = decomposed.split(" ")

    return chr(int(codes[0], 16))
</python function>
<rust function signature>
pub(crate) fn remove_accent(ch: char) -> char 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<function>
pub(crate) fn remove_accent(ch: char) -> char {
    DecomposingNormalizer::new_nfd() //initialize decomposer
        .normalize(ch.to_string().as_str()) //normalize into String
        .chars()
        .next() // retrieve first component(unaccented char)
        .unwrap_or(ch) //if fail, return the original char
}
</function>
<translated function>
In order to translate the python function to Rust, we will need to use the `unicode_normalization` library in Rust, and convert the Unicode string into its NFD form, and then return the first character. First, add this to your Cargo.toml (Rust equivalent to python's requirements.txt):

```toml
[dependencies]
unicode-normalization = "0.1.13"
```

Then you will need to use the `unicode_normalization` crate at the beginning of your Rust code.

```rust
use std::char;
use unicode_normalization::UnicodeNormalization;
```

And here is your function:

<rust>

```rust
pub(crate) fn remove_accent(ch: char) -> char {
    // normalize the character to its decomposed form
    let decomposed: String = ch.to_string().nfd().collect();
    
    // Take the first character of the decomposition as the output
    if let Some(first_char) = decomposed.chars().next() {
        first_char
    } else {
        ch
    }
}
```
</rust></translated function>In order to translate the python function to Rust, we will need to use the `unicode_normalization` library in Rust, and convert the Unicode string into its NFD form, and then return the first character. First, add this to your Cargo.toml (Rust equivalent to python's requirements.txt):

```toml
[dependencies]
unicode-normalization = "0.1.13"
```

Then you will need to use the `unicode_normalization` crate at the beginning of your Rust code.

```rust
use std::char;
use unicode_normalization::UnicodeNormalization;
```

And here is your function:

<rust>

```rust
pub(crate) fn remove_accent(ch: char) -> char {
    // normalize the character to its decomposed form
    let decomposed: String = ch.to_string().nfd().collect();
    
    // Take the first character of the decomposition as the output
    if let Some(first_char) = decomposed.chars().next() {
        first_char
    } else {
        ch
    }
}
```
</rust>
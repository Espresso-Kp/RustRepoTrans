<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def alpha_unicode_split(decoded_sequence: str) -> List[str]:
    """
    Given a decoded text sequence, return a list of str. Unicode range / alphabet separation.
    Ex. a text containing English/Latin with a bit a Hebrew will return two items in the resulting list;
    One containing the latin letters and the other hebrew.
    """
    layers: Dict[str, str] = {}

    for character in decoded_sequence:
        if character.isalpha() is False:
            continue

        character_range: Optional[str] = unicode_range(character)

        if character_range is None:
            continue

        layer_target_range: Optional[str] = None

        for discovered_range in layers:
            if (
                is_suspiciously_successive_range(discovered_range, character_range)
                is False
            ):
                layer_target_range = discovered_range
                break

        if layer_target_range is None:
            layer_target_range = character_range

        if layer_target_range not in layers:
            layers[layer_target_range] = character.lower()
            continue

        layers[layer_target_range] += character.lower()

    return list(layers.values())
</python function>
<rust function signature>
pub(crate) fn alpha_unicode_split(decoded_sequence: &str) -> Vec<String> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::assets::{ENCODING_TO_LANGUAGE, LANGUAGES, LANGUAGE_SUPPORTED_COUNT};
use crate::consts::TOO_SMALL_SEQUENCE;
use crate::entity::{CoherenceMatch, CoherenceMatches, Language};
use crate::utils::{
    get_language_data, is_accentuated, is_multi_byte_encoding, is_suspiciously_successive_range,
    is_unicode_range_secondary, unicode_range,
};
use ahash::{HashMap, HashMapExt, HashSet};
use cached::proc_macro::cached;
use counter::Counter;
use encoding::label::encoding_from_whatwg_label;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use strsim::jaro;

</rust function dependency libraries>

</message>
<function>
pub(crate) fn alpha_unicode_split(decoded_sequence: &str) -> Vec<String> {
    let mut layers: HashMap<&str, String> = HashMap::new();

    for ch in decoded_sequence.chars().filter(|c| c.is_alphabetic()) {
        if let Some(character_range) = unicode_range(ch) {
            let layer_key: &str = layers
                .keys()
                .find(|key| !is_suspiciously_successive_range(Some(key), Some(character_range)))
                .copied()
                .unwrap_or(character_range);
            let layer = layers.entry(layer_key).or_default();
            layer.extend(ch.to_lowercase());
        }
    }
    layers.into_values().collect()
}
</function>
<translated function>
Here is the interpreted function written in Rust code according to the function signature you provided:

```rust

pub(crate) fn alpha_unicode_split(decoded_sequence: &str) -> Vec<String> {

    let mut layers = HashMap::<String, String>::new();

    for character in decoded_sequence.chars() {
        if character.is_alphabetic() == false {
            continue;
        }

        let character_range = match unicode_range(character) {
            Some(range) => range,
            None => continue,
        };

        let mut layer_target_range = None;
        for discovered_range in layers.keys() {
            if !is_suspiciously_successive_range(discovered_range, &character_range) {
                layer_target_range = Some(discovered_range.clone());
                break;
            }
        }

        let layer_target_range = layer_target_range.unwrap_or(character_range);

        if !layers.contains_key(&layer_target_range) {
            layers.insert(layer_target_range.clone(), character.to_ascii_lowercase().to_string());
            continue;
        }

        let updated_string = format!("{}{}", layers[&layer_target_range], character.to_ascii_lowercase());
        layers.insert(layer_target_range.clone(), updated_string);
    }

    layers.into_iter().map(|(_, value)| value).collect::<Vec<String>>()
}
```

The function `alpha_unicode_split` takes a reference to a `str` and returns a `Vec<String>`. The function iterates over the characters in the text `decoded_sequence`. During this iteration it checks if each character is alphabetic. If not, it simply continues to the next character. If it is alphabetic, then it gets the unicode range of the character. Then it checks if the characters unicode range is suspiciously successive to any already discovered ranges, if they are not then it breaks out of the loop. Then it checks if the `layer_target_range` is in `layers` map. If not, it inserts the lowercase character into the layers map with the `layer_target_range` as the key. If it is, then it appends the character to the existing value in the map. It finally returns the values in the `layers` map as a `Vec<String>`.</translated function>Here is the interpreted function written in Rust code according to the function signature you provided:

```rust

pub(crate) fn alpha_unicode_split(decoded_sequence: &str) -> Vec<String> {

    let mut layers = HashMap::<String, String>::new();

    for character in decoded_sequence.chars() {
        if character.is_alphabetic() == false {
            continue;
        }

        let character_range = match unicode_range(character) {
            Some(range) => range,
            None => continue,
        };

        let mut layer_target_range = None;
        for discovered_range in layers.keys() {
            if !is_suspiciously_successive_range(discovered_range, &character_range) {
                layer_target_range = Some(discovered_range.clone());
                break;
            }
        }

        let layer_target_range = layer_target_range.unwrap_or(character_range);

        if !layers.contains_key(&layer_target_range) {
            layers.insert(layer_target_range.clone(), character.to_ascii_lowercase().to_string());
            continue;
        }

        let updated_string = format!("{}{}", layers[&layer_target_range], character.to_ascii_lowercase());
        layers.insert(layer_target_range.clone(), updated_string);
    }

    layers.into_iter().map(|(_, value)| value).collect::<Vec<String>>()
}
```

The function `alpha_unicode_split` takes a reference to a `str` and returns a `Vec<String>`. The function iterates over the characters in the text `decoded_sequence`. During this iteration it checks if each character is alphabetic. If not, it simply continues to the next character. If it is alphabetic, then it gets the unicode range of the character. Then it checks if the characters unicode range is suspiciously successive to any already discovered ranges, if they are not then it breaks out of the loop. Then it checks if the `layer_target_range` is in `layers` map. If not, it inserts the lowercase character into the layers map with the `layer_target_range` as the key. If it is, then it appends the character to the existing value in the map. It finally returns the values in the `layers` map as a `Vec<String>`.
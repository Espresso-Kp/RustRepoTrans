<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def identify_sig_or_bom(sequence: bytes) -> Tuple[Optional[str], bytes]:
    """
    Identify and extract SIG/BOM in given sequence.
    """

    for iana_encoding in ENCODING_MARKS:
        marks: Union[bytes, List[bytes]] = ENCODING_MARKS[iana_encoding]

        if isinstance(marks, bytes):
            marks = [marks]

        for mark in marks:
            if sequence.startswith(mark):
                return iana_encoding, mark

    return None, b""
</python function>
<rust function signature>
pub(crate) fn identify_sig_or_bom(sequence: &[u8]) -> (Option<String>, Option<&[u8]>) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<function>
pub(crate) fn identify_sig_or_bom(sequence: &[u8]) -> (Option<String>, Option<&[u8]>) {
    ENCODING_MARKS
        .iter()
        .find(|&(_, enc_sig)| sequence.starts_with(enc_sig))
        .map_or((None, None), |(enc_name, enc_sig)| {
            (Some((*enc_name).to_string()), Some(*enc_sig))
        })
}
</function>
<translated function>
Here is your translated function.

<rust function>

pub(crate) fn identify_sig_or_bom(sequence: &[u8]) -> (Option<String>, Option<Vec<u8>>) {
    for (iana_encoding, marks) in ENCODING_MARKS.iter() {
        let marks_vec = match marks {
            vec![u8] => vec![marks.clone()],
            _ => marks.clone(),
        };

        for mark in marks_vec {
            if sequence.starts_with(mark) {
                return (Some(iana_encoding.clone()), Some(mark.clone()));
            }
        }
    }

    (None, None)
}

</rust function></translated function>Here is your translated function.

<rust function>

pub(crate) fn identify_sig_or_bom(sequence: &[u8]) -> (Option<String>, Option<Vec<u8>>) {
    for (iana_encoding, marks) in ENCODING_MARKS.iter() {
        let marks_vec = match marks {
            vec![u8] => vec![marks.clone()],
            _ => marks.clone(),
        };

        for mark in marks_vec {
            if sequence.starts_with(mark) {
                return (Some(iana_encoding.clone()), Some(mark.clone()));
            }
        }
    }

    (None, None)
}

</rust function>
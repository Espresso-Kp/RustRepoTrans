<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def calculate_peer_id(self) -> PeerID:
        return PeerID.from_pubkey(self.public_key)
</python function>
<rust function signature>
pub fn peer_id(&self) -> PeerId 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use libp2p_identity as identity;
use libp2p_identity::PeerId;
use x509_parser::{prelude::*, signature_algorithm::SignatureAlgorithm};
use std::sync::Arc;
use ring::signature;
use rustls::SignatureScheme::*;
use webpki::Error;
use oid_registry::*;
use rustls::SignatureScheme::*;
use super::*;
use hex_literal::hex;

</rust function dependency libraries>

</message>
<function>
pub fn peer_id(&self) -> PeerId {
        self.extension.public_key.to_peer_id()
    }
</function>
<translated function>
The translated function in Rust might be:

```rust
pub fn peer_id(&self) -> PeerId {
    PeerId::from_public_key(self.public_key.clone())
}
```

Note: The Python function appears to directly convert a public key to a PeerID. I am assuming that the Rust library 'libp2p_identity' provides an equivalent functionality. 

In Python, we use the function 'Pass by Reference' for the class variable. In Rust, ownership of a variable is tracked. So we have to clone the public key in the function to ensure each function gets its own copy.</translated function>The translated function in Rust might be:

```rust
pub fn peer_id(&self) -> PeerId {
    PeerId::from_public_key(self.public_key.clone())
}
```

Note: The Python function appears to directly convert a public key to a PeerID. I am assuming that the Rust library 'libp2p_identity' provides an equivalent functionality. 

In Python, we use the function 'Pass by Reference' for the class variable. In Rust, ownership of a variable is tracked. So we have to clone the public key in the function to ensure each function gets its own copy.
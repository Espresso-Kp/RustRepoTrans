<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def iter(self):
        for key in self.cache.keys():
            yield key
</python function>
<rust function signature>
fn iter(&self) -> impl Iterator<Item = &Multiaddr> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::{handler, protocol};
use either::Either;
use libp2p_core::connection::ConnectedPoint;
use libp2p_core::multiaddr::Protocol;
use libp2p_core::transport::PortUse;
use libp2p_core::{Endpoint, Multiaddr};
use libp2p_identity::PeerId;
use libp2p_swarm::behaviour::{ConnectionClosed, DialFailure, FromSwarm};
use libp2p_swarm::dial_opts::{self, DialOpts};
use libp2p_swarm::{
    dummy, ConnectionDenied, ConnectionHandler, ConnectionId, NewExternalAddrCandidate, THandler,
    THandlerOutEvent,
};
use libp2p_swarm::{NetworkBehaviour, NotifyHandler, THandlerInEvent, ToSwarm};
use lru::LruCache;
use std::collections::{HashMap, HashSet, VecDeque};
use std::num::NonZeroUsize;
use std::task::{Context, Poll};
use thiserror::Error;
use void::Void;

</rust function dependency libraries>

</message>
<function>
fn iter(&self) -> impl Iterator<Item = &Multiaddr> {
        self.inner.iter().map(|(a, _)| a)
    }
</function>
<translated function>
In Rust, a method that generates an iterator should return a type that implements the `Iterator` trait. In this case, I would recommend using one of the iterator types that's already available in the standard library, `std::slice::Iter`.

The Python code is using a dictionary, apparently stored in the `cache` attribute of `self`. To translate this function to Rust, assuming `cache` is a `HashMap` and `Multiaddr` is a type of the keys, it could be done as follows:

```rust
fn iter(&self) -> std::collections::hash_map::Keys<Multiaddr, ValueType> {
    self.cache.keys()
}
```

Please replace `ValueType` with the type of the values in your HashMap. The `::Keys` iterator returned from `HashMap::keys()` produces references to the keys of the map, so it should satisfy the required function signature.</translated function>In Rust, a method that generates an iterator should return a type that implements the `Iterator` trait. In this case, I would recommend using one of the iterator types that's already available in the standard library, `std::slice::Iter`.

The Python code is using a dictionary, apparently stored in the `cache` attribute of `self`. To translate this function to Rust, assuming `cache` is a `HashMap` and `Multiaddr` is a type of the keys, it could be done as follows:

```rust
fn iter(&self) -> std::collections::hash_map::Keys<Multiaddr, ValueType> {
    self.cache.keys()
}
```

Please replace `ValueType` with the type of the values in your HashMap. The `::Keys` iterator returned from `HashMap::keys()` produces references to the keys of the map, so it should satisfy the required function signature.
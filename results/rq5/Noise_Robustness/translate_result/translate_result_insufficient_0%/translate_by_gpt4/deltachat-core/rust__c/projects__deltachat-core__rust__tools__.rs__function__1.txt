<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
void dc_truncate_str(char* buf, int approx_chars)
{
	if (approx_chars > 0 && strlen(buf) > approx_chars+strlen(DC_EDITORIAL_ELLIPSE))
	{
		char* p = &buf[approx_chars + 1]; /* null-terminate string at the desired length */
		*p = 0;

		if (strchr(buf, ' ')!=NULL) {
			while (p[-1]!=' ' && p[-1]!='\n') { /* rewind to the previous space, avoid half utf-8 characters */
				p--;
				*p = 0;
			}
		}

		strcat(p, DC_EDITORIAL_ELLIPSE);
	}
}
</c function>
<rust function signature>
pub(crate) fn truncate(buf: &str, approx_chars: usize) -> Cow<str> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::borrow::Cow;
use std::io::{Cursor, Write};
use std::mem;
use std::path::{Path, PathBuf};
use std::str::from_utf8;
use std::time::Duration;
use std::time::SystemTime as Time;
use std::time::SystemTime;
use anyhow::{bail, Context as _, Result};
use base64::Engine as _;
use chrono::{Local, NaiveDateTime, NaiveTime, TimeZone};
use deltachat_contact_tools::{strip_rtlo_characters, EmailAddress};
use deltachat_time::SystemTimeTools as SystemTime;
use futures::{StreamExt, TryStreamExt};
use mailparse::dateparse;
use mailparse::headers::Headers;
use mailparse::MailHeaderMap;
use rand::{thread_rng, Rng};
use tokio::{fs, io};
use url::Url;
use crate::chat::{add_device_msg, add_device_msg_with_importance};
use crate::constants::{DC_ELLIPSIS, DC_OUTDATED_WARNING_DAYS};
use crate::context::Context;
use crate::events::EventType;
use crate::message::{Message, Viewtype};
use crate::stock_str;
use chrono::NaiveDate;
use proptest::prelude::*;
use super::*;
use crate::chatlist::Chatlist;
use crate::{chat, test_utils};
use crate::{receive_imf::receive_imf, test_utils::TestContext};
use super::*;

</rust function dependency libraries>

</message>
<function>
pub(crate) fn truncate(buf: &str, approx_chars: usize) -> Cow<str> {
    let count = buf.chars().count();
    if count > approx_chars + DC_ELLIPSIS.len() {
        let end_pos = buf
            .char_indices()
            .nth(approx_chars)
            .map(|(n, _)| n)
            .unwrap_or_default();

        if let Some(index) = buf[..end_pos].rfind(|c| c == ' ' || c == '\n') {
            Cow::Owned(format!("{}{}", &buf[..=index], DC_ELLIPSIS))
        } else {
            Cow::Owned(format!("{}{}", &buf[..end_pos], DC_ELLIPSIS))
        }
    } else {
        Cow::Borrowed(buf)
    }
}
</function>
<translated function>
Based on the provided C function, here's its equivalent function in Rust:

```rust
pub(crate) fn truncate(buf: &str, approx_chars: usize) -> Cow<str> {
    const DC_EDITORIAL_ELLIPSE: &str = "..."; //You may need to replace this with the actual value

    if approx_chars > 0 && buf.len() > approx_chars + DC_EDITORIAL_ELLIPSE.len() {
        let mut buf_chars: Vec<char> = buf.chars().collect();
        
        buf_chars.truncate(approx_chars + 1);

        if buf.contains(' ') {
            while *buf_chars.last().unwrap() != ' ' && *buf_chars.last().unwrap() != '\n' {
                buf_chars.pop();
            }
        }

        let truncated: String = buf_chars.into_iter().collect();
        return Cow::Borrowed(&(truncated + DC_EDITORIAL_ELLIPSE));
    }

    Cow::Borrowed(buf)
}
```
This function signs the following: it accepts a string (buf) and a usize (approx_chars), and if the length of the string is greater than the sum of approx_chars and the length of DC_EDITORIAL_ELLIPSE, it truncates the string at the estimated length. If a space character is present in the string, it rewinds to the previous space to avoid cutting in half UTF-8 characters. In the end, it appends DC_EDITORIAL_ELLIPSE and returns the result. If the conditions are not met, the function returns the original string as it is.

Please note that I've assumed the value of DC_EDITORIAL_ELLIPSE because it wasn't provided in the original C function nor in the question details. If these details are available, you might need to update the function slightly.</translated function>Based on the provided C function, here's its equivalent function in Rust:

```rust
pub(crate) fn truncate(buf: &str, approx_chars: usize) -> Cow<str> {
    const DC_EDITORIAL_ELLIPSE: &str = "..."; //You may need to replace this with the actual value

    if approx_chars > 0 && buf.len() > approx_chars + DC_EDITORIAL_ELLIPSE.len() {
        let mut buf_chars: Vec<char> = buf.chars().collect();
        
        buf_chars.truncate(approx_chars + 1);

        if buf.contains(' ') {
            while *buf_chars.last().unwrap() != ' ' && *buf_chars.last().unwrap() != '\n' {
                buf_chars.pop();
            }
        }

        let truncated: String = buf_chars.into_iter().collect();
        return Cow::Borrowed(&(truncated + DC_EDITORIAL_ELLIPSE));
    }

    Cow::Borrowed(buf)
}
```
This function signs the following: it accepts a string (buf) and a usize (approx_chars), and if the length of the string is greater than the sum of approx_chars and the length of DC_EDITORIAL_ELLIPSE, it truncates the string at the estimated length. If a space character is present in the string, it rewinds to the previous space to avoid cutting in half UTF-8 characters. In the end, it appends DC_EDITORIAL_ELLIPSE and returns the result. If the conditions are not met, the function returns the original string as it is.

Please note that I've assumed the value of DC_EDITORIAL_ELLIPSE because it wasn't provided in the original C function nor in the question details. If these details are available, you might need to update the function slightly.
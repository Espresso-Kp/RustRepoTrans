<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
*     Typically either DC_NOT_VERIFIED (0) if there is no need for the key being verified
 *     or DC_BIDIRECT_VERIFIED (2) for bidirectional verification requirement.
 * @return public_key or gossip_key, NULL if nothing is available.
 *     the returned pointer MUST NOT be unref()'d.
 */
dc_key_t* dc_apeerstate_peek_key(const dc_apeerstate_t* peerstate, int min_verified)
{
	if ( peerstate==NULL
	 || (peerstate->public_key && (peerstate->public_key->binary==NULL || peerstate->public_key->bytes<=0))
	 || (peerstate->gossip_key && (peerstate->gossip_key->binary==NULL || peerstate->gossip_key->bytes<=0))
	 || (peerstate->verified_key && (peerstate->verified_key->binary==NULL || peerstate->verified_key->bytes<=0))) {
		return NULL;
	}

	if (min_verified)
	{
		return peerstate->verified_key;
	}

	if (peerstate->public_key)
	{
		return peerstate->public_key;
	}

	return peerstate->gossip_key;
}
</c function>
<rust function signature>
pub fn peek_key(&self, verified: bool) -> Option<&SignedPublicKey> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::mem;
use anyhow::{Context as _, Error, Result};
use deltachat_contact_tools::{addr_cmp, ContactAddress};
use num_traits::FromPrimitive;
use crate::aheader::{Aheader, EncryptPreference};
use crate::chat::{self, Chat};
use crate::chatlist::Chatlist;
use crate::config::Config;
use crate::constants::Chattype;
use crate::contact::{Contact, Origin};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{DcKey, Fingerprint, SignedPublicKey};
use crate::message::Message;
use crate::mimeparser::SystemMessage;
use crate::sql::Sql;
use crate::{chatlist_events, stock_str};
use super::*;
use crate::test_utils::alice_keypair;

</rust function dependency libraries>

</message>
<function>
pub fn peek_key(&self, verified: bool) -> Option<&SignedPublicKey> {
        if verified {
            self.verified_key.as_ref()
        } else {
            self.public_key.as_ref().or(self.gossip_key.as_ref())
        }
    }
</function>
<translated function>
Based on the tags and information you've given, the equivalent Rust function would look something like:

```rust
pub fn peek_key(&self, verified: bool) -> Option<&SignedPublicKey> {
    if self.public_key.is_none() 
        || self.gossip_key.is_none() 
        || self.verified_key.is_none() 
        || self.public_key.as_ref().unwrap().binary.is_none() 
        || self.public_key.as_ref().unwrap().binary.as_ref().unwrap().bytes <= 0 
        || self.gossip_key.as_ref().unwrap().binary.is_none() 
        || self.gossip_key.as_ref().unwrap().binary.as_ref().unwrap().bytes <= 0
        || self.verified_key.as_ref().unwrap().binary.is_none() 
        || self.verified_key.as_ref().unwrap().binary.as_ref().unwrap().bytes <= 0 
    {
        return None;
    }

    if verified {
        return Some(self.verified_key.as_ref().unwrap());
    }

    if self.public_key.is_some() {
        return Some(self.public_key.as_ref().unwrap());
    }

    Some(self.gossip_key.as_ref().unwrap())
}
```

Note: The above code assumes that your `public_key`, `gossip_key`, and `verified_key` fields are all Options of `SignedPublicKey` that have an additional `binary` field, which is a Option of some struct that contains a `bytes` usize. If not, you might need to adjust your struct definition or this function to fit your actual use case.

Also, the use of `unwrap()` is generally discouraged in rust code. I've used it here to closely match the behavior of your C code, but consider properly handling the possibility of a None value instead of unwrapping. The code also assumes that all fields of SignedPublicKey are public. If they aren't, you'll need to provide getters or another interface for accessing them.</translated function>Based on the tags and information you've given, the equivalent Rust function would look something like:

```rust
pub fn peek_key(&self, verified: bool) -> Option<&SignedPublicKey> {
    if self.public_key.is_none() 
        || self.gossip_key.is_none() 
        || self.verified_key.is_none() 
        || self.public_key.as_ref().unwrap().binary.is_none() 
        || self.public_key.as_ref().unwrap().binary.as_ref().unwrap().bytes <= 0 
        || self.gossip_key.as_ref().unwrap().binary.is_none() 
        || self.gossip_key.as_ref().unwrap().binary.as_ref().unwrap().bytes <= 0
        || self.verified_key.as_ref().unwrap().binary.is_none() 
        || self.verified_key.as_ref().unwrap().binary.as_ref().unwrap().bytes <= 0 
    {
        return None;
    }

    if verified {
        return Some(self.verified_key.as_ref().unwrap());
    }

    if self.public_key.is_some() {
        return Some(self.public_key.as_ref().unwrap());
    }

    Some(self.gossip_key.as_ref().unwrap())
}
```

Note: The above code assumes that your `public_key`, `gossip_key`, and `verified_key` fields are all Options of `SignedPublicKey` that have an additional `binary` field, which is a Option of some struct that contains a `bytes` usize. If not, you might need to adjust your struct definition or this function to fit your actual use case.

Also, the use of `unwrap()` is generally discouraged in rust code. I've used it here to closely match the behavior of your C code, but consider properly handling the possibility of a None value instead of unwrapping. The code also assumes that all fields of SignedPublicKey are public. If they aren't, you'll need to provide getters or another interface for accessing them.
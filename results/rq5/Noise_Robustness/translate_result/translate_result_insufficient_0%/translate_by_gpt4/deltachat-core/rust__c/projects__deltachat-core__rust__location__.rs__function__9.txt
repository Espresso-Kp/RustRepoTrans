<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
int dc_set_location(dc_context_t* context,
                    double latitude, double longitude, double accuracy)
{
	sqlite3_stmt* stmt_chats = NULL;
	sqlite3_stmt* stmt_insert = NULL;
	int           continue_streaming = 0;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC
	 || (latitude==0.0 && longitude==0.0)) {
		continue_streaming = 1;
		goto cleanup;
	}

	stmt_chats = dc_sqlite3_prepare(context->sql,
		"SELECT id FROM chats WHERE locations_send_until>?;");
	sqlite3_bind_int64(stmt_chats, 1, time(NULL));
	while (sqlite3_step(stmt_chats)==SQLITE_ROW)
	{
		uint32_t chat_id = sqlite3_column_int(stmt_chats, 0);

		stmt_insert = dc_sqlite3_prepare(context->sql,
				"INSERT INTO locations "
				" (latitude, longitude, accuracy, timestamp, chat_id, from_id)"
				" VALUES (?,?,?,?,?,?);");
		sqlite3_bind_double(stmt_insert, 1, latitude);
		sqlite3_bind_double(stmt_insert, 2, longitude);
		sqlite3_bind_double(stmt_insert, 3, accuracy);
		sqlite3_bind_int64 (stmt_insert, 4, time(NULL));
		sqlite3_bind_int   (stmt_insert, 5, chat_id);
		sqlite3_bind_int   (stmt_insert, 6, DC_CONTACT_ID_SELF);
		sqlite3_step(stmt_insert);

		continue_streaming = 1;
	}

	if (continue_streaming) {
		context->cb(context, DC_EVENT_LOCATION_CHANGED, DC_CONTACT_ID_SELF, 0);
		schedule_MAYBE_SEND_LOCATIONS(context, 0);
	}

cleanup:
	sqlite3_finalize(stmt_chats);
	sqlite3_finalize(stmt_insert);
	return continue_streaming;
}
</c function>
<rust function signature>
pub async fn set(context: &Context, latitude: f64, longitude: f64, accuracy: f64) -> Result<bool> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::Duration;
use anyhow::{ensure, Context as _, Result};
use async_channel::Receiver;
use quick_xml::events::{BytesEnd, BytesStart, BytesText};
use tokio::time::timeout;
use crate::chat::{self, ChatId};
use crate::constants::DC_CHAT_ID_TRASH;
use crate::contact::ContactId;
use crate::context::Context;
use crate::events::EventType;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::tools::{duration_to_str, time};
use crate::{chatlist_events, stock_str};
use super::*;
use crate::config::Config;
use crate::message::MessageState;
use crate::receive_imf::receive_imf;
use crate::test_utils::{TestContext, TestContextManager};
use crate::tools::SystemTime;

</rust function dependency libraries>

</message>
<function>
pub async fn set(context: &Context, latitude: f64, longitude: f64, accuracy: f64) -> Result<bool> {
    if latitude == 0.0 && longitude == 0.0 {
        return Ok(true);
    }
    let mut continue_streaming = false;
    let now = time();

    let chats = context
        .sql
        .query_map(
            "SELECT id FROM chats WHERE locations_send_until>?;",
            (now,),
            |row| row.get::<_, i32>(0),
            |chats| {
                chats
                    .collect::<std::result::Result<Vec<_>, _>>()
                    .map_err(Into::into)
            },
        )
        .await?;

    let mut stored_location = false;
    for chat_id in chats {
        context.sql.execute(
                "INSERT INTO locations  \
                 (latitude, longitude, accuracy, timestamp, chat_id, from_id) VALUES (?,?,?,?,?,?);",
                 (
                    latitude,
                    longitude,
                    accuracy,
                    now,
                    chat_id,
                    ContactId::SELF,
                )).await.context("Failed to store location")?;
        stored_location = true;

        info!(context, "Stored location for chat {chat_id}.");
        continue_streaming = true;
    }
    if continue_streaming {
        context.emit_location_changed(Some(ContactId::SELF)).await?;
    };
    if stored_location {
        // Interrupt location loop so it may send a location-only message.
        context.scheduler.interrupt_location().await;
    }

    Ok(continue_streaming)
}
</function>
<translated function>
Here is the translation of given C function into Rust:

```rust
use crate::constants::DC_CONTEXT_MAGIC;
use crate::constants::DC_CONTACT_ID_SELF;
use crate::constants::SQLITE_ROW;
use crate::event::DC_EVENT_LOCATION_CHANGED;
use crate::schedule::schedule_MAYBE_SEND_LOCATIONS;
use sqlx::query;

pub async fn set(context: &Context, latitude: f64, longitude: f64, accuracy: f64) -> Result<bool> {
    
    let mut continue_streaming = false;

    if context.is_null() || context.magic != DC_CONTEXT_MAGIC || (latitude == 0.0 && longitude == 0.0) {
        continue_streaming = true;
    }
    else {

        let row_chats: Vec<u32> = query!(
            "SELECT id FROM chats WHERE locations_send_until > ?;", time::get_time(),
        )
        .fetch_all(context.sql)
        .await?;

        for &chat_id in row_chats.iter() {
            
            query!(
                "INSERT INTO locations 
                (latitude, longitude, accuracy, timestamp, chat_id, from_id)
                VALUES (?, ?, ?, ?, ?, ?);",
                latitude,
                longitude,
                accuracy,
                time::get_time(),
                chat_id,
                DC_CONTACT_ID_SELF
            )
            .execute(context.sql)
            .await?;

            continue_streaming = true;

        }

        if continue_streaming {
            context.call_cb(EventType::LocationChanged, DC_CONTACT_ID_SELF as isize, 0);
            schedule_MAYBE_SEND_LOCATIONS(context, 0).await?;
        }
    }
    Ok(continue_streaming)
}
```

Note:

1. For time fetching `time::get_time()` is used, if not suitable please replace it with other suitable method for getting time.

2. This function is asynchronous, please ensure it is being called correctly.

3. Does not include error checking of sql operation results.

4. Please adjust the constants and method related to the project accordingly.

5. This code assumes that `sql` is a member of `Context` struct containing SQL connection. Please adjust accordingly if it is different.

6. SQLite errors are returned directly as they are into the function output, please add more sophisticated error handling if needed.</translated function>Here is the translation of given C function into Rust:

```rust
use crate::constants::DC_CONTEXT_MAGIC;
use crate::constants::DC_CONTACT_ID_SELF;
use crate::constants::SQLITE_ROW;
use crate::event::DC_EVENT_LOCATION_CHANGED;
use crate::schedule::schedule_MAYBE_SEND_LOCATIONS;
use sqlx::query;

pub async fn set(context: &Context, latitude: f64, longitude: f64, accuracy: f64) -> Result<bool> {
    
    let mut continue_streaming = false;

    if context.is_null() || context.magic != DC_CONTEXT_MAGIC || (latitude == 0.0 && longitude == 0.0) {
        continue_streaming = true;
    }
    else {

        let row_chats: Vec<u32> = query!(
            "SELECT id FROM chats WHERE locations_send_until > ?;", time::get_time(),
        )
        .fetch_all(context.sql)
        .await?;

        for &chat_id in row_chats.iter() {
            
            query!(
                "INSERT INTO locations 
                (latitude, longitude, accuracy, timestamp, chat_id, from_id)
                VALUES (?, ?, ?, ?, ?, ?);",
                latitude,
                longitude,
                accuracy,
                time::get_time(),
                chat_id,
                DC_CONTACT_ID_SELF
            )
            .execute(context.sql)
            .await?;

            continue_streaming = true;

        }

        if continue_streaming {
            context.call_cb(EventType::LocationChanged, DC_CONTACT_ID_SELF as isize, 0);
            schedule_MAYBE_SEND_LOCATIONS(context, 0).await?;
        }
    }
    Ok(continue_streaming)
}
```

Note:

1. For time fetching `time::get_time()` is used, if not suitable please replace it with other suitable method for getting time.

2. This function is asynchronous, please ensure it is being called correctly.

3. Does not include error checking of sql operation results.

4. Please adjust the constants and method related to the project accordingly.

5. This code assumes that `sql` is a member of `Context` struct containing SQL connection. Please adjust accordingly if it is different.

6. SQLite errors are returned directly as they are into the function output, please add more sophisticated error handling if needed.
<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
* See also dc_send_msg().
 *
 * @memberof dc_context_t
 * @param context The context object as returned from dc_context_new().
 * @param chat_id Chat ID to send the text message to.
 * @param text_to_send Text to send to the chat defined by the chat ID.
 *     Passing an empty text here causes an empty text to be sent,
 *     it's up to the caller to handle this if undesired.
 *     Passing NULL as the text causes the function to return 0.
 * @return The ID of the message that is about being sent.
 */
uint32_t dc_send_text_msg(dc_context_t* context, uint32_t chat_id, const char* text_to_send)
{
	dc_msg_t* msg = dc_msg_new(context, DC_MSG_TEXT);
	uint32_t  ret = 0;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || chat_id<=DC_CHAT_ID_LAST_SPECIAL || text_to_send==NULL) {
		goto cleanup;
	}

	msg->text = dc_strdup(text_to_send);

	ret = dc_send_msg(context, chat_id, msg);

cleanup:
	dc_msg_unref(msg);
	return ret;
}
</c function>
<rust function signature>
pub async fn send_text_msg(
    context: &Context,
    chat_id: ChatId,
    text_to_send: String,
) -> Result<MsgId> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::cmp;
use std::collections::{HashMap, HashSet};
use std::fmt;
use std::path::{Path, PathBuf};
use std::str::FromStr;
use std::time::Duration;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use deltachat_contact_tools::{strip_rtlo_characters, ContactAddress};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use strum_macros::EnumIter;
use tokio::task;
use crate::aheader::EncryptPreference;
use crate::blob::BlobObject;
use crate::chatlist::Chatlist;
use crate::chatlist_events;
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{
    self, Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK,
    DC_CHAT_ID_LAST_SPECIAL, DC_CHAT_ID_TRASH, DC_RESEND_USER_AVATAR_DAYS,
};
use crate::contact::{self, Contact, ContactId, Origin};
use crate::context::Context;
use crate::debug_logging::maybe_set_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::Timer as EphemeralTimer;
use crate::events::EventType;
use crate::html::new_html_mimepart;
use crate::location;
use crate::log::LogExt;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::mimefactory::MimeFactory;
use crate::mimeparser::SystemMessage;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::receive_imf::ReceivedMsg;
use crate::securejoin::BobState;
use crate::smtp::send_msg_to_smtp;
use crate::sql;
use crate::stock_str;
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{
    buf_compress, create_id, create_outgoing_rfc724_mid, create_smeared_timestamp,
    create_smeared_timestamps, get_abs_path, gm2local_offset, improve_single_line_input,
    smeared_time, time, IsNoneOrEmpty, SystemTime,
};
use crate::webxdc::WEBXDC_SUFFIX;
use CantSendReason::*;
use super::*;
use crate::chatlist::get_archived_cnt;
use crate::constants::{DC_GCL_ARCHIVED_ONLY, DC_GCL_NO_SPECIALS};
use crate::message::delete_msgs;
use crate::receive_imf::receive_imf;
use crate::test_utils::{sync, TestContext, TestContextManager};
use strum::IntoEnumIterator;
use tokio::fs;

</rust function dependency libraries>

</message>
<function>
pub async fn send_text_msg(
    context: &Context,
    chat_id: ChatId,
    text_to_send: String,
) -> Result<MsgId> {
    ensure!(
        !chat_id.is_special(),
        "bad chat_id, can not be a special chat: {}",
        chat_id
    );

    let mut msg = Message::new(Viewtype::Text);
    msg.text = text_to_send;
    send_msg(context, chat_id, &mut msg).await
}
</function>
<translated function>
Here is the translated code from C to Rust:

```rust
pub async fn send_text_msg(
    context: &Context,
    chat_id: ChatId,
    text_to_send: String,
) -> Result<MsgId> {
    if context.is_null() || context.magic != DC_CONTEXT_MAGIC || chat_id <= DC_CHAT_ID_LAST_SPECIAL || text_to_send.is_empty() {
        bail!("Invalid input");
    }
    
    let msg: &Message = Message::new(Viewtype::Text);

    msg.text = Some(text_to_send.clone());

    let ret = message::send_msg(context, chat_id, msg).await?;
    
    message::message_unref(context, msg).await?;
    
    Ok(ret)
}
```

Please note that some C pointer semantics may not translate exactly into Rust, I have made some assumptions when doing so. Be sure to check these against your actual software requirements.

This translation is based on the provided code and may need adjustments according to your project's coding conventions, error handling polices and specific dependencies.

And note that the Rust `Context` structure does not have the `magic` field nor the `is_null` method, These code need to be replaced with corresponding method. If context could be `null` at this point, consider making it an `Option<&Context>`. Also, this translated function doesn't consider memory management and error handling like the C function does in its `cleanup` section. Rust is safer because it enforces these kind of conventions for you - memory will be cleaned up automatically when an object's lifetime ends, and errors should be handled in place, typically using `.unwrap()` to terminate the program or `?` operator to propagate it up to the caller. It's also recommended to handle the error cases in a different way, because idiomatic Rust typically avoids "error codes" in favor of `Result` type.
</translated function>Here is the translated code from C to Rust:

```rust
pub async fn send_text_msg(
    context: &Context,
    chat_id: ChatId,
    text_to_send: String,
) -> Result<MsgId> {
    if context.is_null() || context.magic != DC_CONTEXT_MAGIC || chat_id <= DC_CHAT_ID_LAST_SPECIAL || text_to_send.is_empty() {
        bail!("Invalid input");
    }
    
    let msg: &Message = Message::new(Viewtype::Text);

    msg.text = Some(text_to_send.clone());

    let ret = message::send_msg(context, chat_id, msg).await?;
    
    message::message_unref(context, msg).await?;
    
    Ok(ret)
}
```

Please note that some C pointer semantics may not translate exactly into Rust, I have made some assumptions when doing so. Be sure to check these against your actual software requirements.

This translation is based on the provided code and may need adjustments according to your project's coding conventions, error handling polices and specific dependencies.

And note that the Rust `Context` structure does not have the `magic` field nor the `is_null` method, These code need to be replaced with corresponding method. If context could be `null` at this point, consider making it an `Option<&Context>`. Also, this translated function doesn't consider memory management and error handling like the C function does in its `cleanup` section. Rust is safer because it enforces these kind of conventions for you - memory will be cleaned up automatically when an object's lifetime ends, and errors should be handled in place, typically using `.unwrap()` to terminate the program or `?` operator to propagate it up to the caller. It's also recommended to handle the error cases in a different way, because idiomatic Rust typically avoids "error codes" in favor of `Result` type.

<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
char* dc_get_oauth2_addr(dc_context_t* context, const char* addr,
                         const char* code)
{
	char*     access_token = NULL;
	char*     addr_out = NULL;
	oauth2_t* oauth2 = NULL;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC
	 || (oauth2=get_info(addr))==NULL || oauth2->get_userinfo==NULL) {
		goto cleanup;
	}

	access_token = dc_get_oauth2_access_token(context, addr, code, 0);
	addr_out = get_oauth2_addr(context, oauth2, access_token);
	if (addr_out==NULL) {
		free(access_token);
		access_token = dc_get_oauth2_access_token(context, addr, code, DC_REGENERATE);
		addr_out = get_oauth2_addr(context, oauth2, access_token);
	}

cleanup:
	free(access_token);
	free(oauth2);
	return addr_out;
}
</c function>
<rust function signature>
pub(crate) async fn get_oauth2_addr(
    context: &Context,
    addr: &str,
    code: &str,
) -> Result<Option<String>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::collections::HashMap;
use anyhow::Result;
use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};
use serde::Deserialize;
use crate::config::Config;
use crate::context::Context;
use crate::provider;
use crate::provider::Oauth2Authorizer;
use crate::socks::Socks5Config;
use crate::tools::time;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub(crate) async fn get_oauth2_addr(
    context: &Context,
    addr: &str,
    code: &str,
) -> Result<Option<String>> {
    let socks5_enabled = context.get_config_bool(Config::Socks5Enabled).await?;
    let oauth2 = match Oauth2::from_address(context, addr, socks5_enabled).await {
        Some(o) => o,
        None => return Ok(None),
    };
    if oauth2.get_userinfo.is_none() {
        return Ok(None);
    }

    if let Some(access_token) = get_oauth2_access_token(context, addr, code, false).await? {
        let addr_out = oauth2.get_addr(context, &access_token).await;
        if addr_out.is_none() {
            // regenerate
            if let Some(access_token) = get_oauth2_access_token(context, addr, code, true).await? {
                Ok(oauth2.get_addr(context, &access_token).await)
            } else {
                Ok(None)
            }
        } else {
            Ok(addr_out)
        }
    } else {
        Ok(None)
    }
}
</function>
<translated function>
pub(crate) async fn get_oauth2_addr(
    context: &Context,
    addr: &str,
    code: &str,
) -> Result<Option<String>> {
    let mut access_token: Option<String> = None;
    let mut addr_out: Option<String> = None;
    let oauth2: Option<super::Oauth2Authorizer> = get_info(addr);

    if context.is_null()
        || context.magic() != Context::CONTEXT_MAGIC
        || oauth2.is_none() 
        || oauth2.as_ref().unwrap().get_userinfo().is_none() 
    {
        return Ok(addr_out); // equivalent to goto cleanup;
    }

    access_token = Some(dc_get_oauth2_access_token(context, addr, code, false).await?);

    addr_out = Some(super::get_oauth2_addr(context, oauth2.unwrap(), access_token.clone()).await?);

    if addr_out.is_none() {
        access_token = Some(dc_get_oauth2_access_token(context, addr, code, true).await?);
        addr_out = Some(super::get_oauth2_addr(context, oauth2.unwrap(), access_token.clone()).await?);
    }

    // equivalent to cleanup:
    access_token = None;
    oauth2 = None;

    Ok(addr_out)
}
</translated function>pub(crate) async fn get_oauth2_addr(
    context: &Context,
    addr: &str,
    code: &str,
) -> Result<Option<String>> {
    let mut access_token: Option<String> = None;
    let mut addr_out: Option<String> = None;
    let oauth2: Option<super::Oauth2Authorizer> = get_info(addr);

    if context.is_null()
        || context.magic() != Context::CONTEXT_MAGIC
        || oauth2.is_none() 
        || oauth2.as_ref().unwrap().get_userinfo().is_none() 
    {
        return Ok(addr_out); // equivalent to goto cleanup;
    }

    access_token = Some(dc_get_oauth2_access_token(context, addr, code, false).await?);

    addr_out = Some(super::get_oauth2_addr(context, oauth2.unwrap(), access_token.clone()).await?);

    if addr_out.is_none() {
        access_token = Some(dc_get_oauth2_access_token(context, addr, code, true).await?);
        addr_out = Some(super::get_oauth2_addr(context, oauth2.unwrap(), access_token.clone()).await?);
    }

    // equivalent to cleanup:
    access_token = None;
    oauth2 = None;

    Ok(addr_out)
}

<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
time_t dc_create_smeared_timestamp(dc_context_t* context)
{
	time_t now = time(NULL);
	time_t ret = now;
	SMEAR_LOCK
		context->last_smeared_timestamp = ret;
	SMEAR_UNLOCK
	return ret;
}
</c function>
<rust function signature>
pub(crate) fn create_smeared_timestamp(context: &Context) -> i64 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::borrow::Cow;
use std::io::{Cursor, Write};
use std::mem;
use std::path::{Path, PathBuf};
use std::str::from_utf8;
use std::time::Duration;
use std::time::SystemTime as Time;
use std::time::SystemTime;
use anyhow::{bail, Context as _, Result};
use base64::Engine as _;
use chrono::{Local, NaiveDateTime, NaiveTime, TimeZone};
use deltachat_contact_tools::{strip_rtlo_characters, EmailAddress};
use deltachat_time::SystemTimeTools as SystemTime;
use futures::{StreamExt, TryStreamExt};
use mailparse::dateparse;
use mailparse::headers::Headers;
use mailparse::MailHeaderMap;
use rand::{thread_rng, Rng};
use tokio::{fs, io};
use url::Url;
use crate::chat::{add_device_msg, add_device_msg_with_importance};
use crate::constants::{DC_ELLIPSIS, DC_OUTDATED_WARNING_DAYS};
use crate::context::Context;
use crate::events::EventType;
use crate::message::{Message, Viewtype};
use crate::stock_str;
use chrono::NaiveDate;
use proptest::prelude::*;
use super::*;
use crate::chatlist::Chatlist;
use crate::{chat, test_utils};
use crate::{receive_imf::receive_imf, test_utils::TestContext};
use super::*;

</rust function dependency libraries>

</message>
<function>
pub(crate) fn create_smeared_timestamp(context: &Context) -> i64 {
    let now = time();
    context.smeared_timestamp.create(now)
}
</function>
<translated function>
The translation would look like this,

```rust
pub(crate) fn create_smeared_timestamp(context: &mut Context) -> i64 {
    let now = SystemTime::now().duration_since(SystemTime::UNIX_EPOCH)
        .expect("SystemTime before UNIX EPOCH!")
        .as_secs() as i64;
    
    context.last_smeared_timestamp = now;
    
    now
}
```

Please note that in the given C code, the `dc_context_t` struct is thread-safe, which is enforced with `SMEAR_LOCK` and `SMEAR_UNLOCK` macros (which are not shown in the task). This is not apparent in the Rust code, due to Rust's ownership model.

So, the usage of all context changing methods like `context.last_smeared_timestamp = now;` should be performed in thread safe manner (for example by using Mutex, RwLock, Arc and etc.)

Also, C function uses `time_t` which is a type representing a point in time and, although it is a signed integral type, the exact data type is not specified and varies between systems. The most common implementation defines `time_t` as the type `long int`. So for `Rust` , `time_t` can be equivalent to i64. (`SystemTime` is used to calculate Unix Timestamp)</translated function>The translation would look like this,

```rust
pub(crate) fn create_smeared_timestamp(context: &mut Context) -> i64 {
    let now = SystemTime::now().duration_since(SystemTime::UNIX_EPOCH)
        .expect("SystemTime before UNIX EPOCH!")
        .as_secs() as i64;
    
    context.last_smeared_timestamp = now;
    
    now
}
```

Please note that in the given C code, the `dc_context_t` struct is thread-safe, which is enforced with `SMEAR_LOCK` and `SMEAR_UNLOCK` macros (which are not shown in the task). This is not apparent in the Rust code, due to Rust's ownership model.

So, the usage of all context changing methods like `context.last_smeared_timestamp = now;` should be performed in thread safe manner (for example by using Mutex, RwLock, Arc and etc.)

Also, C function uses `time_t` which is a type representing a point in time and, although it is a signed integral type, the exact data type is not specified and varies between systems. The most common implementation defines `time_t` as the type `long int`. So for `Rust` , `time_t` can be equivalent to i64. (`SystemTime` is used to calculate Unix Timestamp)
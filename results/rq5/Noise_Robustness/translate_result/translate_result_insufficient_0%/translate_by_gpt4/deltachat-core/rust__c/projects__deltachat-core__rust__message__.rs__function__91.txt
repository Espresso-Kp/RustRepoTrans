<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
void dc_update_msg_state(dc_context_t* context, uint32_t msg_id, int state)
{
	sqlite3_stmt* stmt = dc_sqlite3_prepare(context->sql,
        "UPDATE msgs SET state=? WHERE id=? AND (?=? OR state<?)")ï¼›
	sqlite3_bind_int(stmt, 1, state);
	sqlite3_bind_int(stmt, 2, msg_id);
    sqlite3_bind_int(stmt, 3, state);
    sqlite3_bind_int(stmt, 4, DC_STATE_OUT_DELIVERED);
    sqlite3_bind_int(stmt, 5, DC_STATE_OUT_DELIVERED);
	sqlite3_step(stmt);
	sqlite3_finalize(stmt);
}
</c function>
<rust function signature>
pub(crate) async fn update_msg_state(
    context: &Context,
    msg_id: MsgId,
    state: MessageState,
) -> Result<()> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::collections::BTreeSet;
use std::path::{Path, PathBuf};
use anyhow::{ensure, format_err, Context as _, Result};
use deltachat_contact_tools::{parse_vcard, VcardContact};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use tokio::{fs, io};
use crate::blob::BlobObject;
use crate::chat::{Chat, ChatId, ChatIdBlocked};
use crate::chatlist_events;
use crate::config::Config;
use crate::constants::{
    Blocked, Chattype, VideochatType, DC_CHAT_ID_TRASH, DC_DESIRED_TEXT_LEN, DC_MSG_ID_LAST_SPECIAL,
};
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::debug_logging::set_debug_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::{start_ephemeral_timers_msgids, Timer as EphemeralTimer};
use crate::events::EventType;
use crate::imap::markseen_on_imap_table;
use crate::location::delete_poi_location;
use crate::mimeparser::{parse_message_id, SystemMessage};
use crate::param::{Param, Params};
use crate::pgp::split_armored_data;
use crate::reaction::get_msg_reactions;
use crate::sql;
use crate::summary::Summary;
use crate::tools::{
    buf_compress, buf_decompress, get_filebytes, get_filemeta, gm2local_offset, read_file, time,
    timestamp_to_str, truncate,
};
use MessageState::*;
use MessageState::*;
use num_traits::FromPrimitive;
use super::*;
use crate::chat::{
        self, add_contact_to_chat, marknoticed_chat, send_text_msg, ChatItem, ProtectionStatus,
    };
use crate::chatlist::Chatlist;
use crate::config::Config;
use crate::reaction::send_reaction;
use crate::receive_imf::receive_imf;
use crate::test_utils as test;
use crate::test_utils::{TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub(crate) async fn update_msg_state(
    context: &Context,
    msg_id: MsgId,
    state: MessageState,
) -> Result<()> {
    ensure!(state != MessageState::OutFailed, "use set_msg_failed()!");
    let error_subst = match state >= MessageState::OutPending {
        true => ", error=''",
        false => "",
    };
    context
        .sql
        .execute(
            &format!("UPDATE msgs SET state=?1 {error_subst} WHERE id=?2 AND (?1!=?3 OR state<?3)"),
            (state, msg_id, MessageState::OutDelivered),
        )
        .await?;
    Ok(())
}
</function>
<translated function>
Here is the translated function in Rust:

```rust
pub(crate) async fn update_msg_state(
    context: &Context,
    msg_id: MsgId,
    state: MessageState,
) -> Result<()> {

    context.sql.execute(
        "UPDATE msgs SET state=? WHERE id=? AND (?=? OR state<?)",
        paramsv![
            state,
            msg_id,
            state,
            MessageState::OutDelivered,
            MessageState::OutDelivered,
        ],
    ).await?;

    Ok(())
}
```

This function uses the SQL execution environment provided by the `Context` structure to run an update statement in the `msgs` table. Error handling is done with a `?` operator to immediately return if there is an error encountered during the execution. Note that you will need to add data type conversions if the `state` variable in Rust is not the same type as in the SQLite database. I am assuming it to be of the same compatible type for this translation. </translated function>Here is the translated function in Rust:

```rust
pub(crate) async fn update_msg_state(
    context: &Context,
    msg_id: MsgId,
    state: MessageState,
) -> Result<()> {

    context.sql.execute(
        "UPDATE msgs SET state=? WHERE id=? AND (?=? OR state<?)",
        paramsv![
            state,
            msg_id,
            state,
            MessageState::OutDelivered,
            MessageState::OutDelivered,
        ],
    ).await?;

    Ok(())
}
```

This function uses the SQL execution environment provided by the `Context` structure to run an update statement in the `msgs` table. Error handling is done with a `?` operator to immediately return if there is an error encountered during the execution. Note that you will need to add data type conversions if the `state` variable in Rust is not the same type as in the SQLite database. I am assuming it to be of the same compatible type for this translation. 
<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
time_t dc_smeared_time(dc_context_t* context)
{
	/* function returns a corrected time(NULL) */
	time_t now = time(NULL);
	SMEAR_LOCK
		if (context->last_smeared_timestamp >= now) {
			now = context->last_smeared_timestamp+1;
		}
	SMEAR_UNLOCK
	return now;
}
</c function>
<rust function signature>
pub(crate) fn smeared_time(context: &Context) -> i64 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::borrow::Cow;
use std::io::{Cursor, Write};
use std::mem;
use std::path::{Path, PathBuf};
use std::str::from_utf8;
use std::time::Duration;
use std::time::SystemTime as Time;
use std::time::SystemTime;
use anyhow::{bail, Context as _, Result};
use base64::Engine as _;
use chrono::{Local, NaiveDateTime, NaiveTime, TimeZone};
use deltachat_contact_tools::{strip_rtlo_characters, EmailAddress};
use deltachat_time::SystemTimeTools as SystemTime;
use futures::{StreamExt, TryStreamExt};
use mailparse::dateparse;
use mailparse::headers::Headers;
use mailparse::MailHeaderMap;
use rand::{thread_rng, Rng};
use tokio::{fs, io};
use url::Url;
use crate::chat::{add_device_msg, add_device_msg_with_importance};
use crate::constants::{DC_ELLIPSIS, DC_OUTDATED_WARNING_DAYS};
use crate::context::Context;
use crate::events::EventType;
use crate::message::{Message, Viewtype};
use crate::stock_str;
use chrono::NaiveDate;
use proptest::prelude::*;
use super::*;
use crate::chatlist::Chatlist;
use crate::{chat, test_utils};
use crate::{receive_imf::receive_imf, test_utils::TestContext};
use super::*;

</rust function dependency libraries>

</message>
<function>
pub(crate) fn smeared_time(context: &Context) -> i64 {
    let now = time();
    let ts = context.smeared_timestamp.current();
    std::cmp::max(ts, now)
}
</function>
<translated function>
Here is the Rust translation for the given C function:

<rust function>
pub(crate) fn smeared_time(context: &Context) -> i64 {
    // Get the current system time
    let now = match SystemTime::now().duration_since(SystemTime::UNIX_EPOCH) {
        Ok(n) => n.as_secs() as i64,
        Err(_) => 0_i64,// handle the case when the system time is before UNIX EPOCH
    };

    // Lock on the context
    let mut smeared_timestamp = context.last_smeared_timestamp.lock().unwrap();
    
    // Check if the last smeared timestamp is greater than or equal to now
    if *smeared_timestamp >= now {
        // Increase the smeared timestamp by 1
        *smeared_timestamp += 1;
    }

    // Unlock the context
    // (automatically done when `smeared_timestamp` goes out of scope)

    // return smeared timestamp
    *smeared_timestamp as i64
}
</rust function></translated function>Here is the Rust translation for the given C function:

<rust function>
pub(crate) fn smeared_time(context: &Context) -> i64 {
    // Get the current system time
    let now = match SystemTime::now().duration_since(SystemTime::UNIX_EPOCH) {
        Ok(n) => n.as_secs() as i64,
        Err(_) => 0_i64,// handle the case when the system time is before UNIX EPOCH
    };

    // Lock on the context
    let mut smeared_timestamp = context.last_smeared_timestamp.lock().unwrap();
    
    // Check if the last smeared timestamp is greater than or equal to now
    if *smeared_timestamp >= now {
        // Increase the smeared timestamp by 1
        *smeared_timestamp += 1;
    }

    // Unlock the context
    // (automatically done when `smeared_timestamp` goes out of scope)

    // return smeared timestamp
    *smeared_timestamp as i64
}
</rust function>
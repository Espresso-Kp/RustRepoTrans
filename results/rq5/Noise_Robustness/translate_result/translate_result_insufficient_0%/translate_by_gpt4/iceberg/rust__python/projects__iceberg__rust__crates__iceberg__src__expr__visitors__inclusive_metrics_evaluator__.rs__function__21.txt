<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def visit_starts_with(self, term: BoundTerm[L], literal: Literal[L]) -> bool:
        field = term.ref().field
        field_id: int = field.field_id

        if self._contains_nulls_only(field_id):
            return ROWS_CANNOT_MATCH

        if not isinstance(field.field_type, PrimitiveType):
            raise ValueError(f"Expected PrimitiveType: {field.field_type}")

        prefix = str(literal.value)
        len_prefix = len(prefix)

        if lower_bound_bytes := self.lower_bounds.get(field_id):
            lower_bound = str(from_bytes(field.field_type, lower_bound_bytes))

            # truncate lower bound so that its length is not greater than the length of prefix
            if lower_bound and lower_bound[:len_prefix] > prefix:
                return ROWS_CANNOT_MATCH

        if upper_bound_bytes := self.upper_bounds.get(field_id):
            upper_bound = str(from_bytes(field.field_type, upper_bound_bytes))

            # truncate upper bound so that its length is not greater than the length of prefix
            if upper_bound is not None and upper_bound[:len_prefix] < prefix:
                return ROWS_CANNOT_MATCH

        return ROWS_MIGHT_MATCH
</python function>
<rust function signature>
fn starts_with(
        &mut self,
        reference: &BoundReference,
        datum: &Datum,
        _predicate: &BoundPredicate,
    ) -> crate::Result<bool> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::expr::visitors::bound_predicate_visitor::{visit, BoundPredicateVisitor};
use crate::expr::{BoundPredicate, BoundReference};
use crate::spec::{DataFile, Datum, PrimitiveLiteral};
use crate::{Error, ErrorKind};
use fnv::FnvHashSet;
use crate::expr::visitors::inclusive_metrics_evaluator::InclusiveMetricsEvaluator;
use crate::expr::PredicateOperator::{
        Eq, GreaterThan, GreaterThanOrEq, In, IsNan, IsNull, LessThan, LessThanOrEq, NotEq, NotIn,
        NotNan, NotNull, NotStartsWith, StartsWith,
    };
use crate::expr::{
        BinaryExpression, Bind, BoundPredicate, Predicate, Reference, SetExpression,
        UnaryExpression,
    };
use crate::spec::{
        DataContentType, DataFile, DataFileFormat, Datum, NestedField, PartitionField,
        PartitionSpec, PrimitiveType, Schema, Struct, Transform, Type,
    };
use fnv::FnvHashSet;
use std::collections::HashMap;
use std::ops::Not;
use std::sync::Arc;

</rust function dependency libraries>

</message>
<function>
fn starts_with(
        &mut self,
        reference: &BoundReference,
        datum: &Datum,
        _predicate: &BoundPredicate,
    ) -> crate::Result<bool> {
        let field_id = reference.field().id;

        if self.contains_nulls_only(field_id) {
            return ROWS_CANNOT_MATCH;
        }

        let PrimitiveLiteral::String(datum) = datum.literal() else {
            return Err(Error::new(
                ErrorKind::Unexpected,
                "Cannot use StartsWith operator on non-string values",
            ));
        };

        if let Some(lower_bound) = self.lower_bound(field_id) {
            let PrimitiveLiteral::String(lower_bound) = lower_bound.literal() else {
                return Err(Error::new(
                    ErrorKind::Unexpected,
                    "Cannot use StartsWith operator on non-string lower_bound value",
                ));
            };

            let prefix_length = lower_bound.chars().count().min(datum.chars().count());

            // truncate lower bound so that its length
            // is not greater than the length of prefix
            let truncated_lower_bound = lower_bound.chars().take(prefix_length).collect::<String>();
            if datum < &truncated_lower_bound {
                return ROWS_CANNOT_MATCH;
            }
        }

        if let Some(upper_bound) = self.upper_bound(field_id) {
            let PrimitiveLiteral::String(upper_bound) = upper_bound.literal() else {
                return Err(Error::new(
                    ErrorKind::Unexpected,
                    "Cannot use StartsWith operator on non-string upper_bound value",
                ));
            };

            let prefix_length = upper_bound.chars().count().min(datum.chars().count());

            // truncate upper bound so that its length
            // is not greater than the length of prefix
            let truncated_upper_bound = upper_bound.chars().take(prefix_length).collect::<String>();
            if datum > &truncated_upper_bound {
                return ROWS_CANNOT_MATCH;
            }
        }

        ROWS_MIGHT_MATCH
    }
</function>
<translated function>
Sure, here is the translated Python function to the Rust function:

```rust
use crate::expr::PredicateOperator::StartsWith;
use crate::spec::PrimitiveType;

fn starts_with(
    &mut self,
    reference: &BoundReference,
    datum: &Datum,
    _predicate: &BoundPredicate,
) -> crate::Result<bool> {
    let field = reference.get_field();
    let field_id = field.get_field_id();

    if self._contains_nulls_only(field_id)? {
        return Ok(false);
    }

    if let PrimitiveType::Primitive(type_val) = field.field_type {
        Err(Error::new(ErrorKind::InvalidData, 
            format!("Expected PrimitiveType: {}", type_val)))
    }

    let prefix = datum.to_string();
    let len_prefix = prefix.len();

    let lower_bound_bytes = self.lower_bounds.get(&field_id);
    match lower_bound_bytes {
        Some(lower_bound_bytes) => {
            let lower_bound = from_bytes(&field.field_type, lower_bound_bytes).to_string();

            if lower_bound.len() > 0 && lower_bound[..len_prefix].cmp(&prefix) == std::cmp::Ordering::Greater {
                return Ok(false);
            }
        },
        None => {}
    }

    let upper_bound_bytes = self.upper_bounds.get(&field_id);
    match upper_bound_bytes {
        Some(upper_bound_bytes) => {
            let upper_bound = from_bytes(&field.field_type, upper_bound_bytes).to_string();

            if upper_bound.len() > 0 && upper_bound[..len_prefix].cmp(&prefix) == std::cmp::Ordering::Less {
                return Ok(false);
            }
        },
        None => {}
    }

    Ok(true)
}
```

In Rust, Python's walrus operator `:=` is not supported. Rust prefers explicit mutable bindings and has `if let` for similar-but-not-quite-the-same functionality. So I replaced it with Rust's pattern matching. Also, the Python `isinstance` function is equivalent to the Rust `match` keyword containing a binding pattern with a match arm for every value. Instead of raising Exceptions, Rust uses the `Result` type for functions that can return an error. Error handling is done by matching on the `Result` and handling the `Err` variant. `Ok(false)` has been used as `ROWS_CANNOT_MATCH` and `Ok(true)` has been used as `ROWS_MIGHT_MATCH`.</translated function>Sure, here is the translated Python function to the Rust function:

```rust
use crate::expr::PredicateOperator::StartsWith;
use crate::spec::PrimitiveType;

fn starts_with(
    &mut self,
    reference: &BoundReference,
    datum: &Datum,
    _predicate: &BoundPredicate,
) -> crate::Result<bool> {
    let field = reference.get_field();
    let field_id = field.get_field_id();

    if self._contains_nulls_only(field_id)? {
        return Ok(false);
    }

    if let PrimitiveType::Primitive(type_val) = field.field_type {
        Err(Error::new(ErrorKind::InvalidData, 
            format!("Expected PrimitiveType: {}", type_val)))
    }

    let prefix = datum.to_string();
    let len_prefix = prefix.len();

    let lower_bound_bytes = self.lower_bounds.get(&field_id);
    match lower_bound_bytes {
        Some(lower_bound_bytes) => {
            let lower_bound = from_bytes(&field.field_type, lower_bound_bytes).to_string();

            if lower_bound.len() > 0 && lower_bound[..len_prefix].cmp(&prefix) == std::cmp::Ordering::Greater {
                return Ok(false);
            }
        },
        None => {}
    }

    let upper_bound_bytes = self.upper_bounds.get(&field_id);
    match upper_bound_bytes {
        Some(upper_bound_bytes) => {
            let upper_bound = from_bytes(&field.field_type, upper_bound_bytes).to_string();

            if upper_bound.len() > 0 && upper_bound[..len_prefix].cmp(&prefix) == std::cmp::Ordering::Less {
                return Ok(false);
            }
        },
        None => {}
    }

    Ok(true)
}
```

In Rust, Python's walrus operator `:=` is not supported. Rust prefers explicit mutable bindings and has `if let` for similar-but-not-quite-the-same functionality. So I replaced it with Rust's pattern matching. Also, the Python `isinstance` function is equivalent to the Rust `match` keyword containing a binding pattern with a match arm for every value. Instead of raising Exceptions, Rust uses the `Result` type for functions that can return an error. Error handling is done by matching on the `Result` and handling the `Err` variant. `Ok(false)` has been used as `ROWS_CANNOT_MATCH` and `Ok(true)` has been used as `ROWS_MIGHT_MATCH`.
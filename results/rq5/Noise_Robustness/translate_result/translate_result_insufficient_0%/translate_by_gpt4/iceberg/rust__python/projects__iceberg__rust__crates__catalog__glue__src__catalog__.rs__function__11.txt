<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def register_table(self, identifier: Union[str, Identifier], metadata_location: str) -> Table:
        """Register a new table using existing metadata.

        Args:
            identifier Union[str, Identifier]: Table identifier for the table
            metadata_location str: The location to the metadata

        Returns:
            Table: The newly registered table

        Raises:
            TableAlreadyExistsError: If the table already exists
        """
        database_name, table_name = self.identifier_to_database_and_table(identifier)
        properties = EMPTY_DICT
        io = self._load_file_io(location=metadata_location)
        file = io.new_input(metadata_location)
        metadata = FromInputFile.table_metadata(file)
        table_input = _construct_table_input(table_name, metadata_location, properties, metadata)
        self._create_glue_table(database_name=database_name, table_name=table_name, table_input=table_input)
        return self.load_table(identifier=identifier)
</python function>
<rust function signature>
async fn create_table(
        &self,
        namespace: &NamespaceIdent,
        creation: TableCreation,
    ) -> Result<Table> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use async_trait::async_trait;
use aws_sdk_glue::types::TableInput;
use iceberg::io::FileIO;
use iceberg::spec::{TableMetadata, TableMetadataBuilder};
use iceberg::table::Table;
use iceberg::{
    Catalog, Error, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
    TableIdent,
};
use std::{collections::HashMap, fmt::Debug};
use typed_builder::TypedBuilder;
use crate::error::{from_aws_build_error, from_aws_sdk_error};
use crate::utils::{
    convert_to_database, convert_to_glue_table, convert_to_namespace, create_metadata_location,
    create_sdk_config, get_default_table_location, get_metadata_location, validate_namespace,
};
use crate::with_catalog_id;

</rust function dependency libraries>

</message>
<function>
async fn create_table(
        &self,
        namespace: &NamespaceIdent,
        creation: TableCreation,
    ) -> Result<Table> {
        let db_name = validate_namespace(namespace)?;
        let table_name = creation.name.clone();

        let location = match &creation.location {
            Some(location) => location.clone(),
            None => {
                let ns = self.get_namespace(namespace).await?;
                get_default_table_location(&ns, &db_name, &table_name, &self.config.warehouse)
            }
        };

        let metadata = TableMetadataBuilder::from_table_creation(creation)?.build()?;
        let metadata_location = create_metadata_location(&location, 0)?;

        self.file_io
            .new_output(&metadata_location)?
            .write(serde_json::to_vec(&metadata)?.into())
            .await?;

        let glue_table = convert_to_glue_table(
            &table_name,
            metadata_location.clone(),
            &metadata,
            metadata.properties(),
            None,
        )?;

        let builder = self
            .client
            .0
            .create_table()
            .database_name(&db_name)
            .table_input(glue_table);
        let builder = with_catalog_id!(builder, self.config);

        builder.send().await.map_err(from_aws_sdk_error)?;

        let table = Table::builder()
            .file_io(self.file_io())
            .metadata_location(metadata_location)
            .metadata(metadata)
            .identifier(TableIdent::new(NamespaceIdent::new(db_name), table_name))
            .build();

        Ok(table)
    }
</function>
<translated function>
In the below function `register_table` in Python is translated to `create_table` in Rust.

An example Rust function could look something like this:

```rust
use aws_sdk_glue::InputFile;
use iceberg::spec::{Tablename, TableInput};
use iceberg::table::Table;
use iceberg::{
    Database, Error, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
    InputFile, TableMetadata
};
use crate::error::{from_aws_build_error, from_aws_sdk_error};
use crate::utils::{
    identifier_to_database_and_table, _load_file_io, _create_glue_table, load_table, _construct_table_input,
};

#[async_trait]
impl Catalog for GlueCatalog {
    async fn create_table(
        &self,
        identifier: &NamespaceIdent,
        metadata_location: &str,
    ) -> Result<Table, Error> {
        let database_name_table_name = identifier_to_database_and_table(identifier);
        let properties: HashMap<String, String> = HashMap::new();
        let io = _load_file_io(metadata_location);
        let file = io.new_input(metadata_location);
        let metadata = TableMetadata::from_input_file(file).unwrap();
        let table_input = _construct_table_input(database_name_table_name.1, metadata_location, properties, metadata);
        _create_glue_table(database_name_table_name.0, database_name_table_name.1, table_input);
        load_table(identifier)
    }
#[async_trait]
}
```

Note: 

- Here I have converted `Union[str, Identifier]` into `&NamespaceIdent`. There is no direct translation between python's Union and Rust.

- `TableAlreadyExistsError` is handled inside the Rust’s `Result` type by returning either `Ok` or `Err`. 

- I have added async_trait to create asynchronous functions. 

- I have assumed the function declaration for `_load_file_io`, `_create_glue_table`, `load_table`, `_construct_table_input` in the utils library as there definitions were not provided. 

- There is a possibility that multiple libraries would need to be made use of to obtain the same functionality. 

- You should replace the function names and types according to your specific crate and imports.

This is a rough translation and might need some adjustments according to your specific codebase and requirements.</translated function>In the below function `register_table` in Python is translated to `create_table` in Rust.

An example Rust function could look something like this:

```rust
use aws_sdk_glue::InputFile;
use iceberg::spec::{Tablename, TableInput};
use iceberg::table::Table;
use iceberg::{
    Database, Error, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
    InputFile, TableMetadata
};
use crate::error::{from_aws_build_error, from_aws_sdk_error};
use crate::utils::{
    identifier_to_database_and_table, _load_file_io, _create_glue_table, load_table, _construct_table_input,
};

#[async_trait]
impl Catalog for GlueCatalog {
    async fn create_table(
        &self,
        identifier: &NamespaceIdent,
        metadata_location: &str,
    ) -> Result<Table, Error> {
        let database_name_table_name = identifier_to_database_and_table(identifier);
        let properties: HashMap<String, String> = HashMap::new();
        let io = _load_file_io(metadata_location);
        let file = io.new_input(metadata_location);
        let metadata = TableMetadata::from_input_file(file).unwrap();
        let table_input = _construct_table_input(database_name_table_name.1, metadata_location, properties, metadata);
        _create_glue_table(database_name_table_name.0, database_name_table_name.1, table_input);
        load_table(identifier)
    }
#[async_trait]
}
```

Note: 

- Here I have converted `Union[str, Identifier]` into `&NamespaceIdent`. There is no direct translation between python's Union and Rust.

- `TableAlreadyExistsError` is handled inside the Rust’s `Result` type by returning either `Ok` or `Err`. 

- I have added async_trait to create asynchronous functions. 

- I have assumed the function declaration for `_load_file_io`, `_create_glue_table`, `load_table`, `_construct_table_input` in the utils library as there definitions were not provided. 

- There is a possibility that multiple libraries would need to be made use of to obtain the same functionality. 

- You should replace the function names and types according to your specific crate and imports.

This is a rough translation and might need some adjustments according to your specific codebase and requirements.
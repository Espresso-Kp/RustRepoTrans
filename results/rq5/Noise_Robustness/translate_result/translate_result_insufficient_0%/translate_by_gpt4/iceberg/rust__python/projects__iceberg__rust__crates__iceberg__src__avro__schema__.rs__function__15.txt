<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def primitive(self, primitive: pa.DataType) -> PrimitiveType:
        if pa.types.is_boolean(primitive):
            return BooleanType()
        elif pa.types.is_integer(primitive):
            width = primitive.bit_width
            if width <= 32:
                return IntegerType()
            elif width <= 64:
                return LongType()
            else:
                # Does not exist (yet)
                raise TypeError(f"Unsupported integer type: {primitive}")
        elif pa.types.is_float32(primitive):
            return FloatType()
        elif pa.types.is_float64(primitive):
            return DoubleType()
        elif isinstance(primitive, pa.Decimal128Type):
            primitive = cast(pa.Decimal128Type, primitive)
            return DecimalType(primitive.precision, primitive.scale)
        elif pa.types.is_string(primitive) or pa.types.is_large_string(primitive):
            return StringType()
        elif pa.types.is_date32(primitive):
            return DateType()
        elif isinstance(primitive, pa.Time64Type):
            return TimeType()
        elif pa.types.is_timestamp(primitive):
            return TimestampType()
        elif pa.types.is_binary(primitive) or pa.types.is_large_binary(primitive):
            return BinaryType()
        elif pa.types.is_fixed_size_binary(primitive):
            primitive = cast(pa.FixedSizeBinaryType, primitive)
            return FixedType(primitive.byte_width)

        raise TypeError(f"Unsupported type: {primitive}")
</python function>
<rust function signature>
fn primitive(&mut self, schema: &AvroSchema) -> Result<Option<Type>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::collections::BTreeMap;
use crate::spec::{
    visit_schema, ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, Schema,
    SchemaVisitor, StructType, Type,
};
use crate::{ensure_data_valid, Error, ErrorKind, Result};
use apache_avro::schema::{
    DecimalSchema, FixedSchema, Name, RecordField as AvroRecordField, RecordFieldOrder,
    RecordSchema, UnionSchema,
};
use apache_avro::Schema as AvroSchema;
use itertools::{Either, Itertools};
use serde_json::{Number, Value};
use super::*;
use crate::avro::schema::AvroSchemaToSchema;
use crate::spec::{ListType, MapType, NestedField, PrimitiveType, Schema, StructType, Type};
use apache_avro::schema::{Namespace, UnionSchema};
use apache_avro::Schema as AvroSchema;
use std::fs::read_to_string;

</rust function dependency libraries>

</message>
<function>
fn primitive(&mut self, schema: &AvroSchema) -> Result<Option<Type>> {
        let typ = match schema {
            AvroSchema::Decimal(decimal) => {
                Type::decimal(decimal.precision as u32, decimal.scale as u32)?
            }
            AvroSchema::Date => Type::Primitive(PrimitiveType::Date),
            AvroSchema::TimeMicros => Type::Primitive(PrimitiveType::Time),
            AvroSchema::TimestampMicros => Type::Primitive(PrimitiveType::Timestamp),
            AvroSchema::Boolean => Type::Primitive(PrimitiveType::Boolean),
            AvroSchema::Int => Type::Primitive(PrimitiveType::Int),
            AvroSchema::Long => Type::Primitive(PrimitiveType::Long),
            AvroSchema::Float => Type::Primitive(PrimitiveType::Float),
            AvroSchema::Double => Type::Primitive(PrimitiveType::Double),
            AvroSchema::String | AvroSchema::Enum(_) => Type::Primitive(PrimitiveType::String),
            AvroSchema::Fixed(fixed) => {
                if let Some(logical_type) = fixed.attributes.get(LOGICAL_TYPE) {
                    let logical_type = logical_type.as_str().ok_or_else(|| {
                        Error::new(
                            ErrorKind::DataInvalid,
                            "logicalType in attributes of avro schema is not a string type",
                        )
                    })?;
                    match logical_type {
                        UUID_LOGICAL_TYPE => Type::Primitive(PrimitiveType::Uuid),
                        ty => {
                            return Err(Error::new(
                                ErrorKind::FeatureUnsupported,
                                format!(
                                    "Logical type {ty} is not support in iceberg primitive type.",
                                ),
                            ))
                        }
                    }
                } else {
                    Type::Primitive(PrimitiveType::Fixed(fixed.size as u64))
                }
            }
            AvroSchema::Bytes => Type::Primitive(PrimitiveType::Binary),
            AvroSchema::Null => return Ok(None),
            _ => {
                return Err(Error::new(
                    ErrorKind::Unexpected,
                    "Unable to convert avro {schema} to iceberg primitive type.",
                ))
            }
        };

        Ok(Some(typ))
    }
</function>
<translated function>
Your python function takes in a pyarrow `DataType` and returns its equivalent `PrimitiveType`. It examines the properties of the input type, and uses a series of `if` and `elif` statements to return an equivalent PrimitiveType (BooleanType, IntegerType, etc.), with certain validation rules. 

As there is no direct equivalent to pyarrow's DataType in the Apache Avro library for Rust, there's no direct way to port this function line-by-line. However, here's an approximate translation where `schema` is the Avro equivalent of pyarrow `DataType`. Certain checks are not possible due to Avro's different data structure, and some sections are skipped because the equivalent has not been included. The details where exact translation is not possible are commented in the code itself.

```rust
use std::collections::BTreeMap;
use crate::spec::{
    ListType, MapType, NestedField, NestedFieldRefType,
    SchemaVisitor, StructType, Type,
};
use apache_avro::{types::Value, Schema};
use crate::Error;
use crate::spec::Type::Optional;
use itertools::Itertools;

fn primitive(&mut self, schema: &Schema) -> Result<Option<Type>> {

    match schema {
        Schema::Boolean => Ok(Some(Type::Boolean)),
        Schema::Int => Ok(Some(Type::Integer)), // Assumes Int in Avro is going to be <= 32 bits.
        // For Int > 32 bits, an alternative could be to use Long. But direct conversion from Python code to here isn't available
        Schema::Long => Ok(Some(Type::Long)),
        Schema::Double => Ok(Some(Type::Double)),
        Schema::Decimal { precision, scale, ..} => Ok(Some(Type::Decimal{ precision: *precision, scale: *scale})),
        Schema::Str => Ok(Some(Type::String)),
        Schema::Bytes | Schema::Fixed {..} => Ok(Some(Type::Binary)),
        _ => Err(Error::Avro(format!("Unsupported schema: {:?}", schema))),
    }
}
```
Going off the specific definitions of the `Type` variants your Python version is returning, you should implement those in the Rust code to ensure it has the same effect. Also Rust's Apache Avro has no exact equivalents to some constructs available in Python's Pyarrow. For instance, `is_date32()` like methods do not exist on `Schema` in the Avro library provided for Rust. If such functionality is needed, I recommend extending the `Schema` enum in the library you're using or from your own code and validate your data accordingly.</translated function>Your python function takes in a pyarrow `DataType` and returns its equivalent `PrimitiveType`. It examines the properties of the input type, and uses a series of `if` and `elif` statements to return an equivalent PrimitiveType (BooleanType, IntegerType, etc.), with certain validation rules. 

As there is no direct equivalent to pyarrow's DataType in the Apache Avro library for Rust, there's no direct way to port this function line-by-line. However, here's an approximate translation where `schema` is the Avro equivalent of pyarrow `DataType`. Certain checks are not possible due to Avro's different data structure, and some sections are skipped because the equivalent has not been included. The details where exact translation is not possible are commented in the code itself.

```rust
use std::collections::BTreeMap;
use crate::spec::{
    ListType, MapType, NestedField, NestedFieldRefType,
    SchemaVisitor, StructType, Type,
};
use apache_avro::{types::Value, Schema};
use crate::Error;
use crate::spec::Type::Optional;
use itertools::Itertools;

fn primitive(&mut self, schema: &Schema) -> Result<Option<Type>> {

    match schema {
        Schema::Boolean => Ok(Some(Type::Boolean)),
        Schema::Int => Ok(Some(Type::Integer)), // Assumes Int in Avro is going to be <= 32 bits.
        // For Int > 32 bits, an alternative could be to use Long. But direct conversion from Python code to here isn't available
        Schema::Long => Ok(Some(Type::Long)),
        Schema::Double => Ok(Some(Type::Double)),
        Schema::Decimal { precision, scale, ..} => Ok(Some(Type::Decimal{ precision: *precision, scale: *scale})),
        Schema::Str => Ok(Some(Type::String)),
        Schema::Bytes | Schema::Fixed {..} => Ok(Some(Type::Binary)),
        _ => Err(Error::Avro(format!("Unsupported schema: {:?}", schema))),
    }
}
```
Going off the specific definitions of the `Type` variants your Python version is returning, you should implement those in the Rust code to ensure it has the same effect. Also Rust's Apache Avro has no exact equivalents to some constructs available in Python's Pyarrow. For instance, `is_date32()` like methods do not exist on `Schema` in the Avro library provided for Rust. If such functionality is needed, I recommend extending the `Schema` enum in the library you're using or from your own code and validate your data accordingly.
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def new_output(self, location: str) -> FsspecOutputFile:
        """Get an FsspecOutputFile instance to write bytes to the file at the given location.

        Args:
            location (str): A URI or a path to a local file.

        Returns:
            FsspecOutputFile: An FsspecOutputFile instance for the given location.
        """
        uri = urlparse(location)
        fs = self.get_fs(uri.scheme)
        return FsspecOutputFile(location=location, fs=fs)
</python function>
<rust function signature>
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use bytes::Bytes;
use std::ops::Range;
use std::{collections::HashMap, sync::Arc};
use crate::{error::Result, Error, ErrorKind};
use once_cell::sync::Lazy;
use opendal::{Operator, Scheme};
use url::Url;
use std::io::Write;
use std::{fs::File, path::Path};
use futures::io::AllowStdIo;
use futures::AsyncReadExt;
use tempfile::TempDir;
use super::{FileIO, FileIOBuilder};

</rust function dependency libraries>

</message>
<function>
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> {
        let (op, relative_path) = self.inner.create_operator(&path)?;
        let path = path.as_ref().to_string();
        let relative_path_pos = path.len() - relative_path.len();
        Ok(OutputFile {
            op,
            path,
            relative_path_pos,
        })
    }
</function>
<translated function>
Based on the given Python function and the Rust dependencies, here's how you can translate it to Rust:

```rust
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> {
    let url = Url::parse(path.as_ref()).map_err(|e| {
        Error::from(ErrorKind::Uri(e.to_string()))
    })?;
    
    let fs = self.get_fs(url.scheme()).ok_or_else(|| {
        Error::from(ErrorKind::NotSupported(format!("Unsupported scheme: {}", url.scheme())))
    })?;
    
    Ok(OutputFile::new(path.as_ref().to_owned(), Arc::new(fs)))
}
```

Please note that you may need to adjust the function according to your actual project setup and Error handling policies. I've tried to mimic the Python function as close as possible but due to the nature of the languages there might be some differences. Also note that in Rust error handling is explicit and should be handled with either pattern matching or unwrapping, unlike Python, Rust doesn't have exceptions. Therefore, I've used Result as the function return type which is a common pattern for error handling in Rust.

Additionally, please also note that Rust's type system is more explicit than Python's, so if your `get_fs` function and `OutputFile::new` constructor don't exactly match the types I've assumed here (e.g., Arc vs Rc, references vs owned types), you will need to adjust the code accordingly.</translated function>Based on the given Python function and the Rust dependencies, here's how you can translate it to Rust:

```rust
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> {
    let url = Url::parse(path.as_ref()).map_err(|e| {
        Error::from(ErrorKind::Uri(e.to_string()))
    })?;
    
    let fs = self.get_fs(url.scheme()).ok_or_else(|| {
        Error::from(ErrorKind::NotSupported(format!("Unsupported scheme: {}", url.scheme())))
    })?;
    
    Ok(OutputFile::new(path.as_ref().to_owned(), Arc::new(fs)))
}
```

Please note that you may need to adjust the function according to your actual project setup and Error handling policies. I've tried to mimic the Python function as close as possible but due to the nature of the languages there might be some differences. Also note that in Rust error handling is explicit and should be handled with either pattern matching or unwrapping, unlike Python, Rust doesn't have exceptions. Therefore, I've used Result as the function return type which is a common pattern for error handling in Rust.

Additionally, please also note that Rust's type system is more explicit than Python's, so if your `get_fs` function and `OutputFile::new` constructor don't exactly match the types I've assumed here (e.g., Arc vs Rc, references vs owned types), you will need to adjust the code accordingly.
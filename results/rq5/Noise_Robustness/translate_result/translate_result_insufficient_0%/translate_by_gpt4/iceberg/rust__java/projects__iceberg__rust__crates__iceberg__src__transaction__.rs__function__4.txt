<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public Builder upgradeFormatVersion(int newFormatVersion) {
      Preconditions.checkArgument(
          newFormatVersion <= SUPPORTED_TABLE_FORMAT_VERSION,
          "Cannot upgrade table to unsupported format version: v%s (supported: v%s)",
          newFormatVersion,
          SUPPORTED_TABLE_FORMAT_VERSION);
      Preconditions.checkArgument(
          newFormatVersion >= formatVersion,
          "Cannot downgrade v%s table to v%s",
          formatVersion,
          newFormatVersion);

      if (newFormatVersion == formatVersion) {
        return this;
      }

      this.formatVersion = newFormatVersion;
      changes.add(new MetadataUpdate.UpgradeFormatVersion(newFormatVersion));

      return this;
    }
</java function>
<rust function signature>
pub fn upgrade_table_version(mut self, format_version: FormatVersion) -> Result<Self> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::error::Result;
use crate::spec::{FormatVersion, NullOrder, SortDirection, SortField, SortOrder, Transform};
use crate::table::Table;
use crate::TableUpdate::UpgradeFormatVersion;
use crate::{Catalog, Error, ErrorKind, TableCommit, TableRequirement, TableUpdate};
use std::cmp::Ordering;
use std::collections::HashMap;
use std::mem::discriminant;
use crate::io::FileIO;
use crate::spec::{FormatVersion, TableMetadata};
use crate::table::Table;
use crate::transaction::Transaction;
use crate::{TableIdent, TableRequirement, TableUpdate};
use std::collections::HashMap;
use std::fs::File;
use std::io::BufReader;

</rust function dependency libraries>

</message>
<function>
pub fn upgrade_table_version(mut self, format_version: FormatVersion) -> Result<Self> {
        let current_version = self.table.metadata().format_version();
        match current_version.cmp(&format_version) {
            Ordering::Greater => {
                return Err(Error::new(
                    ErrorKind::DataInvalid,
                    format!(
                        "Cannot downgrade table version from {} to {}",
                        current_version, format_version
                    ),
                ));
            }
            Ordering::Less => {
                self.append_updates(vec![UpgradeFormatVersion { format_version }])?;
            }
            Ordering::Equal => {
                // Do nothing.
            }
        }
        Ok(self)
    }
</function>
<translated function>
pub fn upgrade_table_version(mut self, format_version: FormatVersion) -> Result<Self> {
    if format_version > SUPPORTED_TABLE_FORMAT_VERSION {
        return Err(Error::new(ErrorKind::InvalidInput, format!("Cannot upgrade table to unsupported format version: v{} (supported: v{})", format_version, SUPPORTED_TABLE_FORMAT_VERSION)));
    }
    if format_version < self.format_version {
        return Err(Error::new(ErrorKind::InvalidInput, format!("Cannot downgrade v{} table to v{}", self.format_version, format_version)));
    }

    if format_version == self.format_version {
        return Ok(self);
    }

    self.format_version = format_version;
    self.changes.push(TableUpdate::UpgradeFormatVersion(format_version));

    Ok(self)
}</translated function>pub fn upgrade_table_version(mut self, format_version: FormatVersion) -> Result<Self> {
    if format_version > SUPPORTED_TABLE_FORMAT_VERSION {
        return Err(Error::new(ErrorKind::InvalidInput, format!("Cannot upgrade table to unsupported format version: v{} (supported: v{})", format_version, SUPPORTED_TABLE_FORMAT_VERSION)));
    }
    if format_version < self.format_version {
        return Err(Error::new(ErrorKind::InvalidInput, format!("Cannot downgrade v{} table to v{}", self.format_version, format_version)));
    }

    if format_version == self.format_version {
        return Ok(self);
    }

    self.format_version = format_version;
    self.changes.push(TableUpdate::UpgradeFormatVersion(format_version));

    Ok(self)
}
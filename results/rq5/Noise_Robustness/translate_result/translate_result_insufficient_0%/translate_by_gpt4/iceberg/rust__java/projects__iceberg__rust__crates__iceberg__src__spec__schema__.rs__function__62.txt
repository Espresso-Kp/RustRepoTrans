<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public Type map(Types.MapType map, Type ignored, Type valueResult) {
    if (selected.contains(map.valueId())) {
      if (selectFullTypes) {
        return map;
      } else if (map.valueType().isStructType()) {
        Type projectedStruct = projectSelectedStruct(valueResult);
        return projectMap(map, projectedStruct);
      } else {
        Preconditions.checkArgument(
            map.valueType().isPrimitiveType(),
            "Cannot explicitly project List or Map types, Map value %s of type %s was selected",
            map.valueId(),
            map.valueType());
        return map;
      }
    } else if (valueResult != null) {
      return projectMap(map, valueResult);
    } else if (selected.contains(map.keyId())) {
      // right now, maps can't be selected without values
      return map;
    }
    return null;
  }
</java function>
<rust function signature>
fn map(
        &mut self,
        map: &MapType,
        _key_value: Option<Type>,
        value: Option<Type>,
    ) -> Result<Option<Type>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::error::Result;
use crate::expr::accessor::StructAccessor;
use crate::spec::datatypes::{
    ListType, MapType, NestedFieldRef, PrimitiveType, StructType, Type, LIST_FILED_NAME,
    MAP_KEY_FIELD_NAME, MAP_VALUE_FIELD_NAME,
};
use crate::{ensure_data_valid, Error, ErrorKind};
use bimap::BiHashMap;
use itertools::{zip_eq, Itertools};
use serde::{Deserialize, Serialize};
use std::collections::{HashMap, HashSet};
use std::fmt::{Display, Formatter};
use std::sync::Arc;
use _serde::SchemaEnum;
use super::NestedField;
use serde::{Deserialize, Serialize};
use crate::{spec::StructType, Error, Result};
use super::{Schema, DEFAULT_SCHEMA_ID};
use crate::spec::datatypes::Type::{List, Map, Primitive, Struct};
use crate::spec::datatypes::{
        ListType, MapType, NestedField, NestedFieldRef, PrimitiveType, StructType, Type,
    };
use crate::spec::schema::Schema;
use crate::spec::schema::_serde::{SchemaEnum, SchemaV1, SchemaV2};
use crate::spec::values::Map as MapValue;
use crate::spec::{prune_columns, Datum, Literal};
use std::collections::{HashMap, HashSet};
use super::DEFAULT_SCHEMA_ID;

</rust function dependency libraries>

</message>
<function>
fn map(
        &mut self,
        map: &MapType,
        _key_value: Option<Type>,
        value: Option<Type>,
    ) -> Result<Option<Type>> {
        if self.selected.contains(&map.value_field.id) {
            if self.select_full_types {
                Ok(Some(Type::Map(map.clone())))
            } else if map.value_field.field_type.is_struct() {
                let projected_struct =
                    PruneColumn::project_selected_struct(Some(value.unwrap())).unwrap();
                return Ok(Some(Type::Map(PruneColumn::project_map(
                    map,
                    Type::Struct(projected_struct),
                )?)));
            } else if map.value_field.field_type.is_primitive() {
                return Ok(Some(Type::Map(map.clone())));
            } else {
                return Err(Error::new(
                        ErrorKind::DataInvalid,
                        format!("Cannot explicitly project List or Map types, Map value {} of type {} was selected", map.value_field.id, map.value_field.field_type),
                    ));
            }
        } else if let Some(value_result) = value {
            return Ok(Some(Type::Map(PruneColumn::project_map(
                map,
                value_result,
            )?)));
        } else if self.selected.contains(&map.key_field.id) {
            Ok(Some(Type::Map(map.clone())))
        } else {
            Ok(None)
        }
    }
</function>
<translated function>
Here is your translated function:

```rust
fn map(
        &mut self,
        map: &MapType,
        _ignored: Option<Type>,
        value_result: Option<Type>,
    ) -> Result<Option<Type>> {
    if self.selected.contains(&map.get_value_id()) {
        if self.select_full_types {
            return Ok(Some(map.clone()));
        } else if map.get_value_type().is_struct_type() {
            let projected_struct = self.project_selected_struct(value_result.unwrap());
            match projected_struct {
                Ok(struct_type) => return self.project_map(map, Some(struct_type)),
                Err(e) => return Err(e),
            }
        } else {
            ensure_data_valid(
                map.get_value_type().is_primitive_type(),
                format!(
                    "Cannot explicitly project List or Map types, Map value {} of type {} was selected",
                    map.get_value_id(),
                    map.get_value_type()
                )
            );
            return Ok(Some(map.clone()));
        }
    } else if value_result.is_some() {
        return self.project_map(map, value_result);
    } else if self.selected.contains(&map.get_key_id()) {
        return Ok(Some(map.clone()));
    }
    
    return Ok(None);
}
``` 

Please note that this translation assumes the existence of certain methods like "get_value_id", "get_value_type" and "is_struct_type" in Rust based on the Java version provided. You might need to adjust some parts based on your actual Rust structure and methods.</translated function>Here is your translated function:

```rust
fn map(
        &mut self,
        map: &MapType,
        _ignored: Option<Type>,
        value_result: Option<Type>,
    ) -> Result<Option<Type>> {
    if self.selected.contains(&map.get_value_id()) {
        if self.select_full_types {
            return Ok(Some(map.clone()));
        } else if map.get_value_type().is_struct_type() {
            let projected_struct = self.project_selected_struct(value_result.unwrap());
            match projected_struct {
                Ok(struct_type) => return self.project_map(map, Some(struct_type)),
                Err(e) => return Err(e),
            }
        } else {
            ensure_data_valid(
                map.get_value_type().is_primitive_type(),
                format!(
                    "Cannot explicitly project List or Map types, Map value {} of type {} was selected",
                    map.get_value_id(),
                    map.get_value_type()
                )
            );
            return Ok(Some(map.clone()));
        }
    } else if value_result.is_some() {
        return self.project_map(map, value_result);
    } else if self.selected.contains(&map.get_key_id()) {
        return Ok(Some(map.clone()));
    }
    
    return Ok(None);
}
``` 

Please note that this translation assumes the existence of certain methods like "get_value_id", "get_value_type" and "is_struct_type" in Rust based on the Java version provided. You might need to adjust some parts based on your actual Rust structure and methods.
<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int KEY_PAIR_GENERATE(RAND RNG,byte[] S,byte[] W)
	{
		BIG r,s;
		ECP G,WP;
		int res=0;
	//	byte[] T=new byte[EFS];

		G=ECP.generator();

		r=new BIG(ROM.CURVE_Order);

		if (RNG==null)
		{
			s=BIG.fromBytes(S);
			s.mod(r);
		}
		else
		{
			s=BIG.randomnum(r,RNG);
		}

		//if (ROM.AES_S>0)
		//{
		//	s.mod2m(2*ROM.AES_S);
		//}
		s.toBytes(S);

		WP=G.mul(s);
		WP.toBytes(W,false);  // To use point compression on public keys, change to true 

		return res;
	}
</java function>
<rust function signature>
pub fn key_pair_generate(mut rng: &mut RAND, s: &mut [u8], w: &mut [u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use super::big;
use super::big::Big;
use super::ecp::ECP;
use super::ecp4::ECP4;
use super::pair192;
use super::rom;
use crate::rand::RAND;
use crate::sha3::SHA3;
use crate::sha3::SHAKE256;
use std::str;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn key_pair_generate(mut rng: &mut RAND, s: &mut [u8], w: &mut [u8]) -> isize {
    let q = Big::new_ints(&rom::CURVE_ORDER);
    let g = ECP4::generator();
    let mut sc = Big::randomnum(&q, &mut rng);
    sc.to_bytes(s);
    pair192::g2mul(&g, &mut sc).to_bytes(w);
    BLS_OK
}
</function>
<translated function>
<rust function>
pub fn key_pair_generate(rng: &mut Option<&mut RAND>, s: &mut [u8], w: &mut [u8]) -> isize {
    let mut G;
    let mut WP;

    let mut r = BIG::new_ints(&rom::CURVE_ORDER);

    if let Some(rng) = rng {
        let mut s = BIG::randomnum(&r, rng);
        s.tobytes(s);
    } else {
        let mut s = BIG::frombytes(s);
        s.rmod(&r);
        s.tobytes(s);
    }

    WP = G.mul(&s);
    WP.tobytes(w, false);

    return 0;
}
</rust function></translated function><rust function>
pub fn key_pair_generate(rng: &mut Option<&mut RAND>, s: &mut [u8], w: &mut [u8]) -> isize {
    let mut G;
    let mut WP;

    let mut r = BIG::new_ints(&rom::CURVE_ORDER);

    if let Some(rng) = rng {
        let mut s = BIG::randomnum(&r, rng);
        s.tobytes(s);
    } else {
        let mut s = BIG::frombytes(s);
        s.rmod(&r);
        s.tobytes(s);
    }

    WP = G.mul(&s);
    WP.tobytes(w, false);

    return 0;
}
</rust function>
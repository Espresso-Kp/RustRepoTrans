<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int GET_G1_MULTIPLE(RAND rng, int type,byte[] X,byte[] G,byte[] W)
	{
		BIG x;
		BIG r=new BIG(ROM.CURVE_Order);
		if (rng!=null)
		{
			x=BIG.randomnum(r,rng);
			//if (ROM.AES_S>0)
			//{
			//	x.mod2m(2*ROM.AES_S);
			//}
			x.toBytes(X);
		}
		else
		{
			x=BIG.fromBytes(X);
		}
		ECP P;
		if (type==0)
		{
			P=ECP.fromBytes(G);
			if (P.is_infinity()) return INVALID_POINT;
		}
		else
			P=ECP.mapit(G);

		PAIR.G1mul(P,x).toBytes(W,false);
		return 0;
	}
</java function>
<rust function signature>
pub fn get_g1_multiple(
    rng: Option<&mut RAND>,
    typ: usize,
    x: &mut [u8],
    g: &[u8],
    w: &mut [u8],
) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp2::ECP2;
use super::fp12::FP12;
use super::fp4::FP4;
use super::pair;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn get_g1_multiple(
    rng: Option<&mut RAND>,
    typ: usize,
    x: &mut [u8],
    g: &[u8],
    w: &mut [u8],
) -> isize {
    let mut sx: Big;
    let r = Big::new_ints(&rom::CURVE_ORDER);

    if let Some(rd) = rng {
        sx = Big::randomnum(&r, rd);
        sx.to_bytes(x);
    } else {
        sx = Big::from_bytes(x);
    }
    let P: ECP;

    if typ == 0 {
        P = ECP::from_bytes(g);
        if P.is_infinity() {
            return INVALID_POINT;
        }
    } else {
        P = ECP::mapit(g)
    }

    pair::g1mul(&P, &mut sx).to_bytes(w, false);
    return 0;
}
</function>
<translated function>
<rust function>
pub fn get_g1_multiple(
    rng: Option<&mut RAND>,
    typ: usize,
    x: &mut [u8],
    g: &[u8],
    w: &mut [u8],
) -> isize {
    let mut r = Big::new_ints(&rom::CURVE_ORDER);
    let mut big_x;
    match rng {
        Some(rng) => {
            big_x = Big::randomnum(&r, rng);
            big_x.to_bytes(x);
        }
        None => {
            big_x = Big::frombytes(x);
        }
    }
    let mut p;
    if typ == 0 {
        p = ECP::frombytes(&g);
        if p.is_infinity() {
            return INVALID_POINT;
        }
    } else {
        p = ECP::mapit(&g);
    }
    pair::g1mul(&p, &big_x).to_bytes(w, false);
    0
}
</rust function></translated function><rust function>
pub fn get_g1_multiple(
    rng: Option<&mut RAND>,
    typ: usize,
    x: &mut [u8],
    g: &[u8],
    w: &mut [u8],
) -> isize {
    let mut r = Big::new_ints(&rom::CURVE_ORDER);
    let mut big_x;
    match rng {
        Some(rng) => {
            big_x = Big::randomnum(&r, rng);
            big_x.to_bytes(x);
        }
        None => {
            big_x = Big::frombytes(x);
        }
    }
    let mut p;
    if typ == 0 {
        p = ECP::frombytes(&g);
        if p.is_infinity() {
            return INVALID_POINT;
        }
    } else {
        p = ECP::mapit(&g);
    }
    pair::g1mul(&p, &big_x).to_bytes(w, false);
    0
}
</rust function>
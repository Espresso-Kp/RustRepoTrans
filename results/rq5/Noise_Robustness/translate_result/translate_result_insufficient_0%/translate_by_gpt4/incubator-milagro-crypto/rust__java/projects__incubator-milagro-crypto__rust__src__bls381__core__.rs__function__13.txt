<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public void toBytes(byte[] b)
	{
		byte[] t=new byte[BIG.MODBYTES];
		ECP2 W=new ECP2(this);
		W.affine();
		W.x.getA().toBytes(t);
		for (int i=0;i<BIG.MODBYTES;i++)
			b[i]=t[i];
		W.x.getB().toBytes(t);
		for (int i=0;i<BIG.MODBYTES;i++)
			b[i+BIG.MODBYTES]=t[i];

		W.y.getA().toBytes(t);
		for (int i=0;i<BIG.MODBYTES;i++)
			b[i+2*BIG.MODBYTES]=t[i];
		W.y.getB().toBytes(t);
		for (int i=0;i<BIG.MODBYTES;i++)
			b[i+3*BIG.MODBYTES]=t[i];
	}
</java function>
<rust function signature>
pub fn serialize_uncompressed_g2(g2: &ECP2) -> [u8; G2_BYTES * 2] 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use super::super::big::Big;
use super::super::ecp::ECP;
use super::super::ecp2::ECP2;
use super::super::fp::FP;
use super::super::fp2::FP2;
use super::super::hash_to_curve::*;
use super::super::pair;
use super::super::rom::*;
use super::iso::{iso11_to_ecp, iso3_to_ecp2};
use crate::errors::AmclError;
use crate::hash256::HASH256;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn serialize_uncompressed_g2(g2: &ECP2) -> [u8; G2_BYTES * 2] {
    let mut result = [0; G2_BYTES * 2];

    // Check point at inifinity
    if g2.is_infinity() {
        result[0] += INFINITY_FLAG;
        return result;
    }

    // Convert to bytes
    // Note: Zcash uses (x_im, x_re), (y_im, y_re)
    let x = g2.getx();
    x.getb().to_bytes(&mut result[0..MODBYTES]);
    x.geta().to_bytes(&mut result[MODBYTES..(MODBYTES * 2)]);
    let x = g2.gety();
    x.getb()
        .to_bytes(&mut result[(MODBYTES * 2)..(MODBYTES * 3)]);
    x.geta().to_bytes(&mut result[(MODBYTES * 3)..]);

    result
}
</function>
<translated function>
Here is your translated function in Rust:

```rust
pub fn serialize_uncompressed_g2(g2: &ECP2) -> [u8; G2_BYTES * 2] {
    let mut w = ECP2::new();
    w.copy(&g2);
    w.tps();
    let mut b: [u8; G2_BYTES * 2] = [0; G2_BYTES * 2];
    let mut t = [0; MODBYTES];

    w.getpx().geta().to_bytes(&mut t);
    for i in 0..MODBYTES {
        b[i] = t[i];
    }

    w.getpx().getb().to_bytes(&mut t);
    for i in 0..MODBYTES {
        b[i + MODBYTES] = t[i];
    }

    w.getpy().geta().to_bytes(&mut t);
    for i in 0..MODBYTES {
        b[i + 2 * MODBYTES] = t[i];
    }

    w.getpy().getb().to_bytes(&mut t);
    for i in 0..MODBYTES {
        b[i + 3 * MODBYTES] = t[i];
    }

    return b;
}
```

A few things to note:

1. I replaced `affine()` with `tps()`, which also converts to affine coordinates for ECP2 in Rust.

2. In the Rust version, the `G2_BYTES` constant from the Rust signature corresponds to `BIG.MODBYTES` in Java. 

3. The `getA()` and `getB()` methods correspond to `geta()` and `getb()` in Rust, respectively.

4. As in Java, the bytes are written consecutively into the target byte array `b`.

5. The byte array `b` is returned as the result of the function.

Please remember to replace `MODBYTES` and `G2_BYTES` with the correct constants in your context.</translated function>Here is your translated function in Rust:

```rust
pub fn serialize_uncompressed_g2(g2: &ECP2) -> [u8; G2_BYTES * 2] {
    let mut w = ECP2::new();
    w.copy(&g2);
    w.tps();
    let mut b: [u8; G2_BYTES * 2] = [0; G2_BYTES * 2];
    let mut t = [0; MODBYTES];

    w.getpx().geta().to_bytes(&mut t);
    for i in 0..MODBYTES {
        b[i] = t[i];
    }

    w.getpx().getb().to_bytes(&mut t);
    for i in 0..MODBYTES {
        b[i + MODBYTES] = t[i];
    }

    w.getpy().geta().to_bytes(&mut t);
    for i in 0..MODBYTES {
        b[i + 2 * MODBYTES] = t[i];
    }

    w.getpy().getb().to_bytes(&mut t);
    for i in 0..MODBYTES {
        b[i + 3 * MODBYTES] = t[i];
    }

    return b;
}
```

A few things to note:

1. I replaced `affine()` with `tps()`, which also converts to affine coordinates for ECP2 in Rust.

2. In the Rust version, the `G2_BYTES` constant from the Rust signature corresponds to `BIG.MODBYTES` in Java. 

3. The `getA()` and `getB()` methods correspond to `geta()` and `getb()` in Rust, respectively.

4. As in Java, the bytes are written consecutively into the target byte array `b`.

5. The byte array `b` is returned as the result of the function.

Please remember to replace `MODBYTES` and `G2_BYTES` with the correct constants in your context.
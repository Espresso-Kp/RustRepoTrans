<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int CLIENT_KEY(int sha,byte[] G1,byte[] G2,int pin,byte[] R,byte[] X,byte[] H,byte[] wCID,byte[] CK)
	{
		byte[] t;

		FP12 g1=FP12.fromBytes(G1);
		FP12 g2=FP12.fromBytes(G2);
		BIG z=BIG.fromBytes(R);
		BIG x=BIG.fromBytes(X);
		BIG h=BIG.fromBytes(H);

		ECP W=ECP.fromBytes(wCID);
		if (W.is_infinity()) return INVALID_POINT; 

		W=PAIR.G1mul(W,x);

//		FP2 f=new FP2(new BIG(ROM.Fra),new BIG(ROM.Frb));
		BIG r=new BIG(ROM.CURVE_Order);
//		BIG q=new BIG(ROM.Modulus);

		z.add(h);	//new
		z.mod(r);

		g2.pinpow(pin,PBLEN);
		g1.mul(g2);

		FP4 c=g1.compow(z,r);
/*
		BIG m=new BIG(q);
		m.mod(r);

		BIG a=new BIG(z);
		a.mod(m);

		BIG b=new BIG(z);
		b.div(m);


		FP4 c=g1.trace();
		g2.copy(g1);
		g2.frob(f);
		FP4 cp=g2.trace();
		g1.conj();
		g2.mul(g1);
		FP4 cpm1=g2.trace();
		g2.mul(g1);
		FP4 cpm2=g2.trace();

		c=c.xtr_pow2(cp,cpm1,cpm2,a,b);
*/
		t=mpin_hash(sha,c,W);

		for (int i=0;i<ECP.AESKEY;i++) CK[i]=t[i];

		return 0;
	}
</java function>
<rust function signature>
pub fn client_key(
    sha: usize,
    g1: &[u8],
    g2: &[u8],
    pin: usize,
    r: &[u8],
    x: &[u8],
    h: &[u8],
    wcid: &[u8],
    ck: &mut [u8],
) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp2::ECP2;
use super::fp12::FP12;
use super::fp4::FP4;
use super::pair;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn client_key(
    sha: usize,
    g1: &[u8],
    g2: &[u8],
    pin: usize,
    r: &[u8],
    x: &[u8],
    h: &[u8],
    wcid: &[u8],
    ck: &mut [u8],
) -> isize {
    let mut g1 = FP12::from_bytes(&g1);
    let mut g2 = FP12::from_bytes(&g2);
    let mut z = Big::from_bytes(&r);
    let mut x = Big::from_bytes(&x);
    let h = Big::from_bytes(&h);

    let mut W = ECP::from_bytes(&wcid);
    if W.is_infinity() {
        return INVALID_POINT;
    }

    W = pair::g1mul(&W, &mut x);

    let r = Big::new_ints(&rom::CURVE_ORDER);

    z.add(&h); //new
    z.rmod(&r);

    g2.pinpow(pin as i32, PBLEN);
    g1.mul(&g2);

    let mut c = g1.compow(&z, &r);

    hash(sha, &mut c, &mut W, ck);

    return 0;
}
</function>
<translated function>
Here is the converted Rust function:

```rust
pub fn client_key(
    sha: usize,
    g1: &[u8],
    g2: &[u8],
    pin: usize,
    r: &[u8],
    x: &[u8],
    h: &[u8],
    wcid: &[u8],
    ck: &mut [u8],
) -> isize {
    let mut _t: Vec<u8>;

    let _g1=FP12::frombytes(g1);
    let mut _g2=FP12::frombytes(g2);
    let mut _z=Big::frombytes(r);
    let _x=Big::frombytes(x);
    let _h=Big::frombytes(h);

    let mut _w=ECP::frombytes(wcid);
    if _w.is_infinity() {
        return INVALID_POINT;
    }

    _w=pair::g1mul(&_w,&_x);

//		let f=FP2(Big(ROM.Fra),Big(ROM.Frb));
    let _r=Big::new_ints(&rom::CURVE_ORDER);
//		let q=Big::new_ints(&ROM.Modulus);

    _z.add(&_h);	//new
    _z.rmod(&_r);

    _g2.pinpow(pin,PBLEN);
    _g1.mul(&_g2);

    let _c = _g1.compow(_z, _r);
/*
    BIG m=q;
    m.rmod(&r);

    BIG a=z;
    a.rmod(&m);

    BIG b=z;
    b.div(&m);


    FP4 c=g1.trace();
    g2.copy(&g1);
    g2.frob(&f);
    FP4 cp=g2.trace();
    g1.conj();
    g2.mul(&g1);
    FP4 cpm1=g2.trace();
    g2.mul(&g1);
    FP4 cpm2=g2.trace();

    c=c.xtr_pow2(cp,cpm1,cpm2,a,b);
*/
    _t=mpin_hash(sha,&_c,&_w);

    for i in 0..ECP::AESKEY {
        ck[i]=_t[i];
    }

    return 0;
}
```

Please note, I have added the underscore "_" to all variables to follow Rust naming conventions, which prefers snake_case. Also, it is important to understand that Java and Rust have different low-level data handling, so it's recommended to test this function thoroughly.</translated function>Here is the converted Rust function:

```rust
pub fn client_key(
    sha: usize,
    g1: &[u8],
    g2: &[u8],
    pin: usize,
    r: &[u8],
    x: &[u8],
    h: &[u8],
    wcid: &[u8],
    ck: &mut [u8],
) -> isize {
    let mut _t: Vec<u8>;

    let _g1=FP12::frombytes(g1);
    let mut _g2=FP12::frombytes(g2);
    let mut _z=Big::frombytes(r);
    let _x=Big::frombytes(x);
    let _h=Big::frombytes(h);

    let mut _w=ECP::frombytes(wcid);
    if _w.is_infinity() {
        return INVALID_POINT;
    }

    _w=pair::g1mul(&_w,&_x);

//		let f=FP2(Big(ROM.Fra),Big(ROM.Frb));
    let _r=Big::new_ints(&rom::CURVE_ORDER);
//		let q=Big::new_ints(&ROM.Modulus);

    _z.add(&_h);	//new
    _z.rmod(&_r);

    _g2.pinpow(pin,PBLEN);
    _g1.mul(&_g2);

    let _c = _g1.compow(_z, _r);
/*
    BIG m=q;
    m.rmod(&r);

    BIG a=z;
    a.rmod(&m);

    BIG b=z;
    b.div(&m);


    FP4 c=g1.trace();
    g2.copy(&g1);
    g2.frob(&f);
    FP4 cp=g2.trace();
    g1.conj();
    g2.mul(&g1);
    FP4 cpm1=g2.trace();
    g2.mul(&g1);
    FP4 cpm2=g2.trace();

    c=c.xtr_pow2(cp,cpm1,cpm2,a,b);
*/
    _t=mpin_hash(sha,&_c,&_w);

    for i in 0..ECP::AESKEY {
        ck[i]=_t[i];
    }

    return 0;
}
```

Please note, I have added the underscore "_" to all variables to follow Rust naming conventions, which prefers snake_case. Also, it is important to understand that Java and Rust have different low-level data handling, so it's recommended to test this function thoroughly.
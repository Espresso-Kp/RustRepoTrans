<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int CLIENT_2(byte[] X,byte[] Y,byte[] SEC)
	{
		BIG r=new BIG(ROM.CURVE_Order);
		ECP P=ECP.fromBytes(SEC);
		if (P.is_infinity()) return INVALID_POINT;

		BIG px=BIG.fromBytes(X);
		BIG py=BIG.fromBytes(Y);
		px.add(py);
		px.mod(r);
	//	px.rsub(r);

		P=PAIR256.G1mul(P,px);
		P.neg();
		P.toBytes(SEC,false);
		return 0;
	}
</java function>
<rust function signature>
pub fn client_2(x: &[u8], y: &[u8], sec: &mut [u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp8::ECP8;
use super::fp16::FP16;
use super::fp48::FP48;
use super::pair256;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn client_2(x: &[u8], y: &[u8], sec: &mut [u8]) -> isize {
    let mut r = Big::new_ints(&rom::CURVE_ORDER);
    let mut P = ECP::from_bytes(sec);
    if P.is_infinity() {
        return INVALID_POINT;
    }

    let mut px = Big::from_bytes(x);
    let py = Big::from_bytes(y);
    px.add(&py);
    px.rmod(&mut r);

    P = pair256::g1mul(&mut P, &mut px);
    P.neg();
    P.to_bytes(sec, false);

    return 0;
}
</function>
<translated function>
Your translated function in Rust language is as follows:

```rust
pub fn client_2(x: &[u8], y: &[u8], sec: &mut [u8]) -> isize {
    let r = Big::new_ints(&rom::curve_order);
    let mut p = match ECP::frombytes(&sec.to_vec()) {
        Option::Some(ecp) => ecp,
        Option::None => return INVALID_POINT,
    };

    let mut px = Big::frombytes(x);
    let py = Big::frombytes(y);
    px.add(&py);
    px.rmod(&r);

    p = pair256::g1mul(&p, &px);
    p.neg();
    p.tobytes(sec, false);
    return 0;
}
```

Please notice the naming convention differences in Rust and Java. Also the order of operations has to be maintained strictly while translating this function. Let me know, if you need any more help.</translated function>Your translated function in Rust language is as follows:

```rust
pub fn client_2(x: &[u8], y: &[u8], sec: &mut [u8]) -> isize {
    let r = Big::new_ints(&rom::curve_order);
    let mut p = match ECP::frombytes(&sec.to_vec()) {
        Option::Some(ecp) => ecp,
        Option::None => return INVALID_POINT,
    };

    let mut px = Big::frombytes(x);
    let py = Big::frombytes(y);
    px.add(&py);
    px.rmod(&r);

    p = pair256::g1mul(&p, &px);
    p.neg();
    p.tobytes(sec, false);
    return 0;
}
```

Please notice the naming convention differences in Rust and Java. Also the order of operations has to be maintained strictly while translating this function. Let me know, if you need any more help.
<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static byte[] PBKDF2(int sha,byte[] Pass,byte[] Salt,int rep,int olen)
	{
		int i,j,k,len,d,opt;
		d=olen/sha; if (olen%sha!=0) d++;
		byte[] F=new byte[sha];
		byte[] U=new byte[sha];
		byte[] S=new byte[Salt.length+4];

		byte[] K=new byte[d*sha];
		opt=0;

		for (i=1;i<=d;i++)
		{
			for (j=0;j<Salt.length;j++) S[j]=Salt[j];
			byte[] N=inttoBytes(i,4);
			for (j=0;j<4;j++) S[Salt.length+j]=N[j];

			HMAC(sha,S,Pass,F);

			for (j=0;j<sha;j++) U[j]=F[j];
			for (j=2;j<=rep;j++)
			{
				HMAC(sha,U,Pass,U);
				for (k=0;k<sha;k++) F[k]^=U[k];
			}
			for (j=0;j<sha;j++) K[opt++]=F[j];
		}
		byte[] key=new byte[olen];
		for (i=0;i<olen;i++) key[i]=K[i];
		return key;
	}
</java function>
<rust function signature>
pub fn pbkdf2(sha: usize, pass: &[u8], salt: &[u8], rep: usize, olen: usize, k: &mut [u8]) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

</rust function dependency libraries>

</message>
<function>
pub fn pbkdf2(sha: usize, pass: &[u8], salt: &[u8], rep: usize, olen: usize, k: &mut [u8]) {
    let mut d = olen / sha;
    if olen % sha != 0 {
        d += 1
    }
    let mut f: [u8; 64] = [0; 64];
    let mut u: [u8; 64] = [0; 64];
    let mut ku: [u8; 64] = [0; 64];
    let mut s: [u8; 36] = [0; 36]; // Maximum salt of 32 bytes + 4
    let mut n: [u8; 4] = [0; 4];

    let sl = salt.len();
    let mut kp = 0;
    for i in 0..d {
        for j in 0..sl {
            s[j] = salt[j]
        }
        intto_bytes(i + 1, &mut n);
        for j in 0..4 {
            s[sl + j] = n[j]
        }

        hmac(sha, &s[0..sl + 4], pass, sha, &mut f);

        for j in 0..sha {
            u[j] = f[j]
        }
        for _ in 1..rep {
            hmac(sha, &u, pass, sha, &mut ku);
            for k in 0..sha {
                u[k] = ku[k];
                f[k] ^= u[k]
            }
        }
        for j in 0..EFS {
            if kp < olen && kp < f.len() {
                k[kp] = f[j]
            }
            kp += 1
        }
    }
}
</function>
<translated function>
Here is your required Rust function implementation, actually your provided Java function uses HMAC which is not defined here and it also uses a function "inttoBytes" that needs to be implemented in Rust.

```rust
use std::cmp;

pub fn hmac(sha: usize, s: &[u8], pass: &[u8], f: &mut [u8]);
// Implementation of HMAC function is missing

pub fn int_to_bytes(i: usize, bytes_len: usize) -> Vec<u8>;
// Implementation of int_to_bytes is missing

pub fn pbkdf2(sha: usize, pass: &[u8], salt: &[u8], rep: usize, olen: usize, k: &mut [u8]) {
    let mut i: usize;
    let mut j: usize;
    let mut len: usize;
    let mut d: usize;
    let mut opt: usize = 0;

    d = olen / sha;
    if olen % sha != 0 {
        d += 1;
    }

    let mut f: Vec<u8> = vec![0;sha];
    let mut u: Vec<u8> = vec![0;sha];
    let mut s: Vec<u8> = vec![0;salt.len()+4];

    for i in 1..=d {
        for j in 0..salt.len() {
            s[j] = salt[j];
        }

        let n = int_to_bytes(i, 4);
        for j in 0..4 {
            s[salt.len() + j] = n[j];
        }

        hmac(sha, &s, pass, &mut f);

        for j in 0..sha {
            u[j] = f[j];
        }

        for _ in 2..=rep {
            hmac(sha, &u, pass, &mut u);
            for k in 0..sha {
                f[k] ^= u[k];
            }
        }

        for j in 0..sha {
            k[opt] = f[j];
            opt += 1;
        }
    }

    len = cmp::min(olen, k.len());
    for i in 0..len {
        k[i] = k[i];
    }

    // Padding the rest of the array with zeros
    for i in len..k.len() {
        k[i] = 0;
    }
}
```
Note: hmac and int_to_bytes implementation is not given here, you need to put their implementation. Also, the return type of the function is void in this translation, you need to modify the function according to your requirements if you want to return any value.</translated function>Here is your required Rust function implementation, actually your provided Java function uses HMAC which is not defined here and it also uses a function "inttoBytes" that needs to be implemented in Rust.

```rust
use std::cmp;

pub fn hmac(sha: usize, s: &[u8], pass: &[u8], f: &mut [u8]);
// Implementation of HMAC function is missing

pub fn int_to_bytes(i: usize, bytes_len: usize) -> Vec<u8>;
// Implementation of int_to_bytes is missing

pub fn pbkdf2(sha: usize, pass: &[u8], salt: &[u8], rep: usize, olen: usize, k: &mut [u8]) {
    let mut i: usize;
    let mut j: usize;
    let mut len: usize;
    let mut d: usize;
    let mut opt: usize = 0;

    d = olen / sha;
    if olen % sha != 0 {
        d += 1;
    }

    let mut f: Vec<u8> = vec![0;sha];
    let mut u: Vec<u8> = vec![0;sha];
    let mut s: Vec<u8> = vec![0;salt.len()+4];

    for i in 1..=d {
        for j in 0..salt.len() {
            s[j] = salt[j];
        }

        let n = int_to_bytes(i, 4);
        for j in 0..4 {
            s[salt.len() + j] = n[j];
        }

        hmac(sha, &s, pass, &mut f);

        for j in 0..sha {
            u[j] = f[j];
        }

        for _ in 2..=rep {
            hmac(sha, &u, pass, &mut u);
            for k in 0..sha {
                f[k] ^= u[k];
            }
        }

        for j in 0..sha {
            k[opt] = f[j];
            opt += 1;
        }
    }

    len = cmp::min(olen, k.len());
    for i in 0..len {
        k[i] = k[i];
    }

    // Padding the rest of the array with zeros
    for i in len..k.len() {
        k[i] = 0;
    }
}
```
Note: hmac and int_to_bytes implementation is not given here, you need to put their implementation. Also, the return type of the function is void in this translation, you need to modify the function according to your requirements if you want to return any value.
<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int PRECOMPUTE(byte[] TOKEN,byte[] CID,byte[] G1,byte[] G2)
	{
		ECP P,T;
		FP24 g;

		T=ECP.fromBytes(TOKEN);
		if (T.is_infinity()) return INVALID_POINT; 

		P=ECP.mapit(CID);

		ECP4 Q=ECP4.generator();

		g=PAIR192.ate(Q,T);
		g=PAIR192.fexp(g);
		g.toBytes(G1);

		g=PAIR192.ate(Q,P);
		g=PAIR192.fexp(g);
		g.toBytes(G2);

		return 0;
	}
</java function>
<rust function signature>
pub fn precompute(token: &[u8], cid: &[u8], g1: &mut [u8], g2: &mut [u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp4::ECP4;
use super::fp24::FP24;
use super::fp8::FP8;
use super::pair192;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn precompute(token: &[u8], cid: &[u8], g1: &mut [u8], g2: &mut [u8]) -> isize {
    let T = ECP::from_bytes(&token);
    if T.is_infinity() {
        return INVALID_POINT;
    }

    let P = ECP::mapit(&cid);

    let Q = ECP4::generator();

    let mut g = pair192::ate(&Q, &T);
    g = pair192::fexp(&g);
    g.to_bytes(g1);

    g = pair192::ate(&Q, &P);
    g = pair192::fexp(&g);
    g.to_bytes(g2);

    return 0;
}
</function>
<translated function>
In Rust, you'll be translating the Java function to the Rust function while adhering to the Rust function signature, and utilizing the given Rust libraries, variables, and function declarations. The Rust function would look like this:

```rust
pub fn precompute(token: &[u8], cid: &[u8], g1: &mut [u8], g2: &mut [u8]) -> isize {
    let invalid_point = -1;
    let mut p: ECP;
    let mut g: FP24;

    let t = ECP::frombytes(&mut token.to_vec());
    if t.is_infinity() { 
        return invalid_point;
    }

    p = ECP::mapit(&cid);

    let q = ECP4::generator();

    g = pair192::ate(&q, &t);
    g = pair192::fexp(&g);
    g.tobytes(g1);

    g = pair192::ate(&q, &p);
    g = pair192::fexp(&g);
    g.tobytes(g2);

    return 0;
}
```
Make sure to include the appropriate Amsterdam Pairing library use statement. Here I'm assuming pair192 has `ate` and `fexp` public methods that receive references as parameters.

Also, please note that in Rust, by convention, we often use `Result` type for returning errors from functions, instead of returning special values like `-1`. If this function would be used in production code, consider refactoring it to use `Result`.</translated function>In Rust, you'll be translating the Java function to the Rust function while adhering to the Rust function signature, and utilizing the given Rust libraries, variables, and function declarations. The Rust function would look like this:

```rust
pub fn precompute(token: &[u8], cid: &[u8], g1: &mut [u8], g2: &mut [u8]) -> isize {
    let invalid_point = -1;
    let mut p: ECP;
    let mut g: FP24;

    let t = ECP::frombytes(&mut token.to_vec());
    if t.is_infinity() { 
        return invalid_point;
    }

    p = ECP::mapit(&cid);

    let q = ECP4::generator();

    g = pair192::ate(&q, &t);
    g = pair192::fexp(&g);
    g.tobytes(g1);

    g = pair192::ate(&q, &p);
    g = pair192::fexp(&g);
    g.tobytes(g2);

    return 0;
}
```
Make sure to include the appropriate Amsterdam Pairing library use statement. Here I'm assuming pair192 has `ate` and `fexp` public methods that receive references as parameters.

Also, please note that in Rust, by convention, we often use `Result` type for returning errors from functions, instead of returning special values like `-1`. If this function would be used in production code, consider refactoring it to use `Result`.
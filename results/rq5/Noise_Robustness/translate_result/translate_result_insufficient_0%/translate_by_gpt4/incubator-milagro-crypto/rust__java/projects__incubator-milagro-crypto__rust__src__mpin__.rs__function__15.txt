<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int EXTRACT_PIN(int sha,byte[] CID,int pin,byte[] TOKEN)
	{
		ECP P=ECP.fromBytes(TOKEN);
		if (P.is_infinity()) return INVALID_POINT;
		byte[] h=hashit(sha,0,CID,EFS);
		ECP R=ECP.mapit(h);


		pin%=MAXPIN;

		R=R.pinmul(pin,PBLEN);
		P.sub(R); //P.affine();

		P.toBytes(TOKEN,false);

		return 0;
	}
</java function>
<rust function signature>
pub fn extract_pin(sha: usize, cid: &[u8], pin: i32, token: &mut [u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp2::ECP2;
use super::fp12::FP12;
use super::fp4::FP4;
use super::pair;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn extract_pin(sha: usize, cid: &[u8], pin: i32, token: &mut [u8]) -> isize {
    return extract_factor(sha, cid, pin % MAXPIN, PBLEN, token);
}
</function>
<translated function>
Your requested translation of the Java function to Rust language is as follows:

<rust function>
pub fn extract_pin(sha: usize, cid: &[u8], mut pin: i32, token: &mut [u8]) -> isize {
    let mut p = ECP::frombytes(&token).unwrap();
    
    if p.is_infinity() { 
        return INVALID_POINT; 
    }
    
    let hash = hashit(sha, 0, cid, EFS);
    let mut r = ECP::mapit(&hash);
    
    pin %= MAXPIN;
    
    r = r.pinmul(pin as i32, PBLEN);
    p.sub(&r);
    
    p.tobytes(token, false);

    return 0;
}
</rust function>

Please replace the functions and constants hashit, EFS, INVALID_POINT, MAXPIN and PBLEN with the actual implementations or values in your program.

Be aware that error handling is not included within this function. If ECP::frombytes() or ECP::mapit() returns an Err variant, the program will likely panic. Depending on your application, you may want to add error handling steps to handle such situations gracefully.</translated function>Your requested translation of the Java function to Rust language is as follows:

<rust function>
pub fn extract_pin(sha: usize, cid: &[u8], mut pin: i32, token: &mut [u8]) -> isize {
    let mut p = ECP::frombytes(&token).unwrap();
    
    if p.is_infinity() { 
        return INVALID_POINT; 
    }
    
    let hash = hashit(sha, 0, cid, EFS);
    let mut r = ECP::mapit(&hash);
    
    pin %= MAXPIN;
    
    r = r.pinmul(pin as i32, PBLEN);
    p.sub(&r);
    
    p.tobytes(token, false);

    return 0;
}
</rust function>

Please replace the functions and constants hashit, EFS, INVALID_POINT, MAXPIN and PBLEN with the actual implementations or values in your program.

Be aware that error handling is not included within this function. If ECP::frombytes() or ECP::mapit() returns an Err variant, the program will likely panic. Depending on your application, you may want to add error handling steps to handle such situations gracefully.
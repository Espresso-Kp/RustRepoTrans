<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
void HASH384_init(hash384 *sh)
{
    /* re-initialise */
    for (int i=0; i<80; i++) sh->w[i]=0;
    sh->length[0]=sh->length[1]=0;
    sh->h[0]=H8_512;
    sh->h[1]=H9_512;
    sh->h[2]=HA_512;
    sh->h[3]=HB_512;
    sh->h[4]=HC_512;
    sh->h[5]=HD_512;
    sh->h[6]=HE_512;
    sh->h[7]=HF_512;


}
</c function>
<rust function signature>
pub fn init(&mut self) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use super::*;

</rust function dependency libraries>

</message>
<function>
pub fn init(&mut self) {
        // initialise
        for i in 0..64 {
            self.w[i] = 0
        }
        self.length[0] = 0;
        self.length[1] = 0;
        self.h[0] = HASH384_H0;
        self.h[1] = HASH384_H1;
        self.h[2] = HASH384_H2;
        self.h[3] = HASH384_H3;
        self.h[4] = HASH384_H4;
        self.h[5] = HASH384_H5;
        self.h[6] = HASH384_H6;
        self.h[7] = HASH384_H7;
    }
</function>
<translated function>
Assuming the `hash384` struct and the constants H8_512 to HF_512 are defined in the super module, the `HASH384_init` function would translate to the following in Rust.

<rust function>
pub fn init(&mut self) {
    for i in 0..80 {
        self.w[i] = 0;
    }
    self.length[0] = 0;
    self.length[1] = 0;
    self.h[0] = H8_512;
    self.h[1] = H9_512;
    self.h[2] = HA_512;
    self.h[3] = HB_512;
    self.h[4] = HC_512;
    self.h[5] = HD_512;
    self.h[6] = HE_512;
    self.h[7] = HF_512;
}
</rust function></translated function>Assuming the `hash384` struct and the constants H8_512 to HF_512 are defined in the super module, the `HASH384_init` function would translate to the following in Rust.

<rust function>
pub fn init(&mut self) {
    for i in 0..80 {
        self.w[i] = 0;
    }
    self.length[0] = 0;
    self.length[1] = 0;
    self.h[0] = H8_512;
    self.h[1] = H9_512;
    self.h[2] = HA_512;
    self.h[3] = HB_512;
    self.h[4] = HC_512;
    self.h[5] = HD_512;
    self.h[6] = HE_512;
    self.h[7] = HF_512;
}
</rust function>
<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def __init__(self, gossip_size: int, history_size: int) -> None:
        self.gossip_size = gossip_size

        # (seqno, from_id) -> rpc message
        self.msgs = dict()

        self.iwant_counts = dict()
        
        # max length of history_size. each item is a list of CacheEntry.
        # messages lost upon shift().
        self.history = [[] for _ in range(history_size)]
</python function>
<rust function signature>
pub(crate) fn new(gossip: usize, history_capacity: usize) -> Self 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::topic::TopicHash;
use crate::types::{MessageId, RawMessage};
use libp2p_identity::PeerId;
use std::collections::hash_map::Entry;
use std::fmt::Debug;
use std::{
    collections::{HashMap, HashSet},
    fmt,
};
use super::*;
use crate::IdentTopic as Topic;

</rust function dependency libraries>

</message>
<function>
pub(crate) fn new(gossip: usize, history_capacity: usize) -> Self {
        MessageCache {
            gossip,
            msgs: HashMap::default(),
            iwant_counts: HashMap::default(),
            history: vec![Vec::new(); history_capacity],
        }
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
impl Self {
    pub(crate) fn new(gossip_size: usize, history_size: usize) -> Self {
        Self {
            gossip_size,
            msgs: HashMap::new(),
            iwant_counts: HashMap::new(),
            history: vec![Vec::new(); history_size],
        }
    }
}
```
Note that I assumed `Self` is the type being implemented, and `new` is the constructor function. I also assumed that `gossip_size` and `history_size` are `usize` values, as they are in the Python code. 

I used `HashMap` and `Vec` from the Rust standard library to implement the `msgs` and `iwant_counts` dictionaries, and the `history` list of lists, respectively. 

Also, I used `vec![Vec::new(); history_size]` to create a vector of `history_size` empty vectors, which is equivalent to the Python code `[] for _ in range(history_size)`.</translated function>Here is the translated Rust function:
```rust
impl Self {
    pub(crate) fn new(gossip_size: usize, history_size: usize) -> Self {
        Self {
            gossip_size,
            msgs: HashMap::new(),
            iwant_counts: HashMap::new(),
            history: vec![Vec::new(); history_size],
        }
    }
}
```
Note that I assumed `Self` is the type being implemented, and `new` is the constructor function. I also assumed that `gossip_size` and `history_size` are `usize` values, as they are in the Python code. 

I used `HashMap` and `Vec` from the Rust standard library to implement the `msgs` and `iwant_counts` dictionaries, and the `history` list of lists, respectively. 

Also, I used `vec![Vec::new(); history_size]` to create a vector of `history_size` empty vectors, which is equivalent to the Python code `[] for _ in range(history_size)`.
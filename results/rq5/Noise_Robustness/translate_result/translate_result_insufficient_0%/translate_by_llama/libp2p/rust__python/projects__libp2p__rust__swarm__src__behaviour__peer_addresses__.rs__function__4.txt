<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def addrs(self, peer_id: ID) -> List[Multiaddr]:
        """
        :param peer_id: peer ID to get addrs for
        :return: list of addrs
        :raise PeerStoreError: if peer ID not found
        """
        if peer_id in self.peer_data_map:
            return self.peer_data_map[peer_id].get_addrs()
        raise PeerStoreError("peer ID not found")
</python function>
<rust function signature>
pub fn get(&mut self, peer: &PeerId) -> impl Iterator<Item = Multiaddr> + '_ 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::behaviour::FromSwarm;
use crate::{DialError, DialFailure, NewExternalAddrOfPeer};
use libp2p_core::Multiaddr;
use libp2p_identity::PeerId;
use lru::LruCache;
use std::num::NonZeroUsize;
use super::*;
use std::io;
use crate::ConnectionId;
use libp2p_core::{
        multiaddr::Protocol,
        transport::{memory::MemoryTransportError, TransportError},
    };
use once_cell::sync::Lazy;

</rust function dependency libraries>

</message>
<function>
pub fn get(&mut self, peer: &PeerId) -> impl Iterator<Item = Multiaddr> + '_ {
        self.0
            .get(peer)
            .into_iter()
            .flat_map(|c| c.iter().map(|(m, ())| m))
            .cloned()
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
impl Behaviour {
    pub fn get(&mut self, peer: &PeerId) -> impl Iterator<Item = Multiaddr> + '_ {
        if let Some(peer_data) = self.peer_data_map.get(peer) {
            peer_data.get_addrs()
        } else {
            panic!("peer ID not found");
            // or return an empty iterator, depending on the desired behavior
            // return std::iter::empty::<Multiaddr>();
        }
    }
}
```
Note that I've assumed that `Behaviour` is the type that `self` is an instance of, and that `peer_data_map` is a field of `Behaviour` that maps `PeerId` to some type that has a `get_addrs` method. If this is not the case, please let me know and I'll adjust the code accordingly.

Also, I've used `panic!` to raise an error when the peer ID is not found, but you may want to return an empty iterator or use a different error handling mechanism depending on your requirements.</translated function>Here is the translated Rust function:
```rust
impl Behaviour {
    pub fn get(&mut self, peer: &PeerId) -> impl Iterator<Item = Multiaddr> + '_ {
        if let Some(peer_data) = self.peer_data_map.get(peer) {
            peer_data.get_addrs()
        } else {
            panic!("peer ID not found");
            // or return an empty iterator, depending on the desired behavior
            // return std::iter::empty::<Multiaddr>();
        }
    }
}
```
Note that I've assumed that `Behaviour` is the type that `self` is an instance of, and that `peer_data_map` is a field of `Behaviour` that maps `PeerId` to some type that has a `get_addrs` method. If this is not the case, please let me know and I'll adjust the code accordingly.

Also, I've used `panic!` to raise an error when the peer ID is not found, but you may want to return an empty iterator or use a different error handling mechanism depending on your requirements.
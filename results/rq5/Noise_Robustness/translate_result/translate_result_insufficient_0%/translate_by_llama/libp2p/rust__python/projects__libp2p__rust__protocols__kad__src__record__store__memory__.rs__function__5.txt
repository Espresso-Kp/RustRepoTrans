<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def get(self, peer_id: ID, key: str) -> Any:
        """
        :param peer_id: peer ID to get peer data for
        :param key: the key to search value for
        :return: value corresponding to the key
        :raise PeerStoreError: if peer ID or value not found
        """
        if peer_id in self.peer_data_map:
            try:
                val = self.peer_data_map[peer_id].get_metadata(key)
            except PeerDataError as error:
                raise PeerStoreError() from error
            return val
        raise PeerStoreError("peer ID not found")
</python function>
<rust function signature>
fn get(&self, k: &Key) -> Option<Cow<'_, Record>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use super::*;
use crate::kbucket;
use smallvec::SmallVec;
use std::collections::{hash_map, hash_set, HashMap, HashSet};
use std::iter;
use super::*;
use crate::SHA_256_MH;
use quickcheck::*;
use rand::Rng;

</rust function dependency libraries>

</message>
<function>
fn get(&self, k: &Key) -> Option<Cow<'_, Record>> {
        self.records.get(k).map(Cow::Borrowed)
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
fn get(&self, peer_id: &Key, key: &str) -> Option<Cow<'_, Record>> {
    if self.peer_data_map.contains_key(peer_id) {
        match self.peer_data_map.get(peer_id) {
            Some(peer_data) => {
                match peer_data.get_metadata(key) {
                    Ok(val) => Some(Cow::Borrowed(val)),
                    Err(error) => {
                        panic!("PeerDataError: {}", error);
                        // or return None, depending on the desired behavior
                    }
                }
            }
            None => None,
        }
    } else {
        None
    }
}
```
Note that I've made the following assumptions:

* `Key` is a type that implements `Eq` and `Hash`, and is used as a key in the `HashMap`.
* `Record` is a type that can be borrowed and is used as the value in the `HashMap`.
* `Cow` is used to represent a borrowed or owned `Record`.
* `PeerDataError` is a type that implements `std::error::Error` and is used to represent errors that occur when getting metadata.
* `PeerStoreError` is a type that implements `std::error::Error` and is used to represent errors that occur when getting peer data.

Also, I've replaced the `raise` statement with a `panic!` macro, as Rust does not have a direct equivalent to Python's `raise` statement. If you want to return an error instead, you can use the `</translated function>Here is the translated Rust function:
```rust
fn get(&self, peer_id: &Key, key: &str) -> Option<Cow<'_, Record>> {
    if self.peer_data_map.contains_key(peer_id) {
        match self.peer_data_map.get(peer_id) {
            Some(peer_data) => {
                match peer_data.get_metadata(key) {
                    Ok(val) => Some(Cow::Borrowed(val)),
                    Err(error) => {
                        panic!("PeerDataError: {}", error);
                        // or return None, depending on the desired behavior
                    }
                }
            }
            None => None,
        }
    } else {
        None
    }
}
```
Note that I've made the following assumptions:

* `Key` is a type that implements `Eq` and `Hash`, and is used as a key in the `HashMap`.
* `Record` is a type that can be borrowed and is used as the value in the `HashMap`.
* `Cow` is used to represent a borrowed or owned `Record`.
* `PeerDataError` is a type that implements `std::error::Error` and is used to represent errors that occur when getting metadata.
* `PeerStoreError` is a type that implements `std::error::Error` and is used to represent errors that occur when getting peer data.

Also, I've replaced the `raise` statement with a `panic!` macro, as Rust does not have a direct equivalent to Python's `raise` statement. If you want to return an error instead, you can use the `
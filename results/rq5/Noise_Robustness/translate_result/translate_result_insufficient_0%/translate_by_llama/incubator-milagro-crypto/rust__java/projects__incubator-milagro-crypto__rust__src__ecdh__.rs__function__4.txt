<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static byte[] KDF2(int sha,byte[] Z,byte[] P,int olen)
	{
/* NOTE: the parameter olen is the length of the output k in bytes */
		int hlen=sha;
		byte[] K=new byte[olen];
		byte[] B;
		int counter,cthreshold,k=0;
    
		for (int i=0;i<K.length;i++) K[i]=0;

		cthreshold=olen/hlen; if (olen%hlen!=0) cthreshold++;

		for (counter=1;counter<=cthreshold;counter++)
		{
			B=hashit(sha,Z,counter,P,0);
			if (k+hlen>olen) for (int i=0;i<olen%hlen;i++) K[k++]=B[i];
			else for (int i=0;i<hlen;i++) K[k++]=B[i];
		}

		return K;
	}
</java function>
<rust function signature>
pub fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize, k: &mut [u8]) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

</rust function dependency libraries>

</message>
<function>
pub fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize, k: &mut [u8]) {
    // NOTE: the parameter olen is the length of the output K in bytes
    let hlen = sha;
    let mut lk = 0;

    let mut cthreshold = olen / hlen;
    if olen % hlen != 0 {
        cthreshold += 1
    }

    for counter in 1..=cthreshold {
        let mut b: [u8; 64] = [0; 64];
        hashit(sha, z, counter, p, 0, &mut b);
        if lk + hlen > olen {
            for i in 0..(olen % hlen) {
                k[lk] = b[i];
                lk += 1
            }
        } else {
            for i in 0..hlen {
                k[lk] = b[i];
                lk += 1
            }
        }
    }
}
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize, k: &mut [u8]) {
    let hlen = sha;
    let mut K = [0u8; olen];
    let mut counter = 1;
    let cthreshold = (olen + hlen - 1) / hlen;

    for i in 0..olen {
        K[i] = 0;
    }

    while counter <= cthreshold {
        let B = hashit(sha, z, counter, p.unwrap_or(&[]), 0);
        let len = std::cmp::min(hlen, olen - counter * hlen);
        K[counter * hlen - 1..].copy_from_slice(&B[..len]);
        counter += 1;
    }

    k.copy_from_slice(&K);
}
```
Note that I've made the following assumptions:

* `hashit` is a function that takes the same arguments as in the Java code and returns a `[u8]` slice.
* `hlen` is the length of the hash output in bytes, which is equal to `sha`.
* `olen` is the desired length of the output key in bytes.
* `k` is a mutable reference to a `[u8]` slice that will hold the output key.
* `p` is an optional reference to a `[u8]` slice that may be used as input to the `hashit` function.

Also, I've used the `std::cmp::min` function to calculate the length of the hash output that should be copied to the `K` array in each iteration.</translated function>Here is the translated Rust function:
```rust
pub fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize, k: &mut [u8]) {
    let hlen = sha;
    let mut K = [0u8; olen];
    let mut counter = 1;
    let cthreshold = (olen + hlen - 1) / hlen;

    for i in 0..olen {
        K[i] = 0;
    }

    while counter <= cthreshold {
        let B = hashit(sha, z, counter, p.unwrap_or(&[]), 0);
        let len = std::cmp::min(hlen, olen - counter * hlen);
        K[counter * hlen - 1..].copy_from_slice(&B[..len]);
        counter += 1;
    }

    k.copy_from_slice(&K);
}
```
Note that I've made the following assumptions:

* `hashit` is a function that takes the same arguments as in the Java code and returns a `[u8]` slice.
* `hlen` is the length of the hash output in bytes, which is equal to `sha`.
* `olen` is the desired length of the output key in bytes.
* `k` is a mutable reference to a `[u8]` slice that will hold the output key.
* `p` is an optional reference to a `[u8]` slice that may be used as input to the `hashit` function.

Also, I've used the `std::cmp::min` function to calculate the length of the hash output that should be copied to the `K` array in each iteration.
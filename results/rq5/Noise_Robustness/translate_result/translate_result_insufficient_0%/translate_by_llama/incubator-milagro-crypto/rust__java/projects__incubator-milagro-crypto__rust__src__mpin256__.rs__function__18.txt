<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int PRECOMPUTE(byte[] TOKEN,byte[] CID,byte[] G1,byte[] G2)
	{
		ECP P,T;
		FP48 g;

		T=ECP.fromBytes(TOKEN);
		if (T.is_infinity()) return INVALID_POINT; 

		P=ECP.mapit(CID);

		ECP8 Q=ECP8.generator();

		g=PAIR256.ate(Q,T);
		g=PAIR256.fexp(g);
		g.toBytes(G1);

		g=PAIR256.ate(Q,P);
		g=PAIR256.fexp(g);
		g.toBytes(G2);

		return 0;
	}
</java function>
<rust function signature>
pub fn precompute(token: &[u8], cid: &[u8], g1: &mut [u8], g2: &mut [u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp8::ECP8;
use super::fp16::FP16;
use super::fp48::FP48;
use super::pair256;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn precompute(token: &[u8], cid: &[u8], g1: &mut [u8], g2: &mut [u8]) -> isize {
    let T = ECP::from_bytes(&token);
    if T.is_infinity() {
        return INVALID_POINT;
    }

    let P = ECP::mapit(&cid);

    let Q = ECP8::generator();

    let mut g = pair256::ate(&Q, &T);
    g = pair256::fexp(&g);
    g.to_bytes(g1);

    g = pair256::ate(&Q, &P);
    g = pair256::fexp(&g);
    g.to_bytes(g2);

    return 0;
}
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn precompute(token: &[u8], cid: &[u8], g1: &mut [u8], g2: &mut [u8]) -> isize {
    let mut p = ECP::from_bytes(token);
    if p.is_infinity() {
        return -1; // equivalent to Java's INVALID_POINT
    }

    let p = ECP::mapit(cid);

    let q = ECP8::generator();
    let mut g = FP48::new();
    g = pair256::ate(&q, &p);
    g = pair256::fexp(&g);
    g.to_bytes(g1);

    g = pair256::ate(&q, &p);
    g = pair256::fexp(&g);
    g.to_bytes(g2);

    0
}
```
Note that I've assumed that `INVALID_POINT` is equivalent to -1 in Rust, and that `FP48` has a `new` method to create a new instance. I've also assumed that `pair256` has `ate` and `fexp` functions that take `&ECP8` and `&ECP` arguments, respectively. If these assumptions are incorrect, please let me know and I'll adjust the translation accordingly.</translated function>Here is the translated Rust function:
```rust
pub fn precompute(token: &[u8], cid: &[u8], g1: &mut [u8], g2: &mut [u8]) -> isize {
    let mut p = ECP::from_bytes(token);
    if p.is_infinity() {
        return -1; // equivalent to Java's INVALID_POINT
    }

    let p = ECP::mapit(cid);

    let q = ECP8::generator();
    let mut g = FP48::new();
    g = pair256::ate(&q, &p);
    g = pair256::fexp(&g);
    g.to_bytes(g1);

    g = pair256::ate(&q, &p);
    g = pair256::fexp(&g);
    g.to_bytes(g2);

    0
}
```
Note that I've assumed that `INVALID_POINT` is equivalent to -1 in Rust, and that `FP48` has a `new` method to create a new instance. I've also assumed that `pair256` has `ate` and `fexp` functions that take `&ECP8` and `&ECP` arguments, respectively. If these assumptions are incorrect, please let me know and I'll adjust the translation accordingly.
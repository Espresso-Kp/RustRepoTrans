<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int EXTRACT_PIN(int sha,byte[] CID,int pin,byte[] TOKEN)
	{
		ECP P=ECP.fromBytes(TOKEN);
		if (P.is_infinity()) return INVALID_POINT;
		byte[] h=hashit(sha,0,CID,EFS);
		ECP R=ECP.mapit(h);


		pin%=MAXPIN;

		R=R.pinmul(pin,PBLEN);
		P.sub(R); //P.affine();

		P.toBytes(TOKEN,false);

		return 0;
	}
</java function>
<rust function signature>
pub fn extract_pin(sha: usize, cid: &[u8], pin: i32, token: &mut [u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp8::ECP8;
use super::fp16::FP16;
use super::fp48::FP48;
use super::pair256;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn extract_pin(sha: usize, cid: &[u8], pin: i32, token: &mut [u8]) -> isize {
    return extract_factor(sha, cid, pin % MAXPIN, PBLEN, token);
}
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn extract_pin(sha: usize, cid: &[u8], pin: i32, token: &mut [u8]) -> isize {
    let p = ECP::from_bytes(token);
    if p.is_infinity() {
        return -1; // equivalent to Java's INVALID_POINT
    }
    let h = hashit(sha, 0, cid, EFS);
    let r = ECP::mapit(h);

    pin %= MAXPIN;

    r.pinmul(pin, PBLEN);
    p.sub(r); // equivalent to P.affine() in Java

    p.to_bytes(token, false);

    0
}
```
Note that I assumed `hashit` is a function that takes the same arguments as in the Java code, and returns a byte array. I also assumed `MAXPIN` and `PBLEN` are constants defined elsewhere in the code. If that's not the case, you'll need to modify the code accordingly.</translated function>Here is the translated Rust function:
```rust
pub fn extract_pin(sha: usize, cid: &[u8], pin: i32, token: &mut [u8]) -> isize {
    let p = ECP::from_bytes(token);
    if p.is_infinity() {
        return -1; // equivalent to Java's INVALID_POINT
    }
    let h = hashit(sha, 0, cid, EFS);
    let r = ECP::mapit(h);

    pin %= MAXPIN;

    r.pinmul(pin, PBLEN);
    p.sub(r); // equivalent to P.affine() in Java

    p.to_bytes(token, false);

    0
}
```
Note that I assumed `hashit` is a function that takes the same arguments as in the Java code, and returns a byte array. I also assumed `MAXPIN` and `PBLEN` are constants defined elsewhere in the code. If that's not the case, you'll need to modify the code accordingly.
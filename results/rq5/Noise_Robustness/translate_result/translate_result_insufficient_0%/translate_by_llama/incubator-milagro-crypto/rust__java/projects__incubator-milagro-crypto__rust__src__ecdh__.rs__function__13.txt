<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int VP_DSA(int sha,byte[] W,byte[] F, byte[] C,byte[] D)
	{
		BIG r,f,c,d,h2;
		int res=0;
		ECP G,WP,P;
		int valid; 

		byte[] B=hashit(sha,F,0,null,BIG.MODBYTES);

		G=ECP.generator();
		r=new BIG(ROM.CURVE_Order);

		c=BIG.fromBytes(C);
		d=BIG.fromBytes(D);
		f=BIG.fromBytes(B);
     
		if (c.iszilch() || BIG.comp(c,r)>=0 || d.iszilch() || BIG.comp(d,r)>=0) 
            res=INVALID;

		if (res==0)
		{
			d.invmodp(r);
			f.copy(BIG.modmul(f,d,r));
			h2=BIG.modmul(c,d,r);

			WP=ECP.fromBytes(W);
			if (WP.is_infinity()) res=ERROR;
			else
			{
				P=new ECP();
				P.copy(WP);
				P=P.mul2(h2,G,f);
				if (P.is_infinity()) res=INVALID;
				else
				{
					d=P.getX();
					d.mod(r);
					if (BIG.comp(d,c)!=0) res=INVALID;
				}
			}
		}

		return res;
	}
</java function>
<rust function signature>
pub fn ecpvp_dsa(sha: usize, w: &[u8], f: &[u8], c: &[u8], d: &[u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

</rust function dependency libraries>

</message>
<function>
pub fn ecpvp_dsa(sha: usize, w: &[u8], f: &[u8], c: &[u8], d: &[u8]) -> isize {
    let mut res = 0;

    let mut b: [u8; big::MODBYTES as usize] = [0; big::MODBYTES as usize];

    hashit(sha, f, 0, None, big::MODBYTES as usize, &mut b);

    let G = ECP::generator();
    let r = Big::new_ints(&rom::CURVE_ORDER);

    let cb = Big::from_bytes(c); // c or &c ?
    let mut db = Big::from_bytes(d); // d or &d ?

    if cb.is_zilch() || Big::comp(&cb, &r) >= 0 || db.is_zilch() || Big::comp(&db, &r) >= 0 {
        res = INVALID;
    }

    if res == 0 {
        let mut fb = Big::from_bytes(&b);
        db.invmodp(&r);
        let tb = Big::modmul(&fb, &db, &r);
        fb = tb.clone();
        let h2 = Big::modmul(&cb, &db, &r);

        let WP = ECP::from_bytes(&w);
        if WP.is_infinity() {
            res = ERROR;
        } else {
            let mut P = WP.clone();

            P = P.mul2(&h2, &G, &fb);

            if P.is_infinity() {
                res = INVALID;
            } else {
                db = P.getx();
                db.rmod(&r);

                if Big::comp(&db, &cb) != 0 {
                    res = INVALID
                }
            }
        }
    }

    res
}
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn ecpvp_dsa(sha: usize, w: &[u8], f: &[u8], c: &[u8], d: &[u8]) -> isize {
    let mut r = big::Big::from(rom::CURVE_ORDER);
    let mut c = big::Big::from_bytes(c);
    let mut d = big::Big::from_bytes(d);
    let mut f = big::Big::from_bytes(f);
    let mut b = big::Big::from_bytes(&hashit(sha, f, 0, None, big::MODBYTES));

    let g = ecp::ECP::generator();
    let mut res = 0;

    if c.is_zero() || c.cmp(&r) >= 0 || d.is_zero() || d.cmp(&r) >= 0 {
        return -1;
    }

    d.invmodp(&mut r);
    f.copy(big::modmul(&f, &d, &r));
    let h2 = big::modmul(&c, &d, &r);

    let wp = ecp::ECP::from_bytes(w);
    if wp.is_infinity() {
        res = -1;
    } else {
        let mut p = ecp::ECP::new();
        p.copy(wp);
        p = p.mul2(h2, g, &f);
        if p.is_infinity() {
            res = -1;
        } else {
            let d = p.get_x();
            d.modp(&mut r);
            if d.cmp(&c)!= 0 {
                res = -1;
            }
        }
    }

    res
}

fn hashit(sha: usize, f: &[u8], offset: usize, salt: Option<&[u8]>, out_len: usize) -> Vec<u8> {
    // implementation of hashit function
    //...
}
```
Note that I assumed the `hashit` function is not implemented in the provided Rust code, so I left it as a placeholder. You will need to implement it according to your requirements.</translated function>Here is the translated Rust function:
```rust
pub fn ecpvp_dsa(sha: usize, w: &[u8], f: &[u8], c: &[u8], d: &[u8]) -> isize {
    let mut r = big::Big::from(rom::CURVE_ORDER);
    let mut c = big::Big::from_bytes(c);
    let mut d = big::Big::from_bytes(d);
    let mut f = big::Big::from_bytes(f);
    let mut b = big::Big::from_bytes(&hashit(sha, f, 0, None, big::MODBYTES));

    let g = ecp::ECP::generator();
    let mut res = 0;

    if c.is_zero() || c.cmp(&r) >= 0 || d.is_zero() || d.cmp(&r) >= 0 {
        return -1;
    }

    d.invmodp(&mut r);
    f.copy(big::modmul(&f, &d, &r));
    let h2 = big::modmul(&c, &d, &r);

    let wp = ecp::ECP::from_bytes(w);
    if wp.is_infinity() {
        res = -1;
    } else {
        let mut p = ecp::ECP::new();
        p.copy(wp);
        p = p.mul2(h2, g, &f);
        if p.is_infinity() {
            res = -1;
        } else {
            let d = p.get_x();
            d.modp(&mut r);
            if d.cmp(&c)!= 0 {
                res = -1;
            }
        }
    }

    res
}

fn hashit(sha: usize, f: &[u8], offset: usize, salt: Option<&[u8]>, out_len: usize) -> Vec<u8> {
    // implementation of hashit function
    //...
}
```
Note that I assumed the `hashit` function is not implemented in the provided Rust code, so I left it as a placeholder. You will need to implement it according to your requirements.
<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int SVDP_DH(byte[] S,byte[] WD,byte[] Z)    
	{
		BIG r,s,wx,wy,z;
		int valid;
		ECP W;
		int res=0;
		byte[] T=new byte[EFS];

		s=BIG.fromBytes(S);

		W=ECP.fromBytes(WD);
		if (W.is_infinity()) res=ERROR;

		if (res==0)
		{
			r=new BIG(ROM.CURVE_Order);
			s.mod(r);

			W=W.mul(s);
			if (W.is_infinity()) res=ERROR; 
			else 
			{
				W.getX().toBytes(T);
				for (int i=0;i<EFS;i++) Z[i]=T[i];
			}
		}
		return res;
	}
</java function>
<rust function signature>
pub fn ecpsvdp_dh(s: &[u8], wd: &[u8], z: &mut [u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

</rust function dependency libraries>

</message>
<function>
pub fn ecpsvdp_dh(s: &[u8], wd: &[u8], z: &mut [u8]) -> isize {
    let mut res = 0;
    let mut t: [u8; EFS] = [0; EFS];

    let mut sc = Big::from_bytes(&s);

    let mut W = ECP::from_bytes(&wd);
    if W.is_infinity() {
        res = ERROR
    }

    if res == 0 {
        let r = Big::new_ints(&rom::CURVE_ORDER);
        sc.rmod(&r);
        W = W.mul(&sc);
        if W.is_infinity() {
            res = ERROR;
        } else {
            W.getx().to_bytes(&mut t);
            for i in 0..EFS {
                z[i] = t[i]
            }
        }
    }
    res
}
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn ecpsvdp_dh(s: &[u8], wd: &[u8], z: &mut [u8]) -> isize {
    let mut r = Big::from_bytes(s);
    let mut w = ECP::from_bytes(wd);
    let mut valid = 0;
    let mut res = 0;
    let mut t = [0u8; EFS];

    if w.is_infinity() {
        res = -1; // equivalent to Java's ERROR
    } else {
        let order = rom::CURVE_ORDER;
        r.mod_order(order);
        w = w.mul(r);
        if w.is_infinity() {
            res = -1;
        } else {
            w.get_x().to_bytes(&mut t);
            z.copy_from_slice(&t);
        }
    }
    res
}
```
Note that I've used the `Big` and `ECP` types from the `super::big` and `super::ecp` modules, respectively, as specified in the Rust function dependencies. I've also used the `rom::CURVE_ORDER` constant from the `super::rom` module.

I've assumed that `EFS` is a constant defined elsewhere in the code, and that `ERROR` is equivalent to `-1` in Rust. If this is not the case, please let me know and I'll adjust the code accordingly.</translated function>Here is the translated Rust function:
```rust
pub fn ecpsvdp_dh(s: &[u8], wd: &[u8], z: &mut [u8]) -> isize {
    let mut r = Big::from_bytes(s);
    let mut w = ECP::from_bytes(wd);
    let mut valid = 0;
    let mut res = 0;
    let mut t = [0u8; EFS];

    if w.is_infinity() {
        res = -1; // equivalent to Java's ERROR
    } else {
        let order = rom::CURVE_ORDER;
        r.mod_order(order);
        w = w.mul(r);
        if w.is_infinity() {
            res = -1;
        } else {
            w.get_x().to_bytes(&mut t);
            z.copy_from_slice(&t);
        }
    }
    res
}
```
Note that I've used the `Big` and `ECP` types from the `super::big` and `super::ecp` modules, respectively, as specified in the Rust function dependencies. I've also used the `rom::CURVE_ORDER` constant from the `super::rom` module.

I've assumed that `EFS` is a constant defined elsewhere in the code, and that `ERROR` is equivalent to `-1` in Rust. If this is not the case, please let me know and I'll adjust the code accordingly.
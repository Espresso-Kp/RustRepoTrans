<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static void ENCRYPT(public_key PUB,byte[] F,byte[] G)
	{
		int n=PUB.n.getlen();
		FF f=new FF(n);
		FF.fromBytes(f,F);
		f.power(PUB.e,PUB.n);
		f.toBytes(G);
	}
</java function>
<rust function signature>
pub fn encrypt(pbc: &RsaPublicKey, f: &[u8], g: &mut [u8]) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use super::big;
use super::ff;
use super::ff::FF;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn encrypt(pbc: &RsaPublicKey, f: &[u8], g: &mut [u8]) {
    let m = pbc.n.getlen();
    let mut r = FF::new_int(m);

    FF::from_bytes(&mut r, f);
    r.power(pbc.e, &pbc.n);
    r.to_bytes(g);
}
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn encrypt(pbc: &RsaPublicKey, f: &[u8], g: &mut [u8]) {
    let n = pbc.n.len();
    let mut f = FF::new(n);
    f.from_bytes(f, f);
    f.power(pbc.e, pbc.n);
    f.to_bytes(g);
}
```
Note that I assumed the `RsaPublicKey` type has `n` and `e` fields, and that the `FF` type has `new`, `from_bytes`, `power`, and `to_bytes` methods. I also assumed that the `len` method returns the length of the `n` field as a `usize`. If these assumptions are incorrect, please let me know and I'll be happy to adjust the translation.</translated function>Here is the translated Rust function:
```rust
pub fn encrypt(pbc: &RsaPublicKey, f: &[u8], g: &mut [u8]) {
    let n = pbc.n.len();
    let mut f = FF::new(n);
    f.from_bytes(f, f);
    f.power(pbc.e, pbc.n);
    f.to_bytes(g);
}
```
Note that I assumed the `RsaPublicKey` type has `n` and `e` fields, and that the `FF` type has `new`, `from_bytes`, `power`, and `to_bytes` methods. I also assumed that the `len` method returns the length of the `n` field as a `usize`. If these assumptions are incorrect, please let me know and I'll be happy to adjust the translation.
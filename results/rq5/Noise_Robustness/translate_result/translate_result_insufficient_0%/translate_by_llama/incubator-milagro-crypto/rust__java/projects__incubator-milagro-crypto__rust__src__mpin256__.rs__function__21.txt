<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static void SERVER_1(int sha,int date,byte[] CID,byte[] HID,byte[] HTID)
	{
		byte[] h=hashit(sha,0,CID,EFS);
		ECP R,P=ECP.mapit(h);

		P.toBytes(HID,false);   // new
		if (date!=0)
		{
	//		if (HID!=null) P.toBytes(HID,false);
			h=hashit(sha,date,h,EFS);
			R=ECP.mapit(h);
			P.add(R); //P.affine();
			P.toBytes(HTID,false);
		}
	//	else P.toBytes(HID,false);
	}
</java function>
<rust function signature>
pub fn server_1(sha: usize, date: usize, cid: &[u8], hid: &mut [u8], htid: Option<&mut [u8]>) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::SystemTime;
use std::time::UNIX_EPOCH;
use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::ecp2::ECP2;
use super::fp12::FP12;
use super::fp4::FP4;
use super::pair;
use super::rom;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn server_1(sha: usize, date: usize, cid: &[u8], hid: &mut [u8], htid: Option<&mut [u8]>) {
    const RM: usize = big::MODBYTES as usize;
    let mut h: [u8; RM] = [0; RM];

    hashit(sha, 0, cid, &mut h);

    let mut P = ECP::mapit(&h);

    P.to_bytes(hid, false);
    if date != 0 {
        let mut h2: [u8; RM] = [0; RM];
        hashit(sha, date, &h, &mut h2);
        let mut R = ECP::mapit(&h2);
        P.add(&mut R);
        if let Some(rhtid) = htid {
            P.to_bytes(rhtid, false);
        }
    }
}
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn server_1(sha: usize, date: usize, cid: &[u8], hid: &mut [u8], htid: Option<&mut [u8]>) {
    let h = hashit(sha, 0, cid, EFS);
    let mut p = ECP::mapit(h);

    p.to_bytes(hid, false); // new

    if date!= 0 {
        let h = hashit(sha, date, h, EFS);
        let r = ECP::mapit(h);
        p.add(r); // p.affine();
        if let Some(htid) = htid {
            p.to_bytes(htid, false);
        }
    }
}
```
Note that I've assumed that `EFS` is a constant or a function that returns a value, and that `hashit` is a function that takes the same arguments as in the Java code. I've also assumed that `ECP::mapit` and `ECP::add` are methods on the `ECP` type, and that `ECP::to_bytes` is a method that takes a byte slice and a boolean flag. If these assumptions are incorrect, please let me know and I'll adjust the translation accordingly.</translated function>Here is the translated Rust function:
```rust
pub fn server_1(sha: usize, date: usize, cid: &[u8], hid: &mut [u8], htid: Option<&mut [u8]>) {
    let h = hashit(sha, 0, cid, EFS);
    let mut p = ECP::mapit(h);

    p.to_bytes(hid, false); // new

    if date!= 0 {
        let h = hashit(sha, date, h, EFS);
        let r = ECP::mapit(h);
        p.add(r); // p.affine();
        if let Some(htid) = htid {
            p.to_bytes(htid, false);
        }
    }
}
```
Note that I've assumed that `EFS` is a constant or a function that returns a value, and that `hashit` is a function that takes the same arguments as in the Java code. I've also assumed that `ECP::mapit` and `ECP::add` are methods on the `ECP` type, and that `ECP::to_bytes` is a method that takes a byte slice and a boolean flag. If these assumptions are incorrect, please let me know and I'll adjust the translation accordingly.
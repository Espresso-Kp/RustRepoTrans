<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public static int KEY_PAIR_GENERATE(RAND RNG,byte[] S,byte[] W)
	{
		BIG r,s;
		ECP G,WP;
		int res=0;
	//	byte[] T=new byte[EFS];

		G=ECP.generator();

		r=new BIG(ROM.CURVE_Order);

		if (RNG==null)
		{
			s=BIG.fromBytes(S);
			s.mod(r);
		}
		else
		{
			s=BIG.randomnum(r,RNG);
		}

		//if (ROM.AES_S>0)
		//{
		//	s.mod2m(2*ROM.AES_S);
		//}
		s.toBytes(S);

		WP=G.mul(s);
		WP.toBytes(W,false);  // To use point compression on public keys, change to true 

		return res;
	}
</java function>
<rust function signature>
pub fn key_pair_generate(rng: Option<&mut RAND>, s: &mut [u8], w: &mut [u8]) -> isize 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

</rust function dependency libraries>

</message>
<function>
pub fn key_pair_generate(rng: Option<&mut RAND>, s: &mut [u8], w: &mut [u8]) -> isize {
    let res = 0;
    let mut sc: Big;
    let G = ECP::generator();

    let r = Big::new_ints(&rom::CURVE_ORDER);

    if let Some(mut x) = rng {
        sc = Big::randomnum(&r, &mut x);
    } else {
        sc = Big::from_bytes(&s);
        sc.rmod(&r);
    }

    sc.to_bytes(s);

    let WP = G.mul(&sc);

    WP.to_bytes(w, false); // To use point compression on public keys, change to true

    res
}
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn key_pair_generate(rng: Option<&mut RAND>, s: &mut [u8], w: &mut [u8]) -> isize {
    let mut r = big::Big::from(rom::ROM::CURVE_ORDER);
    let mut g = ecp::ECP::generator();
    let mut s = big::Big::from_bytes(s);
    let mut wp = ecp::ECP::mul(&g, &s);

    if let Some(rng) = rng {
        s = big::Big::random_num(&r, rng);
    }

    s.to_bytes(s);
    wp.to_bytes(w, false);

    0
}
```
Note that I've assumed that the `to_bytes` method on `Big` and `ECP` types takes a boolean argument to indicate whether to use point compression on public keys, just like in the Java code. If this is not the case, please let me know and I'll adjust the translation accordingly.</translated function>Here is the translated Rust function:
```rust
pub fn key_pair_generate(rng: Option<&mut RAND>, s: &mut [u8], w: &mut [u8]) -> isize {
    let mut r = big::Big::from(rom::ROM::CURVE_ORDER);
    let mut g = ecp::ECP::generator();
    let mut s = big::Big::from_bytes(s);
    let mut wp = ecp::ECP::mul(&g, &s);

    if let Some(rng) = rng {
        s = big::Big::random_num(&r, rng);
    }

    s.to_bytes(s);
    wp.to_bytes(w, false);

    0
}
```
Note that I've assumed that the `to_bytes` method on `Big` and `ECP` types takes a boolean argument to indicate whether to use point compression on public keys, just like in the Java code. If this is not the case, please let me know and I'll adjust the translation accordingly.
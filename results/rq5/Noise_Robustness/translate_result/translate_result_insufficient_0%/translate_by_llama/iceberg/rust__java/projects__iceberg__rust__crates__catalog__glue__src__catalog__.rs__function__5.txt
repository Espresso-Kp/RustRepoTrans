<message>
please translate the given java function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<java function>
public void createNamespace(Namespace namespace, Map<String, String> metadata) {
    try {
      glue.createDatabase(
          CreateDatabaseRequest.builder()
              .catalogId(awsProperties.glueCatalogId())
              .databaseInput(
                  IcebergToGlueConverter.toDatabaseInput(
                      namespace, metadata, awsProperties.glueCatalogSkipNameValidation()))
              .build());
      LOG.info("Created namespace: {}", namespace);
    } catch (software.amazon.awssdk.services.glue.model.AlreadyExistsException e) {
      throw new AlreadyExistsException(
          "Cannot create namespace %s because it already exists in Glue", namespace);
    }
  }
</java function>
<rust function signature>
async fn create_namespace(
        &self,
        namespace: &NamespaceIdent,
        properties: HashMap<String, String>,
    ) -> Result<Namespace> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use async_trait::async_trait;
use aws_sdk_glue::types::TableInput;
use iceberg::io::FileIO;
use iceberg::spec::{TableMetadata, TableMetadataBuilder};
use iceberg::table::Table;
use iceberg::{
    Catalog, Error, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
    TableIdent,
};
use std::{collections::HashMap, fmt::Debug};
use typed_builder::TypedBuilder;
use crate::error::{from_aws_build_error, from_aws_sdk_error};
use crate::utils::{
    convert_to_database, convert_to_glue_table, convert_to_namespace, create_metadata_location,
    create_sdk_config, get_default_table_location, get_metadata_location, validate_namespace,
};
use crate::with_catalog_id;

</rust function dependency libraries>

</message>
<function>
async fn create_namespace(
        &self,
        namespace: &NamespaceIdent,
        properties: HashMap<String, String>,
    ) -> Result<Namespace> {
        let db_input = convert_to_database(namespace, &properties)?;

        let builder = self.client.0.create_database().database_input(db_input);
        let builder = with_catalog_id!(builder, self.config);

        builder.send().await.map_err(from_aws_sdk_error)?;

        Ok(Namespace::with_properties(namespace.clone(), properties))
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
use async_trait::async_trait;
use aws_sdk_glue::types::DatabaseInput;
use iceberg::io::FileIO;
use iceberg::spec::{TableMetadata, TableMetadataBuilder};
use iceberg::table::Table;
use iceberg::{
    Catalog, Error, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
    TableIdent,
};
use std::{collections::HashMap, fmt::Debug};
use typed_builder::TypedBuilder;
use crate::error::{from_aws_build_error, from_aws_sdk_error};
use crate::utils::{
    convert_to_database, convert_to_glue_table, convert_to_namespace, create_metadata_location,
    create_sdk_config, get_default_table_location, get_metadata_location, validate_namespace,
};
use crate::with_catalog_id;

#[async_trait]
impl Catalog {
    async fn create_namespace(
        &self,
        namespace: &NamespaceIdent,
        properties: HashMap<String, String>,
    ) -> Result<Namespace> {
        let catalog_id = with_catalog_id(self)?;
        let metadata = convert_to_namespace(namespace, properties)?;
        let database_input = convert_to_database(metadata, catalog_id, self.glue_catalog_skip_name_validation())?;
        let request = CreateDatabaseRequest::builder()
           .catalog_id(catalog_id)
           .database_input(database_input)
           .build();
        let result = self.glue.create_database(request).await?;
        if result.is_already_exists() {
            return Err(Error::AlreadyExists(
                format!("Cannot create namespace {} because it already exists in Glue", namespace),
            ));
        }
        let namespace = convert_to_namespace(result, properties)?;
        LOG.info("Created namespace: {}", namespace);
        Ok(namespace)
    }
}
```
Note that I've assumed that `LOG` is a logging macro or function that is already defined elsewhere in the codebase. If that's not the case, you'll need to add the necessary logging dependencies and setup.</translated function>Here is the translated Rust function:
```rust
use async_trait::async_trait;
use aws_sdk_glue::types::DatabaseInput;
use iceberg::io::FileIO;
use iceberg::spec::{TableMetadata, TableMetadataBuilder};
use iceberg::table::Table;
use iceberg::{
    Catalog, Error, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
    TableIdent,
};
use std::{collections::HashMap, fmt::Debug};
use typed_builder::TypedBuilder;
use crate::error::{from_aws_build_error, from_aws_sdk_error};
use crate::utils::{
    convert_to_database, convert_to_glue_table, convert_to_namespace, create_metadata_location,
    create_sdk_config, get_default_table_location, get_metadata_location, validate_namespace,
};
use crate::with_catalog_id;

#[async_trait]
impl Catalog {
    async fn create_namespace(
        &self,
        namespace: &NamespaceIdent,
        properties: HashMap<String, String>,
    ) -> Result<Namespace> {
        let catalog_id = with_catalog_id(self)?;
        let metadata = convert_to_namespace(namespace, properties)?;
        let database_input = convert_to_database(metadata, catalog_id, self.glue_catalog_skip_name_validation())?;
        let request = CreateDatabaseRequest::builder()
           .catalog_id(catalog_id)
           .database_input(database_input)
           .build();
        let result = self.glue.create_database(request).await?;
        if result.is_already_exists() {
            return Err(Error::AlreadyExists(
                format!("Cannot create namespace {} because it already exists in Glue", namespace),
            ));
        }
        let namespace = convert_to_namespace(result, properties)?;
        LOG.info("Created namespace: {}", namespace);
        Ok(namespace)
    }
}
```
Note that I've assumed that `LOG` is a logging macro or function that is already defined elsewhere in the codebase. If that's not the case, you'll need to add the necessary logging dependencies and setup.
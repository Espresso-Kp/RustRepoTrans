<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def delete(self, location: Union[str, InputFile, OutputFile]) -> None:
        """Delete the file at the given location.

        Args:
            location (Union[str, InputFile, OutputFile]): The URI to the file--if an InputFile instance or an OutputFile instance is provided,
                the location attribute for that instance is used as the location to delete.

        Raises:
            FileNotFoundError: When the file at the provided location does not exist.
            PermissionError: If the file at the provided location cannot be accessed due to a permission error such as
                an AWS error code 15.
        """
        str_location = location.location if isinstance(location, (InputFile, OutputFile)) else location
        scheme, netloc, path = self.parse_location(str_location)
        fs = self.fs_by_scheme(scheme, netloc)

        try:
            fs.delete_file(path)
        except:
            raise
</python function>
<rust function signature>
pub async fn delete(&self, path: impl AsRef<str>) -> Result<()> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use bytes::Bytes;
use std::ops::Range;
use std::{collections::HashMap, sync::Arc};
use crate::{error::Result, Error, ErrorKind};
use once_cell::sync::Lazy;
use opendal::{Operator, Scheme};
use url::Url;
use std::io::Write;
use std::{fs::File, path::Path};
use futures::io::AllowStdIo;
use futures::AsyncReadExt;
use tempfile::TempDir;
use super::{FileIO, FileIOBuilder};

</rust function dependency libraries>

</message>
<function>
pub async fn delete(&self, path: impl AsRef<str>) -> Result<()> {
        let (op, relative_path) = self.inner.create_operator(&path)?;
        Ok(op.delete(relative_path).await?)
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
pub async fn delete(&self, path: impl AsRef<str>) -> Result<()> {
    let path = path.as_ref();
    let url = Url::parse(path).map_err(|_| Error::new(ErrorKind::InvalidPath))?;
    let scheme = url.scheme();
    let fs = self.fs_by_scheme(scheme, url.host_str().unwrap_or("").to_string());

    fs.delete_file(path).await.map_err(|e| {
        match e {
            opendal::Error::IoError(e) => Error::new(ErrorKind::IoError(e)),
            _ => Error::new(ErrorKind::DeleteError),
        }
    })
}
```
Note that I've assumed that `fs_by_scheme` is a method on `self` that returns a file system instance based on the scheme and host. I've also assumed that `delete_file` is an async method on the file system instance that returns a `Result`. If these assumptions are incorrect, please let me know and I'll adjust the code accordingly.</translated function>Here is the translated Rust function:
```rust
pub async fn delete(&self, path: impl AsRef<str>) -> Result<()> {
    let path = path.as_ref();
    let url = Url::parse(path).map_err(|_| Error::new(ErrorKind::InvalidPath))?;
    let scheme = url.scheme();
    let fs = self.fs_by_scheme(scheme, url.host_str().unwrap_or("").to_string());

    fs.delete_file(path).await.map_err(|e| {
        match e {
            opendal::Error::IoError(e) => Error::new(ErrorKind::IoError(e)),
            _ => Error::new(ErrorKind::DeleteError),
        }
    })
}
```
Note that I've assumed that `fs_by_scheme` is a method on `self` that returns a file system instance based on the scheme and host. I've also assumed that `delete_file` is an async method on the file system instance that returns a `Result`. If these assumptions are incorrect, please let me know and I'll adjust the code accordingly.
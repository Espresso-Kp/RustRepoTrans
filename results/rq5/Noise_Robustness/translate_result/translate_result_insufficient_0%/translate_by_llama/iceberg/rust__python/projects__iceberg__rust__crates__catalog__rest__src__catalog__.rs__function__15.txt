<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def list_namespaces(self, namespace: Union[str, Identifier] = ()) -> List[Identifier]:
        namespace_tuple = self.identifier_to_tuple(namespace)
        response = self._session.get(
            self.url(
                f"{Endpoints.list_namespaces}?parent={NAMESPACE_SEPARATOR.join(namespace_tuple)}"
                if namespace_tuple
                else Endpoints.list_namespaces
            ),
        )
        try:
            response.raise_for_status()
        except HTTPError as exc:
            self._handle_non_200_response(exc, {})

        namespaces = ListNamespaceResponse(**response.json())
        return [namespace_tuple + child_namespace for child_namespace in namespaces.namespaces]
</python function>
<rust function signature>
async fn list_namespaces(
        &self,
        parent: Option<&NamespaceIdent>,
    ) -> Result<Vec<NamespaceIdent>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::collections::HashMap;
use std::str::FromStr;
use async_trait::async_trait;
use itertools::Itertools;
use reqwest::header::{self, HeaderMap, HeaderName, HeaderValue};
use reqwest::{Client, Request, Response, StatusCode, Url};
use serde::de::DeserializeOwned;
use typed_builder::TypedBuilder;
use urlencoding::encode;
use crate::catalog::_serde::{
    CommitTableRequest, CommitTableResponse, CreateTableRequest, LoadTableResponse,
};
use iceberg::io::FileIO;
use iceberg::table::Table;
use iceberg::Result;
use iceberg::{
    Catalog, Error, ErrorKind, Namespace, NamespaceIdent, TableCommit, TableCreation, TableIdent,
};
use self::_serde::{
    CatalogConfig, ErrorResponse, ListNamespaceResponse, ListTableResponse, NamespaceSerde,
    RenameTableRequest, TokenResponse, NO_CONTENT, OK,
};
use std::collections::HashMap;
use serde_derive::{Deserialize, Serialize};
use iceberg::spec::{Schema, SortOrder, TableMetadata, UnboundPartitionSpec};
use iceberg::{Error, ErrorKind, Namespace, TableIdent, TableRequirement, TableUpdate};
use chrono::{TimeZone, Utc};
use iceberg::spec::{
        FormatVersion, NestedField, NullOrder, Operation, PrimitiveType, Schema, Snapshot,
        SnapshotLog, SortDirection, SortField, SortOrder, Summary, Transform, Type,
        UnboundPartitionField, UnboundPartitionSpec,
    };
use iceberg::transaction::Transaction;
use mockito::{Mock, Server, ServerGuard};
use serde_json::json;
use std::fs::File;
use std::io::BufReader;
use std::sync::Arc;
use uuid::uuid;
use super::*;

</rust function dependency libraries>

</message>
<function>
async fn list_namespaces(
        &self,
        parent: Option<&NamespaceIdent>,
    ) -> Result<Vec<NamespaceIdent>> {
        let mut request = self.client.0.get(self.config.namespaces_endpoint());
        if let Some(ns) = parent {
            request = request.query(&[("parent", ns.encode_in_url())]);
        }

        let resp = self
            .client
            .query::<ListNamespaceResponse, ErrorResponse, OK>(request.build()?)
            .await?;

        resp.namespaces
            .into_iter()
            .map(NamespaceIdent::from_vec)
            .collect::<Result<Vec<NamespaceIdent>>>()
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
async fn list_namespaces(
    &self,
    parent: Option<&NamespaceIdent>,
) -> Result<Vec<NamespaceIdent>> {
    let namespace_tuple: Vec<NamespaceIdent> = match parent {
        Some(ident) => vec![ident],
        None => vec![],
    };

    let url = self.url(
        format!(
            "{}?parent={}",
            Endpoints::list_namespaces,
            namespace_tuple.join(NAMESPACE_SEPARATOR)
        )
       .as_str(),
    );

    let response = self._session.get(url).await?;
    response.raise_for_status().await?;

    let namespaces = ListNamespaceResponse::from_json(&response.json().await?);
    let child_namespaces: Vec<NamespaceIdent> = namespaces.namespaces.into_iter().map(|child| {
        namespace_tuple.into_iter().chain(child).collect()
    }).collect();

    Ok(child_namespaces)
}
```
Note that I've assumed that `self._session.get` returns a `Future` that resolves to a `Response`, and that `response.raise_for_status` returns a `Future` that resolves to a `Response`. I've also assumed that `ListNamespaceResponse::from_json` is a method that takes a JSON response and returns a `ListNamespaceResponse` instance. If these assumptions are incorrect, please let me know and I'll adjust the code accordingly.</translated function>Here is the translated Rust function:
```rust
async fn list_namespaces(
    &self,
    parent: Option<&NamespaceIdent>,
) -> Result<Vec<NamespaceIdent>> {
    let namespace_tuple: Vec<NamespaceIdent> = match parent {
        Some(ident) => vec![ident],
        None => vec![],
    };

    let url = self.url(
        format!(
            "{}?parent={}",
            Endpoints::list_namespaces,
            namespace_tuple.join(NAMESPACE_SEPARATOR)
        )
       .as_str(),
    );

    let response = self._session.get(url).await?;
    response.raise_for_status().await?;

    let namespaces = ListNamespaceResponse::from_json(&response.json().await?);
    let child_namespaces: Vec<NamespaceIdent> = namespaces.namespaces.into_iter().map(|child| {
        namespace_tuple.into_iter().chain(child).collect()
    }).collect();

    Ok(child_namespaces)
}
```
Note that I've assumed that `self._session.get` returns a `Future` that resolves to a `Response`, and that `response.raise_for_status` returns a `Future` that resolves to a `Response`. I've also assumed that `ListNamespaceResponse::from_json` is a method that takes a JSON response and returns a `ListNamespaceResponse` instance. If these assumptions are incorrect, please let me know and I'll adjust the code accordingly.
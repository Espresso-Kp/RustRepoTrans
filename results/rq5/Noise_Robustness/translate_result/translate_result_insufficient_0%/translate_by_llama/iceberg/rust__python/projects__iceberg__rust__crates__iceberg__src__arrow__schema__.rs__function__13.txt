<message>
please translate the given python function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<python function>
def pyarrow_to_schema(schema: pa.Schema, name_mapping: Optional[NameMapping] = None) -> Schema:
    has_ids = visit_pyarrow(schema, _HasIds())
    if has_ids:
        visitor = _ConvertToIceberg()
    elif name_mapping is not None:
        visitor = _ConvertToIceberg(name_mapping=name_mapping)
    else:
        raise ValueError(
            "Parquet file does not have field-ids and the Iceberg table does not have 'schema.name-mapping.default' defined"
        )
    return visit_pyarrow(schema, visitor)
</python function>
<rust function signature>
pub fn arrow_schema_to_schema(schema: &ArrowSchema) -> Result<Schema> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use crate::error::Result;
use crate::spec::{
    Datum, ListType, MapType, NestedField, NestedFieldRef, PrimitiveLiteral, PrimitiveType, Schema,
    SchemaVisitor, StructType, Type,
};
use crate::{Error, ErrorKind};
use arrow_array::types::{validate_decimal_precision_and_scale, Decimal128Type};
use arrow_array::{
    BooleanArray, Datum as ArrowDatum, Float32Array, Float64Array, Int32Array, Int64Array,
};
use arrow_schema::{DataType, Field, Fields, Schema as ArrowSchema, TimeUnit};
use bitvec::macros::internal::funty::Fundamental;
use parquet::arrow::PARQUET_FIELD_ID_META_KEY;
use rust_decimal::prelude::ToPrimitive;
use std::collections::HashMap;
use std::sync::Arc;
use super::*;
use crate::spec::Schema;
use arrow_schema::DataType;
use arrow_schema::Field;
use arrow_schema::Schema as ArrowSchema;
use arrow_schema::TimeUnit;
use std::collections::HashMap;
use std::sync::Arc;

</rust function dependency libraries>

</message>
<function>
pub fn arrow_schema_to_schema(schema: &ArrowSchema) -> Result<Schema> {
    let mut visitor = ArrowSchemaConverter::new();
    visit_schema(schema, &mut visitor)
}
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn arrow_schema_to_schema(schema: &ArrowSchema) -> Result<Schema> {
    let has_ids = visit_arrow_schema(schema, _HasIds {});
    if has_ids {
        let visitor = _ConvertToIceberg {};
    } else if let Some(name_mapping) = schema.name_mapping() {
        let visitor = _ConvertToIceberg { name_mapping };
    } else {
        return Err(Error::new(ErrorKind::InvalidSchema, "Parquet file does not have field-ids and the Iceberg table does not have'schema.name-mapping.default' defined"));
    }
    visit_arrow_schema(schema, visitor)
}
```
Note that I assumed the following:

* `_HasIds` and `_ConvertToIceberg` are structs that implement the `SchemaVisitor` trait.
* `visit_arrow_schema` is a function that takes a `&ArrowSchema` and a `SchemaVisitor` instance, and returns a `Result<Schema>`.
* `schema.name_mapping()` returns an `Option<NameMapping>`.
* `Error` and `ErrorKind` are types from the `crate::error` module.
* `Schema` is a type from the `crate::spec` module.
* `ArrowSchema` is a type from the `arrow_schema` crate.
* `NameMapping` is a type from the `crate::spec` module.

Please let me know if these assumptions are incorrect or if you need further clarification.</translated function>Here is the translated Rust function:
```rust
pub fn arrow_schema_to_schema(schema: &ArrowSchema) -> Result<Schema> {
    let has_ids = visit_arrow_schema(schema, _HasIds {});
    if has_ids {
        let visitor = _ConvertToIceberg {};
    } else if let Some(name_mapping) = schema.name_mapping() {
        let visitor = _ConvertToIceberg { name_mapping };
    } else {
        return Err(Error::new(ErrorKind::InvalidSchema, "Parquet file does not have field-ids and the Iceberg table does not have'schema.name-mapping.default' defined"));
    }
    visit_arrow_schema(schema, visitor)
}
```
Note that I assumed the following:

* `_HasIds` and `_ConvertToIceberg` are structs that implement the `SchemaVisitor` trait.
* `visit_arrow_schema` is a function that takes a `&ArrowSchema` and a `SchemaVisitor` instance, and returns a `Result<Schema>`.
* `schema.name_mapping()` returns an `Option<NameMapping>`.
* `Error` and `ErrorKind` are types from the `crate::error` module.
* `Schema` is a type from the `crate::spec` module.
* `ArrowSchema` is a type from the `arrow_schema` crate.
* `NameMapping` is a type from the `crate::spec` module.

Please let me know if these assumptions are incorrect or if you need further clarification.
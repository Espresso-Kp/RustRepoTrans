<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
int dc_msg_is_setupmessage(const dc_msg_t* msg)
{
	if (msg==NULL || msg->magic!=DC_MSG_MAGIC || msg->type!=DC_MSG_FILE) {
		return 0;
	}

	return dc_param_get_int(msg->param, DC_PARAM_CMD, 0)==DC_CMD_AUTOCRYPT_SETUP_MESSAGE? 1 : 0;
}
</c function>
<rust function signature>
pub fn is_setupmessage(&self) -> bool 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::collections::BTreeSet;
use std::path::{Path, PathBuf};
use anyhow::{ensure, format_err, Context as _, Result};
use deltachat_contact_tools::{parse_vcard, VcardContact};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use tokio::{fs, io};
use crate::blob::BlobObject;
use crate::chat::{Chat, ChatId, ChatIdBlocked};
use crate::chatlist_events;
use crate::config::Config;
use crate::constants::{
    Blocked, Chattype, VideochatType, DC_CHAT_ID_TRASH, DC_DESIRED_TEXT_LEN, DC_MSG_ID_LAST_SPECIAL,
};
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::debug_logging::set_debug_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::{start_ephemeral_timers_msgids, Timer as EphemeralTimer};
use crate::events::EventType;
use crate::imap::markseen_on_imap_table;
use crate::location::delete_poi_location;
use crate::mimeparser::{parse_message_id, SystemMessage};
use crate::param::{Param, Params};
use crate::pgp::split_armored_data;
use crate::reaction::get_msg_reactions;
use crate::sql;
use crate::summary::Summary;
use crate::tools::{
    buf_compress, buf_decompress, get_filebytes, get_filemeta, gm2local_offset, read_file, time,
    timestamp_to_str, truncate,
};
use MessageState::*;
use MessageState::*;
use num_traits::FromPrimitive;
use super::*;
use crate::chat::{
        self, add_contact_to_chat, marknoticed_chat, send_text_msg, ChatItem, ProtectionStatus,
    };
use crate::chatlist::Chatlist;
use crate::config::Config;
use crate::reaction::send_reaction;
use crate::receive_imf::receive_imf;
use crate::test_utils as test;
use crate::test_utils::{TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub fn is_setupmessage(&self) -> bool {
        if self.viewtype != Viewtype::File {
            return false;
        }

        self.param.get_cmd() == SystemMessage::AutocryptSetupMessage
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn is_setupmessage(&self) -> bool {
    if self.msg.is_none() || self.msg.as_ref().unwrap().magic!= DC_MSG_MAGIC || self.msg.as_ref().unwrap().type_!= DC_MSG_FILE {
        return false;
    }

    self.msg.as_ref().unwrap().param.get_int(DC_PARAM_CMD, 0) == DC_CMD_AUTOCRYPT_SETUP_MESSAGE
}
```
Note that I assumed `dc_msg_t` is a struct with fields `magic`, `type_`, and `param`, and that `dc_param_get_int` is a method on the `param` field. I also assumed `DC_MSG_MAGIC` and `DC_CMD_AUTOCRYPT_SETUP_MESSAGE` are constants defined elsewhere in the code. If these assumptions are incorrect, please let me know and I'll be happy to adjust the translation.</translated function>Here is the translated Rust function:
```rust
pub fn is_setupmessage(&self) -> bool {
    if self.msg.is_none() || self.msg.as_ref().unwrap().magic!= DC_MSG_MAGIC || self.msg.as_ref().unwrap().type_!= DC_MSG_FILE {
        return false;
    }

    self.msg.as_ref().unwrap().param.get_int(DC_PARAM_CMD, 0) == DC_CMD_AUTOCRYPT_SETUP_MESSAGE
}
```
Note that I assumed `dc_msg_t` is a struct with fields `magic`, `type_`, and `param`, and that `dc_param_get_int` is a method on the `param` field. I also assumed `DC_MSG_MAGIC` and `DC_CMD_AUTOCRYPT_SETUP_MESSAGE` are constants defined elsewhere in the code. If these assumptions are incorrect, please let me know and I'll be happy to adjust the translation.
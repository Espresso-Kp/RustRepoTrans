<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
int dc_apeerstate_degrade_encryption(dc_apeerstate_t* peerstate, time_t message_time)
{
	if (peerstate==NULL) {
		return 0;
	}

	if (peerstate->prefer_encrypt==DC_PE_MUTUAL) {
		peerstate->degrade_event |= DC_DE_ENCRYPTION_PAUSED;
	}

	peerstate->prefer_encrypt = DC_PE_RESET;
	peerstate->last_seen      = message_time; /*last_seen_autocrypt is not updated as there was not Autocrypt:-header seen*/

	return 1;
}
</c function>
<rust function signature>
pub fn degrade_encryption(&mut self, message_time: i64) 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::mem;
use anyhow::{Context as _, Error, Result};
use deltachat_contact_tools::{addr_cmp, ContactAddress};
use num_traits::FromPrimitive;
use crate::aheader::{Aheader, EncryptPreference};
use crate::chat::{self, Chat};
use crate::chatlist::Chatlist;
use crate::config::Config;
use crate::constants::Chattype;
use crate::contact::{Contact, Origin};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{DcKey, Fingerprint, SignedPublicKey};
use crate::message::Message;
use crate::mimeparser::SystemMessage;
use crate::sql::Sql;
use crate::{chatlist_events, stock_str};
use super::*;
use crate::test_utils::alice_keypair;

</rust function dependency libraries>

</message>
<function>
pub fn degrade_encryption(&mut self, message_time: i64) {
        self.prefer_encrypt = EncryptPreference::Reset;
        self.last_seen = message_time;
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
pub fn degrade_encryption(&mut self, message_time: i64) -> Result<()> {
    if self.peerstate.is_none() {
        return Ok(());
    }

    let peerstate = self.peerstate.as_mut().unwrap();
    if peerstate.prefer_encrypt == EncryptPreference::Mutual {
        peerstate.degrade_event |= DcDegradeEvent::EncryptionPaused;
    }

    peerstate.prefer_encrypt = EncryptPreference::Reset;
    peerstate.last_seen = message_time;

    Ok(())
}
```
Note that I've assumed that `DcDegradeEvent` and `EncryptPreference` are enums defined elsewhere in the codebase, and that `peerstate` is a field of the current struct that implements the `degrade_encryption` method. I've also assumed that `self.peerstate` is an `Option` that contains a `dc_apeerstate_t` struct, and that `peerstate` is a mutable reference to that struct. If these assumptions are incorrect, please let me know and I'll be happy to adjust the translation accordingly.</translated function>Here is the translated Rust function:
```rust
pub fn degrade_encryption(&mut self, message_time: i64) -> Result<()> {
    if self.peerstate.is_none() {
        return Ok(());
    }

    let peerstate = self.peerstate.as_mut().unwrap();
    if peerstate.prefer_encrypt == EncryptPreference::Mutual {
        peerstate.degrade_event |= DcDegradeEvent::EncryptionPaused;
    }

    peerstate.prefer_encrypt = EncryptPreference::Reset;
    peerstate.last_seen = message_time;

    Ok(())
}
```
Note that I've assumed that `DcDegradeEvent` and `EncryptPreference` are enums defined elsewhere in the codebase, and that `peerstate` is a field of the current struct that implements the `degrade_encryption` method. I've also assumed that `self.peerstate` is an `Option` that contains a `dc_apeerstate_t` struct, and that `peerstate` is a mutable reference to that struct. If these assumptions are incorrect, please let me know and I'll be happy to adjust the translation accordingly.
<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
char* dc_initiate_key_transfer(dc_context_t* context)
{
	int       success = 0;
	char*     setup_code = NULL;
	char*     setup_file_content = NULL;
	char*     setup_file_name = NULL;
	uint32_t  chat_id = 0;
	dc_msg_t* msg = NULL;
	uint32_t  msg_id = 0;

	if (!dc_alloc_ongoing(context)) {
		return 0; /* no cleanup as this would call dc_free_ongoing() */
	}
	#define CHECK_EXIT if (context->shall_stop_ongoing) { goto cleanup; }

	if ((setup_code=dc_create_setup_code(context))==NULL) { /* this may require a keypair to be created. this may take a second ... */
		goto cleanup;
	}

	CHECK_EXIT

	if ((setup_file_content=dc_render_setup_file(context, setup_code))==NULL) { /* encrypting may also take a while ... */
		goto cleanup;
	}

	CHECK_EXIT

	if ((setup_file_name=dc_get_fine_pathNfilename(context, "$BLOBDIR", "autocrypt-setup-message.html"))==NULL
	 || !dc_write_file(context, setup_file_name, setup_file_content, strlen(setup_file_content))) {
		goto cleanup;
	}

	if ((chat_id=dc_create_chat_by_contact_id(context, DC_CONTACT_ID_SELF))==0) {
		goto cleanup;
	}

	msg = dc_msg_new_untyped(context);
	msg->type = DC_MSG_FILE;
	dc_param_set    (msg->param, DC_PARAM_FILE,              setup_file_name);
	dc_param_set    (msg->param, DC_PARAM_MIMETYPE,          "application/autocrypt-setup");
	dc_param_set_int(msg->param, DC_PARAM_CMD,               DC_CMD_AUTOCRYPT_SETUP_MESSAGE);
	dc_param_set_int(msg->param, DC_PARAM_FORCE_PLAINTEXT,   DC_FP_NO_AUTOCRYPT_HEADER);

	CHECK_EXIT

	if ((msg_id = dc_send_msg(context, chat_id, msg))==0) {
		goto cleanup;
	}

	dc_msg_unref(msg);
	msg = NULL;

	/* wait until the message is really sent */
	dc_log_info(context, 0, "Wait for setup message being sent ...");

	while (1)
	{
		CHECK_EXIT

		sleep(1);

		msg = dc_get_msg(context, msg_id);
		if (dc_msg_is_sent(msg)) {
			break;
		}
		dc_msg_unref(msg);
		msg = NULL;
	}

	dc_log_info(context, 0, "... setup message sent.");

	success = 1;

cleanup:
	if (!success) { free(setup_code); setup_code = NULL; }
	free(setup_file_name);
	free(setup_file_content);
	dc_msg_unref(msg);
	dc_free_ongoing(context);
	return setup_code;
}
</c function>
<rust function signature>
pub async fn initiate_key_transfer(context: &Context) -> Result<String> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::any::Any;
use std::ffi::OsStr;
use std::path::{Path, PathBuf};
use ::pgp::types::KeyTrait;
use anyhow::{bail, ensure, format_err, Context as _, Result};
use deltachat_contact_tools::EmailAddress;
use futures::StreamExt;
use futures_lite::FutureExt;
use rand::{thread_rng, Rng};
use tokio::fs::{self, File};
use tokio_tar::Archive;
use crate::blob::{BlobDirContents, BlobObject};
use crate::chat::{self, delete_and_reset_all_device_msgs, ChatId};
use crate::config::Config;
use crate::contact::ContactId;
use crate::context::Context;
use crate::e2ee;
use crate::events::EventType;
use crate::key::{
    self, load_self_secret_key, DcKey, DcSecretKey, SignedPublicKey, SignedSecretKey,
};
use crate::log::LogExt;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::param::Param;
use crate::pgp;
use crate::sql;
use crate::stock_str;
use crate::tools::{
    create_folder, delete_file, get_filesuffix_lc, open_file_std, read_file, time, write_file,
};
use transfer::{get_backup, BackupProvider};
use std::time::Duration;
use ::pgp::armor::BlockType;
use tokio::task;
use super::*;
use crate::pgp::{split_armored_data, HEADER_AUTOCRYPT, HEADER_SETUPCODE};
use crate::receive_imf::receive_imf;
use crate::stock_str::StockMessage;
use crate::test_utils::{alice_keypair, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn initiate_key_transfer(context: &Context) -> Result<String> {
    let setup_code = create_setup_code(context);
    /* this may require a keypair to be created. this may take a second ... */
    let setup_file_content = render_setup_file(context, &setup_code).await?;
    /* encrypting may also take a while ... */
    let setup_file_blob = BlobObject::create(
        context,
        "autocrypt-setup-message.html",
        setup_file_content.as_bytes(),
    )
    .await?;

    let chat_id = ChatId::create_for_contact(context, ContactId::SELF).await?;
    let mut msg = Message {
        viewtype: Viewtype::File,
        ..Default::default()
    };
    msg.param.set(Param::File, setup_file_blob.as_name());
    msg.subject = stock_str::ac_setup_msg_subject(context).await;
    msg.param
        .set(Param::MimeType, "application/autocrypt-setup");
    msg.param.set_cmd(SystemMessage::AutocryptSetupMessage);
    msg.force_plaintext();
    msg.param.set_int(Param::SkipAutocrypt, 1);

    chat::send_msg(context, chat_id, &mut msg).await?;
    // no maybe_add_bcc_self_device_msg() here.
    // the ui shows the dialog with the setup code on this device,
    // it would be too much noise to have two things popping up at the same time.
    // maybe_add_bcc_self_device_msg() is called on the other device
    // once the transfer is completed.
    Ok(setup_code)
}
</function>
<translated function>
Here is the translated Rust function:

```rust
pub async fn initiate_key_transfer(context: &Context) -> Result<String> {
    let success = false;
    let setup_code = None;
    let setup_file_content = None;
    let setup_file_name = None;
    let chat_id = 0;
    let msg = None;
    let msg_id = 0;

    if!context.ongoing().is_some() {
        return Err(anyhow!("No ongoing context"));
    }

    let setup_code = context.create_setup_code().await?;
    if setup_code.is_none() {
        return Err(anyhow!("Failed to create setup code"));
    }

    let setup_file_content = context.render_setup_file(setup_code?).await?;
    if setup_file_content.is_none() {
        return Err(anyhow!("Failed to render setup file"));
    }

    let setup_file_name = context.get_fine_path_and_filename("$BLOBDIR", "autocrypt-setup-message.html").await?;
    if setup_file_name.is_none() {
        return Err(anyhow!("Failed to get setup file name"));
    }

    if!context.write_file(setup_file_name?, setup_file_content?).await {
        return Err(anyhow!("Failed to write setup file"));
    }

    let chat_id = context.create_chat_by_contact_id(DC_CONTACT_ID_SELF).await?;
    if chat_id == 0 {
        return Err(anyhow!("Failed to create chat"));
    }

    let msg = Message::new_untyped(context);
    msg.set_type(Viewtype::File);
    msg.set_param(Param::new(DC_PARAM_FILE, setup_file_name?));
    msg.set_param(Param::new(DC_PARAM_MIMETYPE, "application/autocrypt-setup"));
    msg.set_param_int(Param::new(DC_PARAM_CMD, DC_CMD_AUTOCRYPT_SETUP_MESSAGE));
    msg.set_param_int(Param::new(DC_PARAM_FORCE_PLAINTEXT, DC_FP_NO_AUTOCRYPT_HEADER));

    let msg_id = context.send_msg(chat_id, msg).await?;
    if msg_id == 0 {
        return Err(anyhow!("Failed to send message"));
    }

    msg.drop();

    loop {
        tokio::time::sleep(Duration::from_secs(1)).await;
        let msg = context.get_msg(msg_id).await?;
        if msg.is_sent() {
            break;
        }
        msg.drop();
    }

    context.log_info(0, "Setup message sent");

    success = true;

    if!success {
        setup_code = None;
    }

    setup_file_name = None;
    setup_file_content = None;
    msg.drop();
    context.free_ongoing().await?;

    Ok(setup_code?)
}
```

Note that I've assumed that the `Context` type has methods like `ongoing`, `create_setup_code`, `render_setup_file`, `get_fine_path_and_filename`, `write_file`, `create_chat_by_contact_id`, `send_msg`, `get_msg`, `log_info`, and `free_ongoing` that match the C code. I've also assumed that the `Message` type has methods like `new_untyped`, `set_type`, `set_param`, `set_param_int`, and `drop`. If these assumptions are incorrect, you may need to modify the code accordingly.</translated function>Here is the translated Rust function:

```rust
pub async fn initiate_key_transfer(context: &Context) -> Result<String> {
    let success = false;
    let setup_code = None;
    let setup_file_content = None;
    let setup_file_name = None;
    let chat_id = 0;
    let msg = None;
    let msg_id = 0;

    if!context.ongoing().is_some() {
        return Err(anyhow!("No ongoing context"));
    }

    let setup_code = context.create_setup_code().await?;
    if setup_code.is_none() {
        return Err(anyhow!("Failed to create setup code"));
    }

    let setup_file_content = context.render_setup_file(setup_code?).await?;
    if setup_file_content.is_none() {
        return Err(anyhow!("Failed to render setup file"));
    }

    let setup_file_name = context.get_fine_path_and_filename("$BLOBDIR", "autocrypt-setup-message.html").await?;
    if setup_file_name.is_none() {
        return Err(anyhow!("Failed to get setup file name"));
    }

    if!context.write_file(setup_file_name?, setup_file_content?).await {
        return Err(anyhow!("Failed to write setup file"));
    }

    let chat_id = context.create_chat_by_contact_id(DC_CONTACT_ID_SELF).await?;
    if chat_id == 0 {
        return Err(anyhow!("Failed to create chat"));
    }

    let msg = Message::new_untyped(context);
    msg.set_type(Viewtype::File);
    msg.set_param(Param::new(DC_PARAM_FILE, setup_file_name?));
    msg.set_param(Param::new(DC_PARAM_MIMETYPE, "application/autocrypt-setup"));
    msg.set_param_int(Param::new(DC_PARAM_CMD, DC_CMD_AUTOCRYPT_SETUP_MESSAGE));
    msg.set_param_int(Param::new(DC_PARAM_FORCE_PLAINTEXT, DC_FP_NO_AUTOCRYPT_HEADER));

    let msg_id = context.send_msg(chat_id, msg).await?;
    if msg_id == 0 {
        return Err(anyhow!("Failed to send message"));
    }

    msg.drop();

    loop {
        tokio::time::sleep(Duration::from_secs(1)).await;
        let msg = context.get_msg(msg_id).await?;
        if msg.is_sent() {
            break;
        }
        msg.drop();
    }

    context.log_info(0, "Setup message sent");

    success = true;

    if!success {
        setup_code = None;
    }

    setup_file_name = None;
    setup_file_content = None;
    msg.drop();
    context.free_ongoing().await?;

    Ok(setup_code?)
}
```

Note that I've assumed that the `Context` type has methods like `ongoing`, `create_setup_code`, `render_setup_file`, `get_fine_path_and_filename`, `write_file`, `create_chat_by_contact_id`, `send_msg`, `get_msg`, `log_info`, and `free_ongoing` that match the C code. I've also assumed that the `Message` type has methods like `new_untyped`, `set_type`, `set_param`, `set_param_int`, and `drop`. If these assumptions are incorrect, you may need to modify the code accordingly.
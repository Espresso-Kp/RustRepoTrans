<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
dc_array_t* dc_get_contacts(dc_context_t* context, uint32_t listflags, const char* query)
{
	char*         self_addr = NULL;
	char*         self_name = NULL;
	char*         self_name2 = NULL;
	int           add_self = 0;
	dc_array_t*   ret = dc_array_new(context, 100);
	char*         s3strLikeCmd = NULL;
	sqlite3_stmt* stmt = NULL;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC) {
		goto cleanup;
	}

	self_addr = dc_sqlite3_get_config(context->sql, "configured_addr", ""); /* we add DC_CONTACT_ID_SELF explicitly; so avoid doubles if the address is present as a normal entry for some case */

	if ((listflags&DC_GCL_VERIFIED_ONLY) || query)
	{
		if ((s3strLikeCmd=sqlite3_mprintf("%%%s%%", query? query : ""))==NULL) {
			goto cleanup;
		}
		// see comments in dc_search_msgs() about the LIKE operator
		stmt = dc_sqlite3_prepare(context->sql,
			"SELECT c.id FROM contacts c"
				" LEFT JOIN acpeerstates ps ON c.addr=ps.addr "
				" WHERE c.addr!=?1 AND c.id>?2 AND c.origin>=?3"
				" AND c.blocked=0 AND (c.name LIKE ?4 OR c.addr LIKE ?5)"
				" AND (1=?6 OR LENGTH(ps.verified_key_fingerprint)!=0) "
				" ORDER BY LOWER(c.name||c.addr),c.id;");
		sqlite3_bind_text(stmt, 1, self_addr, -1, SQLITE_STATIC);
		sqlite3_bind_int (stmt, 2, DC_CONTACT_ID_LAST_SPECIAL);
		sqlite3_bind_int (stmt, 3, DC_ORIGIN_MIN_CONTACT_LIST);
		sqlite3_bind_text(stmt, 4, s3strLikeCmd, -1, SQLITE_STATIC);
		sqlite3_bind_text(stmt, 5, s3strLikeCmd, -1, SQLITE_STATIC);
		sqlite3_bind_int (stmt, 6, (listflags&DC_GCL_VERIFIED_ONLY)? 0/*force checking for verified_key*/ : 1/*force statement being always true*/);

		self_name  = dc_sqlite3_get_config(context->sql, "displayname", "");
		self_name2 = dc_stock_str(context, DC_STR_SELF);
		if (query==NULL || dc_str_contains(self_addr, query) || dc_str_contains(self_name, query) || dc_str_contains(self_name2, query)) {
			add_self = 1;
		}
	}
	else
	{
		stmt = dc_sqlite3_prepare(context->sql,
			"SELECT id FROM contacts"
				" WHERE addr!=?1 AND id>?2 AND origin>=?3 AND blocked=0"
				" ORDER BY LOWER(name||addr),id;");
		sqlite3_bind_text(stmt, 1, self_addr, -1, SQLITE_STATIC);
		sqlite3_bind_int (stmt, 2, DC_CONTACT_ID_LAST_SPECIAL);
		sqlite3_bind_int (stmt, 3, DC_ORIGIN_MIN_CONTACT_LIST);

		add_self = 1;
	}

	while (sqlite3_step(stmt)==SQLITE_ROW) {
		dc_array_add_id(ret, sqlite3_column_int(stmt, 0));
	}

	/* to the end of the list, add self - this is to be in sync with member lists and to allow the user to start a self talk */
	if ((listflags&DC_GCL_ADD_SELF) && add_self) {
		dc_array_add_id(ret, DC_CONTACT_ID_SELF);
	}

cleanup:
	sqlite3_finalize(stmt);
	sqlite3_free(s3strLikeCmd);
	free(self_addr);
	free(self_name);
	free(self_name2);
	return ret;
}
</c function>
<rust function signature>
pub async fn get_all(
        context: &Context,
        listflags: u32,
        query: Option<&str>,
    ) -> Result<Vec<ContactId>> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::cmp::{min, Reverse};
use std::collections::BinaryHeap;
use std::fmt;
use std::path::{Path, PathBuf};
use std::time::UNIX_EPOCH;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use base64::Engine as _;
use deltachat_contact_tools::may_be_valid_addr;
use deltachat_contact_tools::{
    self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
    ContactAddress, VcardContact,
};
use deltachat_derive::{FromSql, ToSql};
use rusqlite::OptionalExtension;
use serde::{Deserialize, Serialize};
use tokio::task;
use tokio::time::{timeout, Duration};
use crate::aheader::{Aheader, EncryptPreference};
use crate::blob::BlobObject;
use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{load_self_public_key, DcKey, SignedPublicKey};
use crate::log::LogExt;
use crate::login_param::LoginParam;
use crate::message::MessageState;
use crate::mimeparser::AvatarAction;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::sql::{self, params_iter};
use crate::sync::{self, Sync::*};
use crate::tools::{
    duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
};
use crate::{chat, chatlist_events, stock_str};
use deltachat_contact_tools::{may_be_valid_addr, normalize_name};
use super::*;
use crate::chat::{get_chat_contacts, send_text_msg, Chat};
use crate::chatlist::Chatlist;
use crate::receive_imf::receive_imf;
use crate::test_utils::{self, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn get_all(
        context: &Context,
        listflags: u32,
        query: Option<&str>,
    ) -> Result<Vec<ContactId>> {
        let self_addrs = context.get_all_self_addrs().await?;
        let mut add_self = false;
        let mut ret = Vec::new();
        let flag_verified_only = (listflags & DC_GCL_VERIFIED_ONLY) != 0;
        let flag_add_self = (listflags & DC_GCL_ADD_SELF) != 0;
        let minimal_origin = if context.get_config_bool(Config::Bot).await? {
            Origin::Unknown
        } else {
            Origin::IncomingReplyTo
        };
        if flag_verified_only || query.is_some() {
            let s3str_like_cmd = format!("%{}%", query.unwrap_or(""));
            context
                .sql
                .query_map(
                    &format!(
                        "SELECT c.id FROM contacts c \
                 LEFT JOIN acpeerstates ps ON c.addr=ps.addr  \
                 WHERE c.addr NOT IN ({})
                 AND c.id>? \
                 AND c.origin>=? \
                 AND c.blocked=0 \
                 AND (iif(c.name='',c.authname,c.name) LIKE ? OR c.addr LIKE ?) \
                 AND (1=? OR LENGTH(ps.verified_key_fingerprint)!=0)  \
                 ORDER BY c.last_seen DESC, c.id DESC;",
                        sql::repeat_vars(self_addrs.len())
                    ),
                    rusqlite::params_from_iter(params_iter(&self_addrs).chain(params_slice![
                        ContactId::LAST_SPECIAL,
                        minimal_origin,
                        s3str_like_cmd,
                        s3str_like_cmd,
                        if flag_verified_only { 0i32 } else { 1i32 }
                    ])),
                    |row| row.get::<_, ContactId>(0),
                    |ids| {
                        for id in ids {
                            ret.push(id?);
                        }
                        Ok(())
                    },
                )
                .await?;

            if let Some(query) = query {
                let self_addr = context
                    .get_config(Config::ConfiguredAddr)
                    .await?
                    .unwrap_or_default();
                let self_name = context
                    .get_config(Config::Displayname)
                    .await?
                    .unwrap_or_default();
                let self_name2 = stock_str::self_msg(context);

                if self_addr.contains(query)
                    || self_name.contains(query)
                    || self_name2.await.contains(query)
                {
                    add_self = true;
                }
            } else {
                add_self = true;
            }
        } else {
            add_self = true;

            context
                .sql
                .query_map(
                    &format!(
                        "SELECT id FROM contacts
                 WHERE addr NOT IN ({})
                 AND id>?
                 AND origin>=?
                 AND blocked=0
                 ORDER BY last_seen DESC, id DESC;",
                        sql::repeat_vars(self_addrs.len())
                    ),
                    rusqlite::params_from_iter(
                        params_iter(&self_addrs)
                            .chain(params_slice![ContactId::LAST_SPECIAL, minimal_origin]),
                    ),
                    |row| row.get::<_, ContactId>(0),
                    |ids| {
                        for id in ids {
                            ret.push(id?);
                        }
                        Ok(())
                    },
                )
                .await?;
        }

        if flag_add_self && add_self {
            ret.push(ContactId::SELF);
        }

        Ok(ret)
    }
</function>
<translated function>
Here is the translated Rust function:

```rust
pub async fn get_all(
    context: &Context,
    listflags: u32,
    query: Option<&str>,
) -> Result<Vec<ContactId>> {
    let self_addr = context.sql.get_config("configured_addr", "")?;
    let self_name = context.sql.get_config("displayname", "")?;
    let self_name2 = stock_str(context, DC_STR_SELF)?;

    let mut add_self = false;
    let mut stmt = None;

    if (listflags & DC_GCL_VERIFIED_ONLY) || query.is_some() {
        let s3strLikeCmd = format!("%%%{}%%", query.unwrap_or(""));
        stmt = Some(context.sql.prepare(
            "SELECT c.id FROM contacts c
             LEFT JOIN acpeerstates ps ON c.addr=ps.addr
             WHERE c.addr!=?1 AND c.id>?2 AND c.origin>=?3
             AND c.blocked=0 AND (c.name LIKE?4 OR c.addr LIKE?5)
             AND (1=?6 OR LENGTH(ps.verified_key_fingerprint)!=0)
             ORDER BY LOWER(c.name||c.addr),c.id;",
            params_iter![
                self_addr,
                DC_CONTACT_ID_LAST_SPECIAL,
                DC_ORIGIN_MIN_CONTACT_LIST,
                &s3strLikeCmd,
                &s3strLikeCmd,
                (listflags & DC_GCL_VERIFIED_ONLY) as i32,
            ],
        )?);
        if query.is_none() || self_addr.contains(query.unwrap()) || self_name.contains(query.unwrap()) || self_name2.contains(query.unwrap()) {
            add_self = true;
        }
    } else {
        stmt = Some(context.sql.prepare(
            "SELECT id FROM contacts
             WHERE addr!=?1 AND id>?2 AND origin>=?3 AND blocked=0
             ORDER BY LOWER(name||addr),id;",
            params_iter![
                self_addr,
                DC_CONTACT_ID_LAST_SPECIAL,
                DC_ORIGIN_MIN_CONTACT_LIST,
            ],
        )?);
        add_self = true;
    }

    let mut contacts = Vec::new();
    while let Some(row) = stmt.unwrap().query_row()? {
        contacts.push(row.get(0)?);
    }

    if (listflags & DC_GCL_ADD_SELF) && add_self {
        contacts.push(DC_CONTACT_ID_SELF);
    }

    Ok(contacts)
}
```

Note that I've used the `?` operator to propagate errors from the `Result` types, and I've also used the `unwrap_or` method to handle the `Option` type. Additionally, I've used the `params_iter!` macro to create the parameter iterator for the SQL query.</translated function>Here is the translated Rust function:

```rust
pub async fn get_all(
    context: &Context,
    listflags: u32,
    query: Option<&str>,
) -> Result<Vec<ContactId>> {
    let self_addr = context.sql.get_config("configured_addr", "")?;
    let self_name = context.sql.get_config("displayname", "")?;
    let self_name2 = stock_str(context, DC_STR_SELF)?;

    let mut add_self = false;
    let mut stmt = None;

    if (listflags & DC_GCL_VERIFIED_ONLY) || query.is_some() {
        let s3strLikeCmd = format!("%%%{}%%", query.unwrap_or(""));
        stmt = Some(context.sql.prepare(
            "SELECT c.id FROM contacts c
             LEFT JOIN acpeerstates ps ON c.addr=ps.addr
             WHERE c.addr!=?1 AND c.id>?2 AND c.origin>=?3
             AND c.blocked=0 AND (c.name LIKE?4 OR c.addr LIKE?5)
             AND (1=?6 OR LENGTH(ps.verified_key_fingerprint)!=0)
             ORDER BY LOWER(c.name||c.addr),c.id;",
            params_iter![
                self_addr,
                DC_CONTACT_ID_LAST_SPECIAL,
                DC_ORIGIN_MIN_CONTACT_LIST,
                &s3strLikeCmd,
                &s3strLikeCmd,
                (listflags & DC_GCL_VERIFIED_ONLY) as i32,
            ],
        )?);
        if query.is_none() || self_addr.contains(query.unwrap()) || self_name.contains(query.unwrap()) || self_name2.contains(query.unwrap()) {
            add_self = true;
        }
    } else {
        stmt = Some(context.sql.prepare(
            "SELECT id FROM contacts
             WHERE addr!=?1 AND id>?2 AND origin>=?3 AND blocked=0
             ORDER BY LOWER(name||addr),id;",
            params_iter![
                self_addr,
                DC_CONTACT_ID_LAST_SPECIAL,
                DC_ORIGIN_MIN_CONTACT_LIST,
            ],
        )?);
        add_self = true;
    }

    let mut contacts = Vec::new();
    while let Some(row) = stmt.unwrap().query_row()? {
        contacts.push(row.get(0)?);
    }

    if (listflags & DC_GCL_ADD_SELF) && add_self {
        contacts.push(DC_CONTACT_ID_SELF);
    }

    Ok(contacts)
}
```

Note that I've used the `?` operator to propagate errors from the `Result` types, and I've also used the `unwrap_or` method to handle the `Option` type. Additionally, I've used the `params_iter!` macro to create the parameter iterator for the SQL query.
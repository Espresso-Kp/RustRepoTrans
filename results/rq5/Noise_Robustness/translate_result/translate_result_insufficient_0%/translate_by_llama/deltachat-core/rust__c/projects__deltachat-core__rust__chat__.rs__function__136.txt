<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
* If the group is already _promoted_ (any message was sent to the group),
 * all group members are informed by a special status message that is sent automatically by this function.
 *
 * Sends out #DC_EVENT_CHAT_MODIFIED and #DC_EVENT_MSGS_CHANGED if a status message was sent.
 *
 * @memberof dc_context_t
 * @param chat_id The chat ID to set the name for.  Must be a group chat.
 * @param new_name New name of the group.
 * @param context The context as created by dc_context_new().
 * @return 1=success, 0=error
 */
int dc_set_chat_name(dc_context_t* context, uint32_t chat_id, const char* new_name)
{
	/* the function only sets the names of group chats; normal chats get their names from the contacts */
	int        success = 0;
	dc_chat_t* chat = dc_chat_new(context);
	dc_msg_t*  msg = dc_msg_new_untyped(context);
	char*      q3 = NULL;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || new_name==NULL || new_name[0]==0 || chat_id<=DC_CHAT_ID_LAST_SPECIAL) {
		goto cleanup;
	}

	if (0==real_group_exists(context, chat_id)
	 || 0==dc_chat_load_from_db(chat, chat_id)) {
		goto cleanup;
	}

	if (strcmp(chat->name, new_name)==0) {
		success = 1;
		goto cleanup; /* name not modified */
	}

	if (!IS_SELF_IN_GROUP) {
		dc_log_event(context, DC_EVENT_ERROR_SELF_NOT_IN_GROUP, 0,
		             "Cannot set chat name; self not in group");
		goto cleanup; /* we shoud respect this - whatever we send to the group, it gets discarded anyway! */
	}

	q3 = sqlite3_mprintf("UPDATE chats SET name=%Q WHERE id=%i;", new_name, chat_id);
	if (!dc_sqlite3_execute(context->sql, q3)) {
		goto cleanup;
	}

	/* send a status mail to all group members, also needed for outself to allow multi-client */
	if (DO_SEND_STATUS_MAILS)
	{
		msg->type = DC_MSG_TEXT;
		msg->text = dc_stock_system_msg(context, DC_STR_MSGGRPNAME, chat->name, new_name, DC_CONTACT_ID_SELF);
		dc_param_set_int(msg->param, DC_PARAM_CMD,     DC_CMD_GROUPNAME_CHANGED);
		dc_param_set    (msg->param, DC_PARAM_CMD_ARG, chat->name);
		msg->id = dc_send_msg(context, chat_id, msg);
		context->cb(context, DC_EVENT_MSGS_CHANGED, chat_id, msg->id);
	}
	context->cb(context, DC_EVENT_CHAT_MODIFIED, chat_id, 0);

	success = 1;

cleanup:
	sqlite3_free(q3);
	dc_chat_unref(chat);
	dc_msg_unref(msg);
	return success;
}
</c function>
<rust function signature>
pub async fn set_chat_name(context: &Context, chat_id: ChatId, new_name: &str) -> Result<()> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::cmp;
use std::collections::{HashMap, HashSet};
use std::fmt;
use std::path::{Path, PathBuf};
use std::str::FromStr;
use std::time::Duration;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use deltachat_contact_tools::{strip_rtlo_characters, ContactAddress};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use strum_macros::EnumIter;
use tokio::task;
use crate::aheader::EncryptPreference;
use crate::blob::BlobObject;
use crate::chatlist::Chatlist;
use crate::chatlist_events;
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{
    self, Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK,
    DC_CHAT_ID_LAST_SPECIAL, DC_CHAT_ID_TRASH, DC_RESEND_USER_AVATAR_DAYS,
};
use crate::contact::{self, Contact, ContactId, Origin};
use crate::context::Context;
use crate::debug_logging::maybe_set_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::Timer as EphemeralTimer;
use crate::events::EventType;
use crate::html::new_html_mimepart;
use crate::location;
use crate::log::LogExt;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::mimefactory::MimeFactory;
use crate::mimeparser::SystemMessage;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::receive_imf::ReceivedMsg;
use crate::securejoin::BobState;
use crate::smtp::send_msg_to_smtp;
use crate::sql;
use crate::stock_str;
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{
    buf_compress, create_id, create_outgoing_rfc724_mid, create_smeared_timestamp,
    create_smeared_timestamps, get_abs_path, gm2local_offset, improve_single_line_input,
    smeared_time, time, IsNoneOrEmpty, SystemTime,
};
use crate::webxdc::WEBXDC_SUFFIX;
use CantSendReason::*;
use super::*;
use crate::chatlist::get_archived_cnt;
use crate::constants::{DC_GCL_ARCHIVED_ONLY, DC_GCL_NO_SPECIALS};
use crate::message::delete_msgs;
use crate::receive_imf::receive_imf;
use crate::test_utils::{sync, TestContext, TestContextManager};
use strum::IntoEnumIterator;
use tokio::fs;

</rust function dependency libraries>

</message>
<function>
pub async fn set_chat_name(context: &Context, chat_id: ChatId, new_name: &str) -> Result<()> {
    rename_ex(context, Sync, chat_id, new_name).await
}
</function>
<translated function>
Here is the translated Rust function:

```rust
pub async fn set_chat_name(context: &Context, chat_id: ChatId, new_name: &str) -> Result<()> {
    if context.is_none() || context.magic!= DC_CONTEXT_MAGIC || new_name.is_none() || new_name.is_empty() || chat_id <= DC_CHAT_ID_LAST_SPECIAL {
        return Err(anyhow!("Invalid input"));
    }

    if!real_group_exists(context, chat_id) ||!dc_chat_load_from_db(context, chat_id)? {
        return Err(anyhow!("Group does not exist"));
    }

    if chat_id == context.self_contact_id {
        return Err(anyhow!("Cannot set chat name for self"));
    }

    if chat_id == DC_CHAT_ID_TRASH {
        return Err(anyhow!("Cannot set chat name for trash"));
    }

    if chat_id == DC_CHAT_ID_ARCHIVED_LINK {
        return Err(anyhow!("Cannot set chat name for archived link"));
    }

    if chat_id == DC_CHAT_ID_ALLDONE_HINT {
        return Err(anyhow!("Cannot set chat name for all done hint"));
    }

    if!IS_SELF_IN_GROUP {
        dc_log_event(context, DC_EVENT_ERROR_SELF_NOT_IN_GROUP, 0, "Cannot set chat name; self not in group");
        return Err(anyhow!("Cannot set chat name; self not in group"));
    }

    let q3 = sqlite3_mprintf("UPDATE chats SET name=%Q WHERE id=%i;", new_name, chat_id);
    if!dc_sqlite3_execute(context.sql, q3)? {
        return Err(anyhow!("Failed to update chat name"));
    }

    let msg = Message::new_untyped(context);
    msg.type_ = MessageType::Text;
    msg.text = stock_system_msg(context, DC_STR_MSGGRPNAME, chat_id, new_name, context.self_contact_id);
    msg.param = Params::new();
    msg.param.set_int(DC_PARAM_CMD, DC_CMD_GROUPNAME_CHANGED);
    msg.param.set(DC_PARAM_CMD_ARG, chat_id);
    let msg_id = dc_send_msg(context, chat_id, msg)?;
    context.cb(context, EventType::MsgsChanged, chat_id, msg_id);
    context.cb(context, EventType::ChatModified, chat_id, 0);

    Ok(())
}
```

Note that I've assumed that `dc_sqlite3_execute` and `dc_send_msg` return a `Result` type, and that `stock_system_msg` returns a `&str`. I've also assumed that `Context` has methods `is_none`, `magic`, `self_contact_id`, `cb`, and `sql`, and that `ChatId` is an enum with variants `DC_CHAT_ID_TRASH`, `DC_CHAT_ID_ARCHIVED_LINK`, `DC_CHAT_ID_ALLDONE_HINT`, and `DC_CHAT_ID_LAST_SPECIAL`. Additionally, I've assumed that `real_group_exists` and `dc_chat_load_from_db` return a `Result` type. If these assumptions are incorrect, the code may need to be modified accordingly.</translated function>Here is the translated Rust function:

```rust
pub async fn set_chat_name(context: &Context, chat_id: ChatId, new_name: &str) -> Result<()> {
    if context.is_none() || context.magic!= DC_CONTEXT_MAGIC || new_name.is_none() || new_name.is_empty() || chat_id <= DC_CHAT_ID_LAST_SPECIAL {
        return Err(anyhow!("Invalid input"));
    }

    if!real_group_exists(context, chat_id) ||!dc_chat_load_from_db(context, chat_id)? {
        return Err(anyhow!("Group does not exist"));
    }

    if chat_id == context.self_contact_id {
        return Err(anyhow!("Cannot set chat name for self"));
    }

    if chat_id == DC_CHAT_ID_TRASH {
        return Err(anyhow!("Cannot set chat name for trash"));
    }

    if chat_id == DC_CHAT_ID_ARCHIVED_LINK {
        return Err(anyhow!("Cannot set chat name for archived link"));
    }

    if chat_id == DC_CHAT_ID_ALLDONE_HINT {
        return Err(anyhow!("Cannot set chat name for all done hint"));
    }

    if!IS_SELF_IN_GROUP {
        dc_log_event(context, DC_EVENT_ERROR_SELF_NOT_IN_GROUP, 0, "Cannot set chat name; self not in group");
        return Err(anyhow!("Cannot set chat name; self not in group"));
    }

    let q3 = sqlite3_mprintf("UPDATE chats SET name=%Q WHERE id=%i;", new_name, chat_id);
    if!dc_sqlite3_execute(context.sql, q3)? {
        return Err(anyhow!("Failed to update chat name"));
    }

    let msg = Message::new_untyped(context);
    msg.type_ = MessageType::Text;
    msg.text = stock_system_msg(context, DC_STR_MSGGRPNAME, chat_id, new_name, context.self_contact_id);
    msg.param = Params::new();
    msg.param.set_int(DC_PARAM_CMD, DC_CMD_GROUPNAME_CHANGED);
    msg.param.set(DC_PARAM_CMD_ARG, chat_id);
    let msg_id = dc_send_msg(context, chat_id, msg)?;
    context.cb(context, EventType::MsgsChanged, chat_id, msg_id);
    context.cb(context, EventType::ChatModified, chat_id, 0);

    Ok(())
}
```

Note that I've assumed that `dc_sqlite3_execute` and `dc_send_msg` return a `Result` type, and that `stock_system_msg` returns a `&str`. I've also assumed that `Context` has methods `is_none`, `magic`, `self_contact_id`, `cb`, and `sql`, and that `ChatId` is an enum with variants `DC_CHAT_ID_TRASH`, `DC_CHAT_ID_ARCHIVED_LINK`, `DC_CHAT_ID_ALLDONE_HINT`, and `DC_CHAT_ID_LAST_SPECIAL`. Additionally, I've assumed that `real_group_exists` and `dc_chat_load_from_db` return a `Result` type. If these assumptions are incorrect, the code may need to be modified accordingly.
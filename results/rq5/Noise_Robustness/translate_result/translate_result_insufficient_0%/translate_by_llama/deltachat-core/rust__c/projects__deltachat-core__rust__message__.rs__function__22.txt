<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
char* dc_msg_get_filemime(const dc_msg_t* msg)
{
	char* ret = NULL;
	char* file = NULL;

	if (msg==NULL || msg->magic!=DC_MSG_MAGIC) {
		goto cleanup;
	}

	ret = dc_param_get(msg->param, DC_PARAM_MIMETYPE, NULL);
	if (ret==NULL) {
		file = dc_param_get(msg->param, DC_PARAM_FILE, NULL);
		if (file==NULL) {
			goto cleanup;
		}
		dc_msg_guess_msgtype_from_suffix(file, NULL, &ret);

		if (ret==NULL) {
			ret = dc_strdup("application/octet-stream");
		}
	}

cleanup:
	free(file);
	return ret? ret : dc_strdup(NULL);
}
</c function>
<rust function signature>
pub fn get_filemime(&self) -> Option<String> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::collections::BTreeSet;
use std::path::{Path, PathBuf};
use anyhow::{ensure, format_err, Context as _, Result};
use deltachat_contact_tools::{parse_vcard, VcardContact};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use tokio::{fs, io};
use crate::blob::BlobObject;
use crate::chat::{Chat, ChatId, ChatIdBlocked};
use crate::chatlist_events;
use crate::config::Config;
use crate::constants::{
    Blocked, Chattype, VideochatType, DC_CHAT_ID_TRASH, DC_DESIRED_TEXT_LEN, DC_MSG_ID_LAST_SPECIAL,
};
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::debug_logging::set_debug_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::{start_ephemeral_timers_msgids, Timer as EphemeralTimer};
use crate::events::EventType;
use crate::imap::markseen_on_imap_table;
use crate::location::delete_poi_location;
use crate::mimeparser::{parse_message_id, SystemMessage};
use crate::param::{Param, Params};
use crate::pgp::split_armored_data;
use crate::reaction::get_msg_reactions;
use crate::sql;
use crate::summary::Summary;
use crate::tools::{
    buf_compress, buf_decompress, get_filebytes, get_filemeta, gm2local_offset, read_file, time,
    timestamp_to_str, truncate,
};
use MessageState::*;
use MessageState::*;
use num_traits::FromPrimitive;
use super::*;
use crate::chat::{
        self, add_contact_to_chat, marknoticed_chat, send_text_msg, ChatItem, ProtectionStatus,
    };
use crate::chatlist::Chatlist;
use crate::config::Config;
use crate::reaction::send_reaction;
use crate::receive_imf::receive_imf;
use crate::test_utils as test;
use crate::test_utils::{TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub fn get_filemime(&self) -> Option<String> {
        if let Some(m) = self.param.get(Param::MimeType) {
            return Some(m.to_string());
        } else if let Some(file) = self.param.get(Param::File) {
            if let Some((_, mime)) = guess_msgtype_from_suffix(Path::new(file)) {
                return Some(mime.to_string());
            }
            // we have a file but no mimetype, let's use a generic one
            return Some("application/octet-stream".to_string());
        }
        // no mimetype and no file
        None
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
use std::ffi::CString;
use std::mem::MaybeUninit;
use std::ptr;

pub fn get_filemime(&self) -> Option<String> {
    let msg = self;
    let mut ret = None;
    let mut file = None;

    if msg.is_none() || msg.as_ref().unwrap().magic!= DC_MSG_MAGIC {
        return ret;
    }

    let param = msg.as_ref().unwrap().param;
    let mime_type = param.get(DC_PARAM_MIMETYPE);
    if mime_type.is_none() {
        let file = param.get(DC_PARAM_FILE);
        if file.is_none() {
            return ret;
        }
        let file = file.unwrap();
        let guessed_mime_type = dc_guess_msgtype_from_suffix(file, None);
        if guessed_mime_type.is_none() {
            ret = Some("application/octet-stream".to_string());
        } else {
            ret = Some(guessed_mime_type.unwrap());
        }
    } else {
        ret = mime_type;
    }

    ret
}

// Assuming dc_guess_msgtype_from_suffix is defined elsewhere
fn dc_guess_msgtype_from_suffix(file: &str, _suffix: Option<&str>) -> Option<String> {
    // implementation of dc_guess_msgtype_from_suffix
}

// Assuming dc_param_get is defined elsewhere
trait Param {
    fn get(&self, key: &str) -> Option<String>;
}

// Assuming dc_strdup is defined elsewhere
fn dc_strdup(s: &str) -> String {
    // implementation of dc_strdup
}

// Assuming DC_MSG_MAGIC is defined elsewhere
const DC_MSG_MAGIC: u32 = 0; // replace with actual value
const DC_PARAM_MIMETYPE: &str = "mimetype"; // replace with actual value
const DC_PARAM_FILE: &str = "file"; // replace with actual value
```</translated function>Here is the translated Rust function:
```rust
use std::ffi::CString;
use std::mem::MaybeUninit;
use std::ptr;

pub fn get_filemime(&self) -> Option<String> {
    let msg = self;
    let mut ret = None;
    let mut file = None;

    if msg.is_none() || msg.as_ref().unwrap().magic!= DC_MSG_MAGIC {
        return ret;
    }

    let param = msg.as_ref().unwrap().param;
    let mime_type = param.get(DC_PARAM_MIMETYPE);
    if mime_type.is_none() {
        let file = param.get(DC_PARAM_FILE);
        if file.is_none() {
            return ret;
        }
        let file = file.unwrap();
        let guessed_mime_type = dc_guess_msgtype_from_suffix(file, None);
        if guessed_mime_type.is_none() {
            ret = Some("application/octet-stream".to_string());
        } else {
            ret = Some(guessed_mime_type.unwrap());
        }
    } else {
        ret = mime_type;
    }

    ret
}

// Assuming dc_guess_msgtype_from_suffix is defined elsewhere
fn dc_guess_msgtype_from_suffix(file: &str, _suffix: Option<&str>) -> Option<String> {
    // implementation of dc_guess_msgtype_from_suffix
}

// Assuming dc_param_get is defined elsewhere
trait Param {
    fn get(&self, key: &str) -> Option<String>;
}

// Assuming dc_strdup is defined elsewhere
fn dc_strdup(s: &str) -> String {
    // implementation of dc_strdup
}

// Assuming DC_MSG_MAGIC is defined elsewhere
const DC_MSG_MAGIC: u32 = 0; // replace with actual value
const DC_PARAM_MIMETYPE: &str = "mimetype"; // replace with actual value
const DC_PARAM_FILE: &str = "file"; // replace with actual value
```
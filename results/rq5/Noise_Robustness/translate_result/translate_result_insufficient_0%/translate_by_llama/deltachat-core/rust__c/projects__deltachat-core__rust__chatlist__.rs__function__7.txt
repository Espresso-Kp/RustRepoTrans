<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
dc_lot_t* dc_chatlist_get_summary(const dc_chatlist_t* chatlist, size_t index, dc_chat_t* chat /*may be NULL*/)
{
	/* The summary is created by the chat, not by the last message.
	This is because we may want to display drafts here or stuff as
	"is typing".
	Also, sth. as "No messages" would not work if the summary comes from a
	message. */

	dc_lot_t*      ret = dc_lot_new(); /* the function never returns NULL */
	uint32_t       lastmsg_id = 0;
	dc_msg_t*      lastmsg = NULL;
	dc_contact_t*  lastcontact = NULL;
	dc_chat_t*     chat_to_delete = NULL;

	if (chatlist==NULL || chatlist->magic!=DC_CHATLIST_MAGIC || index>=chatlist->cnt) {
		ret->text2 = dc_strdup("ErrBadChatlistIndex");
		goto cleanup;
	}

	lastmsg_id = dc_array_get_id(chatlist->chatNlastmsg_ids, index*DC_CHATLIST_IDS_PER_RESULT+1);

	if (chat==NULL) {
		chat = dc_chat_new(chatlist->context);
		chat_to_delete = chat;
		if (!dc_chat_load_from_db(chat, dc_array_get_id(chatlist->chatNlastmsg_ids, index*DC_CHATLIST_IDS_PER_RESULT))) {
			ret->text2 = dc_strdup("ErrCannotReadChat");
			goto cleanup;
		}
	}

	if (lastmsg_id)
	{
		lastmsg = dc_msg_new_untyped(chatlist->context);
		dc_msg_load_from_db(lastmsg, chatlist->context, lastmsg_id);

		if (lastmsg->from_id!=DC_CONTACT_ID_SELF  &&  DC_CHAT_TYPE_IS_MULTI(chat->type))
		{
			lastcontact = dc_contact_new(chatlist->context);
			dc_contact_load_from_db(lastcontact, chatlist->context->sql, lastmsg->from_id);
		}
	}

	if (chat->id==DC_CHAT_ID_ARCHIVED_LINK)
	{
		ret->text2 = dc_strdup(NULL);
	}
	else if (lastmsg==NULL || lastmsg->from_id==0)
	{
		/* no messages */
		ret->text2 = dc_stock_str(chatlist->context, DC_STR_NOMESSAGES);
	}
	else
	{
		/* show the last message */
		dc_lot_fill(ret, lastmsg, chat, lastcontact, chatlist->context);
	}

cleanup:
	dc_msg_unref(lastmsg);
	dc_contact_unref(lastcontact);
	dc_chat_unref(chat_to_delete);
	return ret;
}
</c function>
<rust function signature>
pub async fn get_summary(
        &self,
        context: &Context,
        index: usize,
        chat: Option<&Chat>,
    ) -> Result<Summary> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use anyhow::{ensure, Context as _, Result};
use once_cell::sync::Lazy;
use crate::chat::{update_special_chat_names, Chat, ChatId, ChatVisibility};
use crate::constants::{
    Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK, DC_GCL_ADD_ALLDONE_HINT,
    DC_GCL_ARCHIVED_ONLY, DC_GCL_FOR_FORWARDING, DC_GCL_NO_SPECIALS,
};
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::message::{Message, MessageState, MsgId};
use crate::param::{Param, Params};
use crate::stock_str;
use crate::summary::Summary;
use crate::tools::IsNoneOrEmpty;
use super::*;
use crate::chat::{
        add_contact_to_chat, create_group_chat, get_chat_contacts, remove_contact_from_chat,
        send_text_msg, ProtectionStatus,
    };
use crate::message::Viewtype;
use crate::receive_imf::receive_imf;
use crate::stock_str::StockMessage;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub async fn get_summary(
        &self,
        context: &Context,
        index: usize,
        chat: Option<&Chat>,
    ) -> Result<Summary> {
        // The summary is created by the chat, not by the last message.
        // This is because we may want to display drafts here or stuff as
        // "is typing".
        // Also, sth. as "No messages" would not work if the summary comes from a message.
        let (chat_id, lastmsg_id) = self
            .ids
            .get(index)
            .context("chatlist index is out of range")?;
        Chatlist::get_summary2(context, *chat_id, *lastmsg_id, chat).await
    }
</function>
<translated function>
Here is the translated Rust function:
```rust
pub async fn get_summary(
    &self,
    context: &Context,
    index: usize,
    chat: Option<&Chat>,
) -> Result<Summary> {
    let chatlist = self;
    let chatlist_magic = chatlist.magic;
    let chatlist_cnt = chatlist.cnt;

    if chatlist.is_none() || chatlist_magic!= DC_CHATLIST_MAGIC || index >= chatlist_cnt {
        return Err(anyhow!("ErrBadChatlistIndex"));
    }

    let lastmsg_id = dc_array_get_id(chatlist.chatNlastmsg_ids, index * DC_CHATLIST_IDS_PER_RESULT + 1);

    let mut chat_to_delete = None;
    if chat.is_none() {
        chat_to_delete = Some(Chat::new(context));
        if!chat_to_delete.as_ref().unwrap().load_from_db(dc_array_get_id(chatlist.chatNlastmsg_ids, index * DC_CHATLIST_IDS_PER_RESULT)) {
            return Err(anyhow!("ErrCannotReadChat"));
        }
    }

    let lastmsg = if lastmsg_id > 0 {
        let lastmsg = Message::new_untyped(context);
        lastmsg.load_from_db(context, lastmsg_id);

        if lastmsg.from_id!= DC_CONTACT_ID_SELF && DC_CHAT_TYPE_IS_MULTI(chat_to_delete.as_ref().unwrap().type()) {
            let lastcontact = Contact::new(context);
            lastcontact.load_from_db(context.sql, lastmsg.from_id);
            Some(lastcontact)
        } else {
            None
        }
    } else {
        None
    };

    if chat_to_delete.as_ref().unwrap().id == DC_CHAT_ID_ARCHIVED_LINK {
        return Ok(Summary::new(None));
    } else if lastmsg.is_none() || lastmsg.unwrap().from_id == 0 {
        return Ok(Summary::new(Some(stock_str(context, DC_STR_NOMESSAGES))));
    } else {
        dc_lot_fill(
            &mut Summary::new(None),
            lastmsg.unwrap(),
            chat_to_delete.as_ref().unwrap(),
            lastmsg.unwrap().from_id == DC_CONTACT_ID_SELF,
            context,
        );
        return Ok(Summary::new(None));
    }
}
```
Note that I've assumed that the `dc_lot_fill` function is defined elsewhere in the codebase, and that the `Summary` type has a `new` method that takes an optional `String` as an argument. I've also assumed that the `stock_str` function returns a `String`. If these assumptions are incorrect, please let me know and I'll adjust the code accordingly.</translated function>Here is the translated Rust function:
```rust
pub async fn get_summary(
    &self,
    context: &Context,
    index: usize,
    chat: Option<&Chat>,
) -> Result<Summary> {
    let chatlist = self;
    let chatlist_magic = chatlist.magic;
    let chatlist_cnt = chatlist.cnt;

    if chatlist.is_none() || chatlist_magic!= DC_CHATLIST_MAGIC || index >= chatlist_cnt {
        return Err(anyhow!("ErrBadChatlistIndex"));
    }

    let lastmsg_id = dc_array_get_id(chatlist.chatNlastmsg_ids, index * DC_CHATLIST_IDS_PER_RESULT + 1);

    let mut chat_to_delete = None;
    if chat.is_none() {
        chat_to_delete = Some(Chat::new(context));
        if!chat_to_delete.as_ref().unwrap().load_from_db(dc_array_get_id(chatlist.chatNlastmsg_ids, index * DC_CHATLIST_IDS_PER_RESULT)) {
            return Err(anyhow!("ErrCannotReadChat"));
        }
    }

    let lastmsg = if lastmsg_id > 0 {
        let lastmsg = Message::new_untyped(context);
        lastmsg.load_from_db(context, lastmsg_id);

        if lastmsg.from_id!= DC_CONTACT_ID_SELF && DC_CHAT_TYPE_IS_MULTI(chat_to_delete.as_ref().unwrap().type()) {
            let lastcontact = Contact::new(context);
            lastcontact.load_from_db(context.sql, lastmsg.from_id);
            Some(lastcontact)
        } else {
            None
        }
    } else {
        None
    };

    if chat_to_delete.as_ref().unwrap().id == DC_CHAT_ID_ARCHIVED_LINK {
        return Ok(Summary::new(None));
    } else if lastmsg.is_none() || lastmsg.unwrap().from_id == 0 {
        return Ok(Summary::new(Some(stock_str(context, DC_STR_NOMESSAGES))));
    } else {
        dc_lot_fill(
            &mut Summary::new(None),
            lastmsg.unwrap(),
            chat_to_delete.as_ref().unwrap(),
            lastmsg.unwrap().from_id == DC_CONTACT_ID_SELF,
            context,
        );
        return Ok(Summary::new(None));
    }
}
```
Note that I've assumed that the `dc_lot_fill` function is defined elsewhere in the codebase, and that the `Summary` type has a `new` method that takes an optional `String` as an argument. I've also assumed that the `stock_str` function returns a `String`. If these assumptions are incorrect, please let me know and I'll adjust the code accordingly.
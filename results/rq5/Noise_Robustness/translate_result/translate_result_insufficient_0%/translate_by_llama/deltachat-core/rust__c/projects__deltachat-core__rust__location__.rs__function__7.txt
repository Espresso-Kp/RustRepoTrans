<message>
please translate the given c function to rust according to the rust function signature, rust function realted variable, functions, and data type declarations and rust function dependency libraries I provide(delimited with XML tags). Only response the translated function results.
<c function>
void dc_send_locations_to_chat(dc_context_t* context, uint32_t chat_id,
                               int seconds)
{
	sqlite3_stmt* stmt = NULL;
	time_t        now = time(NULL);
	dc_msg_t*     msg = NULL;
	char*         stock_str = NULL;
	int           is_sending_locations_before = 0;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || seconds<0
	 || chat_id<=DC_CHAT_ID_LAST_SPECIAL) {
		goto cleanup;
	}

	is_sending_locations_before = dc_is_sending_locations_to_chat(context, chat_id);

	stmt = dc_sqlite3_prepare(context->sql,
		"UPDATE chats "
		"   SET locations_send_begin=?, "
		"       locations_send_until=? "
		" WHERE id=?");
	sqlite3_bind_int64(stmt, 1, seconds? now : 0);
	sqlite3_bind_int64(stmt, 2, seconds? now+seconds : 0);
	sqlite3_bind_int  (stmt, 3, chat_id);
	sqlite3_step(stmt);

	// add/sent status message.
	// as disable also happens after a timeout, this is not sent explicitly.
	if (seconds && !is_sending_locations_before) {
		msg = dc_msg_new(context, DC_MSG_TEXT);
		msg->text = dc_stock_system_msg(context, DC_STR_MSGLOCATIONENABLED, NULL, NULL, 0);
		dc_param_set_int(msg->param, DC_PARAM_CMD, DC_CMD_LOCATION_STREAMING_ENABLED);
		dc_send_msg(context, chat_id, msg);
	}
	else if(!seconds && is_sending_locations_before) {
		stock_str = dc_stock_system_msg(context, DC_STR_MSGLOCATIONDISABLED, NULL, NULL, 0);
		dc_add_device_msg(context, chat_id, stock_str);
	}

	// update eg. the "location-sending"-icon
	context->cb(context, DC_EVENT_CHAT_MODIFIED, chat_id, 0);

	if (seconds) {
		schedule_MAYBE_SEND_LOCATIONS(context, 0);
		dc_job_add(context, DC_JOB_MAYBE_SEND_LOC_ENDED, chat_id, NULL, seconds+1);
	}

cleanup:
	free(stock_str);
	dc_msg_unref(msg);
	sqlite3_finalize(stmt);
}
</c function>
<rust function signature>
pub async fn send_locations_to_chat(
    context: &Context,
    chat_id: ChatId,
    seconds: i64,
) -> Result<()> 
</rust function signature>
<rust function realted variable, functions, and data type declarations>


</rust function realted variable, functions, and data type declarations>
<rust function dependency libraries>



use std::time::Duration;
use anyhow::{ensure, Context as _, Result};
use async_channel::Receiver;
use quick_xml::events::{BytesEnd, BytesStart, BytesText};
use tokio::time::timeout;
use crate::chat::{self, ChatId};
use crate::constants::DC_CHAT_ID_TRASH;
use crate::contact::ContactId;
use crate::context::Context;
use crate::events::EventType;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::tools::{duration_to_str, time};
use crate::{chatlist_events, stock_str};
use super::*;
use crate::config::Config;
use crate::message::MessageState;
use crate::receive_imf::receive_imf;
use crate::test_utils::{TestContext, TestContextManager};
use crate::tools::SystemTime;

</rust function dependency libraries>

</message>
<function>
pub async fn send_locations_to_chat(
    context: &Context,
    chat_id: ChatId,
    seconds: i64,
) -> Result<()> {
    ensure!(seconds >= 0);
    ensure!(!chat_id.is_special());
    let now = time();
    let is_sending_locations_before = is_sending_locations_to_chat(context, Some(chat_id)).await?;
    context
        .sql
        .execute(
            "UPDATE chats    \
         SET locations_send_begin=?,        \
         locations_send_until=?  \
         WHERE id=?",
            (
                if 0 != seconds { now } else { 0 },
                if 0 != seconds { now + seconds } else { 0 },
                chat_id,
            ),
        )
        .await?;
    if 0 != seconds && !is_sending_locations_before {
        let mut msg = Message::new(Viewtype::Text);
        msg.text = stock_str::msg_location_enabled(context).await;
        msg.param.set_cmd(SystemMessage::LocationStreamingEnabled);
        chat::send_msg(context, chat_id, &mut msg)
            .await
            .unwrap_or_default();
    } else if 0 == seconds && is_sending_locations_before {
        let stock_str = stock_str::msg_location_disabled(context).await;
        chat::add_info_msg(context, chat_id, &stock_str, now).await?;
    }
    context.emit_event(EventType::ChatModified(chat_id));
    chatlist_events::emit_chatlist_item_changed(context, chat_id);
    if 0 != seconds {
        context.scheduler.interrupt_location().await;
    }
    Ok(())
}
</function>
<translated function>
Here is the translated Rust function:
```rust
pub async fn send_locations_to_chat(
    context: &Context,
    chat_id: ChatId,
    seconds: i64,
) -> Result<()> {
    ensure!(context.is_some(), "Context is None");
    ensure!(context.as_ref().unwrap().magic == DC_CONTEXT_MAGIC, "Invalid context magic");
    ensure!(seconds >= 0, "Seconds must be non-negative");
    ensure!(chat_id > DC_CHAT_ID_LAST_SPECIAL, "Invalid chat ID");

    let is_sending_locations_before = context.is_sending_locations_to_chat(chat_id);

    let now = SystemTime::now();
    let stmt = context.sql.prepare(
        "UPDATE chats SET locations_send_begin=?, locations_send_until=? WHERE id=?",
    )?;
    stmt.bind(1, if seconds > 0 { now } else { 0 });
    stmt.bind(2, if seconds > 0 { now + Duration::from_secs(seconds) } else { 0 });
    stmt.bind(3, chat_id as i64);
    stmt.execute()?;

    if seconds > 0 &&!is_sending_locations_before {
        let msg = Message::new(context, Viewtype::Text);
        msg.text = stock_str(context, DC_STR_MSGLOCATIONENABLED)?;
        msg.param.set_int(DC_PARAM_CMD, DC_CMD_LOCATION_STREAMING_ENABLED);
        context.send_msg(chat_id, msg)?;
    } else if seconds == 0 && is_sending_locations_before {
        let stock_str = stock_str(context, DC_STR_MSGLOCATIONDISABLED)?;
        context.add_device_msg(chat_id, stock_str)?;
    }

    context.cb(EventType::ChatModified, chat_id, 0);

    if seconds > 0 {
        context.schedule_maybe_send_locations(0)?;
        context.job_add(DC_JOB_MAYBE_SEND_LOC_ENDED, chat_id, None, seconds + 1)?;
    }

    Ok(())
}
```
Note that I've assumed that the `Context` type has methods `is_some()`, `as_ref()`, `is_sending_locations_to_chat()`, `sql`, `cb()`, `schedule_maybe_send_locations()`, and `job_add()` that are not shown in the provided Rust code. You may need to adjust the code to match the actual implementation of the `Context` type.</translated function>Here is the translated Rust function:
```rust
pub async fn send_locations_to_chat(
    context: &Context,
    chat_id: ChatId,
    seconds: i64,
) -> Result<()> {
    ensure!(context.is_some(), "Context is None");
    ensure!(context.as_ref().unwrap().magic == DC_CONTEXT_MAGIC, "Invalid context magic");
    ensure!(seconds >= 0, "Seconds must be non-negative");
    ensure!(chat_id > DC_CHAT_ID_LAST_SPECIAL, "Invalid chat ID");

    let is_sending_locations_before = context.is_sending_locations_to_chat(chat_id);

    let now = SystemTime::now();
    let stmt = context.sql.prepare(
        "UPDATE chats SET locations_send_begin=?, locations_send_until=? WHERE id=?",
    )?;
    stmt.bind(1, if seconds > 0 { now } else { 0 });
    stmt.bind(2, if seconds > 0 { now + Duration::from_secs(seconds) } else { 0 });
    stmt.bind(3, chat_id as i64);
    stmt.execute()?;

    if seconds > 0 &&!is_sending_locations_before {
        let msg = Message::new(context, Viewtype::Text);
        msg.text = stock_str(context, DC_STR_MSGLOCATIONENABLED)?;
        msg.param.set_int(DC_PARAM_CMD, DC_CMD_LOCATION_STREAMING_ENABLED);
        context.send_msg(chat_id, msg)?;
    } else if seconds == 0 && is_sending_locations_before {
        let stock_str = stock_str(context, DC_STR_MSGLOCATIONDISABLED)?;
        context.add_device_msg(chat_id, stock_str)?;
    }

    context.cb(EventType::ChatModified, chat_id, 0);

    if seconds > 0 {
        context.schedule_maybe_send_locations(0)?;
        context.job_add(DC_JOB_MAYBE_SEND_LOC_ENDED, chat_id, None, seconds + 1)?;
    }

    Ok(())
}
```
Note that I've assumed that the `Context` type has methods `is_some()`, `as_ref()`, `is_sending_locations_to_chat()`, `sql`, `cb()`, `schedule_maybe_send_locations()`, and `job_add()` that are not shown in the provided Rust code. You may need to adjust the code to match the actual implementation of the `Context` type.
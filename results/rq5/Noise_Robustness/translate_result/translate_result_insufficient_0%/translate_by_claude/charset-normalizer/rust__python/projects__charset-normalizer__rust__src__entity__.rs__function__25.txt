<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def __init__(self, results: Optional[List[CharsetMatch]] = None):
        self._results: List[CharsetMatch] = sorted(results) if results else []
</python function>
<rust function signature>
pub fn new(items: Option<Vec<CharsetMatch>>) -> Self 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use crate::cd::{encoding_languages, mb_encoding_languages};
use crate::consts::{IANA_SUPPORTED_ALIASES, TOO_BIG_SEQUENCE};
use crate::utils::{decode, iana_name, is_multi_byte_encoding, range_scan};
use clap::Parser;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use serde::Serialize;
use std::cmp::Ordering;
use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::hash::Hash;
use std::ops::Index;
use std::path::PathBuf;
use std::time::Duration;

</rust function dependency libraries>

</message>
<function>
pub fn new(items: Option<Vec<CharsetMatch>>) -> Self {
        let mut items = items.unwrap_or_default();
        CharsetMatches::resort(&mut items);
        CharsetMatches { items }
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function and Rust dependencies:

pub fn new(items: Option<Vec<CharsetMatch>>) -> Self {
    let results = match items {
        Some(mut charset_matches) => {
            charset_matches.sort();
            charset_matches
        }
        None => Vec::new(),
    };
    Self { _results: results }
}</translated function>Here's the translated Rust function based on the provided Python function and Rust dependencies:

pub fn new(items: Option<Vec<CharsetMatch>>) -> Self {
    let results = match items {
        Some(mut charset_matches) => {
            charset_matches.sort();
            charset_matches
        }
        None => Vec::new(),
    };
    Self { _results: results }
}
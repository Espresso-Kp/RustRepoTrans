<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def append(self, item: CharsetMatch) -> None:
        """
        Insert a single match. Will be inserted accordingly to preserve sort.
        Can be inserted as a submatch.
        """
        if not isinstance(item, CharsetMatch):
            raise ValueError(
                "Cannot append instance '{}' to CharsetMatches".format(
                    str(item.__class__)
                )
            )
        # We should disable the submatch factoring when the input file is too heavy (conserve RAM usage)
        if len(item.raw) <= TOO_BIG_SEQUENCE:
            for match in self._results:
                if match.fingerprint == item.fingerprint and match.chaos == item.chaos:
                    match.add_submatch(item)
                    return
        self._results.append(item)
        self._results = sorted(self._results)
</python function>
<rust function signature>
pub fn append(&mut self, item: CharsetMatch) 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use crate::cd::{encoding_languages, mb_encoding_languages};
use crate::consts::{IANA_SUPPORTED_ALIASES, TOO_BIG_SEQUENCE};
use crate::utils::{decode, iana_name, is_multi_byte_encoding, range_scan};
use clap::Parser;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use serde::Serialize;
use std::cmp::Ordering;
use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::hash::Hash;
use std::ops::Index;
use std::path::PathBuf;
use std::time::Duration;

</rust function dependency libraries>

</message>
<function>
pub fn append(&mut self, item: CharsetMatch) {
        // We should disable the submatch factoring when the input file is too heavy
        // (conserve RAM usage)
        if item.payload.len() <= TOO_BIG_SEQUENCE {
            for m in &mut self.items {
                if m.decoded_payload() == item.decoded_payload()
                    && (m.mean_mess_ratio - item.mean_mess_ratio).abs() < f32::EPSILON
                {
                    m.add_submatch(&item);
                    return;
                }
            }
        }
        self.items.push(item);
        CharsetMatches::resort(&mut self.items);
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, and dependencies:

```rust
pub fn append(&mut self, item: CharsetMatch) {
    if !item.is_charset_match() {
        panic!("Cannot append instance '{}' to CharsetMatches", item.get_class_name());
    }

    // We should disable the submatch factoring when the input file is too heavy (conserve RAM usage)
    if item.raw.len() <= TOO_BIG_SEQUENCE {
        for match_item in &mut self.results {
            if match_item.fingerprint == item.fingerprint && match_item.chaos == item.chaos {
                match_item.add_submatch(item);
                return;
            }
        }
    }
    self.results.push(item);
    self.results.sort();
}
```

Note that I've made some assumptions and adaptations:

1. I replaced the Python `ValueError` with a Rust `panic!` since Rust doesn't have built-in exceptions.
2. I assumed that `CharsetMatch` has a method `is_charset_match()` to check its type, and `get_class_name()` to get its class name as a string.
3. I assumed that `self.results` is a `Vec<CharsetMatch>`.
4. I used `item.raw.len()` instead of `len(item.raw)` to get the length of `raw`.
5. I assumed that `CharsetMatch` implements the `Ord` trait for sorting.
6. I used `push()` instead of `append()` for adding an item to the vector.
7. I called `sort()` on `self.results` instead of reassigning it, as Rust's sort is in-place.

Please note that you might need to adjust this code further based on the exact implementation details of your Rust structures and traits.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, and dependencies:

```rust
pub fn append(&mut self, item: CharsetMatch) {
    if !item.is_charset_match() {
        panic!("Cannot append instance '{}' to CharsetMatches", item.get_class_name());
    }

    // We should disable the submatch factoring when the input file is too heavy (conserve RAM usage)
    if item.raw.len() <= TOO_BIG_SEQUENCE {
        for match_item in &mut self.results {
            if match_item.fingerprint == item.fingerprint && match_item.chaos == item.chaos {
                match_item.add_submatch(item);
                return;
            }
        }
    }
    self.results.push(item);
    self.results.sort();
}
```

Note that I've made some assumptions and adaptations:

1. I replaced the Python `ValueError` with a Rust `panic!` since Rust doesn't have built-in exceptions.
2. I assumed that `CharsetMatch` has a method `is_charset_match()` to check its type, and `get_class_name()` to get its class name as a string.
3. I assumed that `self.results` is a `Vec<CharsetMatch>`.
4. I used `item.raw.len()` instead of `len(item.raw)` to get the length of `raw`.
5. I assumed that `CharsetMatch` implements the `Ord` trait for sorting.
6. I used `push()` instead of `append()` for adding an item to the vector.
7. I called `sort()` on `self.results` instead of reassigning it, as Rust's sort is in-place.

Please note that you might need to adjust this code further based on the exact implementation details of your Rust structures and traits.
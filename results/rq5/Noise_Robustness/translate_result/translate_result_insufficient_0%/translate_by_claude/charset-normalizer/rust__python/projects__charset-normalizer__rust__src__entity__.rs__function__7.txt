<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def __init__(
        self,
        payload: bytes,
        guessed_encoding: str,
        mean_mess_ratio: float,
        has_sig_or_bom: bool,
        languages: "CoherenceMatches",
        decoded_payload: Optional[str] = None,
    ):
        self._payload: bytes = payload

        self._encoding: str = guessed_encoding
        self._mean_mess_ratio: float = mean_mess_ratio
        self._languages: CoherenceMatches = languages
        self._has_sig_or_bom: bool = has_sig_or_bom
        self._unicode_ranges: Optional[List[str]] = None

        self._leaves: List[CharsetMatch] = []

        if decoded_payload is not None:
            self._string: Optional[str] = decoded_payload
        else:
            try:
                # Attempt to decode the payload with the guessed encoding
                decoded_string = payload.decode(guessed_encoding, errors='strict')
                # Remove BOM if it exists at the beginning of the decoded string
                if decoded_string.startswith('\ufeff'):
                    decoded_string = decoded_string[1:]
                self._string = decoded_string
            except (UnicodeDecodeError, LookupError):
                # If decoding fails, _string will be None
                self._string = None
</python function>
<rust function signature>
pub fn new(
        payload: &[u8],
        encoding: &str,
        mean_mess_ratio: f32,
        has_sig_or_bom: bool,
        coherence_matches: &CoherenceMatches,
        decoded_payload: Option<&str>,
    ) -> Self 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use crate::cd::{encoding_languages, mb_encoding_languages};
use crate::consts::{IANA_SUPPORTED_ALIASES, TOO_BIG_SEQUENCE};
use crate::utils::{decode, iana_name, is_multi_byte_encoding, range_scan};
use clap::Parser;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use serde::Serialize;
use std::cmp::Ordering;
use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::hash::Hash;
use std::ops::Index;
use std::path::PathBuf;
use std::time::Duration;

</rust function dependency libraries>

</message>
<function>
pub fn new(
        payload: &[u8],
        encoding: &str,
        mean_mess_ratio: f32,
        has_sig_or_bom: bool,
        coherence_matches: &CoherenceMatches,
        decoded_payload: Option<&str>,
    ) -> Self {
        CharsetMatch {
            payload: Vec::from(payload),
            encoding: String::from(encoding),
            mean_mess_ratio,
            coherence_matches: coherence_matches.clone(),
            has_sig_or_bom,
            submatch: vec![],
            decoded_payload: decoded_payload.map(String::from).or_else(|| {
                decode(payload, encoding, DecoderTrap::Strict, false, true)
                    .ok()
                    .map(|res| res.strip_prefix('\u{feff}').unwrap_or(&res).to_string())
            }),
        }
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, and dependencies:

```rust
pub fn new(
    payload: &[u8],
    encoding: &str,
    mean_mess_ratio: f32,
    has_sig_or_bom: bool,
    coherence_matches: &CoherenceMatches,
    decoded_payload: Option<&str>,
) -> Self {
    let string = match decoded_payload {
        Some(decoded) => Some(decoded.to_string()),
        None => {
            match decode(payload, encoding, DecoderTrap::Strict) {
                Ok(mut decoded_string) => {
                    // Remove BOM if it exists at the beginning of the decoded string
                    if decoded_string.starts_with('\u{feff}') {
                        decoded_string.remove(0);
                    }
                    Some(decoded_string)
                }
                Err(_) => None,
            }
        }
    };

    Self {
        payload: payload.to_vec(),
        encoding: encoding.to_string(),
        mean_mess_ratio,
        languages: coherence_matches.clone(),
        has_sig_or_bom,
        unicode_ranges: None,
        leaves: Vec::new(),
        string,
    }
}
```

This Rust function closely follows the structure and logic of the provided Python function. It uses the `decode` function from the `utils` module (as specified in the dependencies) to attempt decoding the payload if no decoded payload is provided. The function also handles the removal of the BOM character if present.

Note that I've made some assumptions about the struct fields based on the Python class attributes. You may need to adjust the struct definition accordingly if it differs from these assumptions.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, and dependencies:

```rust
pub fn new(
    payload: &[u8],
    encoding: &str,
    mean_mess_ratio: f32,
    has_sig_or_bom: bool,
    coherence_matches: &CoherenceMatches,
    decoded_payload: Option<&str>,
) -> Self {
    let string = match decoded_payload {
        Some(decoded) => Some(decoded.to_string()),
        None => {
            match decode(payload, encoding, DecoderTrap::Strict) {
                Ok(mut decoded_string) => {
                    // Remove BOM if it exists at the beginning of the decoded string
                    if decoded_string.starts_with('\u{feff}') {
                        decoded_string.remove(0);
                    }
                    Some(decoded_string)
                }
                Err(_) => None,
            }
        }
    };

    Self {
        payload: payload.to_vec(),
        encoding: encoding.to_string(),
        mean_mess_ratio,
        languages: coherence_matches.clone(),
        has_sig_or_bom,
        unicode_ranges: None,
        leaves: Vec::new(),
        string,
    }
}
```

This Rust function closely follows the structure and logic of the provided Python function. It uses the `decode` function from the `utils` module (as specified in the dependencies) to attempt decoding the payload if no decoded payload is provided. The function also handles the removal of the BOM character if present.

Note that I've made some assumptions about the struct fields based on the Python class attributes. You may need to adjust the struct definition accordingly if it differs from these assumptions.
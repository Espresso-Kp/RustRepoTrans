<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def is_cp_similar(iana_name_a: str, iana_name_b: str) -> bool:
    """
    Determine if two code page are at least 80% similar. IANA_SUPPORTED_SIMILAR dict was generated using
    the function cp_similarity.
    """
    return (
        iana_name_a in IANA_SUPPORTED_SIMILAR
        and iana_name_b in IANA_SUPPORTED_SIMILAR[iana_name_a]
    )
</python function>
<rust function signature>
pub(crate) fn is_cp_similar(iana_name_a: &str, iana_name_b: &str) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use crate::assets::LANGUAGES;
use crate::consts::{
    ENCODING_MARKS, IANA_SUPPORTED, IANA_SUPPORTED_SIMILAR, RE_POSSIBLE_ENCODING_INDICATION,
    UNICODE_RANGES_COMBINED, UNICODE_SECONDARY_RANGE_KEYWORD,
};
use crate::entity::Language;
use ahash::{HashSet, HashSetExt};
use encoding::label::encoding_from_whatwg_label;
use encoding::{CodecError, DecoderTrap, EncoderTrap, Encoding, EncodingRef, StringWriter};
use icu_normalizer::DecomposingNormalizer;
use unicode_names2::name;
use std::borrow::Cow;
use std::fs;
use std::path::{Path, PathBuf};

</rust function dependency libraries>

</message>
<function>
pub(crate) fn is_cp_similar(iana_name_a: &str, iana_name_b: &str) -> bool {
    IANA_SUPPORTED_SIMILAR.contains_key(iana_name_a)
        && IANA_SUPPORTED_SIMILAR[iana_name_a].contains(&iana_name_b)
}
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, and dependencies:

```rust
pub(crate) fn is_cp_similar(iana_name_a: &str, iana_name_b: &str) -> bool {
    IANA_SUPPORTED_SIMILAR
        .get(iana_name_a)
        .map_or(false, |similar_set| similar_set.contains(iana_name_b))
}
```

This Rust function achieves the same functionality as the Python function:

1. It takes two string slices as input, representing the IANA names of two code pages.
2. It checks if `iana_name_a` exists in the `IANA_SUPPORTED_SIMILAR` hash map.
3. If `iana_name_a` exists, it then checks if `iana_name_b` is in the set of similar code pages for `iana_name_a`.
4. The function returns `true` if both conditions are met, and `false` otherwise.

The function uses the `IANA_SUPPORTED_SIMILAR` constant, which is assumed to be a hash map where the keys are IANA names and the values are sets of similar IANA names. This structure is equivalent to the Python dictionary used in the original function.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, and dependencies:

```rust
pub(crate) fn is_cp_similar(iana_name_a: &str, iana_name_b: &str) -> bool {
    IANA_SUPPORTED_SIMILAR
        .get(iana_name_a)
        .map_or(false, |similar_set| similar_set.contains(iana_name_b))
}
```

This Rust function achieves the same functionality as the Python function:

1. It takes two string slices as input, representing the IANA names of two code pages.
2. It checks if `iana_name_a` exists in the `IANA_SUPPORTED_SIMILAR` hash map.
3. If `iana_name_a` exists, it then checks if `iana_name_b` is in the set of similar code pages for `iana_name_a`.
4. The function returns `true` if both conditions are met, and `false` otherwise.

The function uses the `IANA_SUPPORTED_SIMILAR` constant, which is assumed to be a hash map where the keys are IANA names and the values are sets of similar IANA names. This structure is equivalent to the Python dictionary used in the original function.
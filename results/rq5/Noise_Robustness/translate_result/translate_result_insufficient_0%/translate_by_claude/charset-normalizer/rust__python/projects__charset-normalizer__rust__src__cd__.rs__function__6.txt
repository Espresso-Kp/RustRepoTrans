<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def alpha_unicode_split(decoded_sequence: str) -> List[str]:
    """
    Given a decoded text sequence, return a list of str. Unicode range / alphabet separation.
    Ex. a text containing English/Latin with a bit a Hebrew will return two items in the resulting list;
    One containing the latin letters and the other hebrew.
    """
    layers: Dict[str, str] = {}

    for character in decoded_sequence:
        if character.isalpha() is False:
            continue

        character_range: Optional[str] = unicode_range(character)

        if character_range is None:
            continue

        layer_target_range: Optional[str] = None

        for discovered_range in layers:
            if (
                is_suspiciously_successive_range(discovered_range, character_range)
                is False
            ):
                layer_target_range = discovered_range
                break

        if layer_target_range is None:
            layer_target_range = character_range

        if layer_target_range not in layers:
            layers[layer_target_range] = character.lower()
            continue

        layers[layer_target_range] += character.lower()

    return list(layers.values())
</python function>
<rust function signature>
pub(crate) fn alpha_unicode_split(decoded_sequence: &str) -> Vec<String> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use crate::assets::{ENCODING_TO_LANGUAGE, LANGUAGES, LANGUAGE_SUPPORTED_COUNT};
use crate::consts::TOO_SMALL_SEQUENCE;
use crate::entity::{CoherenceMatch, CoherenceMatches, Language};
use crate::utils::{
    get_language_data, is_accentuated, is_multi_byte_encoding, is_suspiciously_successive_range,
    is_unicode_range_secondary, unicode_range,
};
use ahash::{HashMap, HashMapExt, HashSet};
use cached::proc_macro::cached;
use counter::Counter;
use encoding::label::encoding_from_whatwg_label;
use encoding::DecoderTrap;
use ordered_float::OrderedFloat;
use strsim::jaro;

</rust function dependency libraries>

</message>
<function>
pub(crate) fn alpha_unicode_split(decoded_sequence: &str) -> Vec<String> {
    let mut layers: HashMap<&str, String> = HashMap::new();

    for ch in decoded_sequence.chars().filter(|c| c.is_alphabetic()) {
        if let Some(character_range) = unicode_range(ch) {
            let layer_key: &str = layers
                .keys()
                .find(|key| !is_suspiciously_successive_range(Some(key), Some(character_range)))
                .copied()
                .unwrap_or(character_range);
            let layer = layers.entry(layer_key).or_default();
            layer.extend(ch.to_lowercase());
        }
    }
    layers.into_values().collect()
}
</function>
<translated function>
Here's the translated Rust function:

```rust
pub(crate) fn alpha_unicode_split(decoded_sequence: &str) -> Vec<String> {
    let mut layers: HashMap<String, String> = HashMap::new();

    for character in decoded_sequence.chars() {
        if !character.is_alphabetic() {
            continue;
        }

        if let Some(character_range) = unicode_range(&character) {
            let mut layer_target_range: Option<String> = None;

            for discovered_range in layers.keys() {
                if !is_suspiciously_successive_range(discovered_range, &character_range) {
                    layer_target_range = Some(discovered_range.clone());
                    break;
                }
            }

            let layer_target_range = layer_target_range.unwrap_or_else(|| character_range.clone());

            layers
                .entry(layer_target_range)
                .and_modify(|e| e.push(character.to_lowercase().next().unwrap()))
                .or_insert_with(|| character.to_lowercase().next().unwrap().to_string());
        }
    }

    layers.into_values().collect()
}
```

This Rust function follows the provided signature and uses the dependencies and libraries specified. It implements the same logic as the Python function, with the following key differences:

1. We use `HashMap` from the `ahash` crate instead of a regular `Dict`.
2. We iterate over `chars()` instead of indexing the string directly.
3. We use Rust's `entry()` API to update or insert values in the `HashMap`.
4. We use `to_lowercase().next().unwrap()` to get the lowercase version of a character, as Rust's `to_lowercase()` returns an iterator.
5. We use `into_values().collect()` to convert the `HashMap` values into a `Vec<String>`.

The function uses the provided dependencies such as `is_suspiciously_successive_range` and `unicode_range`. Make sure these functions are implemented and available in the Rust codebase.</translated function>Here's the translated Rust function:

```rust
pub(crate) fn alpha_unicode_split(decoded_sequence: &str) -> Vec<String> {
    let mut layers: HashMap<String, String> = HashMap::new();

    for character in decoded_sequence.chars() {
        if !character.is_alphabetic() {
            continue;
        }

        if let Some(character_range) = unicode_range(&character) {
            let mut layer_target_range: Option<String> = None;

            for discovered_range in layers.keys() {
                if !is_suspiciously_successive_range(discovered_range, &character_range) {
                    layer_target_range = Some(discovered_range.clone());
                    break;
                }
            }

            let layer_target_range = layer_target_range.unwrap_or_else(|| character_range.clone());

            layers
                .entry(layer_target_range)
                .and_modify(|e| e.push(character.to_lowercase().next().unwrap()))
                .or_insert_with(|| character.to_lowercase().next().unwrap().to_string());
        }
    }

    layers.into_values().collect()
}
```

This Rust function follows the provided signature and uses the dependencies and libraries specified. It implements the same logic as the Python function, with the following key differences:

1. We use `HashMap` from the `ahash` crate instead of a regular `Dict`.
2. We iterate over `chars()` instead of indexing the string directly.
3. We use Rust's `entry()` API to update or insert values in the `HashMap`.
4. We use `to_lowercase().next().unwrap()` to get the lowercase version of a character, as Rust's `to_lowercase()` returns an iterator.
5. We use `into_values().collect()` to convert the `HashMap` values into a `Vec<String>`.

The function uses the provided dependencies such as `is_suspiciously_successive_range` and `unicode_range`. Make sure these functions are implemented and available in the Rust codebase.
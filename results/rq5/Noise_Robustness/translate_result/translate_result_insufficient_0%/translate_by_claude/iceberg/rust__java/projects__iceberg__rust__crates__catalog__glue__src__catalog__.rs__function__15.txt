<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public void renameTable(TableIdentifier from, TableIdentifier to) {
    // check new namespace exists
    if (!namespaceExists(to.namespace())) {
      throw new NoSuchNamespaceException(
          "Cannot rename %s to %s because namespace %s does not exist", from, to, to.namespace());
    }
    // keep metadata
    Table fromTable = null;
    String fromTableDbName =
        IcebergToGlueConverter.getDatabaseName(from, awsProperties.glueCatalogSkipNameValidation());
    String fromTableName =
        IcebergToGlueConverter.getTableName(from, awsProperties.glueCatalogSkipNameValidation());
    String toTableDbName =
        IcebergToGlueConverter.getDatabaseName(to, awsProperties.glueCatalogSkipNameValidation());
    String toTableName =
        IcebergToGlueConverter.getTableName(to, awsProperties.glueCatalogSkipNameValidation());
    try {
      GetTableResponse response =
          glue.getTable(
              GetTableRequest.builder()
                  .catalogId(awsProperties.glueCatalogId())
                  .databaseName(fromTableDbName)
                  .name(fromTableName)
                  .build());
      fromTable = response.table();
    } catch (EntityNotFoundException e) {
      throw new NoSuchTableException(
          e, "Cannot rename %s because the table does not exist in Glue", from);
    }

    // use the same Glue info to create the new table, pointing to the old metadata
    TableInput.Builder tableInputBuilder =
        TableInput.builder()
            .owner(fromTable.owner())
            .tableType(fromTable.tableType())
            .parameters(fromTable.parameters())
            .storageDescriptor(fromTable.storageDescriptor());

    glue.createTable(
        CreateTableRequest.builder()
            .catalogId(awsProperties.glueCatalogId())
            .databaseName(toTableDbName)
            .tableInput(tableInputBuilder.name(toTableName).build())
            .build());
    LOG.info("created rename destination table {}", to);

    try {
      dropTable(from, false);
    } catch (Exception e) {
      // rollback, delete renamed table
      LOG.error(
          "Fail to drop old table {} after renaming to {}, rollback to use the old table",
          from,
          to,
          e);
      glue.deleteTable(
          DeleteTableRequest.builder()
              .catalogId(awsProperties.glueCatalogId())
              .databaseName(toTableDbName)
              .name(toTableName)
              .build());
      throw e;
    }

    LOG.info("Successfully renamed table from {} to {}", from, to);
  }
</java function>
<rust function signature>
async fn rename_table(&self, src: &TableIdent, dest: &TableIdent) -> Result<()> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use async_trait::async_trait;
use aws_sdk_glue::types::TableInput;
use iceberg::io::FileIO;
use iceberg::spec::{TableMetadata, TableMetadataBuilder};
use iceberg::table::Table;
use iceberg::{
    Catalog, Error, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
    TableIdent,
};
use std::{collections::HashMap, fmt::Debug};
use typed_builder::TypedBuilder;
use crate::error::{from_aws_build_error, from_aws_sdk_error};
use crate::utils::{
    convert_to_database, convert_to_glue_table, convert_to_namespace, create_metadata_location,
    create_sdk_config, get_default_table_location, get_metadata_location, validate_namespace,
};
use crate::with_catalog_id;

</rust function dependency libraries>

</message>
<function>
async fn rename_table(&self, src: &TableIdent, dest: &TableIdent) -> Result<()> {
        let src_db_name = validate_namespace(src.namespace())?;
        let dest_db_name = validate_namespace(dest.namespace())?;

        let src_table_name = src.name();
        let dest_table_name = dest.name();

        let builder = self
            .client
            .0
            .get_table()
            .database_name(&src_db_name)
            .name(src_table_name);
        let builder = with_catalog_id!(builder, self.config);

        let glue_table_output = builder.send().await.map_err(from_aws_sdk_error)?;

        match glue_table_output.table() {
            None => Err(Error::new(
                ErrorKind::Unexpected,
                format!(
                    "'Table' object for database: {} and table: {} does not exist",
                    src_db_name, src_table_name
                ),
            )),
            Some(table) => {
                let rename_table_input = TableInput::builder()
                    .name(dest_table_name)
                    .set_parameters(table.parameters.clone())
                    .set_storage_descriptor(table.storage_descriptor.clone())
                    .set_table_type(table.table_type.clone())
                    .set_description(table.description.clone())
                    .build()
                    .map_err(from_aws_build_error)?;

                let builder = self
                    .client
                    .0
                    .create_table()
                    .database_name(&dest_db_name)
                    .table_input(rename_table_input);
                let builder = with_catalog_id!(builder, self.config);

                builder.send().await.map_err(from_aws_sdk_error)?;

                let drop_src_table_result = self.drop_table(src).await;

                match drop_src_table_result {
                    Ok(_) => Ok(()),
                    Err(_) => {
                        let err_msg_src_table = format!(
                            "Failed to drop old table {}.{}.",
                            src_db_name, src_table_name
                        );

                        let drop_dest_table_result = self.drop_table(dest).await;

                        match drop_dest_table_result {
                            Ok(_) => Err(Error::new(
                                ErrorKind::Unexpected,
                                format!(
                                    "{} Rolled back table creation for {}.{}.",
                                    err_msg_src_table, dest_db_name, dest_table_name
                                ),
                            )),
                            Err(_) => Err(Error::new(
                                ErrorKind::Unexpected,
                                format!(
                                    "{} Failed to roll back table creation for {}.{}. Please clean up manually.",
                                    err_msg_src_table, dest_db_name, dest_table_name
                                ),
                            )),
                        }
                    }
                }
            }
        }
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Java function, Rust function signature, and dependencies:

```rust
async fn rename_table(&self, src: &TableIdent, dest: &TableIdent) -> Result<()> {
    // Check if new namespace exists
    if !self.namespace_exists(&dest.namespace()).await? {
        return Err(Error::new(
            ErrorKind::NoSuchNamespaceError,
            format!(
                "Cannot rename {:?} to {:?} because namespace {:?} does not exist",
                src,
                dest,
                dest.namespace()
            ),
        ));
    }

    // Keep metadata
    let from_table_db_name = convert_to_database(src, self.aws_properties.glue_catalog_skip_name_validation());
    let from_table_name = src.name();
    let to_table_db_name = convert_to_database(dest, self.aws_properties.glue_catalog_skip_name_validation());
    let to_table_name = dest.name();

    let from_table = match self
        .glue
        .get_table()
        .catalog_id(self.aws_properties.glue_catalog_id())
        .database_name(&from_table_db_name)
        .name(&from_table_name)
        .send()
        .await
    {
        Ok(response) => response.table().unwrap(),
        Err(e) => {
            return Err(Error::new(
                ErrorKind::NoSuchTableError,
                format!("Cannot rename {:?} because the table does not exist in Glue: {}", src, e),
            ));
        }
    };

    // Use the same Glue info to create the new table, pointing to the old metadata
    let table_input = TableInput::builder()
        .owner(from_table.owner().unwrap_or_default())
        .table_type(from_table.table_type().unwrap_or_default())
        .parameters(from_table.parameters().unwrap_or_default().clone())
        .storage_descriptor(from_table.storage_descriptor().unwrap().clone())
        .name(to_table_name)
        .build()
        .map_err(from_aws_build_error)?;

    self.glue
        .create_table()
        .catalog_id(self.aws_properties.glue_catalog_id())
        .database_name(&to_table_db_name)
        .table_input(table_input)
        .send()
        .await
        .map_err(from_aws_sdk_error)?;

    log::info!("Created rename destination table {:?}", dest);

    match self.drop_table(src, false).await {
        Ok(_) => {
            log::info!("Successfully renamed table from {:?} to {:?}", src, dest);
            Ok(())
        }
        Err(e) => {
            // Rollback, delete renamed table
            log::error!(
                "Failed to drop old table {:?} after renaming to {:?}, rollback to use the old table: {}",
                src,
                dest,
                e
            );
            self.glue
                .delete_table()
                .catalog_id(self.aws_properties.glue_catalog_id())
                .database_name(&to_table_db_name)
                .name(&to_table_name)
                .send()
                .await
                .map_err(from_aws_sdk_error)?;
            Err(e)
        }
    }
}
```

This translation assumes that the necessary structs, traits, and methods (such as `self.aws_properties`, `self.glue`, `self.namespace_exists()`, `self.drop_table()`) are available in the Rust implementation. The error handling and logging have been adapted to use Rust's `Result` type and the `log` crate, respectively. The AWS SDK for Rust is used for Glue operations, and the error conversions are handled by the `from_aws_sdk_error` and `from_aws_build_error` functions.</translated function>Here's the translated Rust function based on the provided Java function, Rust function signature, and dependencies:

```rust
async fn rename_table(&self, src: &TableIdent, dest: &TableIdent) -> Result<()> {
    // Check if new namespace exists
    if !self.namespace_exists(&dest.namespace()).await? {
        return Err(Error::new(
            ErrorKind::NoSuchNamespaceError,
            format!(
                "Cannot rename {:?} to {:?} because namespace {:?} does not exist",
                src,
                dest,
                dest.namespace()
            ),
        ));
    }

    // Keep metadata
    let from_table_db_name = convert_to_database(src, self.aws_properties.glue_catalog_skip_name_validation());
    let from_table_name = src.name();
    let to_table_db_name = convert_to_database(dest, self.aws_properties.glue_catalog_skip_name_validation());
    let to_table_name = dest.name();

    let from_table = match self
        .glue
        .get_table()
        .catalog_id(self.aws_properties.glue_catalog_id())
        .database_name(&from_table_db_name)
        .name(&from_table_name)
        .send()
        .await
    {
        Ok(response) => response.table().unwrap(),
        Err(e) => {
            return Err(Error::new(
                ErrorKind::NoSuchTableError,
                format!("Cannot rename {:?} because the table does not exist in Glue: {}", src, e),
            ));
        }
    };

    // Use the same Glue info to create the new table, pointing to the old metadata
    let table_input = TableInput::builder()
        .owner(from_table.owner().unwrap_or_default())
        .table_type(from_table.table_type().unwrap_or_default())
        .parameters(from_table.parameters().unwrap_or_default().clone())
        .storage_descriptor(from_table.storage_descriptor().unwrap().clone())
        .name(to_table_name)
        .build()
        .map_err(from_aws_build_error)?;

    self.glue
        .create_table()
        .catalog_id(self.aws_properties.glue_catalog_id())
        .database_name(&to_table_db_name)
        .table_input(table_input)
        .send()
        .await
        .map_err(from_aws_sdk_error)?;

    log::info!("Created rename destination table {:?}", dest);

    match self.drop_table(src, false).await {
        Ok(_) => {
            log::info!("Successfully renamed table from {:?} to {:?}", src, dest);
            Ok(())
        }
        Err(e) => {
            // Rollback, delete renamed table
            log::error!(
                "Failed to drop old table {:?} after renaming to {:?}, rollback to use the old table: {}",
                src,
                dest,
                e
            );
            self.glue
                .delete_table()
                .catalog_id(self.aws_properties.glue_catalog_id())
                .database_name(&to_table_db_name)
                .name(&to_table_name)
                .send()
                .await
                .map_err(from_aws_sdk_error)?;
            Err(e)
        }
    }
}
```

This translation assumes that the necessary structs, traits, and methods (such as `self.aws_properties`, `self.glue`, `self.namespace_exists()`, `self.drop_table()`) are available in the Rust implementation. The error handling and logging have been adapted to use Rust's `Result` type and the `log` crate, respectively. The AWS SDK for Rust is used for Glue operations, and the error conversions are handled by the `from_aws_sdk_error` and `from_aws_build_error` functions.
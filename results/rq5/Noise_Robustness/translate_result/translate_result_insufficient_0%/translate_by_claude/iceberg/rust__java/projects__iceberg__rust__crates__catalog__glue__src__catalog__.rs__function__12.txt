<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public Table loadTable(SessionContext context, TableIdentifier identifier) {
    checkIdentifierIsValid(identifier);

    MetadataTableType metadataType;
    LoadTableResponse response;
    TableIdentifier loadedIdent;
    try {
      response = loadInternal(context, identifier, snapshotMode);
      loadedIdent = identifier;
      metadataType = null;

    } catch (NoSuchTableException original) {
      metadataType = MetadataTableType.from(identifier.name());
      if (metadataType != null) {
        // attempt to load a metadata table using the identifier's namespace as the base table
        TableIdentifier baseIdent = TableIdentifier.of(identifier.namespace().levels());
        try {
          response = loadInternal(context, baseIdent, snapshotMode);
          loadedIdent = baseIdent;
        } catch (NoSuchTableException ignored) {
          // the base table does not exist
          throw original;
        }
      } else {
        // name is not a metadata table
        throw original;
      }
    }

    TableIdentifier finalIdentifier = loadedIdent;
    AuthSession session = tableSession(response.config(), session(context));
    TableMetadata tableMetadata;

    if (snapshotMode == SnapshotMode.REFS) {
      tableMetadata =
          TableMetadata.buildFrom(response.tableMetadata())
              .withMetadataLocation(response.metadataLocation())
              .setPreviousFileLocation(null)
              .setSnapshotsSupplier(
                  () ->
                      loadInternal(context, finalIdentifier, SnapshotMode.ALL)
                          .tableMetadata()
                          .snapshots())
              .discardChanges()
              .build();
    } else {
      tableMetadata = response.tableMetadata();
    }

    RESTTableOperations ops =
        new RESTTableOperations(
            client,
            paths.table(finalIdentifier),
            session::headers,
            tableFileIO(context, response.config()),
            tableMetadata);

    trackFileIO(ops);

    BaseTable table =
        new BaseTable(
            ops,
            fullTableName(finalIdentifier),
            metricsReporter(paths.metrics(finalIdentifier), session::headers));
    if (metadataType != null) {
      return MetadataTableUtils.createMetadataTableInstance(table, metadataType);
    }

    return table;
  }
</java function>
<rust function signature>
async fn load_table(&self, table: &TableIdent) -> Result<Table> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use async_trait::async_trait;
use aws_sdk_glue::types::TableInput;
use iceberg::io::FileIO;
use iceberg::spec::{TableMetadata, TableMetadataBuilder};
use iceberg::table::Table;
use iceberg::{
    Catalog, Error, ErrorKind, Namespace, NamespaceIdent, Result, TableCommit, TableCreation,
    TableIdent,
};
use std::{collections::HashMap, fmt::Debug};
use typed_builder::TypedBuilder;
use crate::error::{from_aws_build_error, from_aws_sdk_error};
use crate::utils::{
    convert_to_database, convert_to_glue_table, convert_to_namespace, create_metadata_location,
    create_sdk_config, get_default_table_location, get_metadata_location, validate_namespace,
};
use crate::with_catalog_id;

</rust function dependency libraries>

</message>
<function>
async fn load_table(&self, table: &TableIdent) -> Result<Table> {
        let db_name = validate_namespace(table.namespace())?;
        let table_name = table.name();

        let builder = self
            .client
            .0
            .get_table()
            .database_name(&db_name)
            .name(table_name);
        let builder = with_catalog_id!(builder, self.config);

        let glue_table_output = builder.send().await.map_err(from_aws_sdk_error)?;

        match glue_table_output.table() {
            None => Err(Error::new(
                ErrorKind::Unexpected,
                format!(
                    "Table object for database: {} and table: {} does not exist",
                    db_name, table_name
                ),
            )),
            Some(table) => {
                let metadata_location = get_metadata_location(&table.parameters)?;

                let input_file = self.file_io.new_input(&metadata_location)?;
                let metadata_content = input_file.read().await?;
                let metadata = serde_json::from_slice::<TableMetadata>(&metadata_content)?;

                let table = Table::builder()
                    .file_io(self.file_io())
                    .metadata_location(metadata_location)
                    .metadata(metadata)
                    .identifier(TableIdent::new(
                        NamespaceIdent::new(db_name),
                        table_name.to_owned(),
                    ))
                    .build();

                Ok(table)
            }
        }
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Java function, Rust function signature, and dependencies:

```rust
async fn load_table(&self, table: &TableIdent) -> Result<Table> {
    self.check_identifier_is_valid(table)?;

    let mut metadata_type = None;
    let response = match self.load_internal(table, self.snapshot_mode).await {
        Ok(resp) => resp,
        Err(Error::NoSuchTable(original)) => {
            metadata_type = MetadataTableType::from(table.name());
            if let Some(metadata_type) = metadata_type {
                let base_ident = TableIdent::new(table.namespace().levels());
                match self.load_internal(&base_ident, self.snapshot_mode).await {
                    Ok(resp) => resp,
                    Err(_) => return Err(original),
                }
            } else {
                return Err(original);
            }
        }
        Err(e) => return Err(e),
    };

    let final_identifier = table;
    let session = self.table_session(&response.config(), self.session());
    let table_metadata = if self.snapshot_mode == SnapshotMode::REFS {
        TableMetadataBuilder::from(response.table_metadata())
            .with_metadata_location(response.metadata_location())
            .set_previous_file_location(None)
            .set_snapshots_supplier(Box::new(move || {
                Box::pin(async move {
                    self.load_internal(final_identifier, SnapshotMode::ALL)
                        .await
                        .map(|resp| resp.table_metadata().snapshots())
                })
            }))
            .discard_changes()
            .build()?
    } else {
        response.table_metadata()
    };

    let ops = RESTTableOperations::new(
        self.client.clone(),
        self.paths.table(final_identifier),
        Box::new(move || session.headers()),
        self.table_file_io(&response.config()),
        table_metadata,
    );

    self.track_file_io(&ops);

    let table = BaseTable::new(
        ops,
        self.full_table_name(final_identifier),
        self.metrics_reporter(
            self.paths.metrics(final_identifier),
            Box::new(move || session.headers()),
        ),
    );

    if let Some(metadata_type) = metadata_type {
        Ok(MetadataTableUtils::create_metadata_table_instance(table, metadata_type))
    } else {
        Ok(table)
    }
}
```

Note that this translation assumes the existence of certain types and methods that were not provided in the given context. You may need to adjust some parts of the code to match your exact Rust implementation and type definitions. Also, error handling and some asynchronous operations have been adjusted to fit Rust's async/await paradigm and `Result` type.</translated function>Here's the translated Rust function based on the provided Java function, Rust function signature, and dependencies:

```rust
async fn load_table(&self, table: &TableIdent) -> Result<Table> {
    self.check_identifier_is_valid(table)?;

    let mut metadata_type = None;
    let response = match self.load_internal(table, self.snapshot_mode).await {
        Ok(resp) => resp,
        Err(Error::NoSuchTable(original)) => {
            metadata_type = MetadataTableType::from(table.name());
            if let Some(metadata_type) = metadata_type {
                let base_ident = TableIdent::new(table.namespace().levels());
                match self.load_internal(&base_ident, self.snapshot_mode).await {
                    Ok(resp) => resp,
                    Err(_) => return Err(original),
                }
            } else {
                return Err(original);
            }
        }
        Err(e) => return Err(e),
    };

    let final_identifier = table;
    let session = self.table_session(&response.config(), self.session());
    let table_metadata = if self.snapshot_mode == SnapshotMode::REFS {
        TableMetadataBuilder::from(response.table_metadata())
            .with_metadata_location(response.metadata_location())
            .set_previous_file_location(None)
            .set_snapshots_supplier(Box::new(move || {
                Box::pin(async move {
                    self.load_internal(final_identifier, SnapshotMode::ALL)
                        .await
                        .map(|resp| resp.table_metadata().snapshots())
                })
            }))
            .discard_changes()
            .build()?
    } else {
        response.table_metadata()
    };

    let ops = RESTTableOperations::new(
        self.client.clone(),
        self.paths.table(final_identifier),
        Box::new(move || session.headers()),
        self.table_file_io(&response.config()),
        table_metadata,
    );

    self.track_file_io(&ops);

    let table = BaseTable::new(
        ops,
        self.full_table_name(final_identifier),
        self.metrics_reporter(
            self.paths.metrics(final_identifier),
            Box::new(move || session.headers()),
        ),
    );

    if let Some(metadata_type) = metadata_type {
        Ok(MetadataTableUtils::create_metadata_table_instance(table, metadata_type))
    } else {
        Ok(table)
    }
}
```

Note that this translation assumes the existence of certain types and methods that were not provided in the given context. You may need to adjust some parts of the code to match your exact Rust implementation and type definitions. Also, error handling and some asynchronous operations have been adjusted to fit Rust's async/await paradigm and `Result` type.
<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public Builder upgradeFormatVersion(int newFormatVersion) {
      Preconditions.checkArgument(
          newFormatVersion <= SUPPORTED_TABLE_FORMAT_VERSION,
          "Cannot upgrade table to unsupported format version: v%s (supported: v%s)",
          newFormatVersion,
          SUPPORTED_TABLE_FORMAT_VERSION);
      Preconditions.checkArgument(
          newFormatVersion >= formatVersion,
          "Cannot downgrade v%s table to v%s",
          formatVersion,
          newFormatVersion);

      if (newFormatVersion == formatVersion) {
        return this;
      }

      this.formatVersion = newFormatVersion;
      changes.add(new MetadataUpdate.UpgradeFormatVersion(newFormatVersion));

      return this;
    }
</java function>
<rust function signature>
pub fn upgrade_table_version(mut self, format_version: FormatVersion) -> Result<Self> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use crate::error::Result;
use crate::spec::{FormatVersion, NullOrder, SortDirection, SortField, SortOrder, Transform};
use crate::table::Table;
use crate::TableUpdate::UpgradeFormatVersion;
use crate::{Catalog, Error, ErrorKind, TableCommit, TableRequirement, TableUpdate};
use std::cmp::Ordering;
use std::collections::HashMap;
use std::mem::discriminant;
use crate::io::FileIO;
use crate::spec::{FormatVersion, TableMetadata};
use crate::table::Table;
use crate::transaction::Transaction;
use crate::{TableIdent, TableRequirement, TableUpdate};
use std::collections::HashMap;
use std::fs::File;
use std::io::BufReader;

</rust function dependency libraries>

</message>
<function>
pub fn upgrade_table_version(mut self, format_version: FormatVersion) -> Result<Self> {
        let current_version = self.table.metadata().format_version();
        match current_version.cmp(&format_version) {
            Ordering::Greater => {
                return Err(Error::new(
                    ErrorKind::DataInvalid,
                    format!(
                        "Cannot downgrade table version from {} to {}",
                        current_version, format_version
                    ),
                ));
            }
            Ordering::Less => {
                self.append_updates(vec![UpgradeFormatVersion { format_version }])?;
            }
            Ordering::Equal => {
                // Do nothing.
            }
        }
        Ok(self)
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Java function, Rust function signature, and dependencies:

```rust
pub fn upgrade_table_version(mut self, format_version: FormatVersion) -> Result<Self> {
    if format_version > FormatVersion::V2 {
        return Err(Error::new(
            ErrorKind::InvalidArgument,
            format!(
                "Cannot upgrade table to unsupported format version: v{:?} (supported: v{:?})",
                format_version,
                FormatVersion::V2
            ),
        ));
    }

    if format_version < self.metadata.format_version {
        return Err(Error::new(
            ErrorKind::InvalidArgument,
            format!(
                "Cannot downgrade v{:?} table to v{:?}",
                self.metadata.format_version,
                format_version
            ),
        ));
    }

    if format_version == self.metadata.format_version {
        return Ok(self);
    }

    self.metadata.format_version = format_version;
    self.updates.push(TableUpdate::UpgradeFormatVersion(format_version));

    Ok(self)
}
```

This Rust function follows the provided signature and uses the available dependencies and libraries. It performs the same checks and operations as the Java function, including:

1. Checking if the new format version is supported.
2. Ensuring that downgrading is not allowed.
3. Returning early if the new version is the same as the current version.
4. Updating the format version and adding a corresponding `TableUpdate`.

Note that some assumptions were made due to the limited context:

- `self.metadata` is assumed to exist and have a `format_version` field.
- `self.updates` is assumed to be a `Vec<TableUpdate>`.
- `FormatVersion::V2` is assumed to be the highest supported version.

If any of these assumptions are incorrect, you may need to adjust the code accordingly.</translated function>Here's the translated Rust function based on the provided Java function, Rust function signature, and dependencies:

```rust
pub fn upgrade_table_version(mut self, format_version: FormatVersion) -> Result<Self> {
    if format_version > FormatVersion::V2 {
        return Err(Error::new(
            ErrorKind::InvalidArgument,
            format!(
                "Cannot upgrade table to unsupported format version: v{:?} (supported: v{:?})",
                format_version,
                FormatVersion::V2
            ),
        ));
    }

    if format_version < self.metadata.format_version {
        return Err(Error::new(
            ErrorKind::InvalidArgument,
            format!(
                "Cannot downgrade v{:?} table to v{:?}",
                self.metadata.format_version,
                format_version
            ),
        ));
    }

    if format_version == self.metadata.format_version {
        return Ok(self);
    }

    self.metadata.format_version = format_version;
    self.updates.push(TableUpdate::UpgradeFormatVersion(format_version));

    Ok(self)
}
```

This Rust function follows the provided signature and uses the available dependencies and libraries. It performs the same checks and operations as the Java function, including:

1. Checking if the new format version is supported.
2. Ensuring that downgrading is not allowed.
3. Returning early if the new version is the same as the current version.
4. Updating the format version and adding a corresponding `TableUpdate`.

Note that some assumptions were made due to the limited context:

- `self.metadata` is assumed to exist and have a `format_version` field.
- `self.updates` is assumed to be a `Vec<TableUpdate>`.
- `FormatVersion::V2` is assumed to be the highest supported version.

If any of these assumptions are incorrect, you may need to adjust the code accordingly.
<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public Builder setProperties(Map<String, String> props) {
      Preconditions.checkNotNull(props, "Invalid properties map: null");
      Preconditions.checkArgument(!props.containsKey(null), "Invalid property: null");
      Preconditions.checkArgument(
          !props.containsValue(null),
          "Invalid value for properties %s: null",
          Maps.filterValues(props, Objects::isNull).keySet());
      properties.putAll(props);
      return this;
    }
</java function>
<rust function signature>
pub fn set_properties(mut self, props: HashMap<String, String>) -> Result<Self> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use crate::error::Result;
use crate::spec::{FormatVersion, NullOrder, SortDirection, SortField, SortOrder, Transform};
use crate::table::Table;
use crate::TableUpdate::UpgradeFormatVersion;
use crate::{Catalog, Error, ErrorKind, TableCommit, TableRequirement, TableUpdate};
use std::cmp::Ordering;
use std::collections::HashMap;
use std::mem::discriminant;
use crate::io::FileIO;
use crate::spec::{FormatVersion, TableMetadata};
use crate::table::Table;
use crate::transaction::Transaction;
use crate::{TableIdent, TableRequirement, TableUpdate};
use std::collections::HashMap;
use std::fs::File;
use std::io::BufReader;

</rust function dependency libraries>

</message>
<function>
pub fn set_properties(mut self, props: HashMap<String, String>) -> Result<Self> {
        self.append_updates(vec![TableUpdate::SetProperties { updates: props }])?;
        Ok(self)
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Java function, Rust function signature, and dependencies:

pub fn set_properties(mut self, props: HashMap<String, String>) -> Result<Self> {
    if props.is_empty() {
        return Err(Error::new(ErrorKind::InvalidArgument, "Invalid properties map: empty"));
    }

    if props.contains_key("") {
        return Err(Error::new(ErrorKind::InvalidArgument, "Invalid property: empty string"));
    }

    if props.values().any(|v| v.is_empty()) {
        let empty_keys: Vec<_> = props.iter()
            .filter(|(_, v)| v.is_empty())
            .map(|(k, _)| k)
            .collect();
        return Err(Error::new(
            ErrorKind::InvalidArgument,
            format!("Invalid value for properties {:?}: empty string", empty_keys)
        ));
    }

    self.properties.extend(props);
    Ok(self)
}</translated function>Here's the translated Rust function based on the provided Java function, Rust function signature, and dependencies:

pub fn set_properties(mut self, props: HashMap<String, String>) -> Result<Self> {
    if props.is_empty() {
        return Err(Error::new(ErrorKind::InvalidArgument, "Invalid properties map: empty"));
    }

    if props.contains_key("") {
        return Err(Error::new(ErrorKind::InvalidArgument, "Invalid property: empty string"));
    }

    if props.values().any(|v| v.is_empty()) {
        let empty_keys: Vec<_> = props.iter()
            .filter(|(_, v)| v.is_empty())
            .map(|(k, _)| k)
            .collect();
        return Err(Error::new(
            ErrorKind::InvalidArgument,
            format!("Invalid value for properties {:?}: empty string", empty_keys)
        ));
    }

    self.properties.extend(props);
    Ok(self)
}
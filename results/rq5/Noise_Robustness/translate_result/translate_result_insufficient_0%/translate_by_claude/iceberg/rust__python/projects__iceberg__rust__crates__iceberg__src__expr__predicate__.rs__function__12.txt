<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def bind(self, schema: Schema, case_sensitive: bool = True) -> BoundSetPredicate[L]:
        bound_term = self.term.bind(schema, case_sensitive)
        return self.as_bound(bound_term, {lit.to(bound_term.ref().field.field_type) for lit in self.literals})
</python function>
<rust function signature>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::fmt::{Debug, Display, Formatter};
use std::ops::Not;
use array_init::array_init;
use fnv::FnvHashSet;
use itertools::Itertools;
use crate::error::Result;
use crate::expr::{Bind, BoundReference, PredicateOperator, Reference};
use crate::spec::{Datum, SchemaRef};
use crate::{Error, ErrorKind};
use std::ops::Not;
use std::sync::Arc;
use crate::expr::Bind;
use crate::expr::Predicate::{AlwaysFalse, AlwaysTrue};
use crate::expr::Reference;
use crate::spec::Datum;
use crate::spec::{NestedField, PrimitiveType, Schema, SchemaRef, Type};

</rust function dependency libraries>

</message>
<function>
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
        let bound_term = self.term.bind(schema.clone(), case_sensitive)?;
        Ok(SetExpression::new(
            self.op,
            bound_term,
            self.literals.clone(),
        ))
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function and Rust dependencies:

```rust
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
    let bound_term = self.term.bind(schema.clone(), case_sensitive)?;
    let bound_literals = self.literals
        .iter()
        .map(|lit| lit.to(bound_term.ref_().field.field_type()))
        .collect::<Result<FnvHashSet<_>>>()?;

    Ok(self.as_bound(bound_term, bound_literals))
}
```

This translation assumes that:

1. `self.term` implements the `Bind` trait.
2. `self.literals` is an iterable collection of literals.
3. The `to` method on literals returns a `Result`.
4. `self.as_bound` is a method that takes a bound term and a set of bound literals.
5. `FnvHashSet` is used instead of a regular `HashSet` for better performance.

Note that error handling has been added using the `Result` type, as indicated by the function signature. The `?` operator is used to propagate errors.</translated function>Here's the translated Rust function based on the provided Python function and Rust dependencies:

```rust
fn bind(&self, schema: SchemaRef, case_sensitive: bool) -> Result<Self::Bound> {
    let bound_term = self.term.bind(schema.clone(), case_sensitive)?;
    let bound_literals = self.literals
        .iter()
        .map(|lit| lit.to(bound_term.ref_().field.field_type()))
        .collect::<Result<FnvHashSet<_>>>()?;

    Ok(self.as_bound(bound_term, bound_literals))
}
```

This translation assumes that:

1. `self.term` implements the `Bind` trait.
2. `self.literals` is an iterable collection of literals.
3. The `to` method on literals returns a `Result`.
4. `self.as_bound` is a method that takes a bound term and a set of bound literals.
5. `FnvHashSet` is used instead of a regular `HashSet` for better performance.

Note that error handling has been added using the `Result` type, as indicated by the function signature. The `?` operator is used to propagate errors.
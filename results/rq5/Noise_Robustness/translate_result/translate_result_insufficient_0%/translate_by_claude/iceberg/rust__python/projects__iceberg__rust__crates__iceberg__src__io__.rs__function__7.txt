<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def delete(self, location: Union[str, InputFile, OutputFile]) -> None:
        """Delete the file at the given location.

        Args:
            location (Union[str, InputFile, OutputFile]): The URI to the file--if an InputFile instance or an OutputFile instance is provided,
                the location attribute for that instance is used as the location to delete.

        Raises:
            FileNotFoundError: When the file at the provided location does not exist.
            PermissionError: If the file at the provided location cannot be accessed due to a permission error such as
                an AWS error code 15.
        """
        str_location = location.location if isinstance(location, (InputFile, OutputFile)) else location
        scheme, netloc, path = self.parse_location(str_location)
        fs = self.fs_by_scheme(scheme, netloc)

        try:
            fs.delete_file(path)
        except:
            raise
</python function>
<rust function signature>
pub async fn delete(&self, path: impl AsRef<str>) -> Result<()> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use bytes::Bytes;
use std::ops::Range;
use std::{collections::HashMap, sync::Arc};
use crate::{error::Result, Error, ErrorKind};
use once_cell::sync::Lazy;
use opendal::{Operator, Scheme};
use url::Url;
use std::io::Write;
use std::{fs::File, path::Path};
use futures::io::AllowStdIo;
use futures::AsyncReadExt;
use tempfile::TempDir;
use super::{FileIO, FileIOBuilder};

</rust function dependency libraries>

</message>
<function>
pub async fn delete(&self, path: impl AsRef<str>) -> Result<()> {
        let (op, relative_path) = self.inner.create_operator(&path)?;
        Ok(op.delete(relative_path).await?)
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, and dependencies:

```rust
pub async fn delete(&self, path: impl AsRef<str>) -> Result<()> {
    let str_location = path.as_ref();
    let (scheme, netloc, path) = self.parse_location(str_location)?;
    let fs = self.fs_by_scheme(&scheme, &netloc)?;

    match fs.delete(&path).await {
        Ok(_) => Ok(()),
        Err(e) => match e.kind() {
            ErrorKind::NotFound => Err(Error::new(ErrorKind::NotFound, "File not found")),
            ErrorKind::PermissionDenied => Err(Error::new(ErrorKind::PermissionDenied, "Permission denied")),
            _ => Err(e),
        },
    }
}
```

This Rust implementation follows the provided function signature and uses the available dependencies. It handles the deletion of a file at the given location and maps potential errors to appropriate Rust error types. The function is marked as `async` to match the signature and uses the `Result` type for error handling.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, and dependencies:

```rust
pub async fn delete(&self, path: impl AsRef<str>) -> Result<()> {
    let str_location = path.as_ref();
    let (scheme, netloc, path) = self.parse_location(str_location)?;
    let fs = self.fs_by_scheme(&scheme, &netloc)?;

    match fs.delete(&path).await {
        Ok(_) => Ok(()),
        Err(e) => match e.kind() {
            ErrorKind::NotFound => Err(Error::new(ErrorKind::NotFound, "File not found")),
            ErrorKind::PermissionDenied => Err(Error::new(ErrorKind::PermissionDenied, "Permission denied")),
            _ => Err(e),
        },
    }
}
```

This Rust implementation follows the provided function signature and uses the available dependencies. It handles the deletion of a file at the given location and maps potential errors to appropriate Rust error types. The function is marked as `async` to match the signature and uses the `Result` type for error handling.
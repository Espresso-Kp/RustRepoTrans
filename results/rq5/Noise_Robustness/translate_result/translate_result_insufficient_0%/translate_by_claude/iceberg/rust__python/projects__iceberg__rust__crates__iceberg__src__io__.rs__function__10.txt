<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def new_output(self, location: str) -> FsspecOutputFile:
        """Get an FsspecOutputFile instance to write bytes to the file at the given location.

        Args:
            location (str): A URI or a path to a local file.

        Returns:
            FsspecOutputFile: An FsspecOutputFile instance for the given location.
        """
        uri = urlparse(location)
        fs = self.get_fs(uri.scheme)
        return FsspecOutputFile(location=location, fs=fs)
</python function>
<rust function signature>
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use bytes::Bytes;
use std::ops::Range;
use std::{collections::HashMap, sync::Arc};
use crate::{error::Result, Error, ErrorKind};
use once_cell::sync::Lazy;
use opendal::{Operator, Scheme};
use url::Url;
use std::io::Write;
use std::{fs::File, path::Path};
use futures::io::AllowStdIo;
use futures::AsyncReadExt;
use tempfile::TempDir;
use super::{FileIO, FileIOBuilder};

</rust function dependency libraries>

</message>
<function>
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> {
        let (op, relative_path) = self.inner.create_operator(&path)?;
        let path = path.as_ref().to_string();
        let relative_path_pos = path.len() - relative_path.len();
        Ok(OutputFile {
            op,
            path,
            relative_path_pos,
        })
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, and dependencies:

```rust
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> {
    let location = path.as_ref();
    let url = Url::parse(location).map_err(|e| Error::new(ErrorKind::InvalidInput, e))?;
    
    let scheme = url.scheme();
    let fs = self.get_fs(scheme)?;
    
    Ok(OutputFile::new(location.to_string(), fs))
}
```

This translation assumes that:

1. `OutputFile` is equivalent to `FsspecOutputFile` in the Python version.
2. `self.get_fs()` method exists and returns a `Result<Operator>`.
3. `OutputFile::new()` takes a `String` and an `Operator` as arguments.

The function uses the `Url` type from the `url` crate to parse the input path, extracts the scheme, and then uses it to get the appropriate filesystem operator. It then creates and returns a new `OutputFile` instance.

Note that error handling has been added to conform to Rust's `Result` type, as specified in the function signature. The `Error` and `ErrorKind` types are assumed to be available from the crate's error module.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, and dependencies:

```rust
pub fn new_output(&self, path: impl AsRef<str>) -> Result<OutputFile> {
    let location = path.as_ref();
    let url = Url::parse(location).map_err(|e| Error::new(ErrorKind::InvalidInput, e))?;
    
    let scheme = url.scheme();
    let fs = self.get_fs(scheme)?;
    
    Ok(OutputFile::new(location.to_string(), fs))
}
```

This translation assumes that:

1. `OutputFile` is equivalent to `FsspecOutputFile` in the Python version.
2. `self.get_fs()` method exists and returns a `Result<Operator>`.
3. `OutputFile::new()` takes a `String` and an `Operator` as arguments.

The function uses the `Url` type from the `url` crate to parse the input path, extracts the scheme, and then uses it to get the appropriate filesystem operator. It then creates and returns a new `OutputFile` instance.

Note that error handling has been added to conform to Rust's `Result` type, as specified in the function signature. The `Error` and `ErrorKind` types are assumed to be available from the crate's error module.
<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def __new__(cls, left: BooleanExpression, right: BooleanExpression) -> BooleanExpression:  # type: ignore

        if left is AlwaysTrue() or right is AlwaysTrue():
            return AlwaysTrue()
        elif left is AlwaysFalse():
            return right
        elif right is AlwaysFalse():
            return left
        else:
            obj = super().__new__(cls)
            obj.left = left
            obj.right = right
            return obj
</python function>
<rust function signature>
fn or(
        &mut self,
        mut lhs: Box<PredicateResult>,
        mut rhs: Box<PredicateResult>,
    ) -> Result<Box<PredicateResult>> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use crate::error::Result;
use arrow_arith::boolean::{and, is_not_null, is_null, not, or};
use arrow_array::{ArrayRef, BooleanArray, RecordBatch};
use arrow_ord::cmp::{eq, gt, gt_eq, lt, lt_eq, neq};
use arrow_schema::{ArrowError, DataType, SchemaRef as ArrowSchemaRef};
use async_stream::try_stream;
use bytes::Bytes;
use fnv::FnvHashSet;
use futures::future::BoxFuture;
use futures::stream::StreamExt;
use futures::{try_join, TryFutureExt};
use parquet::arrow::arrow_reader::{ArrowPredicateFn, RowFilter};
use parquet::arrow::async_reader::{AsyncFileReader, MetadataLoader};
use parquet::arrow::{ParquetRecordBatchStreamBuilder, ProjectionMask, PARQUET_FIELD_ID_META_KEY};
use parquet::file::metadata::ParquetMetaData;
use parquet::schema::types::{SchemaDescriptor, Type as ParquetType};
use std::collections::{HashMap, HashSet};
use std::ops::Range;
use std::str::FromStr;
use std::sync::Arc;
use crate::arrow::{arrow_schema_to_schema, get_arrow_datum};
use crate::expr::visitors::bound_predicate_visitor::{visit, BoundPredicateVisitor};
use crate::expr::{BoundPredicate, BoundReference};
use crate::io::{FileIO, FileMetadata, FileRead};
use crate::scan::{ArrowRecordBatchStream, FileScanTaskStream};
use crate::spec::{Datum, SchemaRef};
use crate::{Error, ErrorKind};
use crate::arrow::reader::CollectFieldIdVisitor;
use crate::expr::visitors::bound_predicate_visitor::visit;
use crate::expr::{Bind, Reference};
use crate::spec::{NestedField, PrimitiveType, Schema, SchemaRef, Type};
use std::collections::HashSet;
use std::sync::Arc;

</rust function dependency libraries>

</message>
<function>
fn or(
        &mut self,
        mut lhs: Box<PredicateResult>,
        mut rhs: Box<PredicateResult>,
    ) -> Result<Box<PredicateResult>> {
        Ok(Box::new(move |batch| {
            let left = lhs(batch.clone())?;
            let right = rhs(batch)?;
            or(&left, &right)
        }))
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, and dependencies:

```rust
fn or(
    &mut self,
    mut lhs: Box<PredicateResult>,
    mut rhs: Box<PredicateResult>,
) -> Result<Box<PredicateResult>> {
    if lhs.is_always_true() || rhs.is_always_true() {
        Ok(Box::new(PredicateResult::AlwaysTrue))
    } else if lhs.is_always_false() {
        Ok(rhs)
    } else if rhs.is_always_false() {
        Ok(lhs)
    } else {
        Ok(Box::new(PredicateResult::Or {
            left: lhs,
            right: rhs,
        }))
    }
}
```

Note that this translation assumes the existence of a `PredicateResult` enum with variants `AlwaysTrue`, `AlwaysFalse`, and `Or`. It also assumes that `PredicateResult` implements methods `is_always_true()` and `is_always_false()`. These assumptions are made based on the original Python function's logic and the provided Rust function signature.

The function uses the `Result` type from the `crate::error::Result` import, as specified in the dependencies. The overall structure and logic of the original Python function are preserved in this Rust translation.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, and dependencies:

```rust
fn or(
    &mut self,
    mut lhs: Box<PredicateResult>,
    mut rhs: Box<PredicateResult>,
) -> Result<Box<PredicateResult>> {
    if lhs.is_always_true() || rhs.is_always_true() {
        Ok(Box::new(PredicateResult::AlwaysTrue))
    } else if lhs.is_always_false() {
        Ok(rhs)
    } else if rhs.is_always_false() {
        Ok(lhs)
    } else {
        Ok(Box::new(PredicateResult::Or {
            left: lhs,
            right: rhs,
        }))
    }
}
```

Note that this translation assumes the existence of a `PredicateResult` enum with variants `AlwaysTrue`, `AlwaysFalse`, and `Or`. It also assumes that `PredicateResult` implements methods `is_always_true()` and `is_always_false()`. These assumptions are made based on the original Python function's logic and the provided Rust function signature.

The function uses the `Result` type from the `crate::error::Result` import, as specified in the dependencies. The overall structure and logic of the original Python function are preserved in this Rust translation.
<message>
please translate the given python function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<python function>
def get(self, peer_id: ID, key: str) -> Any:
        """
        :param peer_id: peer ID to get peer data for
        :param key: the key to search value for
        :return: value corresponding to the key
        :raise PeerStoreError: if peer ID or value not found
        """
        if peer_id in self.peer_data_map:
            try:
                val = self.peer_data_map[peer_id].get_metadata(key)
            except PeerDataError as error:
                raise PeerStoreError() from error
            return val
        raise PeerStoreError("peer ID not found")
</python function>
<rust function signature>
fn get(&self, k: &Key) -> Option<Cow<'_, Record>> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use super::*;
use crate::kbucket;
use smallvec::SmallVec;
use std::collections::{hash_map, hash_set, HashMap, HashSet};
use std::iter;
use super::*;
use crate::SHA_256_MH;
use quickcheck::*;
use rand::Rng;

</rust function dependency libraries>

</message>
<function>
fn get(&self, k: &Key) -> Option<Cow<'_, Record>> {
        self.records.get(k).map(Cow::Borrowed)
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Python function, Rust function signature, and dependencies:

```rust
fn get(&self, k: &Key) -> Option<Cow<'_, Record>> {
    match self.peer_data_map.get(k) {
        Some(peer_data) => {
            match peer_data.get_metadata() {
                Ok(val) => Some(Cow::Borrowed(val)),
                Err(_) => None,
            }
        }
        None => None,
    }
}
```

Note that this translation makes some assumptions and adaptations:

1. The `peer_id` parameter from the Python function is replaced with `k: &Key` as per the Rust function signature.
2. The return type is changed to `Option<Cow<'_, Record>>` as specified in the Rust function signature.
3. The `PeerStoreError` is not explicitly raised. Instead, the function returns `None` when the key is not found or when there's an error retrieving the metadata.
4. The `get_metadata` method is assumed to return a `Result<&Record, SomeErrorType>`.
5. `Cow::Borrowed` is used to wrap the successful result, assuming `Record` implements the necessary traits.

This translation aims to maintain the core logic of the original Python function while adapting it to the provided Rust function signature and idiomatic Rust error handling.</translated function>Here's the translated Rust function based on the provided Python function, Rust function signature, and dependencies:

```rust
fn get(&self, k: &Key) -> Option<Cow<'_, Record>> {
    match self.peer_data_map.get(k) {
        Some(peer_data) => {
            match peer_data.get_metadata() {
                Ok(val) => Some(Cow::Borrowed(val)),
                Err(_) => None,
            }
        }
        None => None,
    }
}
```

Note that this translation makes some assumptions and adaptations:

1. The `peer_id` parameter from the Python function is replaced with `k: &Key` as per the Rust function signature.
2. The return type is changed to `Option<Cow<'_, Record>>` as specified in the Rust function signature.
3. The `PeerStoreError` is not explicitly raised. Instead, the function returns `None` when the key is not found or when there's an error retrieving the metadata.
4. The `get_metadata` method is assumed to return a `Result<&Record, SomeErrorType>`.
5. `Cow::Borrowed` is used to wrap the successful result, assuming `Record` implements the necessary traits.

This translation aims to maintain the core logic of the original Python function while adapting it to the provided Rust function signature and idiomatic Rust error handling.
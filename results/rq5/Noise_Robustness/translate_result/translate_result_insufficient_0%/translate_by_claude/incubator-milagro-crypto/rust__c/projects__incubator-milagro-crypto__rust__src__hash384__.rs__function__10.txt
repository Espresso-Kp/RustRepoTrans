<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
void HASH384_init(hash384 *sh)
{
    /* re-initialise */
    for (int i=0; i<80; i++) sh->w[i]=0;
    sh->length[0]=sh->length[1]=0;
    sh->h[0]=H8_512;
    sh->h[1]=H9_512;
    sh->h[2]=HA_512;
    sh->h[3]=HB_512;
    sh->h[4]=HC_512;
    sh->h[5]=HD_512;
    sh->h[6]=HE_512;
    sh->h[7]=HF_512;


}
</c function>
<rust function signature>
pub fn init(&mut self) 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use super::*;

</rust function dependency libraries>

</message>
<function>
pub fn init(&mut self) {
        // initialise
        for i in 0..64 {
            self.w[i] = 0
        }
        self.length[0] = 0;
        self.length[1] = 0;
        self.h[0] = HASH384_H0;
        self.h[1] = HASH384_H1;
        self.h[2] = HASH384_H2;
        self.h[3] = HASH384_H3;
        self.h[4] = HASH384_H4;
        self.h[5] = HASH384_H5;
        self.h[6] = HASH384_H6;
        self.h[7] = HASH384_H7;
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function and Rust function signature:

```rust
pub fn init(&mut self) {
    // Re-initialize
    self.w = [0; 80];
    self.length = [0; 2];
    self.h[0] = H8_512;
    self.h[1] = H9_512;
    self.h[2] = HA_512;
    self.h[3] = HB_512;
    self.h[4] = HC_512;
    self.h[5] = HD_512;
    self.h[6] = HE_512;
    self.h[7] = HF_512;
}
```

This translation assumes that the struct containing this method has fields `w`, `length`, and `h` that correspond to the fields in the C `hash384` struct. It also assumes that the constants `H8_512`, `H9_512`, `HA_512`, `HB_512`, `HC_512`, `HD_512`, `HE_512`, and `HF_512` are defined in the same scope or imported from a module.

The function initializes the `w` array with zeros, sets the `length` array to zeros, and initializes the `h` array with the provided constants.</translated function>Here's the translated Rust function based on the provided C function and Rust function signature:

```rust
pub fn init(&mut self) {
    // Re-initialize
    self.w = [0; 80];
    self.length = [0; 2];
    self.h[0] = H8_512;
    self.h[1] = H9_512;
    self.h[2] = HA_512;
    self.h[3] = HB_512;
    self.h[4] = HC_512;
    self.h[5] = HD_512;
    self.h[6] = HE_512;
    self.h[7] = HF_512;
}
```

This translation assumes that the struct containing this method has fields `w`, `length`, and `h` that correspond to the fields in the C `hash384` struct. It also assumes that the constants `H8_512`, `H9_512`, `HA_512`, `HB_512`, `HC_512`, `HD_512`, `HE_512`, and `HF_512` are defined in the same scope or imported from a module.

The function initializes the `w` array with zeros, sets the `length` array to zeros, and initializes the `h` array with the provided constants.
<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public void seed(int rawlen,byte[] raw)
	{ /* initialise from at least 128 byte string of raw random entropy */
		int i;
		byte [] digest;
		byte [] b=new byte[4];
		HASH256 sh=new HASH256();
		pool_ptr=0;
		for (i=0;i<NK;i++) ira[i]=0;
		if (rawlen>0)
		{
			for (i=0;i<rawlen;i++)
				sh.process(raw[i]);
			digest=sh.hash();

/* initialise PRNG from distilled randomness */

			for (i=0;i<8;i++) 
			{
				b[0]=digest[4*i]; b[1]=digest[4*i+1]; b[2]=digest[4*i+2]; b[3]=digest[4*i+3];
				sirand(pack(b));
			}
		}
		fill_pool();
	}
</java function>
<rust function signature>
pub fn seed(&mut self, rawlen: usize, raw: &[u8]) 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use crate::hash256::HASH256;

</rust function dependency libraries>

</message>
<function>
pub fn seed(&mut self, rawlen: usize, raw: &[u8]) {
        /* initialise from at least 128 byte string of raw random entropy */
        let mut b: [u8; 4] = [0; 4];
        let mut sh = HASH256::new();
        self.pool_ptr = 0;

        for i in 0..RAND_NK {
            self.ira[i] = 0
        }
        if rawlen > 0 {
            for i in 0..rawlen {
                sh.process(raw[i]);
            }
            let digest = sh.hash();

            /* initialise PRNG from distilled randomness */

            for i in 0..8 {
                b[0] = digest[4 * i];
                b[1] = digest[4 * i + 1];
                b[2] = digest[4 * i + 2];
                b[3] = digest[4 * i + 3];
                self.sirand(RAND::pack(b));
            }
        }
        self.fill_pool();
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Java function, Rust function signature, and dependencies:

```rust
pub fn seed(&mut self, rawlen: usize, raw: &[u8]) {
    let mut sh = HASH256::new();
    self.pool_ptr = 0;
    for i in 0..self.NK {
        self.ira[i] = 0;
    }

    if rawlen > 0 {
        for &byte in raw.iter() {
            sh.process(byte);
        }
        let digest = sh.hash();

        // Initialize PRNG from distilled randomness
        for i in 0..8 {
            let b: [u8; 4] = [
                digest[4 * i],
                digest[4 * i + 1],
                digest[4 * i + 2],
                digest[4 * i + 3],
            ];
            self.sirand(self.pack(&b));
        }
    }

    self.fill_pool();
}
```

Note: This translation assumes that `self.NK`, `self.ira`, `self.sirand()`, `self.pack()`, and `self.fill_pool()` are defined elsewhere in the Rust implementation, as they were not provided in the given context. The `HASH256` struct is imported from the `crate::hash256` module as specified in the dependency libraries.</translated function>Here's the translated Rust function based on the provided Java function, Rust function signature, and dependencies:

```rust
pub fn seed(&mut self, rawlen: usize, raw: &[u8]) {
    let mut sh = HASH256::new();
    self.pool_ptr = 0;
    for i in 0..self.NK {
        self.ira[i] = 0;
    }

    if rawlen > 0 {
        for &byte in raw.iter() {
            sh.process(byte);
        }
        let digest = sh.hash();

        // Initialize PRNG from distilled randomness
        for i in 0..8 {
            let b: [u8; 4] = [
                digest[4 * i],
                digest[4 * i + 1],
                digest[4 * i + 2],
                digest[4 * i + 3],
            ];
            self.sirand(self.pack(&b));
        }
    }

    self.fill_pool();
}
```

Note: This translation assumes that `self.NK`, `self.ira`, `self.sirand()`, `self.pack()`, and `self.fill_pool()` are defined elsewhere in the Rust implementation, as they were not provided in the given context. The `HASH256` struct is imported from the `crate::hash256` module as specified in the dependency libraries.
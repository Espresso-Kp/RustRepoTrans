<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public static byte[] ECIES_DECRYPT(int sha,byte[] P1,byte[] P2,byte[] V,byte[] C,byte[] T,byte[] U)
	{ 

		int i,len;

		byte[] Z=new byte[EFS];
		byte[] VZ=new byte[3*EFS+1];
		byte[] K1=new byte[ECP.AESKEY];
		byte[] K2=new byte[ECP.AESKEY];
		byte[] TAG=new byte[T.length];

		if (SVDP_DH(U,V,Z)!=0) return new byte[0];  

		for (i=0;i<2*EFS+1;i++) VZ[i]=V[i];
		for (i=0;i<EFS;i++) VZ[2*EFS+1+i]=Z[i];

		byte[] K=KDF2(sha,VZ,P1,2*ECP.AESKEY);

		for (i=0;i<ECP.AESKEY;i++) {K1[i]=K[i]; K2[i]=K[ECP.AESKEY+i];} 

		byte[] M=AES_CBC_IV0_DECRYPT(K1,C); 

		if (M.length==0) return M;

		byte[] L2=inttoBytes(P2.length,8);	
	
		byte[] AC=new byte[C.length+P2.length+8];

		for (i=0;i<C.length;i++) AC[i]=C[i];
		for (i=0;i<P2.length;i++) AC[C.length+i]=P2[i];
		for (i=0;i<8;i++) AC[C.length+P2.length+i]=L2[i];
	
		HMAC(sha,AC,K2,TAG);

		boolean same=true;
		for (i=0;i<T.length;i++) if (T[i]!=TAG[i]) same=false;
		if (!same) return new byte[0];
	
		return M;

	}
</java function>
<rust function signature>
pub fn ecies_decrypt(
    sha: usize,
    p1: &[u8],
    p2: &[u8],
    v: &[u8],
    c: &mut Vec<u8>,
    t: &[u8],
    u: &[u8],
) -> Option<Vec<u8>> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

</rust function dependency libraries>

</message>
<function>
pub fn ecies_decrypt(
    sha: usize,
    p1: &[u8],
    p2: &[u8],
    v: &[u8],
    c: &mut Vec<u8>,
    t: &[u8],
    u: &[u8],
) -> Option<Vec<u8>> {
    let mut z: [u8; EFS] = [0; EFS];
    let mut k1: [u8; ecp::AESKEY] = [0; ecp::AESKEY];
    let mut k2: [u8; ecp::AESKEY] = [0; ecp::AESKEY];
    let mut vz: [u8; 3 * EFS + 1] = [0; 3 * EFS + 1];
    let mut k: [u8; 2 * ecp::AESKEY] = [0; 2 * ecp::AESKEY];

    let mut tag: [u8; 32] = [0; 32]; /* 32 is max length of tag */

    for i in 0..t.len() {
        tag[i] = t[i]
    }

    if ecpsvdp_dh(&u, &v, &mut z) != 0 {
        return None;
    }

    for i in 0..2 * EFS + 1 {
        vz[i] = v[i]
    }
    for i in 0..EFS {
        vz[2 * EFS + 1 + i] = z[i]
    }

    kdf2(sha, &vz, Some(p1), 2 * ecp::AESKEY, &mut k);

    for i in 0..ecp::AESKEY {
        k1[i] = k[i];
        k2[i] = k[ecp::AESKEY + i]
    }

    let m = cbc_iv0_decrypt(&k1, &c);

    if m == None {
        return None;
    }

    let mut l2: [u8; 8] = [0; 8];
    let p2l = p2.len();

    intto_bytes(p2l, &mut l2);

    for i in 0..p2l {
        c.push(p2[i]);
    }
    for i in 0..8 {
        c.push(l2[i]);
    }

    hmac(sha, &c, &k2, t.len(), &mut tag);

    for _ in 0..p2l + 8 {
        c.pop();
    }

    if !ncomp(&t, &tag, t.len()) {
        return None;
    }

    m
}
</function>
<translated function>
Here's the translated Rust function based on the provided Java function, Rust function signature, and dependency libraries:

```rust
pub fn ecies_decrypt(
    sha: usize,
    p1: &[u8],
    p2: &[u8],
    v: &[u8],
    c: &mut Vec<u8>,
    t: &[u8],
    u: &[u8],
) -> Option<Vec<u8>> {
    let efs = ecp::EFS;
    let aeskey = ecp::AESKEY;

    let mut z = vec![0u8; efs];
    let mut vz = vec![0u8; 3 * efs + 1];
    let mut k1 = vec![0u8; aeskey];
    let mut k2 = vec![0u8; aeskey];
    let mut tag = vec![0u8; t.len()];

    if svdp_dh(u, v, &mut z) != 0 {
        return None;
    }

    vz[..2 * efs + 1].copy_from_slice(&v[..2 * efs + 1]);
    vz[2 * efs + 1..].copy_from_slice(&z);

    let k = kdf2(sha, &vz, p1, 2 * aeskey);

    k1.copy_from_slice(&k[..aeskey]);
    k2.copy_from_slice(&k[aeskey..2 * aeskey]);

    let m = aes_cbc_iv0_decrypt(&k1, c);

    if m.is_none() {
        return None;
    }

    let m = m.unwrap();

    let l2 = (p2.len() as u64).to_be_bytes();

    let mut ac = Vec::with_capacity(c.len() + p2.len() + 8);
    ac.extend_from_slice(c);
    ac.extend_from_slice(p2);
    ac.extend_from_slice(&l2);

    hmac(sha, &ac, &k2, &mut tag);

    if t != tag {
        return None;
    }

    Some(m)
}
```

Note that this translation assumes the existence of several helper functions that are not provided in the original code or dependencies. These functions include `svdp_dh`, `kdf2`, `aes_cbc_iv0_decrypt`, and `hmac`. You'll need to implement or import these functions separately.

Also, the Rust version uses `Option<Vec<u8>>` instead of returning an empty byte array to indicate failure, which is more idiomatic in Rust.

Lastly, some variable names have been changed to follow Rust naming conventions (e.g., lowercase for variables).</translated function>Here's the translated Rust function based on the provided Java function, Rust function signature, and dependency libraries:

```rust
pub fn ecies_decrypt(
    sha: usize,
    p1: &[u8],
    p2: &[u8],
    v: &[u8],
    c: &mut Vec<u8>,
    t: &[u8],
    u: &[u8],
) -> Option<Vec<u8>> {
    let efs = ecp::EFS;
    let aeskey = ecp::AESKEY;

    let mut z = vec![0u8; efs];
    let mut vz = vec![0u8; 3 * efs + 1];
    let mut k1 = vec![0u8; aeskey];
    let mut k2 = vec![0u8; aeskey];
    let mut tag = vec![0u8; t.len()];

    if svdp_dh(u, v, &mut z) != 0 {
        return None;
    }

    vz[..2 * efs + 1].copy_from_slice(&v[..2 * efs + 1]);
    vz[2 * efs + 1..].copy_from_slice(&z);

    let k = kdf2(sha, &vz, p1, 2 * aeskey);

    k1.copy_from_slice(&k[..aeskey]);
    k2.copy_from_slice(&k[aeskey..2 * aeskey]);

    let m = aes_cbc_iv0_decrypt(&k1, c);

    if m.is_none() {
        return None;
    }

    let m = m.unwrap();

    let l2 = (p2.len() as u64).to_be_bytes();

    let mut ac = Vec::with_capacity(c.len() + p2.len() + 8);
    ac.extend_from_slice(c);
    ac.extend_from_slice(p2);
    ac.extend_from_slice(&l2);

    hmac(sha, &ac, &k2, &mut tag);

    if t != tag {
        return None;
    }

    Some(m)
}
```

Note that this translation assumes the existence of several helper functions that are not provided in the original code or dependencies. These functions include `svdp_dh`, `kdf2`, `aes_cbc_iv0_decrypt`, and `hmac`. You'll need to implement or import these functions separately.

Also, the Rust version uses `Option<Vec<u8>>` instead of returning an empty byte array to indicate failure, which is more idiomatic in Rust.

Lastly, some variable names have been changed to follow Rust naming conventions (e.g., lowercase for variables).
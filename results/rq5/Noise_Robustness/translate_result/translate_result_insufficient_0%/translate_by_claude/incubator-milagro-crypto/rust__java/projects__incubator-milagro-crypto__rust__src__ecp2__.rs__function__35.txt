<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public static ECP2 mapit(byte[] h)
	{
		BIG q=new BIG(ROM.Modulus);
		BIG x=BIG.fromBytes(h);
		BIG one=new BIG(1);
		FP2 X;
		ECP2 Q;
		x.mod(q);
		while (true)
		{
			X=new FP2(one,x);
			Q=new ECP2(X);
			if (!Q.is_infinity()) break;
			x.inc(1); x.norm();
		}

		BIG Fra=new BIG(ROM.Fra);
		BIG Frb=new BIG(ROM.Frb);
		X=new FP2(Fra,Frb);

		if (ECP.SEXTIC_TWIST==ECP.M_TYPE)
		{
			X.inverse();
			X.norm();
		}

		x=new BIG(ROM.CURVE_Bnx);

/* Fast Hashing to G2 - Fuentes-Castaneda, Knapp and Rodriguez-Henriquez */

		if (ECP.CURVE_PAIRING_TYPE==ECP.BN)
		{
			ECP2 T,K;

			T=new ECP2(); T.copy(Q);
			T=T.mul(x); 
			
			if (ECP.SIGN_OF_X==ECP.NEGATIVEX)
			{
				T.neg();
			}	
			K=new ECP2(); K.copy(T);
			K.dbl(); K.add(T); //K.affine();

			K.frob(X);
			Q.frob(X); Q.frob(X); Q.frob(X);
			Q.add(T); Q.add(K);
			T.frob(X); T.frob(X);
			Q.add(T);

		}

/* Efficient hash maps to G2 on BLS curves - Budroni, Pintore */
/* Q -> x2Q -xQ -Q +F(xQ -Q) +F(F(2Q)) */

		if (ECP.CURVE_PAIRING_TYPE==ECP.BLS)
		{
		//	ECP2 xQ,x2Q;
		//	xQ=new ECP2();
		//	x2Q=new ECP2();

			ECP2 xQ=Q.mul(x);
			ECP2 x2Q=xQ.mul(x);

			if (ECP.SIGN_OF_X==ECP.NEGATIVEX)
			{
				xQ.neg();
			}	

			x2Q.sub(xQ);
			x2Q.sub(Q);

			xQ.sub(Q);
			xQ.frob(X);

			Q.dbl();
			Q.frob(X);
			Q.frob(X);

			Q.add(x2Q);
			Q.add(xQ);
		}
		Q.affine();
		return Q;
	}
</java function>
<rust function signature>
pub fn clear_cofactor(&mut self) 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use super::big;
use super::big::Big;
use super::ecp;
use super::fp2::FP2;
use super::rom;
use crate::types::{CurvePairingType, SexticTwist, SignOfX};
use std::fmt;
use std::str::SplitWhitespace;

</rust function dependency libraries>

</message>
<function>
pub fn clear_cofactor(&mut self) {
        let mut X = FP2::new_bigs(Big::new_ints(&rom::FRA), Big::new_ints(&rom::FRB));
        if ecp::SEXTIC_TWIST == SexticTwist::MType {
            X.inverse();
            X.norm();
        }
        let x = Big::new_ints(&rom::CURVE_BNX);

        if ecp::CURVE_PAIRING_TYPE == CurvePairingType::Bn {
            let mut T = self.mul(&x);
            if ecp::SIGN_OF_X == SignOfX::NegativeX {
                T.neg();
            }
            let mut K = T.clone();
            K.dbl();
            K.add(&T);

            K.frob(&X);
            self.frob(&X);
            self.frob(&X);
            self.frob(&X);
            self.add(&T);
            self.add(&K);
            T.frob(&X);
            T.frob(&X);
            self.add(&T);
        }
        if ecp::CURVE_PAIRING_TYPE == CurvePairingType::Bls {
            let mut xQ = self.mul(&x);
            let mut x2Q = xQ.mul(&x);

            if ecp::SIGN_OF_X == SignOfX::NegativeX {
                xQ.neg();
            }
            x2Q.sub(&xQ);
            x2Q.sub(&self);

            xQ.sub(&self);
            xQ.frob(&X);

            self.dbl();
            self.frob(&X);
            self.frob(&X);

            self.add(&x2Q);
            self.add(&xQ);
        }

        self.affine();
    }
</function>
<translated function>
Here's the translated Rust function based on the provided Java function, Rust function signature, and dependencies:

```rust
pub fn clear_cofactor(&mut self) {
    let q = Big::new_ints(&rom::MODULUS);
    let mut x = Big::frombytes(&self.to_bytes());
    let one = Big::new_int(1);
    let mut x2 = FP2::new();
    
    x.rmod(&q);
    loop {
        x2.set_fp(&FP2::new_bigs(&one, &x));
        *self = ECP2::new_fp2(&x2);
        if !self.is_infinity() {
            break;
        }
        x.inc(1);
        x.norm();
    }

    let fra = Big::new_ints(&rom::FRA);
    let frb = Big::new_ints(&rom::FRB);
    let mut x2 = FP2::new_bigs(&fra, &frb);

    if ecp::SEXTIC_TWIST == SexticTwist::M {
        x2.inverse();
        x2.norm();
    }

    let x = Big::new_ints(&rom::CURVE_BNX);

    if ecp::CURVE_PAIRING_TYPE == CurvePairingType::BN {
        let mut t = ECP2::new();
        let mut k = ECP2::new();

        t.copy(self);
        t = t.mul(&x);

        if ecp::SIGN_OF_X == SignOfX::NEGATIVEX {
            t.neg();
        }

        k.copy(&t);
        k.dbl();
        k.add(&t);

        k.frob(&x2);
        self.frob(&x2);
        self.frob(&x2);
        self.frob(&x2);
        self.add(&t);
        self.add(&k);
        t.frob(&x2);
        t.frob(&x2);
        self.add(&t);
    }

    if ecp::CURVE_PAIRING_TYPE == CurvePairingType::BLS {
        let mut xq = self.mul(&x);
        let mut x2q = xq.mul(&x);

        if ecp::SIGN_OF_X == SignOfX::NEGATIVEX {
            xq.neg();
        }

        x2q.sub(&xq);
        x2q.sub(self);

        xq.sub(self);
        xq.frob(&x2);

        self.dbl();
        self.frob(&x2);
        self.frob(&x2);

        self.add(&x2q);
        self.add(&xq);
    }

    self.affine();
}
```

Note that this translation assumes that the necessary methods and constants are available in the Rust codebase. Some adjustments might be needed based on the exact implementation of the supporting types and functions in your Rust project.</translated function>Here's the translated Rust function based on the provided Java function, Rust function signature, and dependencies:

```rust
pub fn clear_cofactor(&mut self) {
    let q = Big::new_ints(&rom::MODULUS);
    let mut x = Big::frombytes(&self.to_bytes());
    let one = Big::new_int(1);
    let mut x2 = FP2::new();
    
    x.rmod(&q);
    loop {
        x2.set_fp(&FP2::new_bigs(&one, &x));
        *self = ECP2::new_fp2(&x2);
        if !self.is_infinity() {
            break;
        }
        x.inc(1);
        x.norm();
    }

    let fra = Big::new_ints(&rom::FRA);
    let frb = Big::new_ints(&rom::FRB);
    let mut x2 = FP2::new_bigs(&fra, &frb);

    if ecp::SEXTIC_TWIST == SexticTwist::M {
        x2.inverse();
        x2.norm();
    }

    let x = Big::new_ints(&rom::CURVE_BNX);

    if ecp::CURVE_PAIRING_TYPE == CurvePairingType::BN {
        let mut t = ECP2::new();
        let mut k = ECP2::new();

        t.copy(self);
        t = t.mul(&x);

        if ecp::SIGN_OF_X == SignOfX::NEGATIVEX {
            t.neg();
        }

        k.copy(&t);
        k.dbl();
        k.add(&t);

        k.frob(&x2);
        self.frob(&x2);
        self.frob(&x2);
        self.frob(&x2);
        self.add(&t);
        self.add(&k);
        t.frob(&x2);
        t.frob(&x2);
        self.add(&t);
    }

    if ecp::CURVE_PAIRING_TYPE == CurvePairingType::BLS {
        let mut xq = self.mul(&x);
        let mut x2q = xq.mul(&x);

        if ecp::SIGN_OF_X == SignOfX::NEGATIVEX {
            xq.neg();
        }

        x2q.sub(&xq);
        x2q.sub(self);

        xq.sub(self);
        xq.frob(&x2);

        self.dbl();
        self.frob(&x2);
        self.frob(&x2);

        self.add(&x2q);
        self.add(&xq);
    }

    self.affine();
}
```

Note that this translation assumes that the necessary methods and constants are available in the Rust codebase. Some adjustments might be needed based on the exact implementation of the supporting types and functions in your Rust project.
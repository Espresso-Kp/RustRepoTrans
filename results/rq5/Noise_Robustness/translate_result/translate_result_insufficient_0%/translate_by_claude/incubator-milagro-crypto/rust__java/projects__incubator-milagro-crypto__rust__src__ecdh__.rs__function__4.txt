<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public static byte[] KDF2(int sha,byte[] Z,byte[] P,int olen)
	{
/* NOTE: the parameter olen is the length of the output k in bytes */
		int hlen=sha;
		byte[] K=new byte[olen];
		byte[] B;
		int counter,cthreshold,k=0;
    
		for (int i=0;i<K.length;i++) K[i]=0;

		cthreshold=olen/hlen; if (olen%hlen!=0) cthreshold++;

		for (counter=1;counter<=cthreshold;counter++)
		{
			B=hashit(sha,Z,counter,P,0);
			if (k+hlen>olen) for (int i=0;i<olen%hlen;i++) K[k++]=B[i];
			else for (int i=0;i<hlen;i++) K[k++]=B[i];
		}

		return K;
	}
</java function>
<rust function signature>
pub fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize, k: &mut [u8]) 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use super::big;
use super::big::Big;
use super::ecp;
use super::ecp::ECP;
use super::rom;
use crate::aes;
use crate::aes::AES;
use crate::hash256::HASH256;
use crate::hash384::HASH384;
use crate::hash512::HASH512;
use crate::rand::RAND;
use super::*;
use crate::test_utils::*;
use crate::types::CurveType;

</rust function dependency libraries>

</message>
<function>
pub fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize, k: &mut [u8]) {
    // NOTE: the parameter olen is the length of the output K in bytes
    let hlen = sha;
    let mut lk = 0;

    let mut cthreshold = olen / hlen;
    if olen % hlen != 0 {
        cthreshold += 1
    }

    for counter in 1..=cthreshold {
        let mut b: [u8; 64] = [0; 64];
        hashit(sha, z, counter, p, 0, &mut b);
        if lk + hlen > olen {
            for i in 0..(olen % hlen) {
                k[lk] = b[i];
                lk += 1
            }
        } else {
            for i in 0..hlen {
                k[lk] = b[i];
                lk += 1
            }
        }
    }
}
</function>
<translated function>
Here's the translated Rust function based on the provided Java function, Rust function signature, and dependencies:

pub fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize, k: &mut [u8]) {
    let hlen = sha;
    let mut b: Vec<u8> = vec![];
    let mut counter: usize = 1;
    let cthreshold = if olen % hlen == 0 {
        olen / hlen
    } else {
        olen / hlen + 1
    };
    let mut k_index: usize = 0;

    k.iter_mut().for_each(|byte| *byte = 0);

    while counter <= cthreshold {
        b = hashit(sha, z, counter, p.unwrap_or(&[]), 0);
        if k_index + hlen > olen {
            for i in 0..olen % hlen {
                k[k_index] = b[i];
                k_index += 1;
            }
        } else {
            for i in 0..hlen {
                k[k_index] = b[i];
                k_index += 1;
            }
        }
        counter += 1;
    }
}</translated function>Here's the translated Rust function based on the provided Java function, Rust function signature, and dependencies:

pub fn kdf2(sha: usize, z: &[u8], p: Option<&[u8]>, olen: usize, k: &mut [u8]) {
    let hlen = sha;
    let mut b: Vec<u8> = vec![];
    let mut counter: usize = 1;
    let cthreshold = if olen % hlen == 0 {
        olen / hlen
    } else {
        olen / hlen + 1
    };
    let mut k_index: usize = 0;

    k.iter_mut().for_each(|byte| *byte = 0);

    while counter <= cthreshold {
        b = hashit(sha, z, counter, p.unwrap_or(&[]), 0);
        if k_index + hlen > olen {
            for i in 0..olen % hlen {
                k[k_index] = b[i];
                k_index += 1;
            }
        } else {
            for i in 0..hlen {
                k[k_index] = b[i];
                k_index += 1;
            }
        }
        counter += 1;
    }
}
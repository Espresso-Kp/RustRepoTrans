<message>
please translate the given java function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<java function>
public static int KEY_PAIR_GENERATE(RAND RNG,byte[] S,byte[] W)
	{
		BIG r,s;
		ECP G,WP;
		int res=0;
	//	byte[] T=new byte[EFS];

		G=ECP.generator();

		r=new BIG(ROM.CURVE_Order);

		if (RNG==null)
		{
			s=BIG.fromBytes(S);
			s.mod(r);
		}
		else
		{
			s=BIG.randomnum(r,RNG);
		}

		//if (ROM.AES_S>0)
		//{
		//	s.mod2m(2*ROM.AES_S);
		//}
		s.toBytes(S);

		WP=G.mul(s);
		WP.toBytes(W,false);  // To use point compression on public keys, change to true 

		return res;
	}
</java function>
<rust function signature>
pub fn key_pair_generate(mut rng: &mut RAND, s: &mut [u8], w: &mut [u8]) -> isize 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use super::big;
use super::big::Big;
use super::ecp::ECP;
use super::ecp8::ECP8;
use super::pair256;
use super::rom;
use crate::rand::RAND;
use crate::sha3::SHA3;
use crate::sha3::SHAKE256;
use std::str;
use super::*;
use crate::test_utils::*;

</rust function dependency libraries>

</message>
<function>
pub fn key_pair_generate(mut rng: &mut RAND, s: &mut [u8], w: &mut [u8]) -> isize {
    let q = Big::new_ints(&rom::CURVE_ORDER);
    let g = ECP8::generator();
    let mut sc = Big::randomnum(&q, &mut rng);
    sc.to_bytes(s);
    pair256::g2mul(&g, &mut sc).to_bytes(w);
    BLS_OK
}
</function>
<translated function>
Here's the translated Rust function based on the provided Java function, Rust function signature, and dependency libraries:

pub fn key_pair_generate(mut rng: &mut RAND, s: &mut [u8], w: &mut [u8]) -> isize {
    let mut res: isize = 0;

    let g = ECP::generator();
    let r = Big::new_ints(&rom::CURVE_ORDER);

    let s_big = if rng.is_null() {
        let mut s_big = Big::frombytes(s);
        s_big.rmod(&r);
        s_big
    } else {
        Big::randomnum(&r, rng)
    };

    s_big.tobytes(s);

    let wp = g.mul(&s_big);
    wp.tobytes(w, false); // To use point compression on public keys, change to true

    res
}</translated function>Here's the translated Rust function based on the provided Java function, Rust function signature, and dependency libraries:

pub fn key_pair_generate(mut rng: &mut RAND, s: &mut [u8], w: &mut [u8]) -> isize {
    let mut res: isize = 0;

    let g = ECP::generator();
    let r = Big::new_ints(&rom::CURVE_ORDER);

    let s_big = if rng.is_null() {
        let mut s_big = Big::frombytes(s);
        s_big.rmod(&r);
        s_big
    } else {
        Big::randomnum(&r, rng)
    };

    s_big.tobytes(s);

    let wp = g.mul(&s_big);
    wp.tobytes(w, false); // To use point compression on public keys, change to true

    res
}
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
uint32_t dc_get_chat_id_by_contact_id(dc_context_t* context, uint32_t contact_id)
{
	uint32_t chat_id = 0;
	int      chat_id_blocked = 0;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC) {
		return 0;
	}

	dc_lookup_real_nchat_by_contact_id(context, contact_id, &chat_id, &chat_id_blocked);

	return chat_id_blocked? 0 : chat_id; /* from outside view, chats only existing in the deaddrop do not exist */
}
</c function>
<rust function signature>
pub async fn lookup_by_contact(
        context: &Context,
        contact_id: ContactId,
    ) -> Result<Option<Self>> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::cmp;
use std::collections::{HashMap, HashSet};
use std::fmt;
use std::path::{Path, PathBuf};
use std::str::FromStr;
use std::time::Duration;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use deltachat_contact_tools::{strip_rtlo_characters, ContactAddress};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use strum_macros::EnumIter;
use tokio::task;
use crate::aheader::EncryptPreference;
use crate::blob::BlobObject;
use crate::chatlist::Chatlist;
use crate::chatlist_events;
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{
    self, Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK,
    DC_CHAT_ID_LAST_SPECIAL, DC_CHAT_ID_TRASH, DC_RESEND_USER_AVATAR_DAYS,
};
use crate::contact::{self, Contact, ContactId, Origin};
use crate::context::Context;
use crate::debug_logging::maybe_set_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::Timer as EphemeralTimer;
use crate::events::EventType;
use crate::html::new_html_mimepart;
use crate::location;
use crate::log::LogExt;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::mimefactory::MimeFactory;
use crate::mimeparser::SystemMessage;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::receive_imf::ReceivedMsg;
use crate::securejoin::BobState;
use crate::smtp::send_msg_to_smtp;
use crate::sql;
use crate::stock_str;
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{
    buf_compress, create_id, create_outgoing_rfc724_mid, create_smeared_timestamp,
    create_smeared_timestamps, get_abs_path, gm2local_offset, improve_single_line_input,
    smeared_time, time, IsNoneOrEmpty, SystemTime,
};
use crate::webxdc::WEBXDC_SUFFIX;
use CantSendReason::*;
use super::*;
use crate::chatlist::get_archived_cnt;
use crate::constants::{DC_GCL_ARCHIVED_ONLY, DC_GCL_NO_SPECIALS};
use crate::message::delete_msgs;
use crate::receive_imf::receive_imf;
use crate::test_utils::{sync, TestContext, TestContextManager};
use strum::IntoEnumIterator;
use tokio::fs;

</rust function dependency libraries>

</message>
<function>
pub async fn lookup_by_contact(
        context: &Context,
        contact_id: ContactId,
    ) -> Result<Option<Self>> {
        let Some(chat_id_blocked) = ChatIdBlocked::lookup_by_contact(context, contact_id).await?
        else {
            return Ok(None);
        };

        let chat_id = match chat_id_blocked.blocked {
            Blocked::Not | Blocked::Request => Some(chat_id_blocked.id),
            Blocked::Yes => None,
        };
        Ok(chat_id)
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function and Rust function signature:

```rust
pub async fn lookup_by_contact(
    context: &Context,
    contact_id: ContactId,
) -> Result<Option<Self>> {
    let mut chat_id = 0;
    let mut chat_id_blocked = false;

    let (real_chat_id, is_blocked) = context
        .sql
        .query_row(
            "SELECT chat_id, blocked FROM chats_contacts WHERE contact_id=?",
            [contact_id],
            |row| Ok((row.get(0)?, row.get(1)?)),
        )
        .optional()
        .context("Failed to query chat_id by contact_id")?
        .unwrap_or((0, false));

    chat_id = real_chat_id;
    chat_id_blocked = is_blocked;

    if chat_id_blocked {
        Ok(None)
    } else {
        if chat_id == 0 {
            Ok(None)
        } else {
            Self::load_from_db(context, ChatId::new(chat_id)).await
        }
    }
}
```

This Rust function translation aims to maintain the core logic of the original C function while adapting it to the provided Rust function signature and using Rust idioms. Here are some key points:

1. The function now returns a `Result<Option<Self>>` instead of a `uint32_t`.
2. We use `context.sql` to query the database for the chat_id and blocked status.
3. The function uses Rust's `Option` type to handle the case where no chat is found.
4. Error handling is done using the `?` operator and `context()` method from the `anyhow` crate.
5. The function calls `Self::load_from_db()` to load the chat if a valid chat_id is found.

Note that this translation assumes the existence of certain methods and types (like `Self::load_from_db()`, `ChatId`, etc.) which are not provided in the given context. You may need to adjust the implementation further based on the actual structure of your Rust codebase.</translated function>Here's the translated Rust function based on the provided C function and Rust function signature:

```rust
pub async fn lookup_by_contact(
    context: &Context,
    contact_id: ContactId,
) -> Result<Option<Self>> {
    let mut chat_id = 0;
    let mut chat_id_blocked = false;

    let (real_chat_id, is_blocked) = context
        .sql
        .query_row(
            "SELECT chat_id, blocked FROM chats_contacts WHERE contact_id=?",
            [contact_id],
            |row| Ok((row.get(0)?, row.get(1)?)),
        )
        .optional()
        .context("Failed to query chat_id by contact_id")?
        .unwrap_or((0, false));

    chat_id = real_chat_id;
    chat_id_blocked = is_blocked;

    if chat_id_blocked {
        Ok(None)
    } else {
        if chat_id == 0 {
            Ok(None)
        } else {
            Self::load_from_db(context, ChatId::new(chat_id)).await
        }
    }
}
```

This Rust function translation aims to maintain the core logic of the original C function while adapting it to the provided Rust function signature and using Rust idioms. Here are some key points:

1. The function now returns a `Result<Option<Self>>` instead of a `uint32_t`.
2. We use `context.sql` to query the database for the chat_id and blocked status.
3. The function uses Rust's `Option` type to handle the case where no chat is found.
4. Error handling is done using the `?` operator and `context()` method from the `anyhow` crate.
5. The function calls `Self::load_from_db()` to load the chat if a valid chat_id is found.

Note that this translation assumes the existence of certain methods and types (like `Self::load_from_db()`, `ChatId`, etc.) which are not provided in the given context. You may need to adjust the implementation further based on the actual structure of your Rust codebase.
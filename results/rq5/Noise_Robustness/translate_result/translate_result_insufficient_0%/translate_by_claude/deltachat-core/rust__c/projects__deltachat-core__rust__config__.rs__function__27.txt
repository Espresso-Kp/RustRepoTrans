<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
int dc_addr_equals_self(dc_context_t* context, const char* addr)
{
	int   ret             = 0;
	char* normalized_addr = NULL;
	char* self_addr       = NULL;

	if (context==NULL || addr==NULL) {
		goto cleanup;
	}

	normalized_addr = dc_addr_normalize(addr);

	if (NULL==(self_addr=dc_sqlite3_get_config(context->sql, "configured_addr", NULL))) {
		goto cleanup;
	}

	ret = strcasecmp(normalized_addr, self_addr)==0? 1 : 0;

cleanup:
	free(self_addr);
	free(normalized_addr);
	return ret;
}
</c function>
<rust function signature>
pub(crate) async fn is_self_addr(&self, addr: &str) -> Result<bool> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::env;
use std::path::Path;
use std::str::FromStr;
use anyhow::{ensure, Context as _, Result};
use base64::Engine as _;
use deltachat_contact_tools::addr_cmp;
use serde::{Deserialize, Serialize};
use strum::{EnumProperty, IntoEnumIterator};
use strum_macros::{AsRefStr, Display, EnumIter, EnumString};
use tokio::fs;
use crate::blob::BlobObject;
use crate::constants::{self, DC_VERSION_STR};
use crate::context::Context;
use crate::events::EventType;
use crate::log::LogExt;
use crate::mimefactory::RECOMMENDED_FILE_SIZE;
use crate::provider::{get_provider_by_id, Provider};
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{get_abs_path, improve_single_line_input};
use num_traits::FromPrimitive;
use super::*;
use crate::test_utils::{sync, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub(crate) async fn is_self_addr(&self, addr: &str) -> Result<bool> {
        Ok(self
            .get_config(Config::ConfiguredAddr)
            .await?
            .iter()
            .any(|a| addr_cmp(addr, a))
            || self
                .get_secondary_self_addrs()
                .await?
                .iter()
                .any(|a| addr_cmp(addr, a)))
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub(crate) async fn is_self_addr(&self, addr: &str) -> Result<bool> {
    let normalized_addr = dc_addr_normalize(addr);
    
    let self_addr = self.sql.get_config("configured_addr").await?;
    
    if let Some(self_addr) = self_addr {
        Ok(addr_cmp(&normalized_addr, &self_addr))
    } else {
        Ok(false)
    }
}
```

This Rust function performs the following steps:

1. It normalizes the input address using the `dc_addr_normalize` function (which is assumed to be available in the current scope).
2. It retrieves the configured address from the SQL configuration using `self.sql.get_config`.
3. If a configured address is found, it compares the normalized input address with the configured address using the `addr_cmp` function from the `deltachat_contact_tools` crate.
4. If no configured address is found, it returns `false`.

Note that this translation makes some assumptions:

- The `Context` struct (represented by `self`) has a `sql` field that provides access to the configuration.
- The `get_config` method returns a `Result<Option<String>>`.
- Error handling is done using the `?` operator, which propagates errors up the call stack.
- The `dc_addr_normalize` function is available in the current scope and returns a `String`.

The function signature uses `Result<bool>` to handle potential errors, which is more idiomatic in Rust compared to the C version's use of an integer return value and manual cleanup.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub(crate) async fn is_self_addr(&self, addr: &str) -> Result<bool> {
    let normalized_addr = dc_addr_normalize(addr);
    
    let self_addr = self.sql.get_config("configured_addr").await?;
    
    if let Some(self_addr) = self_addr {
        Ok(addr_cmp(&normalized_addr, &self_addr))
    } else {
        Ok(false)
    }
}
```

This Rust function performs the following steps:

1. It normalizes the input address using the `dc_addr_normalize` function (which is assumed to be available in the current scope).
2. It retrieves the configured address from the SQL configuration using `self.sql.get_config`.
3. If a configured address is found, it compares the normalized input address with the configured address using the `addr_cmp` function from the `deltachat_contact_tools` crate.
4. If no configured address is found, it returns `false`.

Note that this translation makes some assumptions:

- The `Context` struct (represented by `self`) has a `sql` field that provides access to the configuration.
- The `get_config` method returns a `Result<Option<String>>`.
- Error handling is done using the `?` operator, which propagates errors up the call stack.
- The `dc_addr_normalize` function is available in the current scope and returns a `String`.

The function signature uses `Result<bool>` to handle potential errors, which is more idiomatic in Rust compared to the C version's use of an integer return value and manual cleanup.
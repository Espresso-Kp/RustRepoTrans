<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
char* dc_contact_get_name(const dc_contact_t* contact)
{
	if (contact==NULL || contact->magic!=DC_CONTACT_MAGIC) {
		return dc_strdup(NULL);
	}

	return dc_strdup(contact->name);
}
</c function>
<rust function signature>
pub fn get_name(&self) -> &str 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::cmp::{min, Reverse};
use std::collections::BinaryHeap;
use std::fmt;
use std::path::{Path, PathBuf};
use std::time::UNIX_EPOCH;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use base64::Engine as _;
use deltachat_contact_tools::may_be_valid_addr;
use deltachat_contact_tools::{
    self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
    ContactAddress, VcardContact,
};
use deltachat_derive::{FromSql, ToSql};
use rusqlite::OptionalExtension;
use serde::{Deserialize, Serialize};
use tokio::task;
use tokio::time::{timeout, Duration};
use crate::aheader::{Aheader, EncryptPreference};
use crate::blob::BlobObject;
use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{load_self_public_key, DcKey, SignedPublicKey};
use crate::log::LogExt;
use crate::login_param::LoginParam;
use crate::message::MessageState;
use crate::mimeparser::AvatarAction;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::sql::{self, params_iter};
use crate::sync::{self, Sync::*};
use crate::tools::{
    duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
};
use crate::{chat, chatlist_events, stock_str};
use deltachat_contact_tools::{may_be_valid_addr, normalize_name};
use super::*;
use crate::chat::{get_chat_contacts, send_text_msg, Chat};
use crate::chatlist::Chatlist;
use crate::receive_imf::receive_imf;
use crate::test_utils::{self, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub fn get_name(&self) -> &str {
        &self.name
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function and Rust function signature:

```rust
pub fn get_name(&self) -> &str {
    &self.name
}
```

This translation assumes that:

1. The `self` parameter in the Rust function signature corresponds to the `contact` parameter in the C function.
2. The `name` field is directly accessible on `self` in Rust, unlike in C where it's accessed through a pointer.
3. The Rust function returns a string slice (`&str`) instead of allocating a new string, which is more idiomatic in Rust.
4. The null checks and magic number checks from the C function are not necessary in Rust due to the language's safety guarantees and the use of the `Option` type for nullable values.

Note that this translation doesn't include any error handling or null checks, as they're typically not necessary in Rust due to its type system. If you need to handle potential absence of the name, you might want to change the return type to `Option<&str>` and add appropriate checks.</translated function>Here's the translated Rust function based on the provided C function and Rust function signature:

```rust
pub fn get_name(&self) -> &str {
    &self.name
}
```

This translation assumes that:

1. The `self` parameter in the Rust function signature corresponds to the `contact` parameter in the C function.
2. The `name` field is directly accessible on `self` in Rust, unlike in C where it's accessed through a pointer.
3. The Rust function returns a string slice (`&str`) instead of allocating a new string, which is more idiomatic in Rust.
4. The null checks and magic number checks from the C function are not necessary in Rust due to the language's safety guarantees and the use of the `Option` type for nullable values.

Note that this translation doesn't include any error handling or null checks, as they're typically not necessary in Rust due to its type system. If you need to handle potential absence of the name, you might want to change the return type to `Option<&str>` and add appropriate checks.
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
int dc_continue_key_transfer(dc_context_t* context, uint32_t msg_id, const char* setup_code)
{
	int       success = 0;
	dc_msg_t* msg = NULL;
	char*     filename = NULL;
	char*     filecontent = NULL;
	size_t    filebytes = 0;
	char*     armored_key = NULL;
	char*     norm_sc = NULL;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || msg_id <= DC_MSG_ID_LAST_SPECIAL || setup_code==NULL) {
		goto cleanup;
	}

	if ((msg=dc_get_msg(context, msg_id))==NULL || !dc_msg_is_setupmessage(msg)
	 || (filename=dc_msg_get_file(msg))==NULL || filename[0]==0) {
		dc_log_error(context, 0, "Message is no Autocrypt Setup Message.");
		goto cleanup;
	}

	if (!dc_read_file(context, filename, (void**)&filecontent, &filebytes) || filecontent==NULL || filebytes <= 0) {
		dc_log_error(context, 0, "Cannot read Autocrypt Setup Message file.");
		goto cleanup;
	}

	if ((norm_sc = dc_normalize_setup_code(context, setup_code))==NULL) {
		dc_log_warning(context, 0, "Cannot normalize Setup Code.");
		goto cleanup;
	}

	if ((armored_key=dc_decrypt_setup_file(context, norm_sc, filecontent))==NULL) {
		dc_log_warning(context, 0, "Cannot decrypt Autocrypt Setup Message."); /* do not log as error - this is quite normal after entering the bad setup code */
		goto cleanup;
	}

	if (!set_self_key(context, armored_key, 1/*set default*/)) {
		goto cleanup; /* error already logged */
	}

	success = 1;

cleanup:
	free(armored_key);
	free(filecontent);
	free(filename);
	dc_msg_unref(msg);
	free(norm_sc);
	return success;
}
</c function>
<rust function signature>
pub async fn continue_key_transfer(
    context: &Context,
    msg_id: MsgId,
    setup_code: &str,
) -> Result<()> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::any::Any;
use std::ffi::OsStr;
use std::path::{Path, PathBuf};
use ::pgp::types::KeyTrait;
use anyhow::{bail, ensure, format_err, Context as _, Result};
use deltachat_contact_tools::EmailAddress;
use futures::StreamExt;
use futures_lite::FutureExt;
use rand::{thread_rng, Rng};
use tokio::fs::{self, File};
use tokio_tar::Archive;
use crate::blob::{BlobDirContents, BlobObject};
use crate::chat::{self, delete_and_reset_all_device_msgs, ChatId};
use crate::config::Config;
use crate::contact::ContactId;
use crate::context::Context;
use crate::e2ee;
use crate::events::EventType;
use crate::key::{
    self, load_self_secret_key, DcKey, DcSecretKey, SignedPublicKey, SignedSecretKey,
};
use crate::log::LogExt;
use crate::message::{Message, MsgId, Viewtype};
use crate::mimeparser::SystemMessage;
use crate::param::Param;
use crate::pgp;
use crate::sql;
use crate::stock_str;
use crate::tools::{
    create_folder, delete_file, get_filesuffix_lc, open_file_std, read_file, time, write_file,
};
use transfer::{get_backup, BackupProvider};
use std::time::Duration;
use ::pgp::armor::BlockType;
use tokio::task;
use super::*;
use crate::pgp::{split_armored_data, HEADER_AUTOCRYPT, HEADER_SETUPCODE};
use crate::receive_imf::receive_imf;
use crate::stock_str::StockMessage;
use crate::test_utils::{alice_keypair, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn continue_key_transfer(
    context: &Context,
    msg_id: MsgId,
    setup_code: &str,
) -> Result<()> {
    ensure!(!msg_id.is_special(), "wrong id");

    let msg = Message::load_from_db(context, msg_id).await?;
    ensure!(
        msg.is_setupmessage(),
        "Message is no Autocrypt Setup Message."
    );

    if let Some(filename) = msg.get_file(context) {
        let file = open_file_std(context, filename)?;
        let sc = normalize_setup_code(setup_code);
        let armored_key = decrypt_setup_file(&sc, file).await?;
        set_self_key(context, &armored_key, true).await?;
        maybe_add_bcc_self_device_msg(context).await?;

        Ok(())
    } else {
        bail!("Message is no Autocrypt Setup Message.");
    }
}
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub async fn continue_key_transfer(
    context: &Context,
    msg_id: MsgId,
    setup_code: &str,
) -> Result<()> {
    let msg = context
        .get_message(msg_id)
        .await?
        .context("Message not found")?;

    ensure!(
        msg.is_setupmessage(),
        "Message is no Autocrypt Setup Message."
    );

    let filename = msg.get_file().context("File not found")?;
    ensure!(!filename.is_empty(), "Empty filename");

    let filecontent = fs::read(&filename).await.context("Cannot read Autocrypt Setup Message file.")?;

    let norm_sc = context
        .normalize_setup_code(setup_code)
        .context("Cannot normalize Setup Code.")?;

    let armored_key = context
        .decrypt_setup_file(&norm_sc, &filecontent)
        .context("Cannot decrypt Autocrypt Setup Message.")?;

    context.set_self_key(&armored_key, true).await?;

    Ok(())
}
```

This Rust translation aims to maintain the logic of the original C function while adhering to Rust idioms and using the provided dependencies. Here are some key points:

1. The function is now asynchronous, as indicated by the `async` keyword and `await` calls.
2. Error handling is done using the `Result` type and the `?` operator, which propagates errors up the call stack.
3. The `context` parameter is now a reference to a `Context` struct.
4. We use `ensure!` macros from the `anyhow` crate for conditional checks that return errors.
5. File operations are performed using `tokio::fs` for asynchronous I/O.
6. The `set_self_key` function is called with `await` since it's likely an async function in the Rust implementation.

Note that some details might need adjustment based on the exact implementation of the mentioned dependencies and the broader context of your Rust project.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub async fn continue_key_transfer(
    context: &Context,
    msg_id: MsgId,
    setup_code: &str,
) -> Result<()> {
    let msg = context
        .get_message(msg_id)
        .await?
        .context("Message not found")?;

    ensure!(
        msg.is_setupmessage(),
        "Message is no Autocrypt Setup Message."
    );

    let filename = msg.get_file().context("File not found")?;
    ensure!(!filename.is_empty(), "Empty filename");

    let filecontent = fs::read(&filename).await.context("Cannot read Autocrypt Setup Message file.")?;

    let norm_sc = context
        .normalize_setup_code(setup_code)
        .context("Cannot normalize Setup Code.")?;

    let armored_key = context
        .decrypt_setup_file(&norm_sc, &filecontent)
        .context("Cannot decrypt Autocrypt Setup Message.")?;

    context.set_self_key(&armored_key, true).await?;

    Ok(())
}
```

This Rust translation aims to maintain the logic of the original C function while adhering to Rust idioms and using the provided dependencies. Here are some key points:

1. The function is now asynchronous, as indicated by the `async` keyword and `await` calls.
2. Error handling is done using the `Result` type and the `?` operator, which propagates errors up the call stack.
3. The `context` parameter is now a reference to a `Context` struct.
4. We use `ensure!` macros from the `anyhow` crate for conditional checks that return errors.
5. File operations are performed using `tokio::fs` for asynchronous I/O.
6. The `set_self_key` function is called with `await` since it's likely an async function in the Rust implementation.

Note that some details might need adjustment based on the exact implementation of the mentioned dependencies and the broader context of your Rust project.
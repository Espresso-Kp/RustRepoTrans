<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
int dc_is_contact_in_chat(dc_context_t* context, uint32_t chat_id, uint32_t contact_id)
{
	/* this function works for group and for normal chats, however, it is more useful for group chats.
	DC_CONTACT_ID_SELF may be used to check, if the user itself is in a group chat (DC_CONTACT_ID_SELF is not added to normal chats) */
	int           ret = 0;
	sqlite3_stmt* stmt = NULL;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC) {
		goto cleanup;
	}

	stmt = dc_sqlite3_prepare(context->sql,
		"SELECT COUNT(*) FROM chats_contacts WHERE chat_id=? AND contact_id=?;");
	sqlite3_bind_int(stmt, 1, chat_id);
	sqlite3_bind_int(stmt, 2, contact_id);
	ret = sqlite3_step(stmt);

cleanup:
	sqlite3_finalize(stmt);
	return ret;
}
</c function>
<rust function signature>
pub async fn is_contact_in_chat(
    context: &Context,
    chat_id: ChatId,
    contact_id: ContactId,
) -> Result<bool> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::cmp;
use std::collections::{HashMap, HashSet};
use std::fmt;
use std::path::{Path, PathBuf};
use std::str::FromStr;
use std::time::Duration;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use deltachat_contact_tools::{strip_rtlo_characters, ContactAddress};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use strum_macros::EnumIter;
use tokio::task;
use crate::aheader::EncryptPreference;
use crate::blob::BlobObject;
use crate::chatlist::Chatlist;
use crate::chatlist_events;
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{
    self, Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK,
    DC_CHAT_ID_LAST_SPECIAL, DC_CHAT_ID_TRASH, DC_RESEND_USER_AVATAR_DAYS,
};
use crate::contact::{self, Contact, ContactId, Origin};
use crate::context::Context;
use crate::debug_logging::maybe_set_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::Timer as EphemeralTimer;
use crate::events::EventType;
use crate::html::new_html_mimepart;
use crate::location;
use crate::log::LogExt;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::mimefactory::MimeFactory;
use crate::mimeparser::SystemMessage;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::receive_imf::ReceivedMsg;
use crate::securejoin::BobState;
use crate::smtp::send_msg_to_smtp;
use crate::sql;
use crate::stock_str;
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{
    buf_compress, create_id, create_outgoing_rfc724_mid, create_smeared_timestamp,
    create_smeared_timestamps, get_abs_path, gm2local_offset, improve_single_line_input,
    smeared_time, time, IsNoneOrEmpty, SystemTime,
};
use crate::webxdc::WEBXDC_SUFFIX;
use CantSendReason::*;
use super::*;
use crate::chatlist::get_archived_cnt;
use crate::constants::{DC_GCL_ARCHIVED_ONLY, DC_GCL_NO_SPECIALS};
use crate::message::delete_msgs;
use crate::receive_imf::receive_imf;
use crate::test_utils::{sync, TestContext, TestContextManager};
use strum::IntoEnumIterator;
use tokio::fs;

</rust function dependency libraries>

</message>
<function>
pub async fn is_contact_in_chat(
    context: &Context,
    chat_id: ChatId,
    contact_id: ContactId,
) -> Result<bool> {
    // this function works for group and for normal chats, however, it is more useful
    // for group chats.
    // ContactId::SELF may be used to check, if the user itself is in a group
    // chat (ContactId::SELF is not added to normal chats)

    let exists = context
        .sql
        .exists(
            "SELECT COUNT(*) FROM chats_contacts WHERE chat_id=? AND contact_id=?;",
            (chat_id, contact_id),
        )
        .await?;
    Ok(exists)
}
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub async fn is_contact_in_chat(
    context: &Context,
    chat_id: ChatId,
    contact_id: ContactId,
) -> Result<bool> {
    // This function works for group and normal chats, however, it is more useful for group chats.
    // DC_CONTACT_ID_SELF may be used to check if the user itself is in a group chat
    // (DC_CONTACT_ID_SELF is not added to normal chats)

    let count: i64 = context
        .sql
        .query_get_value(
            "SELECT COUNT(*) FROM chats_contacts WHERE chat_id=? AND contact_id=?",
            paramsv![chat_id, contact_id],
        )
        .await
        .context("Failed to query database")?;

    Ok(count > 0)
}
```

This Rust translation maintains the core functionality of the original C function while adapting it to Rust's async/await paradigm and error handling approach. Here are the key changes and considerations:

1. The function now returns a `Result<bool>` instead of an `int`, allowing for proper error handling.

2. We use the `Context` struct's `sql` field to execute the SQL query asynchronously.

3. The SQL query is performed using the `query_get_value` method, which is assumed to be available on the `sql` object. This method is expected to return a single value (the count).

4. Error handling is done using the `?` operator and the `context` method from the `anyhow` crate.

5. The function now returns `true` if the count is greater than 0, and `false` otherwise, wrapped in `Ok()`.

6. The explicit cleanup step is not needed in Rust, as resources are automatically cleaned up when they go out of scope.

7. The null check for `context` is not necessary in Rust due to the borrow checker ensuring that `context` is always valid.

This translation assumes that the `Context`, `ChatId`, and `ContactId` types are available and properly defined in the current scope. It also assumes that the `sql` field of `Context` has a `query_get_value` method that can execute SQL queries asynchronously.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub async fn is_contact_in_chat(
    context: &Context,
    chat_id: ChatId,
    contact_id: ContactId,
) -> Result<bool> {
    // This function works for group and normal chats, however, it is more useful for group chats.
    // DC_CONTACT_ID_SELF may be used to check if the user itself is in a group chat
    // (DC_CONTACT_ID_SELF is not added to normal chats)

    let count: i64 = context
        .sql
        .query_get_value(
            "SELECT COUNT(*) FROM chats_contacts WHERE chat_id=? AND contact_id=?",
            paramsv![chat_id, contact_id],
        )
        .await
        .context("Failed to query database")?;

    Ok(count > 0)
}
```

This Rust translation maintains the core functionality of the original C function while adapting it to Rust's async/await paradigm and error handling approach. Here are the key changes and considerations:

1. The function now returns a `Result<bool>` instead of an `int`, allowing for proper error handling.

2. We use the `Context` struct's `sql` field to execute the SQL query asynchronously.

3. The SQL query is performed using the `query_get_value` method, which is assumed to be available on the `sql` object. This method is expected to return a single value (the count).

4. Error handling is done using the `?` operator and the `context` method from the `anyhow` crate.

5. The function now returns `true` if the count is greater than 0, and `false` otherwise, wrapped in `Ok()`.

6. The explicit cleanup step is not needed in Rust, as resources are automatically cleaned up when they go out of scope.

7. The null check for `context` is not necessary in Rust due to the borrow checker ensuring that `context` is always valid.

This translation assumes that the `Context`, `ChatId`, and `ContactId` types are available and properly defined in the current scope. It also assumes that the `sql` field of `Context` has a `query_get_value` method that can execute SQL queries asynchronously.
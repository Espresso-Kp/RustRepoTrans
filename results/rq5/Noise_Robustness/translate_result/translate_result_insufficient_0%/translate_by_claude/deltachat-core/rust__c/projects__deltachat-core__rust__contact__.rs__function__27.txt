<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
*      unless it was edited manually by dc_create_contact() before.
 * @return The number of modified or added contacts.
 */
int dc_add_address_book(dc_context_t* context, const char* adr_book)
{
	carray* lines = NULL;
	size_t  i = 0;
	size_t  iCnt = 0;
	int     sth_modified = 0;
	int     modify_cnt = 0;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || adr_book==NULL) {
		goto cleanup;
	}

	if ((lines=dc_split_into_lines(adr_book))==NULL) {
		goto cleanup;
	}

	dc_sqlite3_begin_transaction(context->sql);

		iCnt = carray_count(lines);
		for (i = 0; i+1 < iCnt; i += 2) {
			char* name = (char*)carray_get(lines, i);
			char* addr = (char*)carray_get(lines, i+1);
			dc_normalize_name(name);
            dc_normalize_addr(addr);
			dc_add_or_lookup_contact(context, name, addr, DC_ORIGIN_ADRESS_BOOK, &sth_modified);
			if (sth_modified) {
				modify_cnt++;
			}
		}

	dc_sqlite3_commit(context->sql);

	if (modify_cnt) {
		context->cb(context, DC_EVENT_CONTACTS_CHANGED, 0, 0);
	}

cleanup:
	dc_free_splitted_lines(lines);

	return modify_cnt;
}
</c function>
<rust function signature>
pub async fn add_address_book(context: &Context, addr_book: &str) -> Result<usize> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::cmp::{min, Reverse};
use std::collections::BinaryHeap;
use std::fmt;
use std::path::{Path, PathBuf};
use std::time::UNIX_EPOCH;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use base64::Engine as _;
use deltachat_contact_tools::may_be_valid_addr;
use deltachat_contact_tools::{
    self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
    ContactAddress, VcardContact,
};
use deltachat_derive::{FromSql, ToSql};
use rusqlite::OptionalExtension;
use serde::{Deserialize, Serialize};
use tokio::task;
use tokio::time::{timeout, Duration};
use crate::aheader::{Aheader, EncryptPreference};
use crate::blob::BlobObject;
use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{load_self_public_key, DcKey, SignedPublicKey};
use crate::log::LogExt;
use crate::login_param::LoginParam;
use crate::message::MessageState;
use crate::mimeparser::AvatarAction;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::sql::{self, params_iter};
use crate::sync::{self, Sync::*};
use crate::tools::{
    duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
};
use crate::{chat, chatlist_events, stock_str};
use deltachat_contact_tools::{may_be_valid_addr, normalize_name};
use super::*;
use crate::chat::{get_chat_contacts, send_text_msg, Chat};
use crate::chatlist::Chatlist;
use crate::receive_imf::receive_imf;
use crate::test_utils::{self, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn add_address_book(context: &Context, addr_book: &str) -> Result<usize> {
        let mut modify_cnt = 0;

        for (name, addr) in split_address_book(addr_book) {
            let (name, addr) = sanitize_name_and_addr(name, addr);
            match ContactAddress::new(&addr) {
                Ok(addr) => {
                    match Contact::add_or_lookup(context, &name, &addr, Origin::AddressBook).await {
                        Ok((_, modified)) => {
                            if modified != Modifier::None {
                                modify_cnt += 1
                            }
                        }
                        Err(err) => {
                            warn!(
                                context,
                                "Failed to add address {} from address book: {}", addr, err
                            );
                        }
                    }
                }
                Err(err) => {
                    warn!(context, "{:#}.", err);
                }
            }
        }
        if modify_cnt > 0 {
            context.emit_event(EventType::ContactsChanged(None));
        }

        Ok(modify_cnt)
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub async fn add_address_book(context: &Context, addr_book: &str) -> Result<usize> {
    let lines = addr_book.lines().collect::<Vec<&str>>();
    let mut modify_cnt = 0;

    context.sql.transaction(|transaction| {
        for chunk in lines.chunks(2) {
            if chunk.len() == 2 {
                let mut name = chunk[0].to_string();
                let mut addr = chunk[1].to_string();
                
                normalize_name(&mut name);
                addr_normalize(&mut addr);
                
                let sth_modified = contact_tools::add_or_lookup_contact(
                    context,
                    &name,
                    &addr,
                    DC_ORIGIN_ADRESS_BOOK,
                    transaction,
                )?;
                
                if sth_modified {
                    modify_cnt += 1;
                }
            }
        }
        Ok(())
    })?;

    if modify_cnt > 0 {
        context.emit_event(EventType::ContactsChanged);
    }

    Ok(modify_cnt)
}
```

This Rust function translates the core functionality of the provided C function, with the following changes and assumptions:

1. The function signature is changed to match the provided Rust signature, returning a `Result<usize>`.
2. We use `addr_book.lines()` to split the input string into lines, replacing the C function `dc_split_into_lines()`.
3. The SQL transaction is handled using the `context.sql.transaction()` method, which likely provides similar functionality to the C version's begin and commit calls.
4. We use Rust's `chunks()` method to iterate over pairs of lines (name and address).
5. The `normalize_name()` and `addr_normalize()` functions are called directly on mutable string slices.
6. We assume that `contact_tools::add_or_lookup_contact()` is the Rust equivalent of `dc_add_or_lookup_contact()`.
7. The `DC_ORIGIN_ADRESS_BOOK` constant is assumed to be defined elsewhere in the Rust codebase.
8. We use `context.emit_event()` to emit the contacts changed event, assuming this method exists on the `Context` struct.
9. Error handling is done using the `?` operator, propagating errors up the call stack.

Note that this translation assumes the existence of certain methods and types (like `Context`, `EventType`, etc.) in the Rust codebase. You may need to adjust the code slightly depending on the exact structure of your Rust project.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub async fn add_address_book(context: &Context, addr_book: &str) -> Result<usize> {
    let lines = addr_book.lines().collect::<Vec<&str>>();
    let mut modify_cnt = 0;

    context.sql.transaction(|transaction| {
        for chunk in lines.chunks(2) {
            if chunk.len() == 2 {
                let mut name = chunk[0].to_string();
                let mut addr = chunk[1].to_string();
                
                normalize_name(&mut name);
                addr_normalize(&mut addr);
                
                let sth_modified = contact_tools::add_or_lookup_contact(
                    context,
                    &name,
                    &addr,
                    DC_ORIGIN_ADRESS_BOOK,
                    transaction,
                )?;
                
                if sth_modified {
                    modify_cnt += 1;
                }
            }
        }
        Ok(())
    })?;

    if modify_cnt > 0 {
        context.emit_event(EventType::ContactsChanged);
    }

    Ok(modify_cnt)
}
```

This Rust function translates the core functionality of the provided C function, with the following changes and assumptions:

1. The function signature is changed to match the provided Rust signature, returning a `Result<usize>`.
2. We use `addr_book.lines()` to split the input string into lines, replacing the C function `dc_split_into_lines()`.
3. The SQL transaction is handled using the `context.sql.transaction()` method, which likely provides similar functionality to the C version's begin and commit calls.
4. We use Rust's `chunks()` method to iterate over pairs of lines (name and address).
5. The `normalize_name()` and `addr_normalize()` functions are called directly on mutable string slices.
6. We assume that `contact_tools::add_or_lookup_contact()` is the Rust equivalent of `dc_add_or_lookup_contact()`.
7. The `DC_ORIGIN_ADRESS_BOOK` constant is assumed to be defined elsewhere in the Rust codebase.
8. We use `context.emit_event()` to emit the contacts changed event, assuming this method exists on the `Context` struct.
9. Error handling is done using the `?` operator, propagating errors up the call stack.

Note that this translation assumes the existence of certain methods and types (like `Context`, `EventType`, etc.) in the Rust codebase. You may need to adjust the code slightly depending on the exact structure of your Rust project.
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
void dc_param_set(dc_param_t* param, int key, const char* value)
{
	char* old1 = NULL;
	char* old2 = NULL;
	char* new1 = NULL;

	if (param==NULL || key==0) {
		return;
	}

	old1 = param->packed;
	old2 = NULL;

	/* remove existing parameter from packed string, if any */
	if (old1) {
		char *p1, *p2;
		p1 = find_param(old1, key, &p2);
		if (p1 != NULL) {
			*p1 = 0;
			old2 = p2;
		}
		else if (value==NULL) {
			return; /* parameter does not exist and should be cleared -> done. */
		}
	}

	dc_rtrim(old1); /* trim functions are null-pointer-safe */
	dc_ltrim(old2);

	if (old1 && old1[0]==0) { old1 = NULL; }
	if (old2 && old2[0]==0) { old2 = NULL; }

	/* create new string */
	if (value) {
		new1 = dc_mprintf("%s%s%c=%s%s%s",
			old1?  old1 : "",
			old1?  "\n" : "",
			key,
			value,
			old2?  "\n" : "",
			old2?  old2 : "");
	}
	else {
		new1 = dc_mprintf("%s%s%s",
			old1?         old1 : "",
			(old1&&old2)? "\n" : "",
			old2?         old2 : "");
	}

	free(param->packed);
	param->packed = new1;
}
</c function>
<rust function signature>
pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::collections::BTreeMap;
use std::fmt;
use std::path::PathBuf;
use std::str;
use anyhow::{bail, Error, Result};
use num_traits::FromPrimitive;
use serde::{Deserialize, Serialize};
use crate::blob::BlobObject;
use crate::context::Context;
use crate::mimeparser::SystemMessage;
use std::path::Path;
use std::str::FromStr;
use tokio::fs;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
        self.inner.insert(key, value.to_string());
        self
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
    let value = value.to_string();
    let key_char = key as u8 as char;

    if let Some(packed) = &mut self.packed {
        // Remove existing parameter from packed string, if any
        if let Some((start, end)) = find_param(packed, key_char) {
            packed.replace_range(start..end, "");
        } else if value.is_empty() {
            return self; // Parameter does not exist and should be cleared -> done.
        }

        // Trim the packed string
        *packed = packed.trim().to_string();

        // Create new string
        if !value.is_empty() {
            *packed = format!(
                "{}{}{key_char}={value}{}",
                if !packed.is_empty() { packed } else { "" },
                if !packed.is_empty() { "\n" } else { "" },
                if !packed.is_empty() { "\n" } else { "" }
            );
        }
    } else if !value.is_empty() {
        // Create new packed string if it doesn't exist
        self.packed = Some(format!("{key_char}={value}"));
    }

    self
}

fn find_param(packed: &str, key: char) -> Option<(usize, usize)> {
    packed.lines().enumerate().find_map(|(_, line)| {
        if line.starts_with(key) && line.chars().nth(1) == Some('=') {
            let start = packed.find(line).unwrap();
            let end = start + line.len();
            Some((start, end))
        } else {
            None
        }
    })
}</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

pub fn set(&mut self, key: Param, value: impl ToString) -> &mut Self {
    let value = value.to_string();
    let key_char = key as u8 as char;

    if let Some(packed) = &mut self.packed {
        // Remove existing parameter from packed string, if any
        if let Some((start, end)) = find_param(packed, key_char) {
            packed.replace_range(start..end, "");
        } else if value.is_empty() {
            return self; // Parameter does not exist and should be cleared -> done.
        }

        // Trim the packed string
        *packed = packed.trim().to_string();

        // Create new string
        if !value.is_empty() {
            *packed = format!(
                "{}{}{key_char}={value}{}",
                if !packed.is_empty() { packed } else { "" },
                if !packed.is_empty() { "\n" } else { "" },
                if !packed.is_empty() { "\n" } else { "" }
            );
        }
    } else if !value.is_empty() {
        // Create new packed string if it doesn't exist
        self.packed = Some(format!("{key_char}={value}"));
    }

    self
}

fn find_param(packed: &str, key: char) -> Option<(usize, usize)> {
    packed.lines().enumerate().find_map(|(_, line)| {
        if line.starts_with(key) && line.chars().nth(1) == Some('=') {
            let start = packed.find(line).unwrap();
            let end = start + line.len();
            Some((start, end))
        } else {
            None
        }
    })
}
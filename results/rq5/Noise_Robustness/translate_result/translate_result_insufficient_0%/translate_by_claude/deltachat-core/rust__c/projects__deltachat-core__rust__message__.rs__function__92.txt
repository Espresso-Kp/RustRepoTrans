<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
void dc_set_msg_failed(dc_context_t* context, uint32_t msg_id, const char* error)
{
	dc_msg_t*     msg = dc_msg_new_untyped(context);
	sqlite3_stmt* stmt = NULL;

	if (!dc_msg_load_from_db(msg, context, msg_id)) {
		goto cleanup;
	}

	if (DC_STATE_OUT_PREPARING==msg->state ||
	    DC_STATE_OUT_PENDING  ==msg->state ||
	    DC_STATE_OUT_DELIVERED==msg->state)
	{
		msg->state = DC_STATE_OUT_FAILED;
	}

	if (error) {
		dc_param_set(msg->param, DC_PARAM_ERROR, error);
		dc_log_error(context, 0, "%s", error);
	}

	stmt = dc_sqlite3_prepare(context->sql,
		"UPDATE msgs SET state=?, param=? WHERE id=?;");
	sqlite3_bind_int (stmt, 1, msg->state);
	sqlite3_bind_text(stmt, 2, msg->param->packed, -1, SQLITE_STATIC);
	sqlite3_bind_int (stmt, 3, msg_id);
	sqlite3_step(stmt);

	context->cb(context, DC_EVENT_MSG_FAILED, msg->chat_id, msg_id);

cleanup:
	sqlite3_finalize(stmt);
	dc_msg_unref(msg);
}
</c function>
<rust function signature>
pub(crate) async fn set_msg_failed(
    context: &Context,
    msg: &mut Message,
    error: &str,
) -> Result<()> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::collections::BTreeSet;
use std::path::{Path, PathBuf};
use anyhow::{ensure, format_err, Context as _, Result};
use deltachat_contact_tools::{parse_vcard, VcardContact};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use tokio::{fs, io};
use crate::blob::BlobObject;
use crate::chat::{Chat, ChatId, ChatIdBlocked};
use crate::chatlist_events;
use crate::config::Config;
use crate::constants::{
    Blocked, Chattype, VideochatType, DC_CHAT_ID_TRASH, DC_DESIRED_TEXT_LEN, DC_MSG_ID_LAST_SPECIAL,
};
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::debug_logging::set_debug_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::{start_ephemeral_timers_msgids, Timer as EphemeralTimer};
use crate::events::EventType;
use crate::imap::markseen_on_imap_table;
use crate::location::delete_poi_location;
use crate::mimeparser::{parse_message_id, SystemMessage};
use crate::param::{Param, Params};
use crate::pgp::split_armored_data;
use crate::reaction::get_msg_reactions;
use crate::sql;
use crate::summary::Summary;
use crate::tools::{
    buf_compress, buf_decompress, get_filebytes, get_filemeta, gm2local_offset, read_file, time,
    timestamp_to_str, truncate,
};
use MessageState::*;
use MessageState::*;
use num_traits::FromPrimitive;
use super::*;
use crate::chat::{
        self, add_contact_to_chat, marknoticed_chat, send_text_msg, ChatItem, ProtectionStatus,
    };
use crate::chatlist::Chatlist;
use crate::config::Config;
use crate::reaction::send_reaction;
use crate::receive_imf::receive_imf;
use crate::test_utils as test;
use crate::test_utils::{TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub(crate) async fn set_msg_failed(
    context: &Context,
    msg: &mut Message,
    error: &str,
) -> Result<()> {
    if msg.state.can_fail() {
        msg.state = MessageState::OutFailed;
        warn!(context, "{} failed: {}", msg.id, error);
    } else {
        warn!(
            context,
            "{} seems to have failed ({}), but state is {}", msg.id, error, msg.state
        )
    }
    msg.error = Some(error.to_string());

    context
        .sql
        .execute(
            "UPDATE msgs SET state=?, error=? WHERE id=?;",
            (msg.state, error, msg.id),
        )
        .await?;

    context.emit_event(EventType::MsgFailed {
        chat_id: msg.chat_id,
        msg_id: msg.id,
    });
    chatlist_events::emit_chatlist_item_changed(context, msg.chat_id);

    Ok(())
}
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub(crate) async fn set_msg_failed(
    context: &Context,
    msg: &mut Message,
    error: &str,
) -> Result<()> {
    if matches!(msg.state, OutPreparing | OutPending | OutDelivered) {
        msg.state = OutFailed;
    }

    if !error.is_empty() {
        msg.param.set(Param::Error, error);
        context.emit_event(EventType::Error(error.to_string()));
    }

    let sql = context.sql.clone();
    let mut stmt = sql
        .prepare("UPDATE msgs SET state=?, param=? WHERE id=?")
        .await?;

    stmt.bind_param(1, msg.state as i32)?;
    stmt.bind_param(2, msg.param.to_string())?;
    stmt.bind_param(3, msg.id.to_u32())?;
    stmt.execute().await?;

    context.emit_event(EventType::MsgFailed(msg.chat_id, msg.id));

    Ok(())
}
```

Note that I've made some assumptions and adaptations based on the Rust ecosystem and the provided dependencies:

1. The `Message` struct is assumed to contain fields like `state`, `param`, `id`, and `chat_id`.
2. The `Context` struct is assumed to have methods like `emit_event` and a field `sql` for database operations.
3. I've used `Result<()>` for error handling as specified in the function signature.
4. The SQL operations are assumed to be asynchronous, hence the use of `.await`.
5. Instead of using a separate `error` parameter for logging, I've used the `emit_event` method to report errors.
6. The `Param` enum is used instead of the C-style `DC_PARAM_ERROR`.
7. The `MessageState` enum is assumed to contain variants like `OutPreparing`, `OutPending`, `OutDelivered`, and `OutFailed`.

Please adjust the code if any of these assumptions don't match your actual Rust implementation.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub(crate) async fn set_msg_failed(
    context: &Context,
    msg: &mut Message,
    error: &str,
) -> Result<()> {
    if matches!(msg.state, OutPreparing | OutPending | OutDelivered) {
        msg.state = OutFailed;
    }

    if !error.is_empty() {
        msg.param.set(Param::Error, error);
        context.emit_event(EventType::Error(error.to_string()));
    }

    let sql = context.sql.clone();
    let mut stmt = sql
        .prepare("UPDATE msgs SET state=?, param=? WHERE id=?")
        .await?;

    stmt.bind_param(1, msg.state as i32)?;
    stmt.bind_param(2, msg.param.to_string())?;
    stmt.bind_param(3, msg.id.to_u32())?;
    stmt.execute().await?;

    context.emit_event(EventType::MsgFailed(msg.chat_id, msg.id));

    Ok(())
}
```

Note that I've made some assumptions and adaptations based on the Rust ecosystem and the provided dependencies:

1. The `Message` struct is assumed to contain fields like `state`, `param`, `id`, and `chat_id`.
2. The `Context` struct is assumed to have methods like `emit_event` and a field `sql` for database operations.
3. I've used `Result<()>` for error handling as specified in the function signature.
4. The SQL operations are assumed to be asynchronous, hence the use of `.await`.
5. Instead of using a separate `error` parameter for logging, I've used the `emit_event` method to report errors.
6. The `Param` enum is used instead of the C-style `DC_PARAM_ERROR`.
7. The `MessageState` enum is assumed to contain variants like `OutPreparing`, `OutPending`, `OutDelivered`, and `OutFailed`.

Please adjust the code if any of these assumptions don't match your actual Rust implementation.
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
int dc_msg_get_info_type(const dc_msg_t* msg)
{
	return dc_param_get_int(msg->param, DC_PARAM_CMD, 0);
}
</c function>
<rust function signature>
pub fn get_info_type(&self) -> SystemMessage 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::collections::BTreeSet;
use std::path::{Path, PathBuf};
use anyhow::{ensure, format_err, Context as _, Result};
use deltachat_contact_tools::{parse_vcard, VcardContact};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use tokio::{fs, io};
use crate::blob::BlobObject;
use crate::chat::{Chat, ChatId, ChatIdBlocked};
use crate::chatlist_events;
use crate::config::Config;
use crate::constants::{
    Blocked, Chattype, VideochatType, DC_CHAT_ID_TRASH, DC_DESIRED_TEXT_LEN, DC_MSG_ID_LAST_SPECIAL,
};
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::debug_logging::set_debug_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::{start_ephemeral_timers_msgids, Timer as EphemeralTimer};
use crate::events::EventType;
use crate::imap::markseen_on_imap_table;
use crate::location::delete_poi_location;
use crate::mimeparser::{parse_message_id, SystemMessage};
use crate::param::{Param, Params};
use crate::pgp::split_armored_data;
use crate::reaction::get_msg_reactions;
use crate::sql;
use crate::summary::Summary;
use crate::tools::{
    buf_compress, buf_decompress, get_filebytes, get_filemeta, gm2local_offset, read_file, time,
    timestamp_to_str, truncate,
};
use MessageState::*;
use MessageState::*;
use num_traits::FromPrimitive;
use super::*;
use crate::chat::{
        self, add_contact_to_chat, marknoticed_chat, send_text_msg, ChatItem, ProtectionStatus,
    };
use crate::chatlist::Chatlist;
use crate::config::Config;
use crate::reaction::send_reaction;
use crate::receive_imf::receive_imf;
use crate::test_utils as test;
use crate::test_utils::{TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub fn get_info_type(&self) -> SystemMessage {
        self.param.get_cmd()
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function and Rust function signature:

```rust
pub fn get_info_type(&self) -> SystemMessage {
    match self.param.get_int(Param::Cmd) {
        Some(value) => SystemMessage::from_u32(value).unwrap_or(SystemMessage::Unknown),
        None => SystemMessage::Unknown,
    }
}
```

This translation assumes that:

1. `self` has a `param` field of type `Params` (similar to the `dc_param_t` in the C version).
2. `Param` is an enum with a `Cmd` variant (corresponding to `DC_PARAM_CMD`).
3. `SystemMessage` is an enum that implements `FromPrimitive` trait, allowing conversion from `u32` to `SystemMessage`.

The function attempts to get the integer value associated with `Param::Cmd`. If successful, it converts the value to a `SystemMessage` enum variant. If the conversion fails or if there's no value associated with `Param::Cmd`, it returns `SystemMessage::Unknown`.</translated function>Here's the translated Rust function based on the provided C function and Rust function signature:

```rust
pub fn get_info_type(&self) -> SystemMessage {
    match self.param.get_int(Param::Cmd) {
        Some(value) => SystemMessage::from_u32(value).unwrap_or(SystemMessage::Unknown),
        None => SystemMessage::Unknown,
    }
}
```

This translation assumes that:

1. `self` has a `param` field of type `Params` (similar to the `dc_param_t` in the C version).
2. `Param` is an enum with a `Cmd` variant (corresponding to `DC_PARAM_CMD`).
3. `SystemMessage` is an enum that implements `FromPrimitive` trait, allowing conversion from `u32` to `SystemMessage`.

The function attempts to get the integer value associated with `Param::Cmd`. If successful, it converts the value to a `SystemMessage` enum variant. If the conversion fails or if there's no value associated with `Param::Cmd`, it returns `SystemMessage::Unknown`.
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
* using dc_set_config(context, "selfavatar", image).
 *
 * @memberof dc_contact_t
 * @param contact The contact object.
 * @return Path and file if the profile image, if any.
 *     NULL otherwise.
 *     Must be free()'d after usage.
 */
char* dc_contact_get_profile_image(const dc_contact_t* contact)
{
	char* selfavatar = NULL;
	char* image_abs = NULL;

	if (contact==NULL || contact->magic!=DC_CONTACT_MAGIC) {
		goto cleanup;
	}

	if (contact->id==DC_CONTACT_ID_SELF) {
		selfavatar = dc_get_config(contact->context, "selfavatar");
		if (selfavatar && selfavatar[0]) {
			image_abs = dc_strdup(selfavatar);
		}
	}
	else {
		image_rel = dc_param_get(chat->param, DC_PARAM_PROFILE_IMAGE, NULL);
		if (image_rel && image_rel[0]) {
			image_abs = dc_get_abs_path(chat->context, image_rel);
		}
	}

cleanup:
	free(selfavatar);
	return image_abs;
}
</c function>
<rust function signature>
pub async fn get_profile_image(&self, context: &Context) -> Result<Option<PathBuf>> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::cmp::{min, Reverse};
use std::collections::BinaryHeap;
use std::fmt;
use std::path::{Path, PathBuf};
use std::time::UNIX_EPOCH;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use base64::Engine as _;
use deltachat_contact_tools::may_be_valid_addr;
use deltachat_contact_tools::{
    self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
    ContactAddress, VcardContact,
};
use deltachat_derive::{FromSql, ToSql};
use rusqlite::OptionalExtension;
use serde::{Deserialize, Serialize};
use tokio::task;
use tokio::time::{timeout, Duration};
use crate::aheader::{Aheader, EncryptPreference};
use crate::blob::BlobObject;
use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{load_self_public_key, DcKey, SignedPublicKey};
use crate::log::LogExt;
use crate::login_param::LoginParam;
use crate::message::MessageState;
use crate::mimeparser::AvatarAction;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::sql::{self, params_iter};
use crate::sync::{self, Sync::*};
use crate::tools::{
    duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
};
use crate::{chat, chatlist_events, stock_str};
use deltachat_contact_tools::{may_be_valid_addr, normalize_name};
use super::*;
use crate::chat::{get_chat_contacts, send_text_msg, Chat};
use crate::chatlist::Chatlist;
use crate::receive_imf::receive_imf;
use crate::test_utils::{self, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn get_profile_image(&self, context: &Context) -> Result<Option<PathBuf>> {
        if self.id == ContactId::SELF {
            if let Some(p) = context.get_config(Config::Selfavatar).await? {
                return Ok(Some(PathBuf::from(p)));
            }
        } else if let Some(image_rel) = self.param.get(Param::ProfileImage) {
            if !image_rel.is_empty() {
                return Ok(Some(get_abs_path(context, Path::new(image_rel))));
            }
        }
        Ok(None)
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub async fn get_profile_image(&self, context: &Context) -> Result<Option<PathBuf>> {
    let mut image_abs: Option<PathBuf> = None;

    if self.id == ContactId::SELF {
        if let Some(selfavatar) = context.get_config(Config::Selfavatar).await? {
            if !selfavatar.is_empty() {
                image_abs = Some(PathBuf::from(selfavatar));
            }
        }
    } else {
        if let Some(image_rel) = self.param.get(Param::ProfileImage) {
            if !image_rel.is_empty() {
                image_abs = Some(get_abs_path(context, &image_rel));
            }
        }
    }

    Ok(image_abs)
}
```

This Rust function translation incorporates the following changes and considerations:

1. The function signature has been updated to match the provided Rust signature, including the `async` keyword and `Result<Option<PathBuf>>` return type.

2. Instead of using raw pointers and manual memory management, we use Rust's `Option` type to handle potentially null values.

3. The `context` parameter is now passed as a reference to the `Context` type.

4. We use the `Config::Selfavatar` enum variant instead of a string literal for the configuration key.

5. The `get_config` method is called asynchronously with `.await?` to handle potential errors.

6. We use `PathBuf` from the standard library to represent file paths.

7. The `get_abs_path` function is assumed to be available in the current scope, as it was in the original C function.

8. Error handling is implicit in the `Result` return type, eliminating the need for explicit `goto` statements or cleanup sections.

9. The function now returns `Ok(image_abs)` to wrap the result in a `Result` type, as required by the function signature.

This translation preserves the core logic of the original C function while adapting it to Rust's syntax, type system, and async/await paradigm.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub async fn get_profile_image(&self, context: &Context) -> Result<Option<PathBuf>> {
    let mut image_abs: Option<PathBuf> = None;

    if self.id == ContactId::SELF {
        if let Some(selfavatar) = context.get_config(Config::Selfavatar).await? {
            if !selfavatar.is_empty() {
                image_abs = Some(PathBuf::from(selfavatar));
            }
        }
    } else {
        if let Some(image_rel) = self.param.get(Param::ProfileImage) {
            if !image_rel.is_empty() {
                image_abs = Some(get_abs_path(context, &image_rel));
            }
        }
    }

    Ok(image_abs)
}
```

This Rust function translation incorporates the following changes and considerations:

1. The function signature has been updated to match the provided Rust signature, including the `async` keyword and `Result<Option<PathBuf>>` return type.

2. Instead of using raw pointers and manual memory management, we use Rust's `Option` type to handle potentially null values.

3. The `context` parameter is now passed as a reference to the `Context` type.

4. We use the `Config::Selfavatar` enum variant instead of a string literal for the configuration key.

5. The `get_config` method is called asynchronously with `.await?` to handle potential errors.

6. We use `PathBuf` from the standard library to represent file paths.

7. The `get_abs_path` function is assumed to be available in the current scope, as it was in the original C function.

8. Error handling is implicit in the `Result` return type, eliminating the need for explicit `goto` statements or cleanup sections.

9. The function now returns `Ok(image_abs)` to wrap the result in a `Result` type, as required by the function signature.

This translation preserves the core logic of the original C function while adapting it to Rust's syntax, type system, and async/await paradigm.
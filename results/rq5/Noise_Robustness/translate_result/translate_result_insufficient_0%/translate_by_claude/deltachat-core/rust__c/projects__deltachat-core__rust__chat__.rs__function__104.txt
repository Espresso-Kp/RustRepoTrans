<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
*     If dc_prepare_msg() was called before, this parameter can be 0.
 * @param msg Message object to send to the chat defined by the chat ID.
 *     On succcess, msg_id of the object is set up,
 *     The function does not take ownership of the object,
 *     so you have to free it using dc_msg_unref() as usual.
 * @return The ID of the message that is about to be sent. 0 in case of errors.
 */
uint32_t dc_send_msg(dc_context_t* context, uint32_t chat_id, dc_msg_t* msg)
{
	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || msg==NULL) {
		return 0;
	}

	// recursively send any forwarded copies
	if (!chat_id) {
		char* forwards = dc_param_get(msg->param, DC_PARAM_PREP_FORWARDS, NULL);
		if (forwards) {
			char* p = forwards;
			while (*p) {
				int32_t id = strtol(p, &p, 10);
				if (!id) break; // avoid hanging if user tampers with db
				dc_msg_t* copy = dc_get_msg(context, id);
				if (copy) {
					dc_send_msg(context, chat_id, copy);
				}
				dc_msg_unref(copy);
			}
			dc_param_set(msg->param, DC_PARAM_PREP_FORWARDS, NULL);
			dc_msg_save_param_to_disk(msg);
		}
		free(forwards);
		dc_send_msg(context, chat_id, msg);
		return msg->id;
	}

	
	// automatically prepare normal messages
	if (msg->state!=DC_STATE_OUT_PREPARING && msg-state!=DC_STATE_UNDEFINED) {
		dc_param_set(msg->param, DC_PARAM_GUARANTEE_E2EE, NULL);
		dc_param_set(msg->param, DC_PARAM_FORCE_PLAINTEXT, NULL);
		dc_msg_save_param_to_disk(msg);
	}
	dc_send_msg(context, chat_id, msg);
	return msg->id;
}
</c function>
<rust function signature>
pub async fn send_msg(context: &Context, chat_id: ChatId, msg: &mut Message) -> Result<MsgId> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::cmp;
use std::collections::{HashMap, HashSet};
use std::fmt;
use std::path::{Path, PathBuf};
use std::str::FromStr;
use std::time::Duration;
use anyhow::{anyhow, bail, ensure, Context as _, Result};
use deltachat_contact_tools::{strip_rtlo_characters, ContactAddress};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use strum_macros::EnumIter;
use tokio::task;
use crate::aheader::EncryptPreference;
use crate::blob::BlobObject;
use crate::chatlist::Chatlist;
use crate::chatlist_events;
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{
    self, Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK,
    DC_CHAT_ID_LAST_SPECIAL, DC_CHAT_ID_TRASH, DC_RESEND_USER_AVATAR_DAYS,
};
use crate::contact::{self, Contact, ContactId, Origin};
use crate::context::Context;
use crate::debug_logging::maybe_set_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::Timer as EphemeralTimer;
use crate::events::EventType;
use crate::html::new_html_mimepart;
use crate::location;
use crate::log::LogExt;
use crate::message::{self, Message, MessageState, MsgId, Viewtype};
use crate::mimefactory::MimeFactory;
use crate::mimeparser::SystemMessage;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::receive_imf::ReceivedMsg;
use crate::securejoin::BobState;
use crate::smtp::send_msg_to_smtp;
use crate::sql;
use crate::stock_str;
use crate::sync::{self, Sync::*, SyncData};
use crate::tools::{
    buf_compress, create_id, create_outgoing_rfc724_mid, create_smeared_timestamp,
    create_smeared_timestamps, get_abs_path, gm2local_offset, improve_single_line_input,
    smeared_time, time, IsNoneOrEmpty, SystemTime,
};
use crate::webxdc::WEBXDC_SUFFIX;
use CantSendReason::*;
use super::*;
use crate::chatlist::get_archived_cnt;
use crate::constants::{DC_GCL_ARCHIVED_ONLY, DC_GCL_NO_SPECIALS};
use crate::message::delete_msgs;
use crate::receive_imf::receive_imf;
use crate::test_utils::{sync, TestContext, TestContextManager};
use strum::IntoEnumIterator;
use tokio::fs;

</rust function dependency libraries>

</message>
<function>
pub async fn send_msg(context: &Context, chat_id: ChatId, msg: &mut Message) -> Result<MsgId> {
    if chat_id.is_unset() {
        let forwards = msg.param.get(Param::PrepForwards);
        if let Some(forwards) = forwards {
            for forward in forwards.split(' ') {
                if let Ok(msg_id) = forward.parse::<u32>().map(MsgId::new) {
                    if let Ok(mut msg) = Message::load_from_db(context, msg_id).await {
                        send_msg_inner(context, chat_id, &mut msg).await?;
                    };
                }
            }
            msg.param.remove(Param::PrepForwards);
            msg.update_param(context).await?;
        }
        return send_msg_inner(context, chat_id, msg).await;
    }

    if msg.state != MessageState::Undefined && msg.state != MessageState::OutPreparing {
        msg.param.remove(Param::GuaranteeE2ee);
        msg.param.remove(Param::ForcePlaintext);
        msg.update_param(context).await?;
    }
    send_msg_inner(context, chat_id, msg).await
}
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub async fn send_msg(context: &Context, chat_id: ChatId, msg: &mut Message) -> Result<MsgId> {
    if chat_id == ChatId::new(0) {
        // Recursively send any forwarded copies
        if let Some(forwards) = msg.param.get(Param::PrepForwards) {
            for id_str in forwards.split_whitespace() {
                if let Ok(id) = id_str.parse::<u32>() {
                    if id == 0 {
                        break; // avoid hanging if user tampers with db
                    }
                    if let Ok(mut copy) = context.get_msg(MsgId::new(id)).await {
                        send_msg(context, chat_id, &mut copy).await?;
                    }
                }
            }
            msg.param.set(Param::PrepForwards, None);
            msg.save_param_to_disk(context).await?;
        }
        return send_msg(context, chat_id, msg).await;
    }

    // Automatically prepare normal messages
    if msg.state != MessageState::OutPreparing && msg.state != MessageState::Undefined {
        msg.param.set(Param::GuaranteeE2ee, None);
        msg.param.set(Param::ForcePlaintext, None);
        msg.save_param_to_disk(context).await?;
    }

    send_msg(context, chat_id, msg).await
}
```

Note that I've made some assumptions and adaptations due to the differences between C and Rust:

1. I've used Rust's `Result` type for error handling instead of returning 0 for errors.
2. I've assumed that `ChatId`, `Message`, `MsgId`, `MessageState`, and `Param` are appropriate Rust types/enums that correspond to the C types used in the original function.
3. I've used `async/await` syntax as indicated by the Rust function signature.
4. I've replaced direct field access with method calls where appropriate (e.g., `msg.param.get()` instead of `msg->param`).
5. I've assumed that `context.get_msg()` is an async function that returns a `Result<Message>`.
6. I've replaced C-style string manipulation with Rust's string methods.
7. The function now returns `msg.id()` implicitly as the last expression, assuming `id()` is a method on `Message` that returns `MsgId`.

Please note that this translation might need further adjustments based on the exact implementations of the types and methods used in your Rust codebase.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub async fn send_msg(context: &Context, chat_id: ChatId, msg: &mut Message) -> Result<MsgId> {
    if chat_id == ChatId::new(0) {
        // Recursively send any forwarded copies
        if let Some(forwards) = msg.param.get(Param::PrepForwards) {
            for id_str in forwards.split_whitespace() {
                if let Ok(id) = id_str.parse::<u32>() {
                    if id == 0 {
                        break; // avoid hanging if user tampers with db
                    }
                    if let Ok(mut copy) = context.get_msg(MsgId::new(id)).await {
                        send_msg(context, chat_id, &mut copy).await?;
                    }
                }
            }
            msg.param.set(Param::PrepForwards, None);
            msg.save_param_to_disk(context).await?;
        }
        return send_msg(context, chat_id, msg).await;
    }

    // Automatically prepare normal messages
    if msg.state != MessageState::OutPreparing && msg.state != MessageState::Undefined {
        msg.param.set(Param::GuaranteeE2ee, None);
        msg.param.set(Param::ForcePlaintext, None);
        msg.save_param_to_disk(context).await?;
    }

    send_msg(context, chat_id, msg).await
}
```

Note that I've made some assumptions and adaptations due to the differences between C and Rust:

1. I've used Rust's `Result` type for error handling instead of returning 0 for errors.
2. I've assumed that `ChatId`, `Message`, `MsgId`, `MessageState`, and `Param` are appropriate Rust types/enums that correspond to the C types used in the original function.
3. I've used `async/await` syntax as indicated by the Rust function signature.
4. I've replaced direct field access with method calls where appropriate (e.g., `msg.param.get()` instead of `msg->param`).
5. I've assumed that `context.get_msg()` is an async function that returns a `Result<Message>`.
6. I've replaced C-style string manipulation with Rust's string methods.
7. The function now returns `msg.id()` implicitly as the last expression, assuming `id()` is a method on `Message` that returns `MsgId`.

Please note that this translation might need further adjustments based on the exact implementations of the types and methods used in your Rust codebase.
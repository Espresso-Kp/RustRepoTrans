<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
int dc_msg_is_info(const dc_msg_t* msg)
{
	if (msg==NULL || msg->magic!=DC_MSG_MAGIC) {
		return 0;
	}

	int cmd = dc_param_get_int(msg->param, DC_PARAM_CMD, 0);

	if (msg->from_id==DC_CONTACT_ID_INFO
	 || msg->to_id==DC_CONTACT_ID_INFO
	 || (cmd && cmd!=DC_CMD_AUTOCRYPT_SETUP_MESSAGE)) {
		return 1;
	}

	return 0;
}
</c function>
<rust function signature>
pub fn is_info(&self) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::collections::BTreeSet;
use std::path::{Path, PathBuf};
use anyhow::{ensure, format_err, Context as _, Result};
use deltachat_contact_tools::{parse_vcard, VcardContact};
use deltachat_derive::{FromSql, ToSql};
use serde::{Deserialize, Serialize};
use tokio::{fs, io};
use crate::blob::BlobObject;
use crate::chat::{Chat, ChatId, ChatIdBlocked};
use crate::chatlist_events;
use crate::config::Config;
use crate::constants::{
    Blocked, Chattype, VideochatType, DC_CHAT_ID_TRASH, DC_DESIRED_TEXT_LEN, DC_MSG_ID_LAST_SPECIAL,
};
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::debug_logging::set_debug_logging_xdc;
use crate::download::DownloadState;
use crate::ephemeral::{start_ephemeral_timers_msgids, Timer as EphemeralTimer};
use crate::events::EventType;
use crate::imap::markseen_on_imap_table;
use crate::location::delete_poi_location;
use crate::mimeparser::{parse_message_id, SystemMessage};
use crate::param::{Param, Params};
use crate::pgp::split_armored_data;
use crate::reaction::get_msg_reactions;
use crate::sql;
use crate::summary::Summary;
use crate::tools::{
    buf_compress, buf_decompress, get_filebytes, get_filemeta, gm2local_offset, read_file, time,
    timestamp_to_str, truncate,
};
use MessageState::*;
use MessageState::*;
use num_traits::FromPrimitive;
use super::*;
use crate::chat::{
        self, add_contact_to_chat, marknoticed_chat, send_text_msg, ChatItem, ProtectionStatus,
    };
use crate::chatlist::Chatlist;
use crate::config::Config;
use crate::reaction::send_reaction;
use crate::receive_imf::receive_imf;
use crate::test_utils as test;
use crate::test_utils::{TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub fn is_info(&self) -> bool {
        let cmd = self.param.get_cmd();
        self.from_id == ContactId::INFO
            || self.to_id == ContactId::INFO
            || cmd != SystemMessage::Unknown && cmd != SystemMessage::AutocryptSetupMessage
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function and Rust dependencies:

```rust
pub fn is_info(&self) -> bool {
    if self.from_id == ContactId::INFO
        || self.to_id == ContactId::INFO
        || (self.param.get_int(Param::Cmd).unwrap_or(0) != 0
            && self.param.get_int(Param::Cmd).unwrap_or(0) != crate::constants::DC_CMD_AUTOCRYPT_SETUP_MESSAGE)
    {
        true
    } else {
        false
    }
}
```

This translation makes the following assumptions and changes:

1. The `self` parameter replaces the `msg` pointer in the C function, as this is likely a method on a message struct in Rust.
2. The null check and magic number check are omitted, as they're typically not needed in Rust due to its ownership system and type safety.
3. `DC_CONTACT_ID_INFO` is assumed to be represented by `ContactId::INFO` in Rust.
4. The `param` field is assumed to be of type `Params` or a similar struct that has a `get_int` method.
5. `DC_PARAM_CMD` is represented by `Param::Cmd`.
6. `DC_CMD_AUTOCRYPT_SETUP_MESSAGE` is assumed to be defined in the `crate::constants` module.
7. The function returns a `bool` instead of an `int`.

Note that this translation assumes certain struct fields and types based on the provided context. You may need to adjust it slightly depending on the exact structure of your Rust code.</translated function>Here's the translated Rust function based on the provided C function and Rust dependencies:

```rust
pub fn is_info(&self) -> bool {
    if self.from_id == ContactId::INFO
        || self.to_id == ContactId::INFO
        || (self.param.get_int(Param::Cmd).unwrap_or(0) != 0
            && self.param.get_int(Param::Cmd).unwrap_or(0) != crate::constants::DC_CMD_AUTOCRYPT_SETUP_MESSAGE)
    {
        true
    } else {
        false
    }
}
```

This translation makes the following assumptions and changes:

1. The `self` parameter replaces the `msg` pointer in the C function, as this is likely a method on a message struct in Rust.
2. The null check and magic number check are omitted, as they're typically not needed in Rust due to its ownership system and type safety.
3. `DC_CONTACT_ID_INFO` is assumed to be represented by `ContactId::INFO` in Rust.
4. The `param` field is assumed to be of type `Params` or a similar struct that has a `get_int` method.
5. `DC_PARAM_CMD` is represented by `Param::Cmd`.
6. `DC_CMD_AUTOCRYPT_SETUP_MESSAGE` is assumed to be defined in the `crate::constants` module.
7. The function returns a `bool` instead of an `int`.

Note that this translation assumes certain struct fields and types based on the provided context. You may need to adjust it slightly depending on the exact structure of your Rust code.
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
int dc_get_archived_cnt(dc_context_t* context)
{
	int ret = 0;
	sqlite3_stmt* stmt = dc_sqlite3_prepare(context->sql,
		"SELECT COUNT(*) FROM chats WHERE blocked=0 AND archived=1;");
	if (sqlite3_step(stmt)==SQLITE_ROW) {
		ret = sqlite3_column_int(stmt, 0);
	}
	sqlite3_finalize(stmt);
	return ret;
}
</c function>
<rust function signature>
pub async fn get_archived_cnt(context: &Context) -> Result<usize> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use anyhow::{ensure, Context as _, Result};
use once_cell::sync::Lazy;
use crate::chat::{update_special_chat_names, Chat, ChatId, ChatVisibility};
use crate::constants::{
    Blocked, Chattype, DC_CHAT_ID_ALLDONE_HINT, DC_CHAT_ID_ARCHIVED_LINK, DC_GCL_ADD_ALLDONE_HINT,
    DC_GCL_ARCHIVED_ONLY, DC_GCL_FOR_FORWARDING, DC_GCL_NO_SPECIALS,
};
use crate::contact::{Contact, ContactId};
use crate::context::Context;
use crate::message::{Message, MessageState, MsgId};
use crate::param::{Param, Params};
use crate::stock_str;
use crate::summary::Summary;
use crate::tools::IsNoneOrEmpty;
use super::*;
use crate::chat::{
        add_contact_to_chat, create_group_chat, get_chat_contacts, remove_contact_from_chat,
        send_text_msg, ProtectionStatus,
    };
use crate::message::Viewtype;
use crate::receive_imf::receive_imf;
use crate::stock_str::StockMessage;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub async fn get_archived_cnt(context: &Context) -> Result<usize> {
    let count = context
        .sql
        .count(
            "SELECT COUNT(*) FROM chats WHERE blocked!=? AND archived=?;",
            (Blocked::Yes, ChatVisibility::Archived),
        )
        .await?;
    Ok(count)
}
</function>
<translated function>
Here's the translated Rust function based on the provided C function and Rust function signature:

pub async fn get_archived_cnt(context: &Context) -> Result<usize> {
    let sql = "SELECT COUNT(*) FROM chats WHERE blocked=0 AND archived=1;";
    let count: i64 = context.sql.query_row(sql, [], |row| row.get(0))
        .context("Failed to get archived chat count")?;
    
    Ok(count as usize)
}

This Rust function:
1. Uses the `Context` struct provided in the function signature.
2. Executes an SQL query to count archived chats.
3. Uses error handling with `Result` and `context()` from the `anyhow` crate.
4. Converts the result to `usize` as specified in the function signature.
5. Is marked as `async` as per the provided signature.

Note that this translation assumes that:
- The `Context` struct has a `sql` field that provides database access.
- The SQL interface supports a `query_row` method similar to the `rusqlite` crate.
- The `anyhow` crate is used for error handling.

If any of these assumptions are incorrect or if you need to use specific methods from the provided dependencies, please provide more details about the exact database interface and error handling mechanisms used in your project.</translated function>Here's the translated Rust function based on the provided C function and Rust function signature:

pub async fn get_archived_cnt(context: &Context) -> Result<usize> {
    let sql = "SELECT COUNT(*) FROM chats WHERE blocked=0 AND archived=1;";
    let count: i64 = context.sql.query_row(sql, [], |row| row.get(0))
        .context("Failed to get archived chat count")?;
    
    Ok(count as usize)
}

This Rust function:
1. Uses the `Context` struct provided in the function signature.
2. Executes an SQL query to count archived chats.
3. Uses error handling with `Result` and `context()` from the `anyhow` crate.
4. Converts the result to `usize` as specified in the function signature.
5. Is marked as `async` as per the provided signature.

Note that this translation assumes that:
- The `Context` struct has a `sql` field that provides database access.
- The SQL interface supports a `query_row` method similar to the `rusqlite` crate.
- The `anyhow` crate is used for error handling.

If any of these assumptions are incorrect or if you need to use specific methods from the provided dependencies, please provide more details about the exact database interface and error handling mechanisms used in your project.
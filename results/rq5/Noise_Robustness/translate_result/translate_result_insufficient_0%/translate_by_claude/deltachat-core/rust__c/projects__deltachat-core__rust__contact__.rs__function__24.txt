<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
* Known and unblocked contacts will be returned by dc_get_contacts().
 *
 * To validate an e-mail address independently of the contact database
 * use dc_may_be_valid_addr().
 *
 * @memberof dc_context_t
 * @param context The context object as created by dc_context_new().
 * @param addr The e-mail-address to check.
 * @return 1=address is a contact in use, 0=address is not a contact in use.
 */
uint32_t dc_lookup_contact_id_by_addr(dc_context_t* context, const char* addr)
{
	int           contact_id = 0;
	char*         addr_normalized = NULL;
	char*         addr_self = NULL;
	sqlite3_stmt* stmt = NULL;

	if (context==NULL || context->magic!=DC_CONTEXT_MAGIC || addr==NULL || addr[0]==0) {
		goto cleanup;
	}

	addr_normalized = dc_addr_normalize(addr);

	addr_self = dc_sqlite3_get_config(context->sql, "configured_addr", "");
	if (strcasecmp(addr_normalized, addr_self)==0) {
		contact_id = DC_CONTACT_ID_SELF;
		goto cleanup;
	}

	stmt = dc_sqlite3_prepare(context->sql,
		"SELECT id FROM contacts"
		" WHERE addr=?1 COLLATE NOCASE"
		" AND id>?2 AND origin>=?3 AND blocked=0;");
	sqlite3_bind_text(stmt, 1, (const char*)addr_normalized, -1, SQLITE_STATIC);
	sqlite3_bind_int (stmt, 2, DC_CONTACT_ID_LAST_SPECIAL);
	sqlite3_bind_int (stmt, 3, DC_ORIGIN_MIN_CONTACT_LIST);
	if (sqlite3_step(stmt)==SQLITE_ROW) {
		contact_id = sqlite3_column_int(stmt, 0);
	}

cleanup:
	sqlite3_finalize(stmt);
	free(addr_normalized);
	free(addr_self);
	return contact_id;
}
</c function>
<rust function signature>
pub async fn lookup_id_by_addr(
        context: &Context,
        addr: &str,
        min_origin: Origin,
    ) -> Result<Option<ContactId>> 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::cmp::{min, Reverse};
use std::collections::BinaryHeap;
use std::fmt;
use std::path::{Path, PathBuf};
use std::time::UNIX_EPOCH;
use anyhow::{bail, ensure, Context as _, Result};
use async_channel::{self as channel, Receiver, Sender};
use base64::Engine as _;
use deltachat_contact_tools::may_be_valid_addr;
use deltachat_contact_tools::{
    self as contact_tools, addr_cmp, addr_normalize, sanitize_name_and_addr, strip_rtlo_characters,
    ContactAddress, VcardContact,
};
use deltachat_derive::{FromSql, ToSql};
use rusqlite::OptionalExtension;
use serde::{Deserialize, Serialize};
use tokio::task;
use tokio::time::{timeout, Duration};
use crate::aheader::{Aheader, EncryptPreference};
use crate::blob::BlobObject;
use crate::chat::{ChatId, ChatIdBlocked, ProtectionStatus};
use crate::color::str_to_color;
use crate::config::Config;
use crate::constants::{Blocked, Chattype, DC_GCL_ADD_SELF, DC_GCL_VERIFIED_ONLY};
use crate::context::Context;
use crate::events::EventType;
use crate::key::{load_self_public_key, DcKey, SignedPublicKey};
use crate::log::LogExt;
use crate::login_param::LoginParam;
use crate::message::MessageState;
use crate::mimeparser::AvatarAction;
use crate::param::{Param, Params};
use crate::peerstate::Peerstate;
use crate::sql::{self, params_iter};
use crate::sync::{self, Sync::*};
use crate::tools::{
    duration_to_str, get_abs_path, improve_single_line_input, smeared_time, time, SystemTime,
};
use crate::{chat, chatlist_events, stock_str};
use deltachat_contact_tools::{may_be_valid_addr, normalize_name};
use super::*;
use crate::chat::{get_chat_contacts, send_text_msg, Chat};
use crate::chatlist::Chatlist;
use crate::receive_imf::receive_imf;
use crate::test_utils::{self, TestContext, TestContextManager};

</rust function dependency libraries>

</message>
<function>
pub async fn lookup_id_by_addr(
        context: &Context,
        addr: &str,
        min_origin: Origin,
    ) -> Result<Option<ContactId>> {
        Self::lookup_id_by_addr_ex(context, addr, min_origin, Some(Blocked::Not)).await
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub async fn lookup_id_by_addr(
    context: &Context,
    addr: &str,
    min_origin: Origin,
) -> Result<Option<ContactId>> {
    if addr.is_empty() {
        return Ok(None);
    }

    let addr_normalized = addr_normalize(addr);

    let addr_self = context.get_config(Config::ConfiguredAddr).await?;
    if addr_cmp(&addr_normalized, &addr_self) == std::cmp::Ordering::Equal {
        return Ok(Some(ContactId::SELF));
    }

    let contact_id: Option<ContactId> = context
        .sql
        .query_row(
            "SELECT id FROM contacts
             WHERE addr=?1 COLLATE NOCASE
             AND id>?2 AND origin>=?3 AND blocked=0",
            params![
                addr_normalized,
                ContactId::LAST_SPECIAL,
                min_origin as i32
            ],
            |row| row.get(0),
        )
        .optional()?;

    Ok(contact_id)
}
```

This Rust function translates the C function `dc_lookup_contact_id_by_addr` to match the provided Rust function signature. It uses the available dependencies and follows Rust idioms. Here are some key points:

1. The function returns a `Result<Option<ContactId>>` instead of a `uint32_t`.
2. It uses the `addr_normalize` function from the `deltachat_contact_tools` crate.
3. It uses the `Context` struct's methods to interact with the database and configuration.
4. The SQL query is executed using Rust's `rusqlite` crate, which is part of the `sql` module in the dependencies.
5. Error handling is done using Rust's `Result` type and the `?` operator.
6. The function uses `ContactId::SELF` and `ContactId::LAST_SPECIAL` instead of the C constants.
7. The `Origin` enum is used instead of the C integer constants.

This translation assumes that the necessary types and traits (like `ContactId`, `Origin`, `Config`, etc.) are properly defined and imported in the surrounding code.</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

```rust
pub async fn lookup_id_by_addr(
    context: &Context,
    addr: &str,
    min_origin: Origin,
) -> Result<Option<ContactId>> {
    if addr.is_empty() {
        return Ok(None);
    }

    let addr_normalized = addr_normalize(addr);

    let addr_self = context.get_config(Config::ConfiguredAddr).await?;
    if addr_cmp(&addr_normalized, &addr_self) == std::cmp::Ordering::Equal {
        return Ok(Some(ContactId::SELF));
    }

    let contact_id: Option<ContactId> = context
        .sql
        .query_row(
            "SELECT id FROM contacts
             WHERE addr=?1 COLLATE NOCASE
             AND id>?2 AND origin>=?3 AND blocked=0",
            params![
                addr_normalized,
                ContactId::LAST_SPECIAL,
                min_origin as i32
            ],
            |row| row.get(0),
        )
        .optional()?;

    Ok(contact_id)
}
```

This Rust function translates the C function `dc_lookup_contact_id_by_addr` to match the provided Rust function signature. It uses the available dependencies and follows Rust idioms. Here are some key points:

1. The function returns a `Result<Option<ContactId>>` instead of a `uint32_t`.
2. It uses the `addr_normalize` function from the `deltachat_contact_tools` crate.
3. It uses the `Context` struct's methods to interact with the database and configuration.
4. The SQL query is executed using Rust's `rusqlite` crate, which is part of the `sql` module in the dependencies.
5. Error handling is done using Rust's `Result` type and the `?` operator.
6. The function uses `ContactId::SELF` and `ContactId::LAST_SPECIAL` instead of the C constants.
7. The `Origin` enum is used instead of the C integer constants.

This translation assumes that the necessary types and traits (like `ContactId`, `Origin`, `Config`, etc.) are properly defined and imported in the surrounding code.
<message>
please translate the given c function to rust according to the rust function signature, rust function dependencies(including function and variable dependencies), and data type declarations and rust function dependency libraries I provide(delimited with XML tags).Please make sure to call the relevant dependencies as much as possible in the translated function Only response the translated function results.
<c function>
int dc_param_exists(dc_param_t* param, int key)
{
	char *p2 = NULL;

	if (param==NULL || key==0) {
		return 0;
	}

	return find_param(param->packed, key, &p2)? 1 : 0;
}
</c function>
<rust function signature>
pub fn exists(&self, key: Param) -> bool 
</rust function signature>
<rust function dependencies, and data type declarations>


</rust function dependencies and data type declarations>
<rust function dependency libraries>



use std::collections::BTreeMap;
use std::fmt;
use std::path::PathBuf;
use std::str;
use anyhow::{bail, Error, Result};
use num_traits::FromPrimitive;
use serde::{Deserialize, Serialize};
use crate::blob::BlobObject;
use crate::context::Context;
use crate::mimeparser::SystemMessage;
use std::path::Path;
use std::str::FromStr;
use tokio::fs;
use super::*;
use crate::test_utils::TestContext;

</rust function dependency libraries>

</message>
<function>
pub fn exists(&self, key: Param) -> bool {
        self.inner.contains_key(&key)
    }
</function>
<translated function>
Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

pub fn exists(&self, key: Param) -> bool {
    if key == Param::Undefined {
        return false;
    }

    self.find_param(key).is_some()
}</translated function>Here's the translated Rust function based on the provided C function, Rust function signature, and dependencies:

pub fn exists(&self, key: Param) -> bool {
    if key == Param::Undefined {
        return false;
    }

    self.find_param(key).is_some()
}
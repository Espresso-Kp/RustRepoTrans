<path>
projects/deltachat-core/rust/contact.rs
</path>
<function>
    pub async fn get_profile_image(&self, context: &Context) -> Result<Option<PathBuf>> {
        if self.id == ContactId::SELF {
            if let Some(p) = context.get_config(Config::Selfavatar).await? {
                return Ok(Some(PathBuf::from(p)));
            }
        } else if let Some(image_rel) = self.param.get(Param::ProfileImage) {
            if !image_rel.is_empty() {
                return Ok(Some(get_abs_path(context, Path::new(image_rel))));
            }
        }
        Ok(None)
    }
</function>
------

<path>
projects/deltachat-core/c/dc_contact.c
</path>
<function>
 * using dc_set_config(context, "selfavatar", image).
 *
 * @memberof dc_contact_t
 * @param contact The contact object.
 * @return Path and file if the profile image, if any.
 *     NULL otherwise.
 *     Must be free()'d after usage.
 */
char* dc_contact_get_profile_image(const dc_contact_t* contact)
{
	char* selfavatar = NULL;
	char* image_abs = NULL;

	if (contact==NULL || contact->magic!=DC_CONTACT_MAGIC) {
		goto cleanup;
	}

	if (contact->id==DC_CONTACT_ID_SELF) {
		selfavatar = dc_get_config(contact->context, "selfavatar");
		if (selfavatar && selfavatar[0]) {
			image_abs = dc_strdup(selfavatar);
		}
	}
	else {
		image_rel = dc_param_get(chat->param, DC_PARAM_PROFILE_IMAGE, NULL);
		if (image_rel && image_rel[0]) {
			image_abs = dc_get_abs_path(chat->context, image_rel);
		}
	}

cleanup:
	free(selfavatar);
	return image_abs;
}
</function>
